// Module: Winfile.obj
// Source: C:\Copter\source\sparkal\Winfile.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char;

// Type: int32_t;

// Type: char *;

// Type: void;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: /*packed*/ struct tagOFNA;
struct tagOFNA{ // packed(0x4c bytes) TI: 0x23d8
	/*+0x0*/   unsigned long lStructSize;
	/*+0x4*/   void * __ptr32 hwndOwner;
	/*+0x8*/   void * __ptr32 hInstance;
	/*+0xc*/   char * lpstrFilter;
	/*+0x10*/  char * lpstrCustomFilter;
	/*+0x14*/  unsigned long nMaxCustFilter;
	/*+0x18*/  unsigned long nFilterIndex;
	/*+0x1c*/  char * lpstrFile;
	/*+0x20*/  unsigned long nMaxFile;
	/*+0x24*/  char * lpstrFileTitle;
	/*+0x28*/  unsigned long nMaxFileTitle;
	/*+0x2c*/  char * lpstrInitialDir;
	/*+0x30*/  char * lpstrTitle;
	/*+0x34*/  unsigned long Flags;
	/*+0x38*/  unsigned short nFileOffset; // 0x2 bytes
	/*+0x3a*/  unsigned short nFileExtension; // 0x2 bytes
	/*+0x3c*/  char * lpstrDefExt;
	/*+0x40*/  long lCustData;
	/*+0x44*/  uint32_t (*lpfnHook)(void * __ptr32, uint32_t, uint32_t, long);
	/*+0x48*/  char * lpTemplateName;
};



// Contribution: 1:0008eed0-0008ff8c Module: 23, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048fed0
void FixResourceFilterString(/*packed*/ class basic_string<char>& sFilter, char chReplacementToken) {
	/*bp-0x4*/   char * szString;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   char chCurrentValue;

// LINE 34:
	i = 0x0;
// LINE 36:
	szString = sFilter->basic_string<char>::c_str();
// LINE 38:
	__asm        jmp    __WHILE_20;
__WHILE_20:
	while ((sFilter.reference-><basic_string_ref<char>+0x04:4> > i)) {
		// LINE 39:
			__asm        jmp    _T37;
		_T37:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, i;
			__asm        cmp    [eax+4], ecx;
			__asm        ja     _T7b;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T6c;
		_T6c:
			exit(0x1);
			__asm        jmp    _T7b;
		_T7b:
			__asm        jmp    _T80;
		_T80:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 1;
			__asm        jbe    _T165;

			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x1C], eax;
			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        je     _T10f;

			__asm        jmp    _Tac;
		_Tac:
			__asm        jmp    _Tb1;
		_Tb1:
			__asm        jmp    _Tb6;
		_Tb6:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _Tdb;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x20], eax;
			__asm        jmp    _Te7;

			__asm        jmp    _Te7;
		_Tdb:
			__asm        mov    dword ptr [ebp-0x20], 0;
			__asm        jmp    _Te7;
		_Te7:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x1C];
			__asm        call   basic_string_ref<char>::basic_string_ref<char>;
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _T116;
		_T10f:
			__asm        mov    dword ptr [ebp-0x18], 0;
		_T116:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T157;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x28], eax;
			__asm        cmp    dword ptr [ebp-0x28], 0;
			__asm        je     _T157;

			__asm        push   1;
			__asm        mov    ecx, [ebp-0x28];
			__asm        call   basic_string_ref<char>::`scalar deleting destructor';
			__asm        jmp    _T157;
		_T157:
			__asm        jmp    _T15c;
		_T15c:
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    ecx, sFilter;
			__asm        mov    [ecx+4], eax;
		_T165:
			__asm        jmp    _T16a;
		_T16a:
			__asm        jmp    _T16f;
		_T16f:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, i;
			__asm        mov    al, [eax+ecx];
			__asm        mov    chCurrentValue, al;
		// LINE 40:
			__asm        movsx  eax, chCurrentValue;
			__asm        movsx  ecx, chReplacementToken;
			__asm        cmp    eax, ecx;
			__asm        jne    _T557;
		// LINE 41:
			__asm        jmp    _T195;
		_T195:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, i;
			__asm        cmp    [eax+4], ecx;
			__asm        ja     _T1d9;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0x3C], eax;
			__asm        mov    eax, [ebp-0x3C];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T1ca;
		_T1ca:
			exit(0x1);
			__asm        jmp    _T1d9;
		_T1d9:
			__asm        jmp    _T1de;
		_T1de:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 1;
			__asm        jbe    _T2c3;

			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x34], eax;
			__asm        cmp    dword ptr [ebp-0x34], 0;
			__asm        je     _T26d;

			__asm        jmp    _T20a;
		_T20a:
			__asm        jmp    _T20f;
		_T20f:
			__asm        jmp    _T214;
		_T214:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T239;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x38], eax;
			__asm        jmp    _T245;

			__asm        jmp    _T245;
		_T239:
			__asm        mov    dword ptr [ebp-0x38], 0;
			__asm        jmp    _T245;
		_T245:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x38];
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x34];
			__asm        call   basic_string_ref<char>::basic_string_ref<char>;
			__asm        mov    [ebp-0x30], eax;
			__asm        jmp    _T274;
		_T26d:
			__asm        mov    dword ptr [ebp-0x30], 0;
		_T274:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T2b5;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x44], eax;
			__asm        mov    eax, [ebp-0x44];
			__asm        mov    [ebp-0x40], eax;
			__asm        cmp    dword ptr [ebp-0x40], 0;
			__asm        je     _T2b5;

			__asm        push   1;
			__asm        mov    ecx, [ebp-0x40];
			__asm        call   basic_string_ref<char>::`scalar deleting destructor';
			__asm        jmp    _T2b5;
		_T2b5:
			__asm        jmp    _T2ba;
		_T2ba:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    ecx, sFilter;
			__asm        mov    [ecx+4], eax;
		_T2c3:
			__asm        jmp    _T2c8;
		_T2c8:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        add    eax, i;
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T2db;
		_T2db:
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    byte ptr [eax], 0;
		// LINE 42:
			__asm        jmp    _T2e6;
		_T2e6:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, i;
			__asm        inc    ecx;
			__asm        cmp    [eax+4], ecx;
			__asm        ja     _T32b;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0x54], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T31c;
		_T31c:
			exit(0x1);
			__asm        jmp    _T32b;
		_T32b:
			__asm        jmp    _T330;
		_T330:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 1;
			__asm        jbe    _T415;

			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x4C], eax;
			__asm        cmp    dword ptr [ebp-0x4C], 0;
			__asm        je     _T3bf;

			__asm        jmp    _T35c;
		_T35c:
			__asm        jmp    _T361;
		_T361:
			__asm        jmp    _T366;
		_T366:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T38b;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x50], eax;
			__asm        jmp    _T397;

			__asm        jmp    _T397;
		_T38b:
			__asm        mov    dword ptr [ebp-0x50], 0;
			__asm        jmp    _T397;
		_T397:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x50];
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x4C];
			__asm        call   basic_string_ref<char>::basic_string_ref<char>;
			__asm        mov    [ebp-0x48], eax;
			__asm        jmp    _T3c6;
		_T3bf:
			__asm        mov    dword ptr [ebp-0x48], 0;
		_T3c6:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T407;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x5C], eax;
			__asm        mov    eax, [ebp-0x5C];
			__asm        mov    [ebp-0x58], eax;
			__asm        cmp    dword ptr [ebp-0x58], 0;
			__asm        je     _T407;

			__asm        push   1;
			__asm        mov    ecx, [ebp-0x58];
			__asm        call   basic_string_ref<char>::`scalar deleting destructor';
			__asm        jmp    _T407;
		_T407:
			__asm        jmp    _T40c;
		_T40c:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    ecx, sFilter;
			__asm        mov    [ecx+4], eax;
		_T415:
			__asm        jmp    _T41a;
		_T41a:
			__asm        jmp    _T41f;
		_T41f:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, i;
			__asm        movsx  eax, byte ptr [eax+ecx+1];
			__asm        movsx  ecx, chReplacementToken;
			__asm        cmp    eax, ecx;
			__asm        jne    _T557;
		// LINE 43:
			__asm        jmp    _T440;
		_T440:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, i;
			__asm        inc    ecx;
			__asm        cmp    [eax+4], ecx;
			__asm        ja     _T485;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0x6C], eax;
			__asm        mov    eax, [ebp-0x6C];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T476;
		_T476:
			exit(0x1);
			__asm        jmp    _T485;
		_T485:
			__asm        jmp    _T48a;
		_T48a:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 1;
			__asm        jbe    _T531;

			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x64], eax;
			__asm        cmp    dword ptr [ebp-0x64], 0;
			__asm        je     _T519;

			__asm        jmp    _T4b6;
		_T4b6:
			__asm        jmp    _T4bb;
		_T4bb:
			__asm        jmp    _T4c0;
		_T4c0:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T4e5;

			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x68], eax;
			__asm        jmp    _T4f1;

			__asm        jmp    _T4f1;
		_T4e5:
			__asm        mov    dword ptr [ebp-0x68], 0;
			__asm        jmp    _T4f1;
		_T4f1:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x68];
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x64];
			__asm        call   basic_string_ref<char>::basic_string_ref<char>;
			__asm        mov    [ebp-0x60], eax;
			__asm        jmp    _T520;
		_T519:
			__asm        mov    dword ptr [ebp-0x60], 0;
		_T520:
			__asm        mov    ecx, sFilter;
			__asm        call   basic_string<char>::delete_ref;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    ecx, sFilter;
			__asm        mov    [ecx+4], eax;
		_T531:
			__asm        jmp    _T536;
		_T536:
			__asm        mov    eax, sFilter;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, i;
			__asm        inc    ecx;
			__asm        add    eax, ecx;
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _T54c;
		_T54c:
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    byte ptr [eax], 0;
		// LINE 44:
			return;
		// LINE 47:
		_T557:
			i++;
		// LINE 48:
			__asm        jmp    __WHILE_20;
	}
// LINE 49:
_T55f:
	return;
}

// FUNCTION: COPTER_D 0x00490439
unsigned long GetLoadFilePath(char * pFilePath, int32_t nLoadTitleStringID, int32_t nFileFilterStringID, char * pInitialDirectory) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sTitle; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sFilter; // 0x8 bytes

// LINE 63:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T60;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sTitle.reference, eax;
	__asm        jmp    _T67;
_T60:
	sTitle.reference = 0x0;
_T67:
	sTitle.c_str_ptr = 0x0;
	__asm        jmp    _T73;
// LINE 64:
_T73:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tc3;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb8;
_Tb8:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sFilter.reference, eax;
	__asm        jmp    _Tca;
_Tc3:
	sFilter.reference = 0x0;
_Tca:
	sFilter.c_str_ptr = 0x0;
	__asm        jmp    _Td6;
// LINE 66:
_Td6:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T190;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    _T135;
_T135:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T159;
_T159:
	__asm        jmp    _T15e;
_T15e:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T17e;
_T17e:
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T2af;

	__asm        jmp    _T1d8;
_T190:
	__asm        jmp    _T195;
_T195:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1b9;
_T1b9:
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T2af;

	__asm        jmp    _T1d8;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        jne    _T2af;
// LINE 67:
_T1d8:
	__asm        mov    dword ptr [ebp-0x14], 0x80000000;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T217;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T217;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T217;
_T217:
	__asm        jmp    _T21c;
_T21c:
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T23e;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T23e:
	__asm        jmp    _T243;
_T243:
	__asm        mov    eax, sTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T27b;

	__asm        mov    eax, sTitle.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T27b;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T27b;
_T27b:
	__asm        jmp    _T280;
_T280:
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T2a2;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2a2:
	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    __RETURN;
// LINE 68:
_T2af:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    eax, nFileFilterStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T369;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFileFilterStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        jmp    _T30e;
_T30e:
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T332;
_T332:
	__asm        jmp    _T337;
_T337:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T357;
_T357:
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T41e;

	__asm        jmp    _T3b1;
_T369:
	__asm        jmp    _T36e;
_T36e:
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T392;
_T392:
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T41e;

	__asm        jmp    _T3b1;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        jne    _T41e;
// LINE 69:
_T3b1:
	__asm        mov    dword ptr [ebp-0x18], 0x80000000;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T3e2;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3e2:
	__asm        jmp    _T3e7;
_T3e7:
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T411;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T411:
	__asm        jmp    _T416;
_T416:
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    __RETURN;
// LINE 70:
_T41e:
	FixResourceFilterString(0x3f, sFilter.c_str_ptr);
// LINE 72:
	__asm        mov    eax, pInitialDirectory;
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, pFilePath;
	__asm        push   eax;
	__asm        call   GetLoadFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T489;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T489;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T489;
_T489:
	__asm        jmp    _T48e;
_T48e:
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T4b0;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4b0:
	__asm        jmp    _T4b5;
_T4b5:
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T4df;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4df:
	__asm        jmp    _T4e4;
_T4e4:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 73:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049092a
unsigned long GetLoadFilePath(char * pFilePath, char * pLoadTitle, char * pFilter, char * pInitialDirectory) {
	/*bp-0x4c*/  /*packed*/ struct tagOFNA ofn; // 0x4c bytes

// LINE 86:
	ofn.lStructSize = 0x4c;
// LINE 87:
	__asm        call   dword ptr ds:[0x6C3884];
	__asm        mov    ofn.hwndOwner, eax;
// LINE 88:
	ofn.hInstance = _ghWindowsInstance;
// LINE 89:
	ofn.lpstrFilter = pFilter;
// LINE 90:
	ofn.lpstrCustomFilter = 0x0;
// LINE 91:
	ofn.nMaxCustFilter = 0x0;
// LINE 92:
	ofn.nFilterIndex = 0x0;
// LINE 93:
	ofn.lpstrFile = pFilePath;
// LINE 94:
	ofn.nMaxFile = 0x104;
// LINE 95:
	ofn.lpstrFileTitle = 0x0;
// LINE 96:
	ofn.nMaxFileTitle = 0x0;
// LINE 97:
	ofn.lpstrInitialDir = pInitialDirectory;
// LINE 98:
	ofn.lpstrTitle = pLoadTitle;
// LINE 99:
	ofn.nFileOffset = 0x0;
// LINE 100:
	ofn.nFileExtension = 0x0;
// LINE 101:
	ofn.lpstrDefExt = 0x0;
// LINE 102:
	ofn.lCustData = 0x0;
// LINE 103:
	ofn.lpfnHook = 0x0;
// LINE 104:
	ofn.lpTemplateName = 0x0;
// LINE 105:
	ofn.Flags = 0x200000;
// LINE 108:
	__asm        lea    eax, ofn.lStructSize;
	__asm        push   eax;
	__asm        call   0x004C458E;
	__asm        test   eax, eax;
	__asm        jne    _Tad;
// LINE 109:
	return 0x80000000;
// LINE 110:
_Tad:
	return 0x0;
// LINE 111:
}

// FUNCTION: COPTER_D 0x004909e3
unsigned long GetSaveFilePath(char * pFilePath, int32_t nLoadTitleStringID, int32_t nFileFilterStringID, char * pInitialDirectory) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sTitle; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sFilter; // 0x8 bytes

// LINE 121:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T60;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sTitle.reference, eax;
	__asm        jmp    _T67;
_T60:
	sTitle.reference = 0x0;
_T67:
	sTitle.c_str_ptr = 0x0;
	__asm        jmp    _T73;
// LINE 122:
_T73:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tc3;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb8;
_Tb8:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sFilter.reference, eax;
	__asm        jmp    _Tca;
_Tc3:
	sFilter.reference = 0x0;
_Tca:
	sFilter.c_str_ptr = 0x0;
	__asm        jmp    _Td6;
// LINE 124:
_Td6:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T190;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    _T135;
_T135:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T159;
_T159:
	__asm        jmp    _T15e;
_T15e:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T17e;
_T17e:
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T2af;

	__asm        jmp    _T1d8;
_T190:
	__asm        jmp    _T195;
_T195:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1b9;
_T1b9:
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T2af;

	__asm        jmp    _T1d8;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        jne    _T2af;
// LINE 125:
_T1d8:
	__asm        mov    dword ptr [ebp-0x14], 0x80000000;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T217;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T217;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T217;
_T217:
	__asm        jmp    _T21c;
_T21c:
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T23e;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T23e:
	__asm        jmp    _T243;
_T243:
	__asm        mov    eax, sTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T27b;

	__asm        mov    eax, sTitle.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T27b;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T27b;
_T27b:
	__asm        jmp    _T280;
_T280:
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T2a2;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2a2:
	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    __RETURN;
// LINE 126:
_T2af:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    eax, nFileFilterStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T369;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFileFilterStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        jmp    _T30e;
_T30e:
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T332;
_T332:
	__asm        jmp    _T337;
_T337:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T357;
_T357:
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T41e;

	__asm        jmp    _T3b1;
_T369:
	__asm        jmp    _T36e;
_T36e:
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T392;
_T392:
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    _T41e;

	__asm        jmp    _T3b1;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        jne    _T41e;
// LINE 127:
_T3b1:
	__asm        mov    dword ptr [ebp-0x18], 0x80000000;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T3e2;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3e2:
	__asm        jmp    _T3e7;
_T3e7:
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T411;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T411:
	__asm        jmp    _T416;
_T416:
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    __RETURN;
// LINE 128:
_T41e:
	FixResourceFilterString(0x3f, sFilter.c_str_ptr);
// LINE 130:
	__asm        mov    eax, pInitialDirectory;
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, pFilePath;
	__asm        push   eax;
	__asm        call   GetSaveFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T489;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T489;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T489;
_T489:
	__asm        jmp    _T48e;
_T48e:
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     _T4b0;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4b0:
	__asm        jmp    _T4b5;
_T4b5:
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     _T4df;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4df:
	__asm        jmp    _T4e4;
_T4e4:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 131:
__RETURN:
}

// FUNCTION: COPTER_D 0x00490ed4
unsigned long GetSaveFilePath(char * pFilePath, char * pSaveTitle, char * pFilter, char * pInitialDirectory) {
	/*bp-0x4c*/  /*packed*/ struct tagOFNA ofn; // 0x4c bytes

// LINE 143:
	ofn.lStructSize = 0x4c;
// LINE 144:
	__asm        call   dword ptr ds:[0x6C3884];
	__asm        mov    ofn.hwndOwner, eax;
// LINE 145:
	ofn.hInstance = _ghWindowsInstance;
// LINE 146:
	ofn.lpstrFilter = pFilter;
// LINE 147:
	ofn.lpstrCustomFilter = 0x0;
// LINE 148:
	ofn.nMaxCustFilter = 0x0;
// LINE 149:
	ofn.nFilterIndex = 0x0;
// LINE 150:
	ofn.lpstrFile = pFilePath;
// LINE 151:
	ofn.nMaxFile = 0x104;
// LINE 152:
	ofn.lpstrFileTitle = 0x0;
// LINE 153:
	ofn.nMaxFileTitle = 0x0;
// LINE 154:
	ofn.lpstrInitialDir = pInitialDirectory;
// LINE 155:
	ofn.lpstrTitle = pSaveTitle;
// LINE 156:
	ofn.nFileOffset = 0x0;
// LINE 157:
	ofn.nFileExtension = 0x0;
// LINE 158:
	ofn.lpstrDefExt = 0x0;
// LINE 159:
	ofn.lCustData = 0x0;
// LINE 160:
	ofn.lpfnHook = 0x0;
// LINE 161:
	ofn.lpTemplateName = 0x0;
// LINE 162:
	ofn.Flags = 0x200000;
// LINE 165:
	__asm        lea    eax, ofn.lStructSize;
	__asm        push   eax;
	__asm        call   0x004C4594;
	__asm        test   eax, eax;
	__asm        jne    _Tad;
// LINE 166:
	return 0x80000000;
// LINE 167:
_Tad:
	return 0x0;
// LINE 168:
}

