// Module: Winfile.obj
// Source: C:\Copter\source\sparkal\Winfile.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char;

// Type: int32_t;

// Type: char *;

// Type: void;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: struct tagOFNA;
struct tagOFNA{
	unsigned long lStructSize;
	void * __ptr32 hwndOwner;
	void * __ptr32 hInstance;
	char * lpstrFilter;
	char * lpstrCustomFilter;
	unsigned long nMaxCustFilter;
	unsigned long nFilterIndex;
	char * lpstrFile;
	unsigned long nMaxFile;
	char * lpstrFileTitle;
	unsigned long nMaxFileTitle;
	char * lpstrInitialDir;
	char * lpstrTitle;
	unsigned long Flags;
	unsigned short nFileOffset;
	unsigned short nFileExtension;
	char * lpstrDefExt;
	long lCustData;
	uint32_t (*lpfnHook)(void * __ptr32, uint32_t, uint32_t, long);
	char * lpTemplateName;
};



// Contribution: 1:0008eed0-0008ff8c Module: 23, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048fed0
void FixResourceFilterString(class basic_string<char>& sFilter, char chReplacementToken) {
	char chCurrentValue;
	int32_t i;
	char * szString;

// LINE 34:
	__asm        mov    i, 0;
// LINE 36:
	__asm        mov    ecx, sFilter;
	__asm        call   basic_string<char>::c_str;
	__asm        mov    szString, eax;
// LINE 38:
	__asm        jmp    near ptr 0x0048FEF0;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    near ptr 0x0049042F;
// LINE 39:
	__asm        jmp    near ptr 0x0048FF07;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x0048FF4B;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048FF3C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048FF4B;

	__asm        jmp    near ptr 0x0048FF50;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x00490035;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0048FFDF;

	__asm        jmp    near ptr 0x0048FF7C;

	__asm        jmp    near ptr 0x0048FF81;

	__asm        jmp    near ptr 0x0048FF86;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0048FFAB;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0048FFB7;

	__asm        jmp    near ptr 0x0048FFB7;

	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0048FFB7;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0048FFE6;

	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490027;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00490027;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490027;

	__asm        jmp    near ptr 0x0049002C;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, sFilter;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049003A;

	__asm        jmp    near ptr 0x0049003F;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx];
	__asm        mov    chCurrentValue, al;
// LINE 40:
	__asm        movsx  eax, chCurrentValue;
	__asm        movsx  ecx, chReplacementToken;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00490427;
// LINE 41:
	__asm        jmp    near ptr 0x00490065;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x004900A9;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049009A;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004900A9;

	__asm        jmp    near ptr 0x004900AE;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x00490193;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0049013D;

	__asm        jmp    near ptr 0x004900DA;

	__asm        jmp    near ptr 0x004900DF;

	__asm        jmp    near ptr 0x004900E4;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00490109;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00490115;

	__asm        jmp    near ptr 0x00490115;

	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x00490115;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00490144;

	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490185;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00490185;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490185;

	__asm        jmp    near ptr 0x0049018A;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, sFilter;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00490198;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        add    eax, i;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004901AB;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    byte ptr [eax], 0;
// LINE 42:
	__asm        jmp    near ptr 0x004901B6;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x004901FB;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004901EC;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004901FB;

	__asm        jmp    near ptr 0x00490200;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x004902E5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0049028F;

	__asm        jmp    near ptr 0x0049022C;

	__asm        jmp    near ptr 0x00490231;

	__asm        jmp    near ptr 0x00490236;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049025B;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00490267;

	__asm        jmp    near ptr 0x00490267;

	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x00490267;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00490296;

	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004902D7;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004902D7;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x004902D7;

	__asm        jmp    near ptr 0x004902DC;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, sFilter;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004902EA;

	__asm        jmp    near ptr 0x004902EF;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, i;
	__asm        movsx  eax, byte ptr [eax+ecx+1];
	__asm        movsx  ecx, chReplacementToken;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00490427;
// LINE 43:
	__asm        jmp    near ptr 0x00490310;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x00490355;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490346;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490355;

	__asm        jmp    near ptr 0x0049035A;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x00490401;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004903E9;

	__asm        jmp    near ptr 0x00490386;

	__asm        jmp    near ptr 0x0049038B;

	__asm        jmp    near ptr 0x00490390;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004903B5;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004903C1;

	__asm        jmp    near ptr 0x004903C1;

	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x004903C1;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004903F0;

	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        mov    ecx, sFilter;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, sFilter;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00490406;

	__asm        mov    eax, sFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, i;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0049041C;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    byte ptr [eax], 0;
// LINE 44:
	__asm        jmp    near ptr 0x00490434;
// LINE 47:
	__asm        inc    i;
// LINE 48:
	__asm        jmp    near ptr 0x0048FEF0;
// LINE 49:
	__asm        jmp    near ptr 0x00490434;
}

// FUNCTION: COPTER_D 0x00490439
unsigned long GetLoadFilePath(char * pFilePath, int32_t nLoadTitleStringID, int32_t nFileFilterStringID, char * pInitialDirectory) {
	class basic_string<char> sFilter;
	class basic_string<char> sTitle;

// LINE 63:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00490499;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049048E;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sTitle.reference, eax;
	__asm        jmp    near ptr 0x004904A0;

	__asm        mov    sTitle.reference, 0;
	__asm        mov    sTitle.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004904AC;
// LINE 64:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004904FC;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004904F1;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sFilter.reference, eax;
	__asm        jmp    near ptr 0x00490503;

	__asm        mov    sFilter.reference, 0;
	__asm        mov    sFilter.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049050F;
// LINE 66:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x004905C9;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    near ptr 0x0049056E;

	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00490592;

	__asm        jmp    near ptr 0x00490597;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004905B7;

	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x004906E8;

	__asm        jmp    near ptr 0x00490611;

	__asm        jmp    near ptr 0x004905CE;

	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004905F2;

	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x004906E8;

	__asm        jmp    near ptr 0x00490611;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        jne    near ptr 0x004906E8;
// LINE 67:
	__asm        mov    dword ptr [ebp-0x14], 0x80000000;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490650;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00490650;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490650;

	__asm        jmp    near ptr 0x00490655;

	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00490677;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049067C;

	__asm        mov    eax, sTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004906B4;

	__asm        mov    eax, sTitle.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004906B4;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x004906B4;

	__asm        jmp    near ptr 0x004906B9;

	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x004906DB;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004906E0;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x00490925;
// LINE 68:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    eax, nFileFilterStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x004907A2;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFileFilterStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        jmp    near ptr 0x00490747;

	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0049076B;

	__asm        jmp    near ptr 0x00490770;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00490790;

	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x00490857;

	__asm        jmp    near ptr 0x004907EA;

	__asm        jmp    near ptr 0x004907A7;

	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004907CB;

	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x00490857;

	__asm        jmp    near ptr 0x004907EA;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        jne    near ptr 0x00490857;
// LINE 69:
	__asm        mov    dword ptr [ebp-0x18], 0x80000000;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x0049081B;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490820;

	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x0049084A;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049084F;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x00490925;
// LINE 70:
	__asm        push   0x3F;
	__asm        lea    eax, sFilter.c_str_ptr;
	__asm        push   eax;
	__asm        call   FixResourceFilterString;
	__asm        add    esp, 8;
// LINE 72:
	__asm        mov    eax, pInitialDirectory;
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, pFilePath;
	__asm        push   eax;
	__asm        call   GetLoadFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004908C2;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004908C2;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x004908C2;

	__asm        jmp    near ptr 0x004908C7;

	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x004908E9;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004908EE;

	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00490918;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049091D;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x00490925;
// LINE 73:
}

// FUNCTION: COPTER_D 0x0049092a
unsigned long GetLoadFilePath(char * pFilePath, char * pLoadTitle, char * pFilter, char * pInitialDirectory) {
	struct tagOFNA ofn;

// LINE 86:
	__asm        mov    ofn.lStructSize, 0x4C;
// LINE 87:
	__asm        call   dword ptr ds:[0x6C3884];
	__asm        mov    ofn.hwndOwner, eax;
// LINE 88:
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        mov    ofn.hInstance, eax;
// LINE 89:
	__asm        mov    eax, pFilter;
	__asm        mov    ofn.lpstrFilter, eax;
// LINE 90:
	__asm        mov    ofn.lpstrCustomFilter, 0;
// LINE 91:
	__asm        mov    ofn.nMaxCustFilter, 0;
// LINE 92:
	__asm        mov    ofn.nFilterIndex, 0;
// LINE 93:
	__asm        mov    eax, pFilePath;
	__asm        mov    ofn.lpstrFile, eax;
// LINE 94:
	__asm        mov    ofn.nMaxFile, 0x104;
// LINE 95:
	__asm        mov    ofn.lpstrFileTitle, 0;
// LINE 96:
	__asm        mov    ofn.nMaxFileTitle, 0;
// LINE 97:
	__asm        mov    eax, pInitialDirectory;
	__asm        mov    ofn.lpstrInitialDir, eax;
// LINE 98:
	__asm        mov    eax, pLoadTitle;
	__asm        mov    ofn.lpstrTitle, eax;
// LINE 99:
	__asm        mov    ofn.nFileOffset, 0;
// LINE 100:
	__asm        mov    ofn.nFileExtension, 0;
// LINE 101:
	__asm        mov    ofn.lpstrDefExt, 0;
// LINE 102:
	__asm        mov    ofn.lCustData, 0;
// LINE 103:
	__asm        mov    ofn.lpfnHook, 0;
// LINE 104:
	__asm        mov    ofn.lpTemplateName, 0;
// LINE 105:
	__asm        mov    ofn.Flags, 0x200000;
// LINE 108:
	__asm        lea    eax, ofn.lStructSize;
	__asm        push   eax;
	__asm        call   0x004C458E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004909D7;
// LINE 109:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x004909DE;
// LINE 110:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004909DE;
// LINE 111:
}

// FUNCTION: COPTER_D 0x004909e3
unsigned long GetSaveFilePath(char * pFilePath, int32_t nLoadTitleStringID, int32_t nFileFilterStringID, char * pInitialDirectory) {
	class basic_string<char> sFilter;
	class basic_string<char> sTitle;

// LINE 121:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00490A43;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00490A38;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sTitle.reference, eax;
	__asm        jmp    near ptr 0x00490A4A;

	__asm        mov    sTitle.reference, 0;
	__asm        mov    sTitle.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00490A56;
// LINE 122:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00490AA6;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00490A9B;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sFilter.reference, eax;
	__asm        jmp    near ptr 0x00490AAD;

	__asm        mov    sFilter.reference, 0;
	__asm        mov    sFilter.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00490AB9;
// LINE 124:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x00490B73;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nLoadTitleStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    near ptr 0x00490B18;

	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00490B3C;

	__asm        jmp    near ptr 0x00490B41;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00490B61;

	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x00490C92;

	__asm        jmp    near ptr 0x00490BBB;

	__asm        jmp    near ptr 0x00490B78;

	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00490B9C;

	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x00490C92;

	__asm        jmp    near ptr 0x00490BBB;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        jne    near ptr 0x00490C92;
// LINE 125:
	__asm        mov    dword ptr [ebp-0x14], 0x80000000;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490BFA;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00490BFA;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490BFA;

	__asm        jmp    near ptr 0x00490BFF;

	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00490C21;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490C26;

	__asm        mov    eax, sTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490C5E;

	__asm        mov    eax, sTitle.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00490C5E;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490C5E;

	__asm        jmp    near ptr 0x00490C63;

	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00490C85;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490C8A;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x00490ECF;
// LINE 126:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    eax, nFileFilterStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x00490D4C;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFileFilterStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2078], eax;
	__asm        jmp    near ptr 0x00490CF1;

	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00490D15;

	__asm        jmp    near ptr 0x00490D1A;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00490D3A;

	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x00490E01;

	__asm        jmp    near ptr 0x00490D94;

	__asm        jmp    near ptr 0x00490D51;

	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00490D75;

	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        jne    near ptr 0x00490E01;

	__asm        jmp    near ptr 0x00490D94;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        jne    near ptr 0x00490E01;
// LINE 127:
	__asm        mov    dword ptr [ebp-0x18], 0x80000000;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00490DC5;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490DCA;

	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00490DF4;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490DF9;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x00490ECF;
// LINE 128:
	__asm        push   0x3F;
	__asm        lea    eax, sFilter.c_str_ptr;
	__asm        push   eax;
	__asm        call   FixResourceFilterString;
	__asm        add    esp, 8;
// LINE 130:
	__asm        mov    eax, pInitialDirectory;
	__asm        push   eax;
	__asm        lea    ecx, sFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, pFilePath;
	__asm        push   eax;
	__asm        call   GetSaveFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sFilter.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFilter.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00490E6C;

	__asm        mov    eax, sFilter.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00490E6C;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00490E6C;

	__asm        jmp    near ptr 0x00490E71;

	__asm        cmp    sFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00490E93;

	__asm        mov    eax, sFilter.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490E98;

	__asm        lea    ecx, sTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00490EC2;

	__asm        mov    eax, sTitle.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00490EC7;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x00490ECF;
// LINE 131:
}

// FUNCTION: COPTER_D 0x00490ed4
unsigned long GetSaveFilePath(char * pFilePath, char * pSaveTitle, char * pFilter, char * pInitialDirectory) {
	struct tagOFNA ofn;

// LINE 143:
	__asm        mov    ofn.lStructSize, 0x4C;
// LINE 144:
	__asm        call   dword ptr ds:[0x6C3884];
	__asm        mov    ofn.hwndOwner, eax;
// LINE 145:
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        mov    ofn.hInstance, eax;
// LINE 146:
	__asm        mov    eax, pFilter;
	__asm        mov    ofn.lpstrFilter, eax;
// LINE 147:
	__asm        mov    ofn.lpstrCustomFilter, 0;
// LINE 148:
	__asm        mov    ofn.nMaxCustFilter, 0;
// LINE 149:
	__asm        mov    ofn.nFilterIndex, 0;
// LINE 150:
	__asm        mov    eax, pFilePath;
	__asm        mov    ofn.lpstrFile, eax;
// LINE 151:
	__asm        mov    ofn.nMaxFile, 0x104;
// LINE 152:
	__asm        mov    ofn.lpstrFileTitle, 0;
// LINE 153:
	__asm        mov    ofn.nMaxFileTitle, 0;
// LINE 154:
	__asm        mov    eax, pInitialDirectory;
	__asm        mov    ofn.lpstrInitialDir, eax;
// LINE 155:
	__asm        mov    eax, pSaveTitle;
	__asm        mov    ofn.lpstrTitle, eax;
// LINE 156:
	__asm        mov    ofn.nFileOffset, 0;
// LINE 157:
	__asm        mov    ofn.nFileExtension, 0;
// LINE 158:
	__asm        mov    ofn.lpstrDefExt, 0;
// LINE 159:
	__asm        mov    ofn.lCustData, 0;
// LINE 160:
	__asm        mov    ofn.lpfnHook, 0;
// LINE 161:
	__asm        mov    ofn.lpTemplateName, 0;
// LINE 162:
	__asm        mov    ofn.Flags, 0x200000;
// LINE 165:
	__asm        lea    eax, ofn.lStructSize;
	__asm        push   eax;
	__asm        call   0x004C4594;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00490F81;
// LINE 166:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x00490F88;
// LINE 167:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00490F88;
// LINE 168:
}

