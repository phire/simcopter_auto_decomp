// Module: gameapp1.obj
// Source: C:\Copter\source\sparkal\gameapp1.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ class Radio (forward reference);
// Radio Class implementation not found

// Type: /*packed*/ class CopterSparkalPalette;
// VTABLE: COPTER_D 0x00591118
class CopterSparkalPalette : public SparkalPalette
{ // packed(0x10 bytes) TI: 0x47bb
public:
	void CopterSparkalPalette(/*packed*/ struct SparkalColor*, int32_t);
	void CopterSparkalPalette();
	int32_t GetNextDarkerColorIndex(int32_t);
	int32_t GetNextLighterColorIndex(int32_t);
};

// Type: /*packed*/ class CopterSparkalPalette;
// VTABLE: COPTER_D 0x00591118
class CopterSparkalPalette : public SparkalPalette
{ // packed(0x10 bytes) TI: 0x47ce
public:
	void CopterSparkalPalette(/*packed*/ struct SparkalColor*, int32_t);
	void CopterSparkalPalette();
	int32_t GetNextDarkerColorIndex(int32_t);
	int32_t GetNextLighterColorIndex(int32_t);
	virtual void ~CopterSparkalPalette() /* override */; // synthetic
};

// Type: uint32_t;

// Type: /*unpacked*/ class CGameApp (forward reference);
// CGameApp Class implementation not found

// Type: /*packed*/ class CGameCommander (forward reference);
// VTABLE: COPTER_D 0x00590ff8
class CGameCommander : public CDefaultCommander
{ // packed(0xc bytes) TI: 0x1d27
public:
	void CGameCommander();
	virtual void ~CGameCommander() /* override */;
	virtual unsigned long Idle() /* override */;
	virtual void ProcessSetFocus(); // vtable+0x24
	virtual void ProcessKeyDown(long, /*packed*/ struct CommandSystem&, int32_t&, int32_t&); // vtable+0x28
	virtual void ProcessKeyDown(long); // vtable+0x2c
	virtual void ProcessKeyUp(long, /*packed*/ struct CommandSystem&); // vtable+0x30
	virtual void ProcessKeyUp(long); // vtable+0x34
	virtual unsigned long OnCharacter(long); // vtable+0x38
	virtual unsigned long OnLMouseDown(int32_t, int32_t); // vtable+0x3c
	virtual unsigned long OnLMouseUp(int32_t, int32_t); // vtable+0x40
	virtual unsigned long OnRMouseDown(int32_t, int32_t); // vtable+0x44
	virtual unsigned long OnRMouseUp(int32_t, int32_t); // vtable+0x48
	virtual unsigned long OnMouseMove(int32_t, int32_t) /* override */;
	virtual unsigned long OnWindowActivate() /* override */;
	virtual unsigned long OnWindowDeactivate() /* override */;
	virtual void ProcessSystemCloseRequest(); // vtable+0x4c
	virtual void SetNewGameApp(/*unpacked*/ class CGameApp*); // vtable+0x50
	/*+0x8*/   /*unpacked*/ class CGameApp *myGameApp;
};

// Type: /*packed*/ class NotificationPreferenceManager (forward reference);
// VTABLE: COPTER_D 0x00590de8
class NotificationPreferenceManager : public PreferenceManager
{ // packed(0x30 bytes) TI: 0x2539
public:
	/*+0x28*/  /*packed*/ class list<NotificationItem> myNotifications; // 0x8 bytes
	void NotificationPreferenceManager(long, long, long, int32_t);
	virtual long SetPref(/*packed*/ class PreferenceItem*) /* override */;
	virtual long SetPref(long, char *, long) /* override */;
	virtual int32_t AddNotification(/*packed*/ class NotificationItem&); // vtable+0x34
	virtual int32_t AddNotification(long, /*packed*/ class NotificationSink*); // vtable+0x38
	virtual int32_t RemoveNotification(/*packed*/ class NotificationSink*, long); // vtable+0x3c
	virtual void DoNotification(long); // vtable+0x40
};

// Type: void ();

// Type: /*packed*/ class SoundSystem;
// VTABLE: COPTER_D 0x0058f440
class SoundSystem{ // packed(0x74 bytes) TI: 0x1a78
public:
	void SoundSystem();
	void ~SoundSystem();
	int32_t Initialize(void * __ptr32);
	void DeInitialize();
	virtual int32_t GetVolume(long *); // vtable+0x0
	virtual int32_t SetVolume(long); // vtable+0x4
	void EnableSound();
	void DisableSound();
	long IsSoundEnabled();
	/*+0x4*/   long bSoundEnabled;
	static unsigned long dwMaxWaveFormatExSize;
protected:
	/*+0x8*/   /*packed*/ class DigitalSound *primarySound;
	/*+0xc*/   /*packed*/ struct IDirectSoundBuffer *lpPrimarySound;
	/*+0x10*/  /*packed*/ struct IDirectSound *lpDirectSound;
	/*+0x14*/  /*packed*/ struct _DSCAPS dsCapabilities; // 0x60 bytes
};

// Type: /*packed*/ class SoundManager;
// VTABLE: COPTER_D 0x0058f448
class SoundManager{ // packed(0x204 bytes) TI: 0x1997
public:
	/*+0x4*/   /*packed*/ class Sound *sound[128]; // 0x200 bytes
	void AddSound(/*packed*/ class Sound*, int32_t);
	void AddDigitalSound(const /*packed*/ class basic_string<char>&, int32_t, int32_t);
	void AddDigitalSound(long, int32_t);
	virtual long PlaySoundA(int32_t, long, int32_t); // vtable+0x0
	virtual void StopSound(int32_t); // vtable+0x4
	virtual void StopAllSounds(); // vtable+0x8
	/*packed*/ class Sound* GetSound(int32_t);
	void SoundManager();
	void ~SoundManager();
	virtual void DeleteAllSounds(); // vtable+0xc
};

// Type: /*unpacked*/ class SoundManager;
// VTABLE: COPTER_D 0x0058f448
class SoundManager{ // not packed(0x204 bytes) TI: 0x4673
public:
	/*+0x4*/   /*unpacked*/ class Sound *sound[128]; // 0x200 bytes
	void AddSound(/*unpacked*/ class Sound*, int32_t);
	void AddDigitalSound(const /*unpacked*/ class basic_string<char>&, int32_t, int32_t);
	void AddDigitalSound(long, int32_t);
	virtual long PlaySoundA(int32_t, long, int32_t); // vtable+0x0
	virtual void StopSound(int32_t); // vtable+0x4
	virtual void StopAllSounds(); // vtable+0x8
	/*unpacked*/ class Sound* GetSound(int32_t);
	void SoundManager();
	void ~SoundManager();
	virtual void DeleteAllSounds(); // vtable+0xc
};

// Type: /*packed*/ class SoundQueue (forward reference);
// VTABLE: COPTER_D 0x0058f3f0
class SoundQueue{ // packed(0x18 bytes) TI: 0x24ef
public:
	void SoundQueue();
	void ~SoundQueue();
	virtual int32_t Initialize(); // vtable+0x0
	virtual void DeInitialize(int32_t); // vtable+0x4
	virtual void ClearQueue(int32_t); // vtable+0x8
	/*packed*/ class SoundQueue& operator+=(/*packed*/ struct SoundQueueItem*);
	/*packed*/ class SoundQueue& operator+=(/*packed*/ class Sound*);
	virtual int32_t StartPauseCallback(long); // vtable+0xc
	virtual void EndPauseCallback(); // vtable+0x10
	virtual void PlayNextSoundInQueue(); // vtable+0x14
	virtual void RemoveNextSoundInQueue(); // vtable+0x18
	virtual void SoundQueueCompletionCallback(); // vtable+0x1c
	// calltype: NearC
	static void StaticSoundQueueCompletionCallback(long);
	virtual void SoundQueueWaitTimeCallback(); // vtable+0x20
	// calltype: NearC
	static void StaticSoundQueueWaitTimeCallback(long);
	virtual int32_t GetMutex(unsigned long); // vtable+0x24
	virtual void ReleaseMutex(); // vtable+0x28
protected:
	/*+0x4*/   /*packed*/ class list<SoundQueueItem *> mySoundQueueItemList; // 0x8 bytes
	/*+0xc*/   int32_t bOK;
	/*+0x10*/  long bMutex;
	/*+0x14*/  int32_t nWaitTimerSet;
	// calltype: NearStd
	static void WindowsStaticSoundQueueCompletionCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
	// calltype: NearStd
	static void WindowsStaticSoundQueueWaitTimeCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
};

// Type: /*packed*/ class MessageDisplayManager;
// VTABLE: COPTER_D 0x005907d0
class MessageDisplayManager{ // packed(0x54 bytes) TI: 0x10c3
public:
	void MessageDisplayManager();
	void ~MessageDisplayManager();
	virtual int32_t Initialize(); // vtable+0x0
	virtual void DisplayCurrentMessages(/*packed*/ class CBackBuffer*); // vtable+0x4
	virtual void AddNewMessage(/*packed*/ class basic_string<char>&); // vtable+0x8
	virtual void AddNewMessage(char *); // vtable+0xc
	/*+0x4*/   /*packed*/ class MPoint ptFirstMessage; // 0x8 bytes
	/*+0xc*/   long lMaximumMessageCount;
protected:
	/*+0x10*/  /*packed*/ class basic_string<char> *sMessages;
	/*+0x14*/  /*packed*/ class MTimer timerMessageDisplay; // 0x10 bytes
	/*+0x24*/  /*packed*/ class MFont fontMessages; // 0x1c bytes
	/*+0x40*/  long lVerticalSpaceBetweenMessages;
	/*+0x44*/  unsigned long lDisplayTime;
	/*+0x48*/  long lCurrentDisplayedMessageCount;
	/*+0x4c*/  int32_t bDisplayMessages;
	/*+0x50*/  /*packed*/ struct SparkalColor colorMessage;
};

// Type: char *;

// Type: void;

// Type: /*packed*/ struct GamePreferences (forward reference);
struct GamePreferences{ // packed(0x20 bytes) TI: 0x2652
	/*+0x0*/   long lQuadPixelType;
	/*+0x4*/   long bShowingPalette;
	/*+0x8*/   long bShowingDebugWindow;
	/*+0xc*/   long bPlayingSoundTrack;
	/*+0x10*/  long lStartupMode;
	/*+0x14*/  long lProcessPriority;
	/*+0x18*/  long lThreadPriority;
	/*+0x1c*/  long lLanguage;
	void GamePreferences();
};

// Type: /*packed*/ struct RenderPreferences (forward reference);
struct RenderPreferences{ // packed(0x10 bytes) TI: 0x24b3
	/*+0x0*/   long bShowObjectTexture;
	/*+0x4*/   long bShowGroundTexture;
	/*+0x8*/   long bShowSky;
	/*+0xc*/   long bShowPanelsWhenInHelicopter;
	void RenderPreferences();
};

// Type: long;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char;

// Type: int32_t;

// Type: unsigned long;

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: short;

// Type: /*packed*/ class Version;
// VTABLE: COPTER_D 0x0058f5b8
class Version{ // packed(0xc bytes) TI: 0x241c
public:
	void Version();
	virtual void ~Version(); // vtable+0x0
	int32_t GetApplicationName(char *&);
	long GetApplicationVersion(int32_t);
	int32_t GetApplicationVersion(char *&);
	int32_t GetApplicationCopyright(char *&);
	int32_t GetApplicationDebugVersion(char *&);
	// calltype: NearC
	static int32_t GetSystemType();
	// calltype: NearC
	static long GetSystemVersion(int32_t);
	// calltype: NearC
	static int32_t GetSystemVersion(char *);
	// calltype: NearC
	static long GetCPUVersion();
	// calltype: NearC
	static long GetCPUSpeed();
protected:
	/*+0x4*/   unsigned char * lpTransBlock;
	/*+0x8*/   void * __ptr32 lpFVData;
};

// Type: /*packed*/ struct _MEMORYSTATUS;
struct _MEMORYSTATUS{ // packed(0x20 bytes) TI: 0x241e
	/*+0x0*/   unsigned long dwLength;
	/*+0x4*/   unsigned long dwMemoryLoad;
	/*+0x8*/   unsigned long dwTotalPhys;
	/*+0xc*/   unsigned long dwAvailPhys;
	/*+0x10*/  unsigned long dwTotalPageFile;
	/*+0x14*/  unsigned long dwAvailPageFile;
	/*+0x18*/  unsigned long dwTotalVirtual;
	/*+0x1c*/  unsigned long dwAvailVirtual;
};

// Type: void * __ptr32;

// Type: /*packed*/ struct Shortcut;
struct Shortcut{ // packed(0x18 bytes) TI: 0x1083
	/*+0x0*/   long lDeviceID;
	/*+0x4*/   long lCommand;
	/*+0x8*/   long lKey;
	/*+0xc*/   long lModifiers;
	/*+0x10*/  long lPush;
	/*+0x14*/  long lIgnoreModifiers;
};

// Type: /*packed*/ class list<Shortcut>::iterator (forward reference);
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{ // packed(0x4 bytes) TI: 0x1081
protected:
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
	/*packed*/ struct Shortcut& operator*();
	/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator++();
	/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator--();
};

// Type: /*packed*/ class list<Shortcut> (forward reference);
class list<Shortcut>{ // packed(0x8 bytes) TI: 0x1b79
	using void_pointer = void * __ptr32;
	struct list<Shortcut>::list_node{ // packed(0x20 bytes) TI: 0x1b8e
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ struct Shortcut data; // 0x18 bytes
	};
protected:
	static /*packed*/ class allocator<list<Shortcut>::list_node> list_node_allocator;
	static /*packed*/ class allocator<Shortcut> value_allocator;
	using value_type = /*packed*/ struct Shortcut;
	using value_allocator_type = /*packed*/ class allocator<Shortcut>;
	using pointer = /*packed*/ struct Shortcut*;
	using reference = /*packed*/ struct Shortcut&;
	using const_reference = const /*packed*/ struct Shortcut&;
	using list_node_allocator_type = /*packed*/ class allocator<list<Shortcut>::list_node>;
	using link_type = /*packed*/ struct list<Shortcut>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<Shortcut>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1b8c
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<Shortcut>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<Shortcut>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<Shortcut>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<Shortcut>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<Shortcut>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<Shortcut>::list_node *free_list;
	static /*packed*/ struct list<Shortcut>::list_node *next_avail;
	static /*packed*/ struct list<Shortcut>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<Shortcut>::list_node* get_node();
	void put_node(/*packed*/ struct list<Shortcut>::list_node*);
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
	{ // packed(0x4 bytes) TI: 0x1081
	protected:
		/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
		/*packed*/ struct Shortcut& operator*();
		/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
		/*packed*/ class list<Shortcut>::iterator& operator++();
		/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
		/*packed*/ class list<Shortcut>::iterator& operator--();
	};
	class list<Shortcut>::const_iterator : public bidirectional_iterator<Shortcut,int>
	{ // packed(0x4 bytes) TI: 0x1b8a
	protected:
		/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<Shortcut>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<Shortcut>::const_iterator&);
		const /*packed*/ struct Shortcut& operator*();
		/*packed*/ class list<Shortcut>::const_iterator operator++(int32_t);
		/*packed*/ class list<Shortcut>::const_iterator& operator++();
		/*packed*/ class list<Shortcut>::const_iterator operator--(int32_t);
		/*packed*/ class list<Shortcut>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int>;
public:
	void list<Shortcut>(const /*packed*/ class list<Shortcut>&);
	void list<Shortcut>(const /*packed*/ struct Shortcut*, const /*packed*/ struct Shortcut*);
	void list<Shortcut>(uint32_t, const /*packed*/ struct Shortcut&);
	void list<Shortcut>();
	/*packed*/ class list<Shortcut>::const_iterator begin();
	/*packed*/ class list<Shortcut>::iterator begin();
	/*packed*/ class list<Shortcut>::const_iterator end();
	/*packed*/ class list<Shortcut>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ struct Shortcut& front();
	/*packed*/ struct Shortcut& front();
	const /*packed*/ struct Shortcut& back();
	/*packed*/ struct Shortcut& back();
	void swap(/*packed*/ class list<Shortcut>&);
	void insert(/*packed*/ class list<Shortcut>::iterator, uint32_t, const /*packed*/ struct Shortcut&);
	void insert(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::const_iterator, /*packed*/ class list<Shortcut>::const_iterator);
	void insert(/*packed*/ class list<Shortcut>::iterator, const /*packed*/ struct Shortcut*, const /*packed*/ struct Shortcut*);
	/*packed*/ class list<Shortcut>::iterator insert(/*packed*/ class list<Shortcut>::iterator, const /*packed*/ struct Shortcut&);
	void push_front(const /*packed*/ struct Shortcut&);
	void push_back(const /*packed*/ struct Shortcut&);
	void erase(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
	void erase(/*packed*/ class list<Shortcut>::iterator);
	void pop_front();
	void pop_back();
	void ~list<Shortcut>();
	/*packed*/ class list<Shortcut>& operator=(const /*packed*/ class list<Shortcut>&);
protected:
	void transfer(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
public:
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&, /*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&, /*packed*/ class list<Shortcut>::iterator);
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&);
	void remove(const /*packed*/ struct Shortcut&);
	void unique();
	void merge(/*packed*/ class list<Shortcut>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ struct list<Shortcut>::list_node (forward reference);
struct list<Shortcut>::list_node{ // packed(0x20 bytes) TI: 0x1b8e
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ struct Shortcut data; // 0x18 bytes
};

// Type: /*packed*/ class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{ // packed(0x4 bytes) TI: 0x1081
protected:
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
	/*packed*/ struct Shortcut& operator*();
	/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator++();
	/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator--();
};

// Type: /*packed*/ struct list<CopterGameMode>::list_node_buffer (forward reference);
struct list<CopterGameMode>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1a1a
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<CopterGameMode>::list_node *buffer;
};

// Type: /*packed*/ class list<CopterGameMode> (forward reference);
class list<CopterGameMode>{ // packed(0x8 bytes) TI: 0x19f6
	using void_pointer = void * __ptr32;
	struct list<CopterGameMode>::list_node{ // packed(0xc bytes) TI: 0x1a1c
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class CopterGameMode data;
	};
protected:
	static /*packed*/ class allocator<list<CopterGameMode>::list_node> list_node_allocator;
	static /*packed*/ class allocator<CopterGameMode> value_allocator;
	using value_type = /*packed*/ class CopterGameMode;
	using value_allocator_type = /*packed*/ class allocator<CopterGameMode>;
	using pointer = /*packed*/ class CopterGameMode*;
	using reference = /*packed*/ class CopterGameMode&;
	using const_reference = const /*packed*/ class CopterGameMode&;
	using list_node_allocator_type = /*packed*/ class allocator<list<CopterGameMode>::list_node>;
	using link_type = /*packed*/ struct list<CopterGameMode>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<CopterGameMode>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1a1a
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<CopterGameMode>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<CopterGameMode>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<CopterGameMode>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<CopterGameMode>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<CopterGameMode>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<CopterGameMode>::list_node *free_list;
	static /*packed*/ struct list<CopterGameMode>::list_node *next_avail;
	static /*packed*/ struct list<CopterGameMode>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<CopterGameMode>::list_node* get_node();
	void put_node(/*packed*/ struct list<CopterGameMode>::list_node*);
	/*+0x0*/   /*packed*/ struct list<CopterGameMode>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
	{ // packed(0x4 bytes) TI: 0x1a18
	protected:
		/*+0x0*/   /*packed*/ struct list<CopterGameMode>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<CopterGameMode>::iterator&);
		/*packed*/ class CopterGameMode& operator*();
		/*packed*/ class list<CopterGameMode>::iterator operator++(int32_t);
		/*packed*/ class list<CopterGameMode>::iterator& operator++();
		/*packed*/ class list<CopterGameMode>::iterator operator--(int32_t);
		/*packed*/ class list<CopterGameMode>::iterator& operator--();
	};
	class list<CopterGameMode>::const_iterator : public bidirectional_iterator<CopterGameMode,int>
	{ // packed(0x4 bytes) TI: 0x1a0b
	protected:
		/*+0x0*/   /*packed*/ struct list<CopterGameMode>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<CopterGameMode>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<CopterGameMode>::const_iterator&);
		const /*packed*/ class CopterGameMode& operator*();
		/*packed*/ class list<CopterGameMode>::const_iterator operator++(int32_t);
		/*packed*/ class list<CopterGameMode>::const_iterator& operator++();
		/*packed*/ class list<CopterGameMode>::const_iterator operator--(int32_t);
		/*packed*/ class list<CopterGameMode>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int>;
public:
	void list<CopterGameMode>(const /*packed*/ class list<CopterGameMode>&);
	void list<CopterGameMode>(const /*packed*/ class CopterGameMode*, const /*packed*/ class CopterGameMode*);
	void list<CopterGameMode>(uint32_t, const /*packed*/ class CopterGameMode&);
	void list<CopterGameMode>();
	/*packed*/ class list<CopterGameMode>::const_iterator begin();
	/*packed*/ class list<CopterGameMode>::iterator begin();
	/*packed*/ class list<CopterGameMode>::const_iterator end();
	/*packed*/ class list<CopterGameMode>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class CopterGameMode& front();
	/*packed*/ class CopterGameMode& front();
	const /*packed*/ class CopterGameMode& back();
	/*packed*/ class CopterGameMode& back();
	void swap(/*packed*/ class list<CopterGameMode>&);
	void insert(/*packed*/ class list<CopterGameMode>::iterator, uint32_t, const /*packed*/ class CopterGameMode&);
	void insert(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>::const_iterator, /*packed*/ class list<CopterGameMode>::const_iterator);
	void insert(/*packed*/ class list<CopterGameMode>::iterator, const /*packed*/ class CopterGameMode*, const /*packed*/ class CopterGameMode*);
	/*packed*/ class list<CopterGameMode>::iterator insert(/*packed*/ class list<CopterGameMode>::iterator, const /*packed*/ class CopterGameMode&);
	void push_front(const /*packed*/ class CopterGameMode&);
	void push_back(const /*packed*/ class CopterGameMode&);
	void erase(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>::iterator);
	void erase(/*packed*/ class list<CopterGameMode>::iterator);
	void pop_front();
	void pop_back();
	void ~list<CopterGameMode>();
	/*packed*/ class list<CopterGameMode>& operator=(const /*packed*/ class list<CopterGameMode>&);
protected:
	void transfer(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>::iterator);
public:
	void splice(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>&, /*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>::iterator);
	void splice(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>&, /*packed*/ class list<CopterGameMode>::iterator);
	void splice(/*packed*/ class list<CopterGameMode>::iterator, /*packed*/ class list<CopterGameMode>&);
	void remove(const /*packed*/ class CopterGameMode&);
	void unique();
	void merge(/*packed*/ class list<CopterGameMode>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class list<CopterGameMode>::iterator;
class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
{ // packed(0x4 bytes) TI: 0x1a18
protected:
	/*+0x0*/   /*packed*/ struct list<CopterGameMode>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<CopterGameMode>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<CopterGameMode>::iterator&);
	/*packed*/ class CopterGameMode& operator*();
	/*packed*/ class list<CopterGameMode>::iterator operator++(int32_t);
	/*packed*/ class list<CopterGameMode>::iterator& operator++();
	/*packed*/ class list<CopterGameMode>::iterator operator--(int32_t);
	/*packed*/ class list<CopterGameMode>::iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<Shortcut,int>;
struct bidirectional_iterator<Shortcut,int>{ // packed(0x1 bytes) TI: 0x1ee7
};

// Type: /*packed*/ class CDefaultCommander;
// VTABLE: COPTER_D 0x005912d0
class CDefaultCommander : public ICommander
{ // packed(0x8 bytes) TI: 0x20ed
public:
	void CDefaultCommander();
	virtual void ~CDefaultCommander() /* override */;
	virtual unsigned long Idle() /* override */;
	virtual unsigned long OnCharacter(char, int32_t) /* override */;
	virtual unsigned long OnMouseDown(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseUp(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseMove(int32_t, int32_t) /* override */;
	virtual unsigned long OnWindowActivate() /* override */;
	virtual unsigned long OnWindowDeactivate() /* override */;
};

// Type: /*packed*/ struct bidirectional_iterator<CopterGameMode,int>;
struct bidirectional_iterator<CopterGameMode,int>{ // packed(0x1 bytes) TI: 0x184c
};

// Type: /*packed*/ class PreferenceManager;
// VTABLE: COPTER_D 0x00590db0
class PreferenceManager{ // packed(0x28 bytes) TI: 0x26c8
protected:
	/*+0x4*/   int32_t bSaveFileAtAllChanges;
	/*+0x8*/   /*packed*/ class list<PreferenceItem> myPreferences; // 0x8 bytes
	/*+0x10*/  /*packed*/ class MIFF *miffPrefsFile;
	/*+0x14*/  long lFileCreator;
	/*+0x18*/  long lFileType;
	/*+0x1c*/  long lFileVersion;
	/*+0x20*/  int32_t bPrefsDirty;
	/*+0x24*/  int32_t bPrefsLocked;
public:
	void PreferenceManager(long, long, long, int32_t);
	int32_t IPreferenceManager(char *);
	virtual void ~PreferenceManager(); // vtable+0x0
	virtual long SaveAllPrefs(); // vtable+0x4
	virtual long LoadAllPrefs(); // vtable+0x8
	virtual long ClearPrefsMemory(); // vtable+0xc
	virtual void EnumeratePrefs(); // vtable+0x10
	virtual /*packed*/ class PreferenceItem* GetPrefPointer(long); // vtable+0x14
	virtual /*packed*/ class PreferenceItem* GetPrefCopy(long); // vtable+0x18
	virtual char * GetPrefDataPointer(long); // vtable+0x1c
	virtual char * GetPrefDataCopy(long); // vtable+0x20
	virtual long GetPrefDataLength(long); // vtable+0x24
	virtual long SetPref(/*packed*/ class PreferenceItem*); // vtable+0x28
	virtual long SetPref(long, char *, long); // vtable+0x2c
	virtual long RemovePref(long); // vtable+0x30
};

// Type: /*packed*/ class SparkalPalette;
// VTABLE: COPTER_D 0x005910f8
class SparkalPalette{ // packed(0x10 bytes) TI: 0x47c7
public:
	/*+0x4*/   /*packed*/ struct SparkalColor *pColors;
	/*+0x8*/   long lColors;
	/*+0xc*/   int32_t bOwnColors;
	void SparkalPalette(/*packed*/ struct SparkalColor*, int32_t, unsigned long);
	void SparkalPalette();
	virtual void ~SparkalPalette(); // vtable+0x0
	virtual void GetRGBValue(int32_t, /*packed*/ struct SparkalColor&); // vtable+0x4
	virtual void GetNearestIndex(/*packed*/ struct SparkalColor&, int32_t&); // vtable+0x8
	virtual void FadeToWhite(long); // vtable+0xc
	virtual void FadeToBlack(long); // vtable+0x10
	virtual void FadeToPalette(/*packed*/ struct SparkalColor, long, long); // vtable+0x14
	// calltype: NearC
	static void FadeToPalette(/*packed*/ struct SparkalColor, /*packed*/ struct SparkalColor*, long, long);
	void FadeToRGB(/*packed*/ struct SparkalColor&, long);
	// calltype: NearC
	static void SetSystemPaletteEntriesToRGB(/*packed*/ struct SparkalColor&);
	virtual void ImplementNewPalette(/*packed*/ struct SparkalColor*); // vtable+0x18
};

// Type: /*unpacked*/ class ICommander (forward reference);
// ICommander Class implementation not found



// Contribution: 1:00086830-00089a9c Module: 28, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487830
static void $E118() {

	__asm        call   $E115;
	__asm        call   $E117;
	__asm        jmp    near ptr 0x00487845;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0048784a
static void $E115() {

	__asm        mov    ecx, 0x604808;
	__asm        call   CopterSparkalPalette::CopterSparkalPalette;
	__asm        jmp    near ptr 0x0048785F;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487864
static void $E117() {

	__asm        push   0x487881;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048787C;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487881
static void $E116() {

	__asm        jmp    near ptr 0x0048788C;

	__asm        mov    ecx, 0x604808;
	__asm        call   SparkalPalette::~SparkalPalette;
	__asm        jmp    near ptr 0x0048789B;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004878a0
static void $E123() {

	__asm        call   $E120;
	__asm        call   $E122;
	__asm        jmp    near ptr 0x004878B5;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004878ba
static void $E120() {

	__asm        mov    ecx, 0x604588;
	__asm        call   SoundSystem::SoundSystem;
	__asm        jmp    near ptr 0x004878CF;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004878d4
static void $E122() {

	__asm        push   0x4878F1;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004878EC;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004878f1
static void $E121() {

	__asm        mov    ecx, 0x604588;
	__asm        call   SoundSystem::~SoundSystem;
	__asm        jmp    near ptr 0x00487906;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0048790b
static void $E128() {

	__asm        call   $E125;
	__asm        call   $E127;
	__asm        jmp    near ptr 0x00487920;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487925
static void $E125() {

	__asm        mov    ecx, 0x604600;
	__asm        call   SoundManager::SoundManager;
	__asm        jmp    near ptr 0x0048793A;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0048793f
static void $E127() {

	__asm        push   0x48795C;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00487957;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0048795c
static void $E126() {

	__asm        mov    ecx, 0x604600;
	__asm        call   SoundManager::~SoundManager;
	__asm        jmp    near ptr 0x00487971;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487976
static void $E133() {

	__asm        call   $E130;
	__asm        call   $E132;
	__asm        jmp    near ptr 0x0048798B;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487990
static void $E130() {

	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::Radio;
	__asm        jmp    near ptr 0x004879A5;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004879aa
static void $E132() {

	__asm        push   0x4879C7;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004879C2;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004879c7
static void $E131() {

	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::~Radio;
	__asm        jmp    near ptr 0x004879DC;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004879e1
static void $E138() {

	__asm        call   $E135;
	__asm        call   $E137;
	__asm        jmp    near ptr 0x004879F6;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004879fb
static void $E135() {

	__asm        mov    dword ptr [ebp-4], 2;
	__asm        mov    dword ptr [ebp-8], 0x604450;
_T17:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T31;

	__asm        mov    ecx, [ebp-8];
	__asm        call   SoundQueue::SoundQueue;
	__asm        add    dword ptr [ebp-8], 0x18;
	__asm        jmp    _T17;
_T31:
	__asm        jmp    near ptr 0x00487A31;

	__asm        jmp    near ptr 0x00487A36;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487a3b
static void $E137() {

	__asm        push   0x487A58;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00487A53;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487a58
static void $E136() {

	__asm        mov    dword ptr [ebp-4], 2;
	__asm        mov    dword ptr [ebp-8], 0x604450;
	__asm        mov    eax, [ebp-4];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 3;
	__asm        add    [ebp-8], eax;
_T23:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T3d;

	__asm        sub    dword ptr [ebp-8], 0x18;
	__asm        mov    ecx, [ebp-8];
	__asm        call   SoundQueue::~SoundQueue;
	__asm        jmp    _T23;
_T3d:
	__asm        jmp    near ptr 0x00487A9A;

	__asm        jmp    near ptr 0x00487A9F;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487aa4
static void $E143() {

	__asm        call   $E140;
	__asm        call   $E142;
	__asm        jmp    near ptr 0x00487AB9;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487abe
static void $E140() {

	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::MessageDisplayManager;
	__asm        jmp    near ptr 0x00487AD3;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487ad8
static void $E142() {

	__asm        push   0x487AF5;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00487AF0;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00487af5
static void $E141() {

	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::~MessageDisplayManager;
	__asm        jmp    near ptr 0x00487B0A;
}

// FUNCTION: COPTER_D 0x00487b0f
void GamePreferences::GamePreferences() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 97:
	__asm        jmp    near ptr 0x00487B6F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00487b77
void RenderPreferences::RenderPreferences() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 1;
// LINE 106:
	__asm        jmp    near ptr 0x00487BAF;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00487bb7
 CGameApp::CGameApp() {

	__asm        mov    ecx, this;
	__asm        call   CSparkalApp::CSparkalApp;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x590F2C;
	__asm        jmp    near ptr 0x00487BDA;

	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        call   GraphicWindowManager::GraphicWindowManager;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::GameModeMainMenuData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::GameModePickCareerCityData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::GameModePlayData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::GameModeHangarData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::GameModeCatalogData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::GameModeMissionLogData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::GameModeInventoryData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x36BC;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4164], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4168], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x416C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4170], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _Tff;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4170], eax;
	__asm        jmp    _Tff;
_Tff:
	__asm        jmp    near ptr 0x00487CBB;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4174;
	__asm        call   MIFF::MIFF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4308;
	__asm        call   GamePreferences::GamePreferences;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4328;
	__asm        call   RenderPreferences::RenderPreferences;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x433C], 0;
	__asm        inc    list<CopterGameMode>::number_of_lists;
	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    list<CopterGameMode>::free_list, 0;
	__asm        je     _T16d;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T34a;
_T16d:
	__asm        mov    eax, list<CopterGameMode>::next_avail;
	__asm        cmp    list<CopterGameMode>::last, eax;
	__asm        jne    _T335;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    _T1cc;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00487D79;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T1cc:
	__asm        jmp    near ptr 0x00487D88;

	__asm        jmp    near ptr 0x00487D8D;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x20], 0x155;
	__asm        lea    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    dword ptr [ebp-0x24], 1;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T211;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T217;
_T211:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
_T217:
	__asm        jmp    near ptr 0x00487DD3;

	__asm        jmp    near ptr 0x00487DD8;

	__asm        jmp    near ptr 0x00487DDD;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x58];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _T284;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00487E31;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T284:
	__asm        jmp    near ptr 0x00487E40;

	__asm        jmp    near ptr 0x00487E45;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<CopterGameMode>::buffer_list;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    list<CopterGameMode>::buffer_list, eax;
	__asm        mov    eax, list<CopterGameMode>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<CopterGameMode>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x34], 0x155;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2eb;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T2f1;
_T2eb:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
_T2f1:
	__asm        jmp    near ptr 0x00487EAD;

	__asm        jmp    near ptr 0x00487EB2;

	__asm        jmp    near ptr 0x00487EB7;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<CopterGameMode>::next_avail;
	__asm        mov    list<CopterGameMode>::last, eax;
	__asm        jmp    near ptr 0x00487ED2;

	__asm        mov    eax, list<CopterGameMode>::next_avail;
	__asm        mov    [ebp-0x14], eax;
	__asm        add    list<CopterGameMode>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T34a;
_T335:
	__asm        mov    eax, list<CopterGameMode>::next_avail;
	__asm        mov    [ebp-0x18], eax;
	__asm        add    list<CopterGameMode>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x5C], eax;
_T34a:
	__asm        jmp    near ptr 0x00487F06;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4338], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4338];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4338];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00487F40;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F38;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x590F30;
// LINE 120:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::InitializeMemberVariables;
// LINE 123:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::EnterMode;
// LINE 124:
	__asm        jmp    near ptr 0x00487F6A;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00487f72
 CGameApp::~CGameApp() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F38;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x590F30;
// LINE 137:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _T75;
// LINE 138:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T68;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T68;
// LINE 139:
_T68:
	this-><CGameApp+0x50:4> = 0x0;
// LINE 141:
_T75:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb0;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 143:
	this-><CGameApp+0x04:4> = 0x0;
// LINE 145:
_Tb0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     _T110;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42BC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T100;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   PaletteBuffer::~PaletteBuffer;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048806D;

	__asm        jmp    _T100;
// LINE 147:
_T100:
	this-><CGameApp+0x42bc:4> = 0x0;
// LINE 149:
_T110:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _T15b;
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T14e;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+0x64];
	__asm        jmp    _T14e;
// LINE 151:
_T14e:
	this-><CGameApp+0x34:4> = 0x0;
// LINE 155:
_T15b:
	__asm        cmp    gGameCommander, 0;
	__asm        je     _T19b;
// LINE 156:
	__asm        mov    eax, gGameCommander;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T191;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T191;
// LINE 157:
_T191:
	gGameCommander = 0x0;
// LINE 159:
_T19b:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T1e8;
// LINE 160:
	__asm        mov    eax, gDebugWindow;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T1de;

	__asm        mov    ecx, [ebp-0x28];
	__asm        call   CDebugWindow::~CDebugWindow;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048814B;

	__asm        jmp    _T1de;
// LINE 161:
_T1de:
	gDebugWindow = 0x0;
// LINE 163:
_T1e8:
	__asm        cmp    gszAppDirectory, 0;
	__asm        je     _T219;
// LINE 164:
	__asm        mov    eax, gszAppDirectory;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 165:
	gszAppDirectory = 0x0;
// LINE 169:
_T219:
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::DeInitialize;
// LINE 170:
	__asm        push   1;
	__asm        mov    ecx, 0x604450;
	__asm        call   SoundQueue::DeInitialize;
// LINE 171:
	__asm        push   1;
	__asm        lea    ecx, gSoundQueue[1]<vftable>;
	__asm        call   SoundQueue::DeInitialize;
// LINE 176:
	__asm        cmp    G_VRAppInitCalled, 0;
	__asm        je     _T266;
// LINE 178:
	__asm        call   VRAppDeInit;
// LINE 181:
	__asm        call   VRCloseResourceFile;
// LINE 182:
	__asm        call   VRUnLoadAllResources;
// LINE 183:
	__asm        mov    eax, G_main_mp;
	__asm        push   eax;
	__asm        call   VRFreeMemPool;
	__asm        add    esp, 4;
// LINE 190:
_T266:
	__asm        mov    eax, ScratchPoolIndex;
	__asm        push   eax;
	__asm        call   S2AllocFreePool;
	__asm        add    esp, 4;
// LINE 191:
	__asm        mov    eax, MainPoolIndex;
	__asm        push   eax;
	__asm        call   S2AllocFreePool;
	__asm        add    esp, 4;
// LINE 194:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SavePreferences;
// LINE 195:
	__asm        jmp    near ptr 0x00488204;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0048821E;

	__asm        jmp    near ptr 0x00488223;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0048823F;

	__asm        jmp    near ptr 0x00488244;

	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x00488283;

	__asm        dec    list<CopterGameMode>::number_of_lists;
	__asm        jne    _T32e;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::deallocate_buffers;
_T32e:
	__asm        jmp    near ptr 0x004882A5;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4174;
	__asm        call   MIFF::~MIFF;
	__asm        jmp    near ptr 0x004882BB;

	__asm        jmp    near ptr 0x004882C0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004882DA;

	__asm        jmp    near ptr 0x004882DF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004882FB;

	__asm        jmp    near ptr 0x00488300;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x0048833F;

	__asm        dec    list<Shortcut>::number_of_lists;
	__asm        jne    _T3ea;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::deallocate_buffers;
_T3ea:
	__asm        jmp    near ptr 0x00488361;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3784;
	__asm        call   CharList::~CharList;
	__asm        jmp    near ptr 0x00488377;

	__asm        jmp    near ptr 0x0048837C;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2CE8;
	__asm        call   list<Shortcut>::~list<Shortcut>;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2CD8;
	__asm        call   CharList::~CharList;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004883B4;

	__asm        jmp    near ptr 0x004883B9;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2228;
	__asm        call   list<Shortcut>::~list<Shortcut>;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2218;
	__asm        call   CharList::~CharList;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004883F1;

	__asm        jmp    near ptr 0x004883F6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1768];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00488410;

	__asm        jmp    near ptr 0x00488415;

	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1768;
	__asm        call   list<Shortcut>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1768;
	__asm        call   list<Shortcut>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1768];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x00488468;

	__asm        dec    list<Shortcut>::number_of_lists;
	__asm        jne    _T513;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1768;
	__asm        call   list<Shortcut>::deallocate_buffers;
_T513:
	__asm        jmp    near ptr 0x0048848A;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1758;
	__asm        call   CharList::~CharList;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004884B1;

	__asm        jmp    near ptr 0x004884B6;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xCA8;
	__asm        call   list<Shortcut>::~list<Shortcut>;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC98;
	__asm        call   CharList::~CharList;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004884EE;

	__asm        jmp    near ptr 0x004884F3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E8];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0048850D;

	__asm        jmp    near ptr 0x00488512;

	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1E8;
	__asm        call   list<Shortcut>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1E8;
	__asm        call   list<Shortcut>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E8];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x00488565;

	__asm        dec    list<Shortcut>::number_of_lists;
	__asm        jne    _T610;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1E8;
	__asm        call   list<Shortcut>::deallocate_buffers;
_T610:
	__asm        jmp    near ptr 0x00488587;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1D8;
	__asm        call   CharList::~CharList;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004885AE;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        jmp    near ptr 0x004885C1;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeCoreData::~GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        call   GraphicWindowManager::~GraphicWindowManager;
	__asm        mov    ecx, this;
	__asm        call   CSparkalApp::~CSparkalApp;
}

// FUNCTION: COPTER_D 0x004885ed
void  CGameApp::InitializeMemberVariables() {
// LINE 204:
	this-><CGameApp+0x1c:4> = 0x0;
// LINE 205:
	this-><CGameApp+0x18:4> = 0x0;
// LINE 206:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 207:
	this-><CGameApp+0x24:4> = 0x0;
// LINE 208:
	this-><CGameApp+0x28:4> = 0x0;
// LINE 209:
	this-><CGameApp+0x42c4:4> = 0x1;
// LINE 210:
	this-><CGameApp+0x42c8:4> = 0x0;
// LINE 211:
	this-><CGameApp+0x30:4> = 0x1;
// LINE 212:
	this-><CGameApp+0x2c:4> = 0x0;
// LINE 213:
	gGameApp = this;
// LINE 214:
	this-><CGameApp+0x50:4> = 0x0;
// LINE 215:
	this-><CGameApp+0x04:4> = 0x0;
// LINE 216:
	this-><CGameApp+0x34:4> = 0x0;
// LINE 217:
	this-><CGameApp+0x54:4> = 0x0;
// LINE 218:
	this-><CGameApp+0x42bc:4> = 0x0;
// LINE 219:
	this-><CGameApp+0x38:4> = 0x0;
// LINE 220:
	this-><CGameApp+0x42c0:4> = 0x0;
// LINE 221:
	this-><CGameApp+0x42cc:4> = 0x0;
// LINE 222:
	this-><CGameApp+0x42d0:4> = 0x0;
// LINE 223:
	this-><CGameApp+0x4304:4> = 0x1;
// LINE 224:
	this-><CGameApp+0x4340:4> = 0x0;
// LINE 225:
	this-><CGameApp+0x4344:4> = 0x41200000;
// LINE 228:
	this-><CGameApp+0x42d4:4> = 0x280;
// LINE 229:
	this-><CGameApp+0x42d8:4> = 0x1e0;
// LINE 230:
	this-><CGameApp+0x42dc:4> = 0x8;
// LINE 231:
	this-><CGameApp+0x42e0:4> = 0x280;
// LINE 232:
	this-><CGameApp+0x42e4:4> = 0x1e0;
// LINE 233:
	this-><CGameApp+0x42e8:4> = 0x8;
// LINE 235:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x42EC;
	__asm        push   eax;
	__asm        call   GetCurrentScreenMode;
	__asm        add    esp, 8;
// LINE 237:
	gameResolution = 0x1;
// LINE 246:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T19f;
// LINE 247:
	__asm        mov    eax, this;
	__asm        add    eax, 0x42D4;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x42F8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 248:
	__asm        jmp    _T1c0;
// LINE 249:
_T19f:
	__asm        mov    eax, this;
	__asm        add    eax, 0x42E0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x42F8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 250:
_T1c0:
	__asm        jmp    near ptr 0x004887B2;
}

// FUNCTION: COPTER_D 0x004887b7
unsigned long  CGameApp::PrepareGame() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sApplicationTitle; // 0x8 bytes
	/*bp-0xc*/   int32_t nFullStringID;
	/*bp-0x110*/ char szButtonWindowSoundFilePath[260]; // 0x104 bytes
	/*bp-0x118*/ /*packed*/ class basic_string<char> sErrorTitle; // 0x8 bytes
	/*bp-0x120*/ /*packed*/ class basic_string<char> sErrorText; // 0x8 bytes
	/*bp-0x124*/ long hResult;

// LINE 260:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x198], eax;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00488827;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    sApplicationTitle.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sApplicationTitle.reference = 0x0;
_T85:
	__asm        mov    sApplicationTitle.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00488848;
// LINE 261:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x19C], eax;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     _Tfc;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x19C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004888A2;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    sErrorText.reference, eax;
	__asm        jmp    _T106;
_Tfc:
	sErrorText.reference = 0x0;
_T106:
	__asm        mov    sErrorText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004888CC;
// LINE 262:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        cmp    dword ptr [ebp-0x1A0], 0;
	__asm        je     _T180;

	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1A0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00488926;

	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    sErrorTitle.reference, eax;
	__asm        jmp    _T18a;
_T180:
	sErrorTitle.reference = 0x0;
_T18a:
	__asm        mov    sErrorTitle.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00488950;
// LINE 266:
	__asm        call   dword ptr ds:[0x6C3614];
	__asm        push   eax;
	__asm        call   srand;
	__asm        add    esp, 4;
// LINE 272:
	__asm        call   DDEnable;
	__asm        mov    hResult, eax;
// LINE 273:
	__asm        cmp    hResult, 0;
	__asm        je     _T4c3;
// LINE 274:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x00488988;

	__asm        push   0x599BD8;
	__asm        lea    ecx, [ebp-0x128];
	__asm        call   DirectDrawError::DisplayError;
// LINE 275:
	__asm        push   0;
	__asm        push   0x21;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 276:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11EC], eax;
	__asm        cmp    dword ptr [ebp-0x11EC], 0;
	__asm        jne    _T2a3;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11EC], eax;
	__asm        jmp    near ptr 0x00488A06;

	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488A2D;

	__asm        jmp    near ptr 0x00488A32;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00488A55;

	__asm        jmp    _T2d4;
_T2a3:
	__asm        jmp    near ptr 0x00488A5F;

	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488A86;

	__asm        jmp    _T2d4;
// LINE 277:
_T2d4:
	__asm        push   0;
	__asm        push   4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 278:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21F0], eax;
	__asm        cmp    dword ptr [ebp-0x21F0], 0;
	__asm        jne    _T396;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21F0], eax;
	__asm        jmp    near ptr 0x00488AF9;

	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488B20;

	__asm        jmp    near ptr 0x00488B25;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00488B48;

	__asm        jmp    _T3c7;
_T396:
	__asm        jmp    near ptr 0x00488B52;

	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21EC];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488B79;

	__asm        jmp    _T3c7;
// LINE 279:
_T3c7:
	__asm        push   0x10;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 280:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x12C], eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T434;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T434:
	__asm        jmp    near ptr 0x00488BF0;

	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T478;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T478:
	__asm        jmp    near ptr 0x00488C34;

	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sApplicationTitle.c_str_ptr, 0;
	__asm        je     _T4b3;

	__asm        mov    eax, sApplicationTitle.c_str_ptr;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4b3:
	__asm        jmp    near ptr 0x00488C6F;

	__asm        mov    eax, [ebp-0x12C];
	__asm        jmp    _Tf15;
// LINE 284:
_T4c3:
	__asm        push   0;
	__asm        push   4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 285:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x31F4], eax;
	__asm        cmp    dword ptr [ebp-0x31F4], 0;
	__asm        jne    _T57f;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x31F4], eax;
	__asm        jmp    near ptr 0x00488CE8;

	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488D0C;

	__asm        jmp    near ptr 0x00488D11;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00488D31;

	__asm        jmp    _T5ad;
_T57f:
	__asm        jmp    near ptr 0x00488D3B;

	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x31F0];
	__asm        push   eax;
	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00488D5F;

	__asm        jmp    _T5ad;
// LINE 288:
_T5ad:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T60b;
// LINE 291:
	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
// LINE 292:
	__asm        jmp    _T654;
// LINE 299:
_T60b:
	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x1B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42E4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42E0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
// LINE 301:
_T654:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _T823;
// LINE 305:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T6a3;
// LINE 306:
	__asm        jmp    near ptr 0x00488E30;

	__asm        push   0x11;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 307:
	__asm        jmp    _T6cd;
// LINE 308:
_T6a3:
	__asm        jmp    near ptr 0x00488E5F;

	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 309:
_T6cd:
	__asm        cmp    hResult, 0;
	__asm        je     _T7d5;
// LINE 310:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x00488EA2;

	__asm        push   0x599C0C;
	__asm        lea    ecx, [ebp-0x130];
	__asm        call   DirectDrawError::DisplayError;
// LINE 311:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x134], eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T746;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T746:
	__asm        jmp    near ptr 0x00488F02;

	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T78a;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T78a:
	__asm        jmp    near ptr 0x00488F46;

	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sApplicationTitle.c_str_ptr, 0;
	__asm        je     _T7c5;

	__asm        mov    eax, sApplicationTitle.c_str_ptr;
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1D0], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7c5:
	__asm        jmp    near ptr 0x00488F81;

	__asm        mov    eax, [ebp-0x134];
	__asm        jmp    _Tf15;
// LINE 314:
_T7d5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T7f6;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x58];
// LINE 316:
_T7f6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x34];
// LINE 319:
	__asm        jmp    _T915;
// LINE 320:
_T823:
	__asm        push   0x599C4C;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 321:
	__asm        push   0x599C68;
	__asm        call   SaveDebugWindow;
	__asm        add    esp, 4;
// LINE 322:
	__asm        mov    dword ptr [ebp-0x138], 0x80000000;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T886;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x1D4], eax;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T886:
	__asm        jmp    near ptr 0x00489042;

	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T8ca;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T8ca:
	__asm        jmp    near ptr 0x00489086;

	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sApplicationTitle.c_str_ptr, 0;
	__asm        je     _T905;

	__asm        mov    eax, sApplicationTitle.c_str_ptr;
	__asm        mov    [ebp-0x1E4], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T905:
	__asm        jmp    near ptr 0x004890C1;

	__asm        mov    eax, [ebp-0x138];
	__asm        jmp    _Tf15;
// LINE 328:
_T915:
	__asm        jmp    near ptr 0x004890D1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   S3DSInit;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _Tb3f;
// LINE 330:
	__asm        push   0;
	__asm        push   0x23;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 331:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x41F8], eax;
	__asm        cmp    dword ptr [ebp-0x41F8], 0;
	__asm        jne    _T9f9;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x41F8], eax;
	__asm        jmp    near ptr 0x0048915C;

	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00489183;

	__asm        jmp    near ptr 0x00489188;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004891AB;

	__asm        jmp    _Ta2a;
_T9f9:
	__asm        jmp    near ptr 0x004891B5;

	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x41F4];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004891DC;

	__asm        jmp    _Ta2a;
// LINE 332:
_Ta2a:
	__asm        push   0;
	__asm        push   4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 333:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x51FC], eax;
	__asm        cmp    dword ptr [ebp-0x51FC], 0;
	__asm        jne    _Taec;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x51FC], eax;
	__asm        jmp    near ptr 0x0048924F;

	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00489276;

	__asm        jmp    near ptr 0x0048927B;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0048929E;

	__asm        jmp    _Tb1d;
_Taec:
	__asm        jmp    near ptr 0x004892A8;

	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x51F8];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004892CF;

	__asm        jmp    _Tb1d;
// LINE 334:
_Tb1d:
	__asm        push   0;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 339:
_Tb3f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 340:
	__asm        mov    ecx, 0x5C37EC;
	__asm        call   SoundChangeNotificationSink::Initialize;
// LINE 341:
	__asm        call   S3LoadSounds;
// LINE 342:
	__asm        mov    ecx, 0x604450;
	__asm        call   SoundQueue::Initialize;
// LINE 343:
	__asm        lea    ecx, gSoundQueue[1]<vftable>;
	__asm        call   SoundQueue::Initialize;
// LINE 346:
	__asm        lea    eax, szButtonWindowSoundFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_SOUND_BUTTON_WINDOW_SOUND_FILE;
	__asm        push   eax;
	__asm        mov    eax, gDefaultLanguage;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFile;
// LINE 347:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x194], eax;
	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     _Tbcd;

	__asm        lea    eax, szButtonWindowSoundFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x194];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    _Tbd7;
_Tbcd:
	__asm        mov    dword ptr [ebp-0x13C], 0;
_Tbd7:
	__asm        mov    dword ptr [ebp-0x140], 0;
	__asm        jmp    near ptr 0x0048939D;

	__asm        push   0;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::SetSoundFile;
	__asm        jmp    near ptr 0x004893B5;

	__asm        lea    ecx, [ebp-0x140];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _Tc3d;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tc3d:
	__asm        jmp    near ptr 0x004893F9;
// LINE 348:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x188], eax;
	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        je     _Tc7c;

	__asm        lea    eax, szButtonWindowSoundFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x188];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    _Tc86;
_Tc7c:
	__asm        mov    dword ptr [ebp-0x144], 0;
_Tc86:
	__asm        mov    dword ptr [ebp-0x148], 0;
	__asm        jmp    near ptr 0x0048944C;

	__asm        push   0;
	__asm        lea    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::SetSoundFile;
	__asm        jmp    near ptr 0x00489464;

	__asm        lea    ecx, [ebp-0x148];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _Tcec;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tcec:
	__asm        jmp    near ptr 0x004894A8;
// LINE 349:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x17C], eax;
	__asm        cmp    dword ptr [ebp-0x17C], 0;
	__asm        je     _Td2b;

	__asm        lea    eax, szButtonWindowSoundFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x17C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    _Td35;
_Td2b:
	__asm        mov    dword ptr [ebp-0x14C], 0;
_Td35:
	__asm        mov    dword ptr [ebp-0x150], 0;
	__asm        jmp    near ptr 0x004894FB;

	__asm        push   0;
	__asm        lea    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::SetSoundFile;
	__asm        jmp    near ptr 0x00489513;

	__asm        lea    ecx, [ebp-0x150];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Td9b;

	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Td9b:
	__asm        jmp    near ptr 0x00489557;
// LINE 352:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x154], eax;
	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _Tdd2;

	__asm        mov    ecx, [ebp-0x154];
	__asm        call   CGameCommander::CGameCommander;
	__asm        mov    gGameCommander, eax;
	__asm        jmp    _Tddc;
_Tdd2:
	gGameCommander = 0x0;
// LINE 353:
_Tddc:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x50];
// LINE 354:
	__asm        mov    eax, gGameCommander;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x50];
	__asm        call   CSparkalWindow::SetCommander;
// LINE 355:
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x18];
// LINE 358:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 359:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 360:
	__asm        mov    dword ptr [ebp-0x158], 0;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _Te86;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Te86:
	__asm        jmp    near ptr 0x00489642;

	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _Teca;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Teca:
	__asm        jmp    near ptr 0x00489686;

	__asm        lea    ecx, sApplicationTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sApplicationTitle.c_str_ptr, 0;
	__asm        je     _Tf05;

	__asm        mov    eax, sApplicationTitle.c_str_ptr;
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tf05:
	__asm        jmp    near ptr 0x004896C1;

	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    _Tf15;
// LINE 361:
_Tf15:
}

// FUNCTION: COPTER_D 0x004896d1
class CSparkalWindow *  CGameApp::NewWindow(unsigned long Width, unsigned long Height, unsigned long Style, const /*packed*/ struct SparkalColor *pColors, char * Caption) {
// LINE 374:
	__asm        push   0x9C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T47;

	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, Style;
	__asm        push   eax;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   GameWindow::GameWindow;
	__asm        jmp    _T49;
_T47:
	__asm        xor    eax, eax;
_T49:
	__asm        jmp    near ptr 0x0048971F;
// LINE 375:
}

// FUNCTION: COPTER_D 0x00489726
unsigned long  CGameApp::Initialize() {
	/*bp-0x4*/   int32_t i;

// LINE 389:
	G_mapmode = 0x0;
// LINE 390:
	GraphicWindow::colorConstants.nPaletteIndexTransparent = 0xfe;
// LINE 392:
	__asm        mov    i, 0;
	__asm        jmp    _T35;
_T32:
	i++;
_T35:
	__asm        cmp    i, 6;
	__asm        jge    _T52;
// LINE 393:
	__asm        mov    eax, i;
	__asm        mov    G_CheatCodes[eax*4], 0;
	__asm        jmp    _T32;
// LINE 396:
_T52:
	__asm        push   0x105;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    gszAppDirectory, eax;
// LINE 398:
	__asm        push   0x104;
	__asm        mov    eax, gszAppDirectory;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3640];
// LINE 399:
	__asm        mov    eax, gszAppDirectory;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    i, eax;
// LINE 400:
	__asm        jmp    _T90;
_T8d:
	i--;
_T90:
	__asm        cmp    i, 0;
	__asm        jl     _Tc2;

	__asm        mov    eax, i;
	__asm        mov    ecx, gszAppDirectory;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        cmp    eax, 0x5C;
	__asm        je     _Tc2;
// LINE 401:
	__asm        mov    eax, i;
	__asm        mov    ecx, gszAppDirectory;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 402:
	__asm        jmp    _T8d;
// LINE 407:
_Tc2:
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::Initialize;
	__asm        test   eax, eax;
	__asm        jne    _T120;
// LINE 411:
// Block start:
	/*bp-0x84*/  char szCommandValue[128]; // 0x80 bytes
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x78;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        jne    _Tfa;
// LINE 412:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T518;
// LINE 413:
_Tfa:
	__asm        push   0x599C74;
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   strstr;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T120;
// LINE 414:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T518;
// LINE 419:
// Block end:
_T120:
	__asm        push   0x40;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T152;

	__asm        mov    ecx, [ebp-0x88];
	__asm        call   CDebugWindow::CDebugWindow;
	__asm        mov    gDebugWindow, eax;
	__asm        jmp    _T15c;
_T152:
	gDebugWindow = 0x0;
// LINE 420:
_T15c:
	__asm        push   0x599C84;
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::Create;
// LINE 421:
	__asm        push   0x599C98;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 430:
	__asm        call   LanguageManager::GetCurrentSystemLocale;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4324], eax;
// LINE 431:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 432:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 433:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayDebugSystemInformation;
// LINE 434:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetSystemPriorityLevel;
// LINE 435:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4324];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetCurrentLanguageUse;
// LINE 436:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 439:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T21d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4310], 0;
	__asm        je     _T21d;
// LINE 440:
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::ShowWindow;
// LINE 441:
	__asm        jmp    _T235;
_T21d:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T235;
// LINE 442:
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::HideWindow;
// LINE 445:
_T235:
	this-><CGameApp+0x30:4> = this-><CGameApp+0x4318:4>;
// LINE 446:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T286;
// LINE 447:
	__asm        mov    eax, this;
	__asm        add    eax, 0x42D4;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x42F8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 448:
	__asm        jmp    _T2ad;
// LINE 449:
_T286:
	__asm        mov    eax, this;
	__asm        add    eax, 0x42E0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x42F8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 454:
_T2ad:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42EC], 0x280;
	__asm        jle    _T2ec;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F0], 0x1E0;
	__asm        jle    _T2ec;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F4], 8;
	__asm        je     _T320;
// LINE 456:
_T2ec:
	this-><CGameApp+0x30:4> = 0x0;
// LINE 457:
	__asm        mov    eax, this;
	__asm        add    eax, 0x42D4;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x42F8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 461:
_T320:
	G_texobjs = this-><CGameApp+0x4328:4>;
// LINE 462:
	G_texterr = this-><CGameApp+0x432c:4>;
// LINE 464:
	__asm        call   InitializeAllUserInfo;
// LINE 465:
	__asm        call   InitializeAllCareerCitiesInfo;
// LINE 466:
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::Initialize;
// LINE 470:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::Initialize;
// LINE 477:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 480:
	__asm        push   0x10000;
	__asm        call   S2AllocPool;
	__asm        add    esp, 4;
	__asm        mov    MainPoolIndex, eax;
// LINE 481:
	__asm        push   0x10000;
	__asm        call   S2AllocPool;
	__asm        add    esp, 4;
	__asm        mov    ScratchPoolIndex, eax;
// LINE 484:
	__asm        call   TWKGameInit;
// LINE 487:
	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::Initialize;
// LINE 488:
	gLogManager.myMessageDisplayManager = 0x604530;
// LINE 492:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        je     _T453;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4164], 1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _T42e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4170], 0;
	__asm        jne    _T42e;

	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4170], eax;
	__asm        jmp    _T42e;
_T42e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x416C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4168], 0;
	__asm        jmp    _T453;
_T453:
	__asm        jmp    near ptr 0x00489B7E;
// LINE 493:
	__asm        jmp    near ptr 0x00489B83;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4168], 0;
	__asm        je     _T475;

	__asm        jmp    _T511;
_T475:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        jne    _T4a4;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T50c;

	__asm        jmp    _T50c;
_T4a4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _T4ec;

	__asm        lea    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T50c;

	__asm        jmp    _T50c;
_T4ec:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T50c;
_T50c:
	__asm        jmp    _T511;
// LINE 495:
_T511:
	__asm        xor    eax, eax;
	__asm        jmp    _T518;
// LINE 496:
_T518:
}

// FUNCTION: COPTER_D 0x00489c43
void  CGameApp::ParseCommandLine() {
	/*bp-0x80*/  char szCommandValue[128]; // 0x80 bytes
	/*bp-0x84*/  int32_t nLanguage;
	/*bp-0x88*/  long lValue;

// LINE 511:
	__asm        push   0;
	__asm        push   0x77;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T46;
// LINE 512:
	this-><CGameApp+0x30:4> = 0x1;
// LINE 513:
	this-><CGameApp+0x4318:4> = 0x1;
// LINE 515:
_T46:
	__asm        push   0;
	__asm        push   0x66;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T7a;
// LINE 516:
	this-><CGameApp+0x30:4> = 0x0;
// LINE 517:
	this-><CGameApp+0x4318:4> = 0x0;
// LINE 519:
_T7a:
	__asm        push   0;
	__asm        push   0x63;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T9b;
// LINE 520:
	G_mapmode = 0x1;
// LINE 521:
_T9b:
	__asm        push   0;
	__asm        push   0x61;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _Tbc;
// LINE 522:
	G_artmode = 0x1;
// LINE 523:
_Tbc:
	__asm        push   0;
	__asm        push   0x74;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _Tdd;
// LINE 524:
	G_testmode = 0x1;
// LINE 525:
_Tdd:
	__asm        push   0;
	__asm        push   0x68;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _Tfe;
// LINE 526:
	G_use_height_backplane = 0x1;
// LINE 527:
_Tfe:
	__asm        push   0;
	__asm        push   0x31;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T11f;
// LINE 528:
	G_diff_level = 0x1;
// LINE 529:
_T11f:
	__asm        push   0;
	__asm        push   0x32;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T140;
// LINE 530:
	G_diff_level = 0x2;
// LINE 531:
_T140:
	__asm        push   0;
	__asm        push   0x33;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T161;
// LINE 532:
	G_diff_level = 0x3;
// LINE 533:
_T161:
	__asm        push   0;
	__asm        push   0x34;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T182;
// LINE 534:
	G_diff_level = 0x4;
// LINE 535:
_T182:
	__asm        push   0;
	__asm        push   0x64;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T1c1;
// LINE 536:
	this-><CGameApp+0x4310:4> = 0x1;
// LINE 537:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T1c1;
// LINE 538:
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::ShowWindow;
// LINE 545:
_T1c1:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x6C;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T228;
// LINE 546:
	__asm        lea    eax, nLanguage;
	__asm        push   eax;
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   LanguageManager::ConvertNameToID;
	__asm        add    esp, 8;
// LINE 547:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::CanWeSwitchToGivenLanguage;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T228;
// LINE 548:
	this-><CGameApp+0x4324:4> = nLanguage;
// LINE 549:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetCurrentLanguageUse;
// LINE 552:
_T228:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x6D;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T28c;
// LINE 553:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    lValue, eax;
// LINE 554:
	__asm        cmp    lValue, 0xC;
	__asm        jle    _T26a;
// LINE 555:
	lValue = 0xc;
// LINE 556:
_T26a:
	__asm        cmp    lValue, 3;
	__asm        jge    _T281;
// LINE 557:
	lValue = 0x3;
// LINE 558:
_T281:
	gMessageDisplayManager.lMaximumMessageCount = lValue;
// LINE 564:
_T28c:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x67;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T2f0;
// LINE 565:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    lValue, eax;
// LINE 566:
	__asm        cmp    lValue, 4;
	__asm        jle    _T2ce;
// LINE 567:
	lValue = 0x4;
// LINE 568:
_T2ce:
	__asm        cmp    lValue, 1;
	__asm        jge    _T2e5;
// LINE 569:
	lValue = 0x1;
// LINE 570:
_T2e5:
	G_max_emptycel_size = lValue;
// LINE 573:
_T2f0:
	__asm        jmp    near ptr 0x00489F38;
}

// FUNCTION: COPTER_D 0x00489f3d
int  CGameApp::IsSwitchPresent(char chSwitchToCheck, char * szResult) {
	/*bp-0x4*/   char chLowerToCheck;
	/*bp-0x8*/   short i;
	/*bp-0xc*/   short j;
	/*bp-0x10*/  int32_t bInQuotation;
	/*bp-0x14*/  short k;
	/*bp-0x18*/  char chUpperToCheck;

// LINE 596:
	bInQuotation = 0x0;
// LINE 598:
	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x41;
	__asm        jl     _T42;

	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x5A;
	__asm        jg     _T42;
// LINE 599:
	chUpperToCheck = chSwitchToCheck;
// LINE 600:
	__asm        movsx  eax, chSwitchToCheck;
	__asm        add    eax, 0x20;
	__asm        mov    chLowerToCheck, al;
// LINE 602:
	__asm        jmp    _Ta3;
_T42:
	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x61;
	__asm        jl     _T71;

	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x7A;
	__asm        jg     _T71;
// LINE 603:
	chLowerToCheck = chSwitchToCheck;
// LINE 604:
	__asm        movsx  eax, chSwitchToCheck;
	__asm        sub    eax, 0x20;
	__asm        mov    chUpperToCheck, al;
// LINE 606:
	__asm        jmp    _Ta3;
_T71:
	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x30;
	__asm        jl     _T9c;

	__asm        movsx  eax, chSwitchToCheck;
	__asm        cmp    eax, 0x39;
	__asm        jg     _T9c;
// LINE 607:
	__asm        mov    al, chSwitchToCheck;
	__asm        mov    chUpperToCheck, al;
	__asm        mov    al, chUpperToCheck;
	__asm        mov    chLowerToCheck, al;
// LINE 609:
	__asm        jmp    _Ta3;
// LINE 610:
_T9c:
	__asm        xor    eax, eax;
	__asm        jmp    _T219;
// LINE 612:
_Ta3:
	__asm        mov    i, 0;
	__asm        jmp    _Tb2;
_Tae:
	i++;
_Tb2:
	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        test   eax, eax;
	__asm        je     _T212;
// LINE 614:
	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 0x2F;
	__asm        je     _T101;

	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 0x5C;
	__asm        je     _T101;

	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 0x2D;
	__asm        jne    _T20d;
_T101:
	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[1][eax];
	__asm        movsx  ecx, chLowerToCheck;
	__asm        cmp    eax, ecx;
	__asm        je     _T12f;

	__asm        movsx  eax, i;
	__asm        movsx  eax, gszCommandLine[1][eax];
	__asm        movsx  ecx, chUpperToCheck;
	__asm        cmp    eax, ecx;
	__asm        jne    _T20d;
// LINE 616:
_T12f:
	__asm        cmp    szResult, 0;
	__asm        je     _T203;
// LINE 617:
	__asm        mov    k, 0;
	__asm        movsx  eax, i;
	__asm        add    eax, 2;
	__asm        mov    j, ax;
// LINE 619:
	__asm        jmp    _T157;
_T14f:
	__asm        inc    k;
	__asm        inc    j;
_T157:
	__asm        movsx  eax, j;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        test   eax, eax;
	__asm        je     _T1f8;

	__asm        movsx  eax, j;
	__asm        cmp    eax, 0x7F;
	__asm        jge    _T1f8;

	__asm        movsx  eax, j;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 9;
	__asm        je     _T1f8;
// LINE 621:
	__asm        movsx  eax, j;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 0x20;
	__asm        jne    _T1ae;
// LINE 622:
	__asm        cmp    bInQuotation, 0;
	__asm        jne    _T1ae;
// LINE 623:
	__asm        jmp    _T1f8;
// LINE 625:
_T1ae:
	__asm        movsx  eax, j;
	__asm        movsx  eax, gszCommandLine[eax];
	__asm        cmp    eax, 0x22;
	__asm        jne    _T1df;
// LINE 626:
	__asm        cmp    bInQuotation, 0;
	__asm        jne    _T1d8;

	__asm        mov    bInQuotation, 1;
	__asm        jmp    _T1df;
_T1d8:
	bInQuotation = 0x0;
// LINE 627:
_T1df:
	__asm        movsx  eax, j;
	__asm        mov    al, gszCommandLine[eax];
	__asm        movsx  ecx, k;
	__asm        mov    edx, szResult;
	__asm        mov    [ecx+edx], al;
// LINE 628:
	__asm        jmp    _T14f;
// LINE 629:
_T1f8:
	__asm        movsx  eax, k;
	__asm        mov    ecx, szResult;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 631:
_T203:
	__asm        mov    eax, 1;
	__asm        jmp    _T219;
// LINE 633:
_T20d:
	__asm        jmp    _Tae;
// LINE 634:
_T212:
	__asm        xor    eax, eax;
	__asm        jmp    _T219;
// LINE 635:
_T219:
}

// FUNCTION: COPTER_D 0x0048a15d
int  CGameApp::SetCurrentLanguageUse(int32_t nLanguageID) {
// LINE 651:
	__asm        mov    eax, nLanguageID;
	__asm        push   eax;
	__asm        call   LanguageManager::SetDefaultLanguage;
	__asm        add    esp, 4;
// LINE 653:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048A17F;
// LINE 654:
}

// FUNCTION: COPTER_D 0x0048a186
void  CGameApp::DisplayDebugSystemInformation() {
	/*bp-0x20*/  /*packed*/ struct _MEMORYSTATUS tempMemoryStatus; // 0x20 bytes
	/*bp-0x2c*/  /*packed*/ class Version tempVersion; // 0xc bytes
	/*bp-0x12c*/ char szFormattedVersionInformation[256]; // 0x100 bytes
	/*bp-0x14c*/ char szUnformattedVersionInformation[32]; // 0x20 bytes
	/*bp-0x150*/ char * szVersionInformation;

// LINE 662:
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::Version;
// LINE 667:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::GetApplicationName;
	__asm        test   eax, eax;
	__asm        je     _T5b;
// LINE 668:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        push   0x599CB0;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 669:
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 672:
_T5b:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::GetApplicationVersion;
	__asm        test   eax, eax;
	__asm        je     _T9c;
// LINE 673:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        push   0x599CB4;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 674:
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 677:
_T9c:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::GetApplicationDebugVersion;
	__asm        test   eax, eax;
	__asm        je     _Tdd;
// LINE 678:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        push   0x599CC4;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 679:
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 682:
_Tdd:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   Version::GetSystemVersion;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T11e;
// LINE 683:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        push   0x599CD8;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 684:
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 687:
_T11e:
	__asm        push   0x599D78;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0048A2BD;
// LINE 688:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        push   0x599CE8;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 689:
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42F4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42F0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42EC];
	__asm        push   eax;
	__asm        push   0x599D00;
	__asm        call   DebugOutput;
	__asm        add    esp, 0x10;
// LINE 697:
	tempMemoryStatus.dwLength = 0x20;
// LINE 698:
	__asm        lea    eax, tempMemoryStatus.dwLength;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C362C];
// LINE 699:
	__asm        mov    ecx, 0xFA000;
	__asm        mov    eax, tempMemoryStatus.dwTotalPhys;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        push   eax;
	__asm        push   0x599D34;
	__asm        call   DebugOutput;
	__asm        add    esp, 8;
// LINE 701:
	__asm        mov    ecx, 0xFA000;
	__asm        mov    eax, tempMemoryStatus.dwAvailPhys;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        push   eax;
	__asm        push   0x599D54;
	__asm        call   DebugOutput;
	__asm        add    esp, 8;
// LINE 704:
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::~Version;
	__asm        jmp    near ptr 0x0048A36B;
}

// FUNCTION: COPTER_D 0x0048a370
void  CGameApp::SetSystemPriorityLevel(long lLevel) {
	/*bp-0x4*/   void * __ptr32 hThread;
	/*bp-0x8*/   int32_t bReturnValue;

// LINE 728:
	__asm        cmp    lLevel, 0;
	__asm        jne    _T28;
// LINE 729:
	this-><CGameApp+0x4320:4> = 0x0;
// LINE 730:
	__asm        jmp    _T6d;
_T28:
	__asm        cmp    lLevel, 3;
	__asm        jge    _T44;
// LINE 731:
	this-><CGameApp+0x4320:4> = 0x1;
// LINE 732:
	__asm        jmp    _T6d;
_T44:
	__asm        cmp    lLevel, 7;
	__asm        jge    _T60;
// LINE 733:
	this-><CGameApp+0x4320:4> = 0x2;
// LINE 734:
	__asm        jmp    _T6d;
// LINE 735:
_T60:
	this-><CGameApp+0x4320:4> = 0xf;
// LINE 737:
_T6d:
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        mov    hThread, eax;
// LINE 738:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4320];
	__asm        push   eax;
	__asm        mov    eax, hThread;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
	__asm        mov    bReturnValue, eax;
// LINE 740:
	__asm        jmp    near ptr 0x0048A402;
}

// FUNCTION: COPTER_D 0x0048a409
void  CGameApp::InitializeCommandSystem() {
	/*bp-0x18*/  /*packed*/ struct Shortcut tempShortcut; // 0x18 bytes

// LINE 751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0048A435;

	__asm        jmp    near ptr 0x0048A43A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0048A456;

	__asm        jmp    near ptr 0x0048A45B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xB0], eax;
_T64:
	__asm        mov    eax, [ebp-0xAC];
	__asm        cmp    [ebp-0xB0], eax;
	__asm        jne    _T80;

	__asm        jmp    _T97;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        jne    _T97;
_T92:
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _Tfb;
_T9c:
	__asm        jmp    _Tae;

	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     _Tfb;
_Tae:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x0048A4D6;

	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x0048A4E7;

	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::erase;
	__asm        jmp    _T64;
_Tfb:
	__asm        jmp    near ptr 0x0048A509;
// LINE 753:
	tempShortcut.lDeviceID = 0x0;
// LINE 755:
	tempShortcut.lCommand = 0xc9;
// LINE 756:
	tempShortcut.lKey = 0x50;
// LINE 757:
	tempShortcut.lModifiers = 0x6;
// LINE 758:
	tempShortcut.lPush = 0x1;
// LINE 759:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 760:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0048A54D;

	__asm        jmp    near ptr 0x0048A552;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0048A571;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0048A57F;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T192;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T192;
_T192:
	__asm        jmp    near ptr 0x0048A5A0;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x3798], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0048A5E0;

	__asm        jmp    near ptr 0x0048A5E5;

	__asm        jmp    near ptr 0x0048A5EA;
// LINE 762:
	tempShortcut.lCommand = 0xca;
// LINE 763:
	tempShortcut.lKey = 0x44;
// LINE 764:
	tempShortcut.lModifiers = 0x6;
// LINE 765:
	tempShortcut.lPush = 0x1;
// LINE 766:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 767:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0048A627;

	__asm        jmp    near ptr 0x0048A62C;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0048A64B;

	__asm        mov    eax, [ebp-0x50];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0048A659;

	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T26c;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x54];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T26c;
_T26c:
	__asm        jmp    near ptr 0x0048A67A;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x3798], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0048A6BA;

	__asm        jmp    near ptr 0x0048A6BF;

	__asm        jmp    near ptr 0x0048A6C4;
// LINE 769:
	tempShortcut.lCommand = 0xcb;
// LINE 770:
	tempShortcut.lKey = 0x49;
// LINE 771:
	tempShortcut.lModifiers = 0x6;
// LINE 772:
	tempShortcut.lPush = 0x1;
// LINE 773:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 774:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0048A701;

	__asm        jmp    near ptr 0x0048A706;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x0048A725;

	__asm        mov    eax, [ebp-0x68];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0048A733;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T346;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x6C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T346;
_T346:
	__asm        jmp    near ptr 0x0048A754;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x3798], 1;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0048A794;

	__asm        jmp    near ptr 0x0048A799;

	__asm        jmp    near ptr 0x0048A79E;
// LINE 776:
	tempShortcut.lDeviceID = 0x0;
// LINE 777:
	tempShortcut.lCommand = 0xcc;
// LINE 778:
	tempShortcut.lKey = 0x56;
// LINE 779:
	tempShortcut.lModifiers = 0x2;
// LINE 780:
	tempShortcut.lPush = 0x1;
// LINE 781:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 782:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3794];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0048A7E2;

	__asm        jmp    near ptr 0x0048A7E7;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T41c;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _T47f;
_T41c:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        cmp    list<Shortcut>::last, eax;
	__asm        jne    _T461;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3794;
	__asm        call   list<Shortcut>::add_new_buffer;
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x8C], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _T47f;
_T461:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x90], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
_T47f:
	__asm        jmp    near ptr 0x0048A88D;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x0048A89B;

	__asm        mov    eax, [ebp-0x80];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x0048A8AC;

	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T4c5;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x84];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T4c5;
_T4c5:
	__asm        jmp    near ptr 0x0048A8D3;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x3798];
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x0048A91E;

	__asm        jmp    near ptr 0x0048A923;

	__asm        jmp    near ptr 0x0048A928;
// LINE 784:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x36BC;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 785:
	__asm        jmp    near ptr 0x0048A93E;
}

// FUNCTION: COPTER_D 0x0048a943
void  CGameApp::InitializeJoysticks() {
// LINE 793:
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::Initialize;
// LINE 794:
	__asm        push   0x64;
	__asm        push   0xFFFFFF9C;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::SetNormalizedMinMax;
// LINE 795:
	__asm        mov    gJoystickManager.lJoystickThreshold, 0x14;
	__asm        jmp    near ptr 0x0048A976;
// LINE 796:
	__asm        jmp    near ptr 0x0048A97B;
}

// FUNCTION: COPTER_D 0x0048a980
int  CGameApp::HaveAnyJoysticksChangedSinceLastPlay() {
	/*bp-0x4*/   char * chPrefData;
	/*bp-0x8*/   char * chLastJoystickName;
	/*bp-0xc*/   int32_t iEnd;
	/*bp-0x10*/  long lJoystickCountAtLastPlay;
	/*bp-0x14*/  int32_t i;
	/*bp-0x54*/  char chCurrentJoystickName[64]; // 0x40 bytes
	/*bp-0x58*/  long lJoystickCountAtCurrentPlay;

// LINE 817:
	__asm        jmp    near ptr 0x0048A991;

	lJoystickCountAtCurrentPlay = gJoystickManager.nJoystickCount;
// LINE 818:
	lJoystickCountAtLastPlay = 0x0;
// LINE 819:
	__asm        push   0x4EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 820:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T65;
// LINE 821:
	__asm        mov    eax, chPrefData;
	__asm        mov    eax, [eax];
	__asm        mov    lJoystickCountAtLastPlay, eax;
// LINE 822:
	__asm        cmp    lJoystickCountAtLastPlay, 0;
	__asm        jl     _T5e;

	__asm        cmp    lJoystickCountAtLastPlay, 4;
	__asm        jle    _T65;
// LINE 823:
_T5e:
	lJoystickCountAtLastPlay = 0x0;
// LINE 825:
_T65:
	__asm        mov    eax, lJoystickCountAtLastPlay;
	__asm        cmp    lJoystickCountAtCurrentPlay, eax;
	__asm        jle    _T7b;
// LINE 826:
	__asm        mov    eax, 1;
	__asm        jmp    _T118;
// LINE 828:
_T7b:
	__asm        mov    eax, lJoystickCountAtCurrentPlay;
	__asm        mov    ecx, lJoystickCountAtLastPlay;
	__asm        cmp    eax, ecx;
	__asm        jl     _T8b;

	__asm        mov    eax, ecx;
_T8b:
	__asm        mov    iEnd, eax;
// LINE 829:
	__asm        mov    i, 0;
	__asm        jmp    _T9d;
_T9a:
	i++;
_T9d:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T111;
// LINE 830:
	__asm        mov    eax, i;
	__asm        add    eax, 0xEEEEEE;
	__asm        push   eax;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chLastJoystickName, eax;
// LINE 831:
	__asm        cmp    chLastJoystickName, 0;
	__asm        jne    _Td4;
// LINE 832:
	__asm        jmp    _T9a;
// LINE 833:
_Td4:
	chCurrentJoystickName[0] = 0x0;
// LINE 834:
	__asm        lea    eax, chCurrentJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::GetJoystickName;
// LINE 835:
	__asm        mov    eax, chLastJoystickName;
	__asm        push   eax;
	__asm        lea    eax, chCurrentJoystickName[0];
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T10c;
// LINE 836:
	__asm        mov    eax, 1;
	__asm        jmp    _T118;
// LINE 837:
_T10c:
	__asm        jmp    _T9a;
// LINE 838:
_T111:
	__asm        xor    eax, eax;
	__asm        jmp    _T118;
// LINE 839:
_T118:
}



// Contribution: 1:00089aa0-00089ad8 Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0048aaa0
// CGameApp::`scalar deleting destructor'



// Contribution: 1:00089ae0-00089b11 Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048aae0
// list<Shortcut>::begin



// Contribution: 1:00089b20-00089ccf Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048ab20
// list<Shortcut>::~list<Shortcut>



// Contribution: 1:00089cd0-00089edf Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048acd0
// list<Shortcut>::get_node



// Contribution: 1:00089ee0-00089fa5 Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048aee0
// list<Shortcut>::erase



// Contribution: 1:00089fb0-0008a03e Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048afb0
// list<CopterGameMode>::deallocate_buffers



// Contribution: 1:0008a040-0008a105 Module: 28, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048b040
// list<CopterGameMode>::erase



// Contribution: 2:00001f2c-00001f2f Module: 28, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GraphicWindowOwner @ 0x00590f2c
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   1 entries



// Contribution: 2:00001f30-00001f33 Module: 28, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for CGameApp @ 0x00590f30
//   00: CGameApp::DoMessage @ 0x004654a4
//   1 entries



// Contribution: 2:00001f38-00001fef Module: 28, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CGameApp @ 0x00590f38
//   00: CGameApp::`scalar deleting destructor' @ 0x0048aaa0
//   01: CGameApp::NewWindow @ 0x004896d1
//   02: CGameApp::PrepareGame @ 0x004887b7
//   03: CGameApp::TickGame @ 0x00461629
//   04: CGameApp::FinishGame @ 0x004bba30
//   05: CGameApp::Initialize @ 0x00489726
//   06: CGameApp::InitializeCommandSystem @ 0x0048a409
//   07: CGameApp::InitializeJoysticks @ 0x0048a943
//   08: CGameApp::HaveAnyJoysticksChangedSinceLastPlay @ 0x0048a980
//   09: CGameApp::GetPreferences @ 0x00461208
//   10: CGameApp::SavePreferences @ 0x004614de
//   11: CGameApp::GetSoundPreferences @ 0x004613cb
//   12: CGameApp::SetSoundPreferences @ 0x00461494
//   13: CGameApp::CreateDisplaySurfaces @ 0x00432900
//   14: CGameApp::DestroyDisplaySurfaces @ 0x00432aee
//   15: CGameApp::DoRecurringTasks @ 0x004624de
//   16: CGameApp::ParseCommandLine @ 0x00489c43
//   17: CGameApp::CanWeSwitchToWindowedMode @ 0x004324e0
//   18: CGameApp::CanWeSwitchToFullScreenMode @ 0x00432538
//   19: CGameApp::SwitchToWindowedMode @ 0x00432553
//   20: CGameApp::SwitchToFullScreenMode @ 0x004326cb
//   21: CGameApp::ConvertMonitorToWindowedMode @ 0x00432843
//   22: CGameApp::ConvertMonitorToFullScreenMode @ 0x00432871
//   23: CGameApp::ToggleScreenMode @ 0x004328bd
//   24: CGameApp::ComposeFrame @ 0x004618a3
//   25: CGameApp::ComposePlayFrame @ 0x00461eb9
//   26: CGameApp::EnterMode @ 0x00462582
//   27: CGameApp::ExitMode @ 0x00463608
//   28: CGameApp::CreateModeSurfaces @ 0x00432bcc
//   29: CGameApp::DestroyModeSurfaces @ 0x00432ce2
//   30: CGameApp::DestroyAllModes @ 0x00463bf9
//   31: CGameApp::DoPlayMenuMessage @ 0x004662fa
//   32: CGameApp::DoMainMenuMessage @ 0x00465edb
//   33: CGameApp::CheckForWarpToCareerLevel @ 0x00464db3
//   34: CGameApp::WarpToCareerLevel @ 0x00464e02
//   35: CGameApp::GraduateUserToNextCareerLevel @ 0x00464eb2
//   36: CGameApp::GraduateUserFromAllCareerLevels @ 0x0046501e
//   37: CGameApp::NotifyUserOfGraduation @ 0x00465081
//   38: CGameApp::ClearCommands @ 0x00464b65
//   39: CGameApp::ProcessCommand @ 0x00463dcb
//   40: CGameApp::DoKeyDown @ 0x0046444d
//   41: CGameApp::DoKeyUp @ 0x0046487f
//   42: CGameApp::DoCharacter @ 0x00464aa5
//   43: CGameApp::DoCursorDown @ 0x00464ad0
//   44: CGameApp::DoCursorUp @ 0x00464b03
//   45: CGameApp::DoCursorMove @ 0x00464b36
//   46 entries



// Contribution: 2:00001ff0-00001ff7 Module: 28, 4 byte alignment, initialized_data, read, 


// Contribution: 3:0000006c-00000083 Module: 28, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059706c
static void (*$S119)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597070
static void (*$S124)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597074
static void (*$S129)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597078
static void (*$S134)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059707c
static void (*$S139)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597080
static void (*$S144)() = { 0 /* todo */ };



// Contribution: 3:00002bbc-00002d72 Module: 28, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599bbc
/*unpacked*/ class CGameApp *gGameApp = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599bc0
/*packed*/ class CGameCommander *gGameCommander = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599bc4
/*packed*/ class NotificationPreferenceManager *gPreferenceManager = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599bc8
char * SZ_SOUND_BUTTON_WINDOW_SOUND_FILE = { 0 /* todo */ };



// Contribution: 3:00002d74-00002d77 Module: 28, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599d74
uint32_t list<CopterGameMode>::number_of_lists = 0;



// Contribution: 3:00002d78-00002d7c Module: 28, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "2.0y"


// Contribution: 3:0006d450-0006d817 Module: 28, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604450
/*packed*/ class SoundQueue gSoundQueue[2];
// has alternate definitions: (original TI: 0x2427)
//   /*packed*/ class SoundQueue gSoundQueue[1] (TI: 0x2ac7)

// GLOBAL: COPTER_D 0x00604480
/*unpacked*/ class Radio gCopterRadio;

// GLOBAL: COPTER_D 0x00604530
/*packed*/ class MessageDisplayManager gMessageDisplayManager;

// GLOBAL: COPTER_D 0x00604588
/*packed*/ class SoundSystem gSoundSystem;

// GLOBAL: COPTER_D 0x00604600
/*packed*/ class SoundManager gSoundManager;
// has alternate definitions: (original TI: 0x1997)
//   /*unpacked*/ class SoundManager gSoundManager (TI: 0x4673)

// GLOBAL: COPTER_D 0x00604808
/*packed*/ class CopterSparkalPalette gCopterPalette;
// has alternate definitions: (original TI: 0x47bb)
//   /*packed*/ class CopterSparkalPalette gCopterPalette (TI: 0x47ce)

