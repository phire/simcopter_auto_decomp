// Module: Defwindo.obj
// Source: C:\Copter\source\sparkal\Defwindo.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CSparkalWindow (forward reference);
public CSparkalWindow
// Type: class ICommander (forward reference);
// Type: class ScreenBuffer (forward reference);
// Type: unsigned long;
// Type: long;


// Contribution: 1:00031260-000314d4 Module: 61, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00432260
class ICommander* CSparkalWindow::SetCommander(class ICommander* pCommander) {
	class ICommander* ReturnCommander;

// LINE 18:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 19:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ReturnCommander, eax;
// LINE 21:
	__asm        mov    eax, this;
	__asm        mov    ecx, pCommander;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x00432290;
// LINE 22:
	__asm        mov    ReturnCommander, 0;
// LINE 23:
	__asm        jmp    near ptr 0x004322C8;
// LINE 25:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x004322B0;
// LINE 26:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x20];
// LINE 28:
	__asm        mov    eax, pCommander;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 29:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, pCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pCommander;
	__asm        call   dword ptr [eax+0x20];
// LINE 32:
	__asm        mov    eax, ReturnCommander;
	__asm        jmp    near ptr 0x004322D0;
// LINE 33:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004322d7
class ScreenBuffer* CSparkalWindow::SetBackBuffer(class ScreenBuffer* pBuffer) {
	class ScreenBuffer* ReturnBuffer;

// LINE 41:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ReturnBuffer, eax;
// LINE 43:
	__asm        mov    eax, pBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 44:
	__asm        mov    eax, ReturnBuffer;
	__asm        jmp    near ptr 0x004322FD;
// LINE 45:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00432304
unsigned long CSparkalWindow::Draw() {
// LINE 53:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        jmp    near ptr 0x00432320;
// LINE 56:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432325
unsigned long CSparkalWindow::SwapBuffer() {
// LINE 63:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 64:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x00432380;
// LINE 65:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00432380;
// LINE 66:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x1C];
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 70:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00432387;
// LINE 71:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043238c
unsigned long CSparkalWindow::SwapBuffer(long Left, long Top, long Right, long Bottom) {
	unsigned long Error;

// LINE 80:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 81:
	__asm        mov    Error, 0;
// LINE 86:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004324C6;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004324C6;
// LINE 92:
// Block start:
	long Step;
	long ChunkHeight;
	long DestTop;
	__asm        mov    eax, Bottom;
	__asm        sub    eax, Top;
	__asm        mov    ecx, 0xA;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    Step, eax;
// LINE 93:
	__asm        mov    eax, Step;
	__asm        mov    ChunkHeight, eax;
// LINE 94:
	__asm        mov    eax, Bottom;
	__asm        sub    eax, ChunkHeight;
	__asm        mov    DestTop, eax;
// LINE 97:
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, ChunkHeight;
	__asm        add    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Right;
	__asm        push   eax;
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x20];
// LINE 99:
	__asm        cmp    Step, 0;
	__asm        jne    near ptr 0x00432437;
	__asm        push   0x63;
	__asm        push   0x59836C;
	__asm        push   0x598394;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0043243C;
	__asm        jmp    near ptr 0x0043243C;
// LINE 102:
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, ChunkHeight;
	__asm        add    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Right;
	__asm        push   eax;
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x20];
// LINE 103:
	__asm        mov    eax, Step;
	__asm        add    ChunkHeight, eax;
// LINE 104:
	__asm        xor    eax, eax;
	__asm        sub    eax, Step;
	__asm        neg    eax;
	__asm        sub    DestTop, eax;
// LINE 105:
	__asm        mov    eax, Top;
	__asm        cmp    DestTop, eax;
	__asm        jg     near ptr 0x0043243C;
// LINE 106:
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, Bottom;
	__asm        push   eax;
	__asm        mov    eax, Right;
	__asm        push   eax;
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x20];
// LINE 107:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 110:
// Block end:
	__asm        mov    eax, Error;
	__asm        jmp    near ptr 0x004324CE;
// LINE 111:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}



// Contribution: 3:0000136c-00001398 Module: 61, 4 byte alignment, initialized_data, read, write, 
