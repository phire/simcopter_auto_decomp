// Module: Defwindo.obj
// Source: C:\Copter\source\sparkal\Defwindo.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00031260-000314d4 Module: 61, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00432260
class ICommander* CSparkalWindow::SetCommander(class ICommander* pCommander) {
// LINE 18:
	asm( 
"	      00432260    push ebp"
"	      00432261    mov ebp,esp"
"	      00432263    sub esp,8"
"	      00432266    push ebx"
"	      00432267    push esi"
"	      00432268    push edi"
"	      00432269    mov [ebp-8],ecx"
);
// LINE 19:
	asm( 
"	      0043226c    mov eax,[ebp-8]"
"	      0043226f    mov eax,[eax+10h]"
"	      00432272    mov [ebp-4],eax"
);
// LINE 21:
	asm( 
"	      00432275    mov eax,[ebp-8]"
"	      00432278    mov ecx,[ebp+8]"
"	      0043227b    cmp [eax+10h],ecx"
"	      0043227e    jne near ptr 00432290h"
);
// LINE 22:
	asm( 
"	      00432284    mov dword ptr [ebp-4],0"
);
// LINE 23:
	asm( 
"	      0043228b    jmp near ptr 004322C8h"
);
// LINE 25:
	asm( 
"	      00432290    mov eax,[ebp-8]"
"	      00432293    cmp dword ptr [eax+10h],0"
"	      00432297    je near ptr 004322B0h"
);
// LINE 26:
	asm( 
"	      0043229d    push 0"
"	      0043229f    mov eax,[ebp-8]"
"	      004322a2    mov ecx,[ebp-8]"
"	      004322a5    mov ecx,[ecx+10h]"
"	      004322a8    mov edx,[ecx]"
"	      004322aa    mov ecx,[eax+10h]"
"	      004322ad    call dword ptr [edx+20h]"
);
// LINE 28:
	asm( 
"	      004322b0    mov eax,[ebp+8]"
"	      004322b3    mov ecx,[ebp-8]"
"	      004322b6    mov [ecx+10h],eax"
);
// LINE 29:
	asm( 
"	      004322b9    mov eax,[ebp-8]"
"	      004322bc    push eax"
"	      004322bd    mov eax,[ebp+8]"
"	      004322c0    mov eax,[eax]"
"	      004322c2    mov ecx,[ebp+8]"
"	      004322c5    call dword ptr [eax+20h]"
);
// LINE 32:
	asm( 
"	      004322c8    mov eax,[ebp-4]"
"	      004322cb    jmp near ptr 004322D0h"
);
// LINE 33:
	asm( 
"	      004322d0    pop edi"
"	      004322d1    pop esi"
"	      004322d2    pop ebx"
"	      004322d3    leave"
"	      004322d4    ret 4"
);
}

// FUNCTION: COPTER_D 0x004322d7
class ScreenBuffer* CSparkalWindow::SetBackBuffer(class ScreenBuffer* pBuffer) {
// LINE 41:
	asm( 
"	      004322d7    push ebp"
"	      004322d8    mov ebp,esp"
"	      004322da    sub esp,8"
"	      004322dd    push ebx"
"	      004322de    push esi"
"	      004322df    push edi"
"	      004322e0    mov [ebp-8],ecx"
);
// LINE 42:
	asm( 
"	      004322e3    mov eax,[ebp-8]"
"	      004322e6    mov eax,[eax+14h]"
"	      004322e9    mov [ebp-4],eax"
);
// LINE 43:
	asm( 
"	      004322ec    mov eax,[ebp+8]"
"	      004322ef    mov ecx,[ebp-8]"
"	      004322f2    mov [ecx+14h],eax"
);
// LINE 44:
	asm( 
"	      004322f5    mov eax,[ebp-4]"
"	      004322f8    jmp near ptr 004322FDh"
);
// LINE 45:
	asm( 
"	      004322fd    pop edi"
"	      004322fe    pop esi"
"	      004322ff    pop ebx"
"	      00432300    leave"
"	      00432301    ret 4"
);
}

// FUNCTION: COPTER_D 0x00432304
unsigned long CSparkalWindow::Draw() {
// LINE 53:
	asm( 
"	      00432304    push ebp"
"	      00432305    mov ebp,esp"
"	      00432307    sub esp,4"
"	      0043230a    push ebx"
"	      0043230b    push esi"
"	      0043230c    push edi"
"	      0043230d    mov [ebp-4],ecx"
);
// LINE 55:
	asm( 
"	      00432310    mov eax,[ebp-4]"
"	      00432313    mov eax,[eax]"
"	      00432315    mov ecx,[ebp-4]"
"	      00432318    call dword ptr [eax+28h]"
"	      0043231b    jmp near ptr 00432320h"
);
// LINE 56:
	asm( 
"	      00432320    pop edi"
"	      00432321    pop esi"
"	      00432322    pop ebx"
"	      00432323    leave"
"	      00432324    ret"
);
}

// FUNCTION: COPTER_D 0x00432325
unsigned long CSparkalWindow::SwapBuffer() {
// LINE 63:
	asm( 
"	      00432325    push ebp"
"	      00432326    mov ebp,esp"
"	      00432328    sub esp,4"
"	      0043232b    push ebx"
"	      0043232c    push esi"
"	      0043232d    push edi"
"	      0043232e    mov [ebp-4],ecx"
);
// LINE 64:
	asm( 
"	      00432331    mov eax,[ebp-4]"
"	      00432334    cmp dword ptr [eax+14h],0"
"	      00432338    je near ptr 00432380h"
);
// LINE 65:
	asm( 
"	      0043233e    mov eax,[ebp-4]"
"	      00432341    mov ecx,[ebp-4]"
"	      00432344    mov ecx,[ecx+14h]"
"	      00432347    mov edx,[ecx]"
"	      00432349    mov ecx,[eax+14h]"
"	      0043234c    call dword ptr [edx]"
"	      0043234e    test eax,eax"
"	      00432350    je near ptr 00432380h"
);
// LINE 66:
	asm( 
"	      00432356    push 0"
"	      00432358    push 0"
"	      0043235a    mov eax,[ebp-4]"
"	      0043235d    push eax"
"	      0043235e    mov eax,[ebp-4]"
"	      00432361    mov ecx,[ebp-4]"
"	      00432364    mov ecx,[ecx+14h]"
"	      00432367    mov edx,[ecx]"
"	      00432369    mov ecx,[eax+14h]"
"	      0043236c    call dword ptr [edx+1Ch]"
);
// LINE 67:
	asm( 
"	      0043236f    mov eax,[ebp-4]"
"	      00432372    mov ecx,[ebp-4]"
"	      00432375    mov ecx,[ecx+14h]"
"	      00432378    mov edx,[ecx]"
"	      0043237a    mov ecx,[eax+14h]"
"	      0043237d    call dword ptr [edx+4]"
);
// LINE 70:
	asm( 
"	      00432380    xor eax,eax"
"	      00432382    jmp near ptr 00432387h"
);
// LINE 71:
	asm( 
"	      00432387    pop edi"
"	      00432388    pop esi"
"	      00432389    pop ebx"
"	      0043238a    leave"
"	      0043238b    ret"
);
}

// FUNCTION: COPTER_D 0x0043238c
unsigned long CSparkalWindow::SwapBuffer(long Left, long Top, long Right, long Bottom) {
// LINE 80:
	asm( 
"	      0043238c    push ebp"
"	      0043238d    mov ebp,esp"
"	      0043238f    sub esp,14h"
"	      00432392    push ebx"
"	      00432393    push esi"
"	      00432394    push edi"
"	      00432395    mov [ebp-14h],ecx"
);
// LINE 81:
	asm( 
"	      00432398    mov dword ptr [ebp-4],0"
);
// LINE 86:
	asm( 
"	      0043239f    mov eax,[ebp-14h]"
"	      004323a2    cmp dword ptr [eax+14h],0"
"	      004323a6    je near ptr 004324C6h"
"	      004323ac    mov eax,[ebp-14h]"
"	      004323af    mov ecx,[ebp-14h]"
"	      004323b2    mov ecx,[ecx+14h]"
"	      004323b5    mov edx,[ecx]"
"	      004323b7    mov ecx,[eax+14h]"
"	      004323ba    call dword ptr [edx]"
"	      004323bc    test eax,eax"
"	      004323be    je near ptr 004324C6h"
);
// LINE 92:
	asm( 
"	      004323c4    mov eax,[ebp+14h]"
"	      004323c7    sub eax,[ebp+0Ch]"
"	      004323ca    mov ecx,0Ah"
"	      004323cf    cdq"
"	      004323d0    idiv ecx"
"	      004323d2    mov [ebp-10h],eax"
);
// LINE 93:
	asm( 
"	      004323d5    mov eax,[ebp-10h]"
"	      004323d8    mov [ebp-0Ch],eax"
);
// LINE 94:
	asm( 
"	      004323db    mov eax,[ebp+14h]"
"	      004323de    sub eax,[ebp-0Ch]"
"	      004323e1    mov [ebp-8],eax"
);
// LINE 97:
	asm( 
"	      004323e4    mov eax,[ebp-8]"
"	      004323e7    push eax"
"	      004323e8    mov eax,[ebp+8]"
"	      004323eb    push eax"
"	      004323ec    mov eax,[ebp-0Ch]"
"	      004323ef    add eax,[ebp+0Ch]"
"	      004323f2    push eax"
"	      004323f3    mov eax,[ebp+10h]"
"	      004323f6    push eax"
"	      004323f7    mov eax,[ebp+0Ch]"
"	      004323fa    push eax"
"	      004323fb    mov eax,[ebp+8]"
"	      004323fe    push eax"
"	      004323ff    mov eax,[ebp-14h]"
"	      00432402    push eax"
"	      00432403    mov eax,[ebp-14h]"
"	      00432406    mov ecx,[ebp-14h]"
"	      00432409    mov ecx,[ecx+14h]"
"	      0043240c    mov edx,[ecx]"
"	      0043240e    mov ecx,[eax+14h]"
"	      00432411    call dword ptr [edx+20h]"
);
// LINE 99:
	asm( 
"	      00432414    cmp dword ptr [ebp-10h],0"
"	      00432418    jne near ptr 00432437h"
"	      0043241e    push 63h"
"	      00432420    push 59836Ch"
"	      00432425    push 598394h"
"	      0043242a    call 0056DA30h"
"	      0043242f    add esp,0Ch"
"	      00432432    jmp near ptr 0043243Ch"
"	      00432437    jmp near ptr 0043243Ch"
);
// LINE 102:
	asm( 
"	      0043243c    mov eax,[ebp-8]"
"	      0043243f    push eax"
"	      00432440    mov eax,[ebp+8]"
"	      00432443    push eax"
"	      00432444    mov eax,[ebp-0Ch]"
"	      00432447    add eax,[ebp+0Ch]"
"	      0043244a    push eax"
"	      0043244b    mov eax,[ebp+10h]"
"	      0043244e    push eax"
"	      0043244f    mov eax,[ebp+0Ch]"
"	      00432452    push eax"
"	      00432453    mov eax,[ebp+8]"
"	      00432456    push eax"
"	      00432457    mov eax,[ebp-14h]"
"	      0043245a    push eax"
"	      0043245b    mov eax,[ebp-14h]"
"	      0043245e    mov ecx,[ebp-14h]"
"	      00432461    mov ecx,[ecx+14h]"
"	      00432464    mov edx,[ecx]"
"	      00432466    mov ecx,[eax+14h]"
"	      00432469    call dword ptr [edx+20h]"
);
// LINE 103:
	asm( 
"	      0043246c    mov eax,[ebp-10h]"
"	      0043246f    add [ebp-0Ch],eax"
);
// LINE 104:
	asm( 
"	      00432472    xor eax,eax"
"	      00432474    sub eax,[ebp-10h]"
"	      00432477    neg eax"
"	      00432479    sub [ebp-8],eax"
);
// LINE 105:
	asm( 
"	      0043247c    mov eax,[ebp+0Ch]"
"	      0043247f    cmp [ebp-8],eax"
"	      00432482    jg near ptr 0043243Ch"
);
// LINE 106:
	asm( 
"	      00432488    mov eax,[ebp+0Ch]"
"	      0043248b    push eax"
"	      0043248c    mov eax,[ebp+8]"
"	      0043248f    push eax"
"	      00432490    mov eax,[ebp+14h]"
"	      00432493    push eax"
"	      00432494    mov eax,[ebp+10h]"
"	      00432497    push eax"
"	      00432498    mov eax,[ebp+0Ch]"
"	      0043249b    push eax"
"	      0043249c    mov eax,[ebp+8]"
"	      0043249f    push eax"
"	      004324a0    mov eax,[ebp-14h]"
"	      004324a3    push eax"
"	      004324a4    mov eax,[ebp-14h]"
"	      004324a7    mov ecx,[ebp-14h]"
"	      004324aa    mov ecx,[ecx+14h]"
"	      004324ad    mov edx,[ecx]"
"	      004324af    mov ecx,[eax+14h]"
"	      004324b2    call dword ptr [edx+20h]"
);
// LINE 107:
	asm( 
"	      004324b5    mov eax,[ebp-14h]"
"	      004324b8    mov ecx,[ebp-14h]"
"	      004324bb    mov ecx,[ecx+14h]"
"	      004324be    mov edx,[ecx]"
"	      004324c0    mov ecx,[eax+14h]"
"	      004324c3    call dword ptr [edx+4]"
);
// LINE 110:
	asm( 
"	      004324c6    mov eax,[ebp-4]"
"	      004324c9    jmp near ptr 004324CEh"
);
// LINE 111:
	asm( 
"	      004324ce    pop edi"
"	      004324cf    pop esi"
"	      004324d0    pop ebx"
"	      004324d1    leave"
"	      004324d2    ret 10h"
);
}



// Contribution: 3:0000136c-00001398 Module: 61, 4 byte alignment, initialized_data, read, write, 
