// Module: mdatel.obj
// Source: C:\Copter\source\sparkal\mdatel.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: int32_t;

// Type: /*unpacked*/ class ostrstream;
// VTABLE: COPTER_D 0x00593b34
class ostrstream : public ostream, public virtual <indirect> ios
{ // not packed(0x58 bytes) TI: 0x1fc2
public:
	<NoType> ios;
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream() /* override */;
	int32_t pcount();
	/*unpacked*/ class strstreambuf* rdbuf();
	char * str();
};

// Type: /*packed*/ class MTimeLocalized (forward reference);
// VTABLE: COPTER_D 0x00592680
class MTimeLocalized : public MTime
{ // packed(0x10 bytes) TI: 0x2bc9
public:
	void MTimeLocalized(const /*packed*/ class MDate&, uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(unsigned long);
	void MTimeLocalized();
	virtual char * PrintStringLocalized(char *, int32_t); // vtable+0x0
	/*+0xc*/   int32_t nLanguage;
};

// Type: /*unpacked*/ class ostream (forward reference);
// ostream Class implementation not found

// Type: uint32_t;

// Type: char;

// Type: void;

// Type: /*packed*/ class MDateLocalized (forward reference);
// VTABLE: COPTER_D 0x0058f3d0
class MDateLocalized : public MDate
{ // packed(0x10 bytes) TI: 0x2bcd
public:
	void MDateLocalized(const /*unpacked*/ class MTime&);
	void MDateLocalized(/*unpacked*/ class istream&);
	void MDateLocalized(uint32_t, uint32_t, uint32_t);
	void MDateLocalized(uint32_t, char *, uint32_t);
	void MDateLocalized(uint32_t, uint32_t);
	void MDateLocalized();
	virtual char * NameOfDayLocalized(char *, int32_t); // vtable+0x8
	virtual char * NameOfMonthLocalized(char *, int32_t); // vtable+0xc
	virtual char * PrintStringLocalized(char *, int32_t); // vtable+0x10
	virtual /*packed*/ class MDate PreviousLocalized(char *, int32_t); // vtable+0x14
	// calltype: NearC
	static uint32_t DayOfWeekLocalized(char *, int32_t);
	// calltype: NearC
	static uint32_t IndexOfMonthLocalized(char *, int32_t);
	// calltype: NearC
	static char * DayNameLocalized(uint32_t, char *, int32_t);
	// calltype: NearC
	static char * MonthNameLocalized(uint32_t, char *, int32_t);
	/*+0xc*/   int32_t nLanguage;
};

// Type: /*unpacked*/ class istream (forward reference);
// istream Class implementation not found

// Type: /*unpacked*/ class MTime (forward reference);
// MTime Class implementation not found

// Type: /*packed*/ class MDate (forward reference);
// VTABLE: COPTER_D 0x0058f3e8
class MDate{ // packed(0xc bytes) TI: 0x284c
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const /*unpacked*/ class MTime&);
	void MDate(/*unpacked*/ class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const /*packed*/ class MDate&, const /*packed*/ class MDate&);
	int32_t CompareTo(const /*packed*/ class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	/*packed*/ class MDate MaxDate(const /*packed*/ class MDate&);
	/*packed*/ class MDate MinDate(const /*packed*/ class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	/*packed*/ class MDate Previous(uint32_t);
	virtual /*packed*/ class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const /*packed*/ class MDate&);
	int32_t operator<=(const /*packed*/ class MDate&);
	int32_t operator>(const /*packed*/ class MDate&);
	int32_t operator>=(const /*packed*/ class MDate&);
	int32_t operator==(const /*packed*/ class MDate&);
	int32_t operator!=(const /*packed*/ class MDate&);
	unsigned long operator-(const /*packed*/ class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(/*unpacked*/ class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	/*+0x4*/   unsigned long Julnum;
	/*+0x8*/   enum MDate::HowToPrint PrintOption;
};

// Type: /*unpacked*/ class ios;
// VTABLE: COPTER_D 0x00593ad4
class ios{ // not packed(0x50 bytes) TI: 0x4126
	enum io_state {
		goodbit = 0,
		eofbit = 1,
		failbit = 2,
		badbit = 4,
	};
	enum open_mode {
		in = 1,
		out = 2,
		ate = 4,
		app = 8,
		trunc = 16,
		nocreate = 32,
		noreplace = 64,
		binary = 128,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
	enum /* __unnamed */ {
		skipws = 1,
		left = 2,
		right = 4,
		internal = 8,
		dec = 16,
		oct = 32,
		hex = 64,
		showbase = 128,
		showpoint = 256,
		uppercase = 512,
		showpos = 1024,
		scientific = 2048,
		fixed = 4096,
		unitbuf = 8192,
		stdio = 16384,
	};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
	void ios(const /*unpacked*/ class ios&);
	void ios();
	void ios(/*unpacked*/ class streambuf*);
	virtual void ~ios(); // vtable+0x0
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	/*unpacked*/ class ostream* tie();
	/*unpacked*/ class ostream* tie(/*unpacked*/ class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	/*unpacked*/ class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	/*unpacked*/ class ios& operator=(const /*unpacked*/ class ios&);
	void init(/*unpacked*/ class streambuf*);
	enum /* __unnamed */ {
		skipping = 0,
		tied = 1,
	};
protected:
	/*+0x4*/   /*unpacked*/ class streambuf *bp;
	/*+0x8*/   int32_t state;
	/*+0xc*/   int32_t ispecial;
	/*+0x10*/  int32_t ospecial;
	/*+0x14*/  int32_t isfx_special;
	/*+0x18*/  int32_t osfx_special;
	/*+0x1c*/  int32_t x_delbuf;
	/*+0x20*/  /*unpacked*/ class ostream *x_tie;
	/*+0x24*/  long x_flags;
	/*+0x28*/  int32_t x_precision;
	/*+0x2c*/  char x_fill; // 0x1 bytes
	/*+0x30*/  int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	/*unpacked*/ struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lockc;
	/*+0x34*/  int32_t LockFlg;
	/*+0x38*/  /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lock; // 0x18 bytes
};

// Type: /*packed*/ class MDate;
// VTABLE: COPTER_D 0x0058f3e8
class MDate{ // packed(0xc bytes) TI: 0x284c
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const /*unpacked*/ class MTime&);
	void MDate(/*unpacked*/ class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const /*packed*/ class MDate&, const /*packed*/ class MDate&);
	int32_t CompareTo(const /*packed*/ class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	/*packed*/ class MDate MaxDate(const /*packed*/ class MDate&);
	/*packed*/ class MDate MinDate(const /*packed*/ class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	/*packed*/ class MDate Previous(uint32_t);
	virtual /*packed*/ class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const /*packed*/ class MDate&);
	int32_t operator<=(const /*packed*/ class MDate&);
	int32_t operator>(const /*packed*/ class MDate&);
	int32_t operator>=(const /*packed*/ class MDate&);
	int32_t operator==(const /*packed*/ class MDate&);
	int32_t operator!=(const /*packed*/ class MDate&);
	unsigned long operator-(const /*packed*/ class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(/*unpacked*/ class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	/*+0x4*/   unsigned long Julnum;
	/*+0x8*/   enum MDate::HowToPrint PrintOption;
};



// Contribution: 1:0001ead0-0001f5cb Module: 72, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041fad0
char * MTimeLocalized::PrintStringLocalized(char * szTime, int32_t nLanguageToUse) {
	/*bp-0x58*/  /*unpacked*/ class ostrstream strtemp; // 0x58 bytes
	/*bp-0x5c*/  int32_t nTempOriginalLanguage;

// LINE 28:
	nTempOriginalLanguage = this->nLanguage;
// LINE 29:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T28;
// LINE 30:
	nLanguageToUse = this->nLanguage;
// LINE 31:
_T28:
	this->nLanguage = nLanguageToUse;
// LINE 33:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x40;
	__asm        mov    eax, szTime;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x64], eax;
// LINE 34:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0041FB37;
// LINE 36:
	this->nLanguage = nTempOriginalLanguage;
// LINE 37:
	__asm        mov    eax, szTime;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0041FB4B;

	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    near ptr 0x0041FB63;
// LINE 38:
}

// FUNCTION: COPTER_D 0x0041fb6a
/*unpacked*/ class ostream& operator<<(/*unpacked*/ class ostream& s, const /*packed*/ class MTimeLocalized& t) {
	/*bp-0x50*/  char buf1[80]; // 0x50 bytes
	/*bp-0xa0*/  char buf[80]; // 0x50 bytes
	/*bp-0xf8*/  /*unpacked*/ class ostrstream out; // 0x58 bytes
	/*bp-0xfc*/  int32_t nLanguageToUse;
	/*bp-0x100*/ uint32_t mm;
	/*bp-0x104*/ uint32_t hh;

// LINE 50:
	__asm        mov    al, ds:[0x597298];
	__asm        mov    buf[0], al;
	__asm        lea    edi, buf[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x13;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 51:
	__asm        mov    al, ds:[0x59729C];
	__asm        mov    buf1[0], al;
	__asm        lea    edi, buf1[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x13;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 52:
	__asm        mov    ecx, t;
	__asm        add    ecx, 4;
	__asm        call   MTime::Hour;
	__asm        mov    hh, eax;
// LINE 53:
	__asm        mov    ecx, t;
	__asm        add    ecx, 4;
	__asm        call   MTime::Minute;
	__asm        mov    mm, eax;
// LINE 54:
	nLanguageToUse = t.nLanguage;
// LINE 56:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostrstream::ostrstream;
// LINE 58:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T100;
// LINE 59:
	__asm        cmp    t, 0;
	__asm        je     _Tae;

	__asm        mov    eax, t;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    _Tb8;
_Tae:
	__asm        mov    dword ptr [ebp-0x11C], 0;
_Tb8:
	__asm        push   0x5972A0;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x114];
	__asm        call   MDateLocalized::MDateLocalized;
	__asm        push   eax;
	__asm        lea    eax, out.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T100;
// LINE 61:
_T100:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T118;
// LINE 62:
	nLanguageToUse = gDefaultLanguage;
// LINE 64:
_T118:
	__asm        cmp    nLanguageToUse, 1;
	__asm        jne    _T194;
// LINE 65:
	__asm        cmp    hh, 0xC;
	__asm        jbe    _T146;

	__asm        mov    eax, hh;
	__asm        sub    eax, 0xC;
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    _T152;
_T146:
	__asm        mov    eax, hh;
	__asm        mov    [ebp-0x120], eax;
_T152:
	__asm        mov    eax, 0x5972A8;
	__asm        mov    ecx, 0x5972A4;
	__asm        xor    edx, edx;
	__asm        cmp    hh, 0xC;
	__asm        setae  dl;
	__asm        dec    edx;
	__asm        sub    ecx, eax;
	__asm        and    edx, ecx;
	__asm        add    edx, eax;
	__asm        push   edx;
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        push   0x5972AC;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 67:
	__asm        jmp    _T29f;
// LINE 68:
_T194:
	__asm        mov    eax, nLanguageToUse;
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    _T211;
// LINE 85:
_T1a5:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972B8;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 86:
	__asm        jmp    _T29f;
// LINE 96:
_T1c9:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972C0;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 97:
	__asm        jmp    _T29f;
// LINE 100:
_T1ed:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972C8;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 101:
	__asm        jmp    _T29f;
_T211:
	__asm        sub    dword ptr [ebp-0x128], 2;
	__asm        cmp    dword ptr [ebp-0x128], 0x24;
	__asm        ja     _T1ed;

	__asm        mov    eax, [ebp-0x128];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_27a[0][eax];
	__asm        jmp    _Switch_23a[0][ecx*4];
// Switch pointers:
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1a5
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1c9
//   _T1a5
//   _T1ed
// Switch table
// LINE 104:
_T29f:
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
// LINE 105:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x0041FE31;

	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x118];
	__asm        jmp    near ptr 0x0041FE52;
// LINE 106:
}

// FUNCTION: COPTER_D 0x0041fe57
void MDateLocalized::MDateLocalized() {

	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 122:
	__asm        jmp    near ptr 0x0041FE83;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fe8b
void MDateLocalized::MDateLocalized(uint32_t day, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 130:
	__asm        jmp    near ptr 0x0041FEBF;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fec9
void MDateLocalized::MDateLocalized(uint32_t day, char * monthName, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 138:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        call   MDateLocalized::IndexOfMonthLocalized;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 139:
	__asm        jmp    near ptr 0x0041FF26;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ff30
void MDateLocalized::MDateLocalized(uint32_t day, uint32_t month, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, month;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 147:
	__asm        jmp    near ptr 0x0041FF68;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ff72
void MDateLocalized::MDateLocalized(/*unpacked*/ class istream& s) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::ParseFrom;
	__asm        jmp    near ptr 0x0041FF98;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 155:
	__asm        jmp    near ptr 0x0041FFB0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ffba
void MDateLocalized::MDateLocalized(const /*unpacked*/ class MTime& time) {

	__asm        mov    eax, time;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 163:
	__asm        jmp    near ptr 0x0041FFEA;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fff4
char * MDateLocalized::NameOfDayLocalized(char * szDayName, int32_t nLanguageToUse) {
// LINE 171:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 172:
	nLanguageToUse = this->nLanguage;
// LINE 173:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 174:
	nLanguageToUse = gDefaultLanguage;
// LINE 176:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::WeekDay;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayNameLocalized;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420043;
// LINE 177:
}

// FUNCTION: COPTER_D 0x0042004a
char * MDateLocalized::NameOfMonthLocalized(char * szMonthName, int32_t nLanguageToUse) {
// LINE 184:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 185:
	nLanguageToUse = this->nLanguage;
// LINE 186:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 187:
	nLanguageToUse = gDefaultLanguage;
// LINE 189:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDateLocalized::MonthNameLocalized;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420099;
// LINE 190:
}

// FUNCTION: COPTER_D 0x004200a0
char * MDateLocalized::PrintStringLocalized(char * szDate, int32_t nLanguageToUse) {
	/*bp-0x58*/  /*unpacked*/ class ostrstream strtemp; // 0x58 bytes
	/*bp-0x5c*/  int32_t nTempOriginalLanguage;

// LINE 200:
	nTempOriginalLanguage = this->nLanguage;
// LINE 201:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T28;
// LINE 202:
	nLanguageToUse = this->nLanguage;
// LINE 203:
_T28:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T3a;
// LINE 204:
	nLanguageToUse = gDefaultLanguage;
// LINE 205:
_T3a:
	this->nLanguage = nLanguageToUse;
// LINE 207:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x40;
	__asm        mov    eax, szDate;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x64], eax;
// LINE 208:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420119;
// LINE 210:
	this->nLanguage = nTempOriginalLanguage;
// LINE 211:
	__asm        mov    eax, szDate;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0042012D;

	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    near ptr 0x00420145;
// LINE 212:
}

// FUNCTION: COPTER_D 0x0042014c
/*packed*/ class MDate MDateLocalized::PreviousLocalized(char * dayName, int32_t nLanguageToUse) {
	/*bp-0x4*/   uint32_t day;

// LINE 222:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 223:
	nLanguageToUse = this->nLanguage;
// LINE 224:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 225:
	nLanguageToUse = gDefaultLanguage;
// LINE 227:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayOfWeekLocalized;
	__asm        add    esp, 8;
	__asm        mov    day, eax;
// LINE 228:
	__asm        cmp    day, 0;
	__asm        je     _T66;
// LINE 229:
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Previous;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    _T76;
// LINE 230:
_T66:
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        call   MDate::MDate;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    _T76;
// LINE 231:
_T76:
}

// FUNCTION: COPTER_D 0x004201c9
uint32_t MDateLocalized::DayOfWeekLocalized(char * dayName, int32_t nLanguageToUse) {
	/*bp-0x4*/   int32_t i;
	/*bp-0x1004*/ char szCurrentDay[4096]; // 0x1000 bytes

// LINE 246:
	__asm        mov    i, 1;
	__asm        jmp    _T1f;
_T1c:
	i++;
_T1f:
	__asm        cmp    i, 7;
	__asm        jg     _T62;
// LINE 247:
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        lea    eax, szCurrentDay[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayNameLocalized;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T5d;
// LINE 248:
	__asm        mov    eax, i;
	__asm        jmp    _T69;
// LINE 249:
_T5d:
	__asm        jmp    _T1c;
// LINE 250:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 251:
_T69:
}

// FUNCTION: COPTER_D 0x00420237
uint32_t MDateLocalized::IndexOfMonthLocalized(char * monthName, int32_t nLanguageToUse) {
	/*bp-0x4*/   int32_t i;
	/*bp-0x1004*/ char szCurrentMonth[4096]; // 0x1000 bytes

// LINE 267:
	__asm        mov    i, 1;
	__asm        jmp    _T1f;
_T1c:
	i++;
_T1f:
	__asm        cmp    i, 0x1F;
	__asm        jg     _T62;
// LINE 268:
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        lea    eax, szCurrentMonth[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   MDateLocalized::MonthNameLocalized;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T5d;
// LINE 269:
	__asm        mov    eax, i;
	__asm        jmp    _T69;
// LINE 270:
_T5d:
	__asm        jmp    _T1c;
// LINE 271:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 272:
_T69:
}

// FUNCTION: COPTER_D 0x004202a5
char * MDateLocalized::DayNameLocalized(uint32_t weekDayNumber, char * szDayName, int32_t nLanguageToUse) {
	/*bp-0x4*/   int32_t nFullStringID;

// LINE 288:
	weekDayNumber--;
// LINE 289:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, weekDayNumber;
	__asm        add    eax, 0x1F4;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 290:
	__asm        push   0xFFF;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T85;

	__asm        push   0xFFF;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        push   0x597200;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T8a;
_T85:
	__asm        jmp    _T8a;
// LINE 292:
_T8a:
	__asm        mov    eax, szDayName;
	__asm        jmp    near ptr 0x00420337;
// LINE 293:
}

// FUNCTION: COPTER_D 0x0042033c
char * MDateLocalized::MonthNameLocalized(uint32_t monthNumber, char * szMonthName, int32_t nLanguageToUse) {
	/*bp-0x4*/   int32_t nFullStringID;

// LINE 308:
	monthNumber--;
// LINE 309:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, monthNumber;
	__asm        add    eax, 0x1FE;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 310:
	__asm        push   0xFFF;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T85;

	__asm        push   0xFFF;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        push   0x597200;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T8a;
_T85:
	__asm        jmp    _T8a;
// LINE 312:
_T8a:
	__asm        mov    eax, szMonthName;
	__asm        jmp    near ptr 0x004203CE;
// LINE 313:
}

// FUNCTION: COPTER_D 0x004203d3
/*unpacked*/ class ostream& operator<<(/*unpacked*/ class ostream& s, const /*packed*/ class MDateLocalized& d) {
	/*bp-0x50*/  char buf[80]; // 0x50 bytes
	/*bp-0x54*/  int32_t nLanguageToUse;

// LINE 327:
	nLanguageToUse = d.nLanguage;
// LINE 329:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T24;
// LINE 330:
	nLanguageToUse = gDefaultLanguage;
// LINE 332:
_T24:
	__asm        mov    eax, nLanguageToUse;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T155;
// LINE 340:
_T2f:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        push   0x5972D0;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 341:
	__asm        jmp    _T1e0;
// LINE 356:
_T60:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972DC;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 357:
	__asm        jmp    _T1e0;
// LINE 366:
_T91:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972E8;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 367:
	__asm        jmp    _T1e0;
// LINE 382:
_Tc2:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972F4;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 383:
	__asm        jmp    _T1e0;
// LINE 393:
_Tf3:
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        push   0x597300;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 394:
	__asm        jmp    _T1e0;
// LINE 401:
_T124:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59730C;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 402:
	__asm        jmp    _T1e0;
_T155:
	__asm        inc    dword ptr [ebp-0x58];
	__asm        cmp    dword ptr [ebp-0x58], 0x27;
	__asm        ja     _T124;

	__asm        mov    eax, [ebp-0x58];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_1b8[0][eax];
	__asm        jmp    _Switch_174[0][ecx*4];
// Switch pointers:
//   _T2f
//   _T60
//   _Tc2
//   _T60
//   _T91
//   _Tf3
//   _T91
//   _Tf3
//   _T60
//   _Tc2
//   _Tc2
//   _Tf3
//   _Tc2
//   _T60
//   _Tc2
//   _T60
//   _T124
// Switch table
// LINE 403:
_T1e0:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
// LINE 404:
	__asm        mov    eax, s;
	__asm        jmp    near ptr 0x004205C7;
// LINE 405:
}



// Contribution: 1:0001f5d0-0001f5ee Module: 72, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004205d0
// ends



// Contribution: 2:000003d0-000003e7 Module: 72, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MDateLocalized @ 0x0058f3d0
//   00: MDate::PrintString @ 0x004bce07
//   01: MDate::Previous @ 0x004bccce
//   02: MDateLocalized::NameOfDayLocalized @ 0x0041fff4
//   03: MDateLocalized::NameOfMonthLocalized @ 0x0042004a
//   04: MDateLocalized::PrintStringLocalized @ 0x004200a0
//   05: MDateLocalized::PreviousLocalized @ 0x0042014c
//   6 entries



// Contribution: 2:000003e8-000003ef Module: 72, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MDate @ 0x0058f3e8
//   00: MDate::PrintString @ 0x004bce07
//   01: MDate::Previous @ 0x004bccce
//   2 entries



// Contribution: 3:00000298-00000317 Module: 72, 4 byte alignment, initialized_data, read, write, 
