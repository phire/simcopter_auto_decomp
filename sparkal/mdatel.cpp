// Module: mdatel.obj
// Source: C:\Copter\source\sparkal\mdatel.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class MTimeLocalized (forward reference);
// VTABLE: COPTER_D 0x00592680
class MTimeLocalized : public MTime
{
public:
	void MTimeLocalized(const class MDate&, uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(unsigned long);
	void MTimeLocalized();
	virtual char * PrintStringLocalized(char *, int32_t); // vtable+0x0
	int32_t nLanguage;
};

// Type: char *;

// Type: int32_t;

// Type: class ostrstream;
// VTABLE: COPTER_D 0x00593b34
class ostrstream : public virtual ios, public ostream, public virtual <indirect> ios
{
public:
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream() /* override */;
	int32_t pcount();
	class strstreambuf* rdbuf();
	char * str();
};

// Type: class ostream (forward reference);
// VTABLE: COPTER_D 0x00593a44
class ostream : public virtual ios
{
public:
	int32_t *ios[0];
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream() /* override */;
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(class ios& (*)(class ios&));
	class ostream& operator<<(class ostream& (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: uint32_t;

// Type: char;

// Type: class MDateLocalized (forward reference);
// VTABLE: COPTER_D 0x0058f3d0
class MDateLocalized : public MDate
{
public:
	void MDateLocalized(const class MTime&);
	void MDateLocalized(class istream&);
	void MDateLocalized(uint32_t, uint32_t, uint32_t);
	void MDateLocalized(uint32_t, char *, uint32_t);
	void MDateLocalized(uint32_t, uint32_t);
	void MDateLocalized();
	virtual char * NameOfDayLocalized(char *, int32_t); // vtable+0x8
	virtual char * NameOfMonthLocalized(char *, int32_t); // vtable+0xc
	virtual char * PrintStringLocalized(char *, int32_t); // vtable+0x10
	virtual class MDate PreviousLocalized(char *, int32_t); // vtable+0x14
	// calltype: NearC
	static uint32_t DayOfWeekLocalized(char *, int32_t);
	// calltype: NearC
	static uint32_t IndexOfMonthLocalized(char *, int32_t);
	// calltype: NearC
	static char * DayNameLocalized(uint32_t, char *, int32_t);
	// calltype: NearC
	static char * MonthNameLocalized(uint32_t, char *, int32_t);
	int32_t nLanguage;
};

// Type: void;

// Type: class istream (forward reference);
// VTABLE: COPTER_D 0x00593ea4
class istream : public virtual ios
{
public:
	int32_t *ios[0];
	void istream(class ios&);
	void istream(const class istream&);
	void istream();
	void istream(class streambuf*);
	virtual void ~istream() /* override */;
	int32_t ipfx(int32_t);
	void isfx();
	class istream& operator>>(class streambuf*);
	class istream& operator>>(double&);
	class istream& operator>>(double&);
	class istream& operator>>(float&);
	class istream& operator>>(unsigned long&);
	class istream& operator>>(long&);
	class istream& operator>>(uint32_t&);
	class istream& operator>>(int32_t&);
	class istream& operator>>(unsigned short&);
	class istream& operator>>(short&);
	class istream& operator>>(char&);
	class istream& operator>>(unsigned char&);
	class istream& operator>>(char&);
	class istream& operator>>(char *);
	class istream& operator>>(unsigned char *);
	class istream& operator>>(char *);
	class istream& operator>>(class ios& (*)(class ios&));
	class istream& operator>>(class istream& (*)(class istream&));
	class istream& get(char *, int32_t, int32_t);
	class istream& get(class streambuf&, char);
	class istream& get(char&);
	class istream& get(unsigned char&);
	class istream& get(char&);
	class istream& get(char *, int32_t, char);
	class istream& get(unsigned char *, int32_t, char);
	class istream& get(char *, int32_t, char);
	int32_t get();
	class istream& getline(char *, int32_t, char);
	class istream& getline(unsigned char *, int32_t, char);
	class istream& getline(char *, int32_t, char);
	class istream& ignore(int32_t, int32_t);
	class istream& read(char *, int32_t);
	class istream& read(unsigned char *, int32_t);
	class istream& read(char *, int32_t);
	int32_t gcount();
	int32_t peek();
	class istream& putback(char);
	int32_t sync();
	class istream& seekg(long, enum ios::seek_dir);
	class istream& seekg(long);
	long tellg();
	void eatwhite();
protected:
	class istream& operator=(const class istream&);
	class istream& operator=(class streambuf*);
	int32_t do_ipfx(int32_t);
private:
	int32_t getint(char *);
	int32_t getdouble(char *, int32_t);
	int32_t _fGline;
	int32_t x_gcount;
};

// Type: class MTime (forward reference);
// MTime Class implementation not found

// Type: class MDate (forward reference);
// VTABLE: COPTER_D 0x0058f3e8
class MDate{
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	virtual class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};

// Type: class ios;
// VTABLE: COPTER_D 0x00593ad4
class ios{
	enum io_state {
		goodbit = 0,
		eofbit = 1,
		failbit = 2,
		badbit = 4,
	};
	enum open_mode {
		in = 1,
		out = 2,
		ate = 4,
		app = 8,
		trunc = 16,
		nocreate = 32,
		noreplace = 64,
		binary = 128,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
	enum /* __unnamed */ {
		skipws = 1,
		left = 2,
		right = 4,
		internal = 8,
		dec = 16,
		oct = 32,
		hex = 64,
		showbase = 128,
		showpoint = 256,
		uppercase = 512,
		showpos = 1024,
		scientific = 2048,
		fixed = 4096,
		unitbuf = 8192,
		stdio = 16384,
	};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
protected:
	void ios(const class ios&);
	void ios();
public:
	void ios(class streambuf*);
	virtual void ~ios(); // vtable+0x0
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	class ostream* tie();
	class ostream* tie(class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	class ios& operator=(const class ios&);
	void init(class streambuf*);
	enum /* __unnamed */ {
		skipping = 0,
		tied = 1,
	};
protected:
	class streambuf *bp;
	int32_t state;
	int32_t ispecial;
	int32_t ospecial;
	int32_t isfx_special;
	int32_t osfx_special;
	int32_t x_delbuf;
	class ostream *x_tie;
	long x_flags;
	int32_t x_precision;
	char x_fill;
	int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static struct _CRT_CRITICAL_SECTION x_lockc;
	int32_t LockFlg;
	struct _CRT_CRITICAL_SECTION x_lock;
};

// Type: class ostream;
// VTABLE: COPTER_D 0x00593a44
class ostream : public virtual ios
{
public:
	int32_t *ios[0];
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream() /* override */;
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(class ios& (*)(class ios&));
	class ostream& operator<<(class ostream& (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: class MDate;
// VTABLE: COPTER_D 0x0058f3e8
class MDate{
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	virtual class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};



// Contribution: 1:0001ead0-0001f5cb Module: 72, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041fad0
char * MTimeLocalized::PrintStringLocalized(char * szTime, int32_t nLanguageToUse) {
	int32_t nTempOriginalLanguage;
	class ostrstream strtemp;

// LINE 28:
	nTempOriginalLanguage = this->nLanguage;
// LINE 29:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T28;
// LINE 30:
	nLanguageToUse = this->nLanguage;
// LINE 31:
_T28:
	this->nLanguage = nLanguageToUse;
// LINE 33:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x40;
	__asm        mov    eax, szTime;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x64], eax;
// LINE 34:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0041FB37;
// LINE 36:
	this->nLanguage = nTempOriginalLanguage;
// LINE 37:
	__asm        mov    eax, szTime;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0041FB4B;

	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    near ptr 0x0041FB63;
// LINE 38:
}

// FUNCTION: COPTER_D 0x0041fb6a
class ostream& operator<<(class ostream& s, const class MTimeLocalized& t) {
	static const <NoType> = { /* <data@0x0041fde4> */ };
	uint32_t hh;
	uint32_t mm;
	int32_t nLanguageToUse;
	class ostrstream out;
	char buf[80];
	char buf1[80];

// LINE 50:
	__asm        mov    al, ds:[0x597298];
	__asm        mov    buf[0], al;
	__asm        lea    edi, buf[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x13;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 51:
	__asm        mov    al, ds:[0x59729C];
	__asm        mov    buf1[0], al;
	__asm        lea    edi, buf1[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x13;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 52:
	__asm        mov    ecx, t;
	__asm        add    ecx, 4;
	__asm        call   MTime::Hour;
	__asm        mov    hh, eax;
// LINE 53:
	__asm        mov    ecx, t;
	__asm        add    ecx, 4;
	__asm        call   MTime::Minute;
	__asm        mov    mm, eax;
// LINE 54:
	nLanguageToUse = t.nLanguage;
// LINE 56:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostrstream::ostrstream;
// LINE 58:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T100;
// LINE 59:
	__asm        cmp    t, 0;
	__asm        je     _Tae;

	__asm        mov    eax, t;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    _Tb8;
_Tae:
	None = 0x0;
_Tb8:
	__asm        push   0x5972A0;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x114];
	__asm        call   MDateLocalized::MDateLocalized;
	__asm        push   eax;
	__asm        lea    eax, out.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T100;
// LINE 61:
_T100:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T118;
// LINE 62:
	nLanguageToUse = gDefaultLanguage;
// LINE 64:
_T118:
	__asm        cmp    nLanguageToUse, 1;
	__asm        jne    _T194;
// LINE 65:
	__asm        cmp    hh, 0xC;
	__asm        jbe    _T146;

	__asm        mov    eax, hh;
	__asm        sub    eax, 0xC;
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    _T152;
_T146:
	None = hh;
_T152:
	__asm        mov    eax, 0x5972A8;
	__asm        mov    ecx, 0x5972A4;
	__asm        xor    edx, edx;
	__asm        cmp    hh, 0xC;
	__asm        setae  dl;
	__asm        dec    edx;
	__asm        sub    ecx, eax;
	__asm        and    edx, ecx;
	__asm        add    edx, eax;
	__asm        push   edx;
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        push   0x5972AC;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 67:
	__asm        jmp    _T29f;
// LINE 68:
_T194:
	__asm        mov    eax, nLanguageToUse;
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    _T211;
// LINE 85:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972B8;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 86:
	__asm        jmp    _T29f;
// LINE 96:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972C0;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 97:
	__asm        jmp    _T29f;
// LINE 100:
_T1ed:
	__asm        mov    eax, mm;
	__asm        push   eax;
	__asm        mov    eax, hh;
	__asm        push   eax;
	__asm        push   0x5972C8;
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 101:
	__asm        jmp    _T29f;
_T211:
	__asm        sub    dword ptr [ebp-0x128], 2;
	__asm        cmp    dword ptr [ebp-0x128], 0x24;
	__asm        ja     _T1ed;

	__asm        mov    eax, [ebp-0x128];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable4324836[0][eax];
	__asm        jmp    SwitchPointers4324772[0][ecx*4];
// Switch pointers
// Switch table
// LINE 104:
_T29f:
	__asm        lea    eax, buf1[0];
	__asm        push   eax;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
// LINE 105:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x0041FE31;

	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x118];
	__asm        jmp    near ptr 0x0041FE52;
// LINE 106:
}

// FUNCTION: COPTER_D 0x0041fe57
void MDateLocalized::MDateLocalized() {

	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 122:
	__asm        jmp    near ptr 0x0041FE83;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fe8b
void MDateLocalized::MDateLocalized(uint32_t day, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 130:
	__asm        jmp    near ptr 0x0041FEBF;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fec9
void MDateLocalized::MDateLocalized(uint32_t day, char * monthName, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 138:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        call   MDateLocalized::IndexOfMonthLocalized;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 139:
	__asm        jmp    near ptr 0x0041FF26;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ff30
void MDateLocalized::MDateLocalized(uint32_t day, uint32_t month, uint32_t year) {

	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, month;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 147:
	__asm        jmp    near ptr 0x0041FF68;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ff72
void MDateLocalized::MDateLocalized(class istream& s) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::ParseFrom;
	__asm        jmp    near ptr 0x0041FF98;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 155:
	__asm        jmp    near ptr 0x0041FFB0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041ffba
void MDateLocalized::MDateLocalized(const class MTime& time) {

	__asm        mov    eax, time;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::MDate;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3D0;
// LINE 163:
	__asm        jmp    near ptr 0x0041FFEA;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0041fff4
char * MDateLocalized::NameOfDayLocalized(char * szDayName, int32_t nLanguageToUse) {
// LINE 171:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 172:
	nLanguageToUse = this->nLanguage;
// LINE 173:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 174:
	nLanguageToUse = gDefaultLanguage;
// LINE 176:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::WeekDay;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayNameLocalized;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420043;
// LINE 177:
}

// FUNCTION: COPTER_D 0x0042004a
char * MDateLocalized::NameOfMonthLocalized(char * szMonthName, int32_t nLanguageToUse) {
// LINE 184:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 185:
	nLanguageToUse = this->nLanguage;
// LINE 186:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 187:
	nLanguageToUse = gDefaultLanguage;
// LINE 189:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDateLocalized::MonthNameLocalized;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420099;
// LINE 190:
}

// FUNCTION: COPTER_D 0x004200a0
char * MDateLocalized::PrintStringLocalized(char * szDate, int32_t nLanguageToUse) {
	int32_t nTempOriginalLanguage;
	class ostrstream strtemp;

// LINE 200:
	nTempOriginalLanguage = this->nLanguage;
// LINE 201:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T28;
// LINE 202:
	nLanguageToUse = this->nLanguage;
// LINE 203:
_T28:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T3a;
// LINE 204:
	nLanguageToUse = gDefaultLanguage;
// LINE 205:
_T3a:
	this->nLanguage = nLanguageToUse;
// LINE 207:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x40;
	__asm        mov    eax, szDate;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x64], eax;
// LINE 208:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420119;
// LINE 210:
	this->nLanguage = nTempOriginalLanguage;
// LINE 211:
	__asm        mov    eax, szDate;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0042012D;

	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    near ptr 0x00420145;
// LINE 212:
}

// FUNCTION: COPTER_D 0x0042014c
class MDate MDateLocalized::PreviousLocalized(char * dayName, int32_t nLanguageToUse) {
	uint32_t day;

// LINE 222:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T1f;
// LINE 223:
	nLanguageToUse = this->nLanguage;
// LINE 224:
_T1f:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T31;
// LINE 225:
	nLanguageToUse = gDefaultLanguage;
// LINE 227:
_T31:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayOfWeekLocalized;
	__asm        add    esp, 8;
	__asm        mov    day, eax;
// LINE 228:
	__asm        cmp    day, 0;
	__asm        je     _T66;
// LINE 229:
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Previous;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    _T76;
// LINE 230:
_T66:
	__asm        mov    ecx, __$ReturnUdt;
	__asm        call   MDate::MDate;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    _T76;
// LINE 231:
_T76:
}

// FUNCTION: COPTER_D 0x004201c9
uint32_t MDateLocalized::DayOfWeekLocalized(char * dayName, int32_t nLanguageToUse) {
	char szCurrentDay[4096];
	int32_t i;

// LINE 246:
	__asm        mov    i, 1;
	__asm        jmp    _T1f;
_T1c:
	__asm        inc    i;
_T1f:
	__asm        cmp    i, 7;
	__asm        jg     _T62;
// LINE 247:
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        lea    eax, szCurrentDay[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   MDateLocalized::DayNameLocalized;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T5d;
// LINE 248:
	__asm        mov    eax, i;
	__asm        jmp    _T69;
// LINE 249:
_T5d:
	__asm        jmp    _T1c;
// LINE 250:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 251:
_T69:
}

// FUNCTION: COPTER_D 0x00420237
uint32_t MDateLocalized::IndexOfMonthLocalized(char * monthName, int32_t nLanguageToUse) {
	char szCurrentMonth[4096];
	int32_t i;

// LINE 267:
	__asm        mov    i, 1;
	__asm        jmp    _T1f;
_T1c:
	__asm        inc    i;
_T1f:
	__asm        cmp    i, 0x1F;
	__asm        jg     _T62;
// LINE 268:
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        lea    eax, szCurrentMonth[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   MDateLocalized::MonthNameLocalized;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T5d;
// LINE 269:
	__asm        mov    eax, i;
	__asm        jmp    _T69;
// LINE 270:
_T5d:
	__asm        jmp    _T1c;
// LINE 271:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 272:
_T69:
}

// FUNCTION: COPTER_D 0x004202a5
char * MDateLocalized::DayNameLocalized(uint32_t weekDayNumber, char * szDayName, int32_t nLanguageToUse) {
	int32_t nFullStringID;

// LINE 288:
	__asm        dec    weekDayNumber;
// LINE 289:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, weekDayNumber;
	__asm        add    eax, 0x1F4;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 290:
	__asm        push   0xFFF;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T85;

	__asm        push   0xFFF;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        push   0x597200;
	__asm        mov    eax, szDayName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T8a;
_T85:
	__asm        jmp    _T8a;
// LINE 292:
_T8a:
	__asm        mov    eax, szDayName;
	__asm        jmp    near ptr 0x00420337;
// LINE 293:
}

// FUNCTION: COPTER_D 0x0042033c
char * MDateLocalized::MonthNameLocalized(uint32_t monthNumber, char * szMonthName, int32_t nLanguageToUse) {
	int32_t nFullStringID;

// LINE 308:
	__asm        dec    monthNumber;
// LINE 309:
	__asm        mov    eax, nLanguageToUse;
	__asm        push   eax;
	__asm        mov    eax, monthNumber;
	__asm        add    eax, 0x1FE;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 310:
	__asm        push   0xFFF;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T85;

	__asm        push   0xFFF;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-8], eax;
	__asm        push   0x597200;
	__asm        mov    eax, szMonthName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T8a;
_T85:
	__asm        jmp    _T8a;
// LINE 312:
_T8a:
	__asm        mov    eax, szMonthName;
	__asm        jmp    near ptr 0x004203CE;
// LINE 313:
}

// FUNCTION: COPTER_D 0x004203d3
class ostream& operator<<(class ostream& s, const class MDateLocalized& d) {
	static const <NoType> = { /* <data@0x0042058b> */ };
	int32_t nLanguageToUse;
	char buf[80];

// LINE 327:
	nLanguageToUse = d.nLanguage;
// LINE 329:
	__asm        cmp    nLanguageToUse, 0;
	__asm        jne    _T24;
// LINE 330:
	nLanguageToUse = gDefaultLanguage;
// LINE 332:
_T24:
	__asm        mov    eax, nLanguageToUse;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T155;
// LINE 340:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        push   0x5972D0;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 341:
	__asm        jmp    _T1e0;
// LINE 356:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972DC;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 357:
	__asm        jmp    _T1e0;
// LINE 366:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972E8;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 367:
	__asm        jmp    _T1e0;
// LINE 382:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x5972F4;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 383:
	__asm        jmp    _T1e0;
// LINE 393:
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        push   0x597300;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 394:
	__asm        jmp    _T1e0;
// LINE 401:
_T124:
	__asm        mov    ecx, d;
	__asm        call   MDate::YearLastTwoDigits;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59730C;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 402:
	__asm        jmp    _T1e0;
_T155:
	__asm        inc    dword ptr [ebp-0x58];
	__asm        cmp    dword ptr [ebp-0x58], 0x27;
	__asm        ja     _T124;

	__asm        mov    eax, [ebp-0x58];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchPointers4326727[68][eax];
	__asm        jmp    SwitchPointers4326727[0][ecx*4];
// Switch pointers
// Switch table
// LINE 403:
_T1e0:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
// LINE 404:
	__asm        mov    eax, s;
	__asm        jmp    near ptr 0x004205C7;
// LINE 405:
}



// Contribution: 1:0001f5d0-0001f5ee Module: 72, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004205d0
// ends



// Contribution: 2:000003d0-000003e7 Module: 72, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MDateLocalized @ 0x0058f3d0
//   00: MDate::PrintString @ 0x004bce07
//   01: MDate::Previous @ 0x004bccce
//   02: MDateLocalized::NameOfDayLocalized @ 0x0041fff4
//   03: MDateLocalized::NameOfMonthLocalized @ 0x0042004a
//   04: MDateLocalized::PrintStringLocalized @ 0x004200a0
//   05: MDateLocalized::PreviousLocalized @ 0x0042014c
//   6 entries



// Contribution: 2:000003e8-000003ef Module: 72, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MDate @ 0x0058f3e8
//   00: MDate::PrintString @ 0x004bce07
//   01: MDate::Previous @ 0x004bccce
//   2 entries



// Contribution: 3:00000298-00000317 Module: 72, 4 byte alignment, initialized_data, read, write, 
