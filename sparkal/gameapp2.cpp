// Module: gameapp2.obj
// Source: C:\Copter\source\sparkal\gameapp2.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct list<CopterGameMode>::list_node_buffer (forward reference);
struct list<CopterGameMode>::list_node_buffer{
	void * __ptr32 next_buffer;
	struct list<CopterGameMode>::list_node *buffer;
};

// Type: struct list<CopterGameMode>::list_node (forward reference);
struct list<CopterGameMode>::list_node{
	void * __ptr32 next;
	void * __ptr32 prev;
	class CopterGameMode data;
};

// Type: char *;

// Type: void;

// Type: class MTime (forward reference);
// MTime Class implementation not found

// Type: int32_t;

// Type: class CGameApp (forward reference);
// CGameApp Class implementation not found

// Type: char;

// Type: struct SoundPreferences;
struct SoundPreferences{
	long lMasterVolume;
	long lDispatchVolume;
	long lSoundEffectsVolume;
	long lVehicleVolume;
};

// Type: struct SoundPreferences (forward reference);
struct SoundPreferences{
	long lMasterVolume;
	long lDispatchVolume;
	long lSoundEffectsVolume;
	long lVehicleVolume;
};

// Type: long;

// Type: class list<CopterGameMode>::iterator;
class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
{
protected:
	struct list<CopterGameMode>::list_node *node;
public:
	void iterator();
protected:
	void iterator(struct list<CopterGameMode>::list_node*);
public:
	int32_t operator==(const class list<CopterGameMode>::iterator&);
	class CopterGameMode& operator*();
	class list<CopterGameMode>::iterator operator++(int32_t);
	class list<CopterGameMode>::iterator& operator++();
	class list<CopterGameMode>::iterator operator--(int32_t);
	class list<CopterGameMode>::iterator& operator--();
};

// Type: class DigitalSound (forward reference);
// VTABLE: COPTER_D 0x0058f488
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound *lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer *lpSound[8];
	struct _STREAMBUFINFO *lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound() /* override */;
	class DigitalSound& operator=(class DigitalSound&);
	virtual void SetSoundFile(const class basic_string<char>&, int32_t); // vtable+0x2c
	virtual int32_t Load(); // vtable+0x30
	virtual int32_t LoadFromResource(); // vtable+0x34
	virtual int32_t LoadFromFile(); // vtable+0x38
	virtual void Unload(); // vtable+0x3c
	virtual long Play(long, int32_t) /* override */;
	virtual long Stop() /* override */;
	virtual long ShouldWeStream(); // vtable+0x40
	virtual long PlayStream(); // vtable+0x44
	virtual long StopStream(); // vtable+0x48
protected:
	virtual long IsPlaying(struct IDirectSoundBuffer**); // vtable+0x4c
public:
	virtual long IsPlaying() /* override */;
	virtual int32_t GetVolume(long *) /* override */;
	virtual int32_t SetVolume(long) /* override */;
	virtual int32_t GetPan(long *); // vtable+0x50
	virtual int32_t SetPan(long); // vtable+0x54
	virtual int32_t SetPosition(long, long, long); // vtable+0x58
	virtual long GetOriginalFrequency(); // vtable+0x5c
	virtual int32_t GetFrequency(long *); // vtable+0x60
	virtual int32_t SetFrequency(long); // vtable+0x64
	virtual int32_t GetSoundType() /* override */;
	virtual int32_t SetCompletionNotification(void (*)(long), long) /* override */;
	virtual void StopCompletionNotification() /* override */;
	virtual long EstimateRemainingPlayTime() /* override */;
protected:
	virtual int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**); // vtable+0x68
	virtual int32_t CreateSoundBuffer(struct _DSBUFFERDESC*); // vtable+0x6c
	virtual int32_t CreatePrimarySoundBuffer(); // vtable+0x70
	virtual int32_t ReleaseSoundBuffer(); // vtable+0x74
	virtual long InitializeStreamBuffer(long); // vtable+0x78
	virtual void ProcessStreamingBufferTimerCallback(); // vtable+0x7c
	virtual void ProcessCompletionEstimationTimerCallback(); // vtable+0x80
	virtual void StopCompletionNotificationEstimationTimer(); // vtable+0x84
	virtual int32_t StartCompletionNotificationEstimationTimer(); // vtable+0x88
};

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: void * __ptr32;

// Type: unsigned long;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: float;

// Type: class PFile (forward reference);
// VTABLE: COPTER_D 0x00590468
class PFile{
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	virtual void ~PFile(); // vtable+0x0
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char szFilePath[260];
	int32_t Handle;
private:
	int32_t ShouldClose;
};

// Type: uint32_t;

// Type: class list<CopterGameMode> (forward reference);
class list<CopterGameMode>{
	using void_pointer = void * __ptr32;
	struct list<CopterGameMode>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class CopterGameMode data;
	};
protected:
	static class allocator<list<CopterGameMode>::list_node> list_node_allocator;
	static class allocator<CopterGameMode> value_allocator;
	using value_type = class CopterGameMode;
	using value_allocator_type = class allocator<CopterGameMode>;
	using pointer = class CopterGameMode*;
	using reference = class CopterGameMode&;
	using const_reference = const class CopterGameMode&;
	using list_node_allocator_type = class allocator<list<CopterGameMode>::list_node>;
	using link_type = struct list<CopterGameMode>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<CopterGameMode>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<CopterGameMode>::list_node *buffer;
	};
	using buffer_allocator_type = class allocator<list<CopterGameMode>::list_node_buffer>;
	using buffer_pointer = struct list<CopterGameMode>::list_node_buffer*;
protected:
	static class allocator<list<CopterGameMode>::list_node_buffer> buffer_allocator;
	static struct list<CopterGameMode>::list_node_buffer *buffer_list;
	static struct list<CopterGameMode>::list_node *free_list;
	static struct list<CopterGameMode>::list_node *next_avail;
	static struct list<CopterGameMode>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<CopterGameMode>::list_node* get_node();
	void put_node(struct list<CopterGameMode>::list_node*);
	struct list<CopterGameMode>::list_node *node;
	uint32_t length;
	class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
	{
	protected:
		struct list<CopterGameMode>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const class list<CopterGameMode>::iterator&);
		class CopterGameMode& operator*();
		class list<CopterGameMode>::iterator operator++(int32_t);
		class list<CopterGameMode>::iterator& operator++();
		class list<CopterGameMode>::iterator operator--(int32_t);
		class list<CopterGameMode>::iterator& operator--();
	};
	class list<CopterGameMode>::const_iterator : public bidirectional_iterator<CopterGameMode,int>
	{
	protected:
		struct list<CopterGameMode>::list_node *node;
	public:
		void const_iterator(const class list<CopterGameMode>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const class list<CopterGameMode>::const_iterator&);
		const class CopterGameMode& operator*();
		class list<CopterGameMode>::const_iterator operator++(int32_t);
		class list<CopterGameMode>::const_iterator& operator++();
		class list<CopterGameMode>::const_iterator operator--(int32_t);
		class list<CopterGameMode>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int>;
public:
	void list<CopterGameMode>(const class list<CopterGameMode>&);
	void list<CopterGameMode>(const class CopterGameMode*, const class CopterGameMode*);
	void list<CopterGameMode>(uint32_t, const class CopterGameMode&);
	void list<CopterGameMode>();
	class list<CopterGameMode>::const_iterator begin();
	class list<CopterGameMode>::iterator begin();
	class list<CopterGameMode>::const_iterator end();
	class list<CopterGameMode>::iterator end();
	class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> rbegin();
	class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> rbegin();
	class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> rend();
	class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class CopterGameMode& front();
	class CopterGameMode& front();
	const class CopterGameMode& back();
	class CopterGameMode& back();
	void swap(class list<CopterGameMode>&);
	void insert(class list<CopterGameMode>::iterator, uint32_t, const class CopterGameMode&);
	void insert(class list<CopterGameMode>::iterator, class list<CopterGameMode>::const_iterator, class list<CopterGameMode>::const_iterator);
	void insert(class list<CopterGameMode>::iterator, const class CopterGameMode*, const class CopterGameMode*);
	class list<CopterGameMode>::iterator insert(class list<CopterGameMode>::iterator, const class CopterGameMode&);
	void push_front(const class CopterGameMode&);
	void push_back(const class CopterGameMode&);
	void erase(class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
	void erase(class list<CopterGameMode>::iterator);
	void pop_front();
	void pop_back();
	void ~list<CopterGameMode>();
	class list<CopterGameMode>& operator=(const class list<CopterGameMode>&);
protected:
	void transfer(class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
public:
	void splice(class list<CopterGameMode>::iterator, class list<CopterGameMode>&, class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
	void splice(class list<CopterGameMode>::iterator, class list<CopterGameMode>&, class list<CopterGameMode>::iterator);
	void splice(class list<CopterGameMode>::iterator, class list<CopterGameMode>&);
	void remove(const class CopterGameMode&);
	void unique();
	void merge(class list<CopterGameMode>&);
	void reverse();
	void sort();
};

// Type: class CopterGameMode (forward reference);
class CopterGameMode{
public:
	int32_t nModeID;
	void CopterGameMode(const class CopterGameMode&);
	void CopterGameMode(int32_t);
	void CopterGameMode();
	class CopterGameMode& operator=(const class CopterGameMode&);
};

// Type: class Sound;
// VTABLE: COPTER_D 0x0058f458
class Sound{
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	class Sound& operator=(const class Sound&);
	virtual void SetSoundFile(const class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: struct bidirectional_iterator<CopterGameMode,int>;
struct bidirectional_iterator<CopterGameMode,int>{
};



// Contribution: 1:00060180-00065c19 Module: 44, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00461180
void S3SwitchToProperSkyType() {
// LINE 91:
	__asm        cmp    G_VRAppInitCalled, 0;
	__asm        je     _T35;

	__asm        mov    eax, gGameApp;
	__asm        cmp    dword ptr [eax+0xDC], 0;
	__asm        je     _T35;
// LINE 92:
	__asm        mov    eax, gGameApp;
	__asm        mov    ecx, [eax+0xDC];
	__asm        call   SkyImage::SwitchToProperSkyType;
// LINE 93:
_T35:
	__asm        jmp    near ptr 0x004611BA;
}

// FUNCTION: COPTER_D 0x004611bf
int32_t IsActualTimeDaytime() {
	class MTime tempTime;

// LINE 99:
	__asm        lea    ecx, tempTime<MTime+0x00:None>;
	__asm        call   MTime::MTime;
// LINE 101:
	__asm        lea    ecx, tempTime<MTime+0x00:None>;
	__asm        call   MTime::Hour;
	__asm        cmp    eax, 6;
	__asm        jb     _T33;

	__asm        lea    ecx, tempTime<MTime+0x00:None>;
	__asm        call   MTime::Hour;
	__asm        cmp    eax, 0x12;
	__asm        jbe    _T3a;
// LINE 102:
_T33:
	__asm        xor    eax, eax;
	__asm        jmp    _T44;
// LINE 103:
_T3a:
	__asm        mov    eax, 1;
	__asm        jmp    _T44;
// LINE 104:
_T44:
}

// FUNCTION: COPTER_D 0x00461208
void  CGameApp::GetPreferences() {
	char * chPrefData;
	char szPath[260];

// LINE 115:
	__asm        push   0x30;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T55;

	__asm        push   0;
	__asm        push   0x10000;
	__asm        push   0x46455250;
	__asm        push   0x52545043;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   NotificationPreferenceManager::NotificationPreferenceManager;
	__asm        mov    gPreferenceManager, eax;
	__asm        jmp    _T5f;
_T55:
	gPreferenceManager = 0x0;
// LINE 116:
_T5f:
	__asm        cmp    gPreferenceManager, 0;
	__asm        je     _T1b9;
// LINE 117:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_COPTER_MAIN_PREFERENCES_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   9;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 118:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   PreferenceManager::IPreferenceManager;
// LINE 119:
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 120:
	__asm        cmp    chPrefData, 0;
	__asm        je     _Tf6;
// LINE 122:
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x20;
	__asm        jne    _Tf6;
// LINE 123:
	__asm        mov    edi, this;
	__asm        add    edi, 0x4308;
	__asm        mov    esi, chPrefData;
	__asm        mov    ecx, 8;
	__asm        rep movsd;
// LINE 125:
_Tf6:
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 126:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T164;
// LINE 127:
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    _T164;
// LINE 128:
	__asm        mov    eax, chPrefData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4328;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 130:
_T164:
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 131:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T1b9;
// LINE 132:
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x24;
	__asm        jne    _T1b9;
// LINE 133:
	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        call   S3CameraSetChaseInfo;
	__asm        add    esp, 4;
// LINE 136:
_T1b9:
	__asm        jmp    near ptr 0x004613C6;
}

// FUNCTION: COPTER_D 0x004613cb
void  CGameApp::GetSoundPreferences() {
	char * chPrefData;
	struct SoundPreferences tempSoundPreferences;

// LINE 147:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 148:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T7c;
// LINE 150:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    _T7c;
// LINE 151:
	__asm        mov    eax, chPrefData;
	__asm        lea    ecx, tempSoundPreferences.lMasterVolume;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 152:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 153:
	__asm        jmp    _Tc4;
// LINE 161:
_T7c:
	__asm        mov    tempSoundPreferences.lVehicleVolume, 0x2710;
	__asm        mov    eax, tempSoundPreferences.lVehicleVolume;
	__asm        mov    tempSoundPreferences.lSoundEffectsVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lSoundEffectsVolume;
	__asm        mov    tempSoundPreferences.lDispatchVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lDispatchVolume;
	__asm        mov    tempSoundPreferences.lMasterVolume, eax;
// LINE 163:
	__asm        push   0x10;
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 164:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 165:
	__asm        jmp    _Tc4;
_Tc4:
}

// FUNCTION: COPTER_D 0x00461494
void  CGameApp::SetSoundPreferences(struct SoundPreferences& newSoundPreferences) {
// LINE 173:
	glMasterVolume = newSoundPreferences.lMasterVolume;
// LINE 175:
	__asm        cmp    gPreferenceManager, 0;
	__asm        je     _T3e;
// LINE 177:
	__asm        push   0x10;
	__asm        mov    eax, newSoundPreferences;
	__asm        push   eax;
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 179:
_T3e:
	__asm        jmp    near ptr 0x004614D7;
}

// FUNCTION: COPTER_D 0x004614de
void  CGameApp::SavePreferences() {
	long lCurrentJoystickCount;
	int32_t i;
	char szJoystickName[64];

// LINE 188:
	__asm        jmp    near ptr 0x004614EF;

	lCurrentJoystickCount = gJoystickManager.nJoystickCount;
// LINE 192:
	__asm        cmp    gPreferenceManager, 0;
	__asm        je     _T141;
// LINE 194:
	this-><CGameApp+0x4318:4> = this-><CGameApp+0x30:4>;
// LINE 197:
	__asm        push   0x20;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4308;
	__asm        push   eax;
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 198:
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4328;
	__asm        push   eax;
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 199:
	__asm        push   0x24;
	__asm        call   S3CameraGetChaseInfo;
	__asm        push   eax;
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 200:
	__asm        push   4;
	__asm        lea    eax, lCurrentJoystickCount;
	__asm        push   eax;
	__asm        push   0x4EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 201:
	__asm        mov    i, 0;
	__asm        jmp    _Tbc;
_Tb9:
	__asm        inc    i;
_Tbc:
	__asm        mov    eax, lCurrentJoystickCount;
	__asm        cmp    i, eax;
	__asm        jge    _T10e;
// LINE 202:
	szJoystickName[0] = 0x0;
// LINE 203:
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::GetJoystickName;
// LINE 204:
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, 0xEEEEEE;
	__asm        push   eax;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 205:
	__asm        jmp    _Tb9;
// LINE 206:
_T10e:
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T137;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T137;
// LINE 207:
_T137:
	gPreferenceManager = 0x0;
// LINE 209:
_T141:
	__asm        jmp    near ptr 0x00461624;
}

// FUNCTION: COPTER_D 0x00461629
unsigned long  CGameApp::TickGame() {
	static const long lFramesSinceLastSecond = { /* todo */ };
	long lElapsedMilliSeconds;

// LINE 222:
	__asm        inc    lFramesSinceLastSecond;
// LINE 223:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x416C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046164C;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4168], 0;
	__asm        je     _Tb2;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        jne    _T56;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9d;

	__asm        jmp    _T9d;
_T56:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _T86;

	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9d;

	__asm        jmp    _T9d;
_T86:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9d;
_T9d:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x4168];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    [ebp-0x18], eax;
_Tb2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _Tf9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4170], 0;
	__asm        je     _Tf9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4170];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedMilliSeconds, eax;
	__asm        jmp    _T10a;
_Tf9:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedMilliSeconds, eax;
	__asm        jmp    _T10a;

	lElapsedMilliSeconds = None;
// LINE 224:
_T10a:
	__asm        cmp    lElapsedMilliSeconds, 0x3E8;
	__asm        jl     _T203;
// LINE 226:
	__asm        mov    eax, lFramesSinceLastSecond;
	__asm        mov    [ebp-0x34], eax;
	__asm        fild   dword ptr [ebp-0x34];
	__asm        fmul   dword ptr ds:[0x590464];
	__asm        mov    eax, lElapsedMilliSeconds;
	__asm        mov    [ebp-0x38], eax;
	__asm        fidiv  dword ptr [ebp-0x38];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x4344];
// LINE 227:
	lFramesSinceLastSecond = 0x0;
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x416C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4168], 0;
	__asm        jmp    near ptr 0x0046178C;

	__asm        jmp    near ptr 0x00461791;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4168], 0;
	__asm        je     _T17d;

	__asm        jmp    _T1fe;
_T17d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        jne    _T1a6;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T1f9;

	__asm        jmp    _T1f9;
_T1a6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    _T1dc;

	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T1f9;

	__asm        jmp    _T1f9;
_T1dc:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    _T1f9;
_T1f9:
	__asm        jmp    _T1fe;
_T1fe:
	__asm        jmp    _T203;
// LINE 232:
_T203:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C4], 0;
	__asm        je     _T24e;
// LINE 233:
	__asm        mov    eax, lElapsedMilliSeconds;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
// LINE 235:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4340], 0;
	__asm        je     _T24e;
// LINE 240:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+8];
// LINE 251:
_T24e:
	__asm        cmp    IFlatImage::lTotalLockCount, 0;
	__asm        je     _T26e;
// LINE 253:
	__asm        mov    eax, IFlatImage::lTotalLockCount;
	__asm        push   eax;
	__asm        push   0x5992D8;
	__asm        call   DebugOutput;
	__asm        add    esp, 8;
// LINE 256:
_T26e:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046189E;
// LINE 257:
}

// FUNCTION: COPTER_D 0x004618a3
void  CGameApp::ComposeFrame() {
	int32_t nCurrentMode;

	// Function registers exception cleanup function at 0x00461ea1

	__asm        mov    [ebp-0x10], esp;
	__asm        mov    this, ecx;
// LINE 270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x004618F3;

	__asm        jmp    near ptr 0x004618F8;

	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x0046190C;

	__asm        jmp    near ptr 0x00461911;

	__asm        jmp    near ptr 0x00461916;

	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMode, eax;
// LINE 272:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x24C], eax;
	__asm        jmp    _T536;
// LINE 277:
// Block start:
	char szPath[260];
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_SMACKER_INTRO_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 278:
	__asm        mov    dword ptr [ebp-0x124], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x120], 1;
	__asm        mov    dword ptr [ebp-0x22C], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    _Tf0;

	None = 0x0;
_Tf0:
	__asm        jmp    near ptr 0x00461998;

	__asm        push   0;
	__asm        lea    ecx, [ebp-0x22C];
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    _T119;

	__asm        mov    dword ptr [ebp-0x11C], 1;
	__asm        jmp    _T123;
_T119:
	None = 0x0;
_T123:
	__asm        mov    dword ptr [ebp-0x22C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x124], 0xFFFFFFFF;
	__asm        jle    _T13f;

	__asm        jmp    _T144;
_T13f:
	__asm        jmp    _T172;
_T144:
	__asm        jmp    _T156;

	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     _T172;
_T156:
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T172;

	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T172:
	__asm        jmp    near ptr 0x00461A1A;

	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x234], eax;
	__asm        cmp    dword ptr [ebp-0x234], 0;
	__asm        je     _T1a5;
// LINE 279:
	this-><CGameApp+0x42c0:4> = 0x0;
// LINE 280:
	__asm        jmp    _T27c;
// LINE 281:
_T1a5:
	__asm        push   0x140;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x230], eax;
	__asm        cmp    dword ptr [ebp-0x230], 0;
	__asm        je     _T1f2;

	__asm        push   0x116;
	__asm        push   0x280;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x230];
	__asm        call   SmackerBuffer::SmackerBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x42C0], eax;
	__asm        jmp    _T202;
_T1f2:
	this-><CGameApp+0x42c0:4> = 0x0;
_T202:
	None = this-><CGameApp+0x42c0:4>;
// LINE 282:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x28], 0x64;
	__asm        jmp    near ptr 0x00461AD6;
// LINE 283:
	__asm        jmp    near ptr 0x00461ADB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   SmackerBuffer::SetWindow;
// LINE 284:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42C0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   dword ptr [edx+0x10];
// LINE 289:
_T27c:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 290:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 297:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     _T2da;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42C0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   dword ptr [edx+0x18];
	__asm        test   eax, eax;
	__asm        je     _T300;
// LINE 298:
_T2da:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 299:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 302:
_T300:
	__asm        jmp    _T582;
// LINE 305:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 1;
	__asm        jne    _T328;
// LINE 306:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ComposeCareerCityVideoFrame;
// LINE 307:
	__asm        jmp    _T33d;
// LINE 308:
_T328:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 309:
_T33d:
	__asm        jmp    _T582;
// LINE 312:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ComposeMainMenuVideoFrame;
// LINE 318:
	__asm        push   0x1E;
	__asm        call   SparkalDelay;
	__asm        add    esp, 4;
// LINE 320:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 322:
	__asm        push   0x1E;
	__asm        call   SparkalDelay;
	__asm        add    esp, 4;
// LINE 324:
	__asm        jmp    _T582;
// LINE 327:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T4bc;
// LINE 331:
	None = 0x0;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x64];
// LINE 341:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    _T4b0;
// LINE 345:
_L64109:
	this-><CGameApp+0xb4:4> = 0x2;
// LINE 346:
	this-><CGameApp+0x24:4> = 0x1;
// LINE 349:
	__asm        jmp    near ptr 0x00461C85;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T415;
// LINE 350:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xD8];
	__asm        call   dword ptr [edx+4];
// LINE 351:
_T415:
	__asm        jmp    near ptr 0x00461CBD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T444;
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+4];
// LINE 353:
_T444:
	__asm        jmp    near ptr 0x00461CEC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T47c;
// LINE 354:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xDC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xDC];
	__asm        call   dword ptr [edx+4];
// LINE 359:
_T47c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x68];
// LINE 360:
	__asm        push   0x20002;
	__asm        push   0x20;
	__asm        push   0x7DC;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 361:
	__asm        mov    eax, 0x461D53;
	__asm        ret;
// LINE 363:
_L56471:
_L56471:
_T4b0:
	None = 0xffffffff;
// LINE 364:
	__asm        jmp    _T4fe;
_T4bc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T4e9;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 367:
	__asm        jmp    _T4fe;
// LINE 368:
_T4e9:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 370:
_T4fe:
	__asm        jmp    _T582;
// LINE 375:
	this-><CGameApp+0x36b8:4> = 0x1;
// LINE 376:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x78];
// LINE 378:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3874];
// LINE 382:
	__asm        jmp    _T582;
// LINE 383:
// Block end:
	__asm        jmp    _T582;
_T536:
	__asm        dec    dword ptr [ebp-0x24C];
	__asm        cmp    dword ptr [ebp-0x24C], 0xA;
	__asm        ja     _T582;

	__asm        mov    eax, [ebp-0x24C];
	__asm        jmp    SwitchPointers4595193[0][eax*4];
// Switch pointers
// LINE 385:
_T582:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C8], 0;
	__asm        je     _T5a0;
// LINE 386:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::S3ShowInfo;
// LINE 389:
_T5a0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        je     _T5f9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     _T5f9;
// LINE 390:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0xA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42BC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42BC];
	__asm        call   dword ptr [edx+0xC];
// LINE 391:
_T5f9:
	__asm        jmp    _T608;
_L64110:
	__asm        mov    eax, 0x595C00;
	__asm        jmp    near ptr 0x0056F590;
_T608:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x00461eb9
void  CGameApp::ComposePlayFrame() {
	static const long lThisLoopTickCount = { /* todo */ };
	long lBuildingID;
	static const long lLastLoopTickCount = { /* todo */ };
	static const long lFrameCount = { /* todo */ };

// LINE 406:
	__asm        inc    lFrameCount;
// LINE 408:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T547;
// LINE 409:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x110;
	__asm        call   CommandSystem::PollJoysticksForCommands;
// LINE 410:
	__asm        call   dword ptr ds:[0x6C3614];
	__asm        mov    lThisLoopTickCount, eax;
// LINE 411:
	__asm        mov    eax, lThisLoopTickCount;
	__asm        sub    eax, lLastLoopTickCount;
	__asm        mov    LoopTime, eax;
// LINE 412:
	__asm        shl    LoopTime, 0x10;
// LINE 413:
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, LoopTime;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    LoopTime, eax;
// LINE 414:
	__asm        cmp    LoopTime, 0x64;
	__asm        jge    _T7b;
// LINE 415:
	LoopTime = 0x64;
// LINE 416:
_T7b:
	__asm        cmp    LoopTime, 0x8000;
	__asm        jle    _T95;
// LINE 417:
	LoopTime = 0x8000;
// LINE 418:
_T95:
	__asm        call   VRAppNextFrame;
// LINE 419:
	lLastLoopTickCount = lThisLoopTickCount;
// LINE 420:
	__asm        mov    eax, lFrameCount;
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    _T542;
// LINE 421:
	__asm        mov    eax, lFrameCount;
	__asm        and    al, 0x3F;
	__asm        cmp    al, 0x3F;
	__asm        jne    _T3f6;
// LINE 423:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _Te4;

	__asm        call   GetUserPoints;
	__asm        cmp    eax, 0x3E8;
	__asm        jl     _Te4;

	__asm        jmp    _Te9;
_Te4:
	__asm        jmp    _T1cb;
_Te9:
	__asm        jmp    _Tf8;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1cb;
_Tf8:
	__asm        cmp    gGraduationState.nGraduationState, 0;
	__asm        jne    _T1cb;
// LINE 425:
	__asm        mov    gGraduationState.nGraduationState, 1;
	__asm        mov    gGraduationState.timerGraduationState.lTotalElapsedTime, 0;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        jmp    near ptr 0x00461FE1;

	__asm        jmp    near ptr 0x00461FE6;

	__asm        cmp    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        je     _T13f;

	__asm        jmp    _T1ae;
_T13f:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 1;
	__asm        jne    _T161;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T1a9;

	__asm        jmp    _T1a9;
_T161:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T190;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T1a9;

	__asm        jmp    _T1a9;
_T190:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T1a9;
_T1a9:
	__asm        jmp    _T1ae;
_T1ae:
	__asm        jmp    near ptr 0x0046206C;

	__asm        jmp    near ptr 0x00462071;
// LINE 426:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x94];
// LINE 429:
	__asm        jmp    _T3f1;
_T1cb:
	__asm        cmp    gGraduationState.nGraduationState, 1;
	__asm        jne    _T2de;
// LINE 430:
	__asm        mov    eax, gGraduationState.timerGraduationState.lTotalElapsedTime;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0046209E;

	__asm        cmp    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        je     _T268;

	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 1;
	__asm        jne    _T212;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T256;

	__asm        jmp    _T256;
_T212:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T23f;

	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T256;

	__asm        jmp    _T256;
_T23f:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T256;
_T256:
	__asm        mov    eax, [ebp-0x40];
	__asm        sub    eax, gGraduationState.timerGraduationState.lStartTime;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    [ebp-0x30], eax;
_T268:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T2ac;

	__asm        cmp    gGraduationState.timerGraduationState.lFrequency, 0;
	__asm        je     _T2ac;

	__asm        mov    eax, gGraduationState.timerGraduationState.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0x493E0;
	__asm        jbe    _T2d9;

	__asm        jmp    _T2cb;
_T2ac:
	__asm        cmp    dword ptr [ebp-0x30], 0x493E0;
	__asm        jbe    _T2d9;

	__asm        jmp    _T2cb;

	__asm        cmp    dword ptr [ebp-0x44], 0x493E0;
	__asm        jbe    _T2d9;
// LINE 431:
_T2cb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x94];
// LINE 433:
_T2d9:
	__asm        jmp    _T3f1;
// LINE 434:
_T2de:
	__asm        cmp    gGraduationState.nGraduationState, 2;
	__asm        jne    _T3f1;

	__asm        mov    eax, gGraduationState.timerGraduationState.lTotalElapsedTime;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004621B1;

	__asm        cmp    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        je     _T37b;

	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 1;
	__asm        jne    _T325;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T369;

	__asm        jmp    _T369;
_T325:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T352;

	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T369;

	__asm        jmp    _T369;
_T352:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T369;
_T369:
	__asm        mov    eax, [ebp-0x5C];
	__asm        sub    eax, gGraduationState.timerGraduationState.lStartTime;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        add    [ebp-0x4C], eax;
_T37b:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T3bf;

	__asm        cmp    gGraduationState.timerGraduationState.lFrequency, 0;
	__asm        je     _T3bf;

	__asm        mov    eax, gGraduationState.timerGraduationState.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0x2710;
	__asm        jbe    _T3f1;

	__asm        jmp    _T3de;
_T3bf:
	__asm        cmp    dword ptr [ebp-0x4C], 0x2710;
	__asm        jbe    _T3f1;

	__asm        jmp    _T3de;

	__asm        cmp    dword ptr [ebp-0x60], 0x2710;
	__asm        jbe    _T3f1;
// LINE 436:
_T3de:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x8C];
// LINE 437:
	__asm        jmp    _T620;
// LINE 440:
_T3f1:
	__asm        jmp    _T542;
_T3f6:
	__asm        cmp    gIDOfBuildingAvatarIsIn, 0xFFFFFFFF;
	__asm        je     _T41a;

	__asm        mov    eax, gIDOfBuildingAvatarIsIn;
	__asm        mov    lBuildingID, eax;
	__asm        cmp    lBuildingID, 0;
	__asm        je     _T450;

	__asm        jmp    _T42e;
_T41a:
	__asm        jmp    _T450;

	__asm        jmp    _T42e;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T450;
// LINE 441:
_T42e:
	__asm        cmp    lBuildingID, 0xF6;
	__asm        jne    _T44b;
// LINE 442:
	__asm        push   0x2A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 444:
_T44b:
	__asm        jmp    _T542;
// LINE 445:
// Block start:
	long lEventValue;
_T450:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::TestForUserInHelicopter;
	__asm        mov    lEventValue, eax;
// LINE 446:
	__asm        cmp    lEventValue, 1;
	__asm        jne    _T485;
// LINE 447:
	__asm        call   CheckupWindow::ShouldWeDisplayCheckupWindow;
	__asm        test   eax, eax;
	__asm        je     _T480;
// LINE 448:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateCheckupWindow;
// LINE 450:
_T480:
	__asm        jmp    _T542;
_T485:
	__asm        cmp    lEventValue, 3;
	__asm        jne    _T542;
// LINE 451:
	__asm        mov    gGraduationState.nGraduationState, 2;
	__asm        mov    gGraduationState.timerGraduationState.lTotalElapsedTime, 0;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        jmp    near ptr 0x0046236B;

	__asm        jmp    near ptr 0x00462370;

	__asm        cmp    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        je     _T4c9;

	__asm        jmp    _T538;
_T4c9:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 1;
	__asm        jne    _T4eb;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T533;

	__asm        jmp    _T533;
_T4eb:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _T51a;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T533;

	__asm        jmp    _T533;
_T51a:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T533;
_T533:
	__asm        jmp    _T538;
_T538:
	__asm        jmp    near ptr 0x004623F6;

	__asm        jmp    _T542;
// LINE 455:
// Block end:
_T542:
	__asm        jmp    _T551;
// LINE 457:
_T547:
	__asm        push   0x14;
	__asm        call   SparkalDelay;
	__asm        add    esp, 4;
// LINE 461:
_T551:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T570;

	__asm        mov    eax, lFrameCount;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T601;
// LINE 462:
_T570:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::S3PreRender;
// LINE 463:
	__asm        call   S3CityDrawGrid;
// LINE 464:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::S3PostRender;
// LINE 465:
	__asm        cmp    G_CheatCodes[5], 0;
	__asm        je     _T5f0;

	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T5f0;
// LINE 466:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx];
// LINE 467:
	__asm        jmp    near ptr 0x0046246D;

	__asm        jmp    near ptr 0x00462472;

	__asm        push   0x144;
	__asm        push   0x200;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   S3MapBlitPosition;
	__asm        add    esp, 0x10;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+4];
// LINE 470:
_T5f0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::DisplayCurrentMessages;
// LINE 473:
_T601:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T61b;
// LINE 475:
	__asm        push   0x14;
	__asm        call   SparkalDelay;
	__asm        add    esp, 4;
// LINE 478:
_T61b:
	__asm        jmp    _T620;
_T620:
}

// FUNCTION: COPTER_D 0x004624de
void  CGameApp::DoRecurringTasks(long lMilliSecondsSinceLastCall) {
	int32_t i;

// LINE 487:
	__asm        cmp    lMilliSecondsSinceLastCall, 0x2EE;
	__asm        jle    _T21;
// LINE 488:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::PlayNextSoundTrackIfNeeded;
// LINE 490:
_T21:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00462516;

	__asm        jmp    near ptr 0x0046251B;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00462529;

	__asm        jmp    near ptr 0x0046252E;

	__asm        jmp    near ptr 0x00462533;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T98;
// LINE 491:
	__asm        mov    i, 0;
	__asm        jmp    _T71;
_T6e:
	__asm        inc    i;
_T71:
	__asm        jmp    near ptr 0x00462554;

	__asm        mov    eax, i;
	__asm        cmp    gJoystickManager.nJoystickCount, eax;
	__asm        jle    _T98;
// LINE 492:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::GetCompleteState;
	__asm        jmp    _T6e;
// LINE 494:
_T98:
	__asm        jmp    near ptr 0x0046257B;
}

// FUNCTION: COPTER_D 0x00462582
int  CGameApp::EnterMode(int32_t nMode) {
// LINE 503:
	__asm        cmp    nMode, 0;
	__asm        jne    _Tfe;
// LINE 504:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   0;
	__asm        lea    ecx, [ebp-8];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x4C], eax;
// LINE 505:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004625D5;

	__asm        jmp    near ptr 0x004625DA;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004625F9;

	__asm        mov    eax, [ebp-0x40];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00462607;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _Ta0;

	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _Ta0;
_Ta0:
	__asm        jmp    near ptr 0x00462627;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00462667;

	__asm        jmp    near ptr 0x0046266C;

	__asm        jmp    near ptr 0x00462671;
// LINE 506:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 508:
	__asm        jmp    _T1078;
_Tfe:
	__asm        cmp    nMode, 1;
	__asm        jne    _T1f0;
// LINE 509:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
	__asm        push   1;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x68], eax;
// LINE 510:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004626C1;

	__asm        jmp    near ptr 0x004626C6;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004626E5;

	__asm        mov    eax, [ebp-0x5C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004626F3;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T18c;

	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T18c;
_T18c:
	__asm        jmp    near ptr 0x00462713;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00462753;

	__asm        jmp    near ptr 0x00462758;

	__asm        jmp    near ptr 0x0046275D;
// LINE 511:
	this-><CGameApp+0x36b8:4> = 0x0;
// LINE 513:
	__asm        jmp    _T1078;
_T1f0:
	__asm        cmp    nMode, 2;
	__asm        jne    _T2e2;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   2;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x84], eax;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004627B6;

	__asm        jmp    near ptr 0x004627BB;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004627DA;

	__asm        mov    eax, [ebp-0x78];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004627E8;

	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T284;

	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T284;
_T284:
	__asm        jmp    near ptr 0x0046280B;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0046284B;

	__asm        jmp    near ptr 0x00462850;

	__asm        jmp    near ptr 0x00462855;
// LINE 516:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 518:
	__asm        jmp    _T1078;
_T2e2:
	__asm        cmp    nMode, 3;
	__asm        jne    _T410;
// LINE 519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   3;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0xA0], eax;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004628B1;

	__asm        jmp    near ptr 0x004628B6;

	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004628DE;

	__asm        mov    eax, [ebp-0x94];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004628F2;

	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T394;

	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T394;
_T394:
	__asm        jmp    near ptr 0x0046291B;

	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00462979;

	__asm        jmp    near ptr 0x0046297E;

	__asm        jmp    near ptr 0x00462983;
// LINE 521:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 523:
	__asm        jmp    _T1078;
_T410:
	__asm        cmp    nMode, 4;
	__asm        jne    _T592;
// LINE 524:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
	__asm        push   4;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0xBC], eax;
// LINE 525:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004629DF;

	__asm        jmp    near ptr 0x004629E4;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00462A0C;

	__asm        mov    eax, [ebp-0xB0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x00462A20;

	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     _T4c2;

	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T4c2;
_T4c2:
	__asm        jmp    near ptr 0x00462A49;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x00462AA6;

	__asm        jmp    near ptr 0x00462AAB;

	__asm        jmp    near ptr 0x00462AB0;
// LINE 526:
	this-><CGameApp+0x64:4> = this;
// LINE 527:
	this-><CGameApp+0x68:4> = this-><CGameApp+0x38:4>;
// LINE 528:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::CreateAllSurfaces;
// LINE 529:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::UsePalette;
// LINE 530:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::StartVideoForMainMenu;
// LINE 531:
	this-><CGameApp+0x1c:4> = 0x1;
// LINE 532:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 534:
	__asm        jmp    _T1078;
_T592:
	__asm        cmp    nMode, 5;
	__asm        jne    _T733;
// LINE 535:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 536:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   5;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0xD8], eax;
// LINE 537:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x00462B7A;

	__asm        jmp    near ptr 0x00462B7F;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x00462BA7;

	__asm        mov    eax, [ebp-0xCC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x00462BBB;

	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _T65d;

	__asm        mov    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T65d;
_T65d:
	__asm        jmp    near ptr 0x00462BE4;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x00462C41;

	__asm        jmp    near ptr 0x00462C46;

	__asm        jmp    near ptr 0x00462C4B;
// LINE 538:
	this-><CGameApp+0x7c:4> = this;
// LINE 539:
	this-><CGameApp+0x80:4> = this-><CGameApp+0x38:4>;
// LINE 540:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::Initialize;
// LINE 541:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::CreateAllSurfaces;
// LINE 542:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::UsePalette;
// LINE 543:
	this-><CGameApp+0x1c:4> = 0x1;
// LINE 544:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 547:
	__asm        jmp    _T1078;
_T733:
	__asm        cmp    nMode, 6;
	__asm        jne    _Ta7c;
// LINE 549:
// Block start:
	static const int32_t bDoneJoystickChangeCheckAlready = { /* todo */ };
	int32_t bCheckForCommandLineCheatCodes;
	bCheckForCommandLineCheatCodes = 0x0;
// LINE 551:
	this-><CGameApp+0x28:4> = 0x0;
// LINE 552:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 553:
	__asm        jmp    near ptr 0x00462CE8;

	__asm        cmp    dword ptr ds:[0x604498], 0;
	__asm        je     _T77f;
// LINE 554:
	__asm        push   1;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::SetOn;
// LINE 555:
_T77f:
	__asm        push   0x2E;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   6;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0xF4], eax;
// LINE 556:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x00462D4D;

	__asm        jmp    near ptr 0x00462D52;

	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0xE8], eax;
	__asm        jmp    near ptr 0x00462D7A;

	__asm        mov    eax, [ebp-0xE8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x00462D8E;

	__asm        cmp    dword ptr [ebp-0xEC], 0;
	__asm        je     _T830;

	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _T830;
_T830:
	__asm        jmp    near ptr 0x00462DB7;

	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    ecx, [ebp-0xE8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xE8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x00462E14;

	__asm        jmp    near ptr 0x00462E19;

	__asm        jmp    near ptr 0x00462E1E;
// LINE 557:
	this-><CGameApp+0xac:4> = this;
// LINE 558:
	this-><CGameApp+0xb0:4> = this-><CGameApp+0x38:4>;
// LINE 559:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::CreateAllSurfaces;
// LINE 560:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::UsePalette;
// LINE 561:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::SetUpRenderWindowSizes;
// LINE 565:
	__asm        cmp    G_VRAppInitCalled, 0;
	__asm        je     _T912;
// LINE 566:
	__asm        push   1;
	__asm        call   VRAppCityInit;
	__asm        add    esp, 4;
// LINE 567:
	__asm        jmp    _T97b;
// LINE 568:
_T912:
	bCheckForCommandLineCheatCodes = 0x1;
// LINE 569:
	G_VRAppInitCalled = 0x1;
// LINE 570:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::BackgroundVRAppInit;
	__asm        test   eax, eax;
	__asm        jne    _T97b;
// LINE 572:
	this-><CGameApp+0xb4:4> = 0x1;
// LINE 576:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x64];
// LINE 577:
	__asm        push   1;
	__asm        push   0x1F;
	__asm        push   0x7DB;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 578:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 585:
_T97b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     _T9e2;
// LINE 586:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 587:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::ReadFromMIFF;
// LINE 588:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        call   VRAppGameInit;
	__asm        add    esp, 4;
// LINE 589:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 591:
	__asm        jmp    _Ta07;
// LINE 592:
_T9e2:
	__asm        push   0;
	__asm        call   VRAppGameInit;
	__asm        add    esp, 4;
// LINE 593:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 599:
_Ta07:
	__asm        cmp    bDoneJoystickChangeCheckAlready, 0;
	__asm        jne    _Ta4b;
// LINE 600:
	bDoneJoystickChangeCheckAlready = 0x1;
// LINE 601:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        test   eax, eax;
	__asm        je     _Ta4b;
// LINE 602:
	__asm        push   1;
	__asm        push   0x1E;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 604:
_Ta4b:
	__asm        cmp    bCheckForCommandLineCheatCodes, 0;
	__asm        je     _Ta60;
// LINE 605:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CheckCommandLineForCheatCodes;
// LINE 606:
_Ta60:
	this-><CGameApp+0x1c:4> = 0x1;
// LINE 607:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 609:
// Block end:
	__asm        jmp    _T1078;
_Ta7c:
	__asm        cmp    nMode, 7;
	__asm        jne    _Tc18;
// LINE 610:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 611:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   7;
	__asm        lea    ecx, [ebp-0x24];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x110], eax;
// LINE 612:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x00463064;

	__asm        jmp    near ptr 0x00463069;

	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    near ptr 0x00463091;

	__asm        mov    eax, [ebp-0x104];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    near ptr 0x004630A5;

	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _Tb47;

	__asm        mov    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _Tb47;
_Tb47:
	__asm        jmp    near ptr 0x004630CE;

	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    ecx, [ebp-0x104];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    ecx, [ebp-0x10C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    ecx, [ebp-0x10C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    near ptr 0x0046312B;

	__asm        jmp    near ptr 0x00463130;

	__asm        jmp    near ptr 0x00463135;
// LINE 613:
	this-><CGameApp+0xbc4:4> = this;
// LINE 614:
	this-><CGameApp+0xbc8:4> = this-><CGameApp+0x38:4>;
// LINE 615:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::CreateAllSurfaces;
// LINE 616:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::UsePalette;
// LINE 617:
	this-><CGameApp+0x1c:4> = 0x1;
// LINE 618:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 621:
	__asm        jmp    _T1078;
_Tc18:
	__asm        cmp    nMode, 8;
	__asm        jne    _Tda7;
// LINE 622:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 623:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   8;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x12C], eax;
// LINE 624:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x114], eax;
	__asm        jmp    near ptr 0x00463200;

	__asm        jmp    near ptr 0x00463205;

	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    near ptr 0x0046322D;

	__asm        mov    eax, [ebp-0x120];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x00463241;

	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _Tce3;

	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        jmp    _Tce3;
_Tce3:
	__asm        jmp    near ptr 0x0046326A;

	__asm        mov    eax, [ebp-0x128];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x004632C7;

	__asm        jmp    near ptr 0x004632CC;

	__asm        jmp    near ptr 0x004632D1;
// LINE 625:
	this-><CGameApp+0x1684:4> = this;
// LINE 626:
	this-><CGameApp+0x1688:4> = this-><CGameApp+0x38:4>;
// LINE 627:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::CreateAllSurfaces;
// LINE 628:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::UsePalette;
// LINE 629:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 631:
	__asm        jmp    _T1078;
_Tda7:
	__asm        cmp    nMode, 9;
	__asm        jne    _Tf12;
// LINE 632:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 633:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   9;
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x144], eax;
// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x0046338F;

	__asm        jmp    near ptr 0x00463394;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    near ptr 0x004633BC;

	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x00463432;

	__asm        jmp    near ptr 0x00463437;

	__asm        jmp    near ptr 0x0046343C;
// LINE 635:
	this-><CGameApp+0x2144:4> = this;
// LINE 636:
	this-><CGameApp+0x2148:4> = this-><CGameApp+0x38:4>;
// LINE 637:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::CreateAllSurfaces;
// LINE 638:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::UsePalette;
// LINE 639:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 641:
	__asm        jmp    _T1078;
_Tf12:
	__asm        cmp    nMode, 0xB;
	__asm        jne    _T1078;
// LINE 642:
	this-><CGameApp+0x4340:4> = 0x1;
// LINE 643:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   0xB;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   CopterGameMode::CopterGameMode;
	__asm        mov    [ebp-0x15C], eax;
// LINE 644:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004634FA;

	__asm        jmp    near ptr 0x004634FF;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::get_node;
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x00463527;

	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x0046359D;

	__asm        jmp    near ptr 0x004635A2;

	__asm        jmp    near ptr 0x004635A7;
// LINE 645:
	this-><CGameApp+0x2c04:4> = this;
// LINE 646:
	this-><CGameApp+0x2c08:4> = this-><CGameApp+0x38:4>;
// LINE 647:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::CreateAllSurfaces;
// LINE 648:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::UsePalette;
// LINE 649:
	__asm        mov    eax, 1;
	__asm        jmp    _T107f;
// LINE 651:
_T1078:
	__asm        xor    eax, eax;
	__asm        jmp    _T107f;
// LINE 652:
_T107f:
}

// FUNCTION: COPTER_D 0x00463608
int  CGameApp::ExitMode(int32_t nMode) {
// LINE 661:
	__asm        cmp    nMode, 0;
	__asm        jne    _T66;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00463635;

	__asm        jmp    near ptr 0x0046363A;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00463648;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        jmp    near ptr 0x0046365F;
// LINE 663:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 665:
	__asm        jmp    _T5e3;
_T66:
	__asm        cmp    nMode, 2;
	__asm        jne    _Tfe;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046368F;

	__asm        jmp    near ptr 0x00463694;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004636A2;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004636C8;

	__asm        jmp    near ptr 0x004636CD;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x004636E4;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x004636F2;

	__asm        jmp    near ptr 0x004636F7;
// LINE 667:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 669:
	__asm        jmp    _T5e3;
_Tfe:
	__asm        cmp    nMode, 3;
	__asm        jne    _T1b5;
// LINE 672:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     _T152;
// LINE 673:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42C0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T145;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T145;
// LINE 674:
_T145:
	this-><CGameApp+0x42c0:4> = 0x0;
// LINE 678:
_T152:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00463784;

	__asm        jmp    near ptr 0x00463789;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00463797;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        jmp    near ptr 0x004637AE;
// LINE 681:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 683:
	__asm        jmp    _T5e3;
_T1b5:
	__asm        cmp    nMode, 4;
	__asm        jne    _T273;
// LINE 689:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 690:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::EndVideoForMainMenu;
// LINE 691:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::DestroyAllSurfaces;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00463804;

	__asm        jmp    near ptr 0x00463809;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00463817;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046383D;

	__asm        jmp    near ptr 0x00463842;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x00463859;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463867;

	__asm        jmp    near ptr 0x0046386C;
// LINE 693:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 695:
	__asm        jmp    _T5e3;
_T273:
	__asm        cmp    nMode, 5;
	__asm        jne    _T2eb;
// LINE 697:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 698:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::DestroyAllSurfaces;
// LINE 699:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004638BA;

	__asm        jmp    near ptr 0x004638BF;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004638CD;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        jmp    near ptr 0x004638E4;
// LINE 700:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 702:
	__asm        jmp    _T5e3;
_T2eb:
	__asm        cmp    nMode, 6;
	__asm        jne    _T3cc;
// LINE 706:
	__asm        call   S3CityDeInit;
// LINE 707:
	__asm        jmp    near ptr 0x00463907;

	__asm        cmp    dword ptr ds:[0x60449C], 0;
	__asm        je     _T318;
// LINE 708:
	__asm        push   0;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::SetOn;
// LINE 709:
_T318:
	__asm        call   S3DSStopAllSounds;
// LINE 710:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 711:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::DestroyAllSurfaces;
// LINE 712:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046395D;

	__asm        jmp    near ptr 0x00463962;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00463970;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463996;

	__asm        jmp    near ptr 0x0046399B;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x004639B2;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x004639C0;

	__asm        jmp    near ptr 0x004639C5;
// LINE 713:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 715:
	__asm        jmp    _T5e3;
_T3cc:
	__asm        cmp    nMode, 7;
	__asm        jne    _T434;
// LINE 717:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::DestroyAllSurfaces;
// LINE 718:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00463A03;

	__asm        jmp    near ptr 0x00463A08;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00463A16;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        jmp    near ptr 0x00463A2D;
// LINE 719:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 721:
	__asm        jmp    _T5e3;
_T434:
	__asm        cmp    nMode, 8;
	__asm        jne    _T4da;
// LINE 723:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::DestroyAllSurfaces;
// LINE 724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00463A6B;

	__asm        jmp    near ptr 0x00463A70;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00463A7E;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463AA4;

	__asm        jmp    near ptr 0x00463AA9;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x00463AC0;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463ACE;

	__asm        jmp    near ptr 0x00463AD3;
// LINE 725:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 727:
	__asm        jmp    _T5e3;
_T4da:
	__asm        cmp    nMode, 9;
	__asm        jne    _T542;
// LINE 729:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::DestroyAllSurfaces;
// LINE 730:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00463B11;

	__asm        jmp    near ptr 0x00463B16;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00463B24;

	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   list<CopterGameMode>::erase;
	__asm        jmp    near ptr 0x00463B3B;
// LINE 731:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 733:
	__asm        jmp    _T5e3;
_T542:
	__asm        cmp    nMode, 0xB;
	__asm        jne    _T5e3;
// LINE 735:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::DestroyAllSurfaces;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00463B79;

	__asm        jmp    near ptr 0x00463B7E;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00463B8C;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463BB2;

	__asm        jmp    near ptr 0x00463BB7;

	__asm        mov    eax, list<CopterGameMode>::free_list;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    list<CopterGameMode>::free_list, eax;
	__asm        jmp    near ptr 0x00463BCE;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463BDC;

	__asm        jmp    near ptr 0x00463BE1;
// LINE 737:
	__asm        mov    eax, 1;
	__asm        jmp    _T5ea;
// LINE 739:
_T5e3:
	__asm        xor    eax, eax;
	__asm        jmp    _T5ea;
// LINE 740:
_T5ea:
}

// FUNCTION: COPTER_D 0x00463bf9
void  CGameApp::DestroyAllModes() {
	int32_t nCurrentMode;
	class list<CopterGameMode>::iterator i;

// LINE 753:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     _T63;
// LINE 754:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42BC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PaletteBuffer::~PaletteBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00463C4A;

	__asm        jmp    _T56;
// LINE 755:
_T56:
	this-><CGameApp+0x42bc:4> = 0x0;
// LINE 758:
_T63:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00463C75;

	__asm        jmp    _T81;
// LINE 759:
_T81:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00463C91;

	__asm        jmp    near ptr 0x00463C96;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _Tb3;

	__asm        jmp    _Tc7;

	__asm        jmp    _Tb3;
_Tb3:
	__asm        jmp    _Tc2;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _Tc7;
_Tc2:
	__asm        jmp    _Tcc;
_Tc7:
	__asm        jmp    _T1c8;
_Tcc:
	__asm        jmp    _Tdb;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T1c8;
// LINE 760:
_Tdb:
	__asm        jmp    near ptr 0x00463CD9;

	nCurrentMode = i.node->data.nModeID;
// LINE 761:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T16d;
// LINE 763:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::DestroyAllSurfaces;
	__asm        jmp    near ptr 0x00463CFD;
// LINE 764:
	__asm        jmp    _T1a5;
// LINE 766:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::Shutdown;
// LINE 767:
	__asm        jmp    _T1a5;
// LINE 769:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Shutdown;
// LINE 770:
	__asm        jmp    _T1a5;
// LINE 772:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::Shutdown;
// LINE 773:
	__asm        jmp    _T1a5;
// LINE 775:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::Shutdown;
// LINE 776:
	__asm        jmp    _T1a5;
// LINE 778:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::Shutdown;
// LINE 779:
	__asm        jmp    _T1a5;
// LINE 780:
	__asm        jmp    _T1a5;
_T16d:
	__asm        sub    dword ptr [ebp-0x34], 4;
	__asm        cmp    dword ptr [ebp-0x34], 7;
	__asm        ja     _T1a5;

	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    SwitchPointers4603262[0][eax*4];
// Switch pointers
// LINE 781:
_T1a5:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00463DB1;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00463DBC;
// LINE 782:
	__asm        jmp    _T81;
// LINE 783:
_T1c8:
	__asm        jmp    near ptr 0x00463DC6;
}

// FUNCTION: COPTER_D 0x00463dcb
void  CGameApp::ProcessCommand(int32_t nCommand) {
// LINE 791:
	__asm        cmp    nCommand, 0x37;
	__asm        jne    _T2b;
// LINE 792:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 793:
	__asm        jmp    _T67b;
// LINE 795:
	__asm        jmp    _T142;
_T2b:
	__asm        cmp    nCommand, 0xC9;
	__asm        jne    _T4a;
// LINE 796:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::TogglePaletteBufferDisplay;
// LINE 797:
	__asm        jmp    _T67b;
// LINE 799:
	__asm        jmp    _T142;
_T4a:
	__asm        cmp    nCommand, 0xCA;
	__asm        jne    _T69;
// LINE 800:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ToggleDebugWindowDisplay;
// LINE 801:
	__asm        jmp    _T67b;
// LINE 803:
	__asm        jmp    _T142;
_T69:
	__asm        cmp    nCommand, 0xCB;
	__asm        jne    _Taf;
// LINE 804:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C8], 0;
	__asm        jne    _T98;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C8], 1;
	__asm        jmp    _Ta5;
_T98:
	this-><CGameApp+0x42c8:4> = 0x0;
// LINE 805:
_Ta5:
	__asm        jmp    _T67b;
// LINE 807:
	__asm        jmp    _T142;
_Taf:
	__asm        cmp    nCommand, 0xCC;
	__asm        jne    _T10f;
// LINE 808:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00463E9E;

	__asm        jmp    near ptr 0x00463EA3;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00463EB1;

	__asm        jmp    near ptr 0x00463EB6;

	__asm        jmp    near ptr 0x00463EBB;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jl     _T105;
// LINE 809:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ShowVersion;
// LINE 810:
_T105:
	__asm        jmp    _T67b;
// LINE 812:
	__asm        jmp    _T142;
_T10f:
	__asm        cmp    nCommand, 0x36;
	__asm        jne    _T142;
// LINE 813:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4320], 0;
	__asm        jne    _T138;
// LINE 814:
	__asm        push   0xA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetSystemPriorityLevel;
// LINE 815:
	__asm        jmp    _T142;
// LINE 816:
_T138:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetSystemPriorityLevel;
// LINE 818:
_T142:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00463F24;

	__asm        jmp    near ptr 0x00463F29;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00463F37;

	__asm        jmp    near ptr 0x00463F3C;

	__asm        jmp    near ptr 0x00463F41;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    _T23a;
// LINE 819:
	__asm        cmp    nCommand, 1;
	__asm        jne    _T1b2;
// LINE 821:
	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 822:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::Awake;
// LINE 823:
	__asm        call   RemoveAvatarFromBuilding;
// LINE 825:
	__asm        jmp    _T23a;
_T1b2:
	__asm        cmp    nCommand, 2;
	__asm        jne    _T1e1;
// LINE 828:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Sleep;
// LINE 829:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 830:
	__asm        jmp    _T67b;
// LINE 832:
	__asm        jmp    _T23a;
_T1e1:
	__asm        cmp    nCommand, 3;
	__asm        jne    _T210;
// LINE 833:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Sleep;
// LINE 834:
	__asm        push   9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 835:
	__asm        jmp    _T67b;
// LINE 837:
	__asm        jmp    _T23a;
_T210:
	__asm        cmp    nCommand, 4;
	__asm        jne    _T23a;
// LINE 838:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Sleep;
// LINE 839:
	__asm        push   0xB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 840:
	__asm        jmp    _T67b;
// LINE 844:
_T23a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046401C;

	__asm        jmp    near ptr 0x00464021;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046402F;

	__asm        jmp    near ptr 0x00464034;

	__asm        jmp    near ptr 0x00464039;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    _T2a0;
// LINE 845:
	__asm        cmp    nCommand, 1;
	__asm        jne    _T2a0;
// LINE 846:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 847:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Awake;
// LINE 851:
_T2a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00464082;

	__asm        jmp    near ptr 0x00464087;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00464095;

	__asm        jmp    near ptr 0x0046409A;

	__asm        jmp    near ptr 0x0046409F;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    _T306;
// LINE 852:
	__asm        cmp    nCommand, 1;
	__asm        jne    _T306;
// LINE 853:
	__asm        push   9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 854:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Awake;
// LINE 858:
_T306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004640E8;

	__asm        jmp    near ptr 0x004640ED;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004640FB;

	__asm        jmp    near ptr 0x00464100;

	__asm        jmp    near ptr 0x00464105;

	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    _T371;
// LINE 859:
	__asm        cmp    nCommand, 1;
	__asm        jne    _T36c;
// LINE 860:
	__asm        push   0xB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 861:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::Awake;
// LINE 865:
_T36c:
	__asm        jmp    _T676;
_T371:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00464153;

	__asm        jmp    near ptr 0x00464158;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00464166;

	__asm        jmp    near ptr 0x0046416B;

	__asm        jmp    near ptr 0x00464170;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T676;
// LINE 866:
	__asm        cmp    nCommand, 0x30;
	__asm        jne    _T3ce;
// LINE 867:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ToggleMusicSoundTrack;
// LINE 868:
	__asm        jmp    _T67b;
// LINE 870:
	__asm        jmp    _T676;
_T3ce:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T676;
// LINE 874:
	__asm        cmp    nCommand, 3;
	__asm        je     _T3fc;

	__asm        cmp    nCommand, 0x15;
	__asm        jl     _T41f;

	__asm        cmp    nCommand, 0x19;
	__asm        jg     _T41f;
// LINE 876:
_T3fc:
	__asm        cmp    G_camera_mode, 3;
	__asm        je     _T415;
// LINE 877:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        call   S3HeliCommand;
	__asm        add    esp, 4;
// LINE 878:
_T415:
	__asm        jmp    _T67b;
// LINE 882:
	__asm        jmp    _T676;
// LINE 889:
_T41f:
	__asm        cmp    nCommand, 0x2D;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 0x2E;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 5;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 4;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 0x2F;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 0x14;
	__asm        je     _T46f;

	__asm        cmp    nCommand, 0x1B;
	__asm        jl     _T4ba;

	__asm        cmp    nCommand, 0x20;
	__asm        jg     _T4ba;
// LINE 891:
_T46f:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        call   S3ViewerCommand;
	__asm        add    esp, 4;
// LINE 894:
	__asm        cmp    nCommand, 0x2D;
	__asm        jne    _T498;
// LINE 895:
	this-><CGameApp+0x4328:4> = G_texobjs;
// LINE 896:
	__asm        jmp    _T4b0;
_T498:
	__asm        cmp    nCommand, 0x2E;
	__asm        jne    _T4b0;
// LINE 897:
	this-><CGameApp+0x432c:4> = G_texterr;
// LINE 898:
_T4b0:
	__asm        jmp    _T67b;
// LINE 900:
	__asm        jmp    _T676;
// LINE 901:
_T4ba:
	__asm        cmp    nCommand, 0x22;
	__asm        jl     _T503;

	__asm        cmp    nCommand, 0x25;
	__asm        jg     _T503;
// LINE 903:
	__asm        cmp    G_camera_mode, 3;
	__asm        je     _T4f9;

	__asm        call   GetCurrentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     _T4f9;
// LINE 904:
	__asm        mov    eax, nCommand;
	__asm        sub    eax, 0x22;
	__asm        push   eax;
	__asm        call   S3PlayMegaphoneMessage;
	__asm        add    esp, 4;
// LINE 905:
_T4f9:
	__asm        jmp    _T67b;
// LINE 908:
	__asm        jmp    _T676;
_T503:
	__asm        cmp    nCommand, 0x35;
	__asm        jne    _T51f;
// LINE 909:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateControlDisplayWindow;
// LINE 910:
	__asm        jmp    _T67b;
// LINE 913:
	__asm        jmp    _T676;
_T51f:
	__asm        cmp    nCommand, 0x31;
	__asm        jne    _T55e;
// LINE 914:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x4308];
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4308], 2;
	__asm        jle    _T54f;

	this-><CGameApp+0x4308:4> = 0x0;
_T54f:
	__asm        jmp    near ptr 0x0046431F;
// LINE 915:
	__asm        jmp    _T67b;
// LINE 917:
	__asm        jmp    _T676;
_T55e:
	__asm        cmp    nCommand, 0x32;
	__asm        jne    _T580;
// LINE 918:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::TogglePanelDisplay;
// LINE 919:
	__asm        jmp    _T67b;
// LINE 921:
	__asm        jmp    _T676;
_T580:
	__asm        cmp    nCommand, 0x34;
	__asm        jne    _T5a2;
// LINE 922:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::ToggleEquipmentDisplay;
// LINE 923:
	__asm        jmp    _T67b;
// LINE 925:
	__asm        jmp    _T676;
_T5a2:
	__asm        cmp    nCommand, 0x33;
	__asm        jne    _T5e5;
// LINE 926:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4330], 0;
	__asm        jne    _T5ce;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4330], 1;
	__asm        jmp    _T5db;
_T5ce:
	this-><CGameApp+0x4330:4> = 0x0;
// LINE 927:
_T5db:
	__asm        jmp    _T67b;
// LINE 929:
	__asm        jmp    _T676;
_T5e5:
	__asm        cmp    nCommand, 0x2A;
	__asm        jne    _T63a;
// LINE 930:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T601;

	__asm        jmp    _T606;
_T601:
	__asm        jmp    _T630;
_T606:
	__asm        jmp    _T615;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T630;
// LINE 933:
_T615:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::Sleep;
// LINE 934:
	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 936:
_T630:
	__asm        jmp    _T67b;
// LINE 938:
	__asm        jmp    _T676;
_T63a:
	__asm        cmp    nCommand, 0x3A;
	__asm        jne    _T656;
// LINE 939:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateCheatCodeEntryMessageBox;
// LINE 940:
	__asm        jmp    _T67b;
// LINE 942:
	__asm        jmp    _T676;
_T656:
	__asm        cmp    nCommand, 0x38;
	__asm        jne    _T676;
// LINE 944:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 945:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreatePlayMenu;
// LINE 946:
	__asm        jmp    _T67b;
// LINE 956:
_T676:
	__asm        jmp    _T67b;
_T67b:
}

// FUNCTION: COPTER_D 0x0046444d
void  CGameApp::DoKeyDown(long lKey, char chModifiers) {
	int32_t bPushCommand;
	int32_t nCommand;

// LINE 970:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x36BC;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 971:
	__asm        cmp    nCommand, 0;
	__asm        je     _T52;
// LINE 972:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 973:
	__asm        jmp    _T42b;
// LINE 976:
_T52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     _T76;
// LINE 977:
	__asm        jmp    _T42b;
// LINE 981:
_T76:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004644DA;

	__asm        jmp    near ptr 0x004644DF;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004644ED;

	__asm        jmp    near ptr 0x004644F2;

	__asm        jmp    near ptr 0x004644F7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 3;
	__asm        jne    _Tf0;
// LINE 983:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     _Teb;

	__asm        cmp    lKey, 0x1B;
	__asm        jne    _Teb;
// LINE 984:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 985:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 994:
_Teb:
	__asm        jmp    _T426;
_Tf0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464554;

	__asm        jmp    near ptr 0x00464559;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464567;

	__asm        jmp    near ptr 0x0046456C;

	__asm        jmp    near ptr 0x00464571;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 5;
	__asm        jne    _T16f;
// LINE 996:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 1;
	__asm        jne    _T165;

	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T165;
// LINE 998:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 999:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1001:
_T165:
	__asm        jmp    _T42b;
// LINE 1004:
	__asm        jmp    _T426;
_T16f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004645D3;

	__asm        jmp    near ptr 0x004645D8;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004645E6;

	__asm        jmp    near ptr 0x004645EB;

	__asm        jmp    near ptr 0x004645F0;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T1fb;
// LINE 1006:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x110;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 1007:
	__asm        cmp    nCommand, 0;
	__asm        je     _T1f6;
// LINE 1008:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1009:
	__asm        jmp    _T42b;
// LINE 1012:
_T1f6:
	__asm        jmp    _T426;
_T1fb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0046465F;

	__asm        jmp    near ptr 0x00464664;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464672;

	__asm        jmp    near ptr 0x00464677;

	__asm        jmp    near ptr 0x0046467C;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    _T287;
// LINE 1014:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBD0;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 1015:
	__asm        cmp    nCommand, 0;
	__asm        je     _T282;
// LINE 1016:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1017:
	__asm        jmp    _T42b;
// LINE 1020:
_T282:
	__asm        jmp    _T426;
_T287:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004646EB;

	__asm        jmp    near ptr 0x004646F0;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004646FE;

	__asm        jmp    near ptr 0x00464703;

	__asm        jmp    near ptr 0x00464708;

	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    _T313;
// LINE 1021:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1690;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 1022:
	__asm        cmp    nCommand, 0;
	__asm        je     _T30e;
// LINE 1023:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1024:
	__asm        jmp    _T42b;
// LINE 1027:
_T30e:
	__asm        jmp    _T426;
_T313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00464777;

	__asm        jmp    near ptr 0x0046477C;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0046478A;

	__asm        jmp    near ptr 0x0046478F;

	__asm        jmp    near ptr 0x00464794;

	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    _T39f;
// LINE 1028:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2150;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 1029:
	__asm        cmp    nCommand, 0;
	__asm        je     _T39a;
// LINE 1030:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1031:
	__asm        jmp    _T42b;
// LINE 1034:
_T39a:
	__asm        jmp    _T426;
_T39f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00464803;

	__asm        jmp    near ptr 0x00464808;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00464816;

	__asm        jmp    near ptr 0x0046481B;

	__asm        jmp    near ptr 0x00464820;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    _T426;
// LINE 1035:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C10;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x28];
// LINE 1036:
	__asm        cmp    nCommand, 0;
	__asm        je     _T426;
// LINE 1037:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1038:
	__asm        jmp    _T42b;
// LINE 1041:
_T426:
	__asm        jmp    _T42b;
_T42b:
}

// FUNCTION: COPTER_D 0x0046487f
void  CGameApp::DoKeyUp(long lKey, char chModifiers) {
// LINE 1050:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T30;
// LINE 1051:
	__asm        jmp    _T21f;
// LINE 1054:
_T30:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004648C6;

	__asm        jmp    near ptr 0x004648CB;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004648D9;

	__asm        jmp    near ptr 0x004648DE;

	__asm        jmp    near ptr 0x004648E3;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T93;
// LINE 1055:
	__asm        mov    eax, this;
	__asm        add    eax, 0x110;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x30];
// LINE 1056:
	__asm        jmp    _T21a;
_T93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464929;

	__asm        jmp    near ptr 0x0046492E;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0046493C;

	__asm        jmp    near ptr 0x00464941;

	__asm        jmp    near ptr 0x00464946;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    _Tf6;
// LINE 1057:
	__asm        mov    eax, this;
	__asm        add    eax, 0xBD0;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x30];
// LINE 1058:
	__asm        jmp    _T21a;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046498C;

	__asm        jmp    near ptr 0x00464991;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046499F;

	__asm        jmp    near ptr 0x004649A4;

	__asm        jmp    near ptr 0x004649A9;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    _T159;
// LINE 1059:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1690;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x30];
// LINE 1060:
	__asm        jmp    _T21a;
_T159:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004649EF;

	__asm        jmp    near ptr 0x004649F4;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464A02;

	__asm        jmp    near ptr 0x00464A07;

	__asm        jmp    near ptr 0x00464A0C;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    _T1bc;
// LINE 1061:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2150;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x30];
// LINE 1062:
	__asm        jmp    _T21a;
_T1bc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464A52;

	__asm        jmp    near ptr 0x00464A57;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464A65;

	__asm        jmp    near ptr 0x00464A6A;

	__asm        jmp    near ptr 0x00464A6F;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    _T21a;
// LINE 1063:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C10;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, gGameCommander;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gGameCommander;
	__asm        call   dword ptr [eax+0x30];
// LINE 1064:
_T21a:
	__asm        jmp    _T21f;
_T21f:
}

// FUNCTION: COPTER_D 0x00464aa5
void  CGameApp::DoCharacter(long lCharacter) {
// LINE 1072:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+8];
// LINE 1073:
	__asm        jmp    near ptr 0x00464AC9;
}

// FUNCTION: COPTER_D 0x00464ad0
void  CGameApp::DoCursorDown(int32_t nCursorX, int32_t nCursorY, int32_t nButton) {
// LINE 1080:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x14];
// LINE 1081:
	__asm        jmp    near ptr 0x00464AFC;
}

// FUNCTION: COPTER_D 0x00464b03
void  CGameApp::DoCursorUp(int32_t nCursorX, int32_t nCursorY, int32_t nButton) {
// LINE 1089:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x18];
// LINE 1090:
	__asm        jmp    near ptr 0x00464B2F;
}

// FUNCTION: COPTER_D 0x00464b36
void  CGameApp::DoCursorMove(int32_t nCursorX, int32_t nCursorY) {
// LINE 1098:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1099:
	__asm        jmp    near ptr 0x00464B5E;
}

// FUNCTION: COPTER_D 0x00464b65
void  CGameApp::ClearCommands() {
// LINE 1110:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464B88;

	__asm        jmp    near ptr 0x00464B8D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464B9B;

	__asm        jmp    near ptr 0x00464BA0;

	__asm        jmp    near ptr 0x00464BA5;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T60;
// LINE 1111:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x110;
	__asm        call   CommandSystem::ClearAllCommands;
// LINE 1112:
	__asm        jmp    _T1ab;
_T60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464BDC;

	__asm        jmp    near ptr 0x00464BE1;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464BEF;

	__asm        jmp    near ptr 0x00464BF4;

	__asm        jmp    near ptr 0x00464BF9;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    _Tb4;
// LINE 1113:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBD0;
	__asm        call   CommandSystem::ClearAllCommands;
// LINE 1114:
	__asm        jmp    _T1ab;
_Tb4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464C30;

	__asm        jmp    near ptr 0x00464C35;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464C43;

	__asm        jmp    near ptr 0x00464C48;

	__asm        jmp    near ptr 0x00464C4D;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    _T108;
// LINE 1115:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1690;
	__asm        call   CommandSystem::ClearAllCommands;
// LINE 1116:
	__asm        jmp    _T1ab;
_T108:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464C84;

	__asm        jmp    near ptr 0x00464C89;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464C97;

	__asm        jmp    near ptr 0x00464C9C;

	__asm        jmp    near ptr 0x00464CA1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    _T15c;
// LINE 1117:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2150;
	__asm        call   CommandSystem::ClearAllCommands;
// LINE 1118:
	__asm        jmp    _T1ab;
_T15c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464CD8;

	__asm        jmp    near ptr 0x00464CDD;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464CEB;

	__asm        jmp    near ptr 0x00464CF0;

	__asm        jmp    near ptr 0x00464CF5;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    _T1ab;
// LINE 1119:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2C10;
	__asm        call   CommandSystem::ClearAllCommands;
// LINE 1120:
_T1ab:
	__asm        jmp    near ptr 0x00464D15;
}

// FUNCTION: COPTER_D 0x00464d1a
void  CGameApp::ProcessSystemCloseRequest() {
// LINE 1129:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1e;
// LINE 1130:
	__asm        jmp    _T94;
// LINE 1131:
_T1e:
	this-><CGameApp+0x18:4> = 0x1;
// LINE 1132:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464D59;

	__asm        jmp    near ptr 0x00464D5E;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464D6C;

	__asm        jmp    near ptr 0x00464D71;

	__asm        jmp    near ptr 0x00464D76;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jl     _T82;
// LINE 1133:
	__asm        push   0x20002;
	__asm        push   3;
	__asm        push   0x7DE;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1134:
	__asm        jmp    _T8f;
// LINE 1136:
_T82:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1138:
_T8f:
	__asm        jmp    _T94;
_T94:
}

// FUNCTION: COPTER_D 0x00464db3
int  CGameApp::CheckForWarpToCareerLevel() {
	int32_t nNewLevel;

// LINE 1147:
	__asm        cmp    G_CheatCodes[3], 0;
	__asm        je     _T43;
// LINE 1148:
	__asm        mov    eax, G_CheatCodes[3];
	__asm        dec    eax;
	__asm        mov    nNewLevel, eax;
// LINE 1149:
	G_CheatCodes[3] = 0x0;
// LINE 1150:
	__asm        mov    eax, nNewLevel;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
	__asm        jmp    _T4a;
// LINE 1152:
_T43:
	__asm        xor    eax, eax;
	__asm        jmp    _T4a;
// LINE 1153:
_T4a:
}

// FUNCTION: COPTER_D 0x00464e02
int  CGameApp::WarpToCareerLevel(int32_t nNewLevel) {
// LINE 1164:
	__asm        cmp    nNewLevel, 0;
	__asm        jl     _T20;

	__asm        cmp    nNewLevel, 0x1F;
	__asm        jl     _T27;
// LINE 1165:
_T20:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta9;
// LINE 1166:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464E40;

	__asm        jmp    near ptr 0x00464E45;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464E53;

	__asm        jmp    near ptr 0x00464E58;

	__asm        jmp    near ptr 0x00464E5D;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     _T6f;
// LINE 1167:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta9;
// LINE 1168:
_T6f:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1169:
	__asm        mov    eax, nNewLevel;
	__asm        push   eax;
	__asm        call   MoveToNextCareerCity;
	__asm        add    esp, 4;
// LINE 1170:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 1171:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1172:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta9;
// LINE 1173:
_Ta9:
}

// FUNCTION: COPTER_D 0x00464eb2
int  CGameApp::GraduateUserToNextCareerLevel() {
// LINE 1182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00464ED5;

	__asm        jmp    near ptr 0x00464EDA;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00464EE8;

	__asm        jmp    near ptr 0x00464EED;

	__asm        jmp    near ptr 0x00464EF2;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     _T54;
// LINE 1183:
	__asm        xor    eax, eax;
	__asm        jmp    _T167;
// LINE 1185:
_T54:
	__asm        cmp    gCurrentCareerCityInfo.lCurrentCityIndex, 0x1E;
	__asm        jl     _T74;
// LINE 1186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    _T167;
// LINE 1192:
_T74:
	__asm        mov    gGraduationState.nGraduationState, 0;
	__asm        mov    gGraduationState.timerGraduationState.lTotalElapsedTime, 0;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        jmp    near ptr 0x00464F49;

	__asm        jmp    near ptr 0x00464F4E;

	__asm        cmp    gGraduationState.timerGraduationState.lStartTime, 0;
	__asm        je     _Tae;

	__asm        jmp    _T11d;
_Tae:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 1;
	__asm        jne    _Td0;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T118;

	__asm        jmp    _T118;
_Td0:
	__asm        cmp    gGraduationState.timerGraduationState.nTimerResolution, 0;
	__asm        jne    _Tff;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T118;

	__asm        jmp    _T118;
_Tff:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    gGraduationState.timerGraduationState.lStartTime, eax;
	__asm        jmp    _T118;
_T118:
	__asm        jmp    _T11d;
_T11d:
	__asm        jmp    near ptr 0x00464FD4;

	__asm        jmp    near ptr 0x00464FD9;

	__asm        jmp    near ptr 0x00464FDE;
// LINE 1193:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1194:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 1195:
	this-><CGameApp+0x9c:4> = 0x0;
// LINE 1196:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1197:
	__asm        mov    eax, 1;
	__asm        jmp    _T167;
// LINE 1198:
_T167:
}

// FUNCTION: COPTER_D 0x0046501e
int  CGameApp::GraduateUserFromAllCareerLevels() {
// LINE 1207:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00465041;

	__asm        jmp    near ptr 0x00465046;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00465054;

	__asm        jmp    near ptr 0x00465059;

	__asm        jmp    near ptr 0x0046505E;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     _T54;
// LINE 1208:
	__asm        xor    eax, eax;
	__asm        jmp    _T5e;
// LINE 1209:
_T54:
	__asm        mov    eax, 1;
	__asm        jmp    _T5e;
// LINE 1210:
_T5e:
}

// FUNCTION: COPTER_D 0x00465081
void  CGameApp::NotifyUserOfGraduation() {
	class DigitalSound *tempNotificationSound;
	char szString[128];
	char szFullPath[260];
	int32_t nFullStringID;


	None = 0x0;
// LINE 1222:
	__asm        push   0;
	__asm        push   0x226;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1223:
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        cmp    dword ptr [ebp-0x1C8], 0;
	__asm        jne    _Ta1;

	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        push   0x597200;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _Ta6;
_Ta1:
	__asm        jmp    _Ta6;
// LINE 1224:
_Ta6:
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::AddNewMessage;
// LINE 1225:
	__asm        push   0;
	__asm        push   0x227;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1226:
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        jne    _T13c;

	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        push   0x597200;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T141;
_T13c:
	__asm        jmp    _T141;
// LINE 1227:
_T141:
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   MessageDisplayManager::AddNewMessage;
// LINE 1230:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_GRADUATION_NOTIFICATION_SOUND_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1231:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     _T2bc;

	__asm        or     dword ptr [ebp-0x19C], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        cmp    dword ptr [ebp-0x1BC], 0;
	__asm        je     _T278;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046524A;

	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T249;

	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004652C5;

	__asm        jmp    _T255;
_T249:
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    dword ptr [eax], 0;
_T255:
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004652E8;

	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    _T282;
_T278:
	None = 0x0;
_T282:
	__asm        mov    dword ptr [ebp-0x198], 0;
	__asm        jmp    near ptr 0x00465312;

	__asm        lea    eax, [ebp-0x198];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x190];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    tempNotificationSound, eax;
	__asm        jmp    _T2c6;
_T2bc:
	tempNotificationSound = 0x0;
_T2c6:
	__asm        test   byte ptr [ebp-0x19C], 1;
	__asm        je     _T3d0;

	__asm        and    dword ptr [ebp-0x19C], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x194];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x194];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38d;

	__asm        mov    eax, [ebp-0x194];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x1AC], eax;
	__asm        cmp    dword ptr [ebp-0x1AC], 0;
	__asm        je     _T38d;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T36a;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    dword ptr [eax], 0;
_T36a:
	__asm        jmp    near ptr 0x004653F0;

	__asm        jmp    near ptr 0x004653F5;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00465409;

	__asm        jmp    _T38d;
_T38d:
	__asm        jmp    near ptr 0x00465413;

	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     _T3c6;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3c6:
	__asm        jmp    near ptr 0x0046544C;

	__asm        jmp    _T3d0;
// LINE 1232:
_T3d0:
	__asm        mov    eax, tempNotificationSound;
	__asm        push   eax;
	__asm        push   0x43E250;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+0x14];
// LINE 1233:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+0x24];
// LINE 1234:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+8];
// LINE 1235:
	__asm        jmp    near ptr 0x0046549F;
}

// FUNCTION: COPTER_D 0x004654a4
int  CGameApp::DoMessage(class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	unsigned long nResult;
	int32_t nCurrentGameMode;

// LINE 1242:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4324];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004654C7;

	__asm        jmp    near ptr 0x004654CC;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004654DA;

	__asm        jmp    near ptr 0x004654DF;

	__asm        jmp    near ptr 0x004654E4;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1245:
	__asm        cmp    lWindowID, 0x7DA;
	__asm        je     _T63;

	__asm        cmp    lWindowID, 0x7D9;
	__asm        jne    _Teb;
// LINE 1246:
_T63:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 1247:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _Ta0;
// LINE 1248:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1249:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1251:
	__asm        jmp    _Te6;
_Ta0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _Te6;
// LINE 1252:
	this-><CGameApp+0x14:4> = 0x0;
// LINE 1253:
	this-><CGameApp+0x90:4> = 0x0;
// LINE 1254:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1255:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1258:
_Te6:
	__asm        jmp    _Ta29;
_Teb:
	__asm        cmp    lWindowID, 0x7DF;
	__asm        jne    _T250;
// LINE 1259:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 1260:
	__asm        cmp    lMessage, 1;
	__asm        jne    _T24b;
// LINE 1261:
// Block start:
	class basic_string<char> sCheatCodeString;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T15d;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004655F6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sCheatCodeString.reference, eax;
	__asm        jmp    _T164;
_T15d:
	sCheatCodeString.reference = 0x0;
_T164:
	__asm        mov    sCheatCodeString.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00465614;
// LINE 1262:
	__asm        lea    eax, sCheatCodeString.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1263:
	__asm        lea    eax, sCheatCodeString.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DoCheatCode;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, sCheatCodeString.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCheatCodeString.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T217;

	__asm        mov    eax, sCheatCodeString.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T217;

	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1f7;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
_T1f7:
	__asm        jmp    near ptr 0x004656A0;

	__asm        jmp    near ptr 0x004656A5;

	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004656B6;

	__asm        jmp    _T217;
_T217:
	__asm        jmp    near ptr 0x004656C0;

	__asm        cmp    sCheatCodeString.c_str_ptr, 0;
	__asm        je     _T23e;

	__asm        mov    eax, sCheatCodeString.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T23e:
	__asm        jmp    near ptr 0x004656E7;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _Ta30;
// LINE 1266:
// Block end:
_T24b:
	__asm        jmp    _Ta29;
_T250:
	__asm        cmp    lWindowID, 0x7E0;
	__asm        jne    _T294;
// LINE 1267:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 1268:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1269:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1270:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta30;
// LINE 1272:
	__asm        jmp    _Ta29;
_T294:
	__asm        cmp    lWindowID, 0x7D2;
	__asm        jne    _T2cd;
// LINE 1273:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    eax, lWindowID;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x80];
	__asm        jmp    _Ta30;
// LINE 1276:
	__asm        jmp    _Ta29;
_T2cd:
	__asm        cmp    lWindowID, 0x7D3;
	__asm        jne    _T303;
// LINE 1277:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    eax, lWindowID;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x7C];
	__asm        jmp    _Ta30;
// LINE 1280:
	__asm        jmp    _Ta29;
_T303:
	__asm        cmp    lWindowID, 0x7D7;
	__asm        jne    _T3ec;
// LINE 1281:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T32a;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T3dd;
// LINE 1282:
// Block start:
	long lCurrentCitySelection;
_T32a:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    lCurrentCitySelection, eax;
	__asm        jmp    near ptr 0x004657DC;
// LINE 1283:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1284:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    _T377;
// LINE 1285:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1286:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1288:
	__asm        jmp    _T3dd;
// LINE 1289:
_T377:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T398;
// LINE 1290:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        call   SetUpNewCareerCity;
	__asm        add    esp, 4;
// LINE 1291:
	__asm        jmp    _T3a4;
// LINE 1292:
_T398:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        call   MoveToNextCareerCity;
	__asm        add    esp, 4;
// LINE 1298:
_T3a4:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::StartVideoForCitySelection;
	__asm        test   eax, eax;
	__asm        jne    _T3dd;
// LINE 1299:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1300:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1304:
// Block end:
_T3dd:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1306:
	__asm        jmp    _Ta29;
_T3ec:
	__asm        cmp    lWindowID, 0x7DE;
	__asm        jne    _T486;
// LINE 1307:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 1308:
	__asm        cmp    lMessage, 2;
	__asm        jne    _T46d;
// LINE 1309:
	this-><CGameApp+0x10:4> = 0x1;
// LINE 1314:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jl     _T43e;
// LINE 1315:
	__asm        push   0x20002;
	__asm        push   0x31;
	__asm        push   0x7DD;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1316:
	__asm        jmp    _T468;
// LINE 1317:
_T43e:
	this-><CGameApp+0x04:4> = 0x0;
// LINE 1318:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1319:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1322:
_T468:
	__asm        jmp    _T477;
// LINE 1323:
_T46d:
	this-><CGameApp+0x04:4> = 0x0;
// LINE 1324:
_T477:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1326:
	__asm        jmp    _Ta29;
_T486:
	__asm        cmp    lWindowID, 0x7D4;
	__asm        jne    _T503;
// LINE 1327:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T4ad;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T4f4;
// LINE 1328:
_T4ad:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyUserInputWindow;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x1C], eax;
// LINE 1329:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T4f4;
// LINE 1331:
_T4f4:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1334:
	__asm        jmp    _Ta29;
_T503:
	__asm        cmp    lWindowID, 0x7D8;
	__asm        jne    _T580;
// LINE 1335:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T52a;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T571;
// LINE 1336:
_T52a:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyCitySettingsWindow;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x20], eax;
// LINE 1337:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T571;
// LINE 1339:
_T571:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1342:
	__asm        jmp    _Ta29;
_T580:
	__asm        cmp    lWindowID, 0x7D5;
	__asm        jne    _T5fd;
// LINE 1343:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T5a7;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T5ee;
// LINE 1344:
_T5a7:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyRenderSettingsWindow;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x24], eax;
// LINE 1345:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T5ee;
// LINE 1347:
_T5ee:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1350:
	__asm        jmp    _Ta29;
_T5fd:
	__asm        cmp    lWindowID, 0x7D6;
	__asm        jne    _T67a;
// LINE 1351:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T624;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T66b;
// LINE 1352:
_T624:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroySoundSettingsWindow;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x28], eax;
// LINE 1353:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T66b;
// LINE 1355:
_T66b:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1357:
	__asm        jmp    _Ta29;
_T67a:
	__asm        cmp    lWindowID, 0x7E1;
	__asm        jne    _T6cf;
// LINE 1358:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     _T6a1;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T6c0;
// LINE 1359:
_T6a1:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyCheckupWindow;
// LINE 1360:
_T6c0:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1362:
	__asm        jmp    _Ta29;
_T6cf:
	__asm        cmp    lWindowID, 0x2711;
	__asm        jne    _T6f9;

	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T6f9;
// LINE 1363:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyControlDisplayWindow;
// LINE 1365:
	__asm        jmp    _Ta29;
_T6f9:
	__asm        cmp    lWindowID, 0x835;
	__asm        jne    _T7c5;
// LINE 1366:
	__asm        cmp    lMessage, 1;
	__asm        jne    _T7c0;
// LINE 1367:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T740;
// LINE 1368:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   GameModeHangarData::Sleep;
// LINE 1369:
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1371:
	__asm        jmp    _T7c0;
_T740:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T770;
// LINE 1372:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   GameModeHangarData::Sleep;
// LINE 1373:
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1375:
	__asm        jmp    _T7c0;
_T770:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T7a0;
// LINE 1376:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   GameModeHangarData::Sleep;
// LINE 1377:
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1379:
	__asm        jmp    _T7c0;
_T7a0:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 0x63;
	__asm        jne    _T7c0;
// LINE 1380:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1384:
_T7c0:
	__asm        jmp    _Ta29;
_T7c5:
	__asm        cmp    lWindowID, 0x836;
	__asm        jne    _T7f5;
// LINE 1385:
	__asm        cmp    lMessage, 3;
	__asm        jne    _T7f0;
// LINE 1386:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1388:
_T7f0:
	__asm        jmp    _Ta29;
_T7f5:
	__asm        cmp    lWindowID, 0x838;
	__asm        jne    _T825;
// LINE 1389:
	__asm        cmp    lMessage, 1;
	__asm        jne    _T820;
// LINE 1390:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1392:
_T820:
	__asm        jmp    _Ta29;
_T825:
	__asm        cmp    lWindowID, 0x7DB;
	__asm        jne    _T859;
// LINE 1395:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1396:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1398:
	__asm        jmp    _Ta29;
_T859:
	__asm        cmp    lWindowID, 0x7DC;
	__asm        jne    _T8a4;
// LINE 1401:
	__asm        cmp    lMessage, 2;
	__asm        jne    _T87b;
// LINE 1402:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DoSaveGameAs;
// LINE 1403:
_T87b:
	__asm        mov    eax, nCurrentGameMode;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1404:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1406:
	__asm        jmp    _Ta29;
_T8a4:
	__asm        cmp    lWindowID, 0x7DD;
	__asm        jne    _Ta29;
// LINE 1407:
	this-><CGameApp+0x04:4> = 0x0;
// LINE 1408:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 1409:
	__asm        cmp    lMessage, 2;
	__asm        jne    _T9b1;
// LINE 1410:
	__asm        call   GetUserHasSavedCurrentCity;
	__asm        test   eax, eax;
	__asm        jne    _T94c;
// LINE 1411:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DoSaveGameAs;
	__asm        mov    nResult, eax;
// LINE 1412:
	__asm        cmp    nResult, 0;
	__asm        je     _T91f;

	__asm        cmp    nResult, 9;
	__asm        je     _T91f;
// LINE 1413:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1414:
	this-><CGameApp+0x14:4> = 0x0;
// LINE 1415:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta30;
// LINE 1417:
_T91f:
	__asm        cmp    nResult, 0;
	__asm        jne    _T947;
// LINE 1418:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1419:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1422:
_T947:
	__asm        jmp    _T9b1;
// LINE 1423:
_T94c:
	__asm        push   0x5C2918;
	__asm        push   0x5C33E8;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::SaveUserOrCareerGame;
	__asm        mov    nResult, eax;
// LINE 1424:
	__asm        cmp    nResult, 0;
	__asm        je     _T993;
// LINE 1425:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1426:
	this-><CGameApp+0x14:4> = 0x0;
// LINE 1427:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta30;
// LINE 1429:
	__asm        jmp    _T9b1;
// LINE 1430:
_T993:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1431:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta30;
// LINE 1441:
_T9b1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T9e3;
// LINE 1442:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1443:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1445:
	__asm        jmp    _Ta29;
_T9e3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _Ta29;
// LINE 1446:
	this-><CGameApp+0x14:4> = 0x0;
// LINE 1447:
	this-><CGameApp+0x90:4> = 0x0;
// LINE 1448:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1449:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1452:
_Ta29:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta30;
// LINE 1453:
_Ta30:
}

// FUNCTION: COPTER_D 0x00465edb
int  CGameApp::DoMainMenuMessage(class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	char szSplitPathFilename[256];
	char szSplitPathDirectory[256];
	int32_t nCurrentGameMode;
	char * chPrefData;
	char szSplitPathFullDirectory[256];
	char szSplitPathDrive[3];
	char szSplitPathExtension[256];

// LINE 1469:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x630], eax;
	__asm        mov    eax, [ebp-0x630];
	__asm        mov    [ebp-0x62C], eax;
	__asm        jmp    near ptr 0x00465F10;

	__asm        jmp    near ptr 0x00465F15;

	__asm        mov    eax, [ebp-0x62C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x62C], eax;
	__asm        jmp    near ptr 0x00465F29;

	__asm        jmp    near ptr 0x00465F2E;

	__asm        jmp    near ptr 0x00465F33;

	__asm        mov    eax, [ebp-0x62C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1471:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    _Te2;
// LINE 1475:
// Block start:
	char szFilePath[260];
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        push   0x5992F0;
	__asm        push   0;
	__asm        push   4;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1476:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        call   SetUpNewUserCity;
	__asm        add    esp, 4;
// LINE 1477:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1478:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1479:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1480:
	__asm        mov    eax, 1;
	__asm        jmp    _T418;
// LINE 1482:
	__asm        xor    eax, eax;
	__asm        jmp    _T418;
// LINE 1484:
// Block end:
	__asm        jmp    _T40e;
_Te2:
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T40e;
// LINE 1486:
// Block start:
	long lResult;
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lResult, eax;
// LINE 1488:
	__asm        cmp    lResult, 0;
	__asm        jne    _T14d;
// LINE 1490:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1491:
	this-><CGameApp+0x9c:4> = 0x1;
// LINE 1492:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1493:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1495:
	__asm        jmp    _T404;
// LINE 1497:
_T14d:
	__asm        cmp    lResult, 2;
	__asm        je     _T174;

	__asm        cmp    lResult, 3;
	__asm        je     _T174;

	__asm        cmp    lResult, 1;
	__asm        jne    _T3bc;
// LINE 1504:
// Block start:
	unsigned long nResult;
	int32_t nFullFilterID;
	long lFileType;
	int32_t nFullTitleID;
	char szFileLoadPath[260];
_T174:
	__asm        mov    al, ds:[0x599300];
	__asm        mov    szFileLoadPath[0], al;
	__asm        lea    edi, szFileLoadPath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 1507:
	__asm        cmp    lResult, 2;
	__asm        jne    _T1b7;
// LINE 1508:
	nFullTitleID = 0x28;
// LINE 1509:
	nFullFilterID = 0x29;
// LINE 1511:
	__asm        jmp    _T1f1;
_T1b7:
	__asm        cmp    lResult, 3;
	__asm        jne    _T1dd;
// LINE 1512:
	nFullTitleID = 0x2a;
// LINE 1513:
	nFullFilterID = 0x2b;
// LINE 1515:
	__asm        jmp    _T1f1;
// LINE 1516:
_T1dd:
	nFullTitleID = 0x2c;
// LINE 1517:
	nFullFilterID = 0x2d;
// LINE 1521:
_T1f1:
	__asm        push   0x6EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 1522:
	__asm        push   0;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullTitleID, eax;
// LINE 1523:
	__asm        push   0;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullFilterID, eax;
// LINE 1524:
	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        call   GetLoadFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    nResult, eax;
// LINE 1525:
	__asm        cmp    nResult, 0;
	__asm        je     _T278;
// LINE 1526:
	__asm        xor    eax, eax;
	__asm        jmp    _T418;
// LINE 1530:
_T278:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 1531:
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 1532:
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 1533:
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        push   0x6EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 1538:
	__asm        lea    eax, lFileType;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::GetLoadFileType;
	__asm        mov    nResult, eax;
// LINE 1539:
	__asm        cmp    nResult, 0;
	__asm        je     _T341;
// LINE 1540:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1541:
	__asm        xor    eax, eax;
	__asm        jmp    _T418;
// LINE 1545:
_T341:
	__asm        mov    eax, lFileType;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SetUpLoadGame;
	__asm        mov    nResult, eax;
// LINE 1546:
	__asm        cmp    nResult, 0;
	__asm        je     _T386;
// LINE 1547:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1548:
	__asm        xor    eax, eax;
	__asm        jmp    _T418;
// LINE 1551:
_T386:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1552:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1553:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1555:
// Block end:
	__asm        jmp    _T404;
_T3bc:
	__asm        cmp    lResult, 4;
	__asm        jne    _T404;
// LINE 1557:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1558:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1559:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1560:
	__asm        mov    eax, 1;
	__asm        jmp    _T418;
// LINE 1562:
_T404:
	__asm        mov    eax, 1;
	__asm        jmp    _T418;
// LINE 1564:
// Block end:
_T40e:
	__asm        mov    eax, 1;
	__asm        jmp    _T418;
// LINE 1565:
_T418:
}

// FUNCTION: COPTER_D 0x004662fa
int  CGameApp::DoPlayMenuMessage(class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	unsigned long nResult;
	int32_t nCurrentGameMode;

// LINE 1574:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046631D;

	__asm        jmp    near ptr 0x00466322;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00466330;

	__asm        jmp    near ptr 0x00466335;

	__asm        jmp    near ptr 0x0046633A;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1577:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    _T79;
// LINE 1578:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 1579:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1580:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1583:
	__asm        jmp    _T2a5;
_T79:
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    _T2a5;
// LINE 1585:
// Block start:
	long lResult;
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lResult, eax;
// LINE 1587:
	__asm        cmp    lResult, 0;
	__asm        jne    _Tb9;
// LINE 1588:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663A1;
// LINE 1589:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateCitySettingsWindow;
// LINE 1590:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1592:
_Tb9:
	__asm        cmp    lResult, 1;
	__asm        jne    _Te9;
// LINE 1593:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663CC;
// LINE 1594:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateRenderSettingsWindow;
// LINE 1595:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1597:
	__asm        jmp    _T2a5;
_Te9:
	__asm        cmp    lResult, 2;
	__asm        jne    _T119;
// LINE 1598:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663FC;
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateSoundSettingsWindow;
// LINE 1600:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1602:
	__asm        jmp    _T2a5;
_T119:
	__asm        cmp    lResult, 3;
	__asm        jne    _T149;
// LINE 1603:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x0046642C;
// LINE 1604:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateUserInputWindow;
// LINE 1605:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1607:
	__asm        jmp    _T2a5;
_T149:
	__asm        cmp    lResult, 4;
	__asm        jne    _T1e4;
// LINE 1608:
	__asm        call   GetUserHasSavedCurrentCity;
	__asm        test   eax, eax;
	__asm        jne    _T18d;
// LINE 1609:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DoSaveGameAs;
	__asm        mov    nResult, eax;
// LINE 1610:
	__asm        cmp    nResult, 0;
	__asm        je     _T188;
// LINE 1611:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1612:
	__asm        xor    eax, eax;
	__asm        jmp    _T2ac;
// LINE 1615:
_T188:
	__asm        jmp    _T1d5;
// LINE 1616:
_T18d:
	__asm        push   0x5C2918;
	__asm        push   0x5C33E8;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SaveUserOrCareerGame;
	__asm        mov    nResult, eax;
// LINE 1617:
	__asm        cmp    nResult, 0;
	__asm        je     _T1c4;
// LINE 1618:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1619:
	__asm        xor    eax, eax;
	__asm        jmp    _T2ac;
// LINE 1621:
	__asm        jmp    _T1d5;
// LINE 1622:
_T1c4:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1624:
_T1d5:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1626:
	__asm        jmp    _T2a5;
_T1e4:
	__asm        cmp    lResult, 5;
	__asm        jne    _T24f;
// LINE 1627:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DoSaveGameAs;
	__asm        mov    nResult, eax;
// LINE 1628:
	__asm        cmp    nResult, 0;
	__asm        je     _T225;

	__asm        cmp    nResult, 9;
	__asm        je     _T225;
// LINE 1629:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisplayFileOpenError;
// LINE 1630:
	__asm        xor    eax, eax;
	__asm        jmp    _T2ac;
// LINE 1632:
	__asm        jmp    _T240;
_T225:
	__asm        cmp    nResult, 9;
	__asm        je     _T240;
// LINE 1633:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1634:
_T240:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 1637:
	__asm        jmp    _T2a5;
_T24f:
	__asm        cmp    lResult, 6;
	__asm        jne    _T287;
// LINE 1638:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1639:
	this-><CGameApp+0x28:4> = 0x1;
// LINE 1640:
	__asm        push   0x20002;
	__asm        push   0x31;
	__asm        push   0x7DD;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
// LINE 1642:
	__asm        jmp    _T2a5;
_T287:
	__asm        cmp    lResult, 7;
	__asm        jne    _T2a5;
// LINE 1643:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1644:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 1647:
// Block end:
_T2a5:
	__asm        xor    eax, eax;
	__asm        jmp    _T2ac;
// LINE 1648:
_T2ac:
}

// FUNCTION: COPTER_D 0x004665ad
int  CGameApp::StartVideoForCitySelection(long lCurrentCitySelection) {
	char szFullCityVideoFileName[256];
	char szFullCityVideoFilePath[260];
	float fScaleFactor;

// LINE 1663:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1665:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, lCurrentCitySelection;
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   3;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 1667:
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1669:
	__asm        mov    dword ptr [ebp-0x214], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x210], 1;
	__asm        mov    dword ptr [ebp-0x31C], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x318];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    _Tae;

	None = 0x0;
_Tae:
	__asm        jmp    near ptr 0x00466660;

	__asm        push   0;
	__asm        lea    ecx, [ebp-0x31C];
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    _Td7;

	__asm        mov    dword ptr [ebp-0x20C], 1;
	__asm        jmp    _Te1;
_Td7:
	None = 0x0;
_Te1:
	__asm        mov    dword ptr [ebp-0x31C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x214], 0xFFFFFFFF;
	__asm        jle    _Tfd;

	__asm        jmp    _T102;
_Tfd:
	__asm        jmp    _T130;
_T102:
	__asm        jmp    _T114;

	__asm        cmp    dword ptr [ebp-0x328], 0;
	__asm        je     _T130;
_T114:
	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     _T130;

	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T130:
	__asm        jmp    near ptr 0x004666E2;

	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x324], eax;
	__asm        cmp    dword ptr [ebp-0x324], 0;
	__asm        je     _T155;
// LINE 1670:
	__asm        xor    eax, eax;
	__asm        jmp    _T2f9;
// LINE 1673:
_T155:
	__asm        push   0x27C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x320], eax;
	__asm        cmp    dword ptr [ebp-0x320], 0;
	__asm        je     _T191;

	__asm        mov    ecx, [ebp-0x320];
	__asm        call   SmackerBackBuffer::SmackerBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T1a1;
_T191:
	this-><CGameApp+0x84:4> = 0x0;
// LINE 1674:
_T1a1:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0x10];
// LINE 1675:
	this-><CGameApp+0x88:4> = 0x1;
// LINE 1678:
	__asm        jmp    near ptr 0x0046678E;

	__asm        jmp    near ptr 0x00466793;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x330], eax;
	__asm        fild   dword ptr [ebp-0x330];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x334], eax;
	__asm        fidiv  dword ptr [ebp-0x334];
	__asm        fstp   fScaleFactor;
// LINE 1679:
	this-><CGameApp+0x8c:4> = 0x0;
// LINE 1680:
	__asm        jmp    near ptr 0x004667E1;

	__asm        jmp    near ptr 0x004667E6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    [ebp-0x338], eax;
	__asm        fild   dword ptr [ebp-0x338];
	__asm        fmul   fScaleFactor;
	__asm        call   0x0056EBE8;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        and    ebx, 0xFFFFFFFE;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x90], ebx;
// LINE 1681:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x00466854;
// LINE 1682:
	__asm        jmp    near ptr 0x00466859;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    [ebp-0x33C], eax;
	__asm        fild   dword ptr [ebp-0x33C];
	__asm        fmul   fScaleFactor;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        add    ecx, eax;
	__asm        and    ecx, 0xFFFFFFFE;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x98], ecx;
// LINE 1684:
	__asm        mov    eax, 1;
	__asm        jmp    _T2f9;
// LINE 1685:
_T2f9:
}

// FUNCTION: COPTER_D 0x004668ad
void  CGameApp::ComposeCareerCityVideoFrame() {
	unsigned long nErrorCode;

// LINE 1703:
	__asm        jmp    near ptr 0x004668BE;

	__asm        jmp    near ptr 0x004668C3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nErrorCode, eax;
// LINE 1704:
	__asm        cmp    nErrorCode, 0;
	__asm        je     _Tb1;
// LINE 1705:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1706:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1708:
_Tb1:
	__asm        jmp    near ptr 0x00466963;
}

// FUNCTION: COPTER_D 0x00466968
int  CGameApp::StartVideoForMainMenu() {
	char szMainMenuVideoPath[260];

// LINE 1717:
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_MENU_VIDEO_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1719:
	__asm        mov    dword ptr [ebp-0x110], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x10C], 1;
	__asm        mov    dword ptr [ebp-0x218], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    _T75;

	None = 0x0;
_T75:
	__asm        jmp    near ptr 0x004669E2;

	__asm        push   0;
	__asm        lea    ecx, [ebp-0x218];
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    _T9e;

	__asm        mov    dword ptr [ebp-0x108], 1;
	__asm        jmp    _Ta8;
_T9e:
	None = 0x0;
_Ta8:
	__asm        mov    dword ptr [ebp-0x218], 0x590468;
	__asm        cmp    dword ptr [ebp-0x110], 0xFFFFFFFF;
	__asm        jle    _Tc4;

	__asm        jmp    _Tc9;
_Tc4:
	__asm        jmp    _Tf7;
_Tc9:
	__asm        jmp    _Tdb;

	__asm        cmp    dword ptr [ebp-0x224], 0;
	__asm        je     _Tf7;
_Tdb:
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _Tf7;

	__asm        mov    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_Tf7:
	__asm        jmp    near ptr 0x00466A64;

	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x220], eax;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     _T129;
// LINE 1720:
	this-><CGameApp+0x6c:4> = 0x0;
// LINE 1721:
	__asm        xor    eax, eax;
	__asm        jmp    _T1c5;
// LINE 1725:
_T129:
	__asm        push   0x27C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x21C], eax;
	__asm        cmp    dword ptr [ebp-0x21C], 0;
	__asm        je     _T162;

	__asm        mov    ecx, [ebp-0x21C];
	__asm        call   SmackerBackBuffer::SmackerBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    _T16f;
_T162:
	this-><CGameApp+0x6c:4> = 0x0;
// LINE 1726:
_T16f:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x24];
// LINE 1727:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x10];
// LINE 1728:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    dword ptr [eax+8], 1;
// LINE 1730:
	__asm        mov    eax, 1;
	__asm        jmp    _T1c5;
// LINE 1731:
_T1c5:
}

// FUNCTION: COPTER_D 0x00466b32
void  CGameApp::EndVideoForMainMenu() {
// LINE 1738:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T58;
// LINE 1739:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   SmackerBuffer::Reset;
// LINE 1740:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T4e;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T4e;
// LINE 1741:
_T4e:
	this-><CGameApp+0x6c:4> = 0x0;
// LINE 1743:
_T58:
	__asm        jmp    near ptr 0x00466B8F;
}

// FUNCTION: COPTER_D 0x00466b94
void  CGameApp::ComposeMainMenuVideoFrame() {
	unsigned long nErrorCode;

// LINE 1752:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T7c;
// LINE 1756:
	__asm        jmp    near ptr 0x00466BB2;

	__asm        jmp    near ptr 0x00466BB7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x6C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    nErrorCode, eax;
// LINE 1757:
	__asm        cmp    nErrorCode, 0;
	__asm        je     _T7c;
// LINE 1758:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::EndVideoForMainMenu;
// LINE 1761:
_T7c:
	__asm        jmp    near ptr 0x00466C15;
}



// Contribution: 1:00065c20-00065ca9 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00466c20
// PFile::`scalar deleting destructor'



// Contribution: 1:00065cb0-00065ec5 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466cb0
// list<CopterGameMode>::get_node



// Contribution: 1:00065ed0-00065f29 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466ed0
// list<CopterGameMode>::erase



// Contribution: 1:00065f30-00065f68 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466f30
// construct



// Contribution: 2:00001464-00001467 Module: 44, 4 byte alignment, initialized_data, read, 


// Contribution: 2:00001468-0000146b Module: 44, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for PFile @ 0x00590468
//   00: PFile::`scalar deleting destructor' @ 0x00466c20
//   1 entries



// Contribution: 2:00006c00-00006c57 Module: 44, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00002284-00002300 Module: 44, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599284
char * SZ_SMACKER_INTRO_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599288
char * SZ_COPTER_MAIN_PREFERENCES_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059928c
char * SZ_MAIN_MENU_VIDEO_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599290
char * SZ_GRADUATION_NOTIFICATION_SOUND_FILE_NAME = { 0 /* todo */ };



// Contribution: 3:00002304-00002307 Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599304
struct list<CopterGameMode>::list_node *list<CopterGameMode>::last = { 0 /* todo */ };



// Contribution: 3:00002308-0000230b Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599308
struct list<CopterGameMode>::list_node *list<CopterGameMode>::next_avail = { 0 /* todo */ };



// Contribution: 3:0000230c-0000230f Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059930c
struct list<CopterGameMode>::list_node *list<CopterGameMode>::free_list = { 0 /* todo */ };



// Contribution: 3:00002310-00002313 Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599310
struct list<CopterGameMode>::list_node_buffer *list<CopterGameMode>::buffer_list = { 0 /* todo */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\common\Tweak.c
// GLOBAL: COPTER_D 0x00646ed0
int32_t g_uTWKMessageNum; // Contrib missing


// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Winwindo.cpp
// GLOBAL: COPTER_D 0x00646ed0
int32_t g_uTWKMessageNum; // Contrib missing

