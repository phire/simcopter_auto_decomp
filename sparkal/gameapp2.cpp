// Module: gameapp2.obj
// Source: C:\Copter\source\sparkal\gameapp2.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class MTime (forward reference);

// Type: int32_t;

// Type: class CGameApp (forward reference);

// Type: char *;

// Type: char[260];

// Type: struct SoundPreferences;
class SoundPreferences{
public:
	long lMasterVolume;
	long lDispatchVolume;
	long lSoundEffectsVolume;
	long lVehicleVolume;
};

// Type: struct SoundPreferences (forward reference);

// Type: long;

// Type: char[64];

// Type: class list<CopterGameMode>::iterator;
class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
{
protected:
	struct list<CopterGameMode>::list_node* node;
public:
	void list<CopterGameMode>::iterator();
protected:
	void list<CopterGameMode>::iterator(struct list<CopterGameMode>::list_node*);
public:
	int32_t operator==(const class list<CopterGameMode>::iterator&);
	class CopterGameMode& operator*();
	class list<CopterGameMode>::iterator list<CopterGameMode>::iterator(int32_t);
	class list<CopterGameMode>::iterator& list<CopterGameMode>::iterator();
	class list<CopterGameMode>::iterator list<CopterGameMode>::iterator(int32_t);
	class list<CopterGameMode>::iterator& list<CopterGameMode>::iterator();
};

// Type: char;

// Type: class DigitalSound (forward reference);
class DigitalSound : public Sound
{
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*)(long) soundCompletionFunction;
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	Ptr to: struct IDirectSoundBuffer[8] lpSound;
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long DigitalSound(struct IDirectSoundBuffer**);
public:
	virtual long DigitalSound();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: char[128];

// Type: class GraphicWindow (forward reference);

// Type: void * __ptr32;

// Type: unsigned long;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char[256];

// Type: char[3];

// Type: float;

// Type: class PFile (forward reference);
class PFile{
		enum __unnamed {
			FileNull = -1,
		};
		enum SeekTypes {
			N_SEEK_FROM_FILE_START = 0,
			N_SEEK_FROM_FILE_CURRENT = 1,
			N_SEEK_FROM_FILE_END = 2,
		};
		enum AccessTypes {
			ReadOnly = 0,
			ReadWrite = 2,
			WriteOnly = 1,
			Create = 768,
			CreateExcl = 1280,
			Append = 8,
			Binary = 32768,
			Compat = 0,
			DenyNone = 64,
			DenyRead = 48,
			DenyWrite = 32,
			DenyRdWr = 16,
			NoInherit = 128,
		};
		enum PermissionTypes {
			PermRead = 256,
			PermWrite = 128,
			PermRdWr = 384,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void PFile(long);
	long PFile();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char[260] szFilePath;
	int32_t Handle;
private:
	int32_t ShouldClose;
};

// Type: uint32_t;

// Type: class list<CopterGameMode> (forward reference);
class list<CopterGameMode>{
	using void_pointer = void * __ptr32;
	class list<CopterGameMode>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class CopterGameMode data;
	};
protected:
	static class allocator<list<CopterGameMode>::list_node> list_node_allocator;
	static class allocator<CopterGameMode> value_allocator;
	using value_type = class CopterGameMode;
	using value_allocator_type = class allocator<CopterGameMode>;
	using pointer = class CopterGameMode*;
	using reference = class CopterGameMode&;
	using const_reference = const class CopterGameMode&;
	using list_node_allocator_type = class allocator<list<CopterGameMode>::list_node>;
	using link_type = struct list<CopterGameMode>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<CopterGameMode>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<CopterGameMode>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<CopterGameMode>::list_node_buffer>;
	using buffer_pointer = struct list<CopterGameMode>::list_node_buffer*;
protected:
	static class allocator<list<CopterGameMode>::list_node_buffer> buffer_allocator;
	static struct list<CopterGameMode>::list_node_buffer* buffer_list;
	static struct list<CopterGameMode>::list_node* free_list;
	static struct list<CopterGameMode>::list_node* next_avail;
	static struct list<CopterGameMode>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<CopterGameMode>::list_node* get_node();
	void put_node(struct list<CopterGameMode>::list_node*);
	struct list<CopterGameMode>::list_node* node;
	uint32_t length;
	class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
	{
	protected:
		struct list<CopterGameMode>::list_node* node;
	public:
		void list<CopterGameMode>::iterator();
	protected:
		void list<CopterGameMode>::iterator(struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const class list<CopterGameMode>::iterator&);
		class CopterGameMode& operator*();
		class list<CopterGameMode>::iterator list<CopterGameMode>::iterator(int32_t);
		class list<CopterGameMode>::iterator& list<CopterGameMode>::iterator();
		class list<CopterGameMode>::iterator list<CopterGameMode>::iterator(int32_t);
		class list<CopterGameMode>::iterator& list<CopterGameMode>::iterator();
	};
	class list<CopterGameMode>::const_iterator : public bidirectional_iterator<CopterGameMode,int>
	{
	protected:
		struct list<CopterGameMode>::list_node* node;
	public:
		void list<CopterGameMode>::const_iterator(const class list<CopterGameMode>::iterator&);
		void list<CopterGameMode>::const_iterator();
	protected:
		void list<CopterGameMode>::const_iterator(struct list<CopterGameMode>::list_node*);
	public:
		int32_t operator==(const class list<CopterGameMode>::const_iterator&);
		const class CopterGameMode& operator*();
		class list<CopterGameMode>::const_iterator list<CopterGameMode>::const_iterator(int32_t);
		class list<CopterGameMode>::const_iterator& list<CopterGameMode>::const_iterator();
		class list<CopterGameMode>::const_iterator list<CopterGameMode>::const_iterator(int32_t);
		class list<CopterGameMode>::const_iterator& list<CopterGameMode>::const_iterator();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int>;
public:
	void list<CopterGameMode>(const class list<CopterGameMode>&);
	void list<CopterGameMode>(const class CopterGameMode*, const class CopterGameMode*);
	void list<CopterGameMode>(uint32_t, const class CopterGameMode&);
	void list<CopterGameMode>();
	class list<CopterGameMode>::const_iterator list<CopterGameMode>();
	class list<CopterGameMode>::iterator list<CopterGameMode>();
	class list<CopterGameMode>::const_iterator list<CopterGameMode>();
	class list<CopterGameMode>::iterator list<CopterGameMode>();
	class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> list<CopterGameMode>();
	class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> list<CopterGameMode>();
	class reverse_bidirectional_iterator<list<CopterGameMode>::const_iterator,CopterGameMode,CopterGameMode const &,int> list<CopterGameMode>();
	class reverse_bidirectional_iterator<list<CopterGameMode>::iterator,CopterGameMode,CopterGameMode &,int> list<CopterGameMode>();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class CopterGameMode& list<CopterGameMode>();
	class CopterGameMode& list<CopterGameMode>();
	const class CopterGameMode& list<CopterGameMode>();
	class CopterGameMode& list<CopterGameMode>();
	void swap(class list<CopterGameMode>&);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, uint32_t, const class CopterGameMode&);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, class list<CopterGameMode>::const_iterator, class list<CopterGameMode>::const_iterator);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, const class CopterGameMode*, const class CopterGameMode*);
	class list<CopterGameMode>::iterator list<CopterGameMode>(class list<CopterGameMode>::iterator, const class CopterGameMode&);
	void push_front(const class CopterGameMode&);
	void push_back(const class CopterGameMode&);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator);
	void pop_front();
	void pop_back();
	void ~list<CopterGameMode>();
	class list<CopterGameMode>& operator=(const class list<CopterGameMode>&);
protected:
	void transfer(class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
public:
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, class list<CopterGameMode>&, class list<CopterGameMode>::iterator, class list<CopterGameMode>::iterator);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, class list<CopterGameMode>&, class list<CopterGameMode>::iterator);
	void list<CopterGameMode>(class list<CopterGameMode>::iterator, class list<CopterGameMode>&);
	void remove(const class CopterGameMode&);
	void unique();
	void merge(class list<CopterGameMode>&);
	void reverse();
	void sort();
};

// Type: struct list<CopterGameMode>::list_node (forward reference);

// Type: class CopterGameMode (forward reference);
class CopterGameMode{
public:
	int32_t nModeID;
	void CopterGameMode(const class CopterGameMode&);
	void CopterGameMode(int32_t);
	void CopterGameMode();
	class CopterGameMode& operator=(const class CopterGameMode&);
};



// Contribution: 1:00060180-00065c19 Module: 44, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00461180
void S3SwitchToProperSkyType() {
// LINE 90:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 91:
	__asm        cmp    dword ptr ds:[0x5B4794], 0;
	__asm        je     near ptr 0x004611B5;
	__asm        mov    eax, ds:[0x599BBC];
	__asm        cmp    dword ptr [eax+0xDC], 0;
	__asm        je     near ptr 0x004611B5;
// LINE 92:
	__asm        mov    eax, ds:[0x599BBC];
	__asm        mov    ecx, [eax+0xDC];
	__asm        call   0x0049550C;
// LINE 93:
	__asm        jmp    near ptr 0x004611BA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004611bf
int32_t IsActualTimeDaytime() {
	class MTime tempTime;

// LINE 98:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 99:
	__asm        lea    ecx, tempTime.<MTime+0x00:None>;
	__asm        call   0x0043CA79;
// LINE 101:
	__asm        lea    ecx, tempTime.<MTime+0x00:None>;
	__asm        call   0x0043CCF2;
	__asm        cmp    eax, 6;
	__asm        jb     near ptr 0x004611F2;
	__asm        lea    ecx, tempTime.<MTime+0x00:None>;
	__asm        call   0x0043CCF2;
	__asm        cmp    eax, 0x12;
	__asm        jbe    near ptr 0x004611F9;
// LINE 102:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00461203;
// LINE 103:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00461203;
// LINE 104:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00461208
void  CGameApp::GetPreferences() {
	char * chPrefData;
	char[260] szPath;

// LINE 111:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x110;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 115:
	__asm        push   0x30;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x0046125D;
	__asm        push   0;
	__asm        push   0x10000;
	__asm        push   0x46455250;
	__asm        push   0x52545043;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   0x0047D250;
	__asm        mov    ds:[0x599BC4], eax;
	__asm        jmp    near ptr 0x00461267;
	__asm        mov    dword ptr ds:[0x599BC4], 0;
// LINE 116:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     near ptr 0x004613C1;
// LINE 117:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599288];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   9;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 118:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   0x0047C147;
// LINE 119:
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 120:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x004612FE;
// LINE 122:
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x20;
	__asm        jne    near ptr 0x004612FE;
// LINE 123:
	__asm        mov    edi, this;
	__asm        add    edi, 0x4308;
	__asm        mov    esi, chPrefData;
	__asm        mov    ecx, 8;
	__asm        rep movsd;
// LINE 125:
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 126:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x0046136C;
// LINE 127:
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    near ptr 0x0046136C;
// LINE 128:
	__asm        mov    eax, chPrefData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4328;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 130:
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 131:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x004613C1;
// LINE 132:
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x24;
	__asm        jne    near ptr 0x004613C1;
// LINE 133:
	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        call   0x004F9A8B;
	__asm        add    esp, 4;
// LINE 136:
	__asm        jmp    near ptr 0x004613C6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004613cb
void  CGameApp::GetSoundPreferences() {
	char * chPrefData;
	struct SoundPreferences tempSoundPreferences;

// LINE 143:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 147:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 148:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x00461447;
// LINE 150:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    near ptr 0x00461447;
// LINE 151:
	__asm        mov    eax, chPrefData;
	__asm        lea    ecx, tempSoundPreferences.lMasterVolume;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 152:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 153:
	__asm        jmp    near ptr 0x0046148F;
// LINE 161:
	__asm        mov    tempSoundPreferences.lVehicleVolume, 0x2710;
	__asm        mov    eax, tempSoundPreferences.lVehicleVolume;
	__asm        mov    tempSoundPreferences.lSoundEffectsVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lSoundEffectsVolume;
	__asm        mov    tempSoundPreferences.lDispatchVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lDispatchVolume;
	__asm        mov    tempSoundPreferences.lMasterVolume, eax;
// LINE 163:
	__asm        push   0x10;
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 164:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 165:
	__asm        jmp    near ptr 0x0046148F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00461494
void  CGameApp::SetSoundPreferences(struct SoundPreferences& newSoundPreferences) {
// LINE 172:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 173:
	__asm        mov    eax, newSoundPreferences;
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5C37F0], eax;
// LINE 175:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     near ptr 0x004614D2;
// LINE 177:
	__asm        push   0x10;
	__asm        mov    eax, newSoundPreferences;
	__asm        push   eax;
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 179:
	__asm        jmp    near ptr 0x004614D7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004614de
void  CGameApp::SavePreferences() {
	long lCurrentJoystickCount;
	int32_t i;
	char[64] szJoystickName;

// LINE 187:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 188:
	__asm        jmp    near ptr 0x004614EF;
	__asm        mov    eax, ds:[0x604C78];
	__asm        mov    lCurrentJoystickCount, eax;
// LINE 192:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     near ptr 0x0046161F;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4318], eax;
// LINE 197:
	__asm        push   0x20;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4308;
	__asm        push   eax;
	__asm        push   0x2FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 198:
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4328;
	__asm        push   eax;
	__asm        push   0x3FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 199:
	__asm        push   0x24;
	__asm        call   0x004F9A76;
	__asm        push   eax;
	__asm        push   0x5FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 200:
	__asm        push   4;
	__asm        lea    eax, lCurrentJoystickCount;
	__asm        push   eax;
	__asm        push   0x4EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 201:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046159A;
	__asm        inc    i;
	__asm        mov    eax, lCurrentJoystickCount;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x004615EC;
// LINE 202:
	__asm        mov    szJoystickName[0], 0;
// LINE 203:
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A696;
// LINE 204:
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, 0xEEEEEE;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 205:
	__asm        jmp    near ptr 0x00461597;
// LINE 206:
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00461615;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00461615;
// LINE 207:
	__asm        mov    dword ptr ds:[0x599BC4], 0;
// LINE 209:
	__asm        jmp    near ptr 0x00461624;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00461629
unsigned long  CGameApp::TickGame() {
	static const long lFramesSinceLastSecond = { /* <data@0x00599294> */ };
	long lElapsedMilliSeconds;

// LINE 218:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 222:
	__asm        inc    dword ptr ds:[0x599294];
// LINE 223:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x416C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046164C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4168], 0;
	__asm        je     near ptr 0x004616DB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        jne    near ptr 0x0046167F;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004616C6;
	__asm        jmp    near ptr 0x004616C6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    near ptr 0x004616AF;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004616C6;
	__asm        jmp    near ptr 0x004616C6;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004616C6;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x4168];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    near ptr 0x00461722;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4170], 0;
	__asm        je     near ptr 0x00461722;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4170];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedMilliSeconds, eax;
	__asm        jmp    near ptr 0x00461733;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedMilliSeconds, eax;
	__asm        jmp    near ptr 0x00461733;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    lElapsedMilliSeconds, eax;
// LINE 224:
	__asm        cmp    lElapsedMilliSeconds, 0x3E8;
	__asm        jl     near ptr 0x0046182C;
// LINE 226:
	__asm        mov    eax, ds:[0x599294];
	__asm        mov    [ebp-0x34], eax;
	__asm        fild   dword ptr [ebp-0x34];
	__asm        fmul   dword ptr ds:[0x590464];
	__asm        mov    eax, lElapsedMilliSeconds;
	__asm        mov    [ebp-0x38], eax;
	__asm        fidiv  dword ptr [ebp-0x38];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x4344];
// LINE 227:
	__asm        mov    dword ptr ds:[0x599294], 0;
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x416C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4168], 0;
	__asm        jmp    near ptr 0x0046178C;
	__asm        jmp    near ptr 0x00461791;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4168], 0;
	__asm        je     near ptr 0x004617A6;
	__asm        jmp    near ptr 0x00461827;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 1;
	__asm        jne    near ptr 0x004617CF;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    near ptr 0x00461822;
	__asm        jmp    near ptr 0x00461822;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4164], 0;
	__asm        jne    near ptr 0x00461805;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    near ptr 0x00461822;
	__asm        jmp    near ptr 0x00461822;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4168], eax;
	__asm        jmp    near ptr 0x00461822;
	__asm        jmp    near ptr 0x00461827;
	__asm        jmp    near ptr 0x0046182C;
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C4], 0;
	__asm        je     near ptr 0x00461877;
// LINE 233:
	__asm        mov    eax, lElapsedMilliSeconds;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
// LINE 235:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4340], 0;
	__asm        je     near ptr 0x00461877;
// LINE 240:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+8];
// LINE 251:
	__asm        cmp    dword ptr ds:[0x599DA4], 0;
	__asm        je     near ptr 0x00461897;
// LINE 253:
	__asm        mov    eax, ds:[0x599DA4];
	__asm        push   eax;
	__asm        push   0x5992D8;
	__asm        call   0x00424B14;
	__asm        add    esp, 8;
// LINE 256:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046189E;
// LINE 257:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004618a3
void  CGameApp::ComposeFrame() {
	int32_t nCurrentMode;

// LINE 269:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x461EA1;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 4;
	__asm        sub    esp, 0x23C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    [ebp-0x10], esp;
	__asm        mov    this, ecx;
// LINE 270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x004618F3;
	__asm        jmp    near ptr 0x004618F8;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x0046190C;
	__asm        jmp    near ptr 0x00461911;
	__asm        jmp    near ptr 0x00461916;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMode, eax;
// LINE 272:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x24C], eax;
	__asm        jmp    near ptr 0x00461DD9;
// LINE 277:
// Block start:
	char[260] szPath;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599284];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 278:
	__asm        mov    dword ptr [ebp-0x124], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x120], 1;
	__asm        mov    dword ptr [ebp-0x22C], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x00461993;
	__asm        mov    byte ptr [ebp-0x228], 0;
	__asm        jmp    near ptr 0x00461998;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x22C];
	__asm        call   0x004A06E6;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004619BC;
	__asm        mov    dword ptr [ebp-0x11C], 1;
	__asm        jmp    near ptr 0x004619C6;
	__asm        mov    dword ptr [ebp-0x11C], 0;
	__asm        mov    dword ptr [ebp-0x22C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x124], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004619E2;
	__asm        jmp    near ptr 0x004619E7;
	__asm        jmp    near ptr 0x00461A15;
	__asm        jmp    near ptr 0x004619F9;
	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     near ptr 0x00461A15;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     near ptr 0x00461A15;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00461A1A;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x234], eax;
	__asm        cmp    dword ptr [ebp-0x234], 0;
	__asm        je     near ptr 0x00461A48;
// LINE 279:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C0], 0;
// LINE 280:
	__asm        jmp    near ptr 0x00461B1F;
// LINE 281:
	__asm        push   0x140;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x230], eax;
	__asm        cmp    dword ptr [ebp-0x230], 0;
	__asm        je     near ptr 0x00461A95;
	__asm        push   0x116;
	__asm        push   0x280;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x230];
	__asm        call   0x00497CCF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x42C0], eax;
	__asm        jmp    near ptr 0x00461AA5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C0], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42C0];
	__asm        mov    [ebp-0x238], eax;
// LINE 282:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x28], 0x64;
	__asm        jmp    near ptr 0x00461AD6;
// LINE 283:
	__asm        jmp    near ptr 0x00461ADB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   0x0049805B;
// LINE 284:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42C0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   dword ptr [edx+0x10];
// LINE 289:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 290:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 297:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     near ptr 0x00461B7D;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42C0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42C0];
	__asm        call   dword ptr [edx+0x18];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00461BA3;
// LINE 298:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 299:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 302:
	__asm        jmp    near ptr 0x00461E25;
// LINE 305:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 1;
	__asm        jne    near ptr 0x00461BCB;
// LINE 306:
	__asm        mov    ecx, this;
	__asm        call   0x004668AD;
// LINE 307:
	__asm        jmp    near ptr 0x00461BE0;
// LINE 308:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 309:
	__asm        jmp    near ptr 0x00461E25;
// LINE 312:
	__asm        mov    ecx, this;
	__asm        call   0x00466B94;
// LINE 318:
	__asm        push   0x1E;
	__asm        call   0x0043D91F;
	__asm        add    esp, 4;
// LINE 320:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 322:
	__asm        push   0x1E;
	__asm        call   0x0043D91F;
	__asm        add    esp, 4;
// LINE 324:
	__asm        jmp    near ptr 0x00461E25;
// LINE 327:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x00461D5F;
// LINE 331:
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x64];
// LINE 341:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    near ptr 0x00461D53;
// LINE 345:
_L64109:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 2;
// LINE 346:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 1;
// LINE 349:
	__asm        jmp    near ptr 0x00461C85;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00461CB8;
// LINE 350:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xD8];
	__asm        call   dword ptr [edx+4];
// LINE 351:
	__asm        jmp    near ptr 0x00461CBD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00461CE7;
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+4];
// LINE 353:
	__asm        jmp    near ptr 0x00461CEC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00461D1F;
// LINE 354:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xDC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xDC];
	__asm        call   dword ptr [edx+4];
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x68];
// LINE 360:
	__asm        push   0x20002;
	__asm        push   0x20;
	__asm        push   0x7DC;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 361:
	__asm        mov    eax, 0x461D53;
	__asm        ret;
// LINE 363:
_L56471:
_L56471:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
// LINE 364:
	__asm        jmp    near ptr 0x00461DA1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x00461D8C;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 367:
	__asm        jmp    near ptr 0x00461DA1;
// LINE 368:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x24];
// LINE 370:
	__asm        jmp    near ptr 0x00461E25;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x36B8], 1;
// LINE 376:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x78];
// LINE 378:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3874];
// LINE 382:
	__asm        jmp    near ptr 0x00461E25;
// LINE 383:
// Block end:
	__asm        jmp    near ptr 0x00461E25;
	__asm        dec    dword ptr [ebp-0x24C];
	__asm        cmp    dword ptr [ebp-0x24C], 0xA;
	__asm        ja     near ptr 0x00461E25;
	__asm        mov    eax, [ebp-0x24C];
	__asm        jmp    dword ptr [eax*4+0x461DF9];
	__asm        cmpsb;
	__asm        sbb    eax, 0x19300046;
	__asm        inc    esi;
	__asm        add    [ebp+0x1B], al;
	__asm        inc    esi;
	__asm        add    ch, ah;
	__asm        sbb    eax, [esi];
	__asm        test   al, 0x1B;
	__asm        inc    esi;
	__asm        add    [esi], bl;
	__asm        sbb    al, 0x46;
	__asm        add    al, dh;
	__asm        sbb    eax, [esi];
	__asm        (bad);
	__asm        (bad);
	__asm        and    eax, 0xF000461E;
	__asm        sbb    eax, [esi];
// LINE 385:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C8], 0;
	__asm        je     near ptr 0x00461E43;
// LINE 386:
	__asm        mov    ecx, this;
	__asm        call   0x004960C5;
// LINE 389:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        je     near ptr 0x00461E9C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     near ptr 0x00461E9C;
// LINE 390:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0xA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x42BC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x42BC];
	__asm        call   dword ptr [edx+0xC];
// LINE 391:
	__asm        jmp    near ptr 0x00461EAB;
_L64110:
	__asm        mov    eax, 0x595C00;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00461eb9
void  CGameApp::ComposePlayFrame() {
	static const long lThisLoopTickCount = { /* <data@0x0059929c> */ };
	long lBuildingID;
	static const long lLastLoopTickCount = { /* <data@0x00599298> */ };
	static const long lFrameCount = { /* <data@0x005992a0> */ };

// LINE 400:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 406:
	__asm        inc    dword ptr ds:[0x5992A0];
// LINE 408:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00462400;
// LINE 409:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x110;
	__asm        call   0x0048B9A9;
// LINE 410:
	__asm        call   dword ptr ds:[0x6C3614];
	__asm        mov    ds:[0x59929C], eax;
// LINE 411:
	__asm        mov    eax, ds:[0x59929C];
	__asm        sub    eax, ds:[0x599298];
	__asm        mov    ds:[0x5B4760], eax;
// LINE 412:
	__asm        shl    dword ptr ds:[0x5B4760], 0x10;
// LINE 413:
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, ds:[0x5B4760];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ds:[0x5B4760], eax;
// LINE 414:
	__asm        cmp    dword ptr ds:[0x5B4760], 0x64;
	__asm        jge    near ptr 0x00461F34;
// LINE 415:
	__asm        mov    dword ptr ds:[0x5B4760], 0x64;
// LINE 416:
	__asm        cmp    dword ptr ds:[0x5B4760], 0x8000;
	__asm        jle    near ptr 0x00461F4E;
// LINE 417:
	__asm        mov    dword ptr ds:[0x5B4760], 0x8000;
// LINE 418:
	__asm        call   0x004EB9AA;
// LINE 419:
	__asm        mov    eax, ds:[0x59929C];
	__asm        mov    ds:[0x599298], eax;
// LINE 420:
	__asm        mov    eax, ds:[0x5992A0];
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    near ptr 0x004623FB;
// LINE 421:
	__asm        mov    eax, ds:[0x5992A0];
	__asm        and    al, 0x3F;
	__asm        cmp    al, 0x3F;
	__asm        jne    near ptr 0x004622AF;
// LINE 423:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 2;
	__asm        jne    near ptr 0x00461F9D;
	__asm        call   0x00429015;
	__asm        cmp    eax, 0x3E8;
	__asm        jl     near ptr 0x00461F9D;
	__asm        jmp    near ptr 0x00461FA2;
	__asm        jmp    near ptr 0x00462084;
	__asm        jmp    near ptr 0x00461FB1;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00462084;
	__asm        cmp    dword ptr ds:[0x5C33D0], 0;
	__asm        jne    near ptr 0x00462084;
// LINE 425:
	__asm        mov    dword ptr ds:[0x5C33D0], 1;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x00461FE1;
	__asm        jmp    near ptr 0x00461FE6;
	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     near ptr 0x00461FF8;
	__asm        jmp    near ptr 0x00462067;
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    near ptr 0x0046201A;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00462062;
	__asm        jmp    near ptr 0x00462062;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x00462049;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00462062;
	__asm        jmp    near ptr 0x00462062;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00462062;
	__asm        jmp    near ptr 0x00462067;
	__asm        jmp    near ptr 0x0046206C;
	__asm        jmp    near ptr 0x00462071;
// LINE 426:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x94];
// LINE 429:
	__asm        jmp    near ptr 0x004622AA;
	__asm        cmp    dword ptr ds:[0x5C33D0], 1;
	__asm        jne    near ptr 0x00462197;
// LINE 430:
	__asm        mov    eax, ds:[0x5C33DC];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0046209E;
	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     near ptr 0x00462121;
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    near ptr 0x004620CB;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0046210F;
	__asm        jmp    near ptr 0x0046210F;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x004620F8;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0046210F;
	__asm        jmp    near ptr 0x0046210F;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0046210F;
	__asm        mov    eax, [ebp-0x40];
	__asm        sub    eax, ds:[0x5C33D8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    [ebp-0x30], eax;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x00462165;
	__asm        cmp    dword ptr ds:[0x5C33E0], 0;
	__asm        je     near ptr 0x00462165;
	__asm        mov    eax, ds:[0x5C33E0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0x493E0;
	__asm        jbe    near ptr 0x00462192;
	__asm        jmp    near ptr 0x00462184;
	__asm        cmp    dword ptr [ebp-0x30], 0x493E0;
	__asm        jbe    near ptr 0x00462192;
	__asm        jmp    near ptr 0x00462184;
	__asm        cmp    dword ptr [ebp-0x44], 0x493E0;
	__asm        jbe    near ptr 0x00462192;
// LINE 431:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x94];
// LINE 433:
	__asm        jmp    near ptr 0x004622AA;
// LINE 434:
	__asm        cmp    dword ptr ds:[0x5C33D0], 2;
	__asm        jne    near ptr 0x004622AA;
	__asm        mov    eax, ds:[0x5C33DC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004621B1;
	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     near ptr 0x00462234;
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    near ptr 0x004621DE;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00462222;
	__asm        jmp    near ptr 0x00462222;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x0046220B;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00462222;
	__asm        jmp    near ptr 0x00462222;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00462222;
	__asm        mov    eax, [ebp-0x5C];
	__asm        sub    eax, ds:[0x5C33D8];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        add    [ebp-0x4C], eax;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x00462278;
	__asm        cmp    dword ptr ds:[0x5C33E0], 0;
	__asm        je     near ptr 0x00462278;
	__asm        mov    eax, ds:[0x5C33E0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0x2710;
	__asm        jbe    near ptr 0x004622AA;
	__asm        jmp    near ptr 0x00462297;
	__asm        cmp    dword ptr [ebp-0x4C], 0x2710;
	__asm        jbe    near ptr 0x004622AA;
	__asm        jmp    near ptr 0x00462297;
	__asm        cmp    dword ptr [ebp-0x60], 0x2710;
	__asm        jbe    near ptr 0x004622AA;
// LINE 436:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x8C];
// LINE 437:
	__asm        jmp    near ptr 0x004624D9;
// LINE 440:
	__asm        jmp    near ptr 0x004623FB;
	__asm        cmp    dword ptr ds:[0x598EB8], 0xFFFFFFFF;
	__asm        je     near ptr 0x004622D3;
	__asm        mov    eax, ds:[0x598EB8];
	__asm        mov    lBuildingID, eax;
	__asm        cmp    lBuildingID, 0;
	__asm        je     near ptr 0x00462309;
	__asm        jmp    near ptr 0x004622E7;
	__asm        jmp    near ptr 0x00462309;
	__asm        jmp    near ptr 0x004622E7;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00462309;
// LINE 441:
	__asm        cmp    lBuildingID, 0xF6;
	__asm        jne    near ptr 0x00462304;
// LINE 442:
	__asm        push   0x2A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 444:
	__asm        jmp    near ptr 0x004623FB;
// LINE 445:
// Block start:
	long lEventValue;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BFED8;
	__asm        mov    lEventValue, eax;
// LINE 446:
	__asm        cmp    lEventValue, 1;
	__asm        jne    near ptr 0x0046233E;
// LINE 447:
	__asm        call   0x0045FFB9;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00462339;
// LINE 448:
	__asm        mov    ecx, this;
	__asm        call   0x00441CBE;
// LINE 450:
	__asm        jmp    near ptr 0x004623FB;
	__asm        cmp    lEventValue, 3;
	__asm        jne    near ptr 0x004623FB;
// LINE 451:
	__asm        mov    dword ptr ds:[0x5C33D0], 2;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x0046236B;
	__asm        jmp    near ptr 0x00462370;
	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     near ptr 0x00462382;
	__asm        jmp    near ptr 0x004623F1;
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    near ptr 0x004623A4;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x004623EC;
	__asm        jmp    near ptr 0x004623EC;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x004623D3;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x004623EC;
	__asm        jmp    near ptr 0x004623EC;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x004623EC;
	__asm        jmp    near ptr 0x004623F1;
	__asm        jmp    near ptr 0x004623F6;
	__asm        jmp    near ptr 0x004623FB;
// LINE 455:
// Block end:
	__asm        jmp    near ptr 0x0046240A;
// LINE 457:
	__asm        push   0x14;
	__asm        call   0x0043D91F;
	__asm        add    esp, 4;
// LINE 461:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x00462429;
	__asm        mov    eax, ds:[0x5992A0];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    near ptr 0x004624BA;
// LINE 462:
	__asm        mov    ecx, this;
	__asm        call   0x00495BE3;
// LINE 463:
	__asm        call   0x0051103E;
// LINE 464:
	__asm        mov    ecx, this;
	__asm        call   0x00495EF7;
// LINE 465:
	__asm        cmp    dword ptr ds:[0x5C381C], 0;
	__asm        je     near ptr 0x004624A9;
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004624A9;
// LINE 466:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx];
// LINE 467:
	__asm        jmp    near ptr 0x0046246D;
	__asm        jmp    near ptr 0x00462472;
	__asm        push   0x144;
	__asm        push   0x200;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x0050074D;
	__asm        add    esp, 0x10;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+4];
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   0x0046D802;
// LINE 473:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x004624D4;
// LINE 475:
	__asm        push   0x14;
	__asm        call   0x0043D91F;
	__asm        add    esp, 4;
// LINE 478:
	__asm        jmp    near ptr 0x004624D9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004624de
void  CGameApp::DoRecurringTasks(long lMilliSecondsSinceLastCall) {
	int32_t i;

// LINE 484:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 487:
	__asm        cmp    lMilliSecondsSinceLastCall, 0x2EE;
	__asm        jle    near ptr 0x004624FF;
// LINE 488:
	__asm        mov    ecx, this;
	__asm        call   0x00471F41;
// LINE 490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00462516;
	__asm        jmp    near ptr 0x0046251B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00462529;
	__asm        jmp    near ptr 0x0046252E;
	__asm        jmp    near ptr 0x00462533;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00462576;
// LINE 491:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046254F;
	__asm        inc    i;
	__asm        jmp    near ptr 0x00462554;
	__asm        mov    eax, i;
	__asm        cmp    ds:[0x604C78], eax;
	__asm        jle    near ptr 0x00462576;
// LINE 492:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049AA99;
	__asm        jmp    near ptr 0x0046254C;
// LINE 494:
	__asm        jmp    near ptr 0x0046257B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00462582
int  CGameApp::EnterMode(int32_t nMode) {
// LINE 502:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x160;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 503:
	__asm        cmp    nMode, 0;
	__asm        jne    near ptr 0x00462680;
// LINE 504:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   0;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x4C], eax;
// LINE 505:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004625D5;
	__asm        jmp    near ptr 0x004625DA;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004625F9;
	__asm        mov    eax, [ebp-0x40];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00462607;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00462622;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462622;
	__asm        jmp    near ptr 0x00462627;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00462667;
	__asm        jmp    near ptr 0x0046266C;
	__asm        jmp    near ptr 0x00462671;
// LINE 506:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 508:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 1;
	__asm        jne    near ptr 0x00462772;
// LINE 509:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
	__asm        push   1;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x68], eax;
// LINE 510:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004626C1;
	__asm        jmp    near ptr 0x004626C6;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004626E5;
	__asm        mov    eax, [ebp-0x5C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004626F3;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x0046270E;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x0046270E;
	__asm        jmp    near ptr 0x00462713;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00462753;
	__asm        jmp    near ptr 0x00462758;
	__asm        jmp    near ptr 0x0046275D;
// LINE 511:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x36B8], 0;
// LINE 513:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 2;
	__asm        jne    near ptr 0x00462864;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   2;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x84], eax;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004627B6;
	__asm        jmp    near ptr 0x004627BB;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004627DA;
	__asm        mov    eax, [ebp-0x78];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004627E8;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     near ptr 0x00462806;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462806;
	__asm        jmp    near ptr 0x0046280B;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0046284B;
	__asm        jmp    near ptr 0x00462850;
	__asm        jmp    near ptr 0x00462855;
// LINE 516:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 518:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 3;
	__asm        jne    near ptr 0x00462992;
// LINE 519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 0;
	__asm        push   3;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0xA0], eax;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004628B1;
	__asm        jmp    near ptr 0x004628B6;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004628DE;
	__asm        mov    eax, [ebp-0x94];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004628F2;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x00462916;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462916;
	__asm        jmp    near ptr 0x0046291B;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x433C], 1;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00462979;
	__asm        jmp    near ptr 0x0046297E;
	__asm        jmp    near ptr 0x00462983;
// LINE 521:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 523:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 4;
	__asm        jne    near ptr 0x00462B14;
// LINE 524:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
	__asm        push   4;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0xBC], eax;
// LINE 525:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004629DF;
	__asm        jmp    near ptr 0x004629E4;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00462A0C;
	__asm        mov    eax, [ebp-0xB0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x00462A20;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     near ptr 0x00462A44;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462A44;
	__asm        jmp    near ptr 0x00462A49;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x00462AA6;
	__asm        jmp    near ptr 0x00462AAB;
	__asm        jmp    near ptr 0x00462AB0;
// LINE 526:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
// LINE 528:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BD94A;
// LINE 529:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BD8F7;
// LINE 530:
	__asm        mov    ecx, this;
	__asm        call   0x00466968;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 532:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 534:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 5;
	__asm        jne    near ptr 0x00462CB5;
// LINE 535:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 536:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   5;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0xD8], eax;
// LINE 537:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x00462B7A;
	__asm        jmp    near ptr 0x00462B7F;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x00462BA7;
	__asm        mov    eax, [ebp-0xCC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x00462BBB;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     near ptr 0x00462BDF;
	__asm        mov    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462BDF;
	__asm        jmp    near ptr 0x00462BE4;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x00462C41;
	__asm        jmp    near ptr 0x00462C46;
	__asm        jmp    near ptr 0x00462C4B;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 539:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 540:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDD3B;
// LINE 541:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDE8B;
// LINE 542:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDE38;
// LINE 543:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 544:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 547:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 6;
	__asm        jne    near ptr 0x00462FFE;
// LINE 549:
// Block start:
	static const int32_t bDoneJoystickChangeCheckAlready = { /* <data@0x005992a4> */ };
	int32_t bCheckForCommandLineCheatCodes;
	__asm        mov    bCheckForCommandLineCheatCodes, 0;
// LINE 551:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 552:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 553:
	__asm        jmp    near ptr 0x00462CE8;
	__asm        cmp    dword ptr ds:[0x604498], 0;
	__asm        je     near ptr 0x00462D01;
// LINE 554:
	__asm        push   1;
	__asm        mov    ecx, 0x604480;
	__asm        call   0x00437EE7;
// LINE 555:
	__asm        push   0x2E;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   6;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0xF4], eax;
// LINE 556:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x00462D4D;
	__asm        jmp    near ptr 0x00462D52;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0xE8], eax;
	__asm        jmp    near ptr 0x00462D7A;
	__asm        mov    eax, [ebp-0xE8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x00462D8E;
	__asm        cmp    dword ptr [ebp-0xEC], 0;
	__asm        je     near ptr 0x00462DB2;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00462DB2;
	__asm        jmp    near ptr 0x00462DB7;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    ecx, [ebp-0xE8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xE8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x00462E14;
	__asm        jmp    near ptr 0x00462E19;
	__asm        jmp    near ptr 0x00462E1E;
// LINE 557:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 558:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 559:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE898;
// LINE 560:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE305;
// LINE 561:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BFFDA;
// LINE 565:
	__asm        cmp    dword ptr ds:[0x5B4794], 0;
	__asm        je     near ptr 0x00462E94;
// LINE 566:
	__asm        push   1;
	__asm        call   0x004EB5CA;
	__asm        add    esp, 4;
// LINE 567:
	__asm        jmp    near ptr 0x00462EFD;
// LINE 568:
	__asm        mov    bCheckForCommandLineCheatCodes, 1;
// LINE 569:
	__asm        mov    dword ptr ds:[0x5B4794], 1;
// LINE 570:
	__asm        mov    ecx, this;
	__asm        call   0x004BBB17;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00462EFD;
// LINE 572:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 1;
// LINE 576:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x64];
// LINE 577:
	__asm        push   1;
	__asm        push   0x1F;
	__asm        push   0x7DB;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 578:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 585:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     near ptr 0x00462F64;
// LINE 586:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 587:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        mov    ecx, 0x606E78;
	__asm        call   0x004EC1DD;
// LINE 588:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        call   0x004EB877;
	__asm        add    esp, 4;
// LINE 589:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 591:
	__asm        jmp    near ptr 0x00462F89;
// LINE 592:
	__asm        push   0;
	__asm        call   0x004EB877;
	__asm        add    esp, 4;
// LINE 593:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 599:
	__asm        cmp    dword ptr ds:[0x5992A4], 0;
	__asm        jne    near ptr 0x00462FCD;
// LINE 600:
	__asm        mov    dword ptr ds:[0x5992A4], 1;
// LINE 601:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00462FCD;
// LINE 602:
	__asm        push   1;
	__asm        push   0x1E;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 604:
	__asm        cmp    bCheckForCommandLineCheatCodes, 0;
	__asm        je     near ptr 0x00462FE2;
// LINE 605:
	__asm        mov    ecx, this;
	__asm        call   0x00440B3F;
// LINE 606:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 607:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 609:
// Block end:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 7;
	__asm        jne    near ptr 0x0046319A;
// LINE 610:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 611:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   7;
	__asm        lea    ecx, [ebp-0x24];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x110], eax;
// LINE 612:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x00463064;
	__asm        jmp    near ptr 0x00463069;
	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    near ptr 0x00463091;
	__asm        mov    eax, [ebp-0x104];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    near ptr 0x004630A5;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x004630C9;
	__asm        mov    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x004630C9;
	__asm        jmp    near ptr 0x004630CE;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    ecx, [ebp-0x104];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    ecx, [ebp-0x10C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    ecx, [ebp-0x10C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    near ptr 0x0046312B;
	__asm        jmp    near ptr 0x00463130;
	__asm        jmp    near ptr 0x00463135;
// LINE 613:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC4], eax;
// LINE 614:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC8], eax;
// LINE 615:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C1317;
// LINE 616:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C1542;
// LINE 617:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 618:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 621:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 8;
	__asm        jne    near ptr 0x00463329;
// LINE 622:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 623:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   8;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x12C], eax;
// LINE 624:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x114], eax;
	__asm        jmp    near ptr 0x00463200;
	__asm        jmp    near ptr 0x00463205;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    near ptr 0x0046322D;
	__asm        mov    eax, [ebp-0x120];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x00463241;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     near ptr 0x00463265;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   0x004BD6B5;
	__asm        jmp    near ptr 0x00463265;
	__asm        jmp    near ptr 0x0046326A;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x004632C7;
	__asm        jmp    near ptr 0x004632CC;
	__asm        jmp    near ptr 0x004632D1;
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1684], eax;
// LINE 626:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1688], eax;
// LINE 627:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1B8D;
// LINE 628:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1DB8;
// LINE 629:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 631:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 9;
	__asm        jne    near ptr 0x00463494;
// LINE 632:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 633:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   9;
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x144], eax;
// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x0046338F;
	__asm        jmp    near ptr 0x00463394;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    near ptr 0x004633BC;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x00466F30;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x00463432;
	__asm        jmp    near ptr 0x00463437;
	__asm        jmp    near ptr 0x0046343C;
// LINE 635:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2144], eax;
// LINE 636:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2148], eax;
// LINE 637:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C2515;
// LINE 638:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C2740;
// LINE 639:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 641:
	__asm        jmp    near ptr 0x004635FA;
	__asm        cmp    nMode, 0xB;
	__asm        jne    near ptr 0x004635FA;
// LINE 642:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4340], 1;
// LINE 643:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
	__asm        push   0xB;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   0x004BD692;
	__asm        mov    [ebp-0x15C], eax;
// LINE 644:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004634FA;
	__asm        jmp    near ptr 0x004634FF;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466CB0;
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x00463527;
	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x00466F30;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x433C];
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x0046359D;
	__asm        jmp    near ptr 0x004635A2;
	__asm        jmp    near ptr 0x004635A7;
// LINE 645:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C04], eax;
// LINE 646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C08], eax;
// LINE 647:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C2E9D;
// LINE 648:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C30C8;
// LINE 649:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463601;
// LINE 651:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00463601;
// LINE 652:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00463608
int  CGameApp::ExitMode(int32_t nMode) {
// LINE 660:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 661:
	__asm        cmp    nMode, 0;
	__asm        jne    near ptr 0x0046366E;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00463635;
	__asm        jmp    near ptr 0x0046363A;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00463648;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466ED0;
	__asm        jmp    near ptr 0x0046365F;
// LINE 663:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 665:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 2;
	__asm        jne    near ptr 0x00463706;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046368F;
	__asm        jmp    near ptr 0x00463694;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004636A2;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004636C8;
	__asm        jmp    near ptr 0x004636CD;
	__asm        mov    eax, ds:[0x59930C];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ds:[0x59930C], eax;
	__asm        jmp    near ptr 0x004636E4;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x004636F2;
	__asm        jmp    near ptr 0x004636F7;
// LINE 667:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 669:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 3;
	__asm        jne    near ptr 0x004637BD;
// LINE 672:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     near ptr 0x0046375A;
// LINE 673:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42C0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046374D;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0046374D;
// LINE 674:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C0], 0;
// LINE 678:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00463784;
	__asm        jmp    near ptr 0x00463789;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00463797;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466ED0;
	__asm        jmp    near ptr 0x004637AE;
// LINE 681:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 683:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 4;
	__asm        jne    near ptr 0x0046387B;
// LINE 689:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 690:
	__asm        mov    ecx, this;
	__asm        call   0x00466B32;
// LINE 691:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BDC6F;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00463804;
	__asm        jmp    near ptr 0x00463809;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00463817;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046383D;
	__asm        jmp    near ptr 0x00463842;
	__asm        mov    eax, ds:[0x59930C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ds:[0x59930C], eax;
	__asm        jmp    near ptr 0x00463859;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463867;
	__asm        jmp    near ptr 0x0046386C;
// LINE 693:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 695:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 5;
	__asm        jne    near ptr 0x004638F3;
// LINE 697:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 698:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDFA9;
// LINE 699:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004638BA;
	__asm        jmp    near ptr 0x004638BF;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004638CD;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466ED0;
	__asm        jmp    near ptr 0x004638E4;
// LINE 700:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 702:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 6;
	__asm        jne    near ptr 0x004639D4;
// LINE 706:
	__asm        call   0x0050A406;
// LINE 707:
	__asm        jmp    near ptr 0x00463907;
	__asm        cmp    dword ptr ds:[0x60449C], 0;
	__asm        je     near ptr 0x00463920;
// LINE 708:
	__asm        push   0;
	__asm        mov    ecx, 0x604480;
	__asm        call   0x00437EE7;
// LINE 709:
	__asm        call   0x00446E22;
// LINE 710:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 711:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BF681;
// LINE 712:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046395D;
	__asm        jmp    near ptr 0x00463962;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00463970;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463996;
	__asm        jmp    near ptr 0x0046399B;
	__asm        mov    eax, ds:[0x59930C];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ds:[0x59930C], eax;
	__asm        jmp    near ptr 0x004639B2;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x004639C0;
	__asm        jmp    near ptr 0x004639C5;
// LINE 713:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 715:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 7;
	__asm        jne    near ptr 0x00463A3C;
// LINE 717:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C13B9;
// LINE 718:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00463A03;
	__asm        jmp    near ptr 0x00463A08;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00463A16;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466ED0;
	__asm        jmp    near ptr 0x00463A2D;
// LINE 719:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 721:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 8;
	__asm        jne    near ptr 0x00463AE2;
// LINE 723:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1C2F;
// LINE 724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00463A6B;
	__asm        jmp    near ptr 0x00463A70;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00463A7E;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463AA4;
	__asm        jmp    near ptr 0x00463AA9;
	__asm        mov    eax, ds:[0x59930C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ds:[0x59930C], eax;
	__asm        jmp    near ptr 0x00463AC0;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463ACE;
	__asm        jmp    near ptr 0x00463AD3;
// LINE 725:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 727:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 9;
	__asm        jne    near ptr 0x00463B4A;
// LINE 729:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C25B7;
// LINE 730:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00463B11;
	__asm        jmp    near ptr 0x00463B16;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00463B24;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4338;
	__asm        call   0x00466ED0;
	__asm        jmp    near ptr 0x00463B3B;
// LINE 731:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 733:
	__asm        jmp    near ptr 0x00463BEB;
	__asm        cmp    nMode, 0xB;
	__asm        jne    near ptr 0x00463BEB;
// LINE 735:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C2F3F;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00463B79;
	__asm        jmp    near ptr 0x00463B7E;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00463B8C;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00463BB2;
	__asm        jmp    near ptr 0x00463BB7;
	__asm        mov    eax, ds:[0x59930C];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ds:[0x59930C], eax;
	__asm        jmp    near ptr 0x00463BCE;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x433C];
	__asm        jmp    near ptr 0x00463BDC;
	__asm        jmp    near ptr 0x00463BE1;
// LINE 737:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 739:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00463BF2;
// LINE 740:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00463bf9
void  CGameApp::DestroyAllModes() {
	int32_t nCurrentMode;
	class list<CopterGameMode>::iterator i;

// LINE 748:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 753:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     near ptr 0x00463C5C;
// LINE 754:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42BC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00463C4F;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x00447456;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00463C4A;
	__asm        jmp    near ptr 0x00463C4F;
// LINE 755:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42BC], 0;
// LINE 758:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00463C75;
	__asm        jmp    near ptr 0x00463C7A;
// LINE 759:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00463C91;
	__asm        jmp    near ptr 0x00463C96;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    near ptr 0x00463CAC;
	__asm        jmp    near ptr 0x00463CC0;
	__asm        jmp    near ptr 0x00463CAC;
	__asm        jmp    near ptr 0x00463CBB;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00463CC0;
	__asm        jmp    near ptr 0x00463CC5;
	__asm        jmp    near ptr 0x00463DC1;
	__asm        jmp    near ptr 0x00463CD4;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00463DC1;
// LINE 760:
	__asm        jmp    near ptr 0x00463CD9;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMode, eax;
// LINE 761:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00463D66;
// LINE 763:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BDC6F;
	__asm        jmp    near ptr 0x00463CFD;
// LINE 764:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 766:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BFEBA;
// LINE 767:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 769:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C1595;
// LINE 770:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 772:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1E0B;
// LINE 773:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 775:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C2793;
// LINE 776:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 778:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C311B;
// LINE 779:
	__asm        jmp    near ptr 0x00463D9E;
// LINE 780:
	__asm        jmp    near ptr 0x00463D9E;
	__asm        sub    dword ptr [ebp-0x34], 4;
	__asm        cmp    dword ptr [ebp-0x34], 7;
	__asm        ja     near ptr 0x00463D9E;
	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    dword ptr [eax*4+0x463D7E];
	__asm        in     eax, dx;
	__asm        cmp    al, 0x46;
	__asm        add    [esi+0x200463D], bl;
	__asm        cmp    eax, 0x3D150046;
	__asm        inc    esi;
	__asm        add    [eax], ch;
	__asm        cmp    eax, 0x3D3B0046;
	__asm        inc    esi;
	__asm        add    [esi+0x4E00463D], bl;
	__asm        (bad);
// LINE 781:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00463DB1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00463DBC;
// LINE 782:
	__asm        jmp    near ptr 0x00463C7A;
// LINE 783:
	__asm        jmp    near ptr 0x00463DC6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00463dcb
void  CGameApp::ProcessCommand(int32_t nCommand) {
// LINE 790:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 791:
	__asm        cmp    nCommand, 0x37;
	__asm        jne    near ptr 0x00463DF6;
// LINE 792:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 793:
	__asm        jmp    near ptr 0x00464446;
// LINE 795:
	__asm        jmp    near ptr 0x00463F0D;
	__asm        cmp    nCommand, 0xC9;
	__asm        jne    near ptr 0x00463E15;
// LINE 796:
	__asm        mov    ecx, this;
	__asm        call   0x00440F9D;
// LINE 797:
	__asm        jmp    near ptr 0x00464446;
// LINE 799:
	__asm        jmp    near ptr 0x00463F0D;
	__asm        cmp    nCommand, 0xCA;
	__asm        jne    near ptr 0x00463E34;
// LINE 800:
	__asm        mov    ecx, this;
	__asm        call   0x00440FFA;
// LINE 801:
	__asm        jmp    near ptr 0x00464446;
// LINE 803:
	__asm        jmp    near ptr 0x00463F0D;
	__asm        cmp    nCommand, 0xCB;
	__asm        jne    near ptr 0x00463E7A;
// LINE 804:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C8], 0;
	__asm        jne    near ptr 0x00463E63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C8], 1;
	__asm        jmp    near ptr 0x00463E70;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42C8], 0;
// LINE 805:
	__asm        jmp    near ptr 0x00464446;
// LINE 807:
	__asm        jmp    near ptr 0x00463F0D;
	__asm        cmp    nCommand, 0xCC;
	__asm        jne    near ptr 0x00463EDA;
// LINE 808:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00463E9E;
	__asm        jmp    near ptr 0x00463EA3;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00463EB1;
	__asm        jmp    near ptr 0x00463EB6;
	__asm        jmp    near ptr 0x00463EBB;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jl     near ptr 0x00463ED0;
// LINE 809:
	__asm        mov    ecx, this;
	__asm        call   0x0043E2A5;
// LINE 810:
	__asm        jmp    near ptr 0x00464446;
// LINE 812:
	__asm        jmp    near ptr 0x00463F0D;
	__asm        cmp    nCommand, 0x36;
	__asm        jne    near ptr 0x00463F0D;
// LINE 813:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4320], 0;
	__asm        jne    near ptr 0x00463F03;
// LINE 814:
	__asm        push   0xA;
	__asm        mov    ecx, this;
	__asm        call   0x0048A370;
// LINE 815:
	__asm        jmp    near ptr 0x00463F0D;
// LINE 816:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0048A370;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00463F24;
	__asm        jmp    near ptr 0x00463F29;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00463F37;
	__asm        jmp    near ptr 0x00463F3C;
	__asm        jmp    near ptr 0x00463F41;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    near ptr 0x00464005;
// LINE 819:
	__asm        cmp    nCommand, 1;
	__asm        jne    near ptr 0x00463F7D;
// LINE 821:
	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 822:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE5D0;
// LINE 823:
	__asm        call   0x00544262;
// LINE 825:
	__asm        jmp    near ptr 0x00464005;
	__asm        cmp    nCommand, 2;
	__asm        jne    near ptr 0x00463FAC;
// LINE 828:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C13F7;
// LINE 829:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 830:
	__asm        jmp    near ptr 0x00464446;
// LINE 832:
	__asm        jmp    near ptr 0x00464005;
	__asm        cmp    nCommand, 3;
	__asm        jne    near ptr 0x00463FDB;
// LINE 833:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C13F7;
// LINE 834:
	__asm        push   9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 835:
	__asm        jmp    near ptr 0x00464446;
// LINE 837:
	__asm        jmp    near ptr 0x00464005;
	__asm        cmp    nCommand, 4;
	__asm        jne    near ptr 0x00464005;
// LINE 838:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C13F7;
// LINE 839:
	__asm        push   0xB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 840:
	__asm        jmp    near ptr 0x00464446;
// LINE 844:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046401C;
	__asm        jmp    near ptr 0x00464021;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046402F;
	__asm        jmp    near ptr 0x00464034;
	__asm        jmp    near ptr 0x00464039;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    near ptr 0x0046406B;
// LINE 845:
	__asm        cmp    nCommand, 1;
	__asm        jne    near ptr 0x0046406B;
// LINE 846:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 847:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C143C;
// LINE 851:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00464082;
	__asm        jmp    near ptr 0x00464087;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00464095;
	__asm        jmp    near ptr 0x0046409A;
	__asm        jmp    near ptr 0x0046409F;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    near ptr 0x004640D1;
// LINE 852:
	__asm        cmp    nCommand, 1;
	__asm        jne    near ptr 0x004640D1;
// LINE 853:
	__asm        push   9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 854:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C143C;
// LINE 858:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004640E8;
	__asm        jmp    near ptr 0x004640ED;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004640FB;
	__asm        jmp    near ptr 0x00464100;
	__asm        jmp    near ptr 0x00464105;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    near ptr 0x0046413C;
// LINE 859:
	__asm        cmp    nCommand, 1;
	__asm        jne    near ptr 0x00464137;
// LINE 860:
	__asm        push   0xB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 861:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C143C;
// LINE 865:
	__asm        jmp    near ptr 0x00464441;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00464153;
	__asm        jmp    near ptr 0x00464158;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00464166;
	__asm        jmp    near ptr 0x0046416B;
	__asm        jmp    near ptr 0x00464170;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00464441;
// LINE 866:
	__asm        cmp    nCommand, 0x30;
	__asm        jne    near ptr 0x00464199;
// LINE 867:
	__asm        mov    ecx, this;
	__asm        call   0x00471E84;
// LINE 868:
	__asm        jmp    near ptr 0x00464446;
// LINE 870:
	__asm        jmp    near ptr 0x00464441;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00464441;
// LINE 874:
	__asm        cmp    nCommand, 3;
	__asm        je     near ptr 0x004641C7;
	__asm        cmp    nCommand, 0x15;
	__asm        jl     near ptr 0x004641EA;
	__asm        cmp    nCommand, 0x19;
	__asm        jg     near ptr 0x004641EA;
// LINE 876:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        je     near ptr 0x004641E0;
// LINE 877:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        call   0x004F762E;
	__asm        add    esp, 4;
// LINE 878:
	__asm        jmp    near ptr 0x00464446;
// LINE 882:
	__asm        jmp    near ptr 0x00464441;
// LINE 889:
	__asm        cmp    nCommand, 0x2D;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 0x2E;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 5;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 4;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 0x2F;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 0x14;
	__asm        je     near ptr 0x0046423A;
	__asm        cmp    nCommand, 0x1B;
	__asm        jl     near ptr 0x00464285;
	__asm        cmp    nCommand, 0x20;
	__asm        jg     near ptr 0x00464285;
// LINE 891:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        call   0x004EEFD9;
	__asm        add    esp, 4;
// LINE 894:
	__asm        cmp    nCommand, 0x2D;
	__asm        jne    near ptr 0x00464263;
// LINE 895:
	__asm        mov    eax, ds:[0x598E88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4328], eax;
// LINE 896:
	__asm        jmp    near ptr 0x0046427B;
	__asm        cmp    nCommand, 0x2E;
	__asm        jne    near ptr 0x0046427B;
// LINE 897:
	__asm        mov    eax, ds:[0x598E8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x432C], eax;
// LINE 898:
	__asm        jmp    near ptr 0x00464446;
// LINE 900:
	__asm        jmp    near ptr 0x00464441;
// LINE 901:
	__asm        cmp    nCommand, 0x22;
	__asm        jl     near ptr 0x004642CE;
	__asm        cmp    nCommand, 0x25;
	__asm        jg     near ptr 0x004642CE;
// LINE 903:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        je     near ptr 0x004642C4;
	__asm        call   0x00428F4A;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     near ptr 0x004642C4;
// LINE 904:
	__asm        mov    eax, nCommand;
	__asm        sub    eax, 0x22;
	__asm        push   eax;
	__asm        call   0x004F781B;
	__asm        add    esp, 4;
// LINE 905:
	__asm        jmp    near ptr 0x00464446;
// LINE 908:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x35;
	__asm        jne    near ptr 0x004642EA;
// LINE 909:
	__asm        mov    ecx, this;
	__asm        call   0x00441BC0;
// LINE 910:
	__asm        jmp    near ptr 0x00464446;
// LINE 913:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x31;
	__asm        jne    near ptr 0x00464329;
// LINE 914:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x4308];
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4308], 2;
	__asm        jle    near ptr 0x0046431A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4308], 0;
	__asm        jmp    near ptr 0x0046431F;
// LINE 915:
	__asm        jmp    near ptr 0x00464446;
// LINE 917:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x32;
	__asm        jne    near ptr 0x0046434B;
// LINE 918:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BFE36;
// LINE 919:
	__asm        jmp    near ptr 0x00464446;
// LINE 921:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x34;
	__asm        jne    near ptr 0x0046436D;
// LINE 922:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BFE82;
// LINE 923:
	__asm        jmp    near ptr 0x00464446;
// LINE 925:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x33;
	__asm        jne    near ptr 0x004643B0;
// LINE 926:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4330], 0;
	__asm        jne    near ptr 0x00464399;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4330], 1;
	__asm        jmp    near ptr 0x004643A6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4330], 0;
// LINE 927:
	__asm        jmp    near ptr 0x00464446;
// LINE 929:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x2A;
	__asm        jne    near ptr 0x00464405;
// LINE 930:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004643CC;
	__asm        jmp    near ptr 0x004643D1;
	__asm        jmp    near ptr 0x004643FB;
	__asm        jmp    near ptr 0x004643E0;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004643FB;
// LINE 933:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE358;
// LINE 934:
	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 936:
	__asm        jmp    near ptr 0x00464446;
// LINE 938:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x3A;
	__asm        jne    near ptr 0x00464421;
// LINE 939:
	__asm        mov    ecx, this;
	__asm        call   0x0043F908;
// LINE 940:
	__asm        jmp    near ptr 0x00464446;
// LINE 942:
	__asm        jmp    near ptr 0x00464441;
	__asm        cmp    nCommand, 0x38;
	__asm        jne    near ptr 0x00464441;
// LINE 944:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 945:
	__asm        mov    ecx, this;
	__asm        call   0x0044106F;
// LINE 946:
	__asm        jmp    near ptr 0x00464446;
// LINE 956:
	__asm        jmp    near ptr 0x00464446;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0046444d
void  CGameApp::DoKeyDown(long lKey, char chModifiers) {
	int32_t bPushCommand;
	int32_t nCommand;

// LINE 964:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 970:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x36BC;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 971:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x0046449F;
// LINE 972:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 973:
	__asm        jmp    near ptr 0x00464878;
// LINE 976:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004644C3;
// LINE 977:
	__asm        jmp    near ptr 0x00464878;
// LINE 981:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004644DA;
	__asm        jmp    near ptr 0x004644DF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004644ED;
	__asm        jmp    near ptr 0x004644F2;
	__asm        jmp    near ptr 0x004644F7;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 3;
	__asm        jne    near ptr 0x0046453D;
// LINE 983:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42C0], 0;
	__asm        je     near ptr 0x00464538;
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00464538;
// LINE 984:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 985:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 994:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464554;
	__asm        jmp    near ptr 0x00464559;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464567;
	__asm        jmp    near ptr 0x0046456C;
	__asm        jmp    near ptr 0x00464571;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 5;
	__asm        jne    near ptr 0x004645BC;
// LINE 996:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 1;
	__asm        jne    near ptr 0x004645B2;
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x004645B2;
// LINE 998:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 999:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1001:
	__asm        jmp    near ptr 0x00464878;
// LINE 1004:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004645D3;
	__asm        jmp    near ptr 0x004645D8;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004645E6;
	__asm        jmp    near ptr 0x004645EB;
	__asm        jmp    near ptr 0x004645F0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00464648;
// LINE 1006:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x110;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 1007:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x00464643;
// LINE 1008:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1009:
	__asm        jmp    near ptr 0x00464878;
// LINE 1012:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0046465F;
	__asm        jmp    near ptr 0x00464664;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464672;
	__asm        jmp    near ptr 0x00464677;
	__asm        jmp    near ptr 0x0046467C;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    near ptr 0x004646D4;
// LINE 1014:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBD0;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 1015:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x004646CF;
// LINE 1016:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1017:
	__asm        jmp    near ptr 0x00464878;
// LINE 1020:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004646EB;
	__asm        jmp    near ptr 0x004646F0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004646FE;
	__asm        jmp    near ptr 0x00464703;
	__asm        jmp    near ptr 0x00464708;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    near ptr 0x00464760;
// LINE 1021:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1690;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 1022:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x0046475B;
// LINE 1023:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1024:
	__asm        jmp    near ptr 0x00464878;
// LINE 1027:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00464777;
	__asm        jmp    near ptr 0x0046477C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0046478A;
	__asm        jmp    near ptr 0x0046478F;
	__asm        jmp    near ptr 0x00464794;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    near ptr 0x004647EC;
// LINE 1028:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2150;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 1029:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x004647E7;
// LINE 1030:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1031:
	__asm        jmp    near ptr 0x00464878;
// LINE 1034:
	__asm        jmp    near ptr 0x00464873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00464803;
	__asm        jmp    near ptr 0x00464808;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00464816;
	__asm        jmp    near ptr 0x0046481B;
	__asm        jmp    near ptr 0x00464820;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    near ptr 0x00464873;
// LINE 1035:
	__asm        lea    eax, bPushCommand;
	__asm        push   eax;
	__asm        lea    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C10;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x28];
// LINE 1036:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x00464873;
// LINE 1037:
	__asm        mov    eax, nCommand;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1038:
	__asm        jmp    near ptr 0x00464878;
// LINE 1041:
	__asm        jmp    near ptr 0x00464878;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0046487f
void  CGameApp::DoKeyUp(long lKey, char chModifiers) {
// LINE 1049:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1050:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004648AF;
// LINE 1051:
	__asm        jmp    near ptr 0x00464A9E;
// LINE 1054:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004648C6;
	__asm        jmp    near ptr 0x004648CB;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004648D9;
	__asm        jmp    near ptr 0x004648DE;
	__asm        jmp    near ptr 0x004648E3;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00464912;
// LINE 1055:
	__asm        mov    eax, this;
	__asm        add    eax, 0x110;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x30];
// LINE 1056:
	__asm        jmp    near ptr 0x00464A99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464929;
	__asm        jmp    near ptr 0x0046492E;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0046493C;
	__asm        jmp    near ptr 0x00464941;
	__asm        jmp    near ptr 0x00464946;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    near ptr 0x00464975;
// LINE 1057:
	__asm        mov    eax, this;
	__asm        add    eax, 0xBD0;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x30];
// LINE 1058:
	__asm        jmp    near ptr 0x00464A99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046498C;
	__asm        jmp    near ptr 0x00464991;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046499F;
	__asm        jmp    near ptr 0x004649A4;
	__asm        jmp    near ptr 0x004649A9;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    near ptr 0x004649D8;
// LINE 1059:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1690;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x30];
// LINE 1060:
	__asm        jmp    near ptr 0x00464A99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004649EF;
	__asm        jmp    near ptr 0x004649F4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464A02;
	__asm        jmp    near ptr 0x00464A07;
	__asm        jmp    near ptr 0x00464A0C;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    near ptr 0x00464A3B;
// LINE 1061:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2150;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x30];
// LINE 1062:
	__asm        jmp    near ptr 0x00464A99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464A52;
	__asm        jmp    near ptr 0x00464A57;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464A65;
	__asm        jmp    near ptr 0x00464A6A;
	__asm        jmp    near ptr 0x00464A6F;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    near ptr 0x00464A99;
// LINE 1063:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C10;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599BC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC0];
	__asm        call   dword ptr [eax+0x30];
// LINE 1064:
	__asm        jmp    near ptr 0x00464A9E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00464aa5
void  CGameApp::DoCharacter(long lCharacter) {
// LINE 1071:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1072:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+8];
// LINE 1073:
	__asm        jmp    near ptr 0x00464AC9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00464ad0
void  CGameApp::DoCursorDown(int32_t nCursorX, int32_t nCursorY, int32_t nButton) {
// LINE 1079:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1080:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x14];
// LINE 1081:
	__asm        jmp    near ptr 0x00464AFC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00464b03
void  CGameApp::DoCursorUp(int32_t nCursorX, int32_t nCursorY, int32_t nButton) {
// LINE 1088:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1089:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x18];
// LINE 1090:
	__asm        jmp    near ptr 0x00464B2F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00464b36
void  CGameApp::DoCursorMove(int32_t nCursorX, int32_t nCursorY) {
// LINE 1097:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1098:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1099:
	__asm        jmp    near ptr 0x00464B5E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00464b65
void  CGameApp::ClearCommands() {
// LINE 1107:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1110:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464B88;
	__asm        jmp    near ptr 0x00464B8D;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464B9B;
	__asm        jmp    near ptr 0x00464BA0;
	__asm        jmp    near ptr 0x00464BA5;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00464BC5;
// LINE 1111:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x110;
	__asm        call   0x0048B631;
// LINE 1112:
	__asm        jmp    near ptr 0x00464D10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464BDC;
	__asm        jmp    near ptr 0x00464BE1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00464BEF;
	__asm        jmp    near ptr 0x00464BF4;
	__asm        jmp    near ptr 0x00464BF9;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    near ptr 0x00464C19;
// LINE 1113:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBD0;
	__asm        call   0x0048B631;
// LINE 1114:
	__asm        jmp    near ptr 0x00464D10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464C30;
	__asm        jmp    near ptr 0x00464C35;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00464C43;
	__asm        jmp    near ptr 0x00464C48;
	__asm        jmp    near ptr 0x00464C4D;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    near ptr 0x00464C6D;
// LINE 1115:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1690;
	__asm        call   0x0048B631;
// LINE 1116:
	__asm        jmp    near ptr 0x00464D10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464C84;
	__asm        jmp    near ptr 0x00464C89;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00464C97;
	__asm        jmp    near ptr 0x00464C9C;
	__asm        jmp    near ptr 0x00464CA1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    near ptr 0x00464CC1;
// LINE 1117:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2150;
	__asm        call   0x0048B631;
// LINE 1118:
	__asm        jmp    near ptr 0x00464D10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464CD8;
	__asm        jmp    near ptr 0x00464CDD;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00464CEB;
	__asm        jmp    near ptr 0x00464CF0;
	__asm        jmp    near ptr 0x00464CF5;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    near ptr 0x00464D10;
// LINE 1119:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2C10;
	__asm        call   0x0048B631;
// LINE 1120:
	__asm        jmp    near ptr 0x00464D15;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00464d1a
void  CGameApp::ProcessSystemCloseRequest() {
// LINE 1128:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1129:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00464D38;
// LINE 1130:
	__asm        jmp    near ptr 0x00464DAE;
// LINE 1131:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 1;
// LINE 1132:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464D59;
	__asm        jmp    near ptr 0x00464D5E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464D6C;
	__asm        jmp    near ptr 0x00464D71;
	__asm        jmp    near ptr 0x00464D76;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jl     near ptr 0x00464D9C;
// LINE 1133:
	__asm        push   0x20002;
	__asm        push   3;
	__asm        push   0x7DE;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 1134:
	__asm        jmp    near ptr 0x00464DA9;
// LINE 1136:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1138:
	__asm        jmp    near ptr 0x00464DAE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00464db3
int  CGameApp::CheckForWarpToCareerLevel() {
	int32_t nNewLevel;

// LINE 1144:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1147:
	__asm        cmp    dword ptr ds:[0x5C3814], 0;
	__asm        je     near ptr 0x00464DF6;
// LINE 1148:
	__asm        mov    eax, ds:[0x5C3814];
	__asm        dec    eax;
	__asm        mov    nNewLevel, eax;
// LINE 1149:
	__asm        mov    dword ptr ds:[0x5C3814], 0;
// LINE 1150:
	__asm        mov    eax, nNewLevel;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
	__asm        jmp    near ptr 0x00464DFD;
// LINE 1152:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00464DFD;
// LINE 1153:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00464e02
int  CGameApp::WarpToCareerLevel(int32_t nNewLevel) {
// LINE 1163:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1164:
	__asm        cmp    nNewLevel, 0;
	__asm        jl     near ptr 0x00464E22;
	__asm        cmp    nNewLevel, 0x1F;
	__asm        jl     near ptr 0x00464E29;
// LINE 1165:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00464EAB;
// LINE 1166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464E40;
	__asm        jmp    near ptr 0x00464E45;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00464E53;
	__asm        jmp    near ptr 0x00464E58;
	__asm        jmp    near ptr 0x00464E5D;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     near ptr 0x00464E71;
// LINE 1167:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00464EAB;
// LINE 1168:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1169:
	__asm        mov    eax, nNewLevel;
	__asm        push   eax;
	__asm        call   0x00429760;
	__asm        add    esp, 4;
// LINE 1170:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 1171:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1172:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00464EAB;
// LINE 1173:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00464eb2
int  CGameApp::GraduateUserToNextCareerLevel() {
// LINE 1181:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00464ED5;
	__asm        jmp    near ptr 0x00464EDA;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00464EE8;
	__asm        jmp    near ptr 0x00464EED;
	__asm        jmp    near ptr 0x00464EF2;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     near ptr 0x00464F06;
// LINE 1183:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00465019;
// LINE 1185:
	__asm        cmp    dword ptr ds:[0x5C2AB4], 0x1E;
	__asm        jl     near ptr 0x00464F26;
// LINE 1186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    near ptr 0x00465019;
// LINE 1192:
	__asm        mov    dword ptr ds:[0x5C33D0], 0;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x00464F49;
	__asm        jmp    near ptr 0x00464F4E;
	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     near ptr 0x00464F60;
	__asm        jmp    near ptr 0x00464FCF;
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    near ptr 0x00464F82;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00464FCA;
	__asm        jmp    near ptr 0x00464FCA;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    near ptr 0x00464FB1;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00464FCA;
	__asm        jmp    near ptr 0x00464FCA;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    near ptr 0x00464FCA;
	__asm        jmp    near ptr 0x00464FCF;
	__asm        jmp    near ptr 0x00464FD4;
	__asm        jmp    near ptr 0x00464FD9;
	__asm        jmp    near ptr 0x00464FDE;
// LINE 1193:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1194:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 1195:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 1196:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1197:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465019;
// LINE 1198:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046501e
int  CGameApp::GraduateUserFromAllCareerLevels() {
// LINE 1206:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1207:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00465041;
	__asm        jmp    near ptr 0x00465046;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00465054;
	__asm        jmp    near ptr 0x00465059;
	__asm        jmp    near ptr 0x0046505E;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        je     near ptr 0x00465072;
// LINE 1208:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046507C;
// LINE 1209:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046507C;
// LINE 1210:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00465081
void  CGameApp::NotifyUserOfGraduation() {
	class DigitalSound* tempNotificationSound;
	char[128] szString;
	char[260] szFullPath;
	int32_t nFullStringID;

// LINE 1216:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1D0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    dword ptr [ebp-0x19C], 0;
// LINE 1222:
	__asm        push   0;
	__asm        push   0x226;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1223:
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        cmp    dword ptr [ebp-0x1C8], 0;
	__asm        jne    near ptr 0x00465122;
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        push   0x597200;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        call   0x0056CEC0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x00465127;
	__asm        jmp    near ptr 0x00465127;
// LINE 1224:
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   0x0046DCCD;
// LINE 1225:
	__asm        push   0;
	__asm        push   0x227;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1226:
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        jne    near ptr 0x004651BD;
	__asm        push   0xFFF;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        push   0x597200;
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        call   0x0056CEC0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x004651C2;
	__asm        jmp    near ptr 0x004651C2;
// LINE 1227:
	__asm        lea    eax, szString[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604530;
	__asm        call   0x0046DCCD;
// LINE 1230:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599290];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1231:
	__asm        push   0x7A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     near ptr 0x0046533D;
	__asm        or     dword ptr [ebp-0x19C], 1;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        cmp    dword ptr [ebp-0x1BC], 0;
	__asm        je     near ptr 0x004652F9;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046524A;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004652CA;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1BC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004652C5;
	__asm        jmp    near ptr 0x004652D6;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004652E8;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x00465303;
	__asm        mov    dword ptr [ebp-0x194], 0;
	__asm        mov    dword ptr [ebp-0x198], 0;
	__asm        jmp    near ptr 0x00465312;
	__asm        lea    eax, [ebp-0x198];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x190];
	__asm        call   0x0042F00F;
	__asm        mov    tempNotificationSound, eax;
	__asm        jmp    near ptr 0x00465347;
	__asm        mov    tempNotificationSound, 0;
	__asm        test   byte ptr [ebp-0x19C], 1;
	__asm        je     near ptr 0x00465451;
	__asm        and    dword ptr [ebp-0x19C], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x194];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x194];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046540E;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x1AC], eax;
	__asm        cmp    dword ptr [ebp-0x1AC], 0;
	__asm        je     near ptr 0x0046540E;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004653EB;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004653F0;
	__asm        jmp    near ptr 0x004653F5;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00465409;
	__asm        jmp    near ptr 0x0046540E;
	__asm        jmp    near ptr 0x00465413;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     near ptr 0x00465447;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046544C;
	__asm        jmp    near ptr 0x00465451;
// LINE 1232:
	__asm        mov    eax, tempNotificationSound;
	__asm        push   eax;
	__asm        push   0x43E250;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+0x14];
// LINE 1233:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+0x24];
// LINE 1234:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, tempNotificationSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempNotificationSound;
	__asm        call   dword ptr [eax+8];
// LINE 1235:
	__asm        jmp    near ptr 0x0046549F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004654a4
int  CGameApp::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	unsigned long nResult;
	int32_t nCurrentGameMode;

// LINE 1241:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1242:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4324];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004654C7;
	__asm        jmp    near ptr 0x004654CC;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004654DA;
	__asm        jmp    near ptr 0x004654DF;
	__asm        jmp    near ptr 0x004654E4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1245:
	__asm        cmp    lWindowID, 0x7DA;
	__asm        je     near ptr 0x00465507;
	__asm        cmp    lWindowID, 0x7D9;
	__asm        jne    near ptr 0x0046558F;
// LINE 1246:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F8CC;
// LINE 1247:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00465544;
// LINE 1248:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1249:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1251:
	__asm        jmp    near ptr 0x0046558A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0046558A;
// LINE 1252:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1253:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1254:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1255:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1258:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7DF;
	__asm        jne    near ptr 0x004656F4;
// LINE 1259:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F8CC;
// LINE 1260:
	__asm        cmp    lMessage, 1;
	__asm        jne    near ptr 0x004656EF;
// LINE 1261:
// Block start:
	class basic_string<char> sCheatCodeString;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00465601;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004655F6;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sCheatCodeString.reference, eax;
	__asm        jmp    near ptr 0x00465608;
	__asm        mov    sCheatCodeString.reference, 0;
	__asm        mov    sCheatCodeString.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00465614;
// LINE 1262:
	__asm        lea    eax, sCheatCodeString.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1263:
	__asm        lea    eax, sCheatCodeString.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043FBCD;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, sCheatCodeString.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCheatCodeString.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004656BB;
	__asm        mov    eax, sCheatCodeString.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004656BB;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046569B;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004656A0;
	__asm        jmp    near ptr 0x004656A5;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004656B6;
	__asm        jmp    near ptr 0x004656BB;
	__asm        jmp    near ptr 0x004656C0;
	__asm        cmp    sCheatCodeString.c_str_ptr, 0;
	__asm        je     near ptr 0x004656E2;
	__asm        mov    eax, sCheatCodeString.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004656E7;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1266:
// Block end:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7E0;
	__asm        jne    near ptr 0x00465738;
// LINE 1267:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F8CC;
// LINE 1268:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1269:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1270:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1272:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D2;
	__asm        jne    near ptr 0x00465771;
// LINE 1273:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    eax, lWindowID;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x80];
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1276:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D3;
	__asm        jne    near ptr 0x004657A7;
// LINE 1277:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    eax, lWindowID;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x7C];
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1280:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D7;
	__asm        jne    near ptr 0x00465890;
// LINE 1281:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x004657CE;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465881;
// LINE 1282:
// Block start:
	long lCurrentCitySelection;
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    lCurrentCitySelection, eax;
	__asm        jmp    near ptr 0x004657DC;
// LINE 1283:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1284:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    near ptr 0x0046581B;
// LINE 1285:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1286:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1288:
	__asm        jmp    near ptr 0x00465881;
// LINE 1289:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x0046583C;
// LINE 1290:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        call   0x0042939B;
	__asm        add    esp, 4;
// LINE 1291:
	__asm        jmp    near ptr 0x00465848;
// LINE 1292:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        call   0x00429760;
	__asm        add    esp, 4;
// LINE 1298:
	__asm        mov    eax, lCurrentCitySelection;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x004665AD;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00465881;
// LINE 1299:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1300:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1304:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1306:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7DE;
	__asm        jne    near ptr 0x0046592A;
// LINE 1307:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F8CC;
// LINE 1308:
	__asm        cmp    lMessage, 2;
	__asm        jne    near ptr 0x00465911;
// LINE 1309:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 1;
// LINE 1314:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jl     near ptr 0x004658E2;
// LINE 1315:
	__asm        push   0x20002;
	__asm        push   0x31;
	__asm        push   0x7DD;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F2B9;
// LINE 1316:
	__asm        jmp    near ptr 0x0046590C;
// LINE 1317:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1318:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1319:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1322:
	__asm        jmp    near ptr 0x0046591B;
// LINE 1323:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1324:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1326:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D4;
	__asm        jne    near ptr 0x004659A7;
// LINE 1327:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x00465951;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465998;
// LINE 1328:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0044150B;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x1C], eax;
// LINE 1329:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x00465998;
// LINE 1331:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1334:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D8;
	__asm        jne    near ptr 0x00465A24;
// LINE 1335:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x004659CE;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465A15;
// LINE 1336:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00441B5F;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x20], eax;
// LINE 1337:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x00465A15;
// LINE 1339:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1342:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D5;
	__asm        jne    near ptr 0x00465AA1;
// LINE 1343:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x00465A4B;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465A92;
// LINE 1344:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00441715;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x24], eax;
// LINE 1345:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x00465A92;
// LINE 1347:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1350:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7D6;
	__asm        jne    near ptr 0x00465B1E;
// LINE 1351:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x00465AC8;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465B0F;
// LINE 1352:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x004419B8;
	__asm        push   0x7D3;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0x74];
	__asm        mov    [ebp-0x28], eax;
// LINE 1353:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x00465B0F;
// LINE 1355:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1357:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7E1;
	__asm        jne    near ptr 0x00465B73;
// LINE 1358:
	__asm        cmp    lMessage, 0x3EA;
	__asm        je     near ptr 0x00465B45;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465B64;
// LINE 1359:
	__asm        mov    eax, lMessage;
	__asm        sub    eax, 0x3E9;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00441D86;
// LINE 1360:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1362:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x2711;
	__asm        jne    near ptr 0x00465B9D;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x00465B9D;
// LINE 1363:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00441C9F;
// LINE 1365:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x835;
	__asm        jne    near ptr 0x00465C69;
// LINE 1366:
	__asm        cmp    lMessage, 1;
	__asm        jne    near ptr 0x00465C64;
// LINE 1367:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x00465BE4;
// LINE 1368:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   0x004C13F7;
// LINE 1369:
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1371:
	__asm        jmp    near ptr 0x00465C64;
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    near ptr 0x00465C14;
// LINE 1372:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   0x004C13F7;
// LINE 1373:
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1375:
	__asm        jmp    near ptr 0x00465C64;
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    near ptr 0x00465C44;
// LINE 1376:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBA4;
	__asm        call   0x004C13F7;
// LINE 1377:
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1379:
	__asm        jmp    near ptr 0x00465C64;
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 0x63;
	__asm        jne    near ptr 0x00465C64;
// LINE 1380:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1384:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x836;
	__asm        jne    near ptr 0x00465C99;
// LINE 1385:
	__asm        cmp    lMessage, 3;
	__asm        jne    near ptr 0x00465C94;
// LINE 1386:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1388:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x838;
	__asm        jne    near ptr 0x00465CC9;
// LINE 1389:
	__asm        cmp    lMessage, 1;
	__asm        jne    near ptr 0x00465CC4;
// LINE 1390:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1392:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7DB;
	__asm        jne    near ptr 0x00465CFD;
// LINE 1395:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1396:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1398:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7DC;
	__asm        jne    near ptr 0x00465D48;
// LINE 1401:
	__asm        cmp    lMessage, 2;
	__asm        jne    near ptr 0x00465D1F;
// LINE 1402:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00427F98;
// LINE 1403:
	__asm        mov    eax, nCurrentGameMode;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1404:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1406:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        cmp    lWindowID, 0x7DD;
	__asm        jne    near ptr 0x00465ECD;
// LINE 1407:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1408:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F8CC;
// LINE 1409:
	__asm        cmp    lMessage, 2;
	__asm        jne    near ptr 0x00465E55;
// LINE 1410:
	__asm        call   0x0042913F;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00465DF0;
// LINE 1411:
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00427F98;
	__asm        mov    nResult, eax;
// LINE 1412:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x00465DC3;
	__asm        cmp    nResult, 9;
	__asm        je     near ptr 0x00465DC3;
// LINE 1413:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00428C38;
// LINE 1414:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1415:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1417:
	__asm        cmp    nResult, 0;
	__asm        jne    near ptr 0x00465DEB;
// LINE 1418:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F2B9;
// LINE 1419:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1422:
	__asm        jmp    near ptr 0x00465E55;
// LINE 1423:
	__asm        push   0x5C2918;
	__asm        push   0x5C33E8;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00427BF4;
	__asm        mov    nResult, eax;
// LINE 1424:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x00465E37;
// LINE 1425:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x00428C38;
// LINE 1426:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1427:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1429:
	__asm        jmp    near ptr 0x00465E55;
// LINE 1430:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x14;
	__asm        call   0x0043F2B9;
// LINE 1431:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1441:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00465E87;
// LINE 1442:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x78];
// LINE 1443:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1445:
	__asm        jmp    near ptr 0x00465ECD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x00465ECD;
// LINE 1446:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1447:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1448:
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1449:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x14];
	__asm        sub    ecx, 0x14;
	__asm        call   dword ptr [eax+0x68];
// LINE 1452:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00465ED4;
// LINE 1453:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00465edb
int  CGameApp::DoMainMenuMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	char[256] szSplitPathFilename;
	char[256] szSplitPathDirectory;
	int32_t nCurrentGameMode;
	char * chPrefData;
	char[256] szSplitPathFullDirectory;
	char[3] szSplitPathDrive;
	char[256] szSplitPathExtension;

// LINE 1461:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x634;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1469:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x630], eax;
	__asm        mov    eax, [ebp-0x630];
	__asm        mov    [ebp-0x62C], eax;
	__asm        jmp    near ptr 0x00465F10;
	__asm        jmp    near ptr 0x00465F15;
	__asm        mov    eax, [ebp-0x62C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x62C], eax;
	__asm        jmp    near ptr 0x00465F29;
	__asm        jmp    near ptr 0x00465F2E;
	__asm        jmp    near ptr 0x00465F33;
	__asm        mov    eax, [ebp-0x62C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1471:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    near ptr 0x00465FBD;
// LINE 1475:
// Block start:
	char[260] szFilePath;
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        push   0x5992F0;
	__asm        push   0;
	__asm        push   4;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1476:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        call   0x00429582;
	__asm        add    esp, 4;
// LINE 1477:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1478:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1479:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1480:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1482:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1484:
// Block end:
	__asm        jmp    near ptr 0x004662E9;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x004662E9;
// LINE 1486:
// Block start:
	long lResult;
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lResult, eax;
// LINE 1488:
	__asm        cmp    lResult, 0;
	__asm        jne    near ptr 0x00466028;
// LINE 1490:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1491:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 1;
// LINE 1492:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1493:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1495:
	__asm        jmp    near ptr 0x004662DF;
// LINE 1497:
	__asm        cmp    lResult, 2;
	__asm        je     near ptr 0x0046604F;
	__asm        cmp    lResult, 3;
	__asm        je     near ptr 0x0046604F;
	__asm        cmp    lResult, 1;
	__asm        jne    near ptr 0x00466297;
// LINE 1504:
// Block start:
	unsigned long nResult;
	int32_t nFullFilterID;
	long lFileType;
	int32_t nFullTitleID;
	char[260] szFileLoadPath;
	__asm        mov    al, ds:[0x599300];
	__asm        mov    szFileLoadPath[0], al;
	__asm        lea    edi, szFileLoadPath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 1507:
	__asm        cmp    lResult, 2;
	__asm        jne    near ptr 0x00466092;
// LINE 1508:
	__asm        mov    nFullTitleID, 0x28;
// LINE 1509:
	__asm        mov    nFullFilterID, 0x29;
// LINE 1511:
	__asm        jmp    near ptr 0x004660CC;
	__asm        cmp    lResult, 3;
	__asm        jne    near ptr 0x004660B8;
// LINE 1512:
	__asm        mov    nFullTitleID, 0x2A;
// LINE 1513:
	__asm        mov    nFullFilterID, 0x2B;
// LINE 1515:
	__asm        jmp    near ptr 0x004660CC;
// LINE 1516:
	__asm        mov    nFullTitleID, 0x2C;
// LINE 1517:
	__asm        mov    nFullFilterID, 0x2D;
// LINE 1521:
	__asm        push   0x6EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 1522:
	__asm        push   0;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullTitleID, eax;
// LINE 1523:
	__asm        push   0;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullFilterID, eax;
// LINE 1524:
	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        call   0x00490439;
	__asm        add    esp, 0x10;
	__asm        mov    nResult, eax;
// LINE 1525:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x00466153;
// LINE 1526:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1530:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        call   0x0056DDF0;
	__asm        add    esp, 0x14;
// LINE 1531:
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 1532:
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   0x0056CEC0;
	__asm        add    esp, 8;
// LINE 1533:
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        push   0x6EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 1538:
	__asm        lea    eax, lFileType;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00427550;
	__asm        mov    nResult, eax;
// LINE 1539:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x0046621C;
// LINE 1540:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00428C38;
// LINE 1541:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1545:
	__asm        mov    eax, lFileType;
	__asm        push   eax;
	__asm        lea    eax, szFileLoadPath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004275E3;
	__asm        mov    nResult, eax;
// LINE 1546:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x00466261;
// LINE 1547:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00428C38;
// LINE 1548:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1551:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1552:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1553:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1555:
// Block end:
	__asm        jmp    near ptr 0x004662DF;
	__asm        cmp    lResult, 4;
	__asm        jne    near ptr 0x004662DF;
// LINE 1557:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1558:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1559:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1560:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1562:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1564:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004662F3;
// LINE 1565:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004662fa
int  CGameApp::DoPlayMenuMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	unsigned long nResult;
	int32_t nCurrentGameMode;

// LINE 1573:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1574:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046631D;
	__asm        jmp    near ptr 0x00466322;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00466330;
	__asm        jmp    near ptr 0x00466335;
	__asm        jmp    near ptr 0x0046633A;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 1577:
	__asm        cmp    lMessage, 0x3EA;
	__asm        jne    near ptr 0x00466373;
// LINE 1578:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 1579:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1580:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1583:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x0046659F;
// LINE 1585:
// Block start:
	long lResult;
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lResult, eax;
// LINE 1587:
	__asm        cmp    lResult, 0;
	__asm        jne    near ptr 0x004663B3;
// LINE 1588:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663A1;
// LINE 1589:
	__asm        mov    ecx, this;
	__asm        call   0x00441A89;
// LINE 1590:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1592:
	__asm        cmp    lResult, 1;
	__asm        jne    near ptr 0x004663E3;
// LINE 1593:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663CC;
// LINE 1594:
	__asm        mov    ecx, this;
	__asm        call   0x004415C7;
// LINE 1595:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1597:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 2;
	__asm        jne    near ptr 0x00466413;
// LINE 1598:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004663FC;
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   0x004417FE;
// LINE 1600:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1602:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 3;
	__asm        jne    near ptr 0x00466443;
// LINE 1603:
	__asm        mov    eax, gwSource;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x0046642C;
// LINE 1604:
	__asm        mov    ecx, this;
	__asm        call   0x004413E5;
// LINE 1605:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1607:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 4;
	__asm        jne    near ptr 0x004664DE;
// LINE 1608:
	__asm        call   0x0042913F;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00466487;
// LINE 1609:
	__asm        mov    ecx, this;
	__asm        call   0x00427F98;
	__asm        mov    nResult, eax;
// LINE 1610:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x00466482;
// LINE 1611:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00428C38;
// LINE 1612:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1615:
	__asm        jmp    near ptr 0x004664CF;
// LINE 1616:
	__asm        push   0x5C2918;
	__asm        push   0x5C33E8;
	__asm        mov    ecx, this;
	__asm        call   0x00427BF4;
	__asm        mov    nResult, eax;
// LINE 1617:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x004664BE;
// LINE 1618:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00428C38;
// LINE 1619:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1621:
	__asm        jmp    near ptr 0x004664CF;
// LINE 1622:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 1624:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1626:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 5;
	__asm        jne    near ptr 0x00466549;
// LINE 1627:
	__asm        mov    ecx, this;
	__asm        call   0x00427F98;
	__asm        mov    nResult, eax;
// LINE 1628:
	__asm        cmp    nResult, 0;
	__asm        je     near ptr 0x0046651F;
	__asm        cmp    nResult, 9;
	__asm        je     near ptr 0x0046651F;
// LINE 1629:
	__asm        mov    eax, nResult;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00428C38;
// LINE 1630:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1632:
	__asm        jmp    near ptr 0x0046653A;
	__asm        cmp    nResult, 9;
	__asm        je     near ptr 0x0046653A;
// LINE 1633:
	__asm        push   1;
	__asm        push   0x30;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 1634:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1637:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 6;
	__asm        jne    near ptr 0x00466581;
// LINE 1638:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1639:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 1;
// LINE 1640:
	__asm        push   0x20002;
	__asm        push   0x31;
	__asm        push   0x7DD;
	__asm        mov    ecx, this;
	__asm        call   0x0043F2B9;
// LINE 1642:
	__asm        jmp    near ptr 0x0046659F;
	__asm        cmp    lResult, 7;
	__asm        jne    near ptr 0x0046659F;
// LINE 1643:
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwSource;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1644:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 1647:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004665A6;
// LINE 1648:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004665ad
int  CGameApp::StartVideoForCitySelection(long lCurrentCitySelection) {
	char[256] szFullCityVideoFileName;
	char[260] szFullCityVideoFilePath;
	float fScaleFactor;

// LINE 1658:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x33C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1663:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1665:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, lCurrentCitySelection;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B5C];
	__asm        push   eax;
	__asm        push   3;
	__asm        call   0x00429170;
	__asm        add    esp, 0xC;
// LINE 1667:
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1669:
	__asm        mov    dword ptr [ebp-0x214], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x210], 1;
	__asm        mov    dword ptr [ebp-0x31C], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x318];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0046665B;
	__asm        mov    byte ptr [ebp-0x318], 0;
	__asm        jmp    near ptr 0x00466660;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x31C];
	__asm        call   0x004A06E6;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00466684;
	__asm        mov    dword ptr [ebp-0x20C], 1;
	__asm        jmp    near ptr 0x0046668E;
	__asm        mov    dword ptr [ebp-0x20C], 0;
	__asm        mov    dword ptr [ebp-0x31C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x214], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004666AA;
	__asm        jmp    near ptr 0x004666AF;
	__asm        jmp    near ptr 0x004666DD;
	__asm        jmp    near ptr 0x004666C1;
	__asm        cmp    dword ptr [ebp-0x328], 0;
	__asm        je     near ptr 0x004666DD;
	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     near ptr 0x004666DD;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004666E2;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x324], eax;
	__asm        cmp    dword ptr [ebp-0x324], 0;
	__asm        je     near ptr 0x00466702;
// LINE 1670:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004668A6;
// LINE 1673:
	__asm        push   0x27C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x320], eax;
	__asm        cmp    dword ptr [ebp-0x320], 0;
	__asm        je     near ptr 0x0046673E;
	__asm        mov    ecx, [ebp-0x320];
	__asm        call   0x00498EE8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0046674E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 1674:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0x10];
// LINE 1675:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 1;
// LINE 1678:
	__asm        jmp    near ptr 0x0046678E;
	__asm        jmp    near ptr 0x00466793;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x330], eax;
	__asm        fild   dword ptr [ebp-0x330];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x334], eax;
	__asm        fidiv  dword ptr [ebp-0x334];
	__asm        fstp   fScaleFactor;
// LINE 1679:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 1680:
	__asm        jmp    near ptr 0x004667E1;
	__asm        jmp    near ptr 0x004667E6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    [ebp-0x338], eax;
	__asm        fild   dword ptr [ebp-0x338];
	__asm        fmul   fScaleFactor;
	__asm        call   0x0056EBE8;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        and    ebx, 0xFFFFFFFE;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x90], ebx;
// LINE 1681:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x00466854;
// LINE 1682:
	__asm        jmp    near ptr 0x00466859;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    [ebp-0x33C], eax;
	__asm        fild   dword ptr [ebp-0x33C];
	__asm        fmul   fScaleFactor;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        add    ecx, eax;
	__asm        and    ecx, 0xFFFFFFFE;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x98], ecx;
// LINE 1684:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004668A6;
// LINE 1685:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004668ad
void  CGameApp::ComposeCareerCityVideoFrame() {
	unsigned long nErrorCode;

// LINE 1692:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1703:
	__asm        jmp    near ptr 0x004668BE;
	__asm        jmp    near ptr 0x004668C3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nErrorCode, eax;
// LINE 1704:
	__asm        cmp    nErrorCode, 0;
	__asm        je     near ptr 0x0046695E;
// LINE 1705:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1706:
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 1708:
	__asm        jmp    near ptr 0x00466963;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00466968
int  CGameApp::StartVideoForMainMenu() {
	char[260] szMainMenuVideoPath;

// LINE 1714:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x228;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1717:
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59928C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1719:
	__asm        mov    dword ptr [ebp-0x110], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x10C], 1;
	__asm        mov    dword ptr [ebp-0x218], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x004669DD;
	__asm        mov    byte ptr [ebp-0x214], 0;
	__asm        jmp    near ptr 0x004669E2;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x218];
	__asm        call   0x004A06E6;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00466A06;
	__asm        mov    dword ptr [ebp-0x108], 1;
	__asm        jmp    near ptr 0x00466A10;
	__asm        mov    dword ptr [ebp-0x108], 0;
	__asm        mov    dword ptr [ebp-0x218], 0x590468;
	__asm        cmp    dword ptr [ebp-0x110], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00466A2C;
	__asm        jmp    near ptr 0x00466A31;
	__asm        jmp    near ptr 0x00466A5F;
	__asm        jmp    near ptr 0x00466A43;
	__asm        cmp    dword ptr [ebp-0x224], 0;
	__asm        je     near ptr 0x00466A5F;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x00466A5F;
	__asm        mov    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00466A64;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x220], eax;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     near ptr 0x00466A91;
// LINE 1720:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 1721:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00466B2D;
// LINE 1725:
	__asm        push   0x27C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x21C], eax;
	__asm        cmp    dword ptr [ebp-0x21C], 0;
	__asm        je     near ptr 0x00466ACA;
	__asm        mov    ecx, [ebp-0x21C];
	__asm        call   0x00498EE8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    near ptr 0x00466AD7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 1726:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x24];
// LINE 1727:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szMainMenuVideoPath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x10];
// LINE 1728:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    dword ptr [eax+8], 1;
// LINE 1730:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00466B2D;
// LINE 1731:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00466b32
void  CGameApp::EndVideoForMainMenu() {
// LINE 1737:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1738:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x00466B8A;
// LINE 1739:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   0x00497FF3;
// LINE 1740:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00466B80;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00466B80;
// LINE 1741:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 1743:
	__asm        jmp    near ptr 0x00466B8F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00466b94
void  CGameApp::ComposeMainMenuVideoFrame() {
	unsigned long nErrorCode;

// LINE 1749:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1752:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x00466C10;
// LINE 1756:
	__asm        jmp    near ptr 0x00466BB2;
	__asm        jmp    near ptr 0x00466BB7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x6C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    nErrorCode, eax;
// LINE 1757:
	__asm        cmp    nErrorCode, 0;
	__asm        je     near ptr 0x00466C10;
// LINE 1758:
	__asm        mov    ecx, this;
	__asm        call   0x00466B32;
// LINE 1761:
	__asm        jmp    near ptr 0x00466C15;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00065c20-00065ca9 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00466c20
// PFile::`scalar deleting destructor'



// Contribution: 1:00065cb0-00065ec5 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466cb0
// list<CopterGameMode>::get_node



// Contribution: 1:00065ed0-00065f29 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466ed0
// list<CopterGameMode>::erase



// Contribution: 1:00065f30-00065f68 Module: 44, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00466f30
// construct



// Contribution: 2:00001464-00001467 Module: 44, 4 byte alignment, initialized_data, read, 


// Contribution: 2:00001468-0000146b Module: 44, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590468
// ??_7PFile@@6B@


// Contribution: 2:00006c00-00006c57 Module: 44, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00002284-00002300 Module: 44, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599284
// SZ_SMACKER_INTRO_FILE_NAME
// GLOBAL: COPTER_D 0x00599288
// SZ_COPTER_MAIN_PREFERENCES_FILE_NAME
// GLOBAL: COPTER_D 0x0059928c
// SZ_MAIN_MENU_VIDEO_FILE_NAME
// GLOBAL: COPTER_D 0x00599290
// SZ_GRADUATION_NOTIFICATION_SOUND_FILE_NAME


// Contribution: 3:00002304-00002307 Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599304
// list<CopterGameMode>::last


// Contribution: 3:00002308-0000230b Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599308
// list<CopterGameMode>::next_avail


// Contribution: 3:0000230c-0000230f Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059930c
// list<CopterGameMode>::free_list


// Contribution: 3:00002310-00002313 Module: 44, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599310
// list<CopterGameMode>::buffer_list


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\common\Tweak.c
// GLOBAL: COPTER_D 0x00646ed0
// _g_uTWKMessageNum

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Winwindo.cpp
// GLOBAL: COPTER_D 0x00646ed0
// g_uTWKMessageNum
