// Module: gameapp3.obj
// Source: C:\Copter\source\sparkal\gameapp3.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long;

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: int32_t;

// Type: /*packed*/ class list<CopterGameMode>::iterator;
class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
{ // packed(0x4 bytes) TI: 0x1a18
protected:
	/*+0x0*/   /*packed*/ struct list<CopterGameMode>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<CopterGameMode>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<CopterGameMode>::iterator&);
	/*packed*/ class CopterGameMode& operator*();
	/*packed*/ class list<CopterGameMode>::iterator operator++(int32_t);
	/*packed*/ class list<CopterGameMode>::iterator& operator++();
	/*packed*/ class list<CopterGameMode>::iterator operator--(int32_t);
	/*packed*/ class list<CopterGameMode>::iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<CopterGameMode,int>;
struct bidirectional_iterator<CopterGameMode,int>{ // packed(0x1 bytes) TI: 0x184c
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:000314e0-00032110 Module: 60, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004324e0
int  CGameApp::CanWeSwitchToWindowedMode() {
// LINE 31:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42EC], 0x280;
	__asm        jle    _T4c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F0], 0x1E0;
	__asm        jle    _T4c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F4], 8;
	__asm        jne    _T4c;

	__asm        mov    eax, 1;
	__asm        jmp    _T4e;
_T4c:
	__asm        xor    eax, eax;
_T4e:
	__asm        jmp    _T53;
// LINE 32:
_T53:
}

// FUNCTION: COPTER_D 0x00432538
int  CGameApp::CanWeSwitchToFullScreenMode() {
// LINE 41:
	__asm        mov    eax, 1;
	__asm        jmp    _T16;
// LINE 45:
_T16:
}

// FUNCTION: COPTER_D 0x00432553
int  CGameApp::SwitchToWindowedMode() {
	/*bp-0x4*/   long hResult;

// LINE 58:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T20;
// LINE 59:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 60:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 1;
	__asm        jne    _T37;
// LINE 61:
	__asm        mov    eax, 1;
	__asm        jmp    _T173;
// LINE 62:
_T37:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    _T51;
// LINE 63:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 67:
_T51:
	this-><CGameApp+0x2c:4> = 0x1;
// LINE 69:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::PaletteUninitialize;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x4C];
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0xC];
// LINE 72:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 74:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 76:
	this-><CGameApp+0x30:4> = 0x1;
// LINE 81:
	__asm        jmp    _Tb0;
_Tb0:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 82:
	__asm        cmp    hResult, 0;
	__asm        je     _Tf8;
// LINE 83:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Te4;
_Te4:
	__asm        push   0x59839C;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectDrawError::DisplayError;
// LINE 84:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 87:
_Tf8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 88:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x84];
// LINE 89:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x6C];
// LINE 90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x70];
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+8];
// LINE 94:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x50];
// LINE 96:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::PaletteInitialize;
// LINE 98:
	this-><CGameApp+0x2c:4> = 0x0;
// LINE 99:
	__asm        mov    eax, 1;
	__asm        jmp    _T173;
// LINE 100:
_T173:
}

// FUNCTION: COPTER_D 0x004326cb
int  CGameApp::SwitchToFullScreenMode() {
	/*bp-0x4*/   long hResult;

// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T20;
// LINE 114:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 115:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T37;
// LINE 116:
	__asm        mov    eax, 1;
	__asm        jmp    _T173;
// LINE 117:
_T37:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        jne    _T51;
// LINE 118:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 122:
_T51:
	this-><CGameApp+0x2c:4> = 0x1;
// LINE 124:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::PaletteUninitialize;
// LINE 125:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x54];
// LINE 126:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0xC];
// LINE 127:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 131:
	this-><CGameApp+0x30:4> = 0x0;
// LINE 137:
	__asm        jmp    _Tb0;
_Tb0:
	__asm        push   0x11;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 138:
	__asm        cmp    hResult, 0;
	__asm        je     _Tf8;
// LINE 139:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Te4;
_Te4:
	__asm        push   0x5983E4;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectDrawError::DisplayError;
// LINE 140:
	__asm        xor    eax, eax;
	__asm        jmp    _T173;
// LINE 143:
_Tf8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x58];
// LINE 144:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x84];
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x6C];
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x70];
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+8];
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x58];
// LINE 152:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::PaletteInitialize;
// LINE 154:
	this-><CGameApp+0x2c:4> = 0x0;
// LINE 155:
	__asm        mov    eax, 1;
	__asm        jmp    _T173;
// LINE 156:
_T173:
}

// FUNCTION: COPTER_D 0x00432843
int  CGameApp::ConvertMonitorToWindowedMode() {
	/*bp-0x4*/   long hResult;

// LINE 168:
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 171:
	__asm        mov    eax, 1;
	__asm        jmp    _T29;
// LINE 172:
_T29:
}

// FUNCTION: COPTER_D 0x00432871
int  CGameApp::ConvertMonitorToFullScreenMode() {
	/*bp-0x4*/   long hResult;

// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42DC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D4];
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    hResult, eax;
// LINE 187:
	__asm        mov    eax, 1;
	__asm        jmp    _T47;
// LINE 188:
_T47:
}

// FUNCTION: COPTER_D 0x004328bd
int  CGameApp::ToggleScreenMode() {
// LINE 199:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _T2e;
// LINE 200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        jmp    _T3e;
// LINE 201:
	__asm        jmp    _T3e;
// LINE 202:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
	__asm        jmp    _T3e;
// LINE 203:
_T3e:
}

// FUNCTION: COPTER_D 0x00432900
int  CGameApp::CreateDisplaySurfaces() {
	/*bp-0x4*/   long nWindowHeight;
	/*bp-0x8*/   long nWindowWidth;
	/*bp-0x18*/  /*packed*/ class MRect rectScreenWindow; // 0x10 bytes

// LINE 212:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
// LINE 215:
_T16:
	__asm        lea    eax, nWindowHeight;
	__asm        push   eax;
	__asm        lea    eax, nWindowWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+4];
// LINE 221:
	__asm        push   0x16A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T85;

	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4304];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, nWindowHeight;
	__asm        push   eax;
	__asm        mov    eax, nWindowWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   ScreenBuffer::ScreenBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    _T8f;
_T85:
	this-><CGameApp+0x34:4> = 0x0;
// LINE 222:
_T8f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x50];
	__asm        call   CSparkalWindow::SetBackBuffer;
// LINE 223:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x40];
// LINE 226:
	__asm        cmp    gameResolution, 1;
	__asm        jne    _Te5;
// LINE 227:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x280;
	__asm        mov    rectScreenWindow.bottom, 0x1E0;
	__asm        jmp    _Te0;
// LINE 228:
_Te0:
	__asm        jmp    _T146;
_Te5:
	__asm        cmp    gameResolution, 2;
	__asm        jne    _T118;
// LINE 229:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x320;
	__asm        mov    rectScreenWindow.bottom, 0x258;
	__asm        jmp    _T113;
// LINE 230:
_T113:
	__asm        jmp    _T146;
_T118:
	__asm        cmp    gameResolution, 3;
	__asm        jne    _T146;
// LINE 231:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x400;
	__asm        mov    rectScreenWindow.bottom, 0x300;
	__asm        jmp    _T146;
// LINE 232:
_T146:
	__asm        push   0x78;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1a2;

	__asm        cmp    this, 0;
	__asm        je     _T175;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T17c;
_T175:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T17c:
	__asm        push   1;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectScreenWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   ScreenWindow::ScreenWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T1ac;
_T1a2:
	this-><CGameApp+0x38:4> = 0x0;
_T1ac:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-0x28], eax;
// LINE 233:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    GraphicWindow::screenWindow, eax;
	__asm        jmp    _T1c2;
// LINE 234:
_T1c2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax];
// LINE 236:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateDebugBuffer;
// LINE 238:
	__asm        mov    eax, 1;
	__asm        jmp    _T1e9;
// LINE 239:
_T1e9:
}

// FUNCTION: COPTER_D 0x00432aee
int  CGameApp::DestroyDisplaySurfaces() {
// LINE 247:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DestroyDebugBuffer;
// LINE 248:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T3c;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x6C];
// LINE 250:
	this-><CGameApp+0x38:4> = 0x0;
// LINE 252:
_T3c:
	__asm        jmp    _T41;
_T41:
	__asm        cmp    GraphicWindow::listValidWindows.length, 0;
	__asm        je     _T6a;

	__asm        push   0xFC;
	__asm        push   0x598434;
	__asm        push   0x59845C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _T6f;
// LINE 253:
_T6f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _Tcf;
// LINE 254:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x50];
	__asm        call   CSparkalWindow::SetBackBuffer;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tc5;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0x64];
	__asm        jmp    _Tc5;
// LINE 257:
_Tc5:
	this-><CGameApp+0x34:4> = 0x0;
// LINE 259:
_Tcf:
	__asm        mov    eax, 1;
	__asm        jmp    _Td9;
// LINE 260:
_Td9:
}

// FUNCTION: COPTER_D 0x00432bcc
int  CGameApp::CreateModeSurfaces() {
	/*bp-0x4*/   /*packed*/ class list<CopterGameMode>::iterator i;
	/*bp-0x8*/   int32_t nCurrentMode;

// LINE 282:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        je     _T24;
// LINE 283:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreatePaletteBuffer;
// LINE 284:
_T24:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateDebugBuffer;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    _T45;
_T45:
	__asm        jmp    _T4a;
// LINE 291:
_T4a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T66;
_T66:
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T7c;

	__asm        jmp    _T90;

	__asm        jmp    _T7c;
_T7c:
	__asm        jmp    _T8b;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T90;
_T8b:
	__asm        jmp    _T95;
_T90:
	__asm        jmp    _T107;
_T95:
	__asm        jmp    _Ta4;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T107;
// LINE 292:
_Ta4:
	__asm        jmp    _Ta9;
_Ta9:
	nCurrentMode = i.node->data.nModeID;
// LINE 293:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _Td5;
// LINE 295:
_Tbd:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::CreateIndependentSurfaces;
// LINE 296:
	__asm        jmp    _Te4;
// LINE 297:
	__asm        jmp    _Te4;
_Td5:
	__asm        cmp    dword ptr [ebp-0x2C], 6;
	__asm        je     _Tbd;

	__asm        jmp    _Te4;
// LINE 298:
_Te4:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T102;
// LINE 299:
_T102:
	__asm        jmp    _T4a;
// LINE 300:
_T107:
	__asm        mov    eax, 1;
	__asm        jmp    _T111;
// LINE 301:
_T111:
}

// FUNCTION: COPTER_D 0x00432ce2
int  CGameApp::DestroyModeSurfaces() {
	/*bp-0x4*/   /*packed*/ class list<CopterGameMode>::iterator i;
	/*bp-0x8*/   int32_t nCurrentMode;

// LINE 323:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     _T63;
// LINE 324:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42BC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PaletteBuffer::~PaletteBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 325:
_T56:
	this-><CGameApp+0x42bc:4> = 0x0;
// LINE 327:
_T63:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DestroyDebugBuffer;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T89;
// LINE 334:
_T89:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Ta0;
_Ta0:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    i.node, eax;
	__asm        jne    _Tbb;

	__asm        jmp    _Tcf;

	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tca;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _Tcf;
_Tca:
	__asm        jmp    _Td4;
_Tcf:
	__asm        jmp    _T146;
_Td4:
	__asm        jmp    _Te3;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T146;
// LINE 335:
_Te3:
	__asm        jmp    _Te8;
_Te8:
	nCurrentMode = i.node->data.nModeID;
// LINE 336:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T114;
// LINE 338:
_Tfc:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::DestroyIndependentSurfaces;
// LINE 339:
	__asm        jmp    _T123;
// LINE 340:
	__asm        jmp    _T123;
_T114:
	__asm        cmp    dword ptr [ebp-0x34], 6;
	__asm        je     _Tfc;

	__asm        jmp    _T123;
// LINE 341:
_T123:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _T136;
_T136:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T141;
// LINE 342:
_T141:
	__asm        jmp    _T89;
// LINE 343:
_T146:
	__asm        mov    eax, 1;
	__asm        jmp    _T150;
// LINE 344:
_T150:
}

// FUNCTION: COPTER_D 0x00432e37
void  CGameApp::PaletteInitialize() {
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T23;
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T36;
_T36:
	__asm        jmp    _T3b;
_T3b:
	__asm        jmp    _T40;
_T40:
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jne    _T68;
// LINE 361:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::CreatePalette;
// LINE 362:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   GameModeMainMenuData::UsePalette;
// LINE 364:
	__asm        jmp    _T2a9;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T7f;
_T7f:
	__asm        jmp    _T84;
_T84:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T92;
_T92:
	__asm        jmp    _T97;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 5;
	__asm        jne    _Tc4;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::CreatePalette;
// LINE 366:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   GameModePickCareerCityData::UsePalette;
// LINE 368:
	__asm        jmp    _T2a9;
_Tc4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tdb;
_Tdb:
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tee;
_Tee:
	__asm        jmp    _Tf3;
_Tf3:
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    _T126;
// LINE 369:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::CreatePalette;
// LINE 370:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::UsePalette;
// LINE 372:
	__asm        jmp    _T2a9;
_T126:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T150;
_T150:
	__asm        jmp    _T155;
_T155:
	__asm        jmp    _T15a;
_T15a:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    _T188;
// LINE 373:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::CreatePalette;
// LINE 374:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   GameModeHangarData::UsePalette;
// LINE 376:
	__asm        jmp    _T2a9;
_T188:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T19f;
_T19f:
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T1b2;
_T1b2:
	__asm        jmp    _T1b7;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    _T1ea;
// LINE 377:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::CreatePalette;
// LINE 378:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   GameModeCatalogData::UsePalette;
// LINE 380:
	__asm        jmp    _T2a9;
_T1ea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T214;
_T214:
	__asm        jmp    _T219;
_T219:
	__asm        jmp    _T21e;
_T21e:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    _T24c;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::CreatePalette;
// LINE 382:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   GameModeMissionLogData::UsePalette;
// LINE 384:
	__asm        jmp    _T2a9;
_T24c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T263;
_T263:
	__asm        jmp    _T268;
_T268:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T276;
_T276:
	__asm        jmp    _T27b;
_T27b:
	__asm        jmp    _T280;
_T280:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    _T2a9;
// LINE 385:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::CreatePalette;
// LINE 386:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   GameModeInventoryData::UsePalette;
// LINE 388:
_T2a9:
	__asm        jmp    _T2ae;
_T2ae:
}

// FUNCTION: COPTER_D 0x004330ea
void  CGameApp::PaletteUninitialize() {
// LINE 398:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x78];
// LINE 400:
	__asm        jmp    _T22;
_T22:
}



// Contribution: 3:0000139c-00001483 Module: 60, 4 byte alignment, initialized_data, read, write, 
