// Module: gameapp3.obj
// Source: C:\Copter\source\sparkal\gameapp3.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CGameApp (forward reference);

// Type: long;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;

// Type: class list<CopterGameMode>::iterator;
class list<CopterGameMode>::iterator : public bidirectional_iterator<CopterGameMode,int>
{
protected:
	struct list<CopterGameMode>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<CopterGameMode>::list_node*);
public:
	int32_t operator==(const class list<CopterGameMode>::iterator&);
	class CopterGameMode& operator*();
	class list<CopterGameMode>::iterator operator++(int32_t);
	class list<CopterGameMode>::iterator& operator++();
	class list<CopterGameMode>::iterator operator--(int32_t);
	class list<CopterGameMode>::iterator& operator--();
};

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct bidirectional_iterator<CopterGameMode,int>;
class bidirectional_iterator<CopterGameMode,int>{
};



// Contribution: 1:000314e0-00032110 Module: 60, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004324e0
int  CGameApp::CanWeSwitchToWindowedMode() {
// LINE 28:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 31:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42EC], 0x280;
	__asm        jle    near ptr 0x0043252C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F0], 0x1E0;
	__asm        jle    near ptr 0x0043252C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42F4], 8;
	__asm        jne    near ptr 0x0043252C;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043252E;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00432533;
// LINE 32:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432538
int  CGameApp::CanWeSwitchToFullScreenMode() {
// LINE 39:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 41:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043254E;
// LINE 45:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432553
int  CGameApp::SwitchToWindowedMode() {
	long hResult;

// LINE 57:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 58:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x00432573;
// LINE 59:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004326C6;
// LINE 60:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 1;
	__asm        jne    near ptr 0x0043258A;
// LINE 61:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004326C6;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004325A4;
// LINE 63:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004326C6;
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
// LINE 69:
	__asm        mov    ecx, this;
	__asm        call   0x004330EA;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x4C];
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0xC];
// LINE 72:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 74:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 76:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 81:
	__asm        jmp    near ptr 0x00432603;
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 82:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0043264B;
// LINE 83:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00432637;
	__asm        push   0x59839C;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 84:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004326C6;
// LINE 87:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 88:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x84];
// LINE 89:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x6C];
// LINE 90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x70];
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+8];
// LINE 94:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x50];
// LINE 96:
	__asm        mov    ecx, this;
	__asm        call   0x00432E37;
// LINE 98:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 99:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004326C6;
// LINE 100:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004326cb
int  CGameApp::SwitchToFullScreenMode() {
	long hResult;

// LINE 112:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004326EB;
// LINE 114:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043283E;
// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    near ptr 0x00432702;
// LINE 116:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043283E;
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0043271C;
// LINE 118:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043283E;
// LINE 122:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
// LINE 124:
	__asm        mov    ecx, this;
	__asm        call   0x004330EA;
// LINE 125:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x54];
// LINE 126:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0xC];
// LINE 127:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 131:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 137:
	__asm        jmp    near ptr 0x0043277B;
	__asm        push   0x11;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 138:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x004327C3;
// LINE 139:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004327AF;
	__asm        push   0x5983E4;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 140:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043283E;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x58];
// LINE 144:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x84];
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x6C];
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x70];
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+8];
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x58];
// LINE 152:
	__asm        mov    ecx, this;
	__asm        call   0x00432E37;
// LINE 154:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 155:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043283E;
// LINE 156:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432843
int  CGameApp::ConvertMonitorToWindowedMode() {
	long hResult;

// LINE 164:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 168:
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 171:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043286C;
// LINE 172:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432871
int  CGameApp::ConvertMonitorToFullScreenMode() {
	long hResult;

// LINE 179:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42DC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42D4];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    hResult, eax;
// LINE 187:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004328B8;
// LINE 188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004328bd
int  CGameApp::ToggleScreenMode() {
// LINE 198:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 199:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    near ptr 0x004328EB;
// LINE 200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        jmp    near ptr 0x004328FB;
// LINE 201:
	__asm        jmp    near ptr 0x004328FB;
// LINE 202:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
	__asm        jmp    near ptr 0x004328FB;
// LINE 203:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432900
int  CGameApp::CreateDisplaySurfaces() {
	class MRect rectScreenWindow;
	long nWindowWidth;
	long nWindowHeight;

// LINE 210:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 212:
	__asm        jmp    near ptr 0x00432911;
	__asm        jmp    near ptr 0x00432916;
// LINE 215:
	__asm        lea    eax, nWindowHeight;
	__asm        push   eax;
	__asm        lea    eax, nWindowWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+4];
// LINE 221:
	__asm        push   0x16A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00432985;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4304];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, nWindowHeight;
	__asm        push   eax;
	__asm        mov    eax, nWindowWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0049E534;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    near ptr 0x0043298F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 222:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x50];
	__asm        call   0x004322D7;
// LINE 223:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x40];
// LINE 226:
	__asm        cmp    dword ptr ds:[0x598F00], 1;
	__asm        jne    near ptr 0x004329E5;
// LINE 227:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x280;
	__asm        mov    rectScreenWindow.bottom, 0x1E0;
	__asm        jmp    near ptr 0x004329E0;
// LINE 228:
	__asm        jmp    near ptr 0x00432A46;
	__asm        cmp    dword ptr ds:[0x598F00], 2;
	__asm        jne    near ptr 0x00432A18;
// LINE 229:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x320;
	__asm        mov    rectScreenWindow.bottom, 0x258;
	__asm        jmp    near ptr 0x00432A13;
// LINE 230:
	__asm        jmp    near ptr 0x00432A46;
	__asm        cmp    dword ptr ds:[0x598F00], 3;
	__asm        jne    near ptr 0x00432A46;
// LINE 231:
	__asm        mov    rectScreenWindow.left, 0;
	__asm        mov    rectScreenWindow.top, 0;
	__asm        mov    rectScreenWindow.right, 0x400;
	__asm        mov    rectScreenWindow.bottom, 0x300;
	__asm        jmp    near ptr 0x00432A46;
// LINE 232:
	__asm        push   0x78;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00432AA2;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00432A75;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00432A7C;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectScreenWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x004A7989;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00432AAC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-0x28], eax;
// LINE 233:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ds:[0x59A968], eax;
	__asm        jmp    near ptr 0x00432AC2;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ecx, 0x3C;
	__asm        call   dword ptr [eax];
// LINE 236:
	__asm        mov    ecx, this;
	__asm        call   0x00440DCF;
// LINE 238:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00432AE9;
// LINE 239:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432aee
int  CGameApp::DestroyDisplaySurfaces() {
// LINE 246:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 247:
	__asm        mov    ecx, this;
	__asm        call   0x00440ED6;
// LINE 248:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00432B2A;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx+0x6C];
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 252:
	__asm        jmp    near ptr 0x00432B2F;
	__asm        cmp    dword ptr ds:[0x6069A4], 0;
	__asm        je     near ptr 0x00432B58;
	__asm        push   0xFC;
	__asm        push   0x598434;
	__asm        push   0x59845C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00432B5D;
	__asm        jmp    near ptr 0x00432B5D;
// LINE 253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00432BBD;
// LINE 254:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x50];
	__asm        call   0x004322D7;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x68];
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00432BB3;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0x64];
	__asm        jmp    near ptr 0x00432BB3;
// LINE 257:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 259:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00432BC7;
// LINE 260:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432bcc
int  CGameApp::CreateModeSurfaces() {
	int32_t nCurrentMode;
	class list<CopterGameMode>::iterator i;

// LINE 278:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 282:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        je     near ptr 0x00432BF0;
// LINE 283:
	__asm        mov    ecx, this;
	__asm        call   0x00440F3A;
// LINE 284:
	__asm        mov    ecx, this;
	__asm        call   0x00440DCF;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00432C11;
	__asm        jmp    near ptr 0x00432C16;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00432C2D;
	__asm        jmp    near ptr 0x00432C32;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x00432C48;
	__asm        jmp    near ptr 0x00432C5C;
	__asm        jmp    near ptr 0x00432C48;
	__asm        jmp    near ptr 0x00432C57;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x00432C5C;
	__asm        jmp    near ptr 0x00432C61;
	__asm        jmp    near ptr 0x00432CD3;
	__asm        jmp    near ptr 0x00432C70;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00432CD3;
// LINE 292:
	__asm        jmp    near ptr 0x00432C75;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMode, eax;
// LINE 293:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00432CA1;
// LINE 295:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BF4FC;
// LINE 296:
	__asm        jmp    near ptr 0x00432CB0;
// LINE 297:
	__asm        jmp    near ptr 0x00432CB0;
	__asm        cmp    dword ptr [ebp-0x2C], 6;
	__asm        je     near ptr 0x00432C89;
	__asm        jmp    near ptr 0x00432CB0;
// LINE 298:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00432CC3;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00432CCE;
// LINE 299:
	__asm        jmp    near ptr 0x00432C16;
// LINE 300:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00432CDD;
// LINE 301:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432ce2
int  CGameApp::DestroyModeSurfaces() {
	int32_t nCurrentMode;
	class list<CopterGameMode>::iterator i;

// LINE 319:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 323:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        je     near ptr 0x00432D45;
// LINE 324:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x42BC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00432D38;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x00447456;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00432D33;
	__asm        jmp    near ptr 0x00432D38;
// LINE 325:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42BC], 0;
// LINE 327:
	__asm        mov    ecx, this;
	__asm        call   0x00440ED6;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00432D66;
	__asm        jmp    near ptr 0x00432D6B;
// LINE 334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00432D82;
	__asm        jmp    near ptr 0x00432D87;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x00432D9D;
	__asm        jmp    near ptr 0x00432DB1;
	__asm        jmp    near ptr 0x00432D9D;
	__asm        jmp    near ptr 0x00432DAC;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00432DB1;
	__asm        jmp    near ptr 0x00432DB6;
	__asm        jmp    near ptr 0x00432E28;
	__asm        jmp    near ptr 0x00432DC5;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00432E28;
// LINE 335:
	__asm        jmp    near ptr 0x00432DCA;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMode, eax;
// LINE 336:
	__asm        mov    eax, nCurrentMode;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00432DF6;
// LINE 338:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BF5CA;
// LINE 339:
	__asm        jmp    near ptr 0x00432E05;
// LINE 340:
	__asm        jmp    near ptr 0x00432E05;
	__asm        cmp    dword ptr [ebp-0x34], 6;
	__asm        je     near ptr 0x00432DDE;
	__asm        jmp    near ptr 0x00432E05;
// LINE 341:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x00432E18;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00432E23;
// LINE 342:
	__asm        jmp    near ptr 0x00432D6B;
// LINE 343:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00432E32;
// LINE 344:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432e37
void  CGameApp::PaletteInitialize() {
// LINE 359:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00432E5A;
	__asm        jmp    near ptr 0x00432E5F;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00432E6D;
	__asm        jmp    near ptr 0x00432E72;
	__asm        jmp    near ptr 0x00432E77;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jne    near ptr 0x00432E9F;
// LINE 361:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BD81A;
// LINE 362:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x004BD8F7;
// LINE 364:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00432EB6;
	__asm        jmp    near ptr 0x00432EBB;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00432EC9;
	__asm        jmp    near ptr 0x00432ECE;
	__asm        jmp    near ptr 0x00432ED3;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 5;
	__asm        jne    near ptr 0x00432EFB;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDD5B;
// LINE 366:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x004BDE38;
// LINE 368:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00432F12;
	__asm        jmp    near ptr 0x00432F17;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00432F25;
	__asm        jmp    near ptr 0x00432F2A;
	__asm        jmp    near ptr 0x00432F2F;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 6;
	__asm        jne    near ptr 0x00432F5D;
// LINE 369:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE16E;
// LINE 370:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x004BE305;
// LINE 372:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00432F74;
	__asm        jmp    near ptr 0x00432F79;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00432F87;
	__asm        jmp    near ptr 0x00432F8C;
	__asm        jmp    near ptr 0x00432F91;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 7;
	__asm        jne    near ptr 0x00432FBF;
// LINE 373:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C14AF;
// LINE 374:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xBB8;
	__asm        call   0x004C1542;
// LINE 376:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00432FD6;
	__asm        jmp    near ptr 0x00432FDB;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00432FE9;
	__asm        jmp    near ptr 0x00432FEE;
	__asm        jmp    near ptr 0x00432FF3;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 8;
	__asm        jne    near ptr 0x00433021;
// LINE 377:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1D25;
// LINE 378:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1678;
	__asm        call   0x004C1DB8;
// LINE 380:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00433038;
	__asm        jmp    near ptr 0x0043303D;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0043304B;
	__asm        jmp    near ptr 0x00433050;
	__asm        jmp    near ptr 0x00433055;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 9;
	__asm        jne    near ptr 0x00433083;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C26AD;
// LINE 382:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2138;
	__asm        call   0x004C2740;
// LINE 384:
	__asm        jmp    near ptr 0x004330E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0043309A;
	__asm        jmp    near ptr 0x0043309F;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004330AD;
	__asm        jmp    near ptr 0x004330B2;
	__asm        jmp    near ptr 0x004330B7;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0xB;
	__asm        jne    near ptr 0x004330E0;
// LINE 385:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C3035;
// LINE 386:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2BF8;
	__asm        call   0x004C30C8;
// LINE 388:
	__asm        jmp    near ptr 0x004330E5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004330ea
void  CGameApp::PaletteUninitialize() {
// LINE 396:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 398:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x78];
// LINE 400:
	__asm        jmp    near ptr 0x0043310C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 3:0000139c-00001483 Module: 60, 4 byte alignment, initialized_data, read, write, 
