// Module: Winwindo.obj
// Source: C:\Copter\source\sparkal\Winwindo.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CSparkalWindow (forward reference);
class CSparkalWindow{
public:
	void CSparkalWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	void CSparkalWindow();
	// vtable: 0
	intro void ~CSparkalWindow();
	void * __ptr32 GetPlatformData();
	long GetWidth();
	long GetHeight();
	// vtable: 4
	intro unsigned long GetClientSize(long *, long *);
	class ScreenBuffer* GetBackBuffer();
	class ScreenBuffer* SetBackBuffer(class ScreenBuffer*);
	class ICommander* GetCommander();
	class ICommander* SetCommander(class ICommander*);
	// vtable: 8
	intro unsigned long Draw();
	// vtable: 12
	intro unsigned long SetCursor(unsigned long);
	// vtable: 16
	intro unsigned long SetCursorFromIndex(int32_t);
	// vtable: 20
	intro unsigned long LoadGameCursors();
	// vtable: 24
	intro void FreeGameCursors();
	unsigned long DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *);
	// vtable: 28
	intro unsigned long Sleep();
	// vtable: 32
	intro unsigned long WakeUp();
	unsigned long ScreenScroll(long, long, long, long, long, long);
	unsigned long RectSlideUp(long, long, long, long);
	// vtable: 36
	intro unsigned long SwapBuffer(long, long, long, long);
	// vtable: 40
	intro unsigned long SwapBuffer();
	// vtable: 44
	intro void UpdatePalette(long, long, struct SparkalColor*);
protected:
	long mHeight;
	long mWidth;
	unsigned long mStyle;
	class ICommander* mpCommander;
	class ScreenBuffer* mpBackBuffer;
	void * __ptr32 mWindow;
	// vtable: 48
	// calltype: NearStd
	intro long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long);
	void * __ptr32 mPalette;
	void * __ptr32 mhCurrentCursor;
	void * __ptr32 mhCustomCursor;
	void * __ptr32[16] mCursors;
};

// Type: int32_t;

// Type: void;

// Type: unsigned long;

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: char *;

// Type: struct tagRECT;
class tagRECT{
public:
	long left;
	long top;
	long right;
	long bottom;
};

// Type: struct tagWNDCLASSA;
class tagWNDCLASSA{
public:
	uint32_t style;
	long (*)(void * __ptr32, uint32_t, uint32_t, long) lpfnWndProc;
	int32_t cbClsExtra;
	int32_t cbWndExtra;
	void * __ptr32 hInstance;
	void * __ptr32 hIcon;
	void * __ptr32 hCursor;
	void * __ptr32 hbrBackground;
	char * lpszMenuName;
	char * lpszClassName;
};

// Type: struct CSparkalWindow::__ctor::__unnamed;
class CSparkalWindow::__ctor::__unnamed{
public:
	unsigned short Version;
	unsigned short NumberOfEntries;
	struct tagPALETTEENTRY[256] aEntries;
};

// Type: void * __ptr32;

// Type: uint32_t;

// Type: long *;

// Type: char;

// Type: long;

// Type: struct tagSIZE;
class tagSIZE{
public:
	long cx;
	long cy;
};

// Type: struct tagPALETTEENTRY[256];

// Type: struct tagPALETTEENTRY (forward reference);

// Type: unsigned char[256];

// Type: struct CheckIdentityPalette::__unnamed;
class CheckIdentityPalette::__unnamed{
public:
	struct tagBITMAPINFOHEADER Header;
	struct tagRGBQUAD[256] Colors;
};

// Type: struct tagPAINTSTRUCT;
class tagPAINTSTRUCT{
public:
	void * __ptr32 hdc;
	int32_t fErase;
	struct tagRECT rcPaint;
	int32_t fRestore;
	int32_t fIncUpdate;
	unsigned char[32] rgbReserved;
};



// Contribution: 1:0007f690-00080ad0 Module: 30, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00480690
void CSparkalWindow::CSparkalWindow() {
	int32_t i;

// LINE 52:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590EF8;
// LINE 55:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 57:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 58:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 59:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 61:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 63:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 65:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048070E;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0048072B;
// LINE 66:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x28], 0;
	__asm        jmp    near ptr 0x0048070B;
// LINE 67:
	__asm        jmp    near ptr 0x00480730;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00480738
void CSparkalWindow::CSparkalWindow(unsigned long Width, unsigned long Height, unsigned long Style, const struct SparkalColor* pColors, char * Caption) {
	int32_t Left;
	int32_t Top;
	struct tagRECT WindowRect;
	int32_t i;
	unsigned long ScreenWidth;
	unsigned long dwWindowsStyle;
	struct tagWNDCLASSA ClassInfo;
	unsigned long ScreenHeight;

// LINE 76:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x474;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590EF8;
// LINE 80:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 81:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 82:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 83:
	__asm        mov    eax, Width;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 84:
	__asm        mov    eax, Height;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 85:
	__asm        mov    eax, Style;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 86:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 87:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 88:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 90:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004807D7;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x004807F7;
// LINE 91:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x28], 0;
	__asm        jmp    near ptr 0x004807D4;
// LINE 94:
	__asm        lea    eax, ClassInfo.style;
	__asm        push   eax;
	__asm        push   0x599AB8;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3878];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00480872;
// LINE 95:
	__asm        mov    ClassInfo.hCursor, 0;
// LINE 96:
	__asm        mov    ClassInfo.lpszMenuName, 0x599AC0;
// LINE 97:
	__asm        mov    ClassInfo.lpszClassName, 0x599AB8;
// LINE 98:
	__asm        push   4;
	__asm        call   dword ptr ds:[0x6C3560];
	__asm        mov    ClassInfo.hbrBackground, eax;
// LINE 99:
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        mov    ClassInfo.hInstance, eax;
// LINE 100:
	__asm        mov    ClassInfo.style, 0x23;
// LINE 101:
	__asm        mov    ClassInfo.lpfnWndProc, 0x4815DD;
// LINE 102:
	__asm        mov    ClassInfo.cbWndExtra, 4;
// LINE 103:
	__asm        mov    ClassInfo.cbClsExtra, 0;
// LINE 104:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C381C];
	__asm        mov    ClassInfo.hIcon, eax;
// LINE 105:
	__asm        lea    eax, ClassInfo.style;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3814];
// LINE 109:
	__asm        mov    dwWindowsStyle, 0;
// LINE 110:
	__asm        test   reinterpret_cast<uint8_t>(Style), 1;
	__asm        je     near ptr 0x0048088F;
// LINE 111:
	__asm        or     dwWindowsStyle, 0x40000;
// LINE 112:
	__asm        jmp    near ptr 0x004808AC;
	__asm        test   reinterpret_cast<uint8_t>(Style), 4;
	__asm        je     near ptr 0x004808A5;
// LINE 113:
	__asm        or     dwWindowsStyle, 0x800000;
// LINE 114:
	__asm        jmp    near ptr 0x004808AC;
// LINE 115:
	__asm        or     dwWindowsStyle, 0x80000000;
// LINE 116:
	__asm        test   reinterpret_cast<uint8_t>(Style), 2;
	__asm        je     near ptr 0x004808BD;
// LINE 117:
	__asm        or     dwWindowsStyle, 0xC00000;
// LINE 118:
	__asm        test   reinterpret_cast<uint8_t>(Style), 8;
	__asm        je     near ptr 0x004808CE;
// LINE 119:
	__asm        or     dwWindowsStyle, 0xC80000;
// LINE 120:
	__asm        test   reinterpret_cast<uint8_t>(Style), 0x10;
	__asm        je     near ptr 0x004808DF;
// LINE 121:
	__asm        or     dwWindowsStyle, 0x30000;
// LINE 124:
	__asm        mov    WindowRect.left, 0;
	__asm        mov    WindowRect.top, 0;
	__asm        mov    eax, Width;
	__asm        mov    WindowRect.right, eax;
	__asm        mov    eax, Height;
	__asm        mov    WindowRect.bottom, eax;
// LINE 125:
	__asm        push   0;
	__asm        mov    eax, dwWindowsStyle;
	__asm        push   eax;
	__asm        lea    eax, WindowRect.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3890];
// LINE 128:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ScreenWidth, eax;
	__asm        jmp    near ptr 0x00480919;
// LINE 129:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ScreenHeight, eax;
	__asm        jmp    near ptr 0x00480929;
// LINE 131:
	__asm        cmp    Width, 0;
	__asm        jne    near ptr 0x0048093E;
// LINE 132:
	__asm        mov    eax, ScreenWidth;
	__asm        mov    Width, eax;
// LINE 133:
	__asm        jmp    near ptr 0x00480947;
// LINE 134:
	__asm        mov    eax, WindowRect.right;
	__asm        sub    eax, WindowRect.left;
	__asm        mov    Width, eax;
// LINE 135:
	__asm        cmp    Height, 0;
	__asm        jne    near ptr 0x0048095C;
// LINE 136:
	__asm        mov    eax, ScreenHeight;
	__asm        mov    Height, eax;
// LINE 137:
	__asm        jmp    near ptr 0x00480965;
// LINE 138:
	__asm        mov    eax, WindowRect.bottom;
	__asm        sub    eax, WindowRect.top;
	__asm        mov    Height, eax;
// LINE 141:
	__asm        mov    eax, Width;
	__asm        cmp    ScreenWidth, eax;
	__asm        jae    near ptr 0x00480977;
// LINE 142:
	__asm        mov    eax, ScreenWidth;
	__asm        mov    Width, eax;
// LINE 143:
	__asm        mov    eax, Height;
	__asm        cmp    ScreenHeight, eax;
	__asm        jae    near ptr 0x00480989;
// LINE 144:
	__asm        mov    eax, ScreenHeight;
	__asm        mov    Height, eax;
// LINE 147:
	__asm        mov    eax, ScreenWidth;
	__asm        shr    eax, 1;
	__asm        mov    ecx, Width;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    Left, eax;
// LINE 148:
	__asm        mov    eax, ScreenHeight;
	__asm        shr    eax, 1;
	__asm        mov    ecx, Height;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    Top, eax;
// LINE 152:
	__asm        push   0;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, dwWindowsStyle;
	__asm        push   eax;
	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        push   0x599AB8;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 155:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00480CEF;
// LINE 156:
// Block start:
	struct CSparkalWindow::__ctor::__unnamed LogPalette;
	void * __ptr32 hdc;
	int32_t StaticCount;
	uint32_t PaletteUse;
	int32_t End;
	int32_t Start;
	int32_t Counter;
	__asm        lea    eax, WindowRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 157:
	__asm        mov    eax, WindowRect.right;
	__asm        sub    eax, WindowRect.left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 158:
	__asm        mov    eax, WindowRect.bottom;
	__asm        sub    eax, WindowRect.top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 165:
	__asm        mov    LogPalette.Version, 0x300;
	__asm        mov    LogPalette.NumberOfEntries, 0x100;
	__asm        lea    edi, LogPalette.aEntries[0].peRed;
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x100;
	__asm        rep stosd;
// LINE 169:
	__asm        mov    StaticCount, 0x14;
// LINE 170:
	__asm        mov    PaletteUse, 1;
// LINE 172:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 173:
	__asm        cmp    hdc, 0;
	__asm        je     near ptr 0x00480AAB;
// LINE 174:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3588];
	__asm        mov    PaletteUse, eax;
// LINE 175:
	__asm        push   0x18;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    StaticCount, eax;
// LINE 176:
	__asm        lea    eax, LogPalette.aEntries[0].peRed;
	__asm        push   eax;
	__asm        push   0x100;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3580];
// LINE 177:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 181:
	__asm        mov    eax, StaticCount;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    Start, eax;
// LINE 182:
	__asm        mov    ecx, 0x100;
	__asm        mov    eax, StaticCount;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    End, ecx;
// LINE 184:
	__asm        cmp    PaletteUse, 2;
	__asm        jne    near ptr 0x00480AE2;
// LINE 185:
	__asm        mov    Start, 1;
// LINE 186:
	__asm        mov    End, 0xFF;
// LINE 192:
	__asm        mov    Counter, 0;
	__asm        jmp    near ptr 0x00480AF1;
	__asm        inc    Counter;
	__asm        mov    eax, Start;
	__asm        cmp    Counter, eax;
	__asm        jge    near ptr 0x00480B0D;
// LINE 193:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x465], 0;
	__asm        jmp    near ptr 0x00480AEE;
// LINE 196:
	__asm        cmp    pColors, 0;
	__asm        je     near ptr 0x00480B7B;
// LINE 197:
	__asm        jmp    near ptr 0x00480B1F;
	__asm        inc    Counter;
	__asm        mov    eax, End;
	__asm        cmp    Counter, eax;
	__asm        jge    near ptr 0x00480B76;
// LINE 198:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x466], al;
// LINE 199:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x467], al;
// LINE 200:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x468], al;
// LINE 201:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x465], 5;
// LINE 202:
	__asm        jmp    near ptr 0x00480B1C;
// LINE 204:
	__asm        jmp    near ptr 0x00480BC6;
// LINE 205:
	__asm        jmp    near ptr 0x00480B83;
	__asm        inc    Counter;
	__asm        mov    eax, End;
	__asm        cmp    Counter, eax;
	__asm        jge    near ptr 0x00480BC6;
// LINE 206:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x466], al;
// LINE 207:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x467], al;
// LINE 208:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x468], al;
// LINE 209:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x465], 5;
// LINE 210:
	__asm        jmp    near ptr 0x00480B80;
// LINE 214:
	__asm        jmp    near ptr 0x00480BCE;
	__asm        inc    Counter;
	__asm        cmp    Counter, 0x100;
	__asm        jge    near ptr 0x00480BEB;
// LINE 215:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x465], 0;
	__asm        jmp    near ptr 0x00480BCB;
// LINE 218:
	__asm        lea    eax, LogPalette.Version;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C357C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x470], eax;
// LINE 222:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x470];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
	__asm        jmp    near ptr 0x00480C2B;
// LINE 224:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 225:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3864];
// LINE 228:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 229:
	__asm        cmp    hdc, 0;
	__asm        je     near ptr 0x00480CEF;
// LINE 230:
	__asm        push   1;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3584];
// LINE 231:
	__asm        push   1;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 232:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 233:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3578];
// LINE 235:
	__asm        lea    eax, LogPalette.aEntries[0].peRed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   0x0048132B;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00480CDB;
// LINE 236:
	__asm        push   0;
	__asm        push   0x599AC4;
	__asm        push   0x599ACC;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 238:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 241:
// Block end:
	__asm        jmp    near ptr 0x00480CF4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00480d01
void CSparkalWindow::~CSparkalWindow() {
	int32_t i;

// LINE 248:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590EF8;
// LINE 251:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00480D4C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 254:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
	__asm        jmp    near ptr 0x00480D3F;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3804];
// LINE 257:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00480D66;
// LINE 258:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 259:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00480D75;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x00480DA6;
// LINE 260:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x28], 0;
	__asm        je     near ptr 0x00480DA1;
// LINE 261:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 262:
	__asm        jmp    near ptr 0x00480D72;
// LINE 267:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     near ptr 0x00480DC0;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 269:
	__asm        jmp    near ptr 0x00480DC5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00480dca
unsigned long CSparkalWindow::GetClientSize(long * pWidth, long * pHeight) {
	unsigned long Error;

// LINE 276:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 277:
	__asm        cmp    pWidth, 0;
	__asm        je     near ptr 0x00480DEA;
	__asm        cmp    pHeight, 0;
	__asm        jne    near ptr 0x00480E06;
	__asm        push   0x115;
	__asm        push   0x599AF0;
	__asm        push   0x599B18;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00480E0B;
	__asm        jmp    near ptr 0x00480E0B;
// LINE 279:
	__asm        mov    Error, 0;
// LINE 281:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00480E4B;
// LINE 283:
// Block start:
	struct tagRECT r;
	__asm        lea    eax, r.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 284:
	__asm        mov    eax, r.right;
	__asm        sub    eax, r.left;
	__asm        mov    ecx, pWidth;
	__asm        mov    [ecx], eax;
// LINE 285:
	__asm        mov    eax, r.bottom;
	__asm        sub    eax, r.top;
	__asm        mov    ecx, pHeight;
	__asm        mov    [ecx], eax;
// LINE 287:
// Block end:
	__asm        jmp    near ptr 0x00480E65;
// LINE 288:
	__asm        mov    eax, pHeight;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, pHeight;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pWidth;
	__asm        mov    [ecx], eax;
// LINE 289:
	__asm        mov    Error, 0x80000000;
// LINE 292:
	__asm        mov    eax, Error;
	__asm        jmp    near ptr 0x00480E6D;
// LINE 293:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00480e74
unsigned long CSparkalWindow::SetCursor(unsigned long CursorID) {
	void * __ptr32 hNewCursor;
	unsigned long ReturnCode;

// LINE 308:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 309:
	__asm        mov    ReturnCode, 0;
// LINE 312:
	__asm        cmp    CursorID, 0;
	__asm        je     near ptr 0x00480EDB;
// LINE 313:
	__asm        mov    eax, CursorID;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3818];
	__asm        mov    hNewCursor, eax;
// LINE 314:
	__asm        cmp    hNewCursor, 0;
	__asm        je     near ptr 0x00480ECD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     near ptr 0x00480ECD;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 316:
	__asm        mov    eax, hNewCursor;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 318:
	__asm        jmp    near ptr 0x00480EEB;
// LINE 319:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3818];
	__asm        mov    hNewCursor, eax;
// LINE 321:
	__asm        mov    eax, hNewCursor;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 323:
	__asm        cmp    hNewCursor, 0;
	__asm        je     near ptr 0x00480F1C;
// LINE 324:
	__asm        mov    eax, hNewCursor;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C388C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00480F17;
// LINE 325:
	__asm        mov    ReturnCode, 0x80000000;
// LINE 327:
	__asm        jmp    near ptr 0x00480F23;
// LINE 328:
	__asm        mov    ReturnCode, 0x80000007;
// LINE 329:
	__asm        mov    eax, ReturnCode;
	__asm        jmp    near ptr 0x00480F2B;
// LINE 330:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00480f32
unsigned long CSparkalWindow::SetCursorFromIndex(int32_t nIndex) {
	unsigned long ReturnCode;

// LINE 337:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 338:
	__asm        mov    ReturnCode, 0;
// LINE 340:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C388C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00480F71;
// LINE 342:
	__asm        mov    ReturnCode, 0x80000007;
// LINE 344:
	__asm        mov    eax, ReturnCode;
	__asm        jmp    near ptr 0x00480F79;
// LINE 345:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00480f80
unsigned long CSparkalWindow::LoadGameCursors() {
// LINE 352:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 353:
	__asm        mov    eax, 0x80000007;
	__asm        jmp    near ptr 0x00480F96;
// LINE 354:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00480f9b
void CSparkalWindow::FreeGameCursors() {
// LINE 360:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 362:
	__asm        jmp    near ptr 0x00480FAC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00480fb1
unsigned long CSparkalWindow::DrawBufferText(const const char* pText, unsigned long Style, long Left, long Top, long * pRectLeft, long * pRectTop, long * pRectRight, long * pRectBottom) {
	void * __ptr32 DeviceContext;
	long ClientHeight;
	uint32_t Length;
	long ClientWidth;
	struct tagSIZE TextSize;
	struct tagRECT TextRect;

// LINE 372:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 373:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x00480FE6;
	__asm        push   0x175;
	__asm        push   0x599B2C;
	__asm        push   0x599B54;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00480FEB;
	__asm        jmp    near ptr 0x00480FEB;
// LINE 376:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    DeviceContext, eax;
// LINE 380:
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3608];
	__asm        mov    Length, eax;
// LINE 383:
	__asm        lea    eax, TextSize.cx;
	__asm        push   eax;
	__asm        mov    eax, Length;
	__asm        push   eax;
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        mov    eax, DeviceContext;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35A4];
// LINE 389:
	__asm        test   reinterpret_cast<uint8_t>(Style), 1;
	__asm        je     near ptr 0x00481041;
// LINE 390:
	__asm        mov    ecx, Left;
	__asm        mov    eax, TextSize.cx;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        sub    ecx, 2;
	__asm        mov    TextRect.left, ecx;
// LINE 391:
	__asm        jmp    near ptr 0x0048104A;
// LINE 392:
	__asm        mov    eax, Left;
	__asm        sub    eax, 2;
	__asm        mov    TextRect.left, eax;
// LINE 394:
	__asm        test   reinterpret_cast<uint8_t>(Style), 2;
	__asm        je     near ptr 0x0048106D;
// LINE 395:
	__asm        mov    ecx, Top;
	__asm        mov    eax, TextSize.cy;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        sub    ecx, 2;
	__asm        mov    TextRect.top, ecx;
// LINE 396:
	__asm        jmp    near ptr 0x00481076;
// LINE 397:
	__asm        mov    eax, Top;
	__asm        sub    eax, 2;
	__asm        mov    TextRect.top, eax;
// LINE 399:
	__asm        mov    eax, TextSize.cx;
	__asm        add    eax, TextRect.left;
	__asm        add    eax, 2;
	__asm        mov    TextRect.right, eax;
// LINE 400:
	__asm        mov    eax, TextRect.top;
	__asm        add    eax, TextSize.cy;
	__asm        add    eax, 2;
	__asm        mov    TextRect.bottom, eax;
// LINE 404:
	__asm        lea    eax, ClientHeight;
	__asm        push   eax;
	__asm        lea    eax, ClientWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 407:
	__asm        mov    eax, ClientWidth;
	__asm        cmp    TextRect.right, eax;
	__asm        jl     near ptr 0x004810C0;
// LINE 409:
	__asm        mov    eax, ClientWidth;
	__asm        dec    eax;
	__asm        mov    TextRect.right, eax;
// LINE 410:
	__asm        mov    eax, TextRect.right;
	__asm        sub    eax, TextSize.cx;
	__asm        sub    eax, 4;
	__asm        mov    TextRect.left, eax;
// LINE 412:
	__asm        cmp    TextRect.left, 0;
	__asm        jge    near ptr 0x004810DA;
// LINE 414:
	__asm        mov    eax, TextSize.cx;
	__asm        add    eax, 4;
	__asm        mov    TextRect.right, eax;
// LINE 415:
	__asm        mov    TextRect.left, 0;
// LINE 417:
	__asm        cmp    TextRect.top, 0;
	__asm        jge    near ptr 0x004810F4;
// LINE 419:
	__asm        mov    eax, TextSize.cy;
	__asm        add    eax, 4;
	__asm        mov    TextRect.bottom, eax;
// LINE 420:
	__asm        mov    TextRect.top, 0;
// LINE 422:
	__asm        mov    eax, ClientHeight;
	__asm        cmp    TextRect.bottom, eax;
	__asm        jl     near ptr 0x00481113;
// LINE 424:
	__asm        mov    eax, ClientHeight;
	__asm        dec    eax;
	__asm        mov    TextRect.bottom, eax;
// LINE 425:
	__asm        mov    eax, TextRect.bottom;
	__asm        sub    eax, TextSize.cy;
	__asm        sub    eax, 4;
	__asm        mov    TextRect.top, eax;
// LINE 430:
	__asm        test   reinterpret_cast<uint8_t>(Style), 4;
	__asm        je     near ptr 0x00481134;
// LINE 431:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3560];
	__asm        push   eax;
	__asm        lea    eax, TextRect.left;
	__asm        push   eax;
	__asm        mov    eax, DeviceContext;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3888];
// LINE 436:
	__asm        mov    eax, Length;
	__asm        push   eax;
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        mov    eax, TextRect.top;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, TextRect.left;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, DeviceContext;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3558];
// LINE 439:
	__asm        mov    eax, DeviceContext;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 443:
	__asm        cmp    pRectLeft, 0;
	__asm        je     near ptr 0x004811AD;
	__asm        cmp    pRectTop, 0;
	__asm        je     near ptr 0x004811AD;
	__asm        cmp    pRectRight, 0;
	__asm        je     near ptr 0x004811AD;
	__asm        cmp    pRectBottom, 0;
	__asm        je     near ptr 0x004811AD;
// LINE 445:
	__asm        mov    eax, TextRect.left;
	__asm        mov    ecx, pRectLeft;
	__asm        mov    [ecx], eax;
// LINE 446:
	__asm        mov    eax, TextRect.right;
	__asm        mov    ecx, pRectRight;
	__asm        mov    [ecx], eax;
// LINE 447:
	__asm        mov    eax, TextRect.top;
	__asm        mov    ecx, pRectTop;
	__asm        mov    [ecx], eax;
// LINE 448:
	__asm        mov    eax, TextRect.bottom;
	__asm        mov    ecx, pRectBottom;
	__asm        mov    [ecx], eax;
// LINE 451:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004811B4;
// LINE 452:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x20;
}

// FUNCTION: COPTER_D 0x004811bb
unsigned long CSparkalWindow::ScreenScroll(long Left, long Top, long Right, long Bottom, long ScrollRightAmount, long ScrollDownAmount) {
	void * __ptr32 hdc;

// LINE 462:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 463:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x004811F0;
	__asm        push   0x1CF;
	__asm        push   0x599B5C;
	__asm        push   0x599B84;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004811F5;
	__asm        jmp    near ptr 0x004811F5;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 466:
	__asm        cmp    hdc, 0;
	__asm        je     near ptr 0x00481257;
// LINE 469:
	__asm        push   0xCC0020;
	__asm        mov    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, Bottom;
	__asm        sub    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Right;
	__asm        sub    eax, Left;
	__asm        push   eax;
	__asm        mov    eax, ScrollDownAmount;
	__asm        add    eax, Top;
	__asm        push   eax;
	__asm        mov    eax, Left;
	__asm        add    eax, ScrollRightAmount;
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35B4];
// LINE 470:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 473:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048125E;
// LINE 474:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00481265
void CSparkalWindow::UpdatePalette(long start, long count, struct SparkalColor* pColor) {
	int32_t i;
	struct tagPALETTEENTRY[256] palColors;

// LINE 482:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x408;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 486:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x0048131F;
// LINE 487:
	__asm        mov    eax, start;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x0048129B;
	__asm        inc    i;
	__asm        mov    eax, count;
	__asm        add    eax, start;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x004812FC;
// LINE 488:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x400], al;
// LINE 489:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x3FF], al;
// LINE 490:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x3FE], al;
// LINE 491:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x3FD], 5;
// LINE 492:
	__asm        add    pColor, 4;
// LINE 493:
	__asm        jmp    near ptr 0x00481295;
// LINE 494:
	__asm        mov    eax, start;
	__asm        lea    eax, [ebp+eax*4-0x400];
	__asm        push   eax;
	__asm        mov    eax, count;
	__asm        push   eax;
	__asm        mov    eax, start;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35AC];
// LINE 496:
	__asm        jmp    near ptr 0x00481324;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0048132b
int32_t CheckIdentityPalette(void * __ptr32 hdc, void * __ptr32 hPalette, struct tagPALETTEENTRY* pColors) {
	int32_t nReturnValue;
	int32_t i;
	int32_t IsID;
	void * __ptr32 MemDC;
	unsigned char[256] Bits;

// LINE 505:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x540;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 506:
	__asm        mov    IsID, 0;
// LINE 512:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35C8];
	__asm        mov    MemDC, eax;
// LINE 513:
	__asm        cmp    MemDC, 0;
	__asm        je     near ptr 0x004815CD;
// LINE 514:
// Block start:
	void * __ptr32 MemBitmap;
	__asm        push   1;
	__asm        push   0x100;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35BC];
	__asm        mov    MemBitmap, eax;
// LINE 515:
	__asm        cmp    MemBitmap, 0;
	__asm        je     near ptr 0x004815C0;
// LINE 516:
// Block start:
	struct CheckIdentityPalette::__unnamed Info;
	void * __ptr32 Mono;
	__asm        mov    eax, MemBitmap;
	__asm        push   eax;
	__asm        mov    eax, MemDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    Mono, eax;
// LINE 517:
	__asm        push   0;
	__asm        mov    eax, hPalette;
	__asm        push   eax;
	__asm        mov    eax, MemDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 525:
	__asm        mov    Info.Header.biSize, 0x28;
// LINE 526:
	__asm        mov    Info.Header.biWidth, 0x100;
// LINE 527:
	__asm        mov    Info.Header.biHeight, 1;
// LINE 528:
	__asm        mov    Info.Header.biPlanes, 1;
// LINE 529:
	__asm        mov    Info.Header.biBitCount, 8;
// LINE 530:
	__asm        mov    Info.Header.biCompression, 0;
// LINE 531:
	__asm        mov    Info.Header.biSizeImage, 0;
// LINE 532:
	__asm        mov    Info.Header.biXPelsPerMeter, 0;
// LINE 533:
	__asm        mov    Info.Header.biYPelsPerMeter, 0;
// LINE 534:
	__asm        mov    Info.Header.biClrUsed, 0;
// LINE 535:
	__asm        mov    Info.Header.biClrImportant, 0;
// LINE 537:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00481430;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x004814A0;
// LINE 538:
	__asm        mov    eax, i;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x516], al;
// LINE 539:
	__asm        mov    eax, i;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x517], al;
// LINE 540:
	__asm        mov    eax, i;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x518], al;
// LINE 541:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x515], 0;
// LINE 542:
	__asm        jmp    near ptr 0x0048142A;
// LINE 545:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004814B5;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x004814DD;
// LINE 546:
	__asm        mov    al, reinterpret_cast<uint8_t>(i);
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx-0x100], al;
	__asm        jmp    near ptr 0x004814AF;
// LINE 549:
	__asm        push   0xCC0020;
	__asm        push   0;
	__asm        lea    eax, Info.Header.biSize;
	__asm        push   eax;
	__asm        lea    eax, Bits[0];
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0x100;
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x100;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, MemDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35B8];
	__asm        mov    nReturnValue, eax;
// LINE 551:
	__asm        cmp    nReturnValue, 0xFFFFFFFF;
	__asm        je     near ptr 0x0048159F;
// LINE 553:
	__asm        mov    IsID, 1;
// LINE 554:
	__asm        lea    eax, Bits[0];
	__asm        push   eax;
	__asm        push   0x100;
	__asm        mov    eax, MemBitmap;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35C0];
// LINE 555:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00481560;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x0048159F;
// LINE 556:
	__asm        mov    eax, i;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax-0x100];
	__asm        cmp    ecx, i;
	__asm        je     near ptr 0x0048159A;
// LINE 557:
	__asm        mov    IsID, 0;
// LINE 558:
	__asm        jmp    near ptr 0x0048159F;
// LINE 560:
	__asm        jmp    near ptr 0x0048155A;
// LINE 563:
	__asm        mov    eax, Mono;
	__asm        push   eax;
	__asm        mov    eax, MemDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
// LINE 564:
	__asm        mov    eax, MemBitmap;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 567:
// Block end:
	__asm        mov    eax, MemDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35B0];
// LINE 570:
// Block end:
	__asm        mov    eax, IsID;
	__asm        jmp    near ptr 0x004815D8;
// LINE 571:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004815dd
long SparkalWindowProc(void * __ptr32 Window, uint32_t Message, uint32_t wParam, long lParam) {
	class CSparkalWindow* pWindow;

// LINE 584:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 585:
	__asm        jmp    near ptr 0x004815EB;
	__asm        push   0;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        mov    pWindow, eax;
// LINE 586:
	__asm        cmp    pWindow, 0;
	__asm        je     near ptr 0x00481625;
// LINE 587:
	__asm        mov    eax, lParam;
	__asm        push   eax;
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        mov    eax, pWindow;
	__asm        push   eax;
	__asm        mov    eax, pWindow;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        jmp    near ptr 0x00481640;
// LINE 588:
	__asm        mov    eax, lParam;
	__asm        push   eax;
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    near ptr 0x00481640;
// LINE 589:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00481647
long CSparkalWindow::MySparkalWindowProc(void * __ptr32 Window, uint32_t Message, uint32_t wParam, long lParam) {
// LINE 602:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 603:
	__asm        mov    eax, Message;
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x004819EE;
// LINE 608:
// Block start:
	void * __ptr32 hdc;
	struct tagPAINTSTRUCT Paint;
	__asm        mov    eax, Window;
	__asm        cmp    wParam, eax;
	__asm        jne    near ptr 0x0048166C;
// LINE 609:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 612:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x004816D4;
// LINE 614:
// Block start:
	int32_t bRedraw;
	void * __ptr32 hdc;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 616:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 617:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3578];
	__asm        mov    bRedraw, eax;
// LINE 618:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 619:
	__asm        cmp    bRedraw, 0;
	__asm        je     near ptr 0x004816CC;
// LINE 620:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 621:
	__asm        mov    eax, bRedraw;
	__asm        jmp    near ptr 0x00481ACA;
// LINE 623:
// Block end:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 626:
	__asm        cmp    wParam, 0;
	__asm        je     near ptr 0x00481701;
// LINE 627:
	__asm        jmp    near ptr 0x004816E8;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        or     dword ptr [eax+0xC], 2;
	__asm        jmp    near ptr 0x004816FC;
// LINE 628:
	__asm        jmp    near ptr 0x0048171A;
// LINE 629:
	__asm        jmp    near ptr 0x00481706;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        and    dword ptr [eax+0xC], 0xFFFFFFFD;
	__asm        jmp    near ptr 0x0048171A;
// LINE 631:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x0048176C;
// LINE 632:
// Block start:
	void * __ptr32 hdc;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 633:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35CC];
// LINE 634:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 635:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3578];
// LINE 636:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 638:
// Block end:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 642:
	__asm        jmp    near ptr 0x00481776;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        and    dword ptr [eax+0xC], 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0048178A;
// LINE 643:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 644:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 649:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x004817DA;
// LINE 650:
	__asm        test   wParam, 0xFFFF;
	__asm        je     near ptr 0x004817C9;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x18];
// LINE 652:
	__asm        jmp    near ptr 0x004817DA;
// LINE 653:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x1C];
// LINE 655:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 658:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048180A;
// LINE 659:
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+8];
// LINE 660:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 663:
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38A0];
// LINE 664:
	__asm        jmp    near ptr 0x0048181E;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        or     dword ptr [eax+0xC], 4;
	__asm        jmp    near ptr 0x00481832;
// LINE 665:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00481868;
// LINE 666:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0xC];
// LINE 667:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 670:
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38A0];
// LINE 671:
	__asm        jmp    near ptr 0x0048187C;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        or     dword ptr [eax+0xC], 8;
	__asm        jmp    near ptr 0x00481890;
// LINE 672:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x004818C6;
// LINE 673:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0xC];
// LINE 674:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 677:
	__asm        call   dword ptr ds:[0x6C38A8];
// LINE 678:
	__asm        jmp    near ptr 0x004818D6;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        and    dword ptr [eax+0xC], 0xFFFFFFFB;
	__asm        jmp    near ptr 0x004818EA;
// LINE 679:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00481920;
// LINE 680:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 681:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 684:
	__asm        call   dword ptr ds:[0x6C38A8];
// LINE 685:
	__asm        jmp    near ptr 0x00481930;
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        and    dword ptr [eax+0xC], 0xFFFFFFF7;
	__asm        jmp    near ptr 0x00481944;
// LINE 686:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048197A;
// LINE 687:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 688:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 691:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x004819B5;
// LINE 692:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x14];
// LINE 693:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 699:
	__asm        lea    eax, Paint.hdc;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3838];
	__asm        mov    hdc, eax;
// LINE 700:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 701:
	__asm        lea    eax, Paint.hdc;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3830];
// LINE 702:
	__asm        jmp    near ptr 0x00481AAF;
// LINE 703:
// Block end:
	__asm        jmp    near ptr 0x00481AAF;
	__asm        cmp    dword ptr [ebp-0x70], 6;
	__asm        ja     near ptr 0x00481A0D;
	__asm        je     near ptr 0x00481799;
	__asm        cmp    dword ptr [ebp-0x70], 2;
	__asm        je     near ptr 0x00481776;
	__asm        jmp    near ptr 0x00481AAF;
	__asm        cmp    dword ptr [ebp-0x70], 0x1C;
	__asm        ja     near ptr 0x00481A36;
	__asm        je     near ptr 0x004816D9;
	__asm        cmp    dword ptr [ebp-0x70], 0xF;
	__asm        je     near ptr 0x004819BA;
	__asm        cmp    dword ptr [ebp-0x70], 0x10;
	__asm        je     near ptr 0x00481776;
	__asm        jmp    near ptr 0x00481AAF;
	__asm        cmp    dword ptr [ebp-0x70], 0x200;
	__asm        ja     near ptr 0x00481A5B;
	__asm        je     near ptr 0x0048197F;
	__asm        cmp    dword ptr [ebp-0x70], 0x100;
	__asm        je     near ptr 0x004817DF;
	__asm        jmp    near ptr 0x00481AAF;
	__asm        cmp    dword ptr [ebp-0x70], 0x30F;
	__asm        ja     near ptr 0x00481A9D;
	__asm        je     near ptr 0x0048166C;
	__asm        sub    dword ptr [ebp-0x70], 0x201;
	__asm        cmp    dword ptr [ebp-0x70], 4;
	__asm        ja     near ptr 0x00481AAF;
	__asm        mov    eax, [ebp-0x70];
	__asm        jmp    dword ptr [eax*4+0x481A89];
	__asm        prefetcht0 [eax];
	__asm        retf;
	__asm        sbb    [eax], cl;
	__asm        scasd;
	__asm        sbb    cl, [eax];
	__asm        insd;
	__asm        sbb    [eax], cl;
	__asm        and    eax, 0x81004819;
	__asm        jge    short 0x00481A30;
	__asm        adc    [ebx], eax;
	__asm        add    [eax], al;
	__asm        je     near ptr 0x0048165B;
	__asm        jmp    near ptr 0x00481AAF;
// LINE 705:
	__asm        mov    eax, lParam;
	__asm        push   eax;
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    near ptr 0x00481ACA;
// LINE 706:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}



// Contribution: 1:00080ae0-00080b18 Module: 30, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00481ae0
// CSparkalWindow::`scalar deleting destructor'



// Contribution: 2:00001ef8-00001f2b Module: 30, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590ef8
// ??_7CSparkalWindow@@6B@


// Contribution: 3:00002ab8-00002b8b Module: 30, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599ab8
// gWindowClassName
