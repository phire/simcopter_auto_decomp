// Module: Winwindo.obj
// Source: C:\Copter\source\sparkal\Winwindo.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0007f690-00080ad0 Module: 30, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00480690
void CSparkalWindow::CSparkalWindow() {
// LINE 52:
	asm( 
"	      00480690    push ebp"
"	      00480691    mov ebp,esp"
"	      00480693    sub esp,8"
"	      00480696    push ebx"
"	      00480697    push esi"
"	      00480698    push edi"
"	      00480699    mov [ebp-8],ecx"
"	      0048069c    mov eax,[ebp-8]"
"	      0048069f    mov dword ptr [eax],590EF8h"
);
// LINE 55:
	asm( 
"	      004806a5    mov eax,[ebp-8]"
"	      004806a8    mov dword ptr [eax+10h],0"
);
// LINE 56:
	asm( 
"	      004806af    mov eax,[ebp-8]"
"	      004806b2    mov dword ptr [eax+14h],0"
);
// LINE 57:
	asm( 
"	      004806b9    mov eax,[ebp-8]"
"	      004806bc    mov dword ptr [eax+18h],0"
);
// LINE 58:
	asm( 
"	      004806c3    mov eax,[ebp-8]"
"	      004806c6    mov dword ptr [eax+8],0"
);
// LINE 59:
	asm( 
"	      004806cd    mov eax,[ebp-8]"
"	      004806d0    mov dword ptr [eax+4],0"
);
// LINE 60:
	asm( 
"	      004806d7    mov eax,[ebp-8]"
"	      004806da    mov dword ptr [eax+0Ch],0"
);
// LINE 61:
	asm( 
"	      004806e1    mov eax,[ebp-8]"
"	      004806e4    mov dword ptr [eax+1Ch],0"
);
// LINE 62:
	asm( 
"	      004806eb    mov eax,[ebp-8]"
"	      004806ee    mov dword ptr [eax+20h],0"
);
// LINE 63:
	asm( 
"	      004806f5    mov eax,[ebp-8]"
"	      004806f8    mov dword ptr [eax+24h],0"
);
// LINE 65:
	asm( 
"	      004806ff    mov dword ptr [ebp-4],0"
"	      00480706    jmp near ptr 0048070Eh"
"	      0048070b    inc dword ptr [ebp-4]"
"	      0048070e    cmp dword ptr [ebp-4],10h"
"	      00480712    jge near ptr 0048072Bh"
);
// LINE 66:
	asm( 
"	      00480718    mov eax,[ebp-4]"
"	      0048071b    mov ecx,[ebp-8]"
"	      0048071e    mov dword ptr [ecx+eax*4+28h],0"
"	      00480726    jmp near ptr 0048070Bh"
);
// LINE 67:
	asm( 
"	      0048072b    jmp near ptr 00480730h"
"	      00480730    mov eax,[ebp-8]"
"	      00480733    pop edi"
"	      00480734    pop esi"
"	      00480735    pop ebx"
"	      00480736    leave"
"	      00480737    ret"
);
}

// FUNCTION: COPTER_D 0x00480738
void CSparkalWindow::CSparkalWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *) {
// LINE 76:
	asm( 
"	      00480738    push ebp"
"	      00480739    mov ebp,esp"
"	      0048073b    sub esp,474h"
"	      00480741    push ebx"
"	      00480742    push esi"
"	      00480743    push edi"
"	      00480744    mov [ebp-474h],ecx"
"	      0048074a    mov eax,[ebp-474h]"
"	      00480750    mov dword ptr [eax],590EF8h"
);
// LINE 80:
	asm( 
"	      00480756    mov eax,[ebp-474h]"
"	      0048075c    mov dword ptr [eax+10h],0"
);
// LINE 81:
	asm( 
"	      00480763    mov eax,[ebp-474h]"
"	      00480769    mov dword ptr [eax+14h],0"
);
// LINE 82:
	asm( 
"	      00480770    mov eax,[ebp-474h]"
"	      00480776    mov dword ptr [eax+18h],0"
);
// LINE 83:
	asm( 
"	      0048077d    mov eax,[ebp+8]"
"	      00480780    mov ecx,[ebp-474h]"
"	      00480786    mov [ecx+8],eax"
);
// LINE 84:
	asm( 
"	      00480789    mov eax,[ebp+0Ch]"
"	      0048078c    mov ecx,[ebp-474h]"
"	      00480792    mov [ecx+4],eax"
);
// LINE 85:
	asm( 
"	      00480795    mov eax,[ebp+10h]"
"	      00480798    mov ecx,[ebp-474h]"
"	      0048079e    mov [ecx+0Ch],eax"
);
// LINE 86:
	asm( 
"	      004807a1    mov eax,[ebp-474h]"
"	      004807a7    mov dword ptr [eax+1Ch],0"
);
// LINE 87:
	asm( 
"	      004807ae    mov eax,[ebp-474h]"
"	      004807b4    mov dword ptr [eax+20h],0"
);
// LINE 88:
	asm( 
"	      004807bb    mov eax,[ebp-474h]"
"	      004807c1    mov dword ptr [eax+24h],0"
);
// LINE 90:
	asm( 
"	      004807c8    mov dword ptr [ebp-38h],0"
"	      004807cf    jmp near ptr 004807D7h"
"	      004807d4    inc dword ptr [ebp-38h]"
"	      004807d7    cmp dword ptr [ebp-38h],10h"
"	      004807db    jge near ptr 004807F7h"
);
// LINE 91:
	asm( 
"	      004807e1    mov eax,[ebp-38h]"
"	      004807e4    mov ecx,[ebp-474h]"
"	      004807ea    mov dword ptr [ecx+eax*4+28h],0"
"	      004807f2    jmp near ptr 004807D4h"
);
// LINE 94:
	asm( 
"	      004807f7    lea eax,[ebp-2Ch]"
"	      004807fa    push eax"
"	      004807fb    push 599AB8h"
"	      00480800    mov eax,ds:[5C28C8h]"
"	      00480805    push eax"
"	      00480806    call dword ptr ds:[6C3878h]"
"	      0048080c    test eax,eax"
"	      0048080e    jne near ptr 00480872h"
);
// LINE 95:
	asm( 
"	      00480814    mov dword ptr [ebp-14h],0"
);
// LINE 96:
	asm( 
"	      0048081b    mov dword ptr [ebp-0Ch],599AC0h"
);
// LINE 97:
	asm( 
"	      00480822    mov dword ptr [ebp-8],599AB8h"
);
// LINE 98:
	asm( 
"	      00480829    push 4"
"	      0048082b    call dword ptr ds:[6C3560h]"
"	      00480831    mov [ebp-10h],eax"
);
// LINE 99:
	asm( 
"	      00480834    mov eax,ds:[5C28C8h]"
"	      00480839    mov [ebp-1Ch],eax"
);
// LINE 100:
	asm( 
"	      0048083c    mov dword ptr [ebp-2Ch],23h"
);
// LINE 101:
	asm( 
"	      00480843    mov dword ptr [ebp-28h],4815DDh"
);
// LINE 102:
	asm( 
"	      0048084a    mov dword ptr [ebp-20h],4"
);
// LINE 103:
	asm( 
"	      00480851    mov dword ptr [ebp-24h],0"
);
// LINE 104:
	asm( 
"	      00480858    push 7F00h"
"	      0048085d    push 0"
"	      0048085f    call dword ptr ds:[6C381Ch]"
"	      00480865    mov [ebp-18h],eax"
);
// LINE 105:
	asm( 
"	      00480868    lea eax,[ebp-2Ch]"
"	      0048086b    push eax"
"	      0048086c    call dword ptr ds:[6C3814h]"
);
// LINE 109:
	asm( 
"	      00480872    mov dword ptr [ebp-30h],0"
);
// LINE 110:
	asm( 
"	      00480879    test byte ptr [ebp+10h],1"
"	      0048087d    je near ptr 0048088Fh"
);
// LINE 111:
	asm( 
"	      00480883    or dword ptr [ebp-30h],40000h"
);
// LINE 112:
	asm( 
"	      0048088a    jmp near ptr 004808ACh"
"	      0048088f    test byte ptr [ebp+10h],4"
"	      00480893    je near ptr 004808A5h"
);
// LINE 113:
	asm( 
"	      00480899    or dword ptr [ebp-30h],800000h"
);
// LINE 114:
	asm( 
"	      004808a0    jmp near ptr 004808ACh"
);
// LINE 115:
	asm( 
"	      004808a5    or dword ptr [ebp-30h],80000000h"
);
// LINE 116:
	asm( 
"	      004808ac    test byte ptr [ebp+10h],2"
"	      004808b0    je near ptr 004808BDh"
);
// LINE 117:
	asm( 
"	      004808b6    or dword ptr [ebp-30h],0C00000h"
);
// LINE 118:
	asm( 
"	      004808bd    test byte ptr [ebp+10h],8"
"	      004808c1    je near ptr 004808CEh"
);
// LINE 119:
	asm( 
"	      004808c7    or dword ptr [ebp-30h],0C80000h"
);
// LINE 120:
	asm( 
"	      004808ce    test byte ptr [ebp+10h],10h"
"	      004808d2    je near ptr 004808DFh"
);
// LINE 121:
	asm( 
"	      004808d8    or dword ptr [ebp-30h],30000h"
);
// LINE 124:
	asm( 
"	      004808df    mov dword ptr [ebp-48h],0"
"	      004808e6    mov dword ptr [ebp-44h],0"
"	      004808ed    mov eax,[ebp+8]"
"	      004808f0    mov [ebp-40h],eax"
"	      004808f3    mov eax,[ebp+0Ch]"
"	      004808f6    mov [ebp-3Ch],eax"
);
// LINE 125:
	asm( 
"	      004808f9    push 0"
"	      004808fb    mov eax,[ebp-30h]"
"	      004808fe    push eax"
"	      004808ff    lea eax,[ebp-48h]"
"	      00480902    push eax"
"	      00480903    call dword ptr ds:[6C3890h]"
);
// LINE 128:
	asm( 
"	      00480909    push 0"
"	      0048090b    call dword ptr ds:[6C3810h]"
"	      00480911    mov [ebp-34h],eax"
"	      00480914    jmp near ptr 00480919h"
);
// LINE 129:
	asm( 
"	      00480919    push 1"
"	      0048091b    call dword ptr ds:[6C3810h]"
"	      00480921    mov [ebp-4],eax"
"	      00480924    jmp near ptr 00480929h"
);
// LINE 131:
	asm( 
"	      00480929    cmp dword ptr [ebp+8],0"
"	      0048092d    jne near ptr 0048093Eh"
);
// LINE 132:
	asm( 
"	      00480933    mov eax,[ebp-34h]"
"	      00480936    mov [ebp+8],eax"
);
// LINE 133:
	asm( 
"	      00480939    jmp near ptr 00480947h"
);
// LINE 134:
	asm( 
"	      0048093e    mov eax,[ebp-40h]"
"	      00480941    sub eax,[ebp-48h]"
"	      00480944    mov [ebp+8],eax"
);
// LINE 135:
	asm( 
"	      00480947    cmp dword ptr [ebp+0Ch],0"
"	      0048094b    jne near ptr 0048095Ch"
);
// LINE 136:
	asm( 
"	      00480951    mov eax,[ebp-4]"
"	      00480954    mov [ebp+0Ch],eax"
);
// LINE 137:
	asm( 
"	      00480957    jmp near ptr 00480965h"
);
// LINE 138:
	asm( 
"	      0048095c    mov eax,[ebp-3Ch]"
"	      0048095f    sub eax,[ebp-44h]"
"	      00480962    mov [ebp+0Ch],eax"
);
// LINE 141:
	asm( 
"	      00480965    mov eax,[ebp+8]"
"	      00480968    cmp [ebp-34h],eax"
"	      0048096b    jae near ptr 00480977h"
);
// LINE 142:
	asm( 
"	      00480971    mov eax,[ebp-34h]"
"	      00480974    mov [ebp+8],eax"
);
// LINE 143:
	asm( 
"	      00480977    mov eax,[ebp+0Ch]"
"	      0048097a    cmp [ebp-4],eax"
"	      0048097d    jae near ptr 00480989h"
);
// LINE 144:
	asm( 
"	      00480983    mov eax,[ebp-4]"
"	      00480986    mov [ebp+0Ch],eax"
);
// LINE 147:
	asm( 
"	      00480989    mov eax,[ebp-34h]"
"	      0048098c    shr eax,1"
"	      0048098f    mov ecx,[ebp+8]"
"	      00480992    shr ecx,1"
"	      00480995    sub eax,ecx"
"	      00480997    mov [ebp-50h],eax"
);
// LINE 148:
	asm( 
"	      0048099a    mov eax,[ebp-4]"
"	      0048099d    shr eax,1"
"	      004809a0    mov ecx,[ebp+0Ch]"
"	      004809a3    shr ecx,1"
"	      004809a6    sub eax,ecx"
"	      004809a8    mov [ebp-4Ch],eax"
);
// LINE 152:
	asm( 
"	      004809ab    push 0"
"	      004809ad    mov eax,ds:[5C28C8h]"
"	      004809b2    push eax"
"	      004809b3    push 0"
"	      004809b5    push 0"
"	      004809b7    mov eax,[ebp+0Ch]"
"	      004809ba    push eax"
"	      004809bb    mov eax,[ebp+8]"
"	      004809be    push eax"
"	      004809bf    mov eax,[ebp-4Ch]"
"	      004809c2    push eax"
"	      004809c3    mov eax,[ebp-50h]"
"	      004809c6    push eax"
"	      004809c7    mov eax,[ebp-30h]"
"	      004809ca    push eax"
"	      004809cb    mov eax,[ebp+18h]"
"	      004809ce    push eax"
"	      004809cf    push 599AB8h"
"	      004809d4    push 0"
"	      004809d6    call dword ptr ds:[6C3808h]"
"	      004809dc    mov ecx,[ebp-474h]"
"	      004809e2    mov [ecx+18h],eax"
);
// LINE 155:
	asm( 
"	      004809e5    mov eax,[ebp-474h]"
"	      004809eb    cmp dword ptr [eax+18h],0"
"	      004809ef    je near ptr 00480CEFh"
);
// LINE 156:
	asm( 
"	      004809f5    lea eax,[ebp-48h]"
"	      004809f8    push eax"
"	      004809f9    mov eax,[ebp-474h]"
"	      004809ff    mov eax,[eax+18h]"
"	      00480a02    push eax"
"	      00480a03    call dword ptr ds:[6C382Ch]"
);
// LINE 157:
	asm( 
"	      00480a09    mov eax,[ebp-40h]"
"	      00480a0c    sub eax,[ebp-48h]"
"	      00480a0f    mov ecx,[ebp-474h]"
"	      00480a15    mov [ecx+8],eax"
);
// LINE 158:
	asm( 
"	      00480a18    mov eax,[ebp-3Ch]"
"	      00480a1b    sub eax,[ebp-44h]"
"	      00480a1e    mov ecx,[ebp-474h]"
"	      00480a24    mov [ecx+4],eax"
);
// LINE 165:
	asm( 
"	      00480a27    mov word ptr [ebp-46Ch],300h"
"	      00480a30    mov word ptr [ebp-46Ah],100h"
"	      00480a39    lea edi,[ebp-468h]"
"	      00480a3f    xor eax,eax"
"	      00480a41    mov ecx,100h"
"	      00480a46    rep stosd"
);
// LINE 169:
	asm( 
"	      00480a48    mov dword ptr [ebp-64h],14h"
);
// LINE 170:
	asm( 
"	      00480a4f    mov dword ptr [ebp-60h],1"
);
// LINE 172:
	asm( 
"	      00480a56    push 0"
"	      00480a58    call dword ptr ds:[6C3850h]"
"	      00480a5e    mov [ebp-68h],eax"
);
// LINE 173:
	asm( 
"	      00480a61    cmp dword ptr [ebp-68h],0"
"	      00480a65    je near ptr 00480AABh"
);
// LINE 174:
	asm( 
"	      00480a6b    mov eax,[ebp-68h]"
"	      00480a6e    push eax"
"	      00480a6f    call dword ptr ds:[6C3588h]"
"	      00480a75    mov [ebp-60h],eax"
);
// LINE 175:
	asm( 
"	      00480a78    push 18h"
"	      00480a7a    mov eax,[ebp-68h]"
"	      00480a7d    push eax"
"	      00480a7e    call dword ptr ds:[6C3590h]"
"	      00480a84    mov [ebp-64h],eax"
);
// LINE 176:
	asm( 
"	      00480a87    lea eax,[ebp-468h]"
"	      00480a8d    push eax"
"	      00480a8e    push 100h"
"	      00480a93    push 0"
"	      00480a95    mov eax,[ebp-68h]"
"	      00480a98    push eax"
"	      00480a99    call dword ptr ds:[6C3580h]"
);
// LINE 177:
	asm( 
"	      00480a9f    mov eax,[ebp-68h]"
"	      00480aa2    push eax"
"	      00480aa3    push 0"
"	      00480aa5    call dword ptr ds:[6C384Ch]"
);
// LINE 181:
	asm( 
"	      00480aab    mov eax,[ebp-64h]"
"	      00480aae    cdq"
"	      00480aaf    sub eax,edx"
"	      00480ab1    sar eax,1"
"	      00480ab4    mov [ebp-58h],eax"
);
// LINE 182:
	asm( 
"	      00480ab7    mov ecx,100h"
"	      00480abc    mov eax,[ebp-64h]"
"	      00480abf    cdq"
"	      00480ac0    sub eax,edx"
"	      00480ac2    sar eax,1"
"	      00480ac5    sub ecx,eax"
"	      00480ac7    mov [ebp-5Ch],ecx"
);
// LINE 184:
	asm( 
"	      00480aca    cmp dword ptr [ebp-60h],2"
"	      00480ace    jne near ptr 00480AE2h"
);
// LINE 185:
	asm( 
"	      00480ad4    mov dword ptr [ebp-58h],1"
);
// LINE 186:
	asm( 
"	      00480adb    mov dword ptr [ebp-5Ch],0FFh"
);
// LINE 192:
	asm( 
"	      00480ae2    mov dword ptr [ebp-54h],0"
"	      00480ae9    jmp near ptr 00480AF1h"
"	      00480aee    inc dword ptr [ebp-54h]"
"	      00480af1    mov eax,[ebp-58h]"
"	      00480af4    cmp [ebp-54h],eax"
"	      00480af7    jge near ptr 00480B0Dh"
);
// LINE 193:
	asm( 
"	      00480afd    mov eax,[ebp-54h]"
"	      00480b00    mov byte ptr [ebp+eax*4-465h],0"
"	      00480b08    jmp near ptr 00480AEEh"
);
// LINE 196:
	asm( 
"	      00480b0d    cmp dword ptr [ebp+14h],0"
"	      00480b11    je near ptr 00480B7Bh"
);
// LINE 197:
	asm( 
"	      00480b17    jmp near ptr 00480B1Fh"
"	      00480b1c    inc dword ptr [ebp-54h]"
"	      00480b1f    mov eax,[ebp-5Ch]"
"	      00480b22    cmp [ebp-54h],eax"
"	      00480b25    jge near ptr 00480B76h"
);
// LINE 198:
	asm( 
"	      00480b2b    mov eax,[ebp-54h]"
"	      00480b2e    mov ecx,[ebp+14h]"
"	      00480b31    mov al,[ecx+eax*4]"
"	      00480b34    mov ecx,[ebp-54h]"
"	      00480b37    mov [ebp+ecx*4-466h],al"
);
// LINE 199:
	asm( 
"	      00480b3e    mov eax,[ebp-54h]"
"	      00480b41    mov ecx,[ebp+14h]"
"	      00480b44    mov al,[ecx+eax*4+1]"
"	      00480b48    mov ecx,[ebp-54h]"
"	      00480b4b    mov [ebp+ecx*4-467h],al"
);
// LINE 200:
	asm( 
"	      00480b52    mov eax,[ebp-54h]"
"	      00480b55    mov ecx,[ebp+14h]"
"	      00480b58    mov al,[ecx+eax*4+2]"
"	      00480b5c    mov ecx,[ebp-54h]"
"	      00480b5f    mov [ebp+ecx*4-468h],al"
);
// LINE 201:
	asm( 
"	      00480b66    mov eax,[ebp-54h]"
"	      00480b69    mov byte ptr [ebp+eax*4-465h],5"
);
// LINE 202:
	asm( 
"	      00480b71    jmp near ptr 00480B1Ch"
);
// LINE 204:
	asm( 
"	      00480b76    jmp near ptr 00480BC6h"
);
// LINE 205:
	asm( 
"	      00480b7b    jmp near ptr 00480B83h"
"	      00480b80    inc dword ptr [ebp-54h]"
"	      00480b83    mov eax,[ebp-5Ch]"
"	      00480b86    cmp [ebp-54h],eax"
"	      00480b89    jge near ptr 00480BC6h"
);
// LINE 206:
	asm( 
"	      00480b8f    mov al,[ebp-54h]"
"	      00480b92    mov ecx,[ebp-54h]"
"	      00480b95    mov [ebp+ecx*4-466h],al"
);
// LINE 207:
	asm( 
"	      00480b9c    mov al,[ebp-54h]"
"	      00480b9f    mov ecx,[ebp-54h]"
"	      00480ba2    mov [ebp+ecx*4-467h],al"
);
// LINE 208:
	asm( 
"	      00480ba9    mov al,[ebp-54h]"
"	      00480bac    mov ecx,[ebp-54h]"
"	      00480baf    mov [ebp+ecx*4-468h],al"
);
// LINE 209:
	asm( 
"	      00480bb6    mov eax,[ebp-54h]"
"	      00480bb9    mov byte ptr [ebp+eax*4-465h],5"
);
// LINE 210:
	asm( 
"	      00480bc1    jmp near ptr 00480B80h"
);
// LINE 214:
	asm( 
"	      00480bc6    jmp near ptr 00480BCEh"
"	      00480bcb    inc dword ptr [ebp-54h]"
"	      00480bce    cmp dword ptr [ebp-54h],100h"
"	      00480bd5    jge near ptr 00480BEBh"
);
// LINE 215:
	asm( 
"	      00480bdb    mov eax,[ebp-54h]"
"	      00480bde    mov byte ptr [ebp+eax*4-465h],0"
"	      00480be6    jmp near ptr 00480BCBh"
);
// LINE 218:
	asm( 
"	      00480beb    lea eax,[ebp-46Ch]"
"	      00480bf1    push eax"
"	      00480bf2    call dword ptr ds:[6C357Ch]"
"	      00480bf8    mov ecx,[ebp-474h]"
"	      00480bfe    mov [ecx+1Ch],eax"
"	      00480c01    mov eax,[ebp-474h]"
"	      00480c07    mov eax,[eax+18h]"
"	      00480c0a    mov [ebp-470h],eax"
);
// LINE 222:
	asm( 
"	      00480c10    mov eax,[ebp-474h]"
"	      00480c16    push eax"
"	      00480c17    push 0"
"	      00480c19    mov eax,[ebp-470h]"
"	      00480c1f    push eax"
"	      00480c20    call dword ptr ds:[6C380Ch]"
"	      00480c26    jmp near ptr 00480C2Bh"
);
// LINE 224:
	asm( 
"	      00480c2b    push 1"
"	      00480c2d    mov eax,[ebp-474h]"
"	      00480c33    mov eax,[eax+18h]"
"	      00480c36    push eax"
"	      00480c37    call dword ptr ds:[6C3820h]"
);
// LINE 225:
	asm( 
"	      00480c3d    mov eax,[ebp-474h]"
"	      00480c43    mov eax,[eax+18h]"
"	      00480c46    push eax"
"	      00480c47    call dword ptr ds:[6C3864h]"
);
// LINE 228:
	asm( 
"	      00480c4d    mov eax,[ebp-474h]"
"	      00480c53    mov eax,[eax+18h]"
"	      00480c56    push eax"
"	      00480c57    call dword ptr ds:[6C3850h]"
"	      00480c5d    mov [ebp-68h],eax"
);
// LINE 229:
	asm( 
"	      00480c60    cmp dword ptr [ebp-68h],0"
"	      00480c64    je near ptr 00480CEFh"
);
// LINE 230:
	asm( 
"	      00480c6a    push 1"
"	      00480c6c    mov eax,[ebp-68h]"
"	      00480c6f    push eax"
"	      00480c70    call dword ptr ds:[6C3584h]"
);
// LINE 231:
	asm( 
"	      00480c76    push 1"
"	      00480c78    mov eax,[ebp-68h]"
"	      00480c7b    push eax"
"	      00480c7c    call dword ptr ds:[6C3574h]"
);
// LINE 232:
	asm( 
"	      00480c82    push 0"
"	      00480c84    mov eax,[ebp-474h]"
"	      00480c8a    mov eax,[eax+1Ch]"
"	      00480c8d    push eax"
"	      00480c8e    mov eax,[ebp-68h]"
"	      00480c91    push eax"
"	      00480c92    call dword ptr ds:[6C3570h]"
);
// LINE 233:
	asm( 
"	      00480c98    mov eax,[ebp-68h]"
"	      00480c9b    push eax"
"	      00480c9c    call dword ptr ds:[6C3578h]"
);
// LINE 235:
	asm( 
"	      00480ca2    lea eax,[ebp-468h]"
"	      00480ca8    push eax"
"	      00480ca9    mov eax,[ebp-474h]"
"	      00480caf    mov eax,[eax+1Ch]"
"	      00480cb2    push eax"
"	      00480cb3    mov eax,[ebp-68h]"
"	      00480cb6    push eax"
"	      00480cb7    call 0048132Bh"
"	      00480cbc    add esp,0Ch"
"	      00480cbf    test eax,eax"
"	      00480cc1    jne near ptr 00480CDBh"
);
// LINE 236:
	asm( 
"	      00480cc7    push 0"
"	      00480cc9    push 599AC4h"
"	      00480cce    push 599ACCh"
"	      00480cd3    push 0"
"	      00480cd5    call dword ptr ds:[6C3870h]"
);
// LINE 238:
	asm( 
"	      00480cdb    mov eax,[ebp-68h]"
"	      00480cde    push eax"
"	      00480cdf    mov eax,[ebp-474h]"
"	      00480ce5    mov eax,[eax+18h]"
"	      00480ce8    push eax"
"	      00480ce9    call dword ptr ds:[6C384Ch]"
);
// LINE 241:
	asm( 
"	      00480cef    jmp near ptr 00480CF4h"
"	      00480cf4    mov eax,[ebp-474h]"
"	      00480cfa    pop edi"
"	      00480cfb    pop esi"
"	      00480cfc    pop ebx"
"	      00480cfd    leave"
"	      00480cfe    ret 14h"
);
}

// FUNCTION: COPTER_D 0x00480d01
void CSparkalWindow::~CSparkalWindow() {
// LINE 248:
	asm( 
"	      00480d01    push ebp"
"	      00480d02    mov ebp,esp"
"	      00480d04    sub esp,0Ch"
"	      00480d07    push ebx"
"	      00480d08    push esi"
"	      00480d09    push edi"
"	      00480d0a    mov [ebp-0Ch],ecx"
"	      00480d0d    mov eax,[ebp-0Ch]"
"	      00480d10    mov dword ptr [eax],590EF8h"
);
// LINE 251:
	asm( 
"	      00480d16    mov eax,[ebp-0Ch]"
"	      00480d19    cmp dword ptr [eax+18h],0"
"	      00480d1d    je near ptr 00480D4Ch"
"	      00480d23    mov eax,[ebp-0Ch]"
"	      00480d26    mov eax,[eax+18h]"
"	      00480d29    mov [ebp-8],eax"
);
// LINE 254:
	asm( 
"	      00480d2c    push 0"
"	      00480d2e    push 0"
"	      00480d30    mov eax,[ebp-8]"
"	      00480d33    push eax"
"	      00480d34    call dword ptr ds:[6C380Ch]"
"	      00480d3a    jmp near ptr 00480D3Fh"
);
// LINE 255:
	asm( 
"	      00480d3f    mov eax,[ebp-0Ch]"
"	      00480d42    mov eax,[eax+18h]"
"	      00480d45    push eax"
"	      00480d46    call dword ptr ds:[6C3804h]"
);
// LINE 257:
	asm( 
"	      00480d4c    mov eax,[ebp-0Ch]"
"	      00480d4f    cmp dword ptr [eax+1Ch],0"
"	      00480d53    je near ptr 00480D66h"
);
// LINE 258:
	asm( 
"	      00480d59    mov eax,[ebp-0Ch]"
"	      00480d5c    mov eax,[eax+1Ch]"
"	      00480d5f    push eax"
"	      00480d60    call dword ptr ds:[6C358Ch]"
);
// LINE 259:
	asm( 
"	      00480d66    mov dword ptr [ebp-4],0"
"	      00480d6d    jmp near ptr 00480D75h"
"	      00480d72    inc dword ptr [ebp-4]"
"	      00480d75    cmp dword ptr [ebp-4],10h"
"	      00480d79    jge near ptr 00480DA6h"
);
// LINE 260:
	asm( 
"	      00480d7f    mov eax,[ebp-4]"
"	      00480d82    mov ecx,[ebp-0Ch]"
"	      00480d85    cmp dword ptr [ecx+eax*4+28h],0"
"	      00480d8a    je near ptr 00480DA1h"
);
// LINE 261:
	asm( 
"	      00480d90    mov eax,[ebp-4]"
"	      00480d93    mov ecx,[ebp-0Ch]"
"	      00480d96    mov eax,[ecx+eax*4+28h]"
"	      00480d9a    push eax"
"	      00480d9b    call dword ptr ds:[6C358Ch]"
);
// LINE 262:
	asm( 
"	      00480da1    jmp near ptr 00480D72h"
);
// LINE 267:
	asm( 
"	      00480da6    mov eax,[ebp-0Ch]"
"	      00480da9    cmp dword ptr [eax+24h],0"
"	      00480dad    je near ptr 00480DC0h"
);
// LINE 268:
	asm( 
"	      00480db3    mov eax,[ebp-0Ch]"
"	      00480db6    mov eax,[eax+24h]"
"	      00480db9    push eax"
"	      00480dba    call dword ptr ds:[6C358Ch]"
);
// LINE 269:
	asm( 
"	      00480dc0    jmp near ptr 00480DC5h"
"	      00480dc5    pop edi"
"	      00480dc6    pop esi"
"	      00480dc7    pop ebx"
"	      00480dc8    leave"
"	      00480dc9    ret"
);
}

// FUNCTION: COPTER_D 0x00480dca
unsigned long CSparkalWindow::GetClientSize(long *, long *) {
// LINE 276:
	asm( 
"	      00480dca    push ebp"
"	      00480dcb    mov ebp,esp"
"	      00480dcd    sub esp,18h"
"	      00480dd0    push ebx"
"	      00480dd1    push esi"
"	      00480dd2    push edi"
"	      00480dd3    mov [ebp-18h],ecx"
);
// LINE 277:
	asm( 
"	      00480dd6    cmp dword ptr [ebp+8],0"
"	      00480dda    je near ptr 00480DEAh"
"	      00480de0    cmp dword ptr [ebp+0Ch],0"
"	      00480de4    jne near ptr 00480E06h"
"	      00480dea    push 115h"
"	      00480def    push 599AF0h"
"	      00480df4    push 599B18h"
"	      00480df9    call 0056DA30h"
"	      00480dfe    add esp,0Ch"
"	      00480e01    jmp near ptr 00480E0Bh"
"	      00480e06    jmp near ptr 00480E0Bh"
);
// LINE 279:
	asm( 
"	      00480e0b    mov dword ptr [ebp-4],0"
);
// LINE 281:
	asm( 
"	      00480e12    mov eax,[ebp-18h]"
"	      00480e15    cmp dword ptr [eax+18h],0"
"	      00480e19    je near ptr 00480E4Bh"
);
// LINE 283:
	asm( 
"	      00480e1f    lea eax,[ebp-14h]"
"	      00480e22    push eax"
"	      00480e23    mov eax,[ebp-18h]"
"	      00480e26    mov eax,[eax+18h]"
"	      00480e29    push eax"
"	      00480e2a    call dword ptr ds:[6C382Ch]"
);
// LINE 284:
	asm( 
"	      00480e30    mov eax,[ebp-0Ch]"
"	      00480e33    sub eax,[ebp-14h]"
"	      00480e36    mov ecx,[ebp+8]"
"	      00480e39    mov [ecx],eax"
);
// LINE 285:
	asm( 
"	      00480e3b    mov eax,[ebp-8]"
"	      00480e3e    sub eax,[ebp-10h]"
"	      00480e41    mov ecx,[ebp+0Ch]"
"	      00480e44    mov [ecx],eax"
);
// LINE 287:
	asm( 
"	      00480e46    jmp near ptr 00480E65h"
);
// LINE 288:
	asm( 
"	      00480e4b    mov eax,[ebp+0Ch]"
"	      00480e4e    mov dword ptr [eax],0"
"	      00480e54    mov eax,[ebp+0Ch]"
"	      00480e57    mov eax,[eax]"
"	      00480e59    mov ecx,[ebp+8]"
"	      00480e5c    mov [ecx],eax"
);
// LINE 289:
	asm( 
"	      00480e5e    mov dword ptr [ebp-4],80000000h"
);
// LINE 292:
	asm( 
"	      00480e65    mov eax,[ebp-4]"
"	      00480e68    jmp near ptr 00480E6Dh"
);
// LINE 293:
	asm( 
"	      00480e6d    pop edi"
"	      00480e6e    pop esi"
"	      00480e6f    pop ebx"
"	      00480e70    leave"
"	      00480e71    ret 8"
);
}

// FUNCTION: COPTER_D 0x00480e74
unsigned long CSparkalWindow::SetCursor(unsigned long) {
// LINE 308:
	asm( 
"	      00480e74    push ebp"
"	      00480e75    mov ebp,esp"
"	      00480e77    sub esp,0Ch"
"	      00480e7a    push ebx"
"	      00480e7b    push esi"
"	      00480e7c    push edi"
"	      00480e7d    mov [ebp-0Ch],ecx"
);
// LINE 309:
	asm( 
"	      00480e80    mov dword ptr [ebp-4],0"
);
// LINE 312:
	asm( 
"	      00480e87    cmp dword ptr [ebp+8],0"
"	      00480e8b    je near ptr 00480EDBh"
);
// LINE 313:
	asm( 
"	      00480e91    mov eax,[ebp+8]"
"	      00480e94    and eax,0FFFFh"
"	      00480e99    push eax"
"	      00480e9a    mov eax,ds:[5C28C8h]"
"	      00480e9f    push eax"
"	      00480ea0    call dword ptr ds:[6C3818h]"
"	      00480ea6    mov [ebp-8],eax"
);
// LINE 314:
	asm( 
"	      00480ea9    cmp dword ptr [ebp-8],0"
"	      00480ead    je near ptr 00480ECDh"
"	      00480eb3    mov eax,[ebp-0Ch]"
"	      00480eb6    cmp dword ptr [eax+24h],0"
"	      00480eba    je near ptr 00480ECDh"
);
// LINE 315:
	asm( 
"	      00480ec0    mov eax,[ebp-0Ch]"
"	      00480ec3    mov eax,[eax+24h]"
"	      00480ec6    push eax"
"	      00480ec7    call dword ptr ds:[6C358Ch]"
);
// LINE 316:
	asm( 
"	      00480ecd    mov eax,[ebp-8]"
"	      00480ed0    mov ecx,[ebp-0Ch]"
"	      00480ed3    mov [ecx+24h],eax"
);
// LINE 318:
	asm( 
"	      00480ed6    jmp near ptr 00480EEBh"
);
// LINE 319:
	asm( 
"	      00480edb    push 7F00h"
"	      00480ee0    push 0"
"	      00480ee2    call dword ptr ds:[6C3818h]"
"	      00480ee8    mov [ebp-8],eax"
);
// LINE 321:
	asm( 
"	      00480eeb    mov eax,[ebp-8]"
"	      00480eee    mov ecx,[ebp-0Ch]"
"	      00480ef1    mov [ecx+20h],eax"
);
// LINE 323:
	asm( 
"	      00480ef4    cmp dword ptr [ebp-8],0"
"	      00480ef8    je near ptr 00480F1Ch"
);
// LINE 324:
	asm( 
"	      00480efe    mov eax,[ebp-8]"
"	      00480f01    push eax"
"	      00480f02    call dword ptr ds:[6C388Ch]"
"	      00480f08    test eax,eax"
"	      00480f0a    jne near ptr 00480F17h"
);
// LINE 325:
	asm( 
"	      00480f10    mov dword ptr [ebp-4],80000000h"
);
// LINE 327:
	asm( 
"	      00480f17    jmp near ptr 00480F23h"
);
// LINE 328:
	asm( 
"	      00480f1c    mov dword ptr [ebp-4],80000007h"
);
// LINE 329:
	asm( 
"	      00480f23    mov eax,[ebp-4]"
"	      00480f26    jmp near ptr 00480F2Bh"
);
// LINE 330:
	asm( 
"	      00480f2b    pop edi"
"	      00480f2c    pop esi"
"	      00480f2d    pop ebx"
"	      00480f2e    leave"
"	      00480f2f    ret 4"
);
}

// FUNCTION: COPTER_D 0x00480f32
unsigned long CSparkalWindow::SetCursorFromIndex(int32_t) {
// LINE 337:
	asm( 
"	      00480f32    push ebp"
"	      00480f33    mov ebp,esp"
"	      00480f35    sub esp,8"
"	      00480f38    push ebx"
"	      00480f39    push esi"
"	      00480f3a    push edi"
"	      00480f3b    mov [ebp-8],ecx"
);
// LINE 338:
	asm( 
"	      00480f3e    mov dword ptr [ebp-4],0"
);
// LINE 340:
	asm( 
"	      00480f45    mov eax,[ebp+8]"
"	      00480f48    mov ecx,[ebp-8]"
"	      00480f4b    mov eax,[ecx+eax*4+28h]"
"	      00480f4f    mov ecx,[ebp-8]"
"	      00480f52    mov [ecx+20h],eax"
);
// LINE 341:
	asm( 
"	      00480f55    mov eax,[ebp-8]"
"	      00480f58    mov eax,[eax+20h]"
"	      00480f5b    push eax"
"	      00480f5c    call dword ptr ds:[6C388Ch]"
"	      00480f62    test eax,eax"
"	      00480f64    jne near ptr 00480F71h"
);
// LINE 342:
	asm( 
"	      00480f6a    mov dword ptr [ebp-4],80000007h"
);
// LINE 344:
	asm( 
"	      00480f71    mov eax,[ebp-4]"
"	      00480f74    jmp near ptr 00480F79h"
);
// LINE 345:
	asm( 
"	      00480f79    pop edi"
"	      00480f7a    pop esi"
"	      00480f7b    pop ebx"
"	      00480f7c    leave"
"	      00480f7d    ret 4"
);
}

// FUNCTION: COPTER_D 0x00480f80
unsigned long CSparkalWindow::LoadGameCursors() {
// LINE 352:
	asm( 
"	      00480f80    push ebp"
"	      00480f81    mov ebp,esp"
"	      00480f83    sub esp,4"
"	      00480f86    push ebx"
"	      00480f87    push esi"
"	      00480f88    push edi"
"	      00480f89    mov [ebp-4],ecx"
);
// LINE 353:
	asm( 
"	      00480f8c    mov eax,80000007h"
"	      00480f91    jmp near ptr 00480F96h"
);
// LINE 354:
	asm( 
"	      00480f96    pop edi"
"	      00480f97    pop esi"
"	      00480f98    pop ebx"
"	      00480f99    leave"
"	      00480f9a    ret"
);
}

// FUNCTION: COPTER_D 0x00480f9b
void CSparkalWindow::FreeGameCursors() {
// LINE 360:
	asm( 
"	      00480f9b    push ebp"
"	      00480f9c    mov ebp,esp"
"	      00480f9e    sub esp,4"
"	      00480fa1    push ebx"
"	      00480fa2    push esi"
"	      00480fa3    push edi"
"	      00480fa4    mov [ebp-4],ecx"
);
// LINE 362:
	asm( 
"	      00480fa7    jmp near ptr 00480FACh"
"	      00480fac    pop edi"
"	      00480fad    pop esi"
"	      00480fae    pop ebx"
"	      00480faf    leave"
"	      00480fb0    ret"
);
}

// FUNCTION: COPTER_D 0x00480fb1
unsigned long CSparkalWindow::DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *) {
// LINE 372:
	asm( 
"	      00480fb1    push ebp"
"	      00480fb2    mov ebp,esp"
"	      00480fb4    sub esp,2Ch"
"	      00480fb7    push ebx"
"	      00480fb8    push esi"
"	      00480fb9    push edi"
"	      00480fba    mov [ebp-2Ch],ecx"
);
// LINE 373:
	asm( 
"	      00480fbd    mov eax,[ebp-2Ch]"
"	      00480fc0    cmp dword ptr [eax+18h],0"
"	      00480fc4    jne near ptr 00480FE6h"
"	      00480fca    push 175h"
"	      00480fcf    push 599B2Ch"
"	      00480fd4    push 599B54h"
"	      00480fd9    call 0056DA30h"
"	      00480fde    add esp,0Ch"
"	      00480fe1    jmp near ptr 00480FEBh"
"	      00480fe6    jmp near ptr 00480FEBh"
);
// LINE 376:
	asm( 
"	      00480feb    mov eax,[ebp-2Ch]"
"	      00480fee    mov eax,[eax+18h]"
"	      00480ff1    push eax"
"	      00480ff2    call dword ptr ds:[6C3850h]"
"	      00480ff8    mov [ebp-28h],eax"
);
// LINE 380:
	asm( 
"	      00480ffb    mov eax,[ebp+8]"
"	      00480ffe    push eax"
"	      00480fff    call dword ptr ds:[6C3608h]"
"	      00481005    mov [ebp-20h],eax"
);
// LINE 383:
	asm( 
"	      00481008    lea eax,[ebp-18h]"
"	      0048100b    push eax"
"	      0048100c    mov eax,[ebp-20h]"
"	      0048100f    push eax"
"	      00481010    mov eax,[ebp+8]"
"	      00481013    push eax"
"	      00481014    mov eax,[ebp-28h]"
"	      00481017    push eax"
"	      00481018    call dword ptr ds:[6C35A4h]"
);
// LINE 389:
	asm( 
"	      0048101e    test byte ptr [ebp+0Ch],1"
"	      00481022    je near ptr 00481041h"
);
// LINE 390:
	asm( 
"	      00481028    mov ecx,[ebp+10h]"
"	      0048102b    mov eax,[ebp-18h]"
"	      0048102e    cdq"
"	      0048102f    sub eax,edx"
"	      00481031    sar eax,1"
"	      00481034    sub ecx,eax"
"	      00481036    sub ecx,2"
"	      00481039    mov [ebp-10h],ecx"
);
// LINE 391:
	asm( 
"	      0048103c    jmp near ptr 0048104Ah"
);
// LINE 392:
	asm( 
"	      00481041    mov eax,[ebp+10h]"
"	      00481044    sub eax,2"
"	      00481047    mov [ebp-10h],eax"
);
// LINE 394:
	asm( 
"	      0048104a    test byte ptr [ebp+0Ch],2"
"	      0048104e    je near ptr 0048106Dh"
);
// LINE 395:
	asm( 
"	      00481054    mov ecx,[ebp+14h]"
"	      00481057    mov eax,[ebp-14h]"
"	      0048105a    cdq"
"	      0048105b    sub eax,edx"
"	      0048105d    sar eax,1"
"	      00481060    sub ecx,eax"
"	      00481062    sub ecx,2"
"	      00481065    mov [ebp-0Ch],ecx"
);
// LINE 396:
	asm( 
"	      00481068    jmp near ptr 00481076h"
);
// LINE 397:
	asm( 
"	      0048106d    mov eax,[ebp+14h]"
"	      00481070    sub eax,2"
"	      00481073    mov [ebp-0Ch],eax"
);
// LINE 399:
	asm( 
"	      00481076    mov eax,[ebp-18h]"
"	      00481079    add eax,[ebp-10h]"
"	      0048107c    add eax,2"
"	      0048107f    mov [ebp-8],eax"
);
// LINE 400:
	asm( 
"	      00481082    mov eax,[ebp-0Ch]"
"	      00481085    add eax,[ebp-14h]"
"	      00481088    add eax,2"
"	      0048108b    mov [ebp-4],eax"
);
// LINE 404:
	asm( 
"	      0048108e    lea eax,[ebp-24h]"
"	      00481091    push eax"
"	      00481092    lea eax,[ebp-1Ch]"
"	      00481095    push eax"
"	      00481096    mov eax,[ebp-2Ch]"
"	      00481099    mov eax,[eax]"
"	      0048109b    mov ecx,[ebp-2Ch]"
"	      0048109e    call dword ptr [eax+4]"
);
// LINE 407:
	asm( 
"	      004810a1    mov eax,[ebp-1Ch]"
"	      004810a4    cmp [ebp-8],eax"
"	      004810a7    jl near ptr 004810C0h"
);
// LINE 409:
	asm( 
"	      004810ad    mov eax,[ebp-1Ch]"
"	      004810b0    dec eax"
"	      004810b1    mov [ebp-8],eax"
);
// LINE 410:
	asm( 
"	      004810b4    mov eax,[ebp-8]"
"	      004810b7    sub eax,[ebp-18h]"
"	      004810ba    sub eax,4"
"	      004810bd    mov [ebp-10h],eax"
);
// LINE 412:
	asm( 
"	      004810c0    cmp dword ptr [ebp-10h],0"
"	      004810c4    jge near ptr 004810DAh"
);
// LINE 414:
	asm( 
"	      004810ca    mov eax,[ebp-18h]"
"	      004810cd    add eax,4"
"	      004810d0    mov [ebp-8],eax"
);
// LINE 415:
	asm( 
"	      004810d3    mov dword ptr [ebp-10h],0"
);
// LINE 417:
	asm( 
"	      004810da    cmp dword ptr [ebp-0Ch],0"
"	      004810de    jge near ptr 004810F4h"
);
// LINE 419:
	asm( 
"	      004810e4    mov eax,[ebp-14h]"
"	      004810e7    add eax,4"
"	      004810ea    mov [ebp-4],eax"
);
// LINE 420:
	asm( 
"	      004810ed    mov dword ptr [ebp-0Ch],0"
);
// LINE 422:
	asm( 
"	      004810f4    mov eax,[ebp-24h]"
"	      004810f7    cmp [ebp-4],eax"
"	      004810fa    jl near ptr 00481113h"
);
// LINE 424:
	asm( 
"	      00481100    mov eax,[ebp-24h]"
"	      00481103    dec eax"
"	      00481104    mov [ebp-4],eax"
);
// LINE 425:
	asm( 
"	      00481107    mov eax,[ebp-4]"
"	      0048110a    sub eax,[ebp-14h]"
"	      0048110d    sub eax,4"
"	      00481110    mov [ebp-0Ch],eax"
);
// LINE 430:
	asm( 
"	      00481113    test byte ptr [ebp+0Ch],4"
"	      00481117    je near ptr 00481134h"
);
// LINE 431:
	asm( 
"	      0048111d    push 0"
"	      0048111f    call dword ptr ds:[6C3560h]"
"	      00481125    push eax"
"	      00481126    lea eax,[ebp-10h]"
"	      00481129    push eax"
"	      0048112a    mov eax,[ebp-28h]"
"	      0048112d    push eax"
"	      0048112e    call dword ptr ds:[6C3888h]"
);
// LINE 436:
	asm( 
"	      00481134    mov eax,[ebp-20h]"
"	      00481137    push eax"
"	      00481138    mov eax,[ebp+8]"
"	      0048113b    push eax"
"	      0048113c    mov eax,[ebp-0Ch]"
"	      0048113f    add eax,2"
"	      00481142    push eax"
"	      00481143    mov eax,[ebp-10h]"
"	      00481146    add eax,2"
"	      00481149    push eax"
"	      0048114a    mov eax,[ebp-28h]"
"	      0048114d    push eax"
"	      0048114e    call dword ptr ds:[6C3558h]"
);
// LINE 439:
	asm( 
"	      00481154    mov eax,[ebp-28h]"
"	      00481157    push eax"
"	      00481158    mov eax,[ebp-2Ch]"
"	      0048115b    mov eax,[eax+18h]"
"	      0048115e    push eax"
"	      0048115f    call dword ptr ds:[6C384Ch]"
);
// LINE 443:
	asm( 
"	      00481165    cmp dword ptr [ebp+18h],0"
"	      00481169    je near ptr 004811ADh"
"	      0048116f    cmp dword ptr [ebp+1Ch],0"
"	      00481173    je near ptr 004811ADh"
"	      00481179    cmp dword ptr [ebp+20h],0"
"	      0048117d    je near ptr 004811ADh"
"	      00481183    cmp dword ptr [ebp+24h],0"
"	      00481187    je near ptr 004811ADh"
);
// LINE 445:
	asm( 
"	      0048118d    mov eax,[ebp-10h]"
"	      00481190    mov ecx,[ebp+18h]"
"	      00481193    mov [ecx],eax"
);
// LINE 446:
	asm( 
"	      00481195    mov eax,[ebp-8]"
"	      00481198    mov ecx,[ebp+20h]"
"	      0048119b    mov [ecx],eax"
);
// LINE 447:
	asm( 
"	      0048119d    mov eax,[ebp-0Ch]"
"	      004811a0    mov ecx,[ebp+1Ch]"
"	      004811a3    mov [ecx],eax"
);
// LINE 448:
	asm( 
"	      004811a5    mov eax,[ebp-4]"
"	      004811a8    mov ecx,[ebp+24h]"
"	      004811ab    mov [ecx],eax"
);
// LINE 451:
	asm( 
"	      004811ad    xor eax,eax"
"	      004811af    jmp near ptr 004811B4h"
);
// LINE 452:
	asm( 
"	      004811b4    pop edi"
"	      004811b5    pop esi"
"	      004811b6    pop ebx"
"	      004811b7    leave"
"	      004811b8    ret 20h"
);
}

// FUNCTION: COPTER_D 0x004811bb
unsigned long CSparkalWindow::ScreenScroll(long, long, long, long, long, long) {
// LINE 462:
	asm( 
"	      004811bb    push ebp"
"	      004811bc    mov ebp,esp"
"	      004811be    sub esp,8"
"	      004811c1    push ebx"
"	      004811c2    push esi"
"	      004811c3    push edi"
"	      004811c4    mov [ebp-8],ecx"
);
// LINE 463:
	asm( 
"	      004811c7    mov eax,[ebp-8]"
"	      004811ca    cmp dword ptr [eax+18h],0"
"	      004811ce    jne near ptr 004811F0h"
"	      004811d4    push 1CFh"
"	      004811d9    push 599B5Ch"
"	      004811de    push 599B84h"
"	      004811e3    call 0056DA30h"
"	      004811e8    add esp,0Ch"
"	      004811eb    jmp near ptr 004811F5h"
"	      004811f0    jmp near ptr 004811F5h"
);
// LINE 465:
	asm( 
"	      004811f5    mov eax,[ebp-8]"
"	      004811f8    mov eax,[eax+18h]"
"	      004811fb    push eax"
"	      004811fc    call dword ptr ds:[6C3850h]"
"	      00481202    mov [ebp-4],eax"
);
// LINE 466:
	asm( 
"	      00481205    cmp dword ptr [ebp-4],0"
"	      00481209    je near ptr 00481257h"
);
// LINE 469:
	asm( 
"	      0048120f    push 0CC0020h"
"	      00481214    mov eax,[ebp+0Ch]"
"	      00481217    push eax"
"	      00481218    mov eax,[ebp+8]"
"	      0048121b    push eax"
"	      0048121c    mov eax,[ebp-4]"
"	      0048121f    push eax"
"	      00481220    mov eax,[ebp+14h]"
"	      00481223    sub eax,[ebp+0Ch]"
"	      00481226    push eax"
"	      00481227    mov eax,[ebp+10h]"
"	      0048122a    sub eax,[ebp+8]"
"	      0048122d    push eax"
"	      0048122e    mov eax,[ebp+1Ch]"
"	      00481231    add eax,[ebp+0Ch]"
"	      00481234    push eax"
"	      00481235    mov eax,[ebp+8]"
"	      00481238    add eax,[ebp+18h]"
"	      0048123b    push eax"
"	      0048123c    mov eax,[ebp-4]"
"	      0048123f    push eax"
"	      00481240    call dword ptr ds:[6C35B4h]"
);
// LINE 470:
	asm( 
"	      00481246    mov eax,[ebp-4]"
"	      00481249    push eax"
"	      0048124a    mov eax,[ebp-8]"
"	      0048124d    mov eax,[eax+18h]"
"	      00481250    push eax"
"	      00481251    call dword ptr ds:[6C384Ch]"
);
// LINE 473:
	asm( 
"	      00481257    xor eax,eax"
"	      00481259    jmp near ptr 0048125Eh"
);
// LINE 474:
	asm( 
"	      0048125e    pop edi"
"	      0048125f    pop esi"
"	      00481260    pop ebx"
"	      00481261    leave"
"	      00481262    ret 18h"
);
}

// FUNCTION: COPTER_D 0x00481265
void CSparkalWindow::UpdatePalette(long, long, struct SparkalColor*) {
// LINE 482:
	asm( 
"	      00481265    push ebp"
"	      00481266    mov ebp,esp"
"	      00481268    sub esp,408h"
"	      0048126e    push ebx"
"	      0048126f    push esi"
"	      00481270    push edi"
"	      00481271    mov [ebp-408h],ecx"
);
// LINE 486:
	asm( 
"	      00481277    mov eax,[ebp-408h]"
"	      0048127d    cmp dword ptr [eax+1Ch],0"
"	      00481281    je near ptr 0048131Fh"
);
// LINE 487:
	asm( 
"	      00481287    mov eax,[ebp+8]"
"	      0048128a    mov [ebp-404h],eax"
"	      00481290    jmp near ptr 0048129Bh"
"	      00481295    inc dword ptr [ebp-404h]"
"	      0048129b    mov eax,[ebp+0Ch]"
"	      0048129e    add eax,[ebp+8]"
"	      004812a1    cmp eax,[ebp-404h]"
"	      004812a7    jle near ptr 004812FCh"
);
// LINE 488:
	asm( 
"	      004812ad    mov eax,[ebp+10h]"
"	      004812b0    mov al,[eax+2]"
"	      004812b3    mov ecx,[ebp-404h]"
"	      004812b9    mov [ebp+ecx*4-400h],al"
);
// LINE 489:
	asm( 
"	      004812c0    mov eax,[ebp+10h]"
"	      004812c3    mov al,[eax+1]"
"	      004812c6    mov ecx,[ebp-404h]"
"	      004812cc    mov [ebp+ecx*4-3FFh],al"
);
// LINE 490:
	asm( 
"	      004812d3    mov eax,[ebp+10h]"
"	      004812d6    mov al,[eax]"
"	      004812d8    mov ecx,[ebp-404h]"
"	      004812de    mov [ebp+ecx*4-3FEh],al"
);
// LINE 491:
	asm( 
"	      004812e5    mov eax,[ebp-404h]"
"	      004812eb    mov byte ptr [ebp+eax*4-3FDh],5"
);
// LINE 492:
	asm( 
"	      004812f3    add dword ptr [ebp+10h],4"
);
// LINE 493:
	asm( 
"	      004812f7    jmp near ptr 00481295h"
);
// LINE 494:
	asm( 
"	      004812fc    mov eax,[ebp+8]"
"	      004812ff    lea eax,[ebp+eax*4-400h]"
"	      00481306    push eax"
"	      00481307    mov eax,[ebp+0Ch]"
"	      0048130a    push eax"
"	      0048130b    mov eax,[ebp+8]"
"	      0048130e    push eax"
"	      0048130f    mov eax,[ebp-408h]"
"	      00481315    mov eax,[eax+1Ch]"
"	      00481318    push eax"
"	      00481319    call dword ptr ds:[6C35ACh]"
);
// LINE 496:
	asm( 
"	      0048131f    jmp near ptr 00481324h"
"	      00481324    pop edi"
"	      00481325    pop esi"
"	      00481326    pop ebx"
"	      00481327    leave"
"	      00481328    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0048132b
int32_t CheckIdentityPalette(void * __ptr32, void * __ptr32, struct tagPALETTEENTRY*) {
// LINE 505:
	asm( 
"	      0048132b    push ebp"
"	      0048132c    mov ebp,esp"
"	      0048132e    sub esp,540h"
"	      00481334    push ebx"
"	      00481335    push esi"
"	      00481336    push edi"
);
// LINE 506:
	asm( 
"	      00481337    mov dword ptr [ebp-108h],0"
);
// LINE 512:
	asm( 
"	      00481341    mov eax,[ebp+8]"
"	      00481344    push eax"
"	      00481345    call dword ptr ds:[6C35C8h]"
"	      0048134b    mov [ebp-104h],eax"
);
// LINE 513:
	asm( 
"	      00481351    cmp dword ptr [ebp-104h],0"
"	      00481358    je near ptr 004815CDh"
);
// LINE 514:
	asm( 
"	      0048135e    push 1"
"	      00481360    push 100h"
"	      00481365    mov eax,[ebp+8]"
"	      00481368    push eax"
"	      00481369    call dword ptr ds:[6C35BCh]"
"	      0048136f    mov [ebp-114h],eax"
);
// LINE 515:
	asm( 
"	      00481375    cmp dword ptr [ebp-114h],0"
"	      0048137c    je near ptr 004815C0h"
);
// LINE 516:
	asm( 
"	      00481382    mov eax,[ebp-114h]"
"	      00481388    push eax"
"	      00481389    mov eax,[ebp-104h]"
"	      0048138f    push eax"
"	      00481390    call dword ptr ds:[6C359Ch]"
"	      00481396    mov [ebp-118h],eax"
);
// LINE 517:
	asm( 
"	      0048139c    push 0"
"	      0048139e    mov eax,[ebp+0Ch]"
"	      004813a1    push eax"
"	      004813a2    mov eax,[ebp-104h]"
"	      004813a8    push eax"
"	      004813a9    call dword ptr ds:[6C3570h]"
);
// LINE 525:
	asm( 
"	      004813af    mov dword ptr [ebp-540h],28h"
);
// LINE 526:
	asm( 
"	      004813b9    mov dword ptr [ebp-53Ch],100h"
);
// LINE 527:
	asm( 
"	      004813c3    mov dword ptr [ebp-538h],1"
);
// LINE 528:
	asm( 
"	      004813cd    mov word ptr [ebp-534h],1"
);
// LINE 529:
	asm( 
"	      004813d6    mov word ptr [ebp-532h],8"
);
// LINE 530:
	asm( 
"	      004813df    mov dword ptr [ebp-530h],0"
);
// LINE 531:
	asm( 
"	      004813e9    mov dword ptr [ebp-52Ch],0"
);
// LINE 532:
	asm( 
"	      004813f3    mov dword ptr [ebp-528h],0"
);
// LINE 533:
	asm( 
"	      004813fd    mov dword ptr [ebp-524h],0"
);
// LINE 534:
	asm( 
"	      00481407    mov dword ptr [ebp-520h],0"
);
// LINE 535:
	asm( 
"	      00481411    mov dword ptr [ebp-51Ch],0"
);
// LINE 537:
	asm( 
"	      0048141b    mov dword ptr [ebp-10Ch],0"
"	      00481425    jmp near ptr 00481430h"
"	      0048142a    inc dword ptr [ebp-10Ch]"
"	      00481430    cmp dword ptr [ebp-10Ch],100h"
"	      0048143a    jge near ptr 004814A0h"
);
// LINE 538:
	asm( 
"	      00481440    mov eax,[ebp-10Ch]"
"	      00481446    mov ecx,[ebp+10h]"
"	      00481449    mov al,[ecx+eax*4]"
"	      0048144c    mov ecx,[ebp-10Ch]"
"	      00481452    mov [ebp+ecx*4-516h],al"
);
// LINE 539:
	asm( 
"	      00481459    mov eax,[ebp-10Ch]"
"	      0048145f    mov ecx,[ebp+10h]"
"	      00481462    mov al,[ecx+eax*4+1]"
"	      00481466    mov ecx,[ebp-10Ch]"
"	      0048146c    mov [ebp+ecx*4-517h],al"
);
// LINE 540:
	asm( 
"	      00481473    mov eax,[ebp-10Ch]"
"	      00481479    mov ecx,[ebp+10h]"
"	      0048147c    mov al,[ecx+eax*4+2]"
"	      00481480    mov ecx,[ebp-10Ch]"
"	      00481486    mov [ebp+ecx*4-518h],al"
);
// LINE 541:
	asm( 
"	      0048148d    mov eax,[ebp-10Ch]"
"	      00481493    mov byte ptr [ebp+eax*4-515h],0"
);
// LINE 542:
	asm( 
"	      0048149b    jmp near ptr 0048142Ah"
);
// LINE 545:
	asm( 
"	      004814a0    mov dword ptr [ebp-10Ch],0"
"	      004814aa    jmp near ptr 004814B5h"
"	      004814af    inc dword ptr [ebp-10Ch]"
"	      004814b5    cmp dword ptr [ebp-10Ch],100h"
"	      004814bf    jge near ptr 004814DDh"
);
// LINE 546:
	asm( 
"	      004814c5    mov al,[ebp-10Ch]"
"	      004814cb    mov ecx,[ebp-10Ch]"
"	      004814d1    mov [ebp+ecx-100h],al"
"	      004814d8    jmp near ptr 004814AFh"
);
// LINE 549:
	asm( 
"	      004814dd    push 0CC0020h"
"	      004814e2    push 0"
"	      004814e4    lea eax,[ebp-540h]"
"	      004814ea    push eax"
"	      004814eb    lea eax,[ebp-100h]"
"	      004814f1    push eax"
"	      004814f2    push 1"
"	      004814f4    push 100h"
"	      004814f9    push 0"
"	      004814fb    push 0"
"	      004814fd    push 1"
"	      004814ff    push 100h"
"	      00481504    push 0"
"	      00481506    push 0"
"	      00481508    mov eax,[ebp-104h]"
"	      0048150e    push eax"
"	      0048150f    call dword ptr ds:[6C35B8h]"
"	      00481515    mov [ebp-110h],eax"
);
// LINE 551:
	asm( 
"	      0048151b    cmp dword ptr [ebp-110h],0FFFFFFFFh"
"	      00481522    je near ptr 0048159Fh"
);
// LINE 553:
	asm( 
"	      00481528    mov dword ptr [ebp-108h],1"
);
// LINE 554:
	asm( 
"	      00481532    lea eax,[ebp-100h]"
"	      00481538    push eax"
"	      00481539    push 100h"
"	      0048153e    mov eax,[ebp-114h]"
"	      00481544    push eax"
"	      00481545    call dword ptr ds:[6C35C0h]"
);
// LINE 555:
	asm( 
"	      0048154b    mov dword ptr [ebp-10Ch],0"
"	      00481555    jmp near ptr 00481560h"
"	      0048155a    inc dword ptr [ebp-10Ch]"
"	      00481560    cmp dword ptr [ebp-10Ch],100h"
"	      0048156a    jge near ptr 0048159Fh"
);
// LINE 556:
	asm( 
"	      00481570    mov eax,[ebp-10Ch]"
"	      00481576    xor ecx,ecx"
"	      00481578    mov cl,[ebp+eax-100h]"
"	      0048157f    cmp ecx,[ebp-10Ch]"
"	      00481585    je near ptr 0048159Ah"
);
// LINE 557:
	asm( 
"	      0048158b    mov dword ptr [ebp-108h],0"
);
// LINE 558:
	asm( 
"	      00481595    jmp near ptr 0048159Fh"
);
// LINE 560:
	asm( 
"	      0048159a    jmp near ptr 0048155Ah"
);
// LINE 563:
	asm( 
"	      0048159f    mov eax,[ebp-118h]"
"	      004815a5    push eax"
"	      004815a6    mov eax,[ebp-104h]"
"	      004815ac    push eax"
"	      004815ad    call dword ptr ds:[6C359Ch]"
);
// LINE 564:
	asm( 
"	      004815b3    mov eax,[ebp-114h]"
"	      004815b9    push eax"
"	      004815ba    call dword ptr ds:[6C358Ch]"
);
// LINE 567:
	asm( 
"	      004815c0    mov eax,[ebp-104h]"
"	      004815c6    push eax"
"	      004815c7    call dword ptr ds:[6C35B0h]"
);
// LINE 570:
	asm( 
"	      004815cd    mov eax,[ebp-108h]"
"	      004815d3    jmp near ptr 004815D8h"
);
// LINE 571:
	asm( 
"	      004815d8    pop edi"
"	      004815d9    pop esi"
"	      004815da    pop ebx"
"	      004815db    leave"
"	      004815dc    ret"
);
}

// FUNCTION: COPTER_D 0x004815dd
long SparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long) {
// LINE 584:
	asm( 
"	      004815dd    push ebp"
"	      004815de    mov ebp,esp"
"	      004815e0    sub esp,4"
"	      004815e3    push ebx"
"	      004815e4    push esi"
"	      004815e5    push edi"
);
// LINE 585:
	asm( 
"	      004815e6    jmp near ptr 004815EBh"
"	      004815eb    push 0"
"	      004815ed    mov eax,[ebp+8]"
"	      004815f0    push eax"
"	      004815f1    call dword ptr ds:[6C3868h]"
"	      004815f7    mov [ebp-4],eax"
);
// LINE 586:
	asm( 
"	      004815fa    cmp dword ptr [ebp-4],0"
"	      004815fe    je near ptr 00481625h"
);
// LINE 587:
	asm( 
"	      00481604    mov eax,[ebp+14h]"
"	      00481607    push eax"
"	      00481608    mov eax,[ebp+10h]"
"	      0048160b    push eax"
"	      0048160c    mov eax,[ebp+0Ch]"
"	      0048160f    push eax"
"	      00481610    mov eax,[ebp+8]"
"	      00481613    push eax"
"	      00481614    mov eax,[ebp-4]"
"	      00481617    push eax"
"	      00481618    mov eax,[ebp-4]"
"	      0048161b    mov eax,[eax]"
"	      0048161d    call dword ptr [eax+30h]"
"	      00481620    jmp near ptr 00481640h"
);
// LINE 588:
	asm( 
"	      00481625    mov eax,[ebp+14h]"
"	      00481628    push eax"
"	      00481629    mov eax,[ebp+10h]"
"	      0048162c    push eax"
"	      0048162d    mov eax,[ebp+0Ch]"
"	      00481630    push eax"
"	      00481631    mov eax,[ebp+8]"
"	      00481634    push eax"
"	      00481635    call dword ptr ds:[6C3860h]"
"	      0048163b    jmp near ptr 00481640h"
);
// LINE 589:
	asm( 
"	      00481640    pop edi"
"	      00481641    pop esi"
"	      00481642    pop ebx"
"	      00481643    leave"
"	      00481644    ret 10h"
);
}

// FUNCTION: COPTER_D 0x00481647
long CSparkalWindow::MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long) {
// LINE 602:
	asm( 
"	      00481647    push ebp"
"	      00481648    mov ebp,esp"
"	      0048164a    sub esp,70h"
"	      0048164d    push ebx"
"	      0048164e    push esi"
"	      0048164f    push edi"
);
// LINE 603:
	asm( 
"	      00481650    mov eax,[ebp+10h]"
"	      00481653    mov [ebp-70h],eax"
"	      00481656    jmp near ptr 004819EEh"
);
// LINE 608:
	asm( 
"	      0048165b    mov eax,[ebp+0Ch]"
"	      0048165e    cmp [ebp+14h],eax"
"	      00481661    jne near ptr 0048166Ch"
);
// LINE 609:
	asm( 
"	      00481667    jmp near ptr 00481AAFh"
);
// LINE 612:
	asm( 
"	      0048166c    mov eax,[ebp+8]"
"	      0048166f    cmp dword ptr [eax+1Ch],0"
"	      00481673    je near ptr 004816D4h"
);
// LINE 614:
	asm( 
"	      00481679    mov eax,[ebp+0Ch]"
"	      0048167c    push eax"
"	      0048167d    call dword ptr ds:[6C3850h]"
"	      00481683    mov [ebp-48h],eax"
);
// LINE 616:
	asm( 
"	      00481686    push 0"
"	      00481688    mov eax,[ebp+8]"
"	      0048168b    mov eax,[eax+1Ch]"
"	      0048168e    push eax"
"	      0048168f    mov eax,[ebp-48h]"
"	      00481692    push eax"
"	      00481693    call dword ptr ds:[6C3570h]"
);
// LINE 617:
	asm( 
"	      00481699    mov eax,[ebp-48h]"
"	      0048169c    push eax"
"	      0048169d    call dword ptr ds:[6C3578h]"
"	      004816a3    mov [ebp-4Ch],eax"
);
// LINE 618:
	asm( 
"	      004816a6    mov eax,[ebp-48h]"
"	      004816a9    push eax"
"	      004816aa    mov eax,[ebp+0Ch]"
"	      004816ad    push eax"
"	      004816ae    call dword ptr ds:[6C384Ch]"
);
// LINE 619:
	asm( 
"	      004816b4    cmp dword ptr [ebp-4Ch],0"
"	      004816b8    je near ptr 004816CCh"
);
// LINE 620:
	asm( 
"	      004816be    push 0"
"	      004816c0    push 0"
"	      004816c2    mov eax,[ebp+0Ch]"
"	      004816c5    push eax"
"	      004816c6    call dword ptr ds:[6C3824h]"
);
// LINE 621:
	asm( 
"	      004816cc    mov eax,[ebp-4Ch]"
"	      004816cf    jmp near ptr 00481ACAh"
);
// LINE 623:
	asm( 
"	      004816d4    jmp near ptr 00481AAFh"
);
// LINE 626:
	asm( 
"	      004816d9    cmp dword ptr [ebp+14h],0"
"	      004816dd    je near ptr 00481701h"
);
// LINE 627:
	asm( 
"	      004816e3    jmp near ptr 004816E8h"
"	      004816e8    mov eax,ds:[598580h]"
"	      004816ed    mov [ebp-54h],eax"
"	      004816f0    mov eax,[ebp-54h]"
"	      004816f3    or dword ptr [eax+0Ch],2"
"	      004816f7    jmp near ptr 004816FCh"
);
// LINE 628:
	asm( 
"	      004816fc    jmp near ptr 0048171Ah"
);
// LINE 629:
	asm( 
"	      00481701    jmp near ptr 00481706h"
"	      00481706    mov eax,ds:[598580h]"
"	      0048170b    mov [ebp-60h],eax"
"	      0048170e    mov eax,[ebp-60h]"
"	      00481711    and dword ptr [eax+0Ch],0FFFFFFFDh"
"	      00481715    jmp near ptr 0048171Ah"
);
// LINE 631:
	asm( 
"	      0048171a    mov eax,[ebp+8]"
"	      0048171d    cmp dword ptr [eax+1Ch],0"
"	      00481721    je near ptr 0048176Ch"
);
// LINE 632:
	asm( 
"	      00481727    mov eax,[ebp+0Ch]"
"	      0048172a    push eax"
"	      0048172b    call dword ptr ds:[6C3850h]"
"	      00481731    mov [ebp-50h],eax"
);
// LINE 633:
	asm( 
"	      00481734    mov eax,[ebp+8]"
"	      00481737    mov eax,[eax+1Ch]"
"	      0048173a    push eax"
"	      0048173b    call dword ptr ds:[6C35CCh]"
);
// LINE 634:
	asm( 
"	      00481741    push 0"
"	      00481743    mov eax,[ebp+8]"
"	      00481746    mov eax,[eax+1Ch]"
"	      00481749    push eax"
"	      0048174a    mov eax,[ebp-50h]"
"	      0048174d    push eax"
"	      0048174e    call dword ptr ds:[6C3570h]"
);
// LINE 635:
	asm( 
"	      00481754    mov eax,[ebp-50h]"
"	      00481757    push eax"
"	      00481758    call dword ptr ds:[6C3578h]"
);
// LINE 636:
	asm( 
"	      0048175e    mov eax,[ebp-50h]"
"	      00481761    push eax"
"	      00481762    mov eax,[ebp+0Ch]"
"	      00481765    push eax"
"	      00481766    call dword ptr ds:[6C384Ch]"
);
// LINE 638:
	asm( 
"	      0048176c    jmp near ptr 00481AAFh"
);
// LINE 642:
	asm( 
"	      00481771    jmp near ptr 00481776h"
"	      00481776    mov eax,ds:[598580h]"
"	      0048177b    mov [ebp-64h],eax"
"	      0048177e    mov eax,[ebp-64h]"
"	      00481781    and dword ptr [eax+0Ch],0FFFFFFFEh"
"	      00481785    jmp near ptr 0048178Ah"
);
// LINE 643:
	asm( 
"	      0048178a    mov eax,[ebp+8]"
"	      0048178d    mov dword ptr [eax+18h],0"
);
// LINE 644:
	asm( 
"	      00481794    jmp near ptr 00481AAFh"
);
// LINE 649:
	asm( 
"	      00481799    mov eax,[ebp+8]"
"	      0048179c    cmp dword ptr [eax+10h],0"
"	      004817a0    je near ptr 004817DAh"
);
// LINE 650:
	asm( 
"	      004817a6    test dword ptr [ebp+14h],0FFFFh"
"	      004817ad    je near ptr 004817C9h"
);
// LINE 651:
	asm( 
"	      004817b3    mov eax,[ebp+8]"
"	      004817b6    mov ecx,[ebp+8]"
"	      004817b9    mov ecx,[ecx+10h]"
"	      004817bc    mov edx,[ecx]"
"	      004817be    mov ecx,[eax+10h]"
"	      004817c1    call dword ptr [edx+18h]"
);
// LINE 652:
	asm( 
"	      004817c4    jmp near ptr 004817DAh"
);
// LINE 653:
	asm( 
"	      004817c9    mov eax,[ebp+8]"
"	      004817cc    mov ecx,[ebp+8]"
"	      004817cf    mov ecx,[ecx+10h]"
"	      004817d2    mov edx,[ecx]"
"	      004817d4    mov ecx,[eax+10h]"
"	      004817d7    call dword ptr [edx+1Ch]"
);
// LINE 655:
	asm( 
"	      004817da    jmp near ptr 00481AAFh"
);
// LINE 658:
	asm( 
"	      004817df    mov eax,[ebp+8]"
"	      004817e2    cmp dword ptr [eax+10h],0"
"	      004817e6    je near ptr 0048180Ah"
);
// LINE 659:
	asm( 
"	      004817ec    mov eax,[ebp+18h]"
"	      004817ef    and eax,0FFFFh"
"	      004817f4    push eax"
"	      004817f5    mov eax,[ebp+14h]"
"	      004817f8    push eax"
"	      004817f9    mov eax,[ebp+8]"
"	      004817fc    mov ecx,[ebp+8]"
"	      004817ff    mov ecx,[ecx+10h]"
"	      00481802    mov edx,[ecx]"
"	      00481804    mov ecx,[eax+10h]"
"	      00481807    call dword ptr [edx+8]"
);
// LINE 660:
	asm( 
"	      0048180a    jmp near ptr 00481AAFh"
);
// LINE 663:
	asm( 
"	      0048180f    mov eax,[ebp+0Ch]"
"	      00481812    push eax"
"	      00481813    call dword ptr ds:[6C38A0h]"
);
// LINE 664:
	asm( 
"	      00481819    jmp near ptr 0048181Eh"
"	      0048181e    mov eax,ds:[598580h]"
"	      00481823    mov [ebp-58h],eax"
"	      00481826    mov eax,[ebp-58h]"
"	      00481829    or dword ptr [eax+0Ch],4"
"	      0048182d    jmp near ptr 00481832h"
);
// LINE 665:
	asm( 
"	      00481832    mov eax,[ebp+8]"
"	      00481835    cmp dword ptr [eax+10h],0"
"	      00481839    je near ptr 00481868h"
);
// LINE 666:
	asm( 
"	      0048183f    mov eax,[ebp+18h]"
"	      00481842    shr eax,10h"
"	      00481845    and eax,0FFFFh"
"	      0048184a    movzx eax,ax"
"	      0048184d    push eax"
"	      0048184e    mov eax,[ebp+18h]"
"	      00481851    and eax,0FFFFh"
"	      00481856    push eax"
"	      00481857    mov eax,[ebp+8]"
"	      0048185a    mov ecx,[ebp+8]"
"	      0048185d    mov ecx,[ecx+10h]"
"	      00481860    mov edx,[ecx]"
"	      00481862    mov ecx,[eax+10h]"
"	      00481865    call dword ptr [edx+0Ch]"
);
// LINE 667:
	asm( 
"	      00481868    jmp near ptr 00481AAFh"
);
// LINE 670:
	asm( 
"	      0048186d    mov eax,[ebp+0Ch]"
"	      00481870    push eax"
"	      00481871    call dword ptr ds:[6C38A0h]"
);
// LINE 671:
	asm( 
"	      00481877    jmp near ptr 0048187Ch"
"	      0048187c    mov eax,ds:[598580h]"
"	      00481881    mov [ebp-5Ch],eax"
"	      00481884    mov eax,[ebp-5Ch]"
"	      00481887    or dword ptr [eax+0Ch],8"
"	      0048188b    jmp near ptr 00481890h"
);
// LINE 672:
	asm( 
"	      00481890    mov eax,[ebp+8]"
"	      00481893    cmp dword ptr [eax+10h],0"
"	      00481897    je near ptr 004818C6h"
);
// LINE 673:
	asm( 
"	      0048189d    mov eax,[ebp+18h]"
"	      004818a0    shr eax,10h"
"	      004818a3    and eax,0FFFFh"
"	      004818a8    movzx eax,ax"
"	      004818ab    push eax"
"	      004818ac    mov eax,[ebp+18h]"
"	      004818af    and eax,0FFFFh"
"	      004818b4    push eax"
"	      004818b5    mov eax,[ebp+8]"
"	      004818b8    mov ecx,[ebp+8]"
"	      004818bb    mov ecx,[ecx+10h]"
"	      004818be    mov edx,[ecx]"
"	      004818c0    mov ecx,[eax+10h]"
"	      004818c3    call dword ptr [edx+0Ch]"
);
// LINE 674:
	asm( 
"	      004818c6    jmp near ptr 00481AAFh"
);
// LINE 677:
	asm( 
"	      004818cb    call dword ptr ds:[6C38A8h]"
);
// LINE 678:
	asm( 
"	      004818d1    jmp near ptr 004818D6h"
"	      004818d6    mov eax,ds:[598580h]"
"	      004818db    mov [ebp-68h],eax"
"	      004818de    mov eax,[ebp-68h]"
"	      004818e1    and dword ptr [eax+0Ch],0FFFFFFFBh"
"	      004818e5    jmp near ptr 004818EAh"
);
// LINE 679:
	asm( 
"	      004818ea    mov eax,[ebp+8]"
"	      004818ed    cmp dword ptr [eax+10h],0"
"	      004818f1    je near ptr 00481920h"
);
// LINE 680:
	asm( 
"	      004818f7    mov eax,[ebp+18h]"
"	      004818fa    shr eax,10h"
"	      004818fd    and eax,0FFFFh"
"	      00481902    movzx eax,ax"
"	      00481905    push eax"
"	      00481906    mov eax,[ebp+18h]"
"	      00481909    and eax,0FFFFh"
"	      0048190e    push eax"
"	      0048190f    mov eax,[ebp+8]"
"	      00481912    mov ecx,[ebp+8]"
"	      00481915    mov ecx,[ecx+10h]"
"	      00481918    mov edx,[ecx]"
"	      0048191a    mov ecx,[eax+10h]"
"	      0048191d    call dword ptr [edx+10h]"
);
// LINE 681:
	asm( 
"	      00481920    jmp near ptr 00481AAFh"
);
// LINE 684:
	asm( 
"	      00481925    call dword ptr ds:[6C38A8h]"
);
// LINE 685:
	asm( 
"	      0048192b    jmp near ptr 00481930h"
"	      00481930    mov eax,ds:[598580h]"
"	      00481935    mov [ebp-6Ch],eax"
"	      00481938    mov eax,[ebp-6Ch]"
"	      0048193b    and dword ptr [eax+0Ch],0FFFFFFF7h"
"	      0048193f    jmp near ptr 00481944h"
);
// LINE 686:
	asm( 
"	      00481944    mov eax,[ebp+8]"
"	      00481947    cmp dword ptr [eax+10h],0"
"	      0048194b    je near ptr 0048197Ah"
);
// LINE 687:
	asm( 
"	      00481951    mov eax,[ebp+18h]"
"	      00481954    shr eax,10h"
"	      00481957    and eax,0FFFFh"
"	      0048195c    movzx eax,ax"
"	      0048195f    push eax"
"	      00481960    mov eax,[ebp+18h]"
"	      00481963    and eax,0FFFFh"
"	      00481968    push eax"
"	      00481969    mov eax,[ebp+8]"
"	      0048196c    mov ecx,[ebp+8]"
"	      0048196f    mov ecx,[ecx+10h]"
"	      00481972    mov edx,[ecx]"
"	      00481974    mov ecx,[eax+10h]"
"	      00481977    call dword ptr [edx+10h]"
);
// LINE 688:
	asm( 
"	      0048197a    jmp near ptr 00481AAFh"
);
// LINE 691:
	asm( 
"	      0048197f    mov eax,[ebp+8]"
"	      00481982    cmp dword ptr [eax+10h],0"
"	      00481986    je near ptr 004819B5h"
);
// LINE 692:
	asm( 
"	      0048198c    mov eax,[ebp+18h]"
"	      0048198f    shr eax,10h"
"	      00481992    and eax,0FFFFh"
"	      00481997    movzx eax,ax"
"	      0048199a    push eax"
"	      0048199b    mov eax,[ebp+18h]"
"	      0048199e    and eax,0FFFFh"
"	      004819a3    push eax"
"	      004819a4    mov eax,[ebp+8]"
"	      004819a7    mov ecx,[ebp+8]"
"	      004819aa    mov ecx,[ecx+10h]"
"	      004819ad    mov edx,[ecx]"
"	      004819af    mov ecx,[eax+10h]"
"	      004819b2    call dword ptr [edx+14h]"
);
// LINE 693:
	asm( 
"	      004819b5    jmp near ptr 00481AAFh"
);
// LINE 699:
	asm( 
"	      004819ba    lea eax,[ebp-40h]"
"	      004819bd    push eax"
"	      004819be    mov eax,[ebp+0Ch]"
"	      004819c1    push eax"
"	      004819c2    call dword ptr ds:[6C3838h]"
"	      004819c8    mov [ebp-44h],eax"
);
// LINE 700:
	asm( 
"	      004819cb    mov eax,[ebp+8]"
"	      004819ce    mov eax,[eax]"
"	      004819d0    mov ecx,[ebp+8]"
"	      004819d3    call dword ptr [eax+8]"
);
// LINE 701:
	asm( 
"	      004819d6    lea eax,[ebp-40h]"
"	      004819d9    push eax"
"	      004819da    mov eax,[ebp+0Ch]"
"	      004819dd    push eax"
"	      004819de    call dword ptr ds:[6C3830h]"
);
// LINE 702:
	asm( 
"	      004819e4    jmp near ptr 00481AAFh"
);
// LINE 703:
	asm( 
"	      004819e9    jmp near ptr 00481AAFh"
"	      004819ee    cmp dword ptr [ebp-70h],6"
"	      004819f2    ja near ptr 00481A0Dh"
"	      004819f8    je near ptr 00481799h"
"	      004819fe    cmp dword ptr [ebp-70h],2"
"	      00481a02    je near ptr 00481776h"
"	      00481a08    jmp near ptr 00481AAFh"
"	      00481a0d    cmp dword ptr [ebp-70h],1Ch"
"	      00481a11    ja near ptr 00481A36h"
"	      00481a17    je near ptr 004816D9h"
"	      00481a1d    cmp dword ptr [ebp-70h],0Fh"
"	      00481a21    je near ptr 004819BAh"
"	      00481a27    cmp dword ptr [ebp-70h],10h"
"	      00481a2b    je near ptr 00481776h"
"	      00481a31    jmp near ptr 00481AAFh"
"	      00481a36    cmp dword ptr [ebp-70h],200h"
"	      00481a3d    ja near ptr 00481A5Bh"
"	      00481a43    je near ptr 0048197Fh"
"	      00481a49    cmp dword ptr [ebp-70h],100h"
"	      00481a50    je near ptr 004817DFh"
"	      00481a56    jmp near ptr 00481AAFh"
"	      00481a5b    cmp dword ptr [ebp-70h],30Fh"
"	      00481a62    ja near ptr 00481A9Dh"
"	      00481a68    je near ptr 0048166Ch"
"	      00481a6e    sub dword ptr [ebp-70h],201h"
"	      00481a75    cmp dword ptr [ebp-70h],4"
"	      00481a79    ja near ptr 00481AAFh"
"	      00481a7f    mov eax,[ebp-70h]"
"	      00481a82    jmp dword ptr [eax*4+481A89h]"
"	      00481a89    prefetcht0 [eax]"
"	      00481a8d    retf"
"	      00481a8e    sbb [eax],cl"
"	      00481a91    scasd"
"	      00481a92    sbb cl,[eax]"
"	      00481a95    insd"
"	      00481a96    sbb [eax],cl"
"	      00481a99    and eax,81004819h"
"	      00481a9e    jge short 00481A30h"
"	      00481aa0    adc [ebx],eax"
"	      00481aa2    add [eax],al"
"	      00481aa4    je near ptr 0048165Bh"
"	      00481aaa    jmp near ptr 00481AAFh"
);
// LINE 705:
	asm( 
"	      00481aaf    mov eax,[ebp+18h]"
"	      00481ab2    push eax"
"	      00481ab3    mov eax,[ebp+14h]"
"	      00481ab6    push eax"
"	      00481ab7    mov eax,[ebp+10h]"
"	      00481aba    push eax"
"	      00481abb    mov eax,[ebp+0Ch]"
"	      00481abe    push eax"
"	      00481abf    call dword ptr ds:[6C3860h]"
"	      00481ac5    jmp near ptr 00481ACAh"
);
// LINE 706:
	asm( 
"	      00481aca    pop edi"
"	      00481acb    pop esi"
"	      00481acc    pop ebx"
"	      00481acd    leave"
"	      00481ace    ret 14h"
);
}



// Contribution: 1:00080ae0-00080b18 Module: 30, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00481ae0
// CSparkalWindow::`scalar deleting destructor'



// Contribution: 2:00001ef8-00001f2b Module: 30, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590ef8
// ??_7CSparkalWindow@@6B@


// Contribution: 3:00002ab8-00002b8b Module: 30, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599ab8
// gWindowClassName
