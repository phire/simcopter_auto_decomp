// Module: Controls.obj
// Source: C:\Copter\source\sparkal\Controls.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ struct list<RadioButtonWindow *>::list_node_buffer (forward reference);
struct list<RadioButtonWindow *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1634
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<RadioButtonWindow *>::list_node *buffer;
};

// Type: /*packed*/ struct list<RadioButtonWindow *>::list_node (forward reference);
struct list<RadioButtonWindow *>::list_node{ // packed(0xc bytes) TI: 0x1636
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class RadioButtonWindow *data;
};

// Type: uint32_t;

// Type: /*packed*/ class BoxWindow (forward reference);
// VTABLE: COPTER_D 0x005919c0
class BoxWindow : public GraphicWindow
{ // packed(0x84 bytes) TI: 0x215a
public:
	void BoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void BoxWindow();
	virtual int32_t DrawSelf() /* override */;
	virtual void SetColors(/*packed*/ struct SparkalColor&, int32_t); // vtable+0xc4
	virtual void SetOutlineAndFillDrawing(int32_t, int32_t); // vtable+0xc8
protected:
	/*+0x74*/  int32_t bDrawOutline;
	/*+0x78*/  int32_t bDrawFill;
	/*+0x7c*/  /*packed*/ struct SparkalColor colorOutline;
	/*+0x80*/  int32_t nPaletteIndexFill;
};

// Type: void;

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: int32_t;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: /*packed*/ class TextWindow (forward reference);
// VTABLE: COPTER_D 0x00591a90
class TextWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x4411
public:
	void TextWindow(/*packed*/ class MRect&, int32_t, const /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf() /* override */;
	virtual void SetWindowTitle(const /*packed*/ class basic_string<char>&); // vtable+0xc4
	virtual void SetWindowTitle(int32_t); // vtable+0xc8
	virtual void SetFontCharacteristics(long, long, long); // vtable+0xcc
	virtual void SetTextDrawStyle(unsigned long); // vtable+0xd0
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xd4
	virtual void SetBackgroundDrawing(int32_t); // vtable+0xd8
	virtual void LoadStrings(); // vtable+0xdc
	virtual void FitWindowToText(); // vtable+0xe0
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xe4
protected:
	/*+0x74*/  int32_t bDrawOpaqueBackground;
	/*+0x78*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x7c*/  int32_t nBackgroundPaletteIndex;
	/*+0x80*/  int32_t nWindowTitleTextID;
	/*+0x84*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa0*/  unsigned long nTextDrawStyle;
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: long;

// Type: unsigned long;

// Type: /*packed*/ class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: /*packed*/ class MFont (forward reference);
// VTABLE: COPTER_D 0x00591640
class MFont{ // packed(0x1c bytes) TI: 0x1a6c
public:
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   unsigned long lHeight;
	/*+0x10*/  unsigned long lWidth;
	/*+0x14*/  unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const /*packed*/ class MFont&);
	void MFont();
	void ~MFont();
	/*packed*/ class MFont& operator=(const /*packed*/ class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	virtual int32_t CreateFontA(); // vtable+0x0
	virtual void DestroyFont(); // vtable+0x4
	void * __ptr32 operator void *();
protected:
	/*+0x18*/  void * __ptr32 hFont;
};

// Type: char;

// Type: /*packed*/ class CheckBoxWindow (forward reference);
// VTABLE: COPTER_D 0x00591c58
class CheckBoxWindow : public ButtonWindow
{ // packed(0x94 bytes) TI: 0x213e
public:
	void CheckBoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void CheckBoxWindow();
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t GetImageCount() /* override */;
	virtual void SetState(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
};

// Type: /*packed*/ class RadioButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591d38
class RadioButtonWindow : public ButtonWindow
{ // packed(0x98 bytes) TI: 0x1554
public:
	void RadioButtonWindow(/*unpacked*/ class ButtonGroup*, /*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual void ~RadioButtonWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual void AddToGroup(/*unpacked*/ class ButtonGroup*); // vtable+0xdc
	virtual int32_t RemoveFromGroup(); // vtable+0xe0
	virtual void SetState(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	/*+0x94*/  /*unpacked*/ class ButtonGroup *myRadioButtonGroup;
};

// Type: /*unpacked*/ class ButtonGroup (forward reference);
// ButtonGroup Class implementation not found

// Type: /*packed*/ class list<RadioButtonWindow *>::iterator;
class list<RadioButtonWindow *>::iterator : public bidirectional_iterator<RadioButtonWindow *,int>
{ // packed(0x4 bytes) TI: 0x1632
protected:
	/*+0x0*/   /*packed*/ struct list<RadioButtonWindow *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<RadioButtonWindow *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<RadioButtonWindow *>::iterator&);
	/*packed*/ class RadioButtonWindow*& operator*();
	/*packed*/ class list<RadioButtonWindow *>::iterator operator++(int32_t);
	/*packed*/ class list<RadioButtonWindow *>::iterator& operator++();
	/*packed*/ class list<RadioButtonWindow *>::iterator operator--(int32_t);
	/*packed*/ class list<RadioButtonWindow *>::iterator& operator--();
};

// Type: /*packed*/ class SliderWindow (forward reference);
// VTABLE: COPTER_D 0x00591ee8
class SliderWindow : public GraphicWindow
{ // packed(0xb4 bytes) TI: 0x2142
	enum SliderWindowDirection {
		nSliderWindowDirectionHorizontal = 0,
		nSliderWindowDirectionVertical = 1,
	};
public:
	void SliderWindow(/*packed*/ class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *, char *, long);
	void SliderWindow();
	virtual void ~SliderWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	void SetMinimumValue(long);
	void SetMaximumValue(long);
	virtual void MoveWindow(int32_t, int32_t) /* override */;
	virtual void SetWidthAndHeight(int32_t, int32_t) /* override */;
	long GetValue();
	void SetValue(long);
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual int32_t ConvertCursorPositionToValue(long&, long, long); // vtable+0xc4
	virtual void CalculateThumbPosition(); // vtable+0xc8
	virtual void CalculateAllMetrics(); // vtable+0xcc
	virtual long GetThumbWidth(); // vtable+0xd0
	virtual long GetThumbHeight(); // vtable+0xd4
public:
	/*+0x74*/  enum SliderWindow::SliderWindowDirection nSliderWindowDirection;
	/*+0x78*/  long lSliderMinimumValue;
	/*+0x7c*/  long lSliderMaximumValue;
	/*+0x80*/  long lSliderCurrentValue;
	/*+0x84*/  long lMinimumThumbPosition;
	/*+0x88*/  long lCurrentThumbPosition;
	/*+0x8c*/  long lMaximumThumbPosition;
	/*+0x90*/  long lThumbLimitIndentation;
	/*+0x94*/  /*packed*/ class MRect rectThumbImage; // 0x10 bytes
	/*+0xa4*/  /*unpacked*/ class CBackBuffer *myBackgroundImage;
	/*+0xa8*/  /*packed*/ class basic_string<char> sBackgroundFile; // 0x8 bytes
	/*+0xb0*/  int32_t bBusySettingValue;
};

// Type: enum SliderWindow::SliderWindowDirection;
enum SliderWindowDirection {
	nSliderWindowDirectionHorizontal = 0,
	nSliderWindowDirectionVertical = 1,
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class ScrollBarWindow (forward reference);
// VTABLE: COPTER_D 0x00591fc0
class ScrollBarWindow : public SliderWindow
{ // packed(0xd4 bytes) TI: 0x1813
	enum ScrollHitTestResult {
		nScrollHitTestResultNone = 0,
		nScrollHitTestResultLinePrevious = 1,
		nScrollHitTestResultLineNext = 2,
		nScrollHitTestResultPagePrevious = 3,
		nScrollHitTestResultPageNext = 4,
		nScrollHitTestResultThumb = 5,
	};
public:
	void ScrollBarWindow(/*packed*/ class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	void ScrollBarWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetLineAndPageCount(long, long); // vtable+0xd8
	virtual void MoveLinePrevious(); // vtable+0xdc
	virtual void MoveLineNext(); // vtable+0xe0
	virtual void MovePagePrevious(); // vtable+0xe4
	virtual void MovePageNext(); // vtable+0xe8
protected:
	virtual int32_t DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult&, long, long); // vtable+0xec
	virtual void CalculateAllMetrics() /* override */;
	virtual long GetThumbWidth() /* override */;
	virtual long GetThumbHeight() /* override */;
	virtual long GetPrevNextButtonWidth(); // vtable+0xf0
	virtual long GetPrevNextButtonHeight(); // vtable+0xf4
	virtual long GetCurrentLine(); // vtable+0xf8
	virtual long GetValueOfGivenLine(long); // vtable+0xfc
	virtual long GetCurrentPage(); // vtable+0x100
	virtual long GetValueOfGivenPage(long); // vtable+0x104
	/*+0xb4*/  long lLineCount;
	/*+0xb8*/  long lPageCount;
	/*+0xbc*/  /*packed*/ class MTimer myTimer; // 0x10 bytes
	/*+0xcc*/  enum ScrollBarWindow::ScrollHitTestResult initialScrollHitTestResult;
	/*+0xd0*/  int32_t bCursorIsOnInitialHitTestResult;
};

// Type: enum ScrollBarWindow::ScrollHitTestResult;
enum ScrollHitTestResult {
	nScrollHitTestResultNone = 0,
	nScrollHitTestResultLinePrevious = 1,
	nScrollHitTestResultLineNext = 2,
	nScrollHitTestResultPagePrevious = 3,
	nScrollHitTestResultPageNext = 4,
	nScrollHitTestResultThumb = 5,
};

// Type: /*packed*/ class ListBoxWindow (forward reference);
// VTABLE: COPTER_D 0x005920c8
class ListBoxWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x17a0
public:
	void ListBoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t RemoveString(long); // vtable+0xc4
	virtual int32_t RemoveString(/*packed*/ class basic_string<char>&); // vtable+0xc8
	virtual void RemoveAllStrings(); // vtable+0xcc
	virtual int32_t InsertString(long, long); // vtable+0xd0
	virtual int32_t InsertString(/*packed*/ class basic_string<char>&, long); // vtable+0xd4
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xd8
	virtual int32_t SetSelection(long); // vtable+0xdc
	virtual long GetSelection(); // vtable+0xe0
	virtual void SetShouldSort(); // vtable+0xe4
	virtual void Sort(); // vtable+0xe8
	virtual int32_t MoveLineUp(); // vtable+0xec
	virtual int32_t MoveLineDown(); // vtable+0xf0
	virtual int32_t ScrollToStart(); // vtable+0xf4
	virtual int32_t ScrollToEnd(); // vtable+0xf8
	virtual int32_t ScrollPageUp(); // vtable+0xfc
	virtual int32_t ScrollPageDown(); // vtable+0x100
	virtual int32_t IsIndexInView(long); // vtable+0x104
	virtual void PutIndexInView(long); // vtable+0x108
	virtual int32_t ScrollToFirstLetter(char); // vtable+0x10c
	virtual void SetIndexOfTopLine(long); // vtable+0x110
	virtual long GetLineCount(); // vtable+0x114
	virtual long GetIndexOfTopLine(); // vtable+0x118
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetBackgroundDrawing(int32_t); // vtable+0x11c
	virtual void SetBackgroundPaletteIndex(int32_t, int32_t); // vtable+0x120
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0x124
	virtual void SetFontCharacteristics(long, long, long); // vtable+0x128
	virtual int32_t AddScrollBar(int32_t, int32_t, char *); // vtable+0x12c
	virtual void RemoveScrollBar(int32_t, int32_t); // vtable+0x130
protected:
	virtual void CalculateAllMetrics(); // vtable+0x134
	virtual int32_t GetStringAddressFromIndex(long, /*packed*/ class basic_string<char>*&); // vtable+0x138
	virtual int32_t GetStringFromIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x13c
	virtual int32_t GetIndexFromString(long&, /*packed*/ class basic_string<char>&); // vtable+0x140
	virtual int32_t RemoveStringAtIndex(long); // vtable+0x144
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x148
	virtual int32_t ModifyString(long, /*packed*/ class basic_string<char>&); // vtable+0x14c
	virtual void SetScrollBarValue(); // vtable+0x150
	virtual void SetScrollBarSizes(); // vtable+0x154
	/*+0x74*/  /*packed*/ class list<basic_string<char>> myStringList; // 0x8 bytes
	/*+0x7c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x80*/  /*packed*/ struct SparkalColor colorFontHighlighted;
	/*+0x84*/  int32_t nBackgroundIndex;
	/*+0x88*/  int32_t nBackgroundIndexHighlighted;
	/*+0x8c*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa8*/  unsigned long nTextDrawStyle;
	/*+0xac*/  long lCurrentSelection;
	/*+0xb0*/  long lVisibleLines;
	/*+0xb4*/  long lFirstVisibleLine;
	/*+0xb8*/  long lLineHeight;
	/*+0xbc*/  int32_t bAlwaysSort;
	/*+0xc0*/  /*packed*/ class ScrollBarWindow *myVerticalScrollBarWindow;
	/*+0xc4*/  /*packed*/ class ScrollBarWindow *myHorizontalScrollBarWindow;
	/*+0xc8*/  int32_t bBusySettingSelection;
};

// Type: void * __ptr32;

// Type: /*packed*/ class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ class PopupMenuWindow (forward reference);
// VTABLE: COPTER_D 0x00592220
class PopupMenuWindow : public ListBoxWindow
{ // packed(0xcc bytes) TI: 0x215d
public:
	void PopupMenuWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual void ResizeWindowToFitMenuItems(); // vtable+0x158
	virtual int32_t RemoveStringAtIndex(long) /* override */;
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&) /* override */;
};

// Type: /*packed*/ class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{ // packed(0x8 bytes) TI: 0x1cb1
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
	};
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static /*packed*/ class allocator<basic_string<char>> value_allocator;
	using value_type = /*packed*/ class basic_string<char>;
	using value_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using list_node_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node>;
	using link_type = /*packed*/ struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<basic_string<char>>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<basic_string<char>>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *free_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *next_avail;
	static /*packed*/ struct list<basic_string<char>>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<basic_string<char>>::list_node* get_node();
	void put_node(/*packed*/ struct list<basic_string<char>>::list_node*);
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cd3
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator++();
		/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cc6
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const /*packed*/ class list<basic_string<char>>&);
	void list<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>::const_iterator begin();
	/*packed*/ class list<basic_string<char>>::iterator begin();
	/*packed*/ class list<basic_string<char>>::const_iterator end();
	/*packed*/ class list<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void swap(/*packed*/ class list<basic_string<char>>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::const_iterator, /*packed*/ class list<basic_string<char>>::const_iterator);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class list<basic_string<char>>::iterator insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void erase(/*packed*/ class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>& operator=(const /*packed*/ class list<basic_string<char>>&);
protected:
	void transfer(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
public:
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&);
	void remove(const /*packed*/ class basic_string<char>&);
	void unique();
	void merge(/*packed*/ class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ struct list<basic_string<char>>::list_node_buffer (forward reference);
struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ class SliderWindow;
// VTABLE: COPTER_D 0x00591ee8
class SliderWindow : public GraphicWindow
{ // packed(0xb4 bytes) TI: 0x2142
	enum SliderWindowDirection {
		nSliderWindowDirectionHorizontal = 0,
		nSliderWindowDirectionVertical = 1,
	};
public:
	void SliderWindow(/*packed*/ class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *, char *, long);
	void SliderWindow();
	virtual void ~SliderWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	void SetMinimumValue(long);
	void SetMaximumValue(long);
	virtual void MoveWindow(int32_t, int32_t) /* override */;
	virtual void SetWidthAndHeight(int32_t, int32_t) /* override */;
	long GetValue();
	void SetValue(long);
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual int32_t ConvertCursorPositionToValue(long&, long, long); // vtable+0xc4
	virtual void CalculateThumbPosition(); // vtable+0xc8
	virtual void CalculateAllMetrics(); // vtable+0xcc
	virtual long GetThumbWidth(); // vtable+0xd0
	virtual long GetThumbHeight(); // vtable+0xd4
public:
	/*+0x74*/  enum SliderWindow::SliderWindowDirection nSliderWindowDirection;
	/*+0x78*/  long lSliderMinimumValue;
	/*+0x7c*/  long lSliderMaximumValue;
	/*+0x80*/  long lSliderCurrentValue;
	/*+0x84*/  long lMinimumThumbPosition;
	/*+0x88*/  long lCurrentThumbPosition;
	/*+0x8c*/  long lMaximumThumbPosition;
	/*+0x90*/  long lThumbLimitIndentation;
	/*+0x94*/  /*packed*/ class MRect rectThumbImage; // 0x10 bytes
	/*+0xa4*/  /*unpacked*/ class CBackBuffer *myBackgroundImage;
	/*+0xa8*/  /*packed*/ class basic_string<char> sBackgroundFile; // 0x8 bytes
	/*+0xb0*/  int32_t bBusySettingValue;
};

// Type: /*packed*/ class ButtonWindow;
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: /*packed*/ struct bidirectional_iterator<RadioButtonWindow *,int>;
struct bidirectional_iterator<RadioButtonWindow *,int>{ // packed(0x1 bytes) TI: 0x1dfd
};

// Type: /*packed*/ class ListBoxWindow;
// VTABLE: COPTER_D 0x005920c8
class ListBoxWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x17a0
public:
	void ListBoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t RemoveString(long); // vtable+0xc4
	virtual int32_t RemoveString(/*packed*/ class basic_string<char>&); // vtable+0xc8
	virtual void RemoveAllStrings(); // vtable+0xcc
	virtual int32_t InsertString(long, long); // vtable+0xd0
	virtual int32_t InsertString(/*packed*/ class basic_string<char>&, long); // vtable+0xd4
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xd8
	virtual int32_t SetSelection(long); // vtable+0xdc
	virtual long GetSelection(); // vtable+0xe0
	virtual void SetShouldSort(); // vtable+0xe4
	virtual void Sort(); // vtable+0xe8
	virtual int32_t MoveLineUp(); // vtable+0xec
	virtual int32_t MoveLineDown(); // vtable+0xf0
	virtual int32_t ScrollToStart(); // vtable+0xf4
	virtual int32_t ScrollToEnd(); // vtable+0xf8
	virtual int32_t ScrollPageUp(); // vtable+0xfc
	virtual int32_t ScrollPageDown(); // vtable+0x100
	virtual int32_t IsIndexInView(long); // vtable+0x104
	virtual void PutIndexInView(long); // vtable+0x108
	virtual int32_t ScrollToFirstLetter(char); // vtable+0x10c
	virtual void SetIndexOfTopLine(long); // vtable+0x110
	virtual long GetLineCount(); // vtable+0x114
	virtual long GetIndexOfTopLine(); // vtable+0x118
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetBackgroundDrawing(int32_t); // vtable+0x11c
	virtual void SetBackgroundPaletteIndex(int32_t, int32_t); // vtable+0x120
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0x124
	virtual void SetFontCharacteristics(long, long, long); // vtable+0x128
	virtual int32_t AddScrollBar(int32_t, int32_t, char *); // vtable+0x12c
	virtual void RemoveScrollBar(int32_t, int32_t); // vtable+0x130
protected:
	virtual void CalculateAllMetrics(); // vtable+0x134
	virtual int32_t GetStringAddressFromIndex(long, /*packed*/ class basic_string<char>*&); // vtable+0x138
	virtual int32_t GetStringFromIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x13c
	virtual int32_t GetIndexFromString(long&, /*packed*/ class basic_string<char>&); // vtable+0x140
	virtual int32_t RemoveStringAtIndex(long); // vtable+0x144
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x148
	virtual int32_t ModifyString(long, /*packed*/ class basic_string<char>&); // vtable+0x14c
	virtual void SetScrollBarValue(); // vtable+0x150
	virtual void SetScrollBarSizes(); // vtable+0x154
	/*+0x74*/  /*packed*/ class list<basic_string<char>> myStringList; // 0x8 bytes
	/*+0x7c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x80*/  /*packed*/ struct SparkalColor colorFontHighlighted;
	/*+0x84*/  int32_t nBackgroundIndex;
	/*+0x88*/  int32_t nBackgroundIndexHighlighted;
	/*+0x8c*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa8*/  unsigned long nTextDrawStyle;
	/*+0xac*/  long lCurrentSelection;
	/*+0xb0*/  long lVisibleLines;
	/*+0xb4*/  long lFirstVisibleLine;
	/*+0xb8*/  long lLineHeight;
	/*+0xbc*/  int32_t bAlwaysSort;
	/*+0xc0*/  /*packed*/ class ScrollBarWindow *myVerticalScrollBarWindow;
	/*+0xc4*/  /*packed*/ class ScrollBarWindow *myHorizontalScrollBarWindow;
	/*+0xc8*/  int32_t bBusySettingSelection;
};

// Type: /*packed*/ struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x1847
};



// Contribution: 1:000aba90-000b7247 Module: 5, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004aca90
void BoxWindow::BoxWindow() {

	this->GraphicWindow::GraphicWindow();
	this->bDrawOutline = 0x1;
	this->bDrawFill = 0x0;
	__asm        jmp    _T2d;
_T2d:
	this->nPaletteIndexFill = GraphicWindow::colorConstants.nPaletteIndexWhite;
	this-><BoxWindow+0x00> = 0x5919c0;
// LINE 29:
	this->colorOutline.Blue = 0x0;
	this->colorOutline.Green = this->colorOutline.Blue;
	this->colorOutline.Red = this->colorOutline.Green;
// LINE 30:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004acb00
void BoxWindow::BoxWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	this->bDrawOutline = 0x1;
	this->bDrawFill = 0x0;
	__asm        jmp    _T41;
_T41:
	this->nPaletteIndexFill = GraphicWindow::colorConstants.nPaletteIndexWhite;
	this-><BoxWindow+0x00> = 0x5919c0;
// LINE 44:
	this->colorOutline.Blue = 0x0;
	this->colorOutline.Green = this->colorOutline.Blue;
	this->colorOutline.Red = this->colorOutline.Green;
// LINE 45:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004acb86
int32_t BoxWindow::DrawSelf() {
// LINE 52:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T36;
// LINE 53:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 54:
_T36:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T55;
// LINE 55:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 56:
_T55:
	return 0x1;
// LINE 57:
}

// FUNCTION: COPTER_D 0x004acbea
void BoxWindow::SetColors(/*packed*/ struct SparkalColor& colorNewOutline, int32_t nNewPaletteIndexFill) {
// LINE 64:
	reinterpret_cast<uint32_t>(this->colorOutline.Blue) = reinterpret_cast<uint32_t>(colorNewOutline.Blue);
// LINE 65:
	this->nPaletteIndexFill = nNewPaletteIndexFill;
// LINE 66:
	return;
}

// FUNCTION: COPTER_D 0x004acc19
void BoxWindow::SetOutlineAndFillDrawing(int32_t bNewDrawOutline, int32_t bNewDrawFill) {
// LINE 73:
	this->bDrawOutline = bNewDrawOutline;
// LINE 74:
	this->bDrawFill = bNewDrawFill;
// LINE 75:
	return;
}

// FUNCTION: COPTER_D 0x004acc43
void TextWindow::TextWindow() {

	this->GraphicWindow::GraphicWindow();
	__asm        jmp    _T19;
_T19:
	(this + 0x84)->MFont::MFont();
	this-><TextWindow+0x00> = 0x591a90;
// LINE 96:
	this->bDrawOpaqueBackground = 0x0;
// LINE 99:
	this->colorFont.Blue = reinterpret_cast<uint8_t>(GraphicWindow::colorConstants.nPaletteIndexBlack);
	this->colorFont.Green = this->colorFont.Blue;
	this->colorFont.Red = this->colorFont.Green;
// LINE 100:
	this->nBackgroundPaletteIndex = GraphicWindow::colorConstants.nPaletteIndexWhite;
// LINE 101:
	this->nWindowTitleTextID = 0x0;
// LINE 102:
	this->nTextDrawStyle = 0x0;
// LINE 103:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 104:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004acce6
void TextWindow::TextWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	__asm        jmp    _T2d;
_T2d:
	this->nWindowTitleTextID = nNewWindowTitleTextID;
	(this + 0x84)->MFont::MFont();
	this-><TextWindow+0x00> = 0x591a90;
// LINE 114:
	this->bDrawOpaqueBackground = 0x0;
// LINE 117:
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = this->colorFont.Blue;
	this->colorFont.Red = this->colorFont.Green;
// LINE 118:
	this->nBackgroundPaletteIndex = GraphicWindow::colorConstants.nPaletteIndexWhite;
// LINE 119:
	this->nTextDrawStyle = 0x0;
// LINE 120:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 121:
	this->TextWindow::LoadStrings();
// LINE 122:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004acda2
void TextWindow::TextWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, const /*packed*/ class basic_string<char>& sNewWindowTitle, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	__asm        jmp    _T2d;
_T2d:
	(this + 0x84)->MFont::MFont();
	this-><TextWindow+0x00> = 0x591a90;
// LINE 132:
	this->bDrawOpaqueBackground = 0x0;
// LINE 135:
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = this->colorFont.Blue;
	this->colorFont.Red = this->colorFont.Green;
// LINE 136:
	this->nBackgroundPaletteIndex = GraphicWindow::colorConstants.nPaletteIndexWhite;
// LINE 137:
	this->nWindowTitleTextID = 0x0;
// LINE 138:
	this->nTextDrawStyle = 0x0;
// LINE 139:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     _T254;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T12d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T12d;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T10d;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T10d:
	__asm        jmp    _T112;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T128;
_T128:
	__asm        jmp    _T12d;
_T12d:
	__asm        jmp    _T132;
_T132:
	__asm        jmp    _T137;
_T137:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T161;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T254;
_T161:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T24a;

	__asm        jmp    _T17d;
_T17d:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T224;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1c4;
_T1c4:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1e9;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T1f5;

	__asm        jmp    _T1f5;
_T1e9:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T1f5;
_T1f5:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T21f;
_T21f:
	__asm        jmp    _T22d;
_T224:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T22d:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T23c;
_T23c:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T254;
_T24a:
	this-><TextWindow+0x0c> = 0x0;
_T254:
	__asm        jmp    _T259;
// LINE 140:
_T259:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 141:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ad01e
void TextWindow::LoadStrings() {
	/*bp-0x4*/   int32_t nFullStringID;

// LINE 152:
	nFullStringID = LanguageManager::GetFullStringID(this->nWindowTitleTextID, 0x0);
// LINE 153:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        cmp    dword ptr [ebp-0x1008], 0;
	__asm        jne    _T493;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        jmp    _T8f;
_T8f:
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    _Te9;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1018], eax;
	__asm        mov    eax, [ebp-0x1018];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tda;
_Tda:
	exit(0x1);
	__asm        jmp    _Te9;
_Te9:
	__asm        jmp    _Tee;
_Tee:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T12b;

	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     _T1e8;

	__asm        jmp    _T113;
_T113:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1e8;
_T12b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        je     _T16c;

	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1010];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x100C], eax;
	__asm        jmp    _T176;
_T16c:
	__asm        mov    dword ptr [ebp-0x100C], 0;
_T176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1cf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        mov    [ebp-0x101C], eax;
	__asm        cmp    dword ptr [ebp-0x101C], 0;
	__asm        je     _T1cf;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x101C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1cf;
_T1cf:
	__asm        jmp    _T1d4;
_T1d4:
	__asm        mov    eax, [ebp-0x100C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T22d;
_T1e8:
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     _T22d;

	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1014], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1014];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22d;
_T22d:
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T244;
_T244:
	__asm        jmp    _T249;
_T249:
	__asm        jmp    _T24e;
_T24e:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        jmp    _T266;
_T266:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1044];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T2bb;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1038], eax;
	__asm        mov    eax, [ebp-0x1038];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2ac;
_T2ac:
	exit(0x1);
	__asm        jmp    _T2bb;
_T2bb:
	__asm        jmp    _T2c0;
_T2c0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T301;

	__asm        jmp    _T2d8;
_T2d8:
	__asm        jmp    _T2dd;
_T2dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1044];
	__asm        jae    _T41e;
_T301:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x102C], eax;
	__asm        cmp    dword ptr [ebp-0x102C], 0;
	__asm        je     _T3a7;

	__asm        jmp    _T323;
_T323:
	__asm        jmp    _T328;
_T328:
	__asm        jmp    _T32d;
_T32d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T35b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    _T36a;

	__asm        jmp    _T36a;
_T35b:
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        jmp    _T36a;
_T36a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x102C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1028], eax;
	__asm        jmp    _T3b1;
_T3a7:
	__asm        mov    dword ptr [ebp-0x1028], 0;
_T3b1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T40a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        mov    [ebp-0x103C], eax;
	__asm        cmp    dword ptr [ebp-0x103C], 0;
	__asm        je     _T40a;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x103C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T40a;
_T40a:
	__asm        jmp    _T40f;
_T40f:
	__asm        mov    eax, [ebp-0x1028];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T41e:
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T472;

	__asm        jmp    _T430;
_T430:
	__asm        jmp    _T435;
_T435:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1030], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1030];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T472;
_T472:
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T489;
_T489:
	__asm        jmp    _T48e;
_T48e:
	__asm        jmp    _T74d;
_T493:
	__asm        jmp    _T498;
_T498:
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    _T4f2;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4e3;
_T4e3:
	exit(0x1);
	__asm        jmp    _T4f2;
_T4f2:
	__asm        jmp    _T4f7;
_T4f7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T534;

	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T6e7;

	__asm        jmp    _T51c;
_T51c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x106C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T6e7;
_T534:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T654;

	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    _T596;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T587;
_T587:
	exit(0x1);
	__asm        jmp    _T596;
_T596:
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T625;

	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1060], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T620;
_T620:
	__asm        jmp    _T631;
_T625:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax], 0;
_T631:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T643;
_T643:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    _T65e;
_T654:
	__asm        mov    dword ptr [ebp-0x1048], 0;
_T65e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T6ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    [ebp-0x1058], eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     _T6ce;

	__asm        mov    ecx, [ebp-0x1058];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T6b5;
_T6b5:
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T6c9;
_T6c9:
	__asm        jmp    _T6ce;
_T6ce:
	__asm        jmp    _T6d3;
_T6d3:
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T72c;
_T6e7:
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T72c;

	__asm        jmp    _T6f9;
_T6f9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T72c;
_T72c:
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T743;
_T743:
	__asm        jmp    _T748;
_T748:
	__asm        jmp    _T74d;
// LINE 154:
_T74d:
	return;
}

// FUNCTION: COPTER_D 0x004ad775
void TextWindow::SetWindowTitle(int32_t nNewWindowTitleTextID) {
// LINE 160:
	this->nWindowTitleTextID = nNewWindowTitleTextID;
// LINE 161:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 162:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 163:
	return;
}

// FUNCTION: COPTER_D 0x004ad7b6
void TextWindow::SetWindowTitle(const /*packed*/ class basic_string<char>& sNewWindowTitle) {
// LINE 169:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this-><TextWindow+0x0c> = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 170:
_T1d3:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 171:
	return;
}

// FUNCTION: COPTER_D 0x004ad9a4
int32_t TextWindow::DrawSelf() {
	/*bp-0x10*/  /*packed*/ class MRect rectText; // 0x10 bytes

// LINE 179:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        lea    ecx, rectText.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T57;
// LINE 182:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 183:
_T57:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T71;
// LINE 184:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 185:
_T71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T8b;
// LINE 186:
_T8b:
	rectText.left += 0x5;
// LINE 187:
	rectText.top++;
// LINE 189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tba;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tba:
	__asm        jmp    _Tbf;
_Tbf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Tdd;
_Tdd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T156;

	__asm        jmp    _Tf2;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T11c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T128;

	__asm        jmp    _T128;
_T11c:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T128;
_T128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T156;
_T156:
	__asm        jmp    _T15b;
_T15b:
	__asm        mov    byte ptr [ebp-0x1C], 0;
	__asm        jmp    _T164;
_T164:
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], al;
	__asm        jmp    _T190;
_T190:
	__asm        jmp    _T195;
_T195:
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 190:
	return 0x1;
// LINE 191:
}

// FUNCTION: COPTER_D 0x004adb83
void TextWindow::SetBackgroundDrawing(int32_t bNewDrawOpaqueBackground) {
// LINE 199:
	this->bDrawOpaqueBackground = bNewDrawOpaqueBackground;
// LINE 200:
	return;
}

// FUNCTION: COPTER_D 0x004adba4
void TextWindow::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
// LINE 207:
	(this + 0x84)->MFont::SetFontCharacteristics(lNewHeight, lNewWidth, lNewAttributes);
// LINE 208:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 209:
	return;
}

// FUNCTION: COPTER_D 0x004adbe5
void TextWindow::SetTextDrawStyle(unsigned long nNewTextDrawStyle) {
// LINE 216:
	this->nTextDrawStyle = nNewTextDrawStyle;
// LINE 217:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 218:
	return;
}

// FUNCTION: COPTER_D 0x004adc18
void TextWindow::FitWindowToText() {
	/*bp-0x4*/   long lWidth;
	/*bp-0x8*/   long lHeight;

// LINE 227:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    _T6c;
_T6c:
	__asm        jmp    _T71;
_T71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    byte ptr [ebp-0x10], 0;
	__asm        jmp    _Tde;
_Tde:
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        lea    eax, lHeight;
	__asm        push   eax;
	__asm        lea    eax, lWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   MFont::GetTextDimensions;
	__asm        test   eax, eax;
	__asm        je     _T14d;
// LINE 228:
	__asm        mov    eax, lHeight;
	__asm        add    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, lWidth;
	__asm        add    eax, 7;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 230:
_T14d:
	return;
}

// FUNCTION: COPTER_D 0x004add6f
void TextWindow::SetTextColor(const /*packed*/ struct SparkalColor& colorNewFont) {
// LINE 237:
	reinterpret_cast<uint32_t>(this->colorFont.Blue) = reinterpret_cast<uint32_t>(colorNewFont.Blue);
// LINE 238:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 239:
	return;
}

// FUNCTION: COPTER_D 0x004adda1
int32_t TextWindow::ResizeWindowForExactLineHeights() {
	/*bp-0x4*/   long lFixedHeight;
	/*bp-0x8*/   long lTextWidth;
	/*bp-0xc*/   long lLineHeight;
	/*bp-0x10*/  long lOriginalHeight;
	/*bp-0x14*/  long lVisibleLines;

// LINE 252:
	lVisibleLines = 0x0;
// LINE 253:
	lLineHeight = 0x1;
// LINE 254:
	lTextWidth = 0x1;
// LINE 256:
	(this + 0x84)->MFont::GetTextDimensions(0x0, lTextWidth, lLineHeight);
// LINE 257:
	__asm        jmp    _T3e;
_T3e:
	lOriginalHeight = (this-><TextWindow+0x1c> - this-><TextWindow+0x14>);
// LINE 258:
	__asm        mov    eax, lOriginalHeight;
	__asm        cdq;
	__asm        idiv   lLineHeight;
	__asm        mov    lVisibleLines, eax;
// LINE 259:
	lFixedHeight = (lLineHeight * lVisibleLines);
// LINE 260:
	__asm        mov    eax, lOriginalHeight;
	__asm        cmp    lFixedHeight, eax;
	__asm        je     _T7e;
// LINE 261:
	__asm        mov    eax, lFixedHeight;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 262:
_T7e:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 263:
	return 0x1;
// LINE 264:
}

// FUNCTION: COPTER_D 0x004ade3d
void ButtonWindow::ButtonWindow() {

	this->GraphicWindow::GraphicWindow();
	this->nButtonState = 0x1;
	this->bEnabled = 0x1;
	this->nButtonTextHeight = 0x0;
	__asm        jmp    _T37;
_T37:
	this->sizeTextOffset.cx = 0x2;
	this->sizeTextOffset.cy = 0x2;
	__asm        jmp    _T56;
_T56:
	this->bBusySettingState = 0x0;
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = 0x0;
	this->colorFont.Red = 0x0;
	__asm        jmp    _T86;
_T86:
	this->colorFontHighlighted.Blue = 0x0;
	this->colorFontHighlighted.Green = 0x0;
	this->colorFontHighlighted.Red = 0x0;
	__asm        jmp    _Ta9;
_Ta9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591B78;
	__asm        mov    eax, SZ_DEFAULT_BUTTON_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
// LINE 293:
	__asm        jmp    _Tbf;
_Tbf:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T10a;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tfb;
_Tfb:
	exit(0x1);
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T140;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1ca;

	__asm        jmp    _T12e;
_T12e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1ca;
_T140:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T16f;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T176;
_T16f:
	__asm        mov    dword ptr [ebp-4], 0;
_T176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1b7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1b7;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1b7;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T1fd;
_T1ca:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1fd;

	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1fd;
_T1fd:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T20e;
_T20e:
	__asm        jmp    _T213;
// LINE 294:
_T213:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ae05d
void ButtonWindow::ButtonWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, char * szImageFileName, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	this->nButtonState = 0x1;
	this->bEnabled = 0x1;
	this->nButtonTextHeight = 0x0;
	__asm        jmp    _T4b;
_T4b:
	this->sizeTextOffset.cx = 0x2;
	this->sizeTextOffset.cy = 0x2;
	__asm        jmp    _T6a;
_T6a:
	this->bBusySettingState = 0x0;
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = 0x0;
	this->colorFont.Red = 0x0;
	__asm        jmp    _T9a;
_T9a:
	this->colorFontHighlighted.Blue = 0x0;
	this->colorFontHighlighted.Green = 0x0;
	this->colorFontHighlighted.Red = 0x0;
	__asm        jmp    _Tbd;
_Tbd:
	this-><ButtonWindow+0x00> = 0x591b78;
// LINE 307:
	__asm        cmp    szImageFileName, 0;
	__asm        je     _T1f3;
// LINE 308:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    _T120;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T111;
_T111:
	exit(0x1);
	__asm        jmp    _T120;
_T120:
	__asm        jmp    _T125;
_T125:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T156;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1a5;

	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1a5;
_T156:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T185;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T18c;
_T185:
	__asm        mov    dword ptr [ebp-4], 0;
_T18c:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T1d8;
_T1a5:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1d8;

	__asm        jmp    _T1b4;
_T1b4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1e9;
_T1e9:
	__asm        jmp    _T1ee;
// LINE 309:
_T1ee:
	__asm        jmp    _T319;
// LINE 310:
_T1f3:
	__asm        mov    eax, SZ_DEFAULT_BUTTON_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T200;
_T200:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    _T24b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T23c;
_T23c:
	exit(0x1);
	__asm        jmp    _T24b;
_T24b:
	__asm        jmp    _T250;
_T250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T281;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T2d0;

	__asm        jmp    _T26f;
_T26f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2d0;
_T281:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T2b0;

	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T2b7;
_T2b0:
	__asm        mov    dword ptr [ebp-0x18], 0;
_T2b7:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T303;
_T2d0:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T303;

	__asm        jmp    _T2df;
_T2df:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T303;
_T303:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T314;
_T314:
	__asm        jmp    _T319;
// LINE 311:
_T319:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ae385
int32_t ButtonWindow::Initialize() {
// LINE 319:
	this-><ButtonWindow+0x58> = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 320:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 321:
__RETURN:
}

// FUNCTION: COPTER_D 0x004ae3b3
void ButtonWindow::SetTextColor(const /*packed*/ struct SparkalColor *colorNewFont, const /*packed*/ struct SparkalColor *colorNewFontHighlighted) {
// LINE 329:
	__asm        cmp    colorNewFont, 0;
	__asm        je     _T24;
// LINE 330:
	reinterpret_cast<uint32_t>(this->colorFont.Blue) = reinterpret_cast<uint32_t>(colorNewFont->Blue);
// LINE 331:
_T24:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     _T3c;
// LINE 332:
	reinterpret_cast<uint32_t>(this->colorFontHighlighted.Blue) = reinterpret_cast<uint32_t>(colorNewFontHighlighted->Blue);
// LINE 333:
_T3c:
	return;
}

// FUNCTION: COPTER_D 0x004ae3fb
int32_t ButtonWindow::GetImageCount() {
// LINE 340:
	return 0x3;
// LINE 341:
}

// FUNCTION: COPTER_D 0x004ae416
int32_t ButtonWindow::CreateImage(int32_t __formal) {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrent; // 0x10 bytes
	/*bp-0x14*/  int32_t nWindowHeight;
	/*bp-0x18*/  int32_t nWindowWidth;
	/*bp-0x58*/  char szTypeface[64]; // 0x40 bytes
	/*bp-0x5c*/  /*packed*/ class MFont *fontText;
	/*bp-0x60*/  int32_t nReturnValue;

// LINE 354:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 356:
_T1c:
	nReturnValue = this->GraphicWindow::CreateImage(0x1);
// LINE 357:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T6a9;
// LINE 359:
	__asm        jmp    _T3b;
_T3b:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x40];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        mov    ecx, eax;
	__asm        mov    eax, [ebx+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x18], ecx;
// LINE 360:
	nWindowWidth = (this-><ButtonWindow+0x18> - this-><ButtonWindow+0x10>);
	__asm        jmp    _T8e;
// LINE 361:
_T8e:
	nWindowHeight = (this-><ButtonWindow+0x1c> - this-><ButtonWindow+0x14>);
	__asm        jmp    _Ta8;
// LINE 362:
_Ta8:
	this->nButtonTextHeight = (nWindowHeight - 0xc);
// LINE 364:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6a9;
// LINE 365:
	LanguageManager::GetTypefaceForLanguage(0x0, 0x0, szTypeface[0]);
// LINE 366:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T11a;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   MFont::MFont;
	__asm        mov    fontText, eax;
	__asm        jmp    _T121;
_T11a:
	fontText = 0x0;
// LINE 367:
_T121:
	rectCurrent.top = 0x5;
// LINE 368:
	rectCurrent.bottom = nWindowHeight;
// LINE 369:
	rectCurrent.left = 0x0;
// LINE 370:
	__asm        mov    eax, nWindowWidth;
	__asm        mov    rectCurrent.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x70], eax;
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T15e;
// LINE 376:
_T15e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T18c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T18c:
	__asm        jmp    _T191;
_T191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1b5;
_T1b5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T252;

	__asm        jmp    _T1cd;
_T1cd:
	__asm        jmp    _T1d2;
_T1d2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T200;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T20f;

	__asm        jmp    _T20f;
_T200:
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T252;
_T252:
	__asm        jmp    _T257;
_T257:
	__asm        mov    byte ptr [ebp-0x7C], 0;
	__asm        jmp    _T260;
_T260:
	__asm        lea    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    _T26e;
_T26e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x88];
	__asm        mov    [ecx], al;
	__asm        jmp    _T29e;
_T29e:
	__asm        jmp    _T2a3;
_T2a3:
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 379:
	rectCurrent.left = nWindowWidth;
// LINE 380:
	rectCurrent.right = (rectCurrent.left + nWindowWidth);
// LINE 383:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T323;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T323:
	__asm        jmp    _T328;
_T328:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T34c;
_T34c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3e9;

	__asm        jmp    _T364;
_T364:
	__asm        jmp    _T369;
_T369:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T397;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T3a6;

	__asm        jmp    _T3a6;
_T397:
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e9;
_T3e9:
	__asm        jmp    _T3ee;
_T3ee:
	__asm        mov    byte ptr [ebp-0x9C], 0;
	__asm        jmp    _T3fa;
_T3fa:
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T40b;
_T40b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T43b;
_T43b:
	__asm        jmp    _T440;
_T440:
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 386:
	rectCurrent.left = (nWindowWidth + nWindowWidth);
// LINE 387:
	rectCurrent.right = (rectCurrent.left + nWindowWidth);
// LINE 388:
	rectCurrent.left += this->sizeTextOffset.cx;
// LINE 389:
	rectCurrent.right += this->sizeTextOffset.cx;
// LINE 390:
	rectCurrent.top += this->sizeTextOffset.cy;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    rectCurrent.bottom, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x74], eax;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T4e7;
// LINE 395:
_T4e7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T521;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T521:
	__asm        jmp    _T526;
_T526:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T54a;
_T54a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5e7;

	__asm        jmp    _T562;
_T562:
	__asm        jmp    _T567;
_T567:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T595;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    _T5a4;

	__asm        jmp    _T5a4;
_T595:
	__asm        mov    dword ptr [ebp-0xCC], 0;
	__asm        jmp    _T5a4;
_T5a4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5e7;
_T5e7:
	__asm        jmp    _T5ec;
_T5ec:
	__asm        mov    byte ptr [ebp-0xBC], 0;
	__asm        jmp    _T5f8;
_T5f8:
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T609;
_T609:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T639;
_T639:
	__asm        jmp    _T63e;
_T63e:
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 397:
	__asm        mov    eax, fontText;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T6a9;

	__asm        mov    ecx, [ebp-0x68];
	__asm        call   MFont::~MFont;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T6a4;
_T6a4:
	__asm        jmp    _T6a9;
// LINE 400:
_T6a9:
	return nReturnValue;
// LINE 401:
}

// FUNCTION: COPTER_D 0x004aeace
void ButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 409:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T33;
// LINE 410:
	this->nButtonState = nNewButtonState;
// LINE 411:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 413:
_T33:
	return;
}

// FUNCTION: COPTER_D 0x004aeb0d
void ButtonWindow::Enable() {
// LINE 420:
	this->bEnabled = 0x1;
// LINE 421:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 422:
	return;
}

// FUNCTION: COPTER_D 0x004aeb3c
void ButtonWindow::Disable() {
// LINE 428:
	this->bEnabled = 0x0;
// LINE 429:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 430:
	return;
}

// FUNCTION: COPTER_D 0x004aeb6b
int32_t ButtonWindow::ComposeSelf() {
	/*bp-0x4*/   int32_t nWindowWidth;
	/*bp-0x8*/   int32_t nStartXPosition;

// LINE 441:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T23;
// LINE 442:
	return 0x1;
// LINE 443:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3f;
// LINE 444:
	return 0x1;
// LINE 445:
_T3f:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 448:
	nWindowWidth = (this-><ButtonWindow+0x18> - this-><ButtonWindow+0x10>);
	__asm        jmp    _T62;
// LINE 449:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T81;
// LINE 450:
	nStartXPosition = (this->nButtonState * nWindowWidth);
// LINE 451:
	__asm        jmp    _T88;
// LINE 452:
_T81:
	nStartXPosition = 0x0;
// LINE 456:
_T88:
	__asm        jmp    _T8d;
_T8d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 457:
	return 0x1;
// LINE 458:
}

// FUNCTION: COPTER_D 0x004aec47
long ButtonWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 466:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T20;
// LINE 467:
	return 0x0;
// LINE 469:
_T20:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 470:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 472:
	return 0x1;
// LINE 473:
}

// FUNCTION: COPTER_D 0x004aec9a
long ButtonWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long __formal) {
// LINE 481:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _Ta2;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Ta2;
// LINE 482:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 483:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 484:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     _Ta2;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Ta2;
// LINE 485:
	__asm        push   0;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 487:
_Ta2:
	return 0x1;
// LINE 488:
}

// FUNCTION: COPTER_D 0x004aed4d
long ButtonWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 496:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T85;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T85;
// LINE 497:
_T33:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     _T66;
// LINE 498:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 499:
	__asm        jmp    _T76;
// LINE 500:
_T66:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 501:
_T76:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 503:
_T85:
	return 0x1;
// LINE 504:
}

// FUNCTION: COPTER_D 0x004aede3
int32_t ButtonWindow::CanWeRespondToMessage() {
// LINE 512:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CanWeRespondToMessage;
	__asm        test   eax, eax;
	__asm        jne    _T23;
// LINE 513:
	return 0x0;
// LINE 514:
_T23:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T37;
// LINE 515:
	return 0x0;
// LINE 516:
_T37:
	return 0x1;
// LINE 517:
}

// FUNCTION: COPTER_D 0x004aee29
void CheckBoxWindow::CheckBoxWindow() {

	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::ButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591C58;
	__asm        mov    eax, SZ_DEFAULT_CHECKBOX_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x34], eax;
// LINE 540:
	__asm        jmp    _T2a;
_T2a:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T75;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T66;
_T66:
	exit(0x1);
	__asm        jmp    _T75;
_T75:
	__asm        jmp    _T7a;
_T7a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tab;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T22c;

	__asm        jmp    _T99;
_T99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T22c;
_Tab:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T186;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _Tfe;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tef;
_Tef:
	exit(0x1);
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T163;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T15e;
_T15e:
	__asm        jmp    _T16c;
_T163:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T16c:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T18d;
_T186:
	__asm        mov    dword ptr [ebp-4], 0;
_T18d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T219;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1f9;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T1f9:
	__asm        jmp    _T1fe;
_T1fe:
	__asm        jmp    _T203;
_T203:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T214;
_T214:
	__asm        jmp    _T219;
_T219:
	__asm        jmp    _T21e;
_T21e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T25f;
_T22c:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T25f;

	__asm        jmp    _T23b;
_T23b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T25f;
_T25f:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T270;
_T270:
	__asm        jmp    _T275;
// LINE 541:
_T275:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004af0ab
void CheckBoxWindow::CheckBoxWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, char * szImageFileName, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->ButtonWindow::ButtonWindow(rectNewWindow, nNewID, windowNewParent, szImageFileName, myNewOwner, bAddToParentList);
	this-><CheckBoxWindow+0x00> = 0x591c58;
// LINE 553:
	__asm        cmp    szImageFileName, 0;
	__asm        je     _T294;
// LINE 554:
	__asm        jmp    _T44;
_T44:
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T8f;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T80;
_T80:
	exit(0x1);
	__asm        jmp    _T8f;
_T8f:
	__asm        jmp    _T94;
_T94:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tc5;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T246;

	__asm        jmp    _Tb3;
_Tb3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T246;
_Tc5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1a0;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T118;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T109;
_T109:
	exit(0x1);
	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T17d;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T178;
_T178:
	__asm        jmp    _T186;
_T17d:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T186:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T195;
_T195:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1a7;
_T1a0:
	__asm        mov    dword ptr [ebp-4], 0;
_T1a7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T233;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T233;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T213;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T213:
	__asm        jmp    _T218;
_T218:
	__asm        jmp    _T21d;
_T21d:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T22e;
_T22e:
	__asm        jmp    _T233;
_T233:
	__asm        jmp    _T238;
_T238:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T279;
_T246:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T279;

	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T28a;
_T28a:
	__asm        jmp    _T28f;
// LINE 555:
_T28f:
	__asm        jmp    _T4ec;
// LINE 556:
_T294:
	__asm        mov    eax, SZ_DEFAULT_CHECKBOX_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T2a1;
_T2a1:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    _T2ec;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2dd;
_T2dd:
	exit(0x1);
	__asm        jmp    _T2ec;
_T2ec:
	__asm        jmp    _T2f1;
_T2f1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T322;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T4a3;

	__asm        jmp    _T310;
_T310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x60];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4a3;
_T322:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3fd;

	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    _T375;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T366;
_T366:
	exit(0x1);
	__asm        jmp    _T375;
_T375:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3da;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3d5;
_T3d5:
	__asm        jmp    _T3e3;
_T3da:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T3e3:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3f2;
_T3f2:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T404;
_T3fd:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T404:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T490;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T490;

	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T470;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
_T470:
	__asm        jmp    _T475;
_T475:
	__asm        jmp    _T47a;
_T47a:
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T48b;
_T48b:
	__asm        jmp    _T490;
_T490:
	__asm        jmp    _T495;
_T495:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T4d6;
_T4a3:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T4d6;

	__asm        jmp    _T4b2;
_T4b2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4d6;
_T4d6:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4e7;
_T4e7:
	__asm        jmp    _T4ec;
// LINE 557:
_T4ec:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004af5a6
int32_t CheckBoxWindow::GetImageCount() {
// LINE 564:
	return 0x4;
// LINE 565:
}

// FUNCTION: COPTER_D 0x004af5c1
int32_t CheckBoxWindow::ComposeSelf() {
	/*bp-0x4*/   int32_t nWindowWidth;
	/*bp-0x8*/   int32_t nStartXPosition;

// LINE 576:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T23;
// LINE 577:
	return 0x1;
// LINE 578:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3f;
// LINE 579:
	return 0x1;
// LINE 580:
_T3f:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 583:
	nWindowWidth = (this-><CheckBoxWindow+0x18> - this-><CheckBoxWindow+0x10>);
	__asm        jmp    _T62;
// LINE 584:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T88;
// LINE 585:
	nStartXPosition = ((((this->nButtonState - 1) * nWindowWidth) + nWindowWidth) + nWindowWidth);
// LINE 586:
	__asm        jmp    _T96;
// LINE 587:
_T88:
	nStartXPosition = ((this->nButtonState - 1) * nWindowWidth);
// LINE 590:
_T96:
	__asm        jmp    _T9b;
_T9b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 591:
	return 0x1;
// LINE 592:
}

// FUNCTION: COPTER_D 0x004af6ab
void CheckBoxWindow::SetState(int32_t nNewButtonState) {
// LINE 602:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T21;
// LINE 603:
	return;
// LINE 604:
_T21:
	this->bBusySettingState = 0x1;
// LINE 606:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T89;
// LINE 607:
	this->nButtonState = nNewButtonState;
// LINE 608:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 609:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T89;
// LINE 610:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 612:
_T89:
	this->bBusySettingState = 0x0;
// LINE 613:
	return;
}

// FUNCTION: COPTER_D 0x004af74d
long CheckBoxWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 622:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T20;
// LINE 623:
	return 0x0;
// LINE 625:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _T42;
// LINE 626:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 627:
	__asm        jmp    _T5f;
_T42:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 2;
	__asm        jne    _T5f;
// LINE 628:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 630:
_T5f:
	return 0x1;
// LINE 631:
}

// FUNCTION: COPTER_D 0x004af7bd
long CheckBoxWindow::DoCursorUp(long __formal, long __formal, unsigned long __formal) {
// LINE 639:
	return 0x1;
// LINE 640:
}

// FUNCTION: COPTER_D 0x004af7da
long CheckBoxWindow::DoCursorMove(long __formal, long __formal) {
// LINE 648:
	return 0x1;
// LINE 649:
}

// FUNCTION: COPTER_D 0x004af7f7
void RadioButtonWindow::RadioButtonWindow(/*unpacked*/ class ButtonGroup *myNewRadioButtonGroup, /*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, char * szImageFileName, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->ButtonWindow::ButtonWindow(rectNewWindow, nNewID, windowNewParent, szImageFileName, myNewOwner, bAddToParentList);
	this->myRadioButtonGroup = myNewRadioButtonGroup;
	this-><RadioButtonWindow+0x00> = 0x591d38;
// LINE 677:
	__asm        cmp    szImageFileName, 0;
	__asm        je     _T2a0;
// LINE 678:
	__asm        jmp    _T50;
_T50:
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T9b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T8c;
_T8c:
	exit(0x1);
	__asm        jmp    _T9b;
_T9b:
	__asm        jmp    _Ta0;
_Ta0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Td1;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T252;

	__asm        jmp    _Tbf;
_Tbf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T252;
_Td1:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1ac;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T124;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T115;
_T115:
	exit(0x1);
	__asm        jmp    _T124;
_T124:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T189;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T184;
_T184:
	__asm        jmp    _T192;
_T189:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T192:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1a1;
_T1a1:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1b3;
_T1ac:
	__asm        mov    dword ptr [ebp-4], 0;
_T1b3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T23f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T23f;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T21f;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T21f:
	__asm        jmp    _T224;
_T224:
	__asm        jmp    _T229;
_T229:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T23a;
_T23a:
	__asm        jmp    _T23f;
_T23f:
	__asm        jmp    _T244;
_T244:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T285;
_T252:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T285;

	__asm        jmp    _T261;
_T261:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T285;
_T285:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T296;
_T296:
	__asm        jmp    _T29b;
// LINE 679:
_T29b:
	__asm        jmp    _T4f8;
// LINE 680:
_T2a0:
	__asm        mov    eax, SZ_DEFAULT_RADIO_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T2ad;
_T2ad:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    _T2f8;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2e9;
_T2e9:
	exit(0x1);
	__asm        jmp    _T2f8;
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T32e;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T4af;

	__asm        jmp    _T31c;
_T31c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x60];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4af;
_T32e:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T409;

	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    _T381;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T372;
_T372:
	exit(0x1);
	__asm        jmp    _T381;
_T381:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3e6;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e1;
_T3e1:
	__asm        jmp    _T3ef;
_T3e6:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T3ef:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3fe;
_T3fe:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T410;
_T409:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T410:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T49c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T49c;

	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T47c;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
_T47c:
	__asm        jmp    _T481;
_T481:
	__asm        jmp    _T486;
_T486:
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T497;
_T497:
	__asm        jmp    _T49c;
_T49c:
	__asm        jmp    _T4a1;
_T4a1:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T4e2;
_T4af:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T4e2;

	__asm        jmp    _T4be;
_T4be:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4e2;
_T4e2:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4f3;
_T4f3:
	__asm        jmp    _T4f8;
// LINE 681:
_T4f8:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004afcfe
void RadioButtonWindow::~RadioButtonWindow() {

	this-><RadioButtonWindow+0x00> = 0x591d38;
// LINE 703:
	__asm        jmp    _T1a;
_T1a:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x004afd2a
int32_t RadioButtonWindow::Initialize() {
// LINE 711:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T2e;
// LINE 712:
	this->myRadioButtonGroup->ButtonGroup::AddButton(this);
// LINE 713:
_T2e:
	return this->ButtonWindow::Initialize();
// LINE 714:
}

// FUNCTION: COPTER_D 0x004afd6a
int32_t RadioButtonWindow::ComposeSelf() {
	/*bp-0x4*/   int32_t nWindowWidth;
	/*bp-0x8*/   int32_t nStartXPosition;

// LINE 725:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T23;
// LINE 726:
	return 0x1;
// LINE 727:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3f;
// LINE 728:
	return 0x1;
// LINE 729:
_T3f:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 732:
	nWindowWidth = (this-><RadioButtonWindow+0x18> - this-><RadioButtonWindow+0x10>);
	__asm        jmp    _T62;
// LINE 733:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T88;
// LINE 734:
	nStartXPosition = ((((this->nButtonState - 1) * nWindowWidth) + nWindowWidth) + nWindowWidth);
// LINE 735:
	__asm        jmp    _T96;
// LINE 736:
_T88:
	nStartXPosition = ((this->nButtonState - 1) * nWindowWidth);
// LINE 739:
_T96:
	__asm        jmp    _T9b;
_T9b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 740:
	return 0x1;
// LINE 741:
}

// FUNCTION: COPTER_D 0x004afe54
int32_t RadioButtonWindow::GetImageCount() {
// LINE 752:
	return 0x4;
// LINE 753:
}

// FUNCTION: COPTER_D 0x004afe6f
void RadioButtonWindow::AddToGroup(/*unpacked*/ class ButtonGroup *myNewRadioButtonGroup) {
// LINE 760:
	this->myRadioButtonGroup = myNewRadioButtonGroup;
// LINE 761:
	myNewRadioButtonGroup->ButtonGroup::AddButton(this);
// LINE 762:
	return;
}

// FUNCTION: COPTER_D 0x004afe9f
int32_t RadioButtonWindow::RemoveFromGroup() {
// LINE 769:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T38;
// LINE 770:
	this->myRadioButtonGroup->ButtonGroup::RemoveButton(this);
// LINE 771:
	return 0x1;
// LINE 773:
_T38:
	return 0x0;
// LINE 774:
}

// FUNCTION: COPTER_D 0x004afee3
void RadioButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 782:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T21;
// LINE 783:
	return;
// LINE 784:
_T21:
	this->bBusySettingState = 0x1;
// LINE 786:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _Td8;
// LINE 787:
	this->nButtonState = nNewButtonState;
// LINE 788:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 789:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 2;
	__asm        jne    _Td8;
// LINE 790:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _Ta4;
// LINE 791:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x94];
	__asm        call   dword ptr [edx];
// LINE 792:
	__asm        jmp    _Td8;
_Ta4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Td8;
// LINE 793:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 796:
_Td8:
	this->bBusySettingState = 0x0;
// LINE 797:
	return;
}

// FUNCTION: COPTER_D 0x004affd4
long RadioButtonWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 806:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T20;
// LINE 807:
	return 0x0;
// LINE 809:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _T64;
// LINE 810:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T54;
// LINE 812:
	this->myRadioButtonGroup->ButtonGroup::SetSelection(this);
// LINE 814:
	__asm        jmp    _T64;
// LINE 815:
_T54:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 824:
_T64:
	return 0x1;
// LINE 825:
}

// FUNCTION: COPTER_D 0x004b0049
long RadioButtonWindow::DoCursorUp(long __formal, long __formal, unsigned long __formal) {
// LINE 831:
	return 0x1;
// LINE 832:
}

// FUNCTION: COPTER_D 0x004b0066
long RadioButtonWindow::DoCursorMove(long __formal, long __formal) {
// LINE 838:
	return 0x1;
// LINE 839:
}

// FUNCTION: COPTER_D 0x004b0083
void ButtonGroup::ButtonGroup() {

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    list<RadioButtonWindow *>::number_of_lists;
	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<RadioButtonWindow *>::free_list, 0;
	__asm        je     _T50;

	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<RadioButtonWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T22d;
_T50:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        cmp    list<RadioButtonWindow *>::last, eax;
	__asm        jne    _T218;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Taf;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Ta5;
_Ta5:
	exit(0x1);
_Taf:
	__asm        jmp    _Tb4;
_Tb4:
	__asm        jmp    _Tb9;
_Tb9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tf4;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tfa;
_Tf4:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tfa:
	__asm        jmp    _Tff;
_Tff:
	__asm        jmp    _T104;
_T104:
	__asm        jmp    _T109;
_T109:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T167;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T15d;
_T15d:
	exit(0x1);
_T167:
	__asm        jmp    _T16c;
_T16c:
	__asm        jmp    _T171;
_T171:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<RadioButtonWindow *>::buffer_list, eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<RadioButtonWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1ce;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1d4;
_T1ce:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1d4:
	__asm        jmp    _T1d9;
_T1d9:
	__asm        jmp    _T1de;
_T1de:
	__asm        jmp    _T1e3;
_T1e3:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    list<RadioButtonWindow *>::last, eax;
	__asm        jmp    _T1fe;
_T1fe:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T22d;
_T218:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T22d:
	__asm        jmp    _T232;
_T232:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T25d;
_T25d:
	this-><ButtonGroup+0x7c:4> = 0x0;
	this-><ButtonGroup+0x80:4> = 0x0;
	this-><ButtonGroup+0x00:4> = 0x591e20;
// LINE 857:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b030d
void ButtonGroup::ButtonGroup(long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*unpacked*/ class GraphicWindow *gwMyNewOwner, int32_t bAddToParentList) {

	__asm        jmp    _T11;
_T11:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, gwMyNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    list<RadioButtonWindow *>::number_of_lists;
	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    list<RadioButtonWindow *>::free_list, 0;
	__asm        je     _T8a;

	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<RadioButtonWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T267;
_T8a:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        cmp    list<RadioButtonWindow *>::last, eax;
	__asm        jne    _T252;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _Te9;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tdf;
_Tdf:
	exit(0x1);
_Te9:
	__asm        jmp    _Tee;
_Tee:
	__asm        jmp    _Tf3;
_Tf3:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x24], 0x155;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T12e;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T134;
_T12e:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
_T134:
	__asm        jmp    _T139;
_T139:
	__asm        jmp    _T13e;
_T13e:
	__asm        jmp    _T143;
_T143:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    _T1a1;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T197;
_T197:
	exit(0x1);
_T1a1:
	__asm        jmp    _T1a6;
_T1a6:
	__asm        jmp    _T1ab;
_T1ab:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    list<RadioButtonWindow *>::buffer_list, eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<RadioButtonWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x38], 0x155;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T208;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T20e;
_T208:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
_T20e:
	__asm        jmp    _T213;
_T213:
	__asm        jmp    _T218;
_T218:
	__asm        jmp    _T21d;
_T21d:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    list<RadioButtonWindow *>::last, eax;
	__asm        jmp    _T238;
_T238:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-0x18], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T267;
_T252:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x60], eax;
_T267:
	__asm        jmp    _T26c;
_T26c:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T297;
_T297:
	this-><ButtonGroup+0x7c:4> = 0x0;
	this-><ButtonGroup+0x80:4> = 0x0;
	this-><ButtonGroup+0x00:4> = 0x591e20;
// LINE 869:
	this-><ButtonGroup+0x54:4> = 0x0;
	__asm        jmp    _T2c6;
// LINE 870:
_T2c6:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b05e2
void ButtonGroup::AddButton(/*packed*/ class RadioButtonWindow *buttonNew) {
// LINE 879:
	__asm        mov    eax, buttonNew;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonGroup::IsButtonInGroup;
	__asm        test   eax, eax;
	__asm        jne    _T2c6;
// LINE 880:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T34;
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<RadioButtonWindow *>::free_list, 0;
	__asm        je     _T6b;

	__asm        mov    eax, list<RadioButtonWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<RadioButtonWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T248;
_T6b:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        cmp    list<RadioButtonWindow *>::last, eax;
	__asm        jne    _T233;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tca;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc0;
_Tc0:
	exit(0x1);
_Tca:
	__asm        jmp    _Tcf;
_Tcf:
	__asm        jmp    _Td4;
_Td4:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T10f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T115;
_T10f:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T115:
	__asm        jmp    _T11a;
_T11a:
	__asm        jmp    _T11f;
_T11f:
	__asm        jmp    _T124;
_T124:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T182;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T178;
_T178:
	exit(0x1);
_T182:
	__asm        jmp    _T187;
_T187:
	__asm        jmp    _T18c;
_T18c:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<RadioButtonWindow *>::buffer_list, eax;
	__asm        mov    eax, list<RadioButtonWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<RadioButtonWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1e9;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1ef;
_T1e9:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1ef:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        jmp    _T1f9;
_T1f9:
	__asm        jmp    _T1fe;
_T1fe:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    list<RadioButtonWindow *>::last, eax;
	__asm        jmp    _T219;
_T219:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T248;
_T233:
	__asm        mov    eax, list<RadioButtonWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<RadioButtonWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T248:
	__asm        jmp    _T24d;
_T24d:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T258;
_T258:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T266;
_T266:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T27d;

	__asm        mov    eax, buttonNew;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T27d;
_T27d:
	__asm        jmp    _T282;
_T282:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2bc;
_T2bc:
	__asm        jmp    _T2c1;
_T2c1:
	__asm        jmp    _T2c6;
// LINE 881:
_T2c6:
	return;
}

// FUNCTION: COPTER_D 0x004b08b4
void ButtonGroup::RemoveButton(/*packed*/ class RadioButtonWindow *buttonToRemove) {
	/*bp-0x4*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 895:
_T27:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T39;
// LINE 896:
	return;
// LINE 897:
_T39:
	this-><ButtonGroup+0x7c:4> = 0x1;
// LINE 899:
_LOOP_43:
	for (;;) {
		// LINE 899:
		_LOOP_43:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    [ebp-8], eax;
			__asm        jmp    _T57;
		_T57:
			__asm        jmp    _T5c;
		_T5c:
			__asm        mov    eax, [ebp-8];
			__asm        cmp    iterator.node, eax;
			__asm        jne    _T72;

			__asm        jmp    _T86;

			__asm        jmp    _T72;
		_T72:
			__asm        jmp    _T81;

			__asm        cmp    dword ptr [ebp-0x14], 0;
			__asm        jne    _T86;
		_T81:
			__asm        jmp    _T8b;
		_T86:
			__asm        jmp    _T123;
		_T8b:
			__asm        jmp    _T9a;

			__asm        cmp    dword ptr [ebp-0x18], 0;
			__asm        je     _T123;
		// LINE 900:
		_T9a:
			__asm        jmp    _T9f;
		_T9f:
			__asm        mov    eax, iterator.node;
			__asm        mov    ecx, buttonToRemove;
			__asm        cmp    [eax+8], ecx;
			__asm        jne    _T100;

			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x24], eax;
		// LINE 901:
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x24];
			__asm        mov    ecx, [ecx+4];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x24];
			__asm        mov    ecx, [ecx];
			__asm        mov    [ecx+4], eax;
			__asm        jmp    _Td4;
		_Td4:
			__asm        jmp    _Td9;
		_Td9:
			__asm        mov    eax, list<RadioButtonWindow *>::free_list;
			__asm        mov    ecx, [ebp-0x24];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    list<RadioButtonWindow *>::free_list, eax;
			__asm        jmp    _Tf0;
		_Tf0:
			this-><ButtonGroup+0x78:4>--;
			__asm        jmp    _Tfb;
		// LINE 902:
		_Tfb:
			return;
		// LINE 904:
		_T100:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _T113;
		_T113:
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T11e;
		// LINE 905:
		_T11e:
	}
// LINE 906:
_T123:
	this-><ButtonGroup+0x7c:4> = 0x0;
// LINE 907:
	return;
}

// FUNCTION: COPTER_D 0x004b09ed
void ButtonGroup::SetSelection(/*packed*/ class RadioButtonWindow *buttonToSelect) {
	/*bp-0x4*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 920:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 922:
_T27:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _T3c;
// LINE 923:
	return;
// LINE 924:
_T3c:
	this-><ButtonGroup+0x80:4> = 0x1;
// LINE 926:
_LOOP_49:
	for (;;) {
		// LINE 926:
		_LOOP_49:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    [ebp-8], eax;
			__asm        jmp    _T5d;
		_T5d:
			__asm        jmp    _T62;
		_T62:
			__asm        mov    eax, [ebp-8];
			__asm        cmp    iterator.node, eax;
			__asm        jne    _T78;

			__asm        jmp    _T8c;

			__asm        jmp    _T78;
		_T78:
			__asm        jmp    _T87;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        jne    _T8c;
		_T87:
			__asm        jmp    _T91;
		_T8c:
			__asm        jmp    _T124;
		_T91:
			__asm        jmp    _Ta0;

			__asm        cmp    dword ptr [ebp-0x28], 0;
			__asm        je     _T124;
		// LINE 927:
		_Ta0:
			__asm        jmp    _Ta5;
		_Ta5:
			__asm        mov    eax, iterator.node;
			__asm        mov    ecx, buttonToSelect;
			__asm        cmp    [eax+8], ecx;
			__asm        jne    _Tdd;
		// LINE 928:
			__asm        jmp    _Tb9;
		_Tb9:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x14], eax;
			__asm        push   2;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    ecx, [ebp-0x10];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 929:
			__asm        jmp    _T101;
		// LINE 930:
		_Tdd:
			__asm        jmp    _Te2;
		_Te2:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x1C], eax;
			__asm        push   1;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    ecx, [ebp-0x18];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 931:
		_T101:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _T114;
		_T114:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T11f;
		// LINE 932:
		_T11f:
	}
// LINE 933:
_T124:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T155;
// LINE 934:
	__asm        mov    eax, buttonToSelect;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 936:
_T155:
	this-><ButtonGroup+0x80:4> = 0x0;
// LINE 937:
	return;
}

// FUNCTION: COPTER_D 0x004b0b5b
void ButtonGroup::SetSelection(long lIDOfButtonToSelect) {
	/*bp-0x4*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 950:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 952:
_T27:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _T3c;
// LINE 953:
	return;
// LINE 954:
_T3c:
	this-><ButtonGroup+0x80:4> = 0x1;
// LINE 956:
_LOOP_49:
	for (;;) {
		// LINE 956:
		_LOOP_49:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    [ebp-8], eax;
			__asm        jmp    _T5d;
		_T5d:
			__asm        jmp    _T62;
		_T62:
			__asm        mov    eax, iterator.node;
			__asm        cmp    [ebp-8], eax;
			__asm        jne    _T78;

			__asm        jmp    _T8c;

			__asm        jmp    _T78;
		_T78:
			__asm        jmp    _T87;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        jne    _T8c;
		_T87:
			__asm        jmp    _T91;
		_T8c:
			__asm        jmp    _T127;
		_T91:
			__asm        jmp    _Ta0;

			__asm        cmp    dword ptr [ebp-0x28], 0;
			__asm        je     _T127;
		// LINE 957:
		_Ta0:
			__asm        jmp    _Ta5;
		_Ta5:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    ecx, lIDOfButtonToSelect;
			__asm        cmp    [eax+4], ecx;
			__asm        jne    _Te0;
		// LINE 958:
			__asm        jmp    _Tbc;
		_Tbc:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x14], eax;
			__asm        push   2;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    ecx, [ebp-0x10];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 959:
			__asm        jmp    _T104;
		// LINE 960:
		_Te0:
			__asm        jmp    _Te5;
		_Te5:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x1C], eax;
			__asm        push   1;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    ecx, [ebp-0x18];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 961:
		_T104:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _T117;
		_T117:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T122;
		// LINE 962:
		_T122:
	}
// LINE 964:
_T127:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T160;
// LINE 965:
	__asm        jmp    _T139;
_T139:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 967:
_T160:
	this-><ButtonGroup+0x80:4> = 0x0;
// LINE 968:
	return;
}

// FUNCTION: COPTER_D 0x004b0cd4
void ButtonGroup::SetSelectionIndex(int32_t nIndexOfButtonToSelect) {
	/*bp-0x4*/   int32_t i;
	/*bp-0x8*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 981:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 982:
_T27:
	i = 0x0;
// LINE 984:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _T43;
// LINE 985:
	return;
// LINE 986:
_T43:
	this-><ButtonGroup+0x80:4> = 0x1;
// LINE 988:
_LOOP_50:
	for (;;) {
		// LINE 988:
		_LOOP_50:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T64;
		_T64:
			__asm        jmp    _T69;
		_T69:
			__asm        mov    eax, [ebp-0xC];
			__asm        cmp    iterator.node, eax;
			__asm        jne    _T7f;

			__asm        jmp    _T93;

			__asm        jmp    _T7f;
		_T7f:
			__asm        jmp    _T8e;

			__asm        cmp    dword ptr [ebp-0x28], 0;
			__asm        jne    _T93;
		_T8e:
			__asm        jmp    _T98;
		_T93:
			__asm        jmp    _T127;
		_T98:
			__asm        jmp    _Ta7;

			__asm        cmp    dword ptr [ebp-0x2C], 0;
			__asm        je     _T127;
		// LINE 989:
		_Ta7:
			__asm        mov    eax, nIndexOfButtonToSelect;
			__asm        cmp    i, eax;
			__asm        jne    _Tdc;
		// LINE 990:
			__asm        jmp    _Tb8;
		_Tb8:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x14], eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x18], eax;
			__asm        push   2;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    ecx, [ebp-0x14];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 991:
			__asm        jmp    _T100;
		// LINE 992:
		_Tdc:
			__asm        jmp    _Te1;
		_Te1:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x1C], eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x20], eax;
			__asm        push   1;
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    ecx, [ebp-0x1C];
			__asm        call   dword ptr [eax+0xC8];
		// LINE 993:
		_T100:
			i += 0x1;
		// LINE 994:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _T117;
		_T117:
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T122;
		// LINE 995:
		_T122:
	}
// LINE 997:
_T127:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T160;
// LINE 998:
	__asm        jmp    _T139;
_T139:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1000:
_T160:
	this-><ButtonGroup+0x80:4> = 0x0;
// LINE 1001:
	return;
}

// FUNCTION: COPTER_D 0x004b0e4d
int32_t ButtonGroup::GetSelection(/*packed*/ class RadioButtonWindow*& radioButtonWindow) {
	/*bp-0x4*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 1012:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 1014:
_LOOP_27:
	for (;;) {
		// LINE 1014:
		_LOOP_27:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    [ebp-8], eax;
			__asm        jmp    _T3b;
		_T3b:
			__asm        jmp    _T40;
		_T40:
			__asm        mov    eax, [ebp-8];
			__asm        cmp    iterator.node, eax;
			__asm        jne    _T56;

			__asm        jmp    _T6a;

			__asm        jmp    _T56;
		_T56:
			__asm        jmp    _T65;

			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        jne    _T6a;
		_T65:
			__asm        jmp    _T6f;
		_T6a:
			__asm        jmp    _Te6;
		_T6f:
			__asm        jmp    _T7e;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        je     _Te6;
		// LINE 1015:
		_T7e:
			__asm        jmp    _T83;
		_T83:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x14], eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    ecx, [ebp-0x10];
			__asm        call   dword ptr [eax+0xCC];
			__asm        cmp    eax, 2;
			__asm        jne    _Tc3;
		// LINE 1016:
			__asm        jmp    _Tae;
		_Tae:
			radioButtonWindow. = iterator.node->data;
		// LINE 1017:
			return 0x1;
		// LINE 1019:
		_Tc3:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _Td6;
		_Td6:
			__asm        mov    eax, [ebp-0x28];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _Te1;
		// LINE 1020:
		_Te1:
	}
// LINE 1021:
_Te6:
	return 0x0;
// LINE 1022:
}

// FUNCTION: COPTER_D 0x004b0f41
int32_t ButtonGroup::GetSelection(long& lCurrentSelection) {
	/*bp-0x4*/   /*packed*/ class RadioButtonWindow *tempRadioButtonWindow;

// LINE 1035:
	__asm        lea    eax, tempRadioButtonWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonGroup::GetSelection;
	__asm        test   eax, eax;
	__asm        je     _T2a;
// LINE 1037:
	return 0x1;
// LINE 1039:
_T2a:
	return 0x0;
// LINE 1040:
}

// FUNCTION: COPTER_D 0x004b0f79
int32_t ButtonGroup::GetSelectionIndex() {
	/*bp-0x4*/   int32_t i;
	/*bp-0x8*/   /*packed*/ class list<RadioButtonWindow *>::iterator iterator;

// LINE 1050:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 1051:
_T27:
	i = 0x0;
// LINE 1053:
_LOOP_2e:
	for (;;) {
		// LINE 1053:
		_LOOP_2e:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x1C], eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T42;
		_T42:
			__asm        jmp    _T47;
		_T47:
			__asm        mov    eax, [ebp-0xC];
			__asm        cmp    iterator.node, eax;
			__asm        jne    _T5d;

			__asm        jmp    _T71;

			__asm        jmp    _T5d;
		_T5d:
			__asm        jmp    _T6c;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        jne    _T71;
		_T6c:
			__asm        jmp    _T76;
		_T71:
			__asm        jmp    _Tdf;
		_T76:
			__asm        jmp    _T85;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        je     _Tdf;
		// LINE 1054:
		_T85:
			__asm        jmp    _T8a;
		_T8a:
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x14], eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    ecx, [ebp-0x14];
			__asm        call   dword ptr [eax+0xCC];
			__asm        cmp    eax, 2;
			__asm        jne    _Tb8;
		// LINE 1055:
			return i;
		// LINE 1056:
		_Tb8:
			i += 0x1;
		// LINE 1057:
			__asm        mov    eax, iterator.node;
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, iterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    iterator.node, eax;
			__asm        jmp    _Tcf;
		_Tcf:
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _Tda;
		// LINE 1058:
		_Tda:
	}
// LINE 1059:
_Tdf:
	return 0xffffffff;
// LINE 1060:
}

// FUNCTION: COPTER_D 0x004b1067
int32_t ButtonGroup::IsButtonInGroup(/*packed*/ class RadioButtonWindow *buttonToFind) {
	/*bp-0x4*/   /*packed*/ class list<RadioButtonWindow *>::iterator i;

// LINE 1069:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 1071:
_LOOP_27:
	for (;;) {
		// LINE 1071:
		_LOOP_27:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    [ebp-8], eax;
			__asm        jmp    _T3b;
		_T3b:
			__asm        jmp    _T40;
		_T40:
			__asm        mov    eax, [ebp-8];
			__asm        cmp    i.node, eax;
			__asm        jne    _T56;

			__asm        jmp    _T6a;

			__asm        jmp    _T56;
		_T56:
			__asm        jmp    _T65;

			__asm        cmp    dword ptr [ebp-0x14], 0;
			__asm        jne    _T6a;
		_T65:
			__asm        jmp    _T6f;
		_T6a:
			__asm        jmp    _Tbf;
		_T6f:
			__asm        jmp    _T7e;

			__asm        cmp    dword ptr [ebp-0x18], 0;
			__asm        je     _Tbf;
		// LINE 1072:
		_T7e:
			__asm        jmp    _T83;
		_T83:
			__asm        mov    eax, i.node;
			__asm        mov    ecx, buttonToFind;
			__asm        cmp    [eax+8], ecx;
			__asm        jne    _T9c;
		// LINE 1073:
			return 0x1;
		// LINE 1074:
		_T9c:
			__asm        mov    eax, i.node;
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, i.node;
			__asm        mov    eax, [eax];
			__asm        mov    i.node, eax;
			__asm        jmp    _Taf;
		_Taf:
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _Tba;
		// LINE 1075:
		_Tba:
	}
// LINE 1076:
_Tbf:
	return 0x0;
// LINE 1077:
}

// FUNCTION: COPTER_D 0x004b1134
void SliderWindow::SliderWindow() {

	this->GraphicWindow::GraphicWindow();
	this->nSliderWindowDirection = 0x0;
	this->lSliderMinimumValue = 0x0;
	this->lSliderMaximumValue = 0x8;
	this->lSliderCurrentValue = 0x0;
	this->lMinimumThumbPosition = 0x0;
	this->lCurrentThumbPosition = 0x0;
	this->lMaximumThumbPosition = 0x0;
	this->lThumbLimitIndentation = 0x8;
	__asm        jmp    _T78;
_T78:
	__asm        jmp    _T7d;
_T7d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Te0;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _Ted;
_Te0:
	this->sBackgroundFile.reference = 0x0;
_Ted:
	this->sBackgroundFile.c_str_ptr = 0x0;
	__asm        jmp    _Tff;
_Tff:
	this->bBusySettingValue = 0x0;
	this-><SliderWindow+0x00> = 0x591ee8;
// LINE 1110:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b1256
void SliderWindow::SliderWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szThumbImageFileName, char * szBackgroundImageFileName, long lNewThumbLimitIndentation) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	this->nSliderWindowDirection = newSliderWindowDirection;
	this->lSliderMinimumValue = 0x0;
	this->lSliderMaximumValue = 0x8;
	this->lSliderCurrentValue = 0x0;
	this->lMinimumThumbPosition = 0x0;
	this->lCurrentThumbPosition = 0x0;
	this->lMaximumThumbPosition = 0x0;
	this->lThumbLimitIndentation = lNewThumbLimitIndentation;
	__asm        jmp    _T8a;
_T8a:
	__asm        jmp    _T8f;
_T8f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _Tf2;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Te1;
_Te1:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _Tff;
_Tf2:
	this->sBackgroundFile.reference = 0x0;
_Tff:
	this->sBackgroundFile.c_str_ptr = 0x0;
	__asm        jmp    _T111;
_T111:
	this->bBusySettingValue = 0x0;
	this-><SliderWindow+0x00> = 0x591ee8;
// LINE 1134:
	__asm        cmp    szThumbImageFileName, 0;
	__asm        je     _T15c;
// LINE 1135:
	__asm        jmp    _T136;
_T136:
	__asm        mov    eax, szThumbImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, szThumbImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T157;
// LINE 1137:
_T157:
	__asm        jmp    _T3ba;
// LINE 1138:
_T15c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T294;
// LINE 1139:
	__asm        mov    eax, SZ_SLIDER_THUMB_IMAGE_H_FILE_NAME;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T176;
_T176:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    _T1c1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1b2;
_T1b2:
	exit(0x1);
	__asm        jmp    _T1c1;
_T1c1:
	__asm        jmp    _T1c6;
_T1c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1f7;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T246;

	__asm        jmp    _T1e5;
_T1e5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T246;
_T1f7:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T226;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T22d;
_T226:
	__asm        mov    dword ptr [ebp-4], 0;
_T22d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T279;
_T246:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T279;

	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T28a;
_T28a:
	__asm        jmp    _T28f;
// LINE 1140:
_T28f:
	__asm        jmp    _T3ba;
// LINE 1141:
_T294:
	__asm        mov    eax, SZ_SLIDER_THUMB_IMAGE_V_FILE_NAME;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T2a1;
_T2a1:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0xFFFFFFFF;
	__asm        jne    _T2ec;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2dd;
_T2dd:
	exit(0x1);
	__asm        jmp    _T2ec;
_T2ec:
	__asm        jmp    _T2f1;
_T2f1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T322;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T371;

	__asm        jmp    _T310;
_T310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T371;
_T322:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T351;

	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T358;
_T351:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T358:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T3a4;
_T371:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T3a4;

	__asm        jmp    _T380;
_T380:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3a4;
_T3a4:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3b5;
_T3b5:
	__asm        jmp    _T3ba;
// LINE 1143:
_T3ba:
	__asm        cmp    szBackgroundImageFileName, 0;
	__asm        je     _T4f9;
// LINE 1144:
	__asm        jmp    _T3c9;
_T3c9:
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0xFFFFFFFF;
	__asm        jne    _T414;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T405;
_T405:
	exit(0x1);
	__asm        jmp    _T414;
_T414:
	__asm        jmp    _T419;
_T419:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T450;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T4a5;

	__asm        jmp    _T43b;
_T43b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4a5;
_T450:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T47f;

	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T486;
_T47f:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T486:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T4db;
_T4a5:
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T4db;

	__asm        jmp    _T4b4;
_T4b4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4db;
_T4db:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4ef;
_T4ef:
	__asm        jmp    _T4f4;
// LINE 1146:
_T4f4:
	__asm        jmp    _T77b;
// LINE 1147:
_T4f9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T643;
// LINE 1148:
	__asm        mov    eax, SZ_SLIDER_BACKGROUND_IMAGE_H_FILE_NAME;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T513;
_T513:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0xFFFFFFFF;
	__asm        jne    _T55e;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T54f;
_T54f:
	exit(0x1);
	__asm        jmp    _T55e;
_T55e:
	__asm        jmp    _T563;
_T563:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T59a;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T5ef;

	__asm        jmp    _T585;
_T585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T5ef;
_T59a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T5c9;

	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T5d0;
_T5c9:
	__asm        mov    dword ptr [ebp-0x48], 0;
_T5d0:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T625;
_T5ef:
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T625;

	__asm        jmp    _T5fe;
_T5fe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T625;
_T625:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T639;
_T639:
	__asm        jmp    _T63e;
// LINE 1149:
_T63e:
	__asm        jmp    _T77b;
// LINE 1150:
_T643:
	__asm        mov    eax, SZ_SLIDER_BACKGROUND_IMAGE_V_FILE_NAME;
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T650;
_T650:
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0xFFFFFFFF;
	__asm        jne    _T69b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T68c;
_T68c:
	exit(0x1);
	__asm        jmp    _T69b;
_T69b:
	__asm        jmp    _T6a0;
_T6a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T6d7;

	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T72c;

	__asm        jmp    _T6c2;
_T6c2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x70];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T72c;
_T6d7:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T706;

	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T70d;
_T706:
	__asm        mov    dword ptr [ebp-0x60], 0;
_T70d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T762;
_T72c:
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T762;

	__asm        jmp    _T73b;
_T73b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T762;
_T762:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T776;
_T776:
	__asm        jmp    _T77b;
// LINE 1152:
_T77b:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b19e0
void SliderWindow::~SliderWindow() {

	this-><SliderWindow+0x00> = 0x591ee8;
// LINE 1159:
	this->SliderWindow::DestroyImage();
// LINE 1160:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x004b1adc
int32_t SliderWindow::Initialize() {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 1169:
	this->GraphicWindow::Initialize();
// LINE 1170:
	this-><SliderWindow+0x58> = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 1171:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nReturnValue, eax;
// LINE 1172:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T6e;
// LINE 1173:
	__asm        jmp    _T44;
_T44:
	__asm        jmp    _T49;
_T49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1174:
_T6e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1175:
	return nReturnValue;
// LINE 1176:
}

// FUNCTION: COPTER_D 0x004b1b65
int32_t SliderWindow::CreateImage(int32_t __formal) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sBackgroundPath; // 0x8 bytes
	/*bp-0xc*/   int32_t nReturnValue;

// LINE 1184:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    sBackgroundPath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sBackgroundPath.reference = 0x0;
_T63:
	sBackgroundPath.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 1188:
_T6f:
	nReturnValue = this->GraphicWindow::CreateImage(0x0);
// LINE 1189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _Ta3;
// LINE 1190:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 1192:
_Ta3:
	__asm        jmp    _Ta8;
_Ta8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T23b;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T23b;
// LINE 1193:
	0x604c00->FileServices::GetPathForFileString(0x6, 0x0, (this + 0xa8), sBackgroundPath.c_str_ptr);
	__asm        jmp    _Teb;
// LINE 1194:
_Teb:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T201;

	__asm        cmp    sBackgroundPath.c_str_ptr, 0;
	__asm        je     _T127;

	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T127:
	__asm        jmp    _T12c;
_T12c:
	sBackgroundPath.c_str_ptr = operator new((sBackgroundPath.reference-><basic_string_ref<char>+0x04:4> + 1));
	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ae;

	__asm        jmp    _T156;
_T156:
	__asm        jmp    _T15b;
_T15b:
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17a;

	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T186;

	__asm        jmp    _T186;
_T17a:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    _T186;
_T186:
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ae;
_T1ae:
	__asm        jmp    _T1b3;
_T1b3:
	__asm        mov    byte ptr [ebp-0x38], 0;
	__asm        jmp    _T1bc;
_T1bc:
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T1c7;
_T1c7:
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], al;
	__asm        jmp    _T1e2;
_T1e2:
	__asm        jmp    _T1e7;
_T1e7:
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    _T20e;
_T201:
	this->myBackgroundImage = 0x0;
// LINE 1195:
_T20e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T23b;
// LINE 1196:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+8];
// LINE 1198:
_T23b:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2c4;

	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T2c4;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2a4;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T2a4:
	__asm        jmp    _T2a9;
_T2a9:
	__asm        jmp    _T2ae;
_T2ae:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2bf;
_T2bf:
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2c9;
_T2c9:
	__asm        cmp    sBackgroundPath.c_str_ptr, 0;
	__asm        je     _T2eb;

	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2eb:
	__asm        jmp    _T2f0;
_T2f0:
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    __RETURN;
// LINE 1199:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b1e64
void SliderWindow::DestroyImage() {
// LINE 1208:
	this->GraphicWindow::DestroyImage();
// LINE 1209:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T6b;
// LINE 1210:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
// LINE 1211:
_T5e:
	this->myBackgroundImage = 0x0;
// LINE 1213:
_T6b:
	return;
}

// FUNCTION: COPTER_D 0x004b1ed9
void SliderWindow::MoveWindow(int32_t nXPosition, int32_t nYPosition) {
// LINE 1220:
	this->GraphicWindow::MoveWindow(nXPosition, nYPosition);
// LINE 1221:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1222:
	return;
}

// FUNCTION: COPTER_D 0x004b1f0f
void SliderWindow::SetWidthAndHeight(int32_t nNewWidth, int32_t nNewHeight) {
// LINE 1229:
	this->GraphicWindow::SetWidthAndHeight(nNewWidth, nNewHeight);
// LINE 1230:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1231:
	return;
}

// FUNCTION: COPTER_D 0x004b1f45
int32_t SliderWindow::ComposeSelf() {
	/*bp-0x4*/   long lThumbWidth;
	/*bp-0x8*/   long lThumbHeight;
	/*bp-0xc*/   long lYPosition;
	/*bp-0x10*/  long lXPosition;

// LINE 1246:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T23;
// LINE 1247:
	return 0x1;
// LINE 1248:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3f;
// LINE 1249:
	return 0x1;
// LINE 1250:
_T3f:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _Tb7;
// LINE 1255:
	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1257:
	__asm        jmp    _T1da;
// LINE 1258:
_Tb7:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexDarkGray;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 1259:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T15a;
// LINE 1263:
	__asm        jmp    _Te7;
_Te7:
	__asm        jmp    _Tec;
_Tec:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1264:
	__asm        jmp    _T1cd;
// LINE 1268:
_T15a:
	__asm        jmp    _T15f;
_T15f:
	__asm        jmp    _T164;
_T164:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x28];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1269:
_T1cd:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 1272:
_T1da:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    lThumbWidth, eax;
// LINE 1273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    lThumbHeight, eax;
// LINE 1274:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T25e;
// LINE 1275:
	lXPosition = (this->rectThumbImage.left + this-><SliderWindow+0x20>);
// LINE 1276:
	lYPosition = (this->rectThumbImage.top + this-><SliderWindow+0x24>);
// LINE 1277:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1279:
	__asm        jmp    _T2ae;
// LINE 1280:
_T25e:
	lXPosition = (this->rectThumbImage.left + this-><SliderWindow+0x20>);
// LINE 1281:
	lYPosition = (this->rectThumbImage.top + this-><SliderWindow+0x24>);
// LINE 1282:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1284:
_T2ae:
	return 0x1;
// LINE 1285:
}

// FUNCTION: COPTER_D 0x004b2202
long SliderWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lNewValue;

// LINE 1295:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1296:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     _T4c;
// LINE 1297:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1299:
_T4c:
	GraphicWindow::MakeFocus(this);
// LINE 1300:
	return 0x1;
// LINE 1301:
}

// FUNCTION: COPTER_D 0x004b226b
long SliderWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lNewValue;

// LINE 1310:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T73;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T73;
// LINE 1311:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1312:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     _T73;
// LINE 1313:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1315:
_T73:
	return 0x1;
// LINE 1316:
}

// FUNCTION: COPTER_D 0x004b22ef
long SliderWindow::DoCursorMove(long nCursorX, long nCursorY) {
	/*bp-0x4*/   long lNewValue;

// LINE 1326:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T61;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T61;
// LINE 1327:
_T33:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     _T61;
// LINE 1328:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1330:
_T61:
	return 0x1;
// LINE 1331:
}

// FUNCTION: COPTER_D 0x004b2361
int32_t SliderWindow::ConvertCursorPositionToValue(long& lNewValue, long nCursorX, long nCursorY) {
	/*bp-0x4*/   long lValueScale;
	/*bp-0x8*/   long lPositionScale;
	/*bp-0xc*/   long lPosition;

// LINE 1351:
	lPositionScale = (this->lMaximumThumbPosition - this->lMinimumThumbPosition);
// LINE 1352:
	lValueScale = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1354:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _Ta6;
// LINE 1355:
	lPosition = nCursorX;
// LINE 1356:
	__asm        mov    eax, this;
	__asm        mov    ecx, lPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _T61;
// LINE 1357:
	lPosition = this->lThumbLimitIndentation;
// LINE 1358:
_T61:
	__asm        jmp    _T66;
_T66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        cmp    eax, lPosition;
	__asm        jge    _Ta1;
// LINE 1359:
	__asm        jmp    _T89;
_T89:
	lPosition = ((this-><SliderWindow+0x18> - this-><SliderWindow+0x10>) - this->lThumbLimitIndentation);
// LINE 1361:
_Ta1:
	__asm        jmp    _T10a;
// LINE 1362:
_Ta6:
	lPosition = nCursorY;
// LINE 1363:
	__asm        mov    eax, this;
	__asm        mov    ecx, lPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _Tca;
// LINE 1364:
	lPosition = this->lThumbLimitIndentation;
// LINE 1365:
_Tca:
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        cmp    eax, lPosition;
	__asm        jge    _T10a;
// LINE 1366:
	__asm        jmp    _Tf2;
_Tf2:
	lPosition = ((this-><SliderWindow+0x1c> - this-><SliderWindow+0x14>) - this->lThumbLimitIndentation);
// LINE 1368:
_T10a:
	__asm        mov    eax, lPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        imul   eax, lValueScale;
	__asm        cdq;
	__asm        idiv   lPositionScale;
	__asm        mov    ecx, lNewValue;
	__asm        mov    [ecx], eax;
// LINE 1369:
	lNewValue. += this->lSliderMinimumValue;
// LINE 1370:
	return 0x1;
// LINE 1371:
}

// FUNCTION: COPTER_D 0x004b24a0
void SliderWindow::CalculateAllMetrics() {
// LINE 1382:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T63;
// LINE 1383:
	this->lMinimumThumbPosition = this->lThumbLimitIndentation;
// LINE 1384:
	__asm        jmp    _T30;
_T30:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x90];
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 1386:
	__asm        jmp    _Ta8;
// LINE 1388:
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x14];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x90];
	__asm        mov    eax, this;
	__asm        mov    [eax+0x84], ebx;
// LINE 1389:
	this->lMaximumThumbPosition = this->lThumbLimitIndentation;
// LINE 1391:
_Ta8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1392:
	return;
}

// FUNCTION: COPTER_D 0x004b2560
void SliderWindow::CalculateThumbPosition() {
	/*bp-0x4*/   long lValueScale;
	/*bp-0x8*/   long lPositionScale;

// LINE 1406:
	lValueScale = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1407:
	__asm        cmp    lValueScale, 0;
	__asm        jne    _T3c;
// LINE 1408:
	this->lCurrentThumbPosition = this->lMinimumThumbPosition;
// LINE 1410:
	__asm        jmp    _T83;
// LINE 1411:
_T3c:
	lPositionScale = (this->lMaximumThumbPosition - this->lMinimumThumbPosition);
// LINE 1412:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        imul   eax, lPositionScale;
	__asm        cdq;
	__asm        idiv   lValueScale;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 1413:
	this->lCurrentThumbPosition += this->lMinimumThumbPosition;
// LINE 1419:
_T83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T123;
// LINE 1420:
	this->rectThumbImage.left = this->lCurrentThumbPosition;
// LINE 1421:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x9C], ecx;
// LINE 1422:
	__asm        jmp    _Tc9;
_Tc9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x98], ebx;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xA0], ecx;
// LINE 1425:
	__asm        jmp    _T1b1;
// LINE 1426:
_T123:
	__asm        jmp    _T128;
_T128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x94], ebx;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x9C], ecx;
// LINE 1428:
	this->rectThumbImage.top = this->lCurrentThumbPosition;
// LINE 1429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xA0], ecx;
// LINE 1431:
_T1b1:
	return;
}

// FUNCTION: COPTER_D 0x004b271b
long SliderWindow::GetValue() {
// LINE 1439:
	return this->lSliderCurrentValue;
// LINE 1440:
}

// FUNCTION: COPTER_D 0x004b273a
void SliderWindow::SetValue(long lNewSliderValue) {
// LINE 1448:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        je     _T21;
// LINE 1449:
	return;
// LINE 1450:
_T21:
	this->bBusySettingValue = 0x1;
// LINE 1452:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    _T52;
// LINE 1453:
	this->bBusySettingValue = 0x0;
// LINE 1454:
	return;
// LINE 1456:
_T52:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    _T6a;
// LINE 1457:
	lNewSliderValue = this->lSliderMaximumValue;
// LINE 1458:
_T6a:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    _T82;
// LINE 1459:
	lNewSliderValue = this->lSliderMinimumValue;
// LINE 1460:
_T82:
	this->lSliderCurrentValue = lNewSliderValue;
// LINE 1462:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1463:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1464:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Te1;
// LINE 1465:
	__asm        mov    eax, this;
	__asm        add    eax, 0x80;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1466:
_Te1:
	this->bBusySettingValue = 0x0;
// LINE 1467:
	return;
}

// FUNCTION: COPTER_D 0x004b2834
void SliderWindow::SetMinimumValue(long lNewSliderMinimumValue) {
// LINE 1473:
	this->lSliderMinimumValue = lNewSliderMinimumValue;
// LINE 1474:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1475:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1476:
	return;
}

// FUNCTION: COPTER_D 0x004b2872
void SliderWindow::SetMaximumValue(long lNewSliderMaximumValue) {
// LINE 1482:
	this->lSliderMaximumValue = lNewSliderMaximumValue;
// LINE 1483:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1484:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1485:
	return;
}

// FUNCTION: COPTER_D 0x004b28b0
long SliderWindow::GetThumbWidth() {
// LINE 1496:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        jmp    __RETURN;
// LINE 1497:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b28d4
long SliderWindow::GetThumbHeight() {
// LINE 1507:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    __RETURN;
// LINE 1508:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b28f8
void ScrollBarWindow::ScrollBarWindow() {

	__asm        mov    ecx, this;
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T79;

	__asm        lea    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
	__asm        jmp    _T79;
_T79:
	__asm        jmp    _T7e;
_T7e:
	this->bCursorIsOnInitialHitTestResult = 0x1;
	this-><ScrollBarWindow+0x00> = 0x591fc0;
// LINE 1547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        mov    eax, SZ_DEFAULT_SCROLLBAR_SLIDER_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x34], eax;
// LINE 1548:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T113;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T104;
_T104:
	exit(0x1);
	__asm        jmp    _T113;
_T113:
	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T149;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ca;

	__asm        jmp    _T137;
_T137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2ca;
_T149:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T224;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T19c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T18d;
_T18d:
	exit(0x1);
	__asm        jmp    _T19c;
_T19c:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T201;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1fc;
_T1fc:
	__asm        jmp    _T20a;
_T201:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T20a:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T219;
_T219:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T22b;
_T224:
	__asm        mov    dword ptr [ebp-4], 0;
_T22b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2b7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T2b7;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T297;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        jmp    _T2a1;
_T2a1:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2b2;
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        jmp    _T2bc;
_T2bc:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T2fd;
_T2ca:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2fd;

	__asm        jmp    _T2d9;
_T2d9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2fd;
_T2fd:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T30e;
_T30e:
	__asm        jmp    _T313;
// LINE 1549:
_T313:
	this->lThumbLimitIndentation = 0x0;
// LINE 1550:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b2c25
void ScrollBarWindow::ScrollBarWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szImageFileName) {

	__asm        push   8;
	__asm        push   0;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T99;

	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
	__asm        jmp    _T99;
_T99:
	__asm        jmp    _T9e;
_T9e:
	this->bCursorIsOnInitialHitTestResult = 0x1;
	this-><ScrollBarWindow+0x00> = 0x591fc0;
// LINE 1566:
	this->lPageCount = (this->lSliderMaximumValue - this->lSliderMinimumValue);
	this->lLineCount = this->lPageCount;
// LINE 1567:
	this->lThumbLimitIndentation = 0x0;
// LINE 1569:
	__asm        cmp    szImageFileName, 0;
	__asm        je     _T264;
// LINE 1570:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T142;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T133;
_T133:
	exit(0x1);
	__asm        jmp    _T142;
_T142:
	__asm        jmp    _T147;
_T147:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T178;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T216;

	__asm        jmp    _T166;
_T166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T216;
_T178:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1a7;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1ae;
_T1a7:
	__asm        mov    dword ptr [ebp-4], 0;
_T1ae:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T203;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T203;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1ed;
_T1ed:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1fe;
_T1fe:
	__asm        jmp    _T203;
_T203:
	__asm        jmp    _T208;
_T208:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T249;
_T216:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T249;

	__asm        jmp    _T225;
_T225:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T249;
_T249:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T25a;
_T25a:
	__asm        jmp    _T25f;
// LINE 1571:
_T25f:
	__asm        jmp    _T3d9;
// LINE 1572:
_T264:
	__asm        mov    eax, SZ_DEFAULT_SCROLLBAR_SLIDER_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T271;
_T271:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    _T2bc;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2ad;
_T2ad:
	exit(0x1);
	__asm        jmp    _T2bc;
_T2bc:
	__asm        jmp    _T2c1;
_T2c1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2f2;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T390;

	__asm        jmp    _T2e0;
_T2e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T390;
_T2f2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T321;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T328;
_T321:
	__asm        mov    dword ptr [ebp-0x20], 0;
_T328:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T37d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T37d;

	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T367;
_T367:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T378;
_T378:
	__asm        jmp    _T37d;
_T37d:
	__asm        jmp    _T382;
_T382:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T3c3;
_T390:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3c3;

	__asm        jmp    _T39f;
_T39f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3c3;
_T3c3:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3d4;
_T3d4:
	__asm        jmp    _T3d9;
// LINE 1573:
_T3d9:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b300d
int32_t ScrollBarWindow::Initialize() {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 1584:
	this->GraphicWindow::Initialize();
// LINE 1585:
	this-><ScrollBarWindow+0x58> = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 1586:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nReturnValue, eax;
// LINE 1587:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T86;
// LINE 1588:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T6a;
// LINE 1589:
	__asm        jmp    _T4e;
_T4e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1590:
	__asm        jmp    _T86;
// LINE 1591:
_T6a:
	__asm        jmp    _T6f;
_T6f:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1593:
_T86:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1594:
	return nReturnValue;
// LINE 1595:
}

// FUNCTION: COPTER_D 0x004b30ae
int32_t ScrollBarWindow::ComposeSelf() {
	/*bp-0x4*/   long lPageDownButtonStartPosition;
	/*bp-0x8*/   long lThumbWidth;
	/*bp-0xc*/   int32_t nLineDownImageIndexToUse;
	/*bp-0x10*/  int32_t nLineUpImageIndexToUse;
	/*bp-0x14*/  long lThumbHeight;
	/*bp-0x18*/  int32_t i;

// LINE 1612:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T23;
// LINE 1613:
	return 0x1;
// LINE 1614:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3f;
// LINE 1615:
	return 0x1;
// LINE 1616:
_T3f:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1619:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T6e;
// LINE 1620:
	nLineUpImageIndexToUse = 0x0;
// LINE 1621:
	nLineDownImageIndexToUse = 0x4;
// LINE 1623:
	__asm        jmp    _T7c;
// LINE 1624:
_T6e:
	nLineUpImageIndexToUse = 0x6;
// LINE 1625:
	nLineDownImageIndexToUse = 0xa;
// LINE 1629:
_T7c:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T8f;

	__asm        jmp    _T94;
_T8f:
	__asm        jmp    _T2a1;
_T94:
	__asm        jmp    _Ta3;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T2a1;
_Ta3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD0], 0;
	__asm        je     _T2a1;
// LINE 1633:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jl     _T2a1;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jg     _T2a1;
// LINE 1639:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    _Teb;
// LINE 1640:
	nLineUpImageIndexToUse++;
// LINE 1641:
	__asm        jmp    _Tfe;
_Teb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    _Tfe;
// LINE 1642:
	nLineDownImageIndexToUse++;
// LINE 1644:
_Tfe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T10f;
_T10f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _T19e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    _T142;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T189;

	__asm        jmp    _T189;
_T142:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T172;

	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T189;

	__asm        jmp    _T189;
_T172:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC0];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    [ebp-0x24], eax;
_T19e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T1ec;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC8], 0;
	__asm        je     _T1ec;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0xC8;
	__asm        jbe    _T292;

	__asm        jmp    _T20b;
_T1ec:
	__asm        cmp    dword ptr [ebp-0x24], 0xC8;
	__asm        jbe    _T292;

	__asm        jmp    _T20b;

	__asm        cmp    dword ptr [ebp-0x38], 0xC8;
	__asm        jbe    _T292;
// LINE 1645:
_T20b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    _T22e;
// LINE 1646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 1647:
	__asm        jmp    _T292;
_T22e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    _T251;
// LINE 1648:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1649:
	__asm        jmp    _T292;
_T251:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 3;
	__asm        jne    _T274;
// LINE 1650:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE4];
// LINE 1651:
	__asm        jmp    _T292;
_T274:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jne    _T292;
// LINE 1652:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1654:
_T292:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1659:
_T2a1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    lThumbWidth, eax;
// LINE 1660:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    lThumbHeight, eax;
// LINE 1661:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T3f9;
// LINE 1665:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1668:
	lPageDownButtonStartPosition = (this-><ScrollBarWindow+0x28> - lThumbWidth);
// LINE 1670:
_FOR_32a:
	for (i = (this-><ScrollBarWindow+0x20> + lThumbWidth); (i < lPageDownButtonStartPosition); i += lThumbWidth) {
		// LINE 1673:
			__asm        mov    eax, lThumbHeight;
			__asm        push   eax;
			__asm        mov    eax, lThumbWidth;
			__asm        shl    eax, 2;
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, lThumbWidth;
			__asm        lea    eax, [eax+eax*2];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x24];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x40];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x40];
			__asm        call   dword ptr [edx+0xC];
	}
// LINE 1678:
_T378:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1683:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*2];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1685:
	__asm        jmp    _T520;
// LINE 1689:
_T3f9:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1692:
	lPageDownButtonStartPosition = (this-><ScrollBarWindow+0x2c> - lThumbHeight);
// LINE 1694:
_FOR_453:
	for (i = (this-><ScrollBarWindow+0x24> + lThumbHeight); (i < lPageDownButtonStartPosition); i += lThumbHeight) {
		// LINE 1697:
			__asm        mov    eax, lThumbHeight;
			__asm        push   eax;
			__asm        mov    eax, lThumbWidth;
			__asm        lea    eax, [eax+eax*4];
			__asm        add    eax, eax;
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, lThumbWidth;
			__asm        lea    eax, [eax+eax*8];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x20];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x40];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x40];
			__asm        call   dword ptr [edx+0xC];
	}
// LINE 1702:
_T4a3:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1707:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1709:
_T520:
	return 0x1;
// LINE 1710:
}

// FUNCTION: COPTER_D 0x004b35dd
long ScrollBarWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1717:
	GraphicWindow::MakeFocus(this);
// LINE 1719:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xCC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        je     _T262;
// LINE 1720:
	this->bCursorIsOnInitialHitTestResult = 0x1;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1722:
	__asm        jmp    _T63;
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        jne    _T78;

	__asm        jmp    _T109;
_T78:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    _T9b;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te2;

	__asm        jmp    _Te2;
_T9b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _Tcb;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te2;

	__asm        jmp    _Te2;
_Tcb:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te2;
_Te2:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC0];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0xC4], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        jmp    _T109;
// LINE 1723:
_T109:
	__asm        jmp    _T10e;
_T10e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _T123;

	__asm        jmp    _T1a4;
_T123:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    _T14c;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T19f;

	__asm        jmp    _T19f;
_T14c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T182;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T19f;

	__asm        jmp    _T19f;
_T182:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T19f;
_T19f:
	__asm        jmp    _T1a4;
// LINE 1724:
_T1a4:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1726:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    _T1e0;
// LINE 1727:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 1728:
	return 0x1;
// LINE 1730:
	__asm        jmp    _T262;
_T1e0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    _T20d;
// LINE 1731:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1732:
	return 0x1;
// LINE 1734:
	__asm        jmp    _T262;
_T20d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 3;
	__asm        jne    _T23a;
// LINE 1735:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE4];
// LINE 1736:
	return 0x1;
// LINE 1738:
	__asm        jmp    _T262;
_T23a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jne    _T262;
// LINE 1739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1740:
	return 0x1;
// LINE 1749:
_T262:
	return 0x1;
// LINE 1750:
}

// FUNCTION: COPTER_D 0x004b3850
long ScrollBarWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lNewValue;

// LINE 1760:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T83;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T83;
// LINE 1761:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1762:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 5;
	__asm        jne    _T83;
// LINE 1763:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     _T83;
// LINE 1764:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1767:
_T83:
	return 0x1;
// LINE 1768:
}

// FUNCTION: COPTER_D 0x004b38e4
long ScrollBarWindow::DoCursorMove(long nCursorX, long nCursorY) {
	/*bp-0x4*/   long lNewValue;
	/*bp-0x8*/   enum ScrollBarWindow::ScrollHitTestResult currentScrollHitTestResult;

// LINE 1779:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _Tdb;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tdb;
// LINE 1780:
_T33:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 5;
	__asm        jne    _T76;
// LINE 1781:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     _T71;
// LINE 1782:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1784:
_T71:
	__asm        jmp    _Tdb;
// LINE 1785:
_T76:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, currentScrollHitTestResult;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        jne    _Taa;
// LINE 1786:
	this->bCursorIsOnInitialHitTestResult = 0x0;
// LINE 1787:
	__asm        jmp    _Tdb;
// LINE 1788:
_Taa:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentScrollHitTestResult;
	__asm        cmp    [eax+0xCC], ecx;
	__asm        jne    _Tce;

	this->bCursorIsOnInitialHitTestResult = 0x1;
	__asm        jmp    _Tdb;
_Tce:
	this->bCursorIsOnInitialHitTestResult = 0x0;
// LINE 1791:
_Tdb:
	return 0x1;
// LINE 1792:
}

// FUNCTION: COPTER_D 0x004b39d0
void ScrollBarWindow::MoveLinePrevious() {
	/*bp-0x4*/   long lNewValue;
	/*bp-0x8*/   long lValueDelta;

// LINE 1801:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB4];
	__asm        mov    lValueDelta, eax;
// LINE 1804:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x78], ecx;
	__asm        jge    _T6c;
// LINE 1805:
	lNewValue = (this->SliderWindow::GetValue() - lValueDelta);
// LINE 1806:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    _T60;
// LINE 1807:
	lNewValue = this->lSliderMinimumValue;
// LINE 1808:
_T60:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1810:
_T6c:
	return;
}

// FUNCTION: COPTER_D 0x004b3a46
void ScrollBarWindow::MoveLineNext() {
	/*bp-0x4*/   long lNewValue;
	/*bp-0x8*/   long lValueDelta;

// LINE 1819:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB4];
	__asm        mov    lValueDelta, eax;
// LINE 1822:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T6e;
// LINE 1823:
	lNewValue = (lValueDelta + this->SliderWindow::GetValue());
// LINE 1824:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    _T62;
// LINE 1825:
	lNewValue = this->lSliderMaximumValue;
// LINE 1826:
_T62:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1828:
_T6e:
	return;
}

// FUNCTION: COPTER_D 0x004b3abe
void ScrollBarWindow::MovePagePrevious() {
	/*bp-0x4*/   long lNewValue;
	/*bp-0x8*/   long lValueDelta;

// LINE 1836:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lValueDelta, eax;
// LINE 1839:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T6c;
// LINE 1840:
	lNewValue = (this->SliderWindow::GetValue() - lValueDelta);
// LINE 1841:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    _T60;
// LINE 1842:
	lNewValue = this->lSliderMinimumValue;
// LINE 1843:
_T60:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1845:
_T6c:
	return;
}

// FUNCTION: COPTER_D 0x004b3b34
void ScrollBarWindow::MovePageNext() {
	/*bp-0x4*/   long lNewValue;
	/*bp-0x8*/   long lValueDelta;

// LINE 1853:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lValueDelta, eax;
// LINE 1856:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T6e;
// LINE 1857:
	lNewValue = (lValueDelta + this->SliderWindow::GetValue());
// LINE 1858:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    _T62;
// LINE 1859:
	lNewValue = this->lSliderMaximumValue;
// LINE 1860:
_T62:
	this->SliderWindow::SetValue(lNewValue);
// LINE 1862:
_T6e:
	return;
}

// FUNCTION: COPTER_D 0x004b3bac
void ScrollBarWindow::SetLineAndPageCount(long lNewLineCount, long lNewPageCount) {
// LINE 1873:
	__asm        cmp    lNewLineCount, 0;
	__asm        jle    _T20;

	__asm        cmp    lNewPageCount, 0;
	__asm        jg     _T25;
// LINE 1874:
_T20:
	return;
// LINE 1876:
_T25:
	__asm        cmp    lNewLineCount, 0;
	__asm        jne    _T49;
// LINE 1877:
	this->lLineCount = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1878:
	__asm        jmp    _T55;
// LINE 1879:
_T49:
	this->lLineCount = lNewLineCount;
// LINE 1880:
_T55:
	__asm        cmp    lNewPageCount, 0;
	__asm        jne    _T76;
// LINE 1881:
	this->lPageCount = this->lLineCount;
// LINE 1882:
	__asm        jmp    _T82;
// LINE 1883:
_T76:
	this->lPageCount = lNewPageCount;
// LINE 1884:
_T82:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1885:
	return;
}

// FUNCTION: COPTER_D 0x004b3c48
long ScrollBarWindow::GetCurrentLine() {
	/*bp-0x4*/   long lValueRange;

// LINE 1893:
	lValueRange = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1895:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T32;
// LINE 1896:
	return 0x0;
// LINE 1897:
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        dec    ecx;
	__asm        imul   eax, ecx;
	__asm        cdq;
	__asm        idiv   lValueRange;
	__asm        jmp    __RETURN;
// LINE 1898:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b3ca4
long ScrollBarWindow::GetValueOfGivenLine(long lLine) {
	/*bp-0x4*/   long lValueRange;

// LINE 1906:
	lValueRange = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1908:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T36;
// LINE 1909:
	return this->lSliderMinimumValue;
// LINE 1910:
_T36:
	__asm        mov    eax, lValueRange;
	__asm        imul   eax, lLine;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        jmp    __RETURN;
// LINE 1911:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b3d00
long ScrollBarWindow::GetCurrentPage() {
	/*bp-0x4*/   long lValueRange;

// LINE 1920:
	lValueRange = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1922:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 1;
	__asm        jne    _T32;
// LINE 1923:
	return 0x0;
// LINE 1924:
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB8];
	__asm        dec    ecx;
	__asm        imul   eax, ecx;
	__asm        cdq;
	__asm        idiv   lValueRange;
	__asm        jmp    __RETURN;
// LINE 1925:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b3d5c
long ScrollBarWindow::GetValueOfGivenPage(long lPage) {
	/*bp-0x4*/   long lValueRange;

// LINE 1933:
	lValueRange = (this->lSliderMaximumValue - this->lSliderMinimumValue);
// LINE 1935:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 1;
	__asm        jne    _T36;
// LINE 1936:
	return this->lSliderMinimumValue;
// LINE 1937:
_T36:
	__asm        mov    eax, lValueRange;
	__asm        imul   eax, lPage;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB8];
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        jmp    __RETURN;
// LINE 1938:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b3db8
int32_t ScrollBarWindow::DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult& nNewScrollHitTestResult, long nCursorX, long nCursorY) {
	/*bp-0x4*/   int32_t nPrevNextButtonHeight;
	/*bp-0x8*/   int32_t nPrevNextButtonWidth;

// LINE 1968:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        jne    _T3a;
// LINE 1969:
	nNewScrollHitTestResult. = 0x0;
// LINE 1970:
	return 0x0;
// LINE 1973:
_T3a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _Tfb;
// LINE 1974:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        mov    nPrevNextButtonWidth, eax;
// LINE 1975:
	__asm        mov    eax, nCursorX;
	__asm        cmp    nPrevNextButtonWidth, eax;
	__asm        jle    _T72;
// LINE 1976:
	nNewScrollHitTestResult. = 0x1;
// LINE 1977:
	__asm        jmp    _Tf6;
_T72:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jle    _T92;
// LINE 1978:
	nNewScrollHitTestResult. = 0x3;
// LINE 1979:
	__asm        jmp    _Tf6;
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, nCursorX;
	__asm        jle    _Tc2;
// LINE 1980:
	nNewScrollHitTestResult. = 0x5;
// LINE 1981:
	__asm        jmp    _Tf6;
_Tc2:
	__asm        jmp    _Tc7;
_Tc7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, nPrevNextButtonWidth;
	__asm        cmp    eax, nCursorX;
	__asm        jle    _Ted;
// LINE 1982:
	nNewScrollHitTestResult. = 0x4;
// LINE 1983:
	__asm        jmp    _Tf6;
// LINE 1984:
_Ted:
	nNewScrollHitTestResult. = 0x2;
// LINE 1986:
_Tf6:
	__asm        jmp    _T1aa;
// LINE 1987:
_Tfb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        mov    nPrevNextButtonHeight, eax;
// LINE 1988:
	__asm        mov    eax, nCursorY;
	__asm        cmp    nPrevNextButtonHeight, eax;
	__asm        jle    _T126;
// LINE 1989:
	nNewScrollHitTestResult. = 0x1;
// LINE 1990:
	__asm        jmp    _T1aa;
_T126:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jle    _T146;
// LINE 1991:
	nNewScrollHitTestResult. = 0x3;
// LINE 1992:
	__asm        jmp    _T1aa;
_T146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, nCursorY;
	__asm        jle    _T176;
// LINE 1993:
	nNewScrollHitTestResult. = 0x5;
// LINE 1994:
	__asm        jmp    _T1aa;
_T176:
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        sub    eax, nPrevNextButtonHeight;
	__asm        cmp    eax, nCursorY;
	__asm        jle    _T1a1;
// LINE 1995:
	nNewScrollHitTestResult. = 0x4;
// LINE 1996:
	__asm        jmp    _T1aa;
// LINE 1997:
_T1a1:
	nNewScrollHitTestResult. = 0x2;
// LINE 1999:
_T1aa:
	return 0x1;
// LINE 2000:
}

// FUNCTION: COPTER_D 0x004b3f73
void ScrollBarWindow::CalculateAllMetrics() {
// LINE 2008:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T6f;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2010:
	__asm        jmp    _T35;
_T35:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 2012:
	__asm        jmp    _Tc0;
// LINE 2013:
_T6f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2014:
	__asm        jmp    _T8b;
_T8b:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x14];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 2016:
_Tc0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 2017:
	return;
}

// FUNCTION: COPTER_D 0x004b404b
long ScrollBarWindow::GetThumbWidth() {
// LINE 2028:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, 0xC;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        jmp    __RETURN;
// LINE 2029:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b4077
long ScrollBarWindow::GetThumbHeight() {
// LINE 2036:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    __RETURN;
// LINE 2037:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b409b
long ScrollBarWindow::GetPrevNextButtonWidth() {
// LINE 2045:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    __RETURN;
// LINE 2046:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b40bf
long ScrollBarWindow::GetPrevNextButtonHeight() {
// LINE 2054:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    __RETURN;
// LINE 2055:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b40e3
void ListBoxWindow::ListBoxWindow() {

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<basic_string<char>>::free_list, 0;
	__asm        je     _T50;

	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T227;
_T50:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        cmp    list<basic_string<char>>::last, eax;
	__asm        jne    _T212;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Taf;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Ta5;
_Ta5:
	exit(0x1);
_Taf:
	__asm        jmp    _Tb4;
_Tb4:
	__asm        jmp    _Tb9;
_Tb9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tf4;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tfa;
_Tf4:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tfa:
	__asm        jmp    _Tff;
_Tff:
	__asm        jmp    _T104;
_T104:
	__asm        jmp    _T109;
_T109:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T164;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T15a;
_T15a:
	exit(0x1);
_T164:
	__asm        jmp    _T169;
_T169:
	__asm        jmp    _T16e;
_T16e:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<basic_string<char>>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<basic_string<char>>::buffer_list, eax;
	__asm        mov    eax, list<basic_string<char>>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<basic_string<char>>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1cb;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1d1;
_T1cb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        jmp    _T1db;
_T1db:
	__asm        jmp    _T1e0;
_T1e0:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<basic_string<char>>::next_avail;
	__asm        mov    list<basic_string<char>>::last, eax;
	__asm        jmp    _T1f8;
_T1f8:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<basic_string<char>>::next_avail, 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T227;
_T212:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<basic_string<char>>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T227:
	__asm        jmp    _T22c;
_T22c:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T257;
_T257:
	__asm        jmp    _T25c;
_T25c:
	__asm        jmp    _T261;
_T261:
	(this + 0x8c)->MFont::MFont();
	this-><ListBoxWindow+0x00> = 0x5920c8;
// LINE 2079:
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = this->colorFont.Blue;
	this->colorFont.Red = this->colorFont.Green;
// LINE 2082:
	this->colorFontHighlighted.Blue = 0xff;
	this->colorFontHighlighted.Green = this->colorFontHighlighted.Blue;
	this->colorFontHighlighted.Red = this->colorFontHighlighted.Green;
// LINE 2083:
	this->nBackgroundIndex = GraphicWindow::colorConstants.nPaletteIndexWhite;
// LINE 2084:
	this->nBackgroundIndexHighlighted = GraphicWindow::colorConstants.nPaletteIndexBlack;
// LINE 2085:
	this->nTextDrawStyle = 0x0;
// LINE 2086:
	this->lCurrentSelection = 0xffffffff;
// LINE 2087:
	this->lVisibleLines = 0x0;
// LINE 2088:
	this->lFirstVisibleLine = 0x0;
// LINE 2089:
	this->lLineHeight = 0xa;
// LINE 2090:
	this->bAlwaysSort = 0x0;
// LINE 2091:
	this->myVerticalScrollBarWindow = 0x0;
// LINE 2092:
	this->myHorizontalScrollBarWindow = 0x0;
// LINE 2093:
	this->bBusySettingSelection = 0x0;
// LINE 2094:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 2095:
	this->ListBoxWindow::CalculateAllMetrics();
// LINE 2096:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b4462
void ListBoxWindow::ListBoxWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<basic_string<char>>::free_list, 0;
	__asm        je     _T64;

	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T23b;
_T64:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        cmp    list<basic_string<char>>::last, eax;
	__asm        jne    _T226;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tc3;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb9;
_Tb9:
	exit(0x1);
_Tc3:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        jmp    _Tcd;
_Tcd:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T108;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T10e;
_T108:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T10e:
	__asm        jmp    _T113;
_T113:
	__asm        jmp    _T118;
_T118:
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T178;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16e;
_T16e:
	exit(0x1);
_T178:
	__asm        jmp    _T17d;
_T17d:
	__asm        jmp    _T182;
_T182:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<basic_string<char>>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<basic_string<char>>::buffer_list, eax;
	__asm        mov    eax, list<basic_string<char>>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<basic_string<char>>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1df;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1e5;
_T1df:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        jmp    _T1ef;
_T1ef:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<basic_string<char>>::next_avail;
	__asm        mov    list<basic_string<char>>::last, eax;
	__asm        jmp    _T20c;
_T20c:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<basic_string<char>>::next_avail, 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T23b;
_T226:
	__asm        mov    eax, list<basic_string<char>>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<basic_string<char>>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T23b:
	__asm        jmp    _T240;
_T240:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T26b;
_T26b:
	__asm        jmp    _T270;
_T270:
	__asm        jmp    _T275;
_T275:
	(this + 0x8c)->MFont::MFont();
	this-><ListBoxWindow+0x00> = 0x5920c8;
// LINE 2108:
	this->colorFont.Blue = 0x0;
	this->colorFont.Green = this->colorFont.Blue;
	this->colorFont.Red = this->colorFont.Green;
// LINE 2111:
	this->colorFontHighlighted.Blue = 0xff;
	this->colorFontHighlighted.Green = this->colorFontHighlighted.Blue;
	this->colorFontHighlighted.Red = this->colorFontHighlighted.Green;
// LINE 2112:
	this->nBackgroundIndex = GraphicWindow::colorConstants.nPaletteIndexWhite;
// LINE 2113:
	this->nBackgroundIndexHighlighted = GraphicWindow::colorConstants.nPaletteIndexBlack;
// LINE 2114:
	this->nTextDrawStyle = 0x0;
// LINE 2115:
	this->lCurrentSelection = 0xffffffff;
// LINE 2116:
	this->lVisibleLines = 0x0;
// LINE 2117:
	this->lFirstVisibleLine = 0x0;
// LINE 2118:
	this->lLineHeight = 0xa;
// LINE 2119:
	this->bAlwaysSort = 0x0;
// LINE 2120:
	this->myVerticalScrollBarWindow = 0x0;
// LINE 2121:
	this->myHorizontalScrollBarWindow = 0x0;
// LINE 2122:
	this->bBusySettingSelection = 0x0;
// LINE 2123:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 2124:
	this->ListBoxWindow::CalculateAllMetrics();
// LINE 2125:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b47f7
int32_t ListBoxWindow::Initialize() {
// LINE 2133:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 2134:
	return this->GraphicWindow::Initialize();
// LINE 2135:
}

// FUNCTION: COPTER_D 0x004b4822
int32_t ListBoxWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2142:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T37;
// LINE 2144:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _T37;
// LINE 2146:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2149:
_T37:
	return 0x0;
// LINE 2150:
}

// FUNCTION: COPTER_D 0x004b4867
void ListBoxWindow::CalculateAllMetrics() {
	/*bp-0x4*/   long lWidth;
	/*bp-0x8*/   long lHeight;
	/*bp-0xc*/   int32_t nReturnValue;

// LINE 2161:
	nReturnValue = (this + 0x8c)->MFont::GetTextDimensions(0x0, lWidth, lHeight);
// LINE 2162:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T61;
// LINE 2163:
	this->lLineHeight = lHeight;
// LINE 2164:
	__asm        jmp    _T42;
_T42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 2166:
_T61:
	return;
}

// FUNCTION: COPTER_D 0x004b48d2
void ListBoxWindow::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
// LINE 2173:
	(this + 0x8c)->MFont::SetFontCharacteristics(lNewHeight, lNewWidth, lNewAttributes);
// LINE 2174:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 2175:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2176:
	return;
}

// FUNCTION: COPTER_D 0x004b4921
int32_t ListBoxWindow::ResizeWindowForExactLineHeights() {
	/*bp-0x4*/   long lFixedHeight;
	/*bp-0x8*/   long lOriginalHeight;
	/*bp-0xc*/   long lNewVisibleLines;

// LINE 2193:
	__asm        jmp    _T11;
_T11:
	lOriginalHeight = (this-><ListBoxWindow+0x1c> - this-><ListBoxWindow+0x14>);
// LINE 2194:
	__asm        mov    ecx, this;
	__asm        mov    eax, lOriginalHeight;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lNewVisibleLines, eax;
// LINE 2195:
	lFixedHeight = (this->lLineHeight * lNewVisibleLines);
// LINE 2196:
	__asm        mov    eax, lOriginalHeight;
	__asm        cmp    lFixedHeight, eax;
	__asm        je     _T69;
// LINE 2197:
	__asm        mov    eax, lFixedHeight;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 2198:
	this->lVisibleLines = lNewVisibleLines;
// LINE 2200:
_T69:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2201:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x154];
// LINE 2202:
	return 0x1;
// LINE 2203:
}

// FUNCTION: COPTER_D 0x004b49b6
void ListBoxWindow::SetBackgroundDrawing(int32_t bNewBackgroundDrawing) {
// LINE 2211:
	__asm        cmp    bNewBackgroundDrawing, 0;
	__asm        je     _T35;
// LINE 2212:
	this->nBackgroundIndex = 0xff;
// LINE 2213:
	this->nBackgroundIndexHighlighted = 0x0;
// LINE 2215:
	__asm        jmp    _T4f;
// LINE 2216:
_T35:
	this->nBackgroundIndex = 0xfffffffe;
// LINE 2217:
	this->nBackgroundIndexHighlighted = 0xfffffffe;
// LINE 2219:
_T4f:
	return;
}

// FUNCTION: COPTER_D 0x004b4a11
void ListBoxWindow::SetBackgroundPaletteIndex(int32_t nNewBackgroundIndex, int32_t nNewBackgroundIndexHighlighted) {
// LINE 2228:
	__asm        cmp    nNewBackgroundIndex, 0xFFFFFFFF;
	__asm        je     _T22;
// LINE 2229:
	this->nBackgroundIndex = nNewBackgroundIndex;
// LINE 2230:
_T22:
	__asm        cmp    nNewBackgroundIndexHighlighted, 0xFFFFFFFF;
	__asm        je     _T38;
// LINE 2231:
	this->nBackgroundIndexHighlighted = nNewBackgroundIndexHighlighted;
// LINE 2232:
_T38:
	return;
}

// FUNCTION: COPTER_D 0x004b4a55
void ListBoxWindow::SetTextColor(const /*packed*/ struct SparkalColor *colorNewFont, const /*packed*/ struct SparkalColor *colorNewFontHighlighted) {
// LINE 2242:
	__asm        cmp    colorNewFont, 0;
	__asm        je     _T21;
// LINE 2243:
	reinterpret_cast<uint32_t>(this->colorFont.Blue) = reinterpret_cast<uint32_t>(colorNewFont->Blue);
// LINE 2244:
_T21:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     _T39;
// LINE 2245:
	reinterpret_cast<uint32_t>(this->colorFontHighlighted.Blue) = reinterpret_cast<uint32_t>(colorNewFontHighlighted->Blue);
// LINE 2246:
_T39:
	return;
}

// FUNCTION: COPTER_D 0x004b4a9a
int32_t ListBoxWindow::DrawSelf() {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrentText; // 0x10 bytes
	/*bp-0x14*/  long lRelativeCurrentSelection;
	/*bp-0x24*/  /*packed*/ class MRect rectHighlighted; // 0x10 bytes
	/*bp-0x28*/  /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x2c*/  int32_t i;
	/*bp-0x30*/  int32_t j;

// LINE 2258:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T2b;
_T2b:
	__asm        jmp    _T30;
// LINE 2259:
_T30:
	__asm        jmp    _T35;
_T35:
	__asm        jmp    _T3a;
// LINE 2260:
_T3a:
	__asm        jmp    _T3f;
_T3f:
	__asm        jmp    _T44;
// LINE 2264:
_T44:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T5b;
// LINE 2265:
	return 0x0;
// LINE 2267:
_T5b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0xFFFFFFFE;
	__asm        je     _T9c;
// LINE 2268:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2269:
_T9c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jle    _T192;
// LINE 2270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x104];
	__asm        test   eax, eax;
	__asm        je     _T192;
// LINE 2271:
	lRelativeCurrentSelection = (this->lCurrentSelection - this->lFirstVisibleLine);
// LINE 2272:
	rectHighlighted.left = this-><ListBoxWindow+0x20>;
// LINE 2273:
	rectHighlighted.right = this-><ListBoxWindow+0x28>;
// LINE 2274:
	rectHighlighted.top = ((this->lLineHeight * lRelativeCurrentSelection) + this-><ListBoxWindow+0x24>);
// LINE 2275:
	rectHighlighted.bottom = (this->lLineHeight + rectHighlighted.top);
// LINE 2276:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectHighlighted.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    _T157;
// LINE 2277:
	rectHighlighted.bottom = this-><ListBoxWindow+0x2c>;
// LINE 2278:
_T157:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0xFFFFFFFE;
	__asm        je     _T192;
// LINE 2279:
	__asm        lea    eax, rectHighlighted.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2283:
_T192:
	rectCurrentText.left = (this-><ListBoxWindow+0x20> + 0x5);
// LINE 2284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    rectCurrentText.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x64], eax;
// LINE 2286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T1cd;
// LINE 2289:
_T1cd:
	i = 0x0;
// LINE 2290:
__WHILE_1d4:
	while ((this->lFirstVisibleLine > i)) {

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x58], eax;
			__asm        mov    eax, [ebp-0x58];
			__asm        mov    [ebp-0x34], eax;
			__asm        jmp    _T200;
		_T200:
			__asm        jmp    _T205;
		_T205:
			__asm        mov    eax, [ebp-0x34];
			__asm        cmp    tempStringListIterator.node, eax;
			__asm        jne    _T21b;

			__asm        jmp    _T22f;

			__asm        jmp    _T21b;
		_T21b:
			__asm        jmp    _T22a;

			__asm        cmp    dword ptr [ebp-0x5C], 0;
			__asm        jne    _T22f;
		_T22a:
			__asm        jmp    _T234;
		_T22f:
			__asm        jmp    _T269;
		_T234:
			__asm        jmp    _T243;

			__asm        cmp    dword ptr [ebp-0x60], 0;
			__asm        je     _T269;
		// LINE 2291:
		_T243:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x6C], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T256;
		_T256:
			__asm        mov    eax, [ebp-0x6C];
			__asm        mov    [ebp-0x38], eax;
			__asm        jmp    _T261;
		// LINE 2292:
		_T261:
			i++;
	}
// LINE 2296:
_T269:
	j = 0x0;
// LINE 23:
_FOR_275:
	__asm        jmp    _FOR_COND_275;
// LINE 2296:
_FOR_NEXT_275:
	j++;
_FOR_COND_275:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T28f;
_T28f:
	__asm        jmp    _T294;
_T294:
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    _T2aa;

	__asm        jmp    _T2be;

	__asm        jmp    _T2aa;
_T2aa:
	__asm        jmp    _T2b9;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _T2be;
_T2b9:
	__asm        jmp    _T2c3;
_T2be:
	__asm        jmp    _T742;
_T2c3:
	__asm        jmp    _T2d2;

	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T742;
_T2d2:
	__asm        mov    eax, this;
	__asm        mov    ecx, j;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _T742;
// LINE 2297:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    _T524;
// LINE 2298:
	rectCurrentText.top = ((this->lLineHeight * j) + this-><ListBoxWindow+0x24>);
// LINE 2299:
	rectCurrentText.bottom = (this->lLineHeight + rectCurrentText.top);
// LINE 2300:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    _T348;
// LINE 2301:
	rectCurrentText.bottom = this-><ListBoxWindow+0x2c>;
// LINE 2302:
_T348:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T36b;
// LINE 2305:
_T36b:
	__asm        jmp    _T370;
_T370:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T3a8;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3a8:
	__asm        jmp    _T3ad;
_T3ad:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3d0;
_T3d0:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T46c;

	__asm        jmp    _T3e8;
_T3e8:
	__asm        jmp    _T3ed;
_T3ed:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T41b;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T42a;

	__asm        jmp    _T42a;
_T41b:
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    _T42a;
_T42a:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T46c;
_T46c:
	__asm        jmp    _T471;
_T471:
	__asm        mov    byte ptr [ebp-0x78], 0;
	__asm        jmp    _T47a;
_T47a:
	__asm        lea    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T485;
_T485:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x94];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], al;
	__asm        jmp    _T4b1;
_T4b1:
	__asm        jmp    _T4b6;
_T4b6:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x48], eax;
// LINE 2306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T51f;
// LINE 2308:
_T51f:
	__asm        jmp    _T71c;
// LINE 2309:
_T524:
	rectCurrentText.top = ((this->lLineHeight * j) + this-><ListBoxWindow+0x24>);
// LINE 2310:
	rectCurrentText.bottom = (this->lLineHeight + rectCurrentText.top);
// LINE 2311:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    _T570;
// LINE 2312:
	rectCurrentText.bottom = this-><ListBoxWindow+0x2c>;
// LINE 2315:
_T570:
	__asm        jmp    _T575;
_T575:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T5b9;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5b9:
	__asm        jmp    _T5be;
_T5be:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T5e1;
_T5e1:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T67d;

	__asm        jmp    _T5f9;
_T5f9:
	__asm        jmp    _T5fe;
_T5fe:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T62c;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T63b;

	__asm        jmp    _T63b;
_T62c:
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    _T63b;
_T63b:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T67d;
_T67d:
	__asm        jmp    _T682;
_T682:
	__asm        mov    byte ptr [ebp-0x9C], 0;
	__asm        jmp    _T68e;
_T68e:
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T69f;
_T69f:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T6ce;
_T6ce:
	__asm        jmp    _T6d3;
_T6d3:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 2317:
_T71c:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T72f;
_T72f:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T73a;
// LINE 2318:
_T73a:
	i++;
// LINE 2319:
	__asm        jmp    _FOR_NEXT_275;
// LINE 2321:
_T742:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T765;
// LINE 2322:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 2323:
_T765:
	return 0x1;
// LINE 2324:
}

// FUNCTION: COPTER_D 0x004b520e
int32_t ListBoxWindow::RemoveString(/*packed*/ class basic_string<char>& sToRemove) {
	/*bp-0x4*/   int32_t nReturnValue;
	/*bp-0x8*/   long lIndex;

// LINE 2342:
	__asm        mov    eax, sToRemove;
	__asm        push   eax;
	__asm        lea    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x140];
	__asm        mov    nReturnValue, eax;
// LINE 2343:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T46;
// LINE 2344:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        jmp    __RETURN;
// LINE 2346:
_T46:
	return 0x0;
// LINE 2347:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b5262
int32_t ListBoxWindow::RemoveString(long lIndex) {
	/*bp-0x4*/   long lNewSelection;
	/*bp-0x8*/   long lOriginalLineCount;

// LINE 2355:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2358:
	__asm        mov    eax, lOriginalLineCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jge    _T31;
// LINE 2359:
	return 0x0;
// LINE 2362:
_T31:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x144];
// LINE 2365:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    _T86;
// LINE 2366:
	__asm        mov    eax, lOriginalLineCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jne    _T81;
// LINE 2367:
	lNewSelection = (this->lCurrentSelection - 1);
// LINE 2368:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2371:
_T81:
	__asm        jmp    _Tb7;
_T86:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    _Tb7;
// LINE 2372:
	lNewSelection = (this->lCurrentSelection - 1);
// LINE 2373:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2375:
_Tb7:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2376:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2377:
	return 0x1;
// LINE 2378:
}

// FUNCTION: COPTER_D 0x004b5347
void ListBoxWindow::RemoveAllStrings() {
// LINE 2386:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T3b;
_T3b:
	__asm        jmp    _T40;
_T40:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x3C], eax;
_LOOP_4c:
	for (;;) {
		_LOOP_4c:
			__asm        mov    eax, [ebp-0x38];
			__asm        cmp    [ebp-0x3C], eax;
			__asm        jne    _T62;

			__asm        jmp    _T76;

			__asm        jmp    _T62;
		_T62:
			__asm        jmp    _T71;

			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        jne    _T76;
		_T71:
			__asm        jmp    _T7b;
		_T76:
			__asm        jmp    _T19a;
		_T7b:
			__asm        jmp    _T8a;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        je     _T19a;
		_T8a:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x3C], eax;
			__asm        jmp    _T9d;
		_T9d:
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _Ta8;
		_Ta8:
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x34];
			__asm        mov    ecx, [ecx+4];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x34];
			__asm        mov    ecx, [ecx];
			__asm        mov    [ecx+4], eax;
			__asm        jmp    _Tce;
		_Tce:
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax+0xC];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax+0xC];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T123;

			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0x2C], eax;
			__asm        cmp    dword ptr [ebp-0x2C], 0;
			__asm        je     _T123;

			__asm        mov    ecx, [ebp-0x2C];
			__asm        call   basic_string_ref<char>::delete_ptr;
			__asm        jmp    _T10d;
		_T10d:
			__asm        mov    eax, [ebp-0x2C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T11e;
		_T11e:
			__asm        jmp    _T123;
		_T123:
			__asm        jmp    _T128;
		_T128:
			__asm        mov    eax, [ebp-0x34];
			__asm        cmp    dword ptr [eax+8], 0;
			__asm        je     _T150;

			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, [ebp-0x28];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T150:
			__asm        jmp    _T155;
		_T155:
			__asm        jmp    _T169;

			__asm        mov    eax, [ebp-0x34];
			__asm        add    eax, 8;
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T169:
			__asm        jmp    _T16e;
		_T16e:
			__asm        jmp    _T173;
		_T173:
			__asm        mov    eax, list<basic_string<char>>::free_list;
			__asm        mov    ecx, [ebp-0x34];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    list<basic_string<char>>::free_list, eax;
			__asm        jmp    _T18a;
		_T18a:
			this->myStringList.length--;
			__asm        jmp    _T195;
		_T195:
	}
_T19a:
	__asm        jmp    _T19f;
// LINE 2387:
_T19f:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2388:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 2389:
	return;
}

// FUNCTION: COPTER_D 0x004b550e
int32_t ListBoxWindow::InsertString(/*packed*/ class basic_string<char>& sToAdd, long lIndex) {
	/*bp-0x4*/   long lNewSelection;
	/*bp-0x8*/   long lOriginalLineCount;

// LINE 2397:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2400:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        jne    _T32;
// LINE 2401:
	lIndex = lOriginalLineCount;
// LINE 2402:
	__asm        jmp    _T43;
_T32:
	__asm        cmp    lIndex, 0;
	__asm        jge    _T43;
// LINE 2403:
	lIndex = 0x0;
// LINE 2405:
_T43:
	__asm        mov    eax, sToAdd;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x148];
// LINE 2408:
	__asm        cmp    lOriginalLineCount, 0;
	__asm        jne    _T81;
// LINE 2409:
	lNewSelection = 0x0;
// LINE 2410:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2412:
	__asm        jmp    _Tb2;
_T81:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jl     _Tb2;
// LINE 2413:
	lNewSelection = (this->lCurrentSelection + 1);
// LINE 2414:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2419:
_Tb2:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2421:
	return 0x1;
// LINE 2422:
}

// FUNCTION: COPTER_D 0x004b55ee
int32_t ListBoxWindow::InsertString(long lResourceIndex, long lInsertPosition) {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sNew; // 0x8 bytes

// LINE 2432:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sNew.reference = 0x0;
_T6d:
	sNew.c_str_ptr = 0x0;
	__asm        jmp    _T79;
// LINE 2434:
_T79:
	nFullStringID = LanguageManager::GetFullStringID(lResourceIndex, 0x0);
// LINE 2435:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    _T3a7;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    _Te9;
_Te9:
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    _T143;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T134;
_T134:
	exit(0x1);
	__asm        jmp    _T143;
_T143:
	__asm        jmp    _T148;
_T148:
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T179;

	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T1da;

	__asm        jmp    _T167;
_T167:
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1da;
_T179:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T1ba;

	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    _T1c4;
_T1ba:
	__asm        mov    dword ptr [ebp-0x1034], 0;
_T1c4:
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    _T219;
_T1da:
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T219;

	__asm        jmp    _T1ec;
_T1ec:
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T219;
_T219:
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sNew.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T22a;
_T22a:
	__asm        jmp    _T22f;
_T22f:
	__asm        jmp    _T234;
_T234:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    _T24c;
_T24c:
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T29b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T28c;
_T28c:
	exit(0x1);
	__asm        jmp    _T29b;
_T29b:
	__asm        jmp    _T2a0;
_T2a0:
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2cf;

	__asm        jmp    _T2b2;
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sNew.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    _T344;
_T2cf:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T329;

	__asm        jmp    _T2f1;
_T2f1:
	__asm        jmp    _T2f6;
_T2f6:
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    _T333;
_T329:
	__asm        mov    dword ptr [ebp-0x1048], 0;
_T333:
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sNew.reference, eax;
_T344:
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     _T38c;

	__asm        jmp    _T356;
_T356:
	__asm        jmp    _T35b;
_T35b:
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sNew.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T38c;
_T38c:
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sNew.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T39d;
_T39d:
	__asm        jmp    _T3a2;
_T3a2:
	__asm        jmp    _T53b;
_T3a7:
	__asm        jmp    _T3ac;
_T3ac:
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    _T406;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3f7;
_T3f7:
	exit(0x1);
	__asm        jmp    _T406;
_T406:
	__asm        jmp    _T40b;
_T40b:
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T43c;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T4e1;

	__asm        jmp    _T42a;
_T42a:
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4e1;
_T43c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T47d;

	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    _T487;
_T47d:
	__asm        mov    dword ptr [ebp-0x105C], 0;
_T487:
	__asm        mov    eax, sNew.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T4ce;

	__asm        mov    eax, sNew.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T4ce;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T4ce;
_T4ce:
	__asm        jmp    _T4d3;
_T4d3:
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    _T520;
_T4e1:
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T520;

	__asm        jmp    _T4f3;
_T4f3:
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T520;
_T520:
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sNew.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T531;
_T531:
	__asm        jmp    _T536;
_T536:
	__asm        jmp    _T53b;
// LINE 2436:
_T53b:
	__asm        mov    eax, lInsertPosition;
	__asm        push   eax;
	__asm        lea    eax, sNew.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sNew.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5dd;

	__asm        mov    eax, sNew.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5dd;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T5bd;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T5bd:
	__asm        jmp    _T5c2;
_T5c2:
	__asm        jmp    _T5c7;
_T5c7:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T5d8;
_T5d8:
	__asm        jmp    _T5dd;
_T5dd:
	__asm        jmp    _T5e2;
_T5e2:
	__asm        cmp    sNew.c_str_ptr, 0;
	__asm        je     _T604;

	__asm        mov    eax, sNew.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T604:
	__asm        jmp    _T609;
_T609:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 2437:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b5c06
int32_t ListBoxWindow::ModifyString(long lIndex, /*packed*/ class basic_string<char>& sNew) {
	/*bp-0x4*/   /*packed*/ class basic_string<char> *sAddress;

// LINE 2448:
	__asm        lea    eax, sAddress;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x138];
	__asm        test   eax, eax;
	__asm        je     _T20d;

	__asm        mov    eax, sAddress;
	__asm        mov    [ebp-0x2C], eax;
// LINE 2449:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    sNew, eax;
	__asm        je     _T1ef;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tc8;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tc8;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta8;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Ta8:
	__asm        jmp    _Tad;
_Tad:
	__asm        jmp    _Tb2;
_Tb2:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tc3;
_Tc3:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        jmp    _Tcd;
_Tcd:
	__asm        jmp    _Td2;
_Td2:
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tfc;

	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ef;
_Tfc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e5;

	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1bf;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T184;

	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T190;

	__asm        jmp    _T190;
_T184:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T190;
_T190:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ba;
_T1ba:
	__asm        jmp    _T1c8;
_T1bf:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c8:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1ef;
_T1e5:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
_T1ef:
	__asm        jmp    _T1f4;
// LINE 2450:
_T1f4:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2451:
	return 0x1;
// LINE 2453:
_T20d:
	return 0x0;
// LINE 2454:
}

// FUNCTION: COPTER_D 0x004b5e21
int32_t ListBoxWindow::GetStringAddressFromIndex(long lIndex, /*packed*/ class basic_string<char>*& sFound) {
	/*bp-0x4*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x8*/   long i;
	/*bp-0xc*/   long lStringCount;

// LINE 2466:
	__asm        jmp    _T11;
_T11:
	lStringCount = this->myStringList.length;
// LINE 2468:
	__asm        mov    eax, lStringCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jge    _T2e;
// LINE 2469:
	return 0x0;
// LINE 2471:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T44;
_T44:
	__asm        jmp    _FOR_55;
// LINE 2473:
_FOR_55:
	for (i = 0x0; (lStringCount > i); i++) {
		// LINE 2474:
			__asm        mov    eax, lIndex;
			__asm        cmp    i, eax;
			__asm        jne    _T8a;
		// LINE 2477:
			__asm        jmp    _T75;
		_T75:
			sFound. = (tempStringListIterator.node + 0x8);
		// LINE 2478:
			return 0x1;
		// LINE 2480:
		_T8a:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T9d;
		_T9d:
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _Ta8;
		// LINE 2481:
		_Ta8:
	}
// LINE 2482:
_Tad:
	return 0x0;
// LINE 2483:
}

// FUNCTION: COPTER_D 0x004b5edc
int32_t ListBoxWindow::GetStringFromIndex(long lIndex, /*packed*/ class basic_string<char>& sFound) {
	/*bp-0x4*/   /*packed*/ class basic_string<char> *sAddress;

// LINE 2498:
	__asm        lea    eax, sAddress;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x138];
	__asm        test   eax, eax;
	__asm        je     _T1f4;

	__asm        mov    eax, sAddress;
	__asm        mov    [ebp-0x2C], eax;
// LINE 2499:
	__asm        mov    eax, sFound;
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     _T1ef;

	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tc8;

	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tc8;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta8;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Ta8:
	__asm        jmp    _Tad;
_Tad:
	__asm        jmp    _Tb2;
_Tb2:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tc3;
_Tc3:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        jmp    _Tcd;
_Tcd:
	__asm        jmp    _Td2;
_Td2:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tfc;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFound;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ef;
_Tfc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e5;

	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1bf;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T184;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T190;

	__asm        jmp    _T190;
_T184:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T190;
_T190:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ba;
_T1ba:
	__asm        jmp    _T1c8;
_T1bf:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c8:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sFound;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1ef;
_T1e5:
	sFound.reference = 0x0;
_T1ef:
	__asm        jmp    _T1f4;
// LINE 2501:
_T1f4:
	return 0x0;
// LINE 2502:
}

// FUNCTION: COPTER_D 0x004b60de
int32_t ListBoxWindow::GetIndexFromString(long& lIndex, /*packed*/ class basic_string<char>& sFound) {
	/*bp-0x4*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x8*/   long i;

// LINE 2511:
	i = 0x0;
// LINE 2512:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _LOOP_2e;
// LINE 2514:
_LOOP_2e:
	for (;;) {
		// LINE 2514:
		_LOOP_2e:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T42;
		_T42:
			__asm        jmp    _T47;
		_T47:
			__asm        mov    eax, [ebp-0xC];
			__asm        cmp    tempStringListIterator.node, eax;
			__asm        jne    _T5d;

			__asm        jmp    _T71;

			__asm        jmp    _T5d;
		_T5d:
			__asm        jmp    _T6c;

			__asm        cmp    dword ptr [ebp-0x28], 0;
			__asm        jne    _T71;
		_T6c:
			__asm        jmp    _T76;
		_T71:
			__asm        jmp    _T17a;
		_T76:
			__asm        jmp    _T85;

			__asm        cmp    dword ptr [ebp-0x2C], 0;
			__asm        je     _T17a;
		// LINE 2515:
		_T85:
			__asm        jmp    _T8a;
		_T8a:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        add    eax, 8;
			__asm        mov    [ebp-0x1C], eax;
			__asm        jmp    _T98;
		_T98:
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
			__asm        jae    _Tbe;

			__asm        jmp    _Tad;
		_Tad:
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _Tc5;
		_Tbe:
			__asm        mov    dword ptr [ebp-0x14], 0xFFFFFFFF;
		_Tc5:
			__asm        jmp    _Tca;
		_Tca:
			__asm        jmp    _Tcf;
		_Tcf:
			__asm        mov    eax, sFound;
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _Tf4;

			__asm        mov    eax, sFound;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _T100;

			__asm        jmp    _T100;
		_Tf4:
			__asm        mov    dword ptr [ebp-0x18], 0;
			__asm        jmp    _T100;
		_T100:
			__asm        jmp    _T105;
		_T105:
			__asm        mov    eax, sFound;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    ecx, [ebp-0x1C];
			__asm        call   basic_string<char>::compare_str;
			__asm        test   eax, eax;
			__asm        jne    _T12e;

			__asm        jmp    _T133;
		_T12e:
			__asm        jmp    _T154;
		_T133:
			__asm        jmp    _T142;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        je     _T154;
		// LINE 2516:
		_T142:
			lIndex. = i;
		// LINE 2517:
			return 0x1;
		// LINE 2519:
		_T154:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T167;
		_T167:
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T172;
		// LINE 2520:
		_T172:
			i++;
	}
// LINE 2522:
_T17a:
	return 0x0;
// LINE 2523:
}

// FUNCTION: COPTER_D 0x004b6266
int32_t ListBoxWindow::RemoveStringAtIndex(long lIndex) {
	/*bp-0x4*/   long lOriginalLineCount;

// LINE 2536:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2538:
	__asm        cmp    lOriginalLineCount, 0;
	__asm        jne    _T2e;
// LINE 2539:
	return 0x0;
// LINE 2541:
_T2e:
	__asm        cmp    lIndex, 0;
	__asm        jne    _Tb8;
// LINE 2542:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T4e;
_T4e:
	__asm        jmp    _T53;
_T53:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T79;
_T79:
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::`scalar deleting destructor';
	__asm        jmp    _T8b;
_T8b:
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _Ta2;
_Ta2:
	this->myStringList.length += -0x1;
	__asm        jmp    _Tae;
_Tae:
	__asm        jmp    _Tb3;
// LINE 2544:
_Tb3:
	__asm        jmp    _T30e;
// LINE 2545:
_Tb8:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     _Tce;

	__asm        mov    eax, lIndex;
	__asm        cmp    lOriginalLineCount, eax;
	__asm        jg     _T171;
// LINE 2547:
_Tce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Te2;
_Te2:
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    ecx, [ebp-0x3C];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T13a;

	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T13a:
	__asm        jmp    _T13f;
_T13f:
	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T15b;
_T15b:
	this->myStringList.length += -0x1;
	__asm        jmp    _T167;
_T167:
	__asm        jmp    _T16c;
// LINE 2549:
_T16c:
	__asm        jmp    _T30e;
// LINE 2550:
// Block start:
	/*bp-0x8*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0xc*/   long i;
_T171:
	i = 0x0;
// LINE 2551:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T18e;
_T18e:
	__asm        jmp    _LOOP_193;
// LINE 2553:
_LOOP_193:
	for (;;) {
		// LINE 2553:
		_LOOP_193:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T1a7;
		_T1a7:
			__asm        jmp    _T1ac;
		_T1ac:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        cmp    [ebp-0x10], eax;
			__asm        jne    _T1c2;

			__asm        jmp    _T1d6;

			__asm        jmp    _T1c2;
		_T1c2:
			__asm        jmp    _T1d1;

			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        jne    _T1d6;
		_T1d1:
			__asm        jmp    _T1db;
		_T1d6:
			__asm        jmp    _T30e;
		_T1db:
			__asm        jmp    _T1ea;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        je     _T30e;
		// LINE 2554:
		_T1ea:
			__asm        mov    eax, i;
			__asm        cmp    lIndex, eax;
			__asm        jne    _T2e8;

			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x54], eax;
		// LINE 2555:
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x54];
			__asm        mov    ecx, [ecx+4];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x54];
			__asm        mov    ecx, [ecx];
			__asm        mov    [ecx+4], eax;
			__asm        jmp    _T21c;
		_T21c:
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax+0xC];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax+0xC];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T271;

			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-0x50], eax;
			__asm        mov    eax, [ebp-0x50];
			__asm        mov    [ebp-0x4C], eax;
			__asm        cmp    dword ptr [ebp-0x4C], 0;
			__asm        je     _T271;

			__asm        mov    ecx, [ebp-0x4C];
			__asm        call   basic_string_ref<char>::delete_ptr;
			__asm        jmp    _T25b;
		_T25b:
			__asm        mov    eax, [ebp-0x4C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T26c;
		_T26c:
			__asm        jmp    _T271;
		_T271:
			__asm        jmp    _T276;
		_T276:
			__asm        mov    eax, [ebp-0x54];
			__asm        cmp    dword ptr [eax+8], 0;
			__asm        je     _T29e;

			__asm        mov    eax, [ebp-0x54];
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x44], eax;
			__asm        mov    eax, [ebp-0x44];
			__asm        mov    [ebp-0x48], eax;
			__asm        mov    eax, [ebp-0x48];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T29e:
			__asm        jmp    _T2a3;
		_T2a3:
			__asm        jmp    _T2b7;

			__asm        mov    eax, [ebp-0x54];
			__asm        add    eax, 8;
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T2b7:
			__asm        jmp    _T2bc;
		_T2bc:
			__asm        jmp    _T2c1;
		_T2c1:
			__asm        mov    eax, list<basic_string<char>>::free_list;
			__asm        mov    ecx, [ebp-0x54];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    list<basic_string<char>>::free_list, eax;
			__asm        jmp    _T2d8;
		_T2d8:
			this->myStringList.length--;
			__asm        jmp    _T2e3;
		// LINE 2556:
		_T2e3:
			__asm        jmp    _T30e;
		// LINE 2558:
		_T2e8:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x40], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T2fb;
		_T2fb:
			__asm        mov    eax, [ebp-0x40];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _T306;
		// LINE 2559:
		_T306:
			i++;
	}
// LINE 2562:
// Block end:
_T30e:
	return 0x1;
// LINE 2563:
}

// FUNCTION: COPTER_D 0x004b6585
int32_t ListBoxWindow::InsertStringAtIndex(long lIndex, /*packed*/ class basic_string<char>& sToInsert) {
	/*bp-0x4*/   long lOriginalLineCount;

// LINE 2581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2584:
	__asm        cmp    lIndex, 0;
	__asm        jne    _Teb;
// LINE 2585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T4c;
_T4c:
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T7b;
_T7b:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T9a;

	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T9a;
_T9a:
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _Tdc;
_Tdc:
	__asm        jmp    _Te1;
_Te1:
	__asm        jmp    _Te6;
// LINE 2587:
_Te6:
	__asm        jmp    _T519;
// LINE 2588:
_Teb:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     _T101;

	__asm        mov    eax, lOriginalLineCount;
	__asm        cmp    lIndex, eax;
	__asm        jl     _T1b7;
// LINE 2590:
_T101:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T118;
_T118:
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T139;
_T139:
	__asm        mov    eax, [ebp-0x50];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T147;
_T147:
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T166;

	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T166;
_T166:
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T1a8;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1b2;
// LINE 2592:
_T1b2:
	__asm        jmp    _T519;
// LINE 2593:
// Block start:
	/*bp-0x8*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0xc*/   long i;
_T1b7:
	i = 0x0;
// LINE 2594:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        jmp    _LOOP_1dc;
// LINE 2596:
_LOOP_1dc:
	for (;;) {
		// LINE 2596:
		_LOOP_1dc:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x1C], eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T1f3;
		_T1f3:
			__asm        jmp    _T1f8;
		_T1f8:
			__asm        mov    eax, [ebp-0x10];
			__asm        cmp    tempStringListIterator.node, eax;
			__asm        jne    _T20e;

			__asm        jmp    _T222;

			__asm        jmp    _T20e;
		_T20e:
			__asm        jmp    _T21d;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        jne    _T222;
		_T21d:
			__asm        jmp    _T227;
		_T222:
			__asm        jmp    _T519;
		_T227:
			__asm        jmp    _T236;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        je     _T519;
		// LINE 2597:
		_T236:
			__asm        mov    eax, i;
			__asm        cmp    lIndex, eax;
			__asm        jne    _T4f3;

			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0xB0], eax;
		// LINE 2598:
			__asm        mov    eax, list<basic_string<char>>::free_list;
			__asm        mov    [ebp-0x68], eax;
			__asm        cmp    list<basic_string<char>>::free_list, 0;
			__asm        je     _T27a;

			__asm        mov    eax, list<basic_string<char>>::free_list;
			__asm        mov    eax, [eax];
			__asm        mov    list<basic_string<char>>::free_list, eax;
			__asm        mov    eax, [ebp-0x68];
			__asm        mov    [ebp-0xAC], eax;
			__asm        jmp    _T45b;
		_T27a:
			__asm        mov    eax, list<basic_string<char>>::next_avail;
			__asm        cmp    list<basic_string<char>>::last, eax;
			__asm        jne    _T443;

			__asm        jmp    _T290;
		_T290:
			__asm        push   0;
			__asm        push   1;
			__asm        call   allocate;
			__asm        add    esp, 8;
			__asm        mov    [ebp-0x74], eax;
			__asm        mov    dword ptr [ebp-0x78], 0x100;
			__asm        lea    eax, [ebp-0x78];
			__asm        mov    [ebp-0x80], eax;
			__asm        mov    dword ptr [ebp-0x7C], 1;
			__asm        lea    eax, [ebp-0x7C];
			__asm        mov    [ebp-0x84], eax;
			__asm        mov    eax, [ebp-0x84];
			__asm        mov    ecx, [ebp-0x80];
			__asm        mov    ecx, [ecx];
			__asm        cmp    [eax], ecx;
			__asm        jb     _T2e0;

			__asm        mov    eax, [ebp-0x84];
			__asm        mov    [ebp-0x88], eax;
			__asm        jmp    _T2e9;
		_T2e0:
			__asm        mov    eax, [ebp-0x80];
			__asm        mov    [ebp-0x88], eax;
		_T2e9:
			__asm        jmp    _T2ee;
		_T2ee:
			__asm        jmp    _T2f3;
		_T2f3:
			__asm        jmp    _T2f8;
		_T2f8:
			__asm        mov    eax, [ebp-0x88];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0xA8], eax;
			__asm        push   0;
			__asm        call   set_new_handler;
			__asm        add    esp, 4;
			__asm        mov    eax, [ebp-0xA8];
			__asm        shl    eax, 4;
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0xA0], eax;
			__asm        cmp    dword ptr [ebp-0xA0], 0;
			__asm        jne    _T368;

			__asm        push   0x5971AC;
			__asm        mov    ecx, 0x638BA0;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0xA4], eax;
			__asm        mov    eax, [ebp-0xA4];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T35e;
		_T35e:
			exit(0x1);
		_T368:
			__asm        jmp    _T36d;
		_T36d:
			__asm        jmp    _T372;
		_T372:
			__asm        mov    eax, [ebp-0xA0];
			__asm        mov    ecx, [ebp-0x74];
			__asm        mov    [ecx+4], eax;
			__asm        mov    eax, list<basic_string<char>>::buffer_list;
			__asm        mov    ecx, [ebp-0x74];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    list<basic_string<char>>::buffer_list, eax;
			__asm        mov    eax, list<basic_string<char>>::buffer_list;
			__asm        mov    eax, [eax+4];
			__asm        mov    list<basic_string<char>>::next_avail, eax;
			__asm        mov    dword ptr [ebp-0x8C], 0x100;
			__asm        lea    eax, [ebp-0x8C];
			__asm        mov    [ebp-0x94], eax;
			__asm        mov    dword ptr [ebp-0x90], 1;
			__asm        lea    eax, [ebp-0x90];
			__asm        mov    [ebp-0x98], eax;
			__asm        mov    eax, [ebp-0x98];
			__asm        mov    ecx, [ebp-0x94];
			__asm        mov    ecx, [ecx];
			__asm        cmp    [eax], ecx;
			__asm        jb     _T3f0;

			__asm        mov    eax, [ebp-0x98];
			__asm        mov    [ebp-0x9C], eax;
			__asm        jmp    _T3fc;
		_T3f0:
			__asm        mov    eax, [ebp-0x94];
			__asm        mov    [ebp-0x9C], eax;
		_T3fc:
			__asm        jmp    _T401;
		_T401:
			__asm        jmp    _T406;
		_T406:
			__asm        jmp    _T40b;
		_T40b:
			__asm        mov    eax, [ebp-0x9C];
			__asm        mov    eax, [eax];
			__asm        shl    eax, 4;
			__asm        add    eax, list<basic_string<char>>::next_avail;
			__asm        mov    list<basic_string<char>>::last, eax;
			__asm        jmp    _T426;
		_T426:
			__asm        mov    eax, list<basic_string<char>>::next_avail;
			__asm        mov    [ebp-0x6C], eax;
			__asm        add    list<basic_string<char>>::next_avail, 0x10;
			__asm        mov    eax, [ebp-0x6C];
			__asm        mov    [ebp-0xAC], eax;
			__asm        jmp    _T45b;
		_T443:
			__asm        mov    eax, list<basic_string<char>>::next_avail;
			__asm        mov    [ebp-0x70], eax;
			__asm        add    list<basic_string<char>>::next_avail, 0x10;
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    [ebp-0xAC], eax;
		_T45b:
			__asm        jmp    _T460;
		_T460:
			__asm        mov    eax, [ebp-0xAC];
			__asm        mov    [ebp-0x60], eax;
			__asm        jmp    _T46e;
		_T46e:
			__asm        mov    eax, [ebp-0x60];
			__asm        add    eax, 8;
			__asm        mov    [ebp-0x64], eax;
			__asm        jmp    _T47c;
		_T47c:
			__asm        cmp    dword ptr [ebp-0x64], 0;
			__asm        je     _T49b;

			__asm        push   0xFFFFFFFF;
			__asm        push   0;
			__asm        mov    eax, sToInsert;
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x64];
			__asm        call   basic_string<char>::basic_string<char>;
			__asm        jmp    _T49b;
		_T49b:
			__asm        jmp    _T4a0;
		_T4a0:
			__asm        mov    eax, [ebp-0xB0];
			__asm        mov    ecx, [ebp-0x60];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0xB0];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x60];
			__asm        mov    [ecx+4], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    ecx, [ebp-0xB0];
			__asm        mov    ecx, [ecx+4];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    ecx, [ebp-0xB0];
			__asm        mov    [ecx+4], eax;
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax+0x78], 1;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _T4e9;
		_T4e9:
			__asm        jmp    _T4ee;
		// LINE 2599:
		_T4ee:
			__asm        jmp    _T519;
		// LINE 2601:
		_T4f3:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x5C], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T506;
		_T506:
			__asm        mov    eax, [ebp-0x5C];
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _T511;
		// LINE 2602:
		_T511:
			i++;
	}
// LINE 2605:
// Block end:
_T519:
	return 0x1;
// LINE 2606:
}

// FUNCTION: COPTER_D 0x004b6aaf
long ListBoxWindow::DoCharacter(long lCharacter) {
// LINE 2619:
	return 0x0;
// LINE 2620:
}

// FUNCTION: COPTER_D 0x004b6ac9
long ListBoxWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2630:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 2631:
	return 0x0;
// LINE 2633:
_T20:
	__asm        cmp    lKey, 0x28;
	__asm        jne    _T47;
// LINE 2634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
// LINE 2635:
	return 0x1;
// LINE 2637:
	__asm        jmp    _Tb7;
_T47:
	__asm        cmp    lKey, 0x26;
	__asm        jne    _T6e;
// LINE 2638:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
// LINE 2639:
	return 0x1;
// LINE 2641:
	__asm        jmp    _Tb7;
_T6e:
	__asm        cmp    lKey, 0x21;
	__asm        jne    _T95;
// LINE 2642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xFC];
// LINE 2643:
	return 0x1;
// LINE 2645:
	__asm        jmp    _Tb7;
_T95:
	__asm        cmp    lKey, 0x22;
	__asm        jne    _Tb7;
// LINE 2646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x100];
// LINE 2647:
	return 0x1;
// LINE 2649:
_Tb7:
	return 0x0;
// LINE 2650:
}

// FUNCTION: COPTER_D 0x004b6b8e
long ListBoxWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lRelativeSelectionIndex;
	/*bp-0x8*/   long lAbsoluteSelectionIndex;

// LINE 2662:
	__asm        mov    ecx, this;
	__asm        mov    eax, nCursorY;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lRelativeSelectionIndex, eax;
// LINE 2663:
	lAbsoluteSelectionIndex = (this->lFirstVisibleLine + lRelativeSelectionIndex);
// LINE 2665:
	__asm        mov    eax, this;
	__asm        mov    ecx, lAbsoluteSelectionIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     _T66;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        cmp    eax, lAbsoluteSelectionIndex;
	__asm        jle    _T66;
// LINE 2667:
	__asm        mov    eax, lAbsoluteSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2669:
_T66:
	GraphicWindow::MakeFocus(this);
// LINE 2670:
	return 0x1;
// LINE 2671:
}

// FUNCTION: COPTER_D 0x004b6c11
int32_t ListBoxWindow::SetSelection(long lIndex) {
// LINE 2682:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC8], 0;
	__asm        je     _T23;
// LINE 2683:
	return 0x0;
// LINE 2684:
_T23:
	this->bBusySettingSelection = 0x1;
// LINE 2686:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     _T6f;

	__asm        cmp    lIndex, 0;
	__asm        jl     _T5b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        cmp    eax, lIndex;
	__asm        jg     _T6f;
// LINE 2687:
_T5b:
	this->bBusySettingSelection = 0x0;
// LINE 2688:
	return 0x0;
// LINE 2690:
_T6f:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    _T98;
// LINE 2691:
	this->bBusySettingSelection = 0x0;
// LINE 2692:
	return 0x1;
// LINE 2695:
_T98:
	this->lCurrentSelection = lIndex;
// LINE 2696:
	__asm        cmp    lIndex, 0;
	__asm        jl     _Tda;
// LINE 2697:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x104];
	__asm        test   eax, eax;
	__asm        jne    _Tda;
// LINE 2698:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x108];
// LINE 2700:
_Tda:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2701:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T11f;
// LINE 2702:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2705:
_T11f:
	this->bBusySettingSelection = 0x0;
// LINE 2706:
	return 0x1;
// LINE 2707:
}

// FUNCTION: COPTER_D 0x004b6d4e
long ListBoxWindow::GetSelection() {
// LINE 2714:
	return this->lCurrentSelection;
// LINE 2715:
}

// FUNCTION: COPTER_D 0x004b6d6d
int32_t ListBoxWindow::IsIndexInView(long lIndex) {
// LINE 2722:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jg     _T43;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB4];
	__asm        cmp    eax, lIndex;
	__asm        jle    _T43;

	__asm        mov    eax, 1;
	__asm        jmp    _T45;
_T43:
	__asm        xor    eax, eax;
_T45:
	__asm        jmp    __RETURN;
// LINE 2723:
__RETURN:
}

// FUNCTION: COPTER_D 0x004b6dbe
void ListBoxWindow::PutIndexInView(long lIndex) {
// LINE 2730:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _T35;
// LINE 2732:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2733:
	__asm        jmp    _T6f;
_T35:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB4];
	__asm        cmp    eax, lIndex;
	__asm        jge    _T6f;
// LINE 2735:
	__asm        mov    eax, lIndex;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2736:
_T6f:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2737:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2738:
	return;
}

// FUNCTION: COPTER_D 0x004b6e56
void ListBoxWindow::SetIndexOfTopLine(long lIndex) {
// LINE 2751:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jne    _T23;
// LINE 2752:
	return;
// LINE 2754:
_T23:
	this->lFirstVisibleLine = lIndex;
// LINE 2755:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jge    _T4c;
// LINE 2756:
	this->lFirstVisibleLine = 0x0;
// LINE 2757:
_T4c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jge    _T92;
// LINE 2758:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 2759:
_T92:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2760:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2761:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Te5;
// LINE 2762:
	__asm        mov    eax, this;
	__asm        add    eax, 0xB4;
	__asm        push   eax;
	__asm        push   0x10002;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2763:
_Te5:
	return;
}

// FUNCTION: COPTER_D 0x004b6f47
int32_t ListBoxWindow::ScrollToStart() {
// LINE 2772:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        test   eax, eax;
	__asm        jle    _T32;
// LINE 2773:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2774:
_T32:
	return 0x0;
// LINE 2775:
}

// FUNCTION: COPTER_D 0x004b6f85
int32_t ListBoxWindow::ScrollToEnd() {
	/*bp-0x4*/   long lCurrentLineCount;

// LINE 2788:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2789:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    _T69;
// LINE 2790:
	__asm        mov    eax, this;
	__asm        mov    ecx, lCurrentLineCount;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jl     _T4e;
// LINE 2792:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2793:
	__asm        jmp    _T69;
// LINE 2795:
_T4e:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2797:
_T69:
	return 0x1;
// LINE 2798:
}

// FUNCTION: COPTER_D 0x004b6ffd
int32_t ListBoxWindow::MoveLineUp() {
	/*bp-0x4*/   long lCurrentLineCount;

// LINE 2812:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2813:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jg     _T2e;
// LINE 2814:
	return 0x0;
// LINE 2816:
_T2e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jle    _T61;
// LINE 2817:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2818:
	return 0x1;
// LINE 2820:
_T61:
	return 0x0;
// LINE 2821:
}

// FUNCTION: COPTER_D 0x004b706a
int32_t ListBoxWindow::MoveLineDown() {
	/*bp-0x4*/   long lCurrentLineCount;

// LINE 2837:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2838:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jg     _T2e;
// LINE 2839:
	return 0x0;
// LINE 2841:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    ecx, lCurrentLineCount;
	__asm        dec    ecx;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jge    _T64;
// LINE 2842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2843:
	return 0x1;
// LINE 2845:
_T64:
	return 0x0;
// LINE 2846:
}

// FUNCTION: COPTER_D 0x004b70da
int32_t ListBoxWindow::ScrollPageUp() {
	/*bp-0x4*/   long lCurrentLineCount;
	/*bp-0x8*/   long lNewFirstVisibleLine;

// LINE 2862:
	lNewFirstVisibleLine = this->lFirstVisibleLine;
// LINE 2863:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2864:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    _T65;
// LINE 2865:
	lNewFirstVisibleLine -= (this->lVisibleLines - 1);
// LINE 2866:
	__asm        jns    _T53;
// LINE 2867:
	lNewFirstVisibleLine = 0x0;
// LINE 2868:
_T53:
	__asm        mov    eax, lNewFirstVisibleLine;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2870:
_T65:
	return 0x1;
// LINE 2871:
}

// FUNCTION: COPTER_D 0x004b714e
int32_t ListBoxWindow::ScrollPageDown() {
	/*bp-0x4*/   long lCurrentLineCount;
	/*bp-0x8*/   long lNewFirstVisibleLine;

// LINE 2882:
	lNewFirstVisibleLine = this->lFirstVisibleLine;
// LINE 2883:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2884:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    _T97;
// LINE 2885:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jle    _T97;
// LINE 2886:
	lNewFirstVisibleLine += (this->lVisibleLines - 1);
// LINE 2888:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jge    _T85;
// LINE 2889:
	lNewFirstVisibleLine = (lCurrentLineCount - this->lVisibleLines);
// LINE 2890:
_T85:
	__asm        mov    eax, lNewFirstVisibleLine;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2893:
_T97:
	return 0x1;
// LINE 2894:
}

// FUNCTION: COPTER_D 0x004b71f4
int32_t ListBoxWindow::ScrollToFirstLetter(char chValue) {
	/*bp-0x4*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x8*/   int32_t i;

// LINE 2902:
	i = 0x0;
// LINE 2903:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _LOOP_2e;
// LINE 2905:
_LOOP_2e:
	for (;;) {
		// LINE 2905:
		_LOOP_2e:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x14], eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T42;
		_T42:
			__asm        jmp    _T47;
		_T47:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        cmp    [ebp-0xC], eax;
			__asm        jne    _T5d;

			__asm        jmp    _T71;

			__asm        jmp    _T5d;
		_T5d:
			__asm        jmp    _T6c;

			__asm        cmp    dword ptr [ebp-0x18], 0;
			__asm        jne    _T71;
		_T6c:
			__asm        jmp    _T76;
		_T71:
			__asm        jmp    _T1e7;
		_T76:
			__asm        jmp    _T85;

			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        je     _T1e7;
		// LINE 2906:
		_T85:
			__asm        jmp    _T8a;
		_T8a:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        add    eax, 8;
			__asm        mov    [ebp-0x48], eax;
			__asm        mov    eax, [ebp-0x48];
			__asm        cmp    dword ptr [eax], 0;
			__asm        je     _Tb9;

			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, [ebp-0x28];
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, [ebp-0x30];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_Tb9:
			__asm        jmp    _Tbe;
		_Tbe:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        inc    eax;
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    ecx, [ebp-0x48];
			__asm        mov    [ecx], eax;
			__asm        jmp    _Tdb;
		_Tdb:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T153;

			__asm        jmp    _Tf0;
		_Tf0:
			__asm        jmp    _Tf5;
		_Tf5:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T11a;

			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x3C], eax;
			__asm        jmp    _T126;

			__asm        jmp    _T126;
		_T11a:
			__asm        mov    dword ptr [ebp-0x3C], 0;
			__asm        jmp    _T126;
		_T126:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x40], eax;
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x44], eax;
			__asm        mov    eax, [ebp-0x40];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x3C];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x44];
			__asm        push   eax;
			__asm        call   memcpy;
			__asm        add    esp, 0xC;
			__asm        jmp    _T153;
		_T153:
			__asm        jmp    _T158;
		_T158:
			__asm        mov    byte ptr [ebp-0x2C], 0;
			__asm        jmp    _T161;
		_T161:
			__asm        lea    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x34], eax;
			__asm        jmp    _T16c;
		_T16c:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x48];
			__asm        add    eax, [ecx];
			__asm        mov    [ebp-0x38], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    al, [eax];
			__asm        mov    ecx, [ebp-0x38];
			__asm        mov    [ecx], al;
			__asm        jmp    _T18c;
		_T18c:
			__asm        jmp    _T191;
		_T191:
			__asm        mov    eax, [ebp-0x48];
			__asm        mov    eax, [eax];
			__asm        movsx  eax, byte ptr [eax];
			__asm        movsx  ecx, chValue;
			__asm        cmp    eax, ecx;
			__asm        jne    _T1c1;
		// LINE 2907:
			__asm        mov    eax, i;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, this;
			__asm        call   dword ptr [eax+0xDC];
		// LINE 2908:
			return 0x1;
		// LINE 2910:
		_T1c1:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T1d4;
		_T1d4:
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T1df;
		// LINE 2911:
		_T1df:
			i++;
	}
// LINE 2913:
_T1e7:
	return 0x0;
// LINE 2914:
}

// FUNCTION: COPTER_D 0x004b73e9
void ListBoxWindow::SetShouldSort() {
// LINE 2923:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _T37;
// LINE 2924:
	this->bAlwaysSort = 0x1;
// LINE 2925:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 2927:
_T37:
	return;
}

// FUNCTION: COPTER_D 0x004b742a
void ListBoxWindow::Sort() {
	/*bp-0x4*/   long lNewSelectionIndex;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sSaved; // 0x8 bytes

// LINE 2939:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    sSaved.reference, eax;
	__asm        jmp    _T69;
_T62:
	sSaved.reference = 0x0;
_T69:
	sSaved.c_str_ptr = 0x0;
	__asm        jmp    _T75;
// LINE 2942:
_T75:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jl     _Tad;
// LINE 2943:
	__asm        lea    eax, sSaved.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x13C];
// LINE 2945:
_Tad:
	__asm        jmp    _Tb2;
_Tb2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 2;
	__asm        jae    _Tc7;

	__asm        jmp    _T3bb;
_Tc7:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    dword ptr [ebp-0x25C], 0x40;
	__asm        lea    eax, [ebp-0x234];
	__asm        mov    [ebp-0x260], eax;
__WHILE_10b:
	__asm        dec    dword ptr [ebp-0x25C];
	__asm        js     _T12e;

	__asm        mov    ecx, [ebp-0x260];
	__asm        call   list<basic_string<char>>::list<basic_string<char>>;
	__asm        add    dword ptr [ebp-0x260], 8;
	__asm        jmp    __WHILE_10b;
_T12e:
	__asm        jmp    _T133;
_T133:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_LOOP_13a:
	for (;;) {
		_LOOP_13a:
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x78], 0;
			__asm        jne    _T154;

			__asm        jmp    __WHILE_32a;

			__asm        jmp    _T154;
		_T154:
			__asm        jmp    _T166;

			__asm        cmp    dword ptr [ebp-0x258], 0;
			__asm        jne    __WHILE_32a;
		_T166:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x250], eax;
			__asm        mov    eax, [ebp-0x250];
			__asm        mov    [ebp-0x23C], eax;
			__asm        jmp    _T188;
		_T188:
			__asm        jmp    _T18d;
		_T18d:
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x254], eax;
			__asm        mov    eax, [ebp-0x254];
			__asm        mov    [ebp-0x240], eax;
			__asm        jmp    _T1a9;
		_T1a9:
			__asm        jmp    _T1ae;
		_T1ae:
			__asm        mov    eax, [ebp-0x23C];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        add    eax, 0x74;
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x240];
			__asm        push   eax;
			__asm        lea    ecx, [ebp-0x34];
			__asm        call   list<basic_string<char>>::splice;
			__asm        mov    dword ptr [ebp-0x238], 0;
		__WHILE_1d8:
			__asm        mov    eax, [ebp-0x2C];
			__asm        cmp    [ebp-0x238], eax;
			__asm        jge    _T2ac;

			__asm        mov    eax, [ebp-0x238];
			__asm        cmp    dword ptr [ebp+eax*8-0x230], 0;
			__asm        jne    _T205;

			__asm        jmp    _T2ac;

			__asm        jmp    _T205;
		_T205:
			__asm        jmp    _T217;

			__asm        cmp    dword ptr [ebp-0x24C], 0;
			__asm        jne    _T2ac;
		_T217:
			__asm        lea    eax, [ebp-0x34];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x238];
			__asm        lea    ecx, [ebp+eax*8-0x234];
			__asm        call   list<basic_string<char>>::merge;
			__asm        mov    eax, [ebp-0x238];
			__asm        mov    [ebp-0x244], eax;
			__asm        add    dword ptr [ebp-0x238], 1;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    [ebp-0x264], eax;
			__asm        mov    eax, [ebp-0x244];
			__asm        mov    eax, [ebp+eax*8-0x234];
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, [ebp-0x264];
			__asm        mov    ecx, [ebp-0x244];
			__asm        mov    [ebp+ecx*8-0x234], eax;
			__asm        jmp    _T271;
		_T271:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0x268], eax;
			__asm        mov    eax, [ebp-0x244];
			__asm        mov    eax, [ebp+eax*8-0x230];
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, [ebp-0x268];
			__asm        mov    ecx, [ebp-0x244];
			__asm        mov    [ebp+ecx*8-0x230], eax;
			__asm        jmp    _T2a2;
		_T2a2:
			__asm        jmp    _T2a7;
		_T2a7:
			__asm        jmp    __WHILE_1d8;
		_T2ac:
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    [ebp-0x26C], eax;
			__asm        mov    eax, [ebp-0x238];
			__asm        mov    eax, [ebp+eax*8-0x234];
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, [ebp-0x26C];
			__asm        mov    ecx, [ebp-0x238];
			__asm        mov    [ebp+ecx*8-0x234], eax;
			__asm        jmp    _T2dd;
		_T2dd:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0x270], eax;
			__asm        mov    eax, [ebp-0x238];
			__asm        mov    eax, [ebp+eax*8-0x230];
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, [ebp-0x270];
			__asm        mov    ecx, [ebp-0x238];
			__asm        mov    [ebp+ecx*8-0x230], eax;
			__asm        jmp    _T30e;
		_T30e:
			__asm        jmp    _T313;
		_T313:
			__asm        mov    eax, [ebp-0x2C];
			__asm        cmp    [ebp-0x238], eax;
			__asm        jne    _T325;

			__asm        inc    dword ptr [ebp-0x2C];
		_T325:
	}
__WHILE_32a:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x248], eax;
	__asm        dec    dword ptr [ebp-0x2C];
	__asm        cmp    dword ptr [ebp-0x248], 0;
	__asm        je     _T361;

	__asm        mov    eax, [ebp-0x2C];
	__asm        lea    eax, [ebp+eax*8-0x234];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   list<basic_string<char>>::merge;
	__asm        jmp    __WHILE_32a;
_T361:
	__asm        mov    dword ptr [ebp-0x274], 0x40;
	__asm        lea    eax, [ebp-0x234];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x278], eax;
__WHILE_386:
	__asm        dec    dword ptr [ebp-0x274];
	__asm        js     _T3a9;

	__asm        sub    dword ptr [ebp-0x278], 8;
	__asm        mov    ecx, [ebp-0x278];
	__asm        call   list<basic_string<char>>::~list<basic_string<char>>;
	__asm        jmp    __WHILE_386;
_T3a9:
	__asm        jmp    _T3ae;
_T3ae:
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   list<basic_string<char>>::~list<basic_string<char>>;
	__asm        jmp    _T3bb;
// LINE 2946:
_T3bb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jl     _T402;
// LINE 2947:
	__asm        lea    eax, sSaved.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, lNewSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x140];
// LINE 2948:
	__asm        mov    eax, lNewSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2950:
_T402:
	__asm        mov    eax, sSaved.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sSaved.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T485;

	__asm        mov    eax, sSaved.reference;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T485;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T465;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
_T465:
	__asm        jmp    _T46a;
_T46a:
	__asm        jmp    _T46f;
_T46f:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T480;
_T480:
	__asm        jmp    _T485;
_T485:
	__asm        jmp    _T48a;
_T48a:
	__asm        cmp    sSaved.c_str_ptr, 0;
	__asm        je     _T4ac;

	__asm        mov    eax, sSaved.c_str_ptr;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4ac:
	__asm        jmp    _T4b1;
// LINE 2951:
_T4b1:
	return;
}

// FUNCTION: COPTER_D 0x004b78e5
long ListBoxWindow::GetLineCount() {
// LINE 2958:
	__asm        jmp    _T11;
_T11:
	return this->myStringList.length;
// LINE 2959:
}

// FUNCTION: COPTER_D 0x004b7906
long ListBoxWindow::GetIndexOfTopLine() {
// LINE 2966:
	return this->lFirstVisibleLine;
// LINE 2967:
}

// FUNCTION: COPTER_D 0x004b7925
int32_t ListBoxWindow::AddScrollBar(int32_t bVertical, int32_t __formal, char * szImageFileName) {
// LINE 2978:
	__asm        cmp    bVertical, 0;
	__asm        je     _Tf3;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
	__asm        test   eax, eax;
	__asm        jne    _Tf3;
// LINE 2979:
// Block start:
	/*bp-0x10*/  /*packed*/ class MRect rectScrollBar; // 0x10 bytes
	__asm        jmp    _T30;
_T30:
	__asm        jmp    _T35;
// LINE 2980:
_T35:
	rectScrollBar.top = 0x0;
// LINE 2981:
	__asm        jmp    _T41;
_T41:
	rectScrollBar.right = (this-><ListBoxWindow+0x18> - this-><ListBoxWindow+0x10>);
// LINE 2982:
	rectScrollBar.left = (rectScrollBar.right - 0x10);
// LINE 2983:
	__asm        jmp    _T5e;
_T5e:
	rectScrollBar.bottom = (this-><ListBoxWindow+0x1c> - this-><ListBoxWindow+0x14>);
// LINE 2986:
	__asm        push   0xD4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tb3;

	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        lea    eax, rectScrollBar.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   ScrollBarWindow::ScrollBarWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _Tc0;
_Tb3:
	this->myVerticalScrollBarWindow = 0x0;
// LINE 2987:
_Tc0:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+4];
// LINE 2988:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2989:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x154];
// LINE 2991:
// Block end:
_Tf3:
	return 0x1;
// LINE 2992:
}

// FUNCTION: COPTER_D 0x004b7a29
void ListBoxWindow::RemoveScrollBar(int32_t bVertical, int32_t bHorizontal) {
// LINE 3000:
	__asm        cmp    bVertical, 0;
	__asm        je     _T38;
// LINE 3001:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 3002:
	this->myVerticalScrollBarWindow = 0x0;
// LINE 3004:
_T38:
	__asm        cmp    bHorizontal, 0;
	__asm        je     _T64;
// LINE 3005:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 3006:
	this->myHorizontalScrollBarWindow = 0x0;
// LINE 3008:
_T64:
	return;
}

// FUNCTION: COPTER_D 0x004b7a99
void ListBoxWindow::SetScrollBarValue() {
// LINE 3016:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _Tbe;
// LINE 3017:
// Block start:
	/*bp-0x4*/   long lLinesNotVisible;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    lLinesNotVisible, eax;
// LINE 3018:
	__asm        cmp    lLinesNotVisible, 0;
	__asm        jge    _T47;
// LINE 3019:
	lLinesNotVisible = 0x0;
// LINE 3020:
_T47:
	this->myVerticalScrollBarWindow->SliderWindow::SetMinimumValue(0x0);
// LINE 3021:
	this->myVerticalScrollBarWindow->SliderWindow::SetMaximumValue(lLinesNotVisible);
// LINE 3022:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB0];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, lLinesNotVisible;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0xD8];
// LINE 3023:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x118];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   SliderWindow::SetValue;
// LINE 3025:
// Block end:
_Tbe:
	return;
}

// FUNCTION: COPTER_D 0x004b7b61
void ListBoxWindow::SetScrollBarSizes() {
	/*bp-0x4*/   int32_t nScrollBarXPosition;
	/*bp-0x8*/   int32_t nScrollBarYPosition;

// LINE 3035:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _Tba;
// LINE 3036:
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
_T26:
	nScrollBarXPosition = ((this-><ListBoxWindow+0x18> - this-><ListBoxWindow+0x10>) - (this->myVerticalScrollBarWindow-><ScrollBarWindow+0x18> - this->myVerticalScrollBarWindow-><ScrollBarWindow+0x10>));
// LINE 3037:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T68;

	nScrollBarYPosition = 0x1;
	__asm        jmp    _T6f;
_T68:
	nScrollBarYPosition = 0x0;
// LINE 3038:
_T6f:
	__asm        mov    eax, nScrollBarYPosition;
	__asm        push   eax;
	__asm        mov    eax, nScrollBarXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x34];
// LINE 3039:
	__asm        jmp    _T93;
_T93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x38];
// LINE 3041:
_Tba:
	return;
}

// FUNCTION: COPTER_D 0x004b7c25
void PopupMenuWindow::PopupMenuWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->ListBoxWindow::ListBoxWindow(rectNewWindow, nNewID, windowNewParent, myNewOwner, bAddToParentList);
	this-><PopupMenuWindow+0x00> = 0x592220;
// LINE 3060:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b7c65
int32_t PopupMenuWindow::Initialize() {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 3067:
	nReturnValue = this->ListBoxWindow::Initialize();
// LINE 3068:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3069:
	GraphicWindow::MakeFocus(this);
// LINE 3070:
	GraphicWindow::MakeModal(this);
// LINE 3071:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 3072:
	return nReturnValue;
// LINE 3073:
}

// FUNCTION: COPTER_D 0x004b7cc1
long PopupMenuWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 3081:
	__asm        cmp    lKey, 0xD;
	__asm        je     _T20;

	__asm        cmp    lKey, 0x1B;
	__asm        jne    _Tb5;
// LINE 3082:
_T20:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 3083:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Ta0;
// LINE 3084:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T77;
// LINE 3085:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3086:
	__asm        jmp    _Ta0;
// LINE 3087:
_T77:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10004;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3089:
_Ta0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3090:
	return 0x1;
// LINE 3092:
_Tb5:
	return this->ListBoxWindow::DoKeyDown(lKey, chModifiers);
// LINE 3093:
}

// FUNCTION: COPTER_D 0x004b7d92
long PopupMenuWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 3105:
	__asm        cmp    nCursorX, 0;
	__asm        jl     _T54;

	__asm        cmp    nCursorY, 0;
	__asm        jl     _T54;

	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cmp    eax, nCursorX;
	__asm        jl     _T54;

	__asm        jmp    _T3f;
_T3f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cmp    eax, nCursorY;
	__asm        jge    _Tb1;
// LINE 3106:
_T54:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 3107:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T9c;
// LINE 3108:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10004;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3109:
_T9c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3110:
	return 0x1;
// LINE 3112:
_Tb1:
	return this->ListBoxWindow::DoCursorDown(nCursorX, nCursorY, nButton);
// LINE 3113:
}

// FUNCTION: COPTER_D 0x004b7e63
long PopupMenuWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 3122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T60;

	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     _T60;
// LINE 3123:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3124:
_T60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3125:
	return 0x1;
// LINE 3126:
}

// FUNCTION: COPTER_D 0x004b7edf
long PopupMenuWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 3139:
	__asm        mov    ecx, this;
	__asm        mov    eax, nCursorY;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 3140:
	return 0x1;
// LINE 3141:
}

// FUNCTION: COPTER_D 0x004b7f18
int32_t PopupMenuWindow::RemoveStringAtIndex(long lIndex) {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 3150:
	this->lVisibleLines--;
// LINE 3151:
	nReturnValue = this->ListBoxWindow::RemoveStringAtIndex(lIndex);
// LINE 3152:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3153:
	return nReturnValue;
// LINE 3154:
}

// FUNCTION: COPTER_D 0x004b7f59
int32_t PopupMenuWindow::InsertStringAtIndex(long lIndex, /*packed*/ class basic_string<char>& sToInsert) {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 3163:
	this->lVisibleLines++;
// LINE 3164:
	nReturnValue = this->ListBoxWindow::InsertStringAtIndex(lIndex, sToInsert);
// LINE 3165:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3166:
	return nReturnValue;
// LINE 3167:
}

// FUNCTION: COPTER_D 0x004b7f9e
void PopupMenuWindow::ResizeWindowToFitMenuItems() {
	/*bp-0x10*/  /*packed*/ class MRect rectNewWindow; // 0x10 bytes
	/*bp-0x14*/  long lCurrentLineHeight;
	/*bp-0x18*/  long lCurrentLineWidth;
	/*bp-0x1c*/  /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x20*/  long lCurrentLongestLineWidth;

// LINE 3174:
	lCurrentLongestLineWidth = 0x1;
// LINE 3177:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T2e;
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        inc    eax;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, 1;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x4C], eax;
// LINE 3178:
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    rectNewWindow.left, eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    rectNewWindow.top, eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    rectNewWindow.right, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    rectNewWindow.bottom, eax;
	__asm        jmp    _LOOP_78;
// LINE 3180:
_LOOP_78:
	for (;;) {
		// LINE 3180:
		_LOOP_78:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x24], eax;
			__asm        jmp    _T8c;
		_T8c:
			__asm        jmp    _T91;
		_T91:
			__asm        mov    eax, [ebp-0x24];
			__asm        cmp    tempStringListIterator.node, eax;
			__asm        jne    _Ta7;

			__asm        jmp    _Tbb;

			__asm        jmp    _Ta7;
		_Ta7:
			__asm        jmp    _Tb6;

			__asm        cmp    dword ptr [ebp-0x30], 0;
			__asm        jne    _Tbb;
		_Tb6:
			__asm        jmp    _Tc0;
		_Tbb:
			__asm        jmp    _T22c;
		_Tc0:
			__asm        jmp    _Tcf;

			__asm        cmp    dword ptr [ebp-0x34], 0;
			__asm        je     _T22c;
		// LINE 3181:
		_Tcf:
			__asm        jmp    _Td4;
		_Td4:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        add    eax, 8;
			__asm        mov    [ebp-0x70], eax;
			__asm        mov    eax, [ebp-0x70];
			__asm        cmp    dword ptr [eax], 0;
			__asm        je     _T103;

			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x50], eax;
			__asm        mov    eax, [ebp-0x50];
			__asm        mov    [ebp-0x58], eax;
			__asm        mov    eax, [ebp-0x58];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T103:
			__asm        jmp    _T108;
		_T108:
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        inc    eax;
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    ecx, [ebp-0x70];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T125;
		_T125:
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T19d;

			__asm        jmp    _T13a;
		_T13a:
			__asm        jmp    _T13f;
		_T13f:
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T164;

			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x64], eax;
			__asm        jmp    _T170;

			__asm        jmp    _T170;
		_T164:
			__asm        mov    dword ptr [ebp-0x64], 0;
			__asm        jmp    _T170;
		_T170:
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x68], eax;
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x6C], eax;
			__asm        mov    eax, [ebp-0x68];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x64];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x6C];
			__asm        push   eax;
			__asm        call   memcpy;
			__asm        add    esp, 0xC;
			__asm        jmp    _T19d;
		_T19d:
			__asm        jmp    _T1a2;
		_T1a2:
			__asm        mov    byte ptr [ebp-0x54], 0;
			__asm        jmp    _T1ab;
		_T1ab:
			__asm        lea    eax, [ebp-0x54];
			__asm        mov    [ebp-0x5C], eax;
			__asm        jmp    _T1b6;
		_T1b6:
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x70];
			__asm        add    eax, [ecx];
			__asm        mov    [ebp-0x60], eax;
			__asm        mov    eax, [ebp-0x5C];
			__asm        mov    al, [eax];
			__asm        mov    ecx, [ebp-0x60];
			__asm        mov    [ecx], al;
			__asm        jmp    _T1d6;
		_T1d6:
			__asm        jmp    _T1db;
		_T1db:
			__asm        lea    eax, lCurrentLineHeight;
			__asm        push   eax;
			__asm        lea    eax, lCurrentLineWidth;
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    eax, [eax];
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x8C;
			__asm        call   MFont::GetTextDimensions;
		// LINE 3182:
			__asm        mov    eax, lCurrentLongestLineWidth;
			__asm        cmp    lCurrentLineWidth, eax;
			__asm        jle    _T209;
		// LINE 3183:
			lCurrentLongestLineWidth = lCurrentLineWidth;
		// LINE 3184:
		_T209:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x3C], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T21c;
		_T21c:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    [ebp-0x28], eax;
			__asm        jmp    _T227;
		// LINE 3185:
		_T227:
	}
// LINE 3186:
_T22c:
	rectNewWindow.right = ((rectNewWindow.left + lCurrentLongestLineWidth) + 0xa);
// LINE 3187:
	__asm        jmp    _T23d;
_T23d:
	rectNewWindow.bottom = ((this->myStringList.length * this->lLineHeight) + rectNewWindow.top);
// LINE 3188:
	this-><PopupMenuWindow+0x3c>->GraphicWindow::FitRectToWindow(rectNewWindow.left);
// LINE 3189:
	__asm        lea    eax, rectNewWindow.left;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        jmp    _T2a0;
// LINE 3190:
_T2a0:
	return;
}



// Contribution: 1:000b7250-000b728d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8250
// BoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7290-000b72db Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8290
// TextWindow::`scalar deleting destructor'



// Contribution: 1:000b72e0-000b731d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b82e0
// ButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b7320-000b7362 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8320
// CheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7370-000b73a8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8370
// RadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b73b0-000b758f Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b83b0
// ButtonGroup::`scalar deleting destructor'



// Contribution: 1:000b7590-000b75c8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8590
// SliderWindow::`scalar deleting destructor'



// Contribution: 1:000b75d0-000b7612 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b85d0
// ScrollBarWindow::`scalar deleting destructor'



// Contribution: 1:000b7620-000b785e Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8620
// ListBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7860-000b7947 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8860
// list<basic_string<char>>::splice



// Contribution: 1:000b7950-000b7b93 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8950
// PopupMenuWindow::`scalar deleting destructor'



// Contribution: 1:000b7ba0-000b7c08 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8ba0
// allocate



// Contribution: 1:000b7c10-000b803e Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8c10
// list<basic_string<char>>::merge



// Contribution: 2:000029c0-00002a8b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for BoxWindow @ 0x005919c0
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: BoxWindow::`scalar deleting destructor' @ 0x004b8250
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: BoxWindow::DrawSelf @ 0x004acb86
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: BoxWindow::SetColors @ 0x004acbea
//   50: BoxWindow::SetOutlineAndFillDrawing @ 0x004acc19
//   51 entries



// Contribution: 2:00002a90-00002b77 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for TextWindow @ 0x00591a90
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: TextWindow::`scalar deleting destructor' @ 0x004b8290
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: TextWindow::DrawSelf @ 0x004ad9a4
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: TextWindow::SetWindowTitle @ 0x004ad7b6
//   50: TextWindow::SetWindowTitle @ 0x004ad775
//   51: TextWindow::SetFontCharacteristics @ 0x004adba4
//   52: TextWindow::SetTextDrawStyle @ 0x004adbe5
//   53: TextWindow::SetTextColor @ 0x004add6f
//   54: TextWindow::SetBackgroundDrawing @ 0x004adb83
//   55: TextWindow::LoadStrings @ 0x004ad01e
//   56: TextWindow::FitWindowToText @ 0x004adc18
//   57: TextWindow::ResizeWindowForExactLineHeights @ 0x004adda1
//   58 entries



// Contribution: 2:00002b78-00002c53 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ButtonWindow @ 0x00591b78
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ButtonWindow::Initialize @ 0x004ae385
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: ButtonWindow::ComposeSelf @ 0x004aeb6b
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: ButtonWindow::DoCursorDown @ 0x004aec47
//   36: ButtonWindow::DoCursorUp @ 0x004aec9a
//   37: ButtonWindow::DoCursorMove @ 0x004aed4d
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ButtonWindow::`scalar deleting destructor' @ 0x004b82e0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: ButtonWindow::GetImageCount @ 0x004ae3fb
//   50: ButtonWindow::SetState @ 0x004aeace
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55 entries



// Contribution: 2:00002c58-00002d33 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CheckBoxWindow @ 0x00591c58
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ButtonWindow::Initialize @ 0x004ae385
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: CheckBoxWindow::ComposeSelf @ 0x004af5c1
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: CheckBoxWindow::DoCursorDown @ 0x004af74d
//   36: CheckBoxWindow::DoCursorUp @ 0x004af7bd
//   37: CheckBoxWindow::DoCursorMove @ 0x004af7da
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CheckBoxWindow::`scalar deleting destructor' @ 0x004b8320
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: CheckBoxWindow::GetImageCount @ 0x004af5a6
//   50: CheckBoxWindow::SetState @ 0x004af6ab
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55 entries



// Contribution: 2:00002d38-00002e1b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for RadioButtonWindow @ 0x00591d38
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: RadioButtonWindow::Initialize @ 0x004afd2a
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: RadioButtonWindow::ComposeSelf @ 0x004afd6a
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: RadioButtonWindow::DoCursorDown @ 0x004affd4
//   36: RadioButtonWindow::DoCursorUp @ 0x004b0049
//   37: RadioButtonWindow::DoCursorMove @ 0x004b0066
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: RadioButtonWindow::`scalar deleting destructor' @ 0x004b8370
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: RadioButtonWindow::GetImageCount @ 0x004afe54
//   50: RadioButtonWindow::SetState @ 0x004afee3
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55: RadioButtonWindow::AddToGroup @ 0x004afe6f
//   56: RadioButtonWindow::RemoveFromGroup @ 0x004afe9f
//   57 entries



// Contribution: 2:00002e20-00002ee3 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ButtonGroup @ 0x00591e20
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ButtonGroup::`scalar deleting destructor' @ 0x004b83b0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00002ee8-00002fbf Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SliderWindow @ 0x00591ee8
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: SliderWindow::Initialize @ 0x004b1adc
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: SliderWindow::CreateImage @ 0x004b1b65
//   05: SliderWindow::DestroyImage @ 0x004b1e64
//   06: SliderWindow::ComposeSelf @ 0x004b1f45
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: SliderWindow::MoveWindow @ 0x004b1ed9
//   14: SliderWindow::SetWidthAndHeight @ 0x004b1f0f
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: SliderWindow::DoCursorDown @ 0x004b2202
//   36: SliderWindow::DoCursorUp @ 0x004b226b
//   37: SliderWindow::DoCursorMove @ 0x004b22ef
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SliderWindow::`scalar deleting destructor' @ 0x004b8590
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: SliderWindow::ConvertCursorPositionToValue @ 0x004b2361
//   50: SliderWindow::CalculateThumbPosition @ 0x004b2560
//   51: SliderWindow::CalculateAllMetrics @ 0x004b24a0
//   52: SliderWindow::GetThumbWidth @ 0x004b28b0
//   53: SliderWindow::GetThumbHeight @ 0x004b28d4
//   54 entries



// Contribution: 2:00002fc0-000030c7 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ScrollBarWindow @ 0x00591fc0
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ScrollBarWindow::Initialize @ 0x004b300d
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: SliderWindow::CreateImage @ 0x004b1b65
//   05: SliderWindow::DestroyImage @ 0x004b1e64
//   06: ScrollBarWindow::ComposeSelf @ 0x004b30ae
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: SliderWindow::MoveWindow @ 0x004b1ed9
//   14: SliderWindow::SetWidthAndHeight @ 0x004b1f0f
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: ScrollBarWindow::DoCursorDown @ 0x004b35dd
//   36: ScrollBarWindow::DoCursorUp @ 0x004b3850
//   37: ScrollBarWindow::DoCursorMove @ 0x004b38e4
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ScrollBarWindow::`scalar deleting destructor' @ 0x004b85d0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: SliderWindow::ConvertCursorPositionToValue @ 0x004b2361
//   50: SliderWindow::CalculateThumbPosition @ 0x004b2560
//   51: ScrollBarWindow::CalculateAllMetrics @ 0x004b3f73
//   52: ScrollBarWindow::GetThumbWidth @ 0x004b404b
//   53: ScrollBarWindow::GetThumbHeight @ 0x004b4077
//   54: ScrollBarWindow::SetLineAndPageCount @ 0x004b3bac
//   55: ScrollBarWindow::MoveLinePrevious @ 0x004b39d0
//   56: ScrollBarWindow::MoveLineNext @ 0x004b3a46
//   57: ScrollBarWindow::MovePagePrevious @ 0x004b3abe
//   58: ScrollBarWindow::MovePageNext @ 0x004b3b34
//   59: ScrollBarWindow::DoCursorPositionHitTest @ 0x004b3db8
//   60: ScrollBarWindow::GetPrevNextButtonWidth @ 0x004b409b
//   61: ScrollBarWindow::GetPrevNextButtonHeight @ 0x004b40bf
//   62: ScrollBarWindow::GetCurrentLine @ 0x004b3c48
//   63: ScrollBarWindow::GetValueOfGivenLine @ 0x004b3ca4
//   64: ScrollBarWindow::GetCurrentPage @ 0x004b3d00
//   65: ScrollBarWindow::GetValueOfGivenPage @ 0x004b3d5c
//   66 entries



// Contribution: 2:000030c8-0000321f Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ListBoxWindow @ 0x005920c8
//   00: ListBoxWindow::DoMessage @ 0x004b4822
//   01: ListBoxWindow::Initialize @ 0x004b47f7
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: ListBoxWindow::DoCharacter @ 0x004b6aaf
//   33: ListBoxWindow::DoKeyDown @ 0x004b6ac9
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: ListBoxWindow::DoCursorDown @ 0x004b6b8e
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ListBoxWindow::`scalar deleting destructor' @ 0x004b8620
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: ListBoxWindow::DrawSelf @ 0x004b4a9a
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: ListBoxWindow::RemoveString @ 0x004b5262
//   50: ListBoxWindow::RemoveString @ 0x004b520e
//   51: ListBoxWindow::RemoveAllStrings @ 0x004b5347
//   52: ListBoxWindow::InsertString @ 0x004b55ee
//   53: ListBoxWindow::InsertString @ 0x004b550e
//   54: ListBoxWindow::ResizeWindowForExactLineHeights @ 0x004b4921
//   55: ListBoxWindow::SetSelection @ 0x004b6c11
//   56: ListBoxWindow::GetSelection @ 0x004b6d4e
//   57: ListBoxWindow::SetShouldSort @ 0x004b73e9
//   58: ListBoxWindow::Sort @ 0x004b742a
//   59: ListBoxWindow::MoveLineUp @ 0x004b6ffd
//   60: ListBoxWindow::MoveLineDown @ 0x004b706a
//   61: ListBoxWindow::ScrollToStart @ 0x004b6f47
//   62: ListBoxWindow::ScrollToEnd @ 0x004b6f85
//   63: ListBoxWindow::ScrollPageUp @ 0x004b70da
//   64: ListBoxWindow::ScrollPageDown @ 0x004b714e
//   65: ListBoxWindow::IsIndexInView @ 0x004b6d6d
//   66: ListBoxWindow::PutIndexInView @ 0x004b6dbe
//   67: ListBoxWindow::ScrollToFirstLetter @ 0x004b71f4
//   68: ListBoxWindow::SetIndexOfTopLine @ 0x004b6e56
//   69: ListBoxWindow::GetLineCount @ 0x004b78e5
//   70: ListBoxWindow::GetIndexOfTopLine @ 0x004b7906
//   71: ListBoxWindow::SetBackgroundDrawing @ 0x004b49b6
//   72: ListBoxWindow::SetBackgroundPaletteIndex @ 0x004b4a11
//   73: ListBoxWindow::SetTextColor @ 0x004b4a55
//   74: ListBoxWindow::SetFontCharacteristics @ 0x004b48d2
//   75: ListBoxWindow::AddScrollBar @ 0x004b7925
//   76: ListBoxWindow::RemoveScrollBar @ 0x004b7a29
//   77: ListBoxWindow::CalculateAllMetrics @ 0x004b4867
//   78: ListBoxWindow::GetStringAddressFromIndex @ 0x004b5e21
//   79: ListBoxWindow::GetStringFromIndex @ 0x004b5edc
//   80: ListBoxWindow::GetIndexFromString @ 0x004b60de
//   81: ListBoxWindow::RemoveStringAtIndex @ 0x004b6266
//   82: ListBoxWindow::InsertStringAtIndex @ 0x004b6585
//   83: ListBoxWindow::ModifyString @ 0x004b5c06
//   84: ListBoxWindow::SetScrollBarValue @ 0x004b7a99
//   85: ListBoxWindow::SetScrollBarSizes @ 0x004b7b61
//   86 entries



// Contribution: 2:00003220-0000337b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for PopupMenuWindow @ 0x00592220
//   00: ListBoxWindow::DoMessage @ 0x004b4822
//   01: PopupMenuWindow::Initialize @ 0x004b7c65
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: ListBoxWindow::DoCharacter @ 0x004b6aaf
//   33: PopupMenuWindow::DoKeyDown @ 0x004b7cc1
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: PopupMenuWindow::DoCursorDown @ 0x004b7d92
//   36: PopupMenuWindow::DoCursorUp @ 0x004b7e63
//   37: PopupMenuWindow::DoCursorMove @ 0x004b7edf
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: PopupMenuWindow::`scalar deleting destructor' @ 0x004b8950
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: ListBoxWindow::DrawSelf @ 0x004b4a9a
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: ListBoxWindow::RemoveString @ 0x004b5262
//   50: ListBoxWindow::RemoveString @ 0x004b520e
//   51: ListBoxWindow::RemoveAllStrings @ 0x004b5347
//   52: ListBoxWindow::InsertString @ 0x004b55ee
//   53: ListBoxWindow::InsertString @ 0x004b550e
//   54: ListBoxWindow::ResizeWindowForExactLineHeights @ 0x004b4921
//   55: ListBoxWindow::SetSelection @ 0x004b6c11
//   56: ListBoxWindow::GetSelection @ 0x004b6d4e
//   57: ListBoxWindow::SetShouldSort @ 0x004b73e9
//   58: ListBoxWindow::Sort @ 0x004b742a
//   59: ListBoxWindow::MoveLineUp @ 0x004b6ffd
//   60: ListBoxWindow::MoveLineDown @ 0x004b706a
//   61: ListBoxWindow::ScrollToStart @ 0x004b6f47
//   62: ListBoxWindow::ScrollToEnd @ 0x004b6f85
//   63: ListBoxWindow::ScrollPageUp @ 0x004b70da
//   64: ListBoxWindow::ScrollPageDown @ 0x004b714e
//   65: ListBoxWindow::IsIndexInView @ 0x004b6d6d
//   66: ListBoxWindow::PutIndexInView @ 0x004b6dbe
//   67: ListBoxWindow::ScrollToFirstLetter @ 0x004b71f4
//   68: ListBoxWindow::SetIndexOfTopLine @ 0x004b6e56
//   69: ListBoxWindow::GetLineCount @ 0x004b78e5
//   70: ListBoxWindow::GetIndexOfTopLine @ 0x004b7906
//   71: ListBoxWindow::SetBackgroundDrawing @ 0x004b49b6
//   72: ListBoxWindow::SetBackgroundPaletteIndex @ 0x004b4a11
//   73: ListBoxWindow::SetTextColor @ 0x004b4a55
//   74: ListBoxWindow::SetFontCharacteristics @ 0x004b48d2
//   75: ListBoxWindow::AddScrollBar @ 0x004b7925
//   76: ListBoxWindow::RemoveScrollBar @ 0x004b7a29
//   77: ListBoxWindow::CalculateAllMetrics @ 0x004b4867
//   78: ListBoxWindow::GetStringAddressFromIndex @ 0x004b5e21
//   79: ListBoxWindow::GetStringFromIndex @ 0x004b5edc
//   80: ListBoxWindow::GetIndexFromString @ 0x004b60de
//   81: PopupMenuWindow::RemoveStringAtIndex @ 0x004b7f18
//   82: PopupMenuWindow::InsertStringAtIndex @ 0x004b7f59
//   83: ListBoxWindow::ModifyString @ 0x004b5c06
//   84: ListBoxWindow::SetScrollBarValue @ 0x004b7a99
//   85: ListBoxWindow::SetScrollBarSizes @ 0x004b7b61
//   86: PopupMenuWindow::ResizeWindowToFitMenuItems @ 0x004b7f9e
//   87 entries



// Contribution: 3:00003ba0-00003c2e Module: 5, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059aba0
char * SZ_DEFAULT_BUTTON_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aba4
char * SZ_DEFAULT_CHECKBOX_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aba8
char * SZ_DEFAULT_RADIO_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059abac
char * SZ_SLIDER_THUMB_IMAGE_V_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059abb0
char * SZ_SLIDER_THUMB_IMAGE_H_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059abb4
char * SZ_SLIDER_BACKGROUND_IMAGE_V_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059abb8
char * SZ_SLIDER_BACKGROUND_IMAGE_H_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059abbc
char * SZ_DEFAULT_SCROLLBAR_SLIDER_IMAGE_FILE_NAME = { 0 /* todo */ };



// Contribution: 3:00003c30-00003c33 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac30
uint32_t list<RadioButtonWindow *>::number_of_lists = 0;



// Contribution: 3:00003c34-00003c37 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac34
/*packed*/ struct list<RadioButtonWindow *>::list_node *list<RadioButtonWindow *>::last = { 0 /* todo */ };



// Contribution: 3:00003c38-00003c3b Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac38
/*packed*/ struct list<RadioButtonWindow *>::list_node *list<RadioButtonWindow *>::next_avail = { 0 /* todo */ };



// Contribution: 3:00003c3c-00003c3f Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac3c
/*packed*/ struct list<RadioButtonWindow *>::list_node *list<RadioButtonWindow *>::free_list = { 0 /* todo */ };



// Contribution: 3:00003c40-00003c43 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac40
/*packed*/ struct list<RadioButtonWindow *>::list_node_buffer *list<RadioButtonWindow *>::buffer_list = { 0 /* todo */ };

