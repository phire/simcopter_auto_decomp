// Module: Controls.obj
// Source: C:\Copter\source\sparkal\Controls.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class BoxWindow (forward reference);
class BoxWindow : public GraphicWindow
{
public:
	void BoxWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void BoxWindow();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro void SetColors(struct SparkalColor&, int32_t);
	// vtable: 200
	intro void SetOutlineAndFillDrawing(int32_t, int32_t);
protected:
	int32_t bDrawOutline;
	int32_t bDrawFill;
	struct SparkalColor colorOutline;
	int32_t nPaletteIndexFill;
};

// Type: void;
// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;
// Type: class GraphicWindow (forward reference);
// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class TextWindow (forward reference);
public TextWindow
// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: long;
// Type: unsigned long;
// Type: class ButtonWindow (forward reference);
public ButtonWindow
// Type: char *;
// Type: class MFont (forward reference);
class MFont{
public:
	class basic_string<char> sName;
	unsigned long lHeight;
	unsigned long lWidth;
	unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const class MFont&);
	void MFont();
	void ~MFont();
	class MFont& operator=(const class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	// vtable: 0
	intro int32_t CreateFontA();
	// vtable: 4
	intro void DestroyFont();
	void * __ptr32 operator void *();
protected:
	void * __ptr32 hFont;
};

// Type: char[64];
// Type: class CheckBoxWindow (forward reference);
public CheckBoxWindow
// Type: class RadioButtonWindow (forward reference);
public RadioButtonWindow
// Type: class ButtonGroup (forward reference);
// Type: class list<RadioButtonWindow *>::iterator;
class list<RadioButtonWindow *>::iterator : public bidirectional_iterator<RadioButtonWindow *,int>
{
protected:
	struct list<RadioButtonWindow *>::list_node* node;
public:
	void list<RadioButtonWindow *>::iterator();
protected:
	void list<RadioButtonWindow *>::iterator(struct list<RadioButtonWindow *>::list_node*);
public:
	int32_t operator==(const class list<RadioButtonWindow *>::iterator&);
	class RadioButtonWindow*& operator*();
	class list<RadioButtonWindow *>::iterator list<RadioButtonWindow *>::iterator(int32_t);
	class list<RadioButtonWindow *>::iterator& list<RadioButtonWindow *>::iterator();
	class list<RadioButtonWindow *>::iterator list<RadioButtonWindow *>::iterator(int32_t);
	class list<RadioButtonWindow *>::iterator& list<RadioButtonWindow *>::iterator();
};

// Type: class SliderWindow (forward reference);
public SliderWindow
// Type: enum SliderWindow::SliderWindowDirection;
// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class ScrollBarWindow (forward reference);
public ScrollBarWindow
// Type: enum ScrollBarWindow::ScrollHitTestResult;
// Type: class ListBoxWindow (forward reference);
public ListBoxWindow
// Type: void * __ptr32;
// Type: class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void list<basic_string<char>>::iterator();
protected:
	void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
};

// Type: char;
// Type: class PopupMenuWindow (forward reference);
public PopupMenuWindow
// Type: uint32_t;
// Type: class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{
	using void_pointer = void * __ptr32;
	class list<basic_string<char>>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class basic_string<char> data;
	};
protected:
	static class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static class allocator<basic_string<char>> value_allocator;
	using value_type = class basic_string<char>;
	using value_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using list_node_allocator_type = class allocator<list<basic_string<char>>::list_node>;
	using link_type = struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<basic_string<char>>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<basic_string<char>>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = struct list<basic_string<char>>::list_node_buffer*;
protected:
	static class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static struct list<basic_string<char>>::list_node_buffer* buffer_list;
	static struct list<basic_string<char>>::list_node* free_list;
	static struct list<basic_string<char>>::list_node* next_avail;
	static struct list<basic_string<char>>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<basic_string<char>>::list_node* get_node();
	void put_node(struct list<basic_string<char>>::list_node*);
	struct list<basic_string<char>>::list_node* node;
	uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::iterator();
	protected:
		void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::iterator&);
		class basic_string<char>& operator*();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::const_iterator(const class list<basic_string<char>>::iterator&);
		void list<basic_string<char>>::const_iterator();
	protected:
		void list<basic_string<char>>::const_iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::const_iterator&);
		const class basic_string<char>& operator*();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const class list<basic_string<char>>&);
	void list<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	void swap(class list<basic_string<char>>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::const_iterator, class list<basic_string<char>>::const_iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	class list<basic_string<char>>::iterator list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>&);
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	class list<basic_string<char>>& operator=(const class list<basic_string<char>>&);
protected:
	void transfer(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
public:
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&);
	void remove(const class basic_string<char>&);
	void unique();
	void merge(class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: struct list<basic_string<char>>::list_node_buffer (forward reference);


// Contribution: 1:000aba90-000b7247 Module: 5, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004aca90
void BoxWindow::BoxWindow() {
// LINE 26:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        jmp    near ptr 0x004ACABD;
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5919C0;
// LINE 29:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7D], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7D];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], al;
// LINE 30:
	__asm        jmp    near ptr 0x004ACAF8;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004acb00
void BoxWindow::BoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 41:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        jmp    near ptr 0x004ACB41;
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5919C0;
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7D], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7D];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], al;
// LINE 45:
	__asm        jmp    near ptr 0x004ACB7C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004acb86
int32_t BoxWindow::DrawSelf() {
// LINE 51:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 52:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004ACBBC;
// LINE 53:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 54:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x004ACBDB;
// LINE 55:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 56:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ACBE5;
// LINE 57:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004acbea
void BoxWindow::SetColors(struct SparkalColor& colorNewOutline, int32_t nNewPaletteIndexFill) {
// LINE 63:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 64:
	__asm        mov    eax, colorNewOutline;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 65:
	__asm        mov    eax, nNewPaletteIndexFill;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 66:
	__asm        jmp    near ptr 0x004ACC12;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004acc19
void BoxWindow::SetOutlineAndFillDrawing(int32_t bNewDrawOutline, int32_t bNewDrawFill) {
// LINE 72:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 73:
	__asm        mov    eax, bNewDrawOutline;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 74:
	__asm        mov    eax, bNewDrawFill;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 75:
	__asm        jmp    near ptr 0x004ACC3C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004acc43
void TextWindow::TextWindow() {
// LINE 95:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        jmp    near ptr 0x004ACC5C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591A90;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 99:
	__asm        mov    al, ds:[0x606968];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x79], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x79];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7A], al;
// LINE 100:
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 101:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 103:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 104:
	__asm        jmp    near ptr 0x004ACCDE;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004acce6
void TextWindow::TextWindow(class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 113:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        jmp    near ptr 0x004ACD13;
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591A90;
// LINE 114:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x79], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x79];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7A], al;
// LINE 118:
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 119:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 120:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 121:
	__asm        mov    ecx, this;
	__asm        call   0x004AD01E;
// LINE 122:
	__asm        jmp    near ptr 0x004ACD98;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004acda2
void TextWindow::TextWindow(class MRect& rectNewWindow, int32_t nNewID, const class basic_string<char>& sNewWindowTitle, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 131:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        jmp    near ptr 0x004ACDCF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591A90;
// LINE 132:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 135:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x79], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x79];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7A], al;
// LINE 136:
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 138:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 139:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     near ptr 0x004ACFF6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004ACECF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004ACECF;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004ACEAF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004ACEB4;
	__asm        jmp    near ptr 0x004ACEB9;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ACECA;
	__asm        jmp    near ptr 0x004ACECF;
	__asm        jmp    near ptr 0x004ACED4;
	__asm        jmp    near ptr 0x004ACED9;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004ACF03;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004ACFF6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004ACFEC;
	__asm        jmp    near ptr 0x004ACF1F;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004ACFC6;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004ACF66;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004ACF8B;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004ACF97;
	__asm        jmp    near ptr 0x004ACF97;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004ACF97;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ACFC1;
	__asm        jmp    near ptr 0x004ACFCF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004ACFDE;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004ACFF6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x004ACFFB;
// LINE 140:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    ecx, 0x84;
	__asm        call   dword ptr [eax];
// LINE 141:
	__asm        jmp    near ptr 0x004AD014;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004ad01e
void TextWindow::LoadStrings() {
	int32_t nFullStringID;

// LINE 149:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1070;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 152:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 153:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        cmp    dword ptr [ebp-0x1008], 0;
	__asm        jne    near ptr 0x004AD4B1;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        jmp    near ptr 0x004AD0AD;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AD107;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1018], eax;
	__asm        mov    eax, [ebp-0x1018];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD0F8;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD107;
	__asm        jmp    near ptr 0x004AD10C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AD149;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x004AD206;
	__asm        jmp    near ptr 0x004AD131;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AD206;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        je     near ptr 0x004AD18A;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1010];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x100C], eax;
	__asm        jmp    near ptr 0x004AD194;
	__asm        mov    dword ptr [ebp-0x100C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AD1ED;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        mov    [ebp-0x101C], eax;
	__asm        cmp    dword ptr [ebp-0x101C], 0;
	__asm        je     near ptr 0x004AD1ED;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x101C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004AD1ED;
	__asm        jmp    near ptr 0x004AD1F2;
	__asm        mov    eax, [ebp-0x100C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004AD24B;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x004AD24B;
	__asm        jmp    near ptr 0x004AD218;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1014], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1014];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AD24B;
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AD262;
	__asm        jmp    near ptr 0x004AD267;
	__asm        jmp    near ptr 0x004AD26C;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        jmp    near ptr 0x004AD284;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1044];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004AD2D9;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1038], eax;
	__asm        mov    eax, [ebp-0x1038];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD2CA;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD2D9;
	__asm        jmp    near ptr 0x004AD2DE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AD31F;
	__asm        jmp    near ptr 0x004AD2F6;
	__asm        jmp    near ptr 0x004AD2FB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1044];
	__asm        jae    near ptr 0x004AD43C;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x102C], eax;
	__asm        cmp    dword ptr [ebp-0x102C], 0;
	__asm        je     near ptr 0x004AD3C5;
	__asm        jmp    near ptr 0x004AD341;
	__asm        jmp    near ptr 0x004AD346;
	__asm        jmp    near ptr 0x004AD34B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AD379;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x004AD388;
	__asm        jmp    near ptr 0x004AD388;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        jmp    near ptr 0x004AD388;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x102C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1028], eax;
	__asm        jmp    near ptr 0x004AD3CF;
	__asm        mov    dword ptr [ebp-0x1028], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AD428;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        mov    [ebp-0x103C], eax;
	__asm        cmp    dword ptr [ebp-0x103C], 0;
	__asm        je     near ptr 0x004AD428;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x103C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004AD428;
	__asm        jmp    near ptr 0x004AD42D;
	__asm        mov    eax, [ebp-0x1028];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x004AD490;
	__asm        jmp    near ptr 0x004AD44E;
	__asm        jmp    near ptr 0x004AD453;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1030], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1030];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AD490;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AD4A7;
	__asm        jmp    near ptr 0x004AD4AC;
	__asm        jmp    near ptr 0x004AD76B;
	__asm        jmp    near ptr 0x004AD4B6;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AD510;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD501;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD510;
	__asm        jmp    near ptr 0x004AD515;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AD552;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x004AD705;
	__asm        jmp    near ptr 0x004AD53A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x106C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AD705;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x004AD672;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AD5B4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD5A5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD5B4;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AD643;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1060], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AD63E;
	__asm        jmp    near ptr 0x004AD64F;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AD661;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x004AD67C;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AD6EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    [ebp-0x1058], eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x004AD6EC;
	__asm        mov    ecx, [ebp-0x1058];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004AD6D3;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD6E7;
	__asm        jmp    near ptr 0x004AD6EC;
	__asm        jmp    near ptr 0x004AD6F1;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004AD74A;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x004AD74A;
	__asm        jmp    near ptr 0x004AD717;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AD74A;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AD761;
	__asm        jmp    near ptr 0x004AD766;
	__asm        jmp    near ptr 0x004AD76B;
// LINE 154:
	__asm        jmp    near ptr 0x004AD770;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ad775
void TextWindow::SetWindowTitle(int32_t nNewWindowTitleTextID) {
// LINE 159:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 160:
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 161:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 162:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 163:
	__asm        jmp    near ptr 0x004AD7AF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004ad7b6
void TextWindow::SetWindowTitle(const class basic_string<char>& sNewWindowTitle) {
// LINE 168:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 169:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     near ptr 0x004AD984;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AD85D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AD85D;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AD83D;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AD842;
	__asm        jmp    near ptr 0x004AD847;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AD858;
	__asm        jmp    near ptr 0x004AD85D;
	__asm        jmp    near ptr 0x004AD862;
	__asm        jmp    near ptr 0x004AD867;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004AD891;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004AD984;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004AD97A;
	__asm        jmp    near ptr 0x004AD8AD;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AD954;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004AD8F4;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AD919;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004AD925;
	__asm        jmp    near ptr 0x004AD925;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004AD925;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AD94F;
	__asm        jmp    near ptr 0x004AD95D;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AD96C;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004AD984;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x004AD989;
// LINE 170:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 171:
	__asm        jmp    near ptr 0x004AD99D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004ad9a4
int32_t TextWindow::DrawSelf() {
	class MRect rectText;

// LINE 178:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 179:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        lea    ecx, rectText.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x004AD9FB;
// LINE 182:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 183:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x004ADA15;
// LINE 184:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004ADA2F;
// LINE 186:
	__asm        add    rectText.left, 5;
// LINE 187:
	__asm        inc    rectText.top;
// LINE 189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004ADA5E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ADA63;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004ADA81;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004ADAFA;
	__asm        jmp    near ptr 0x004ADA96;
	__asm        jmp    near ptr 0x004ADA9B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004ADAC0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004ADACC;
	__asm        jmp    near ptr 0x004ADACC;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x004ADACC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ADAFA;
	__asm        jmp    near ptr 0x004ADAFF;
	__asm        mov    byte ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x004ADB08;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004ADB13;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004ADB34;
	__asm        jmp    near ptr 0x004ADB39;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 190:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ADB7E;
// LINE 191:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004adb83
void TextWindow::SetBackgroundDrawing(int32_t bNewDrawOpaqueBackground) {
// LINE 198:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 199:
	__asm        mov    eax, bNewDrawOpaqueBackground;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 200:
	__asm        jmp    near ptr 0x004ADB9D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004adba4
void TextWindow::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
// LINE 206:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 207:
	__asm        mov    eax, lNewAttributes;
	__asm        push   eax;
	__asm        mov    eax, lNewWidth;
	__asm        push   eax;
	__asm        mov    eax, lNewHeight;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x004A015D;
// LINE 208:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 209:
	__asm        jmp    near ptr 0x004ADBDE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004adbe5
void TextWindow::SetTextDrawStyle(unsigned long nNewTextDrawStyle) {
// LINE 215:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 216:
	__asm        mov    eax, nNewTextDrawStyle;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
// LINE 217:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 218:
	__asm        jmp    near ptr 0x004ADC11;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004adc18
void TextWindow::FitWindowToText() {
	long lHeight;
	long lWidth;

// LINE 223:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 227:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004ADC4C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ADC51;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004ADC6F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004ADCE8;
	__asm        jmp    near ptr 0x004ADC84;
	__asm        jmp    near ptr 0x004ADC89;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004ADCAE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004ADCBA;
	__asm        jmp    near ptr 0x004ADCBA;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x004ADCBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ADCE8;
	__asm        jmp    near ptr 0x004ADCED;
	__asm        mov    byte ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x004ADCF6;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004ADD01;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004ADD22;
	__asm        jmp    near ptr 0x004ADD27;
	__asm        lea    eax, lHeight;
	__asm        push   eax;
	__asm        lea    eax, lWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x004A02B1;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004ADD65;
// LINE 228:
	__asm        mov    eax, lHeight;
	__asm        add    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, lWidth;
	__asm        add    eax, 7;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 230:
	__asm        jmp    near ptr 0x004ADD6A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004add6f
void TextWindow::SetTextColor(const struct SparkalColor& colorNewFont) {
// LINE 236:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 237:
	__asm        mov    eax, colorNewFont;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 238:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 239:
	__asm        jmp    near ptr 0x004ADD9A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004adda1
int32_t TextWindow::ResizeWindowForExactLineHeights() {
	long lVisibleLines;
	long lOriginalHeight;
	long lLineHeight;
	long lTextWidth;
	long lFixedHeight;

// LINE 249:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 252:
	__asm        mov    lVisibleLines, 0;
// LINE 253:
	__asm        mov    lLineHeight, 1;
// LINE 254:
	__asm        mov    lTextWidth, 1;
// LINE 256:
	__asm        lea    eax, lLineHeight;
	__asm        push   eax;
	__asm        lea    eax, lTextWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x004A02B1;
// LINE 257:
	__asm        jmp    near ptr 0x004ADDDF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    lOriginalHeight, eax;
// LINE 258:
	__asm        mov    eax, lOriginalHeight;
	__asm        cdq;
	__asm        idiv   lLineHeight;
	__asm        mov    lVisibleLines, eax;
// LINE 259:
	__asm        mov    eax, lLineHeight;
	__asm        imul   eax, lVisibleLines;
	__asm        mov    lFixedHeight, eax;
// LINE 260:
	__asm        mov    eax, lOriginalHeight;
	__asm        cmp    lFixedHeight, eax;
	__asm        je     near ptr 0x004ADE1F;
// LINE 261:
	__asm        mov    eax, lFixedHeight;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 262:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 263:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ADE38;
// LINE 264:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ade3d
void ButtonWindow::ButtonWindow() {
// LINE 292:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        jmp    near ptr 0x004ADE74;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 2;
	__asm        jmp    near ptr 0x004ADE93;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8D], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8E], 0;
	__asm        jmp    near ptr 0x004ADEC3;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x91], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x92], 0;
	__asm        jmp    near ptr 0x004ADEE6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591B78;
	__asm        mov    eax, ds:[0x59ABA0];
	__asm        mov    [ebp-0x20], eax;
// LINE 293:
	__asm        jmp    near ptr 0x004ADEFC;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004ADF47;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ADF38;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ADF47;
	__asm        jmp    near ptr 0x004ADF4C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004ADF7D;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004AE007;
	__asm        jmp    near ptr 0x004ADF6B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AE007;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004ADFAC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004ADFB3;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004ADFF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004ADFF4;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004ADFF4;
	__asm        jmp    near ptr 0x004ADFF9;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AE03A;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004AE03A;
	__asm        jmp    near ptr 0x004AE016;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE03A;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AE04B;
	__asm        jmp    near ptr 0x004AE050;
// LINE 294:
	__asm        jmp    near ptr 0x004AE055;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ae05d
void ButtonWindow::ButtonWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 306:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        jmp    near ptr 0x004AE0A8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 2;
	__asm        jmp    near ptr 0x004AE0C7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8D], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x8E], 0;
	__asm        jmp    near ptr 0x004AE0F7;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x91], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x92], 0;
	__asm        jmp    near ptr 0x004AE11A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591B78;
// LINE 307:
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x004AE250;
// LINE 308:
	__asm        jmp    near ptr 0x004AE132;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AE17D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE16E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE17D;
	__asm        jmp    near ptr 0x004AE182;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AE1B3;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004AE202;
	__asm        jmp    near ptr 0x004AE1A1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AE202;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AE1E2;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004AE1E9;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AE235;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004AE235;
	__asm        jmp    near ptr 0x004AE211;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE235;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AE246;
	__asm        jmp    near ptr 0x004AE24B;
// LINE 309:
	__asm        jmp    near ptr 0x004AE376;
// LINE 310:
	__asm        mov    eax, ds:[0x59ABA0];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004AE25D;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AE2A8;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE299;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE2A8;
	__asm        jmp    near ptr 0x004AE2AD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AE2DE;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004AE32D;
	__asm        jmp    near ptr 0x004AE2CC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AE32D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004AE30D;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004AE314;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AE360;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004AE360;
	__asm        jmp    near ptr 0x004AE33C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE360;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AE371;
	__asm        jmp    near ptr 0x004AE376;
// LINE 311:
	__asm        jmp    near ptr 0x004AE37B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004ae385
int32_t ButtonWindow::Initialize() {
// LINE 318:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 319:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 320:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x004AE3AE;
// LINE 321:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ae3b3
void ButtonWindow::SetTextColor(const struct SparkalColor* colorNewFont, const struct SparkalColor* colorNewFontHighlighted) {
// LINE 328:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 329:
	__asm        cmp    colorNewFont, 0;
	__asm        je     near ptr 0x004AE3D7;
// LINE 330:
	__asm        mov    eax, colorNewFont;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 331:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     near ptr 0x004AE3EF;
// LINE 332:
	__asm        mov    eax, colorNewFontHighlighted;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
// LINE 333:
	__asm        jmp    near ptr 0x004AE3F4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004ae3fb
int32_t ButtonWindow::GetImageCount() {
// LINE 339:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 340:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x004AE411;
// LINE 341:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ae416
int32_t ButtonWindow::CreateImage(int32_t __formal) {
	int32_t nReturnValue;
	class MFont* fontText;
	char[64] szTypeface;
	int32_t nWindowWidth;
	int32_t nWindowHeight;
	class MRect rectCurrent;

// LINE 348:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xD8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 354:
	__asm        jmp    near ptr 0x004AE42D;
	__asm        jmp    near ptr 0x004AE432;
// LINE 356:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
	__asm        mov    nReturnValue, eax;
// LINE 357:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x004AEABF;
// LINE 359:
	__asm        jmp    near ptr 0x004AE451;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x40];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        mov    ecx, eax;
	__asm        mov    eax, [ebx+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x18], ecx;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    nWindowWidth, eax;
	__asm        jmp    near ptr 0x004AE4A4;
// LINE 361:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    nWindowHeight, eax;
	__asm        jmp    near ptr 0x004AE4BE;
// LINE 362:
	__asm        mov    eax, nWindowHeight;
	__asm        sub    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 364:
	__asm        jmp    near ptr 0x004AE4D2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AEABF;
// LINE 365:
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   0x0042CE0E;
	__asm        add    esp, 0xC;
// LINE 366:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004AE530;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x0049F937;
	__asm        mov    fontText, eax;
	__asm        jmp    near ptr 0x004AE537;
	__asm        mov    fontText, 0;
// LINE 367:
	__asm        mov    rectCurrent.top, 5;
// LINE 368:
	__asm        mov    eax, nWindowHeight;
	__asm        mov    rectCurrent.bottom, eax;
// LINE 369:
	__asm        mov    rectCurrent.left, 0;
// LINE 370:
	__asm        mov    eax, nWindowWidth;
	__asm        mov    rectCurrent.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x70], eax;
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004AE574;
// LINE 376:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AE5A2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE5A7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004AE5CB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE668;
	__asm        jmp    near ptr 0x004AE5E3;
	__asm        jmp    near ptr 0x004AE5E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE616;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004AE625;
	__asm        jmp    near ptr 0x004AE625;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    near ptr 0x004AE625;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE668;
	__asm        jmp    near ptr 0x004AE66D;
	__asm        mov    byte ptr [ebp-0x7C], 0;
	__asm        jmp    near ptr 0x004AE676;
	__asm        lea    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004AE684;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x88];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004AE6B4;
	__asm        jmp    near ptr 0x004AE6B9;
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 379:
	__asm        mov    eax, nWindowWidth;
	__asm        mov    rectCurrent.left, eax;
// LINE 380:
	__asm        mov    eax, rectCurrent.left;
	__asm        add    eax, nWindowWidth;
	__asm        mov    rectCurrent.right, eax;
// LINE 383:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AE739;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE73E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004AE762;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE7FF;
	__asm        jmp    near ptr 0x004AE77A;
	__asm        jmp    near ptr 0x004AE77F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE7AD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004AE7BC;
	__asm        jmp    near ptr 0x004AE7BC;
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    near ptr 0x004AE7BC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE7FF;
	__asm        jmp    near ptr 0x004AE804;
	__asm        mov    byte ptr [ebp-0x9C], 0;
	__asm        jmp    near ptr 0x004AE810;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004AE821;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004AE851;
	__asm        jmp    near ptr 0x004AE856;
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 386:
	__asm        mov    eax, nWindowWidth;
	__asm        add    eax, eax;
	__asm        mov    rectCurrent.left, eax;
// LINE 387:
	__asm        mov    eax, rectCurrent.left;
	__asm        add    eax, nWindowWidth;
	__asm        mov    rectCurrent.right, eax;
// LINE 388:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    rectCurrent.left, eax;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    rectCurrent.right, eax;
// LINE 390:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    rectCurrent.top, eax;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        add    rectCurrent.bottom, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x74], eax;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004AE8FD;
// LINE 395:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AE937;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AE93C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004AE960;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE9FD;
	__asm        jmp    near ptr 0x004AE978;
	__asm        jmp    near ptr 0x004AE97D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AE9AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004AE9BA;
	__asm        jmp    near ptr 0x004AE9BA;
	__asm        mov    dword ptr [ebp-0xCC], 0;
	__asm        jmp    near ptr 0x004AE9BA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AE9FD;
	__asm        jmp    near ptr 0x004AEA02;
	__asm        mov    byte ptr [ebp-0xBC], 0;
	__asm        jmp    near ptr 0x004AEA0E;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x004AEA1F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004AEA4F;
	__asm        jmp    near ptr 0x004AEA54;
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrent.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 397:
	__asm        mov    eax, fontText;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x004AEABF;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   0x0049FC4E;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AEABA;
	__asm        jmp    near ptr 0x004AEABF;
// LINE 400:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004AEAC7;
// LINE 401:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004aeace
void ButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 408:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 409:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x004AEB01;
// LINE 410:
	__asm        mov    eax, nNewButtonState;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 411:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 413:
	__asm        jmp    near ptr 0x004AEB06;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004aeb0d
void ButtonWindow::Enable() {
// LINE 419:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 420:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
// LINE 421:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 422:
	__asm        jmp    near ptr 0x004AEB37;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aeb3c
void ButtonWindow::Disable() {
// LINE 427:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 428:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 429:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 430:
	__asm        jmp    near ptr 0x004AEB66;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aeb6b
int32_t ButtonWindow::ComposeSelf() {
	int32_t nStartXPosition;
	int32_t nWindowWidth;

// LINE 436:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 441:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004AEB8E;
// LINE 442:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEC42;
// LINE 443:
	__asm        jmp    near ptr 0x004AEB93;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x004AEBAA;
// LINE 444:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEC42;
// LINE 445:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    nWindowWidth, eax;
	__asm        jmp    near ptr 0x004AEBCD;
// LINE 449:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004AEBEC;
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        imul   eax, nWindowWidth;
	__asm        mov    nStartXPosition, eax;
// LINE 451:
	__asm        jmp    near ptr 0x004AEBF3;
// LINE 452:
	__asm        mov    nStartXPosition, 0;
// LINE 456:
	__asm        jmp    near ptr 0x004AEBF8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 457:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEC42;
// LINE 458:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aec47
long ButtonWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 465:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 466:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x004AEC67;
// LINE 467:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AEC93;
// LINE 469:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 470:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 472:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEC93;
// LINE 473:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004aec9a
long ButtonWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long __formal) {
// LINE 480:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 481:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004AECB9;
	__asm        jmp    near ptr 0x004AECBE;
	__asm        jmp    near ptr 0x004AED3C;
	__asm        jmp    near ptr 0x004AECCD;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004AED3C;
// LINE 482:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 483:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 484:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AED3C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004AED3C;
// LINE 485:
	__asm        push   0;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 487:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AED46;
// LINE 488:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004aed4d
long ButtonWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 495:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 496:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004AED6C;
	__asm        jmp    near ptr 0x004AED71;
	__asm        jmp    near ptr 0x004AEDD2;
	__asm        jmp    near ptr 0x004AED80;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004AEDD2;
// LINE 497:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AEDB3;
// LINE 498:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 499:
	__asm        jmp    near ptr 0x004AEDC3;
// LINE 500:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 501:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 503:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEDDC;
// LINE 504:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004aede3
int32_t ButtonWindow::CanWeRespondToMessage() {
// LINE 511:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 512:
	__asm        mov    ecx, this;
	__asm        call   0x004A786B;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AEE06;
// LINE 513:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AEE24;
// LINE 514:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x004AEE1A;
// LINE 515:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AEE24;
// LINE 516:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AEE24;
// LINE 517:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aee29
void CheckBoxWindow::CheckBoxWindow() {
// LINE 539:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004ADE3D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591C58;
	__asm        mov    eax, ds:[0x59ABA4];
	__asm        mov    [ebp-0x34], eax;
// LINE 540:
	__asm        jmp    near ptr 0x004AEE53;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AEE9E;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AEE8F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AEE9E;
	__asm        jmp    near ptr 0x004AEEA3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AEED4;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AF055;
	__asm        jmp    near ptr 0x004AEEC2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AF055;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AEFAF;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AEF27;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AEF18;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AEF27;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AEF8C;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AEF87;
	__asm        jmp    near ptr 0x004AEF95;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AEFA4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004AEFB6;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AF042;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004AF042;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF022;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AF027;
	__asm        jmp    near ptr 0x004AF02C;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF03D;
	__asm        jmp    near ptr 0x004AF042;
	__asm        jmp    near ptr 0x004AF047;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AF088;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AF088;
	__asm        jmp    near ptr 0x004AF064;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF088;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AF099;
	__asm        jmp    near ptr 0x004AF09E;
// LINE 541:
	__asm        jmp    near ptr 0x004AF0A3;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004af0ab
void CheckBoxWindow::CheckBoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 552:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x68;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AE05D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591C58;
// LINE 553:
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x004AF33F;
// LINE 554:
	__asm        jmp    near ptr 0x004AF0EF;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF13A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF12B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF13A;
	__asm        jmp    near ptr 0x004AF13F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AF170;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AF2F1;
	__asm        jmp    near ptr 0x004AF15E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AF2F1;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AF24B;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF1C3;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF1B4;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF1C3;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF228;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF223;
	__asm        jmp    near ptr 0x004AF231;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AF240;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004AF252;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AF2DE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004AF2DE;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF2BE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AF2C3;
	__asm        jmp    near ptr 0x004AF2C8;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF2D9;
	__asm        jmp    near ptr 0x004AF2DE;
	__asm        jmp    near ptr 0x004AF2E3;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AF324;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AF324;
	__asm        jmp    near ptr 0x004AF300;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF324;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AF335;
	__asm        jmp    near ptr 0x004AF33A;
// LINE 555:
	__asm        jmp    near ptr 0x004AF597;
// LINE 556:
	__asm        mov    eax, ds:[0x59ABA4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004AF34C;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF397;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF388;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF397;
	__asm        jmp    near ptr 0x004AF39C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AF3CD;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004AF54E;
	__asm        jmp    near ptr 0x004AF3BB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x60];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AF54E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004AF4A8;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF420;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF411;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF420;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF485;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF480;
	__asm        jmp    near ptr 0x004AF48E;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AF49D;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004AF4AF;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AF53B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004AF53B;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF51B;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AF520;
	__asm        jmp    near ptr 0x004AF525;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF536;
	__asm        jmp    near ptr 0x004AF53B;
	__asm        jmp    near ptr 0x004AF540;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AF581;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004AF581;
	__asm        jmp    near ptr 0x004AF55D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF581;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AF592;
	__asm        jmp    near ptr 0x004AF597;
// LINE 557:
	__asm        jmp    near ptr 0x004AF59C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004af5a6
int32_t CheckBoxWindow::GetImageCount() {
// LINE 563:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 564:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x004AF5BC;
// LINE 565:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004af5c1
int32_t CheckBoxWindow::ComposeSelf() {
	int32_t nStartXPosition;
	int32_t nWindowWidth;

// LINE 571:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 576:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004AF5E4;
// LINE 577:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF6A6;
// LINE 578:
	__asm        jmp    near ptr 0x004AF5E9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x004AF600;
// LINE 579:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF6A6;
// LINE 580:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 583:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    nWindowWidth, eax;
	__asm        jmp    near ptr 0x004AF623;
// LINE 584:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004AF649;
// LINE 585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        imul   eax, nWindowWidth;
	__asm        add    eax, nWindowWidth;
	__asm        add    eax, nWindowWidth;
	__asm        mov    nStartXPosition, eax;
// LINE 586:
	__asm        jmp    near ptr 0x004AF657;
// LINE 587:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        imul   eax, nWindowWidth;
	__asm        mov    nStartXPosition, eax;
// LINE 590:
	__asm        jmp    near ptr 0x004AF65C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 591:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF6A6;
// LINE 592:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004af6ab
void CheckBoxWindow::SetState(int32_t nNewButtonState) {
// LINE 601:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 602:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x004AF6CC;
// LINE 603:
	__asm        jmp    near ptr 0x004AF746;
// LINE 604:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 1;
// LINE 606:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x004AF734;
// LINE 607:
	__asm        mov    eax, nNewButtonState;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 608:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 609:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004AF734;
// LINE 610:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 612:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 613:
	__asm        jmp    near ptr 0x004AF746;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004af74d
long CheckBoxWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 621:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 622:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x004AF76D;
// LINE 623:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AF7B6;
// LINE 625:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    near ptr 0x004AF78F;
// LINE 626:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 627:
	__asm        jmp    near ptr 0x004AF7AC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 2;
	__asm        jne    near ptr 0x004AF7AC;
// LINE 628:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 630:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF7B6;
// LINE 631:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004af7bd
long CheckBoxWindow::DoCursorUp(long __formal, long __formal, unsigned long __formal) {
// LINE 638:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 639:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF7D3;
// LINE 640:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004af7da
long CheckBoxWindow::DoCursorMove(long __formal, long __formal) {
// LINE 647:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 648:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AF7F0;
// LINE 649:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004af7f7
void RadioButtonWindow::RadioButtonWindow(class ButtonGroup* myNewRadioButtonGroup, class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 676:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x68;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AE05D;
	__asm        mov    eax, myNewRadioButtonGroup;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591D38;
// LINE 677:
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x004AFA97;
// LINE 678:
	__asm        jmp    near ptr 0x004AF847;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF892;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF883;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF892;
	__asm        jmp    near ptr 0x004AF897;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AF8C8;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AFA49;
	__asm        jmp    near ptr 0x004AF8B6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AFA49;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AF9A3;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AF91B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF90C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AF91B;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AF980;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AF97B;
	__asm        jmp    near ptr 0x004AF989;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AF998;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004AF9AA;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AFA36;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004AFA36;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AFA16;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AFA1B;
	__asm        jmp    near ptr 0x004AFA20;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFA31;
	__asm        jmp    near ptr 0x004AFA36;
	__asm        jmp    near ptr 0x004AFA3B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AFA7C;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004AFA7C;
	__asm        jmp    near ptr 0x004AFA58;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AFA7C;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AFA8D;
	__asm        jmp    near ptr 0x004AFA92;
// LINE 679:
	__asm        jmp    near ptr 0x004AFCEF;
// LINE 680:
	__asm        mov    eax, ds:[0x59ABA8];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004AFAA4;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AFAEF;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFAE0;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFAEF;
	__asm        jmp    near ptr 0x004AFAF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004AFB25;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004AFCA6;
	__asm        jmp    near ptr 0x004AFB13;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x60];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004AFCA6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004AFC00;
	__asm        cmp    dword ptr [ebp-0x60], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AFB78;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFB69;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFB78;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AFBDD;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AFBD8;
	__asm        jmp    near ptr 0x004AFBE6;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004AFBF5;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004AFC07;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004AFC93;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004AFC93;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AFC73;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004AFC78;
	__asm        jmp    near ptr 0x004AFC7D;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AFC8E;
	__asm        jmp    near ptr 0x004AFC93;
	__asm        jmp    near ptr 0x004AFC98;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004AFCD9;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004AFCD9;
	__asm        jmp    near ptr 0x004AFCB5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AFCD9;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004AFCEA;
	__asm        jmp    near ptr 0x004AFCEF;
// LINE 681:
	__asm        jmp    near ptr 0x004AFCF4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x004afcfe
void RadioButtonWindow::~RadioButtonWindow() {
// LINE 687:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591D38;
// LINE 703:
	__asm        jmp    near ptr 0x004AFD18;
	__asm        jmp    near ptr 0x004AFD1D;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004afd2a
int32_t RadioButtonWindow::Initialize() {
// LINE 710:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 711:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x004AFD58;
// LINE 712:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   0x004B05E2;
// LINE 713:
	__asm        mov    ecx, this;
	__asm        call   0x004AE385;
	__asm        jmp    near ptr 0x004AFD65;
// LINE 714:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004afd6a
int32_t RadioButtonWindow::ComposeSelf() {
	int32_t nStartXPosition;
	int32_t nWindowWidth;

// LINE 720:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 725:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004AFD8D;
// LINE 726:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AFE4F;
// LINE 727:
	__asm        jmp    near ptr 0x004AFD92;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x004AFDA9;
// LINE 728:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AFE4F;
// LINE 729:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 732:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    nWindowWidth, eax;
	__asm        jmp    near ptr 0x004AFDCC;
// LINE 733:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004AFDF2;
// LINE 734:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        imul   eax, nWindowWidth;
	__asm        add    eax, nWindowWidth;
	__asm        add    eax, nWindowWidth;
	__asm        mov    nStartXPosition, eax;
// LINE 735:
	__asm        jmp    near ptr 0x004AFE00;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        imul   eax, nWindowWidth;
	__asm        mov    nStartXPosition, eax;
// LINE 739:
	__asm        jmp    near ptr 0x004AFE05;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, nStartXPosition;
	__asm        add    eax, nWindowWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nStartXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 740:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AFE4F;
// LINE 741:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004afe54
int32_t RadioButtonWindow::GetImageCount() {
// LINE 751:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 752:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x004AFE6A;
// LINE 753:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004afe6f
void RadioButtonWindow::AddToGroup(class ButtonGroup* myNewRadioButtonGroup) {
// LINE 759:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 760:
	__asm        mov    eax, myNewRadioButtonGroup;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 761:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    ecx, myNewRadioButtonGroup;
	__asm        call   0x004B05E2;
// LINE 762:
	__asm        jmp    near ptr 0x004AFE98;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004afe9f
int32_t RadioButtonWindow::RemoveFromGroup() {
// LINE 768:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 769:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x004AFED7;
// LINE 770:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   0x004B08B4;
// LINE 771:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AFEDE;
// LINE 773:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AFEDE;
// LINE 774:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004afee3
void RadioButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 781:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 782:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x004AFF04;
// LINE 783:
	__asm        jmp    near ptr 0x004AFFCD;
// LINE 784:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 1;
// LINE 786:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x004AFFBB;
// LINE 787:
	__asm        mov    eax, nNewButtonState;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 788:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 789:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 2;
	__asm        jne    near ptr 0x004AFFBB;
// LINE 790:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x004AFF87;
// LINE 791:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x94];
	__asm        call   dword ptr [edx];
// LINE 792:
	__asm        jmp    near ptr 0x004AFFBB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004AFFBB;
// LINE 793:
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 796:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 797:
	__asm        jmp    near ptr 0x004AFFCD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004affd4
long RadioButtonWindow::DoCursorDown(long __formal, long __formal, unsigned long __formal) {
// LINE 805:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 806:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x004AFFF4;
// LINE 807:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B0042;
// LINE 809:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    near ptr 0x004B0038;
// LINE 810:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x004B0028;
// LINE 812:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   0x004B09ED;
// LINE 814:
	__asm        jmp    near ptr 0x004B0038;
// LINE 815:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 824:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B0042;
// LINE 825:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b0049
long RadioButtonWindow::DoCursorUp(long __formal, long __formal, unsigned long __formal) {
// LINE 830:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 831:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B005F;
// LINE 832:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b0066
long RadioButtonWindow::DoCursorMove(long __formal, long __formal) {
// LINE 837:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 838:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B007C;
// LINE 839:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b0083
 ButtonGroup::ButtonGroup() {
// LINE 855:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x59AC30];
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x59AC3C], 0;
	__asm        je     near ptr 0x004B00D3;
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59AC3C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B02B0;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        cmp    ds:[0x59AC34], eax;
	__asm        jne    near ptr 0x004B029B;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x004B0132;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B0128;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B0137;
	__asm        jmp    near ptr 0x004B013C;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B0177;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B017D;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B0182;
	__asm        jmp    near ptr 0x004B0187;
	__asm        jmp    near ptr 0x004B018C;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x004B01EA;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B01E0;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B01EF;
	__asm        jmp    near ptr 0x004B01F4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x59AC40], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59AC38], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B0251;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B0257;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B025C;
	__asm        jmp    near ptr 0x004B0261;
	__asm        jmp    near ptr 0x004B0266;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59AC38];
	__asm        mov    ds:[0x59AC34], eax;
	__asm        jmp    near ptr 0x004B0281;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B02B0;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B02B5;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B02E0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591E20;
// LINE 857:
	__asm        jmp    near ptr 0x004B0305;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b030d
 ButtonGroup::ButtonGroup(long lNewID, class GraphicWindow* windowNewParent, class GraphicWindow* gwMyNewOwner, int32_t bAddToParentList) {
// LINE 868:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x004B031E;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        jmp    near ptr 0x004B033F;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, gwMyNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x59AC30];
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr ds:[0x59AC3C], 0;
	__asm        je     near ptr 0x004B0397;
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59AC3C], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004B0574;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        cmp    ds:[0x59AC34], eax;
	__asm        jne    near ptr 0x004B055F;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    near ptr 0x004B03F6;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B03EC;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B03FB;
	__asm        jmp    near ptr 0x004B0400;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x24], 0x155;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B043B;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B0441;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B0446;
	__asm        jmp    near ptr 0x004B044B;
	__asm        jmp    near ptr 0x004B0450;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    near ptr 0x004B04AE;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B04A4;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B04B3;
	__asm        jmp    near ptr 0x004B04B8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ds:[0x59AC40], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59AC38], eax;
	__asm        mov    dword ptr [ebp-0x38], 0x155;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B0515;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004B051B;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004B0520;
	__asm        jmp    near ptr 0x004B0525;
	__asm        jmp    near ptr 0x004B052A;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59AC38];
	__asm        mov    ds:[0x59AC34], eax;
	__asm        jmp    near ptr 0x004B0545;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-0x18], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004B0574;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004B0579;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B05A4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591E20;
// LINE 869:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004B05D3;
// LINE 870:
	__asm        jmp    near ptr 0x004B05D8;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004b05e2
void  ButtonGroup::AddButton(class RadioButtonWindow* buttonNew) {
// LINE 878:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x6C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 879:
	__asm        mov    eax, buttonNew;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B1067;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B08A8;
// LINE 880:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B0616;
	__asm        jmp    near ptr 0x004B061B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr ds:[0x59AC3C], 0;
	__asm        je     near ptr 0x004B064D;
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59AC3C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004B082A;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        cmp    ds:[0x59AC34], eax;
	__asm        jne    near ptr 0x004B0815;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004B06AC;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B06A2;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B06B1;
	__asm        jmp    near ptr 0x004B06B6;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B06F1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B06F7;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B06FC;
	__asm        jmp    near ptr 0x004B0701;
	__asm        jmp    near ptr 0x004B0706;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x004B0764;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B075A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B0769;
	__asm        jmp    near ptr 0x004B076E;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59AC40], eax;
	__asm        mov    eax, ds:[0x59AC40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59AC38], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B07CB;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004B07D1;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004B07D6;
	__asm        jmp    near ptr 0x004B07DB;
	__asm        jmp    near ptr 0x004B07E0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59AC38];
	__asm        mov    ds:[0x59AC34], eax;
	__asm        jmp    near ptr 0x004B07FB;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004B082A;
	__asm        mov    eax, ds:[0x59AC38];
	__asm        mov    [ebp-0x20], eax;
	__asm        add    dword ptr ds:[0x59AC38], 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004B082F;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B083A;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004B0848;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B085F;
	__asm        mov    eax, buttonNew;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B085F;
	__asm        jmp    near ptr 0x004B0864;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B089E;
	__asm        jmp    near ptr 0x004B08A3;
	__asm        jmp    near ptr 0x004B08A8;
// LINE 881:
	__asm        jmp    near ptr 0x004B08AD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b08b4
void  ButtonGroup::RemoveButton(class RadioButtonWindow* buttonToRemove) {
	class list<RadioButtonWindow *>::iterator iterator;

// LINE 892:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B08D6;
	__asm        jmp    near ptr 0x004B08DB;
// LINE 895:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x004B08ED;
// LINE 896:
	__asm        jmp    near ptr 0x004B09E6;
// LINE 897:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 1;
// LINE 899:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B090B;
	__asm        jmp    near ptr 0x004B0910;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004B0926;
	__asm        jmp    near ptr 0x004B093A;
	__asm        jmp    near ptr 0x004B0926;
	__asm        jmp    near ptr 0x004B0935;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004B093A;
	__asm        jmp    near ptr 0x004B093F;
	__asm        jmp    near ptr 0x004B09D7;
	__asm        jmp    near ptr 0x004B094E;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004B09D7;
// LINE 900:
	__asm        jmp    near ptr 0x004B0953;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, buttonToRemove;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004B09B4;
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x24], eax;
// LINE 901:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B0988;
	__asm        jmp    near ptr 0x004B098D;
	__asm        mov    eax, ds:[0x59AC3C];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59AC3C], eax;
	__asm        jmp    near ptr 0x004B09A4;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x78];
	__asm        jmp    near ptr 0x004B09AF;
// LINE 902:
	__asm        jmp    near ptr 0x004B09E6;
// LINE 904:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B09C7;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B09D2;
// LINE 905:
	__asm        jmp    near ptr 0x004B08F7;
// LINE 906:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 907:
	__asm        jmp    near ptr 0x004B09E6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b09ed
void  ButtonGroup::SetSelection(class RadioButtonWindow* buttonToSelect) {
	class list<RadioButtonWindow *>::iterator iterator;

// LINE 919:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 920:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0A0F;
	__asm        jmp    near ptr 0x004B0A14;
// LINE 922:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x004B0A29;
// LINE 923:
	__asm        jmp    near ptr 0x004B0B54;
// LINE 924:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
// LINE 926:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B0A4A;
	__asm        jmp    near ptr 0x004B0A4F;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004B0A65;
	__asm        jmp    near ptr 0x004B0A79;
	__asm        jmp    near ptr 0x004B0A65;
	__asm        jmp    near ptr 0x004B0A74;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x004B0A79;
	__asm        jmp    near ptr 0x004B0A7E;
	__asm        jmp    near ptr 0x004B0B11;
	__asm        jmp    near ptr 0x004B0A8D;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004B0B11;
// LINE 927:
	__asm        jmp    near ptr 0x004B0A92;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, buttonToSelect;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004B0ACA;
// LINE 928:
	__asm        jmp    near ptr 0x004B0AA6;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC8];
// LINE 929:
	__asm        jmp    near ptr 0x004B0AEE;
// LINE 930:
	__asm        jmp    near ptr 0x004B0ACF;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+0xC8];
// LINE 931:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0B01;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B0B0C;
// LINE 932:
	__asm        jmp    near ptr 0x004B0A36;
// LINE 933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B0B42;
// LINE 934:
	__asm        mov    eax, buttonToSelect;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 937:
	__asm        jmp    near ptr 0x004B0B54;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b0b5b
void  ButtonGroup::SetSelection(long lIDOfButtonToSelect) {
	class list<RadioButtonWindow *>::iterator iterator;

// LINE 949:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 950:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0B7D;
	__asm        jmp    near ptr 0x004B0B82;
// LINE 952:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x004B0B97;
// LINE 953:
	__asm        jmp    near ptr 0x004B0CCD;
// LINE 954:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
// LINE 956:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B0BB8;
	__asm        jmp    near ptr 0x004B0BBD;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004B0BD3;
	__asm        jmp    near ptr 0x004B0BE7;
	__asm        jmp    near ptr 0x004B0BD3;
	__asm        jmp    near ptr 0x004B0BE2;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x004B0BE7;
	__asm        jmp    near ptr 0x004B0BEC;
	__asm        jmp    near ptr 0x004B0C82;
	__asm        jmp    near ptr 0x004B0BFB;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004B0C82;
// LINE 957:
	__asm        jmp    near ptr 0x004B0C00;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lIDOfButtonToSelect;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004B0C3B;
// LINE 958:
	__asm        jmp    near ptr 0x004B0C17;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC8];
// LINE 959:
	__asm        jmp    near ptr 0x004B0C5F;
// LINE 960:
	__asm        jmp    near ptr 0x004B0C40;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+0xC8];
// LINE 961:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0C72;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B0C7D;
// LINE 962:
	__asm        jmp    near ptr 0x004B0BA4;
// LINE 964:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B0CBB;
// LINE 965:
	__asm        jmp    near ptr 0x004B0C94;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 967:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 968:
	__asm        jmp    near ptr 0x004B0CCD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b0cd4
void  ButtonGroup::SetSelectionIndex(int32_t nIndexOfButtonToSelect) {
	class list<RadioButtonWindow *>::iterator iterator;
	int32_t i;

// LINE 980:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 981:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0CF6;
	__asm        jmp    near ptr 0x004B0CFB;
// LINE 982:
	__asm        mov    i, 0;
// LINE 984:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x004B0D17;
// LINE 985:
	__asm        jmp    near ptr 0x004B0E46;
// LINE 986:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
// LINE 988:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B0D38;
	__asm        jmp    near ptr 0x004B0D3D;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004B0D53;
	__asm        jmp    near ptr 0x004B0D67;
	__asm        jmp    near ptr 0x004B0D53;
	__asm        jmp    near ptr 0x004B0D62;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x004B0D67;
	__asm        jmp    near ptr 0x004B0D6C;
	__asm        jmp    near ptr 0x004B0DFB;
	__asm        jmp    near ptr 0x004B0D7B;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004B0DFB;
// LINE 989:
	__asm        mov    eax, nIndexOfButtonToSelect;
	__asm        cmp    i, eax;
	__asm        jne    near ptr 0x004B0DB0;
// LINE 990:
	__asm        jmp    near ptr 0x004B0D8C;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xC8];
// LINE 991:
	__asm        jmp    near ptr 0x004B0DD4;
// LINE 992:
	__asm        jmp    near ptr 0x004B0DB5;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   dword ptr [eax+0xC8];
// LINE 993:
	__asm        add    i, 1;
// LINE 994:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0DEB;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B0DF6;
// LINE 995:
	__asm        jmp    near ptr 0x004B0D24;
// LINE 997:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B0E34;
// LINE 998:
	__asm        jmp    near ptr 0x004B0E0D;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1000:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 1001:
	__asm        jmp    near ptr 0x004B0E46;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b0e4d
int  ButtonGroup::GetSelection(class RadioButtonWindow*& radioButtonWindow) {
	class list<RadioButtonWindow *>::iterator iterator;

// LINE 1011:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1012:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0E6F;
	__asm        jmp    near ptr 0x004B0E74;
// LINE 1014:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B0E88;
	__asm        jmp    near ptr 0x004B0E8D;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004B0EA3;
	__asm        jmp    near ptr 0x004B0EB7;
	__asm        jmp    near ptr 0x004B0EA3;
	__asm        jmp    near ptr 0x004B0EB2;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004B0EB7;
	__asm        jmp    near ptr 0x004B0EBC;
	__asm        jmp    near ptr 0x004B0F33;
	__asm        jmp    near ptr 0x004B0ECB;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B0F33;
// LINE 1015:
	__asm        jmp    near ptr 0x004B0ED0;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    near ptr 0x004B0F10;
// LINE 1016:
	__asm        jmp    near ptr 0x004B0EFB;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, radioButtonWindow;
	__asm        mov    [ecx], eax;
// LINE 1017:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B0F3A;
// LINE 1019:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0F23;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B0F2E;
// LINE 1020:
	__asm        jmp    near ptr 0x004B0E74;
// LINE 1021:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B0F3A;
// LINE 1022:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b0f41
int  ButtonGroup::GetSelection(long& lCurrentSelection) {
	class RadioButtonWindow* tempRadioButtonWindow;

// LINE 1032:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1035:
	__asm        lea    eax, tempRadioButtonWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B0E4D;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B0F6B;
// LINE 1037:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B0F72;
// LINE 1039:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B0F72;
// LINE 1040:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b0f79
int  ButtonGroup::GetSelectionIndex() {
	class list<RadioButtonWindow *>::iterator iterator;
	int32_t i;

// LINE 1049:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1050:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B0F9B;
	__asm        jmp    near ptr 0x004B0FA0;
// LINE 1051:
	__asm        mov    i, 0;
// LINE 1053:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B0FBB;
	__asm        jmp    near ptr 0x004B0FC0;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004B0FD6;
	__asm        jmp    near ptr 0x004B0FEA;
	__asm        jmp    near ptr 0x004B0FD6;
	__asm        jmp    near ptr 0x004B0FE5;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004B0FEA;
	__asm        jmp    near ptr 0x004B0FEF;
	__asm        jmp    near ptr 0x004B1058;
	__asm        jmp    near ptr 0x004B0FFE;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004B1058;
// LINE 1054:
	__asm        jmp    near ptr 0x004B1003;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    near ptr 0x004B1031;
// LINE 1055:
	__asm        mov    eax, i;
	__asm        jmp    near ptr 0x004B1062;
// LINE 1056:
	__asm        add    i, 1;
// LINE 1057:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004B1048;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B1053;
// LINE 1058:
	__asm        jmp    near ptr 0x004B0FA7;
// LINE 1059:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004B1062;
// LINE 1060:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b1067
int  ButtonGroup::IsButtonInGroup(class RadioButtonWindow* buttonToFind) {
	class list<RadioButtonWindow *>::iterator i;

// LINE 1068:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1069:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004B1089;
	__asm        jmp    near ptr 0x004B108E;
// LINE 1071:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B10A2;
	__asm        jmp    near ptr 0x004B10A7;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004B10BD;
	__asm        jmp    near ptr 0x004B10D1;
	__asm        jmp    near ptr 0x004B10BD;
	__asm        jmp    near ptr 0x004B10CC;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004B10D1;
	__asm        jmp    near ptr 0x004B10D6;
	__asm        jmp    near ptr 0x004B1126;
	__asm        jmp    near ptr 0x004B10E5;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004B1126;
// LINE 1072:
	__asm        jmp    near ptr 0x004B10EA;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, buttonToFind;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004B1103;
// LINE 1073:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B112D;
// LINE 1074:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004B1116;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B1121;
// LINE 1075:
	__asm        jmp    near ptr 0x004B108E;
// LINE 1076:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B112D;
// LINE 1077:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b1134
void SliderWindow::SliderWindow() {
// LINE 1109:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 8;
	__asm        jmp    near ptr 0x004B11AC;
	__asm        jmp    near ptr 0x004B11B1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004B1214;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B1203;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x004B1221;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x004B1233;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591EE8;
// LINE 1110:
	__asm        jmp    near ptr 0x004B124E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b1256
void SliderWindow::SliderWindow(class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szThumbImageFileName, char * szBackgroundImageFileName, long lNewThumbLimitIndentation) {
// LINE 1133:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, lNewThumbLimitIndentation;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x004B12E0;
	__asm        jmp    near ptr 0x004B12E5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x004B1348;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B1337;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x004B1355;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x004B1367;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591EE8;
// LINE 1134:
	__asm        cmp    szThumbImageFileName, 0;
	__asm        je     near ptr 0x004B13B2;
// LINE 1135:
	__asm        jmp    near ptr 0x004B138C;
	__asm        mov    eax, szThumbImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, szThumbImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004B13AD;
// LINE 1137:
	__asm        jmp    near ptr 0x004B1610;
// LINE 1138:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B14EA;
// LINE 1139:
	__asm        mov    eax, ds:[0x59ABB0];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004B13CC;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B1417;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1408;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1417;
	__asm        jmp    near ptr 0x004B141C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B144D;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B149C;
	__asm        jmp    near ptr 0x004B143B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B149C;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B147C;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B1483;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004B14CF;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B14CF;
	__asm        jmp    near ptr 0x004B14AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B14CF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B14E0;
	__asm        jmp    near ptr 0x004B14E5;
// LINE 1140:
	__asm        jmp    near ptr 0x004B1610;
// LINE 1141:
	__asm        mov    eax, ds:[0x59ABAC];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004B14F7;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B1542;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1533;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1542;
	__asm        jmp    near ptr 0x004B1547;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B1578;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004B15C7;
	__asm        jmp    near ptr 0x004B1566;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B15C7;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B15A7;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004B15AE;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004B15FA;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004B15FA;
	__asm        jmp    near ptr 0x004B15D6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B15FA;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B160B;
	__asm        jmp    near ptr 0x004B1610;
// LINE 1143:
	__asm        cmp    szBackgroundImageFileName, 0;
	__asm        je     near ptr 0x004B174F;
// LINE 1144:
	__asm        jmp    near ptr 0x004B161F;
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B166A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B165B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B166A;
	__asm        jmp    near ptr 0x004B166F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B16A6;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004B16FB;
	__asm        jmp    near ptr 0x004B1691;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B16FB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004B16D5;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B16DC;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x004B1731;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004B1731;
	__asm        jmp    near ptr 0x004B170A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B1731;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B1745;
	__asm        jmp    near ptr 0x004B174A;
// LINE 1146:
	__asm        jmp    near ptr 0x004B19D1;
// LINE 1147:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B1899;
// LINE 1148:
	__asm        mov    eax, ds:[0x59ABB8];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004B1769;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B17B4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B17A5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B17B4;
	__asm        jmp    near ptr 0x004B17B9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B17F0;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004B1845;
	__asm        jmp    near ptr 0x004B17DB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B1845;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x004B181F;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004B1826;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x004B187B;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004B187B;
	__asm        jmp    near ptr 0x004B1854;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B187B;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B188F;
	__asm        jmp    near ptr 0x004B1894;
// LINE 1149:
	__asm        jmp    near ptr 0x004B19D1;
// LINE 1150:
	__asm        mov    eax, ds:[0x59ABB4];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004B18A6;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B18F1;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B18E2;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B18F1;
	__asm        jmp    near ptr 0x004B18F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B192D;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x004B1982;
	__asm        jmp    near ptr 0x004B1918;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x70];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B1982;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004B195C;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004B1963;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA8;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x004B19B8;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x004B19B8;
	__asm        jmp    near ptr 0x004B1991;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B19B8;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B19CC;
	__asm        jmp    near ptr 0x004B19D1;
// LINE 1152:
	__asm        jmp    near ptr 0x004B19D6;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x004b19e0
void SliderWindow::~SliderWindow() {
// LINE 1158:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591EE8;
// LINE 1159:
	__asm        mov    ecx, this;
	__asm        call   0x004B1E64;
// LINE 1160:
	__asm        jmp    near ptr 0x004B1A02;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B1A97;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004B1A97;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B1A77;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B1A7C;
	__asm        jmp    near ptr 0x004B1A81;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1A92;
	__asm        jmp    near ptr 0x004B1A97;
	__asm        jmp    near ptr 0x004B1A9C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x004B1ACA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1ACF;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b1adc
int32_t SliderWindow::Initialize() {
	int32_t nReturnValue;

// LINE 1166:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1169:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1170:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 1171:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nReturnValue, eax;
// LINE 1172:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x004B1B4A;
// LINE 1173:
	__asm        jmp    near ptr 0x004B1B20;
	__asm        jmp    near ptr 0x004B1B25;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1174:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1175:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004B1B60;
// LINE 1176:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b1b65
int32_t SliderWindow::CreateImage(int32_t __formal) {
	int32_t nReturnValue;
	class basic_string<char> sBackgroundPath;

// LINE 1183:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1184:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004B1BC1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B1BB6;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    sBackgroundPath.reference, eax;
	__asm        jmp    near ptr 0x004B1BC8;
	__asm        mov    sBackgroundPath.reference, 0;
	__asm        mov    sBackgroundPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004B1BD4;
// LINE 1188:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
	__asm        mov    nReturnValue, eax;
// LINE 1189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x004B1C08;
// LINE 1190:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 1192:
	__asm        jmp    near ptr 0x004B1C0D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B1DA0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x004B1DA0;
// LINE 1193:
	__asm        lea    eax, sBackgroundPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004B1C50;
// LINE 1194:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004B1D66;
	__asm        cmp    sBackgroundPath.c_str_ptr, 0;
	__asm        je     near ptr 0x004B1C8C;
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1C91;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sBackgroundPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x004B1CA9;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B1D13;
	__asm        jmp    near ptr 0x004B1CBB;
	__asm        jmp    near ptr 0x004B1CC0;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B1CDF;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004B1CEB;
	__asm        jmp    near ptr 0x004B1CEB;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x004B1CEB;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B1D13;
	__asm        jmp    near ptr 0x004B1D18;
	__asm        mov    byte ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x004B1D21;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004B1D2C;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004B1D47;
	__asm        jmp    near ptr 0x004B1D4C;
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    near ptr 0x004B1D73;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 1195:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x004B1DA0;
// LINE 1196:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+8];
// LINE 1198:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B1E29;
	__asm        mov    eax, sBackgroundPath.reference;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004B1E29;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B1E09;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B1E0E;
	__asm        jmp    near ptr 0x004B1E13;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1E24;
	__asm        jmp    near ptr 0x004B1E29;
	__asm        jmp    near ptr 0x004B1E2E;
	__asm        cmp    sBackgroundPath.c_str_ptr, 0;
	__asm        je     near ptr 0x004B1E50;
	__asm        mov    eax, sBackgroundPath.c_str_ptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1E55;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x004B1E5D;
// LINE 1199:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b1e64
void SliderWindow::DestroyImage() {
// LINE 1206:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1208:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 1209:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x004B1ECF;
// LINE 1210:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004B1EC2;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B1EBD;
	__asm        jmp    near ptr 0x004B1EC2;
// LINE 1211:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 1213:
	__asm        jmp    near ptr 0x004B1ED4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b1ed9
void SliderWindow::MoveWindow(int32_t nXPosition, int32_t nYPosition) {
// LINE 1219:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1220:
	__asm        mov    eax, nYPosition;
	__asm        push   eax;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A4D7E;
// LINE 1221:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1222:
	__asm        jmp    near ptr 0x004B1F08;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b1f0f
void SliderWindow::SetWidthAndHeight(int32_t nNewWidth, int32_t nNewHeight) {
// LINE 1228:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1229:
	__asm        mov    eax, nNewHeight;
	__asm        push   eax;
	__asm        mov    eax, nNewWidth;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A4DF1;
// LINE 1230:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1231:
	__asm        jmp    near ptr 0x004B1F3E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b1f45
int32_t SliderWindow::ComposeSelf() {
	long lXPosition;
	long lYPosition;
	long lThumbHeight;
	long lThumbWidth;

// LINE 1239:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1246:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004B1F68;
// LINE 1247:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B21FD;
// LINE 1248:
	__asm        jmp    near ptr 0x004B1F6D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x004B1F84;
// LINE 1249:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B21FD;
// LINE 1250:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x004B1FFC;
// LINE 1255:
	__asm        jmp    near ptr 0x004B1FA8;
	__asm        jmp    near ptr 0x004B1FAD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1257:
	__asm        jmp    near ptr 0x004B211F;
// LINE 1258:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x60696C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 1259:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B209F;
// LINE 1263:
	__asm        jmp    near ptr 0x004B202C;
	__asm        jmp    near ptr 0x004B2031;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1264:
	__asm        jmp    near ptr 0x004B2112;
// LINE 1268:
	__asm        jmp    near ptr 0x004B20A4;
	__asm        jmp    near ptr 0x004B20A9;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x28];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1269:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 1272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    lThumbWidth, eax;
// LINE 1273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    lThumbHeight, eax;
// LINE 1274:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B21A3;
// LINE 1275:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        mov    lXPosition, eax;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    lYPosition, eax;
// LINE 1277:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1279:
	__asm        jmp    near ptr 0x004B21F3;
// LINE 1280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        mov    lXPosition, eax;
// LINE 1281:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    lYPosition, eax;
// LINE 1282:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1284:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B21FD;
// LINE 1285:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b2202
long SliderWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lNewValue;

// LINE 1292:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1295:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1296:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B224E;
// LINE 1297:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1299:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1300:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B2264;
// LINE 1301:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b226b
long SliderWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
	long lNewValue;

// LINE 1307:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1310:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004B228A;
	__asm        jmp    near ptr 0x004B228F;
	__asm        jmp    near ptr 0x004B22DE;
	__asm        jmp    near ptr 0x004B229E;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B22DE;
// LINE 1311:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1312:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B22DE;
// LINE 1313:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1315:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B22E8;
// LINE 1316:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b22ef
long SliderWindow::DoCursorMove(long nCursorX, long nCursorY) {
	long lNewValue;

// LINE 1323:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1326:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004B230E;
	__asm        jmp    near ptr 0x004B2313;
	__asm        jmp    near ptr 0x004B2350;
	__asm        jmp    near ptr 0x004B2322;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B2350;
// LINE 1327:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B2350;
// LINE 1328:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1330:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B235A;
// LINE 1331:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b2361
int32_t SliderWindow::ConvertCursorPositionToValue(long& lNewValue, long nCursorX, long nCursorY) {
	long lPosition;
	long lPositionScale;
	long lValueScale;

// LINE 1346:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        mov    lPositionScale, eax;
// LINE 1352:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueScale, eax;
// LINE 1354:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B2407;
// LINE 1355:
	__asm        mov    eax, nCursorX;
	__asm        mov    lPosition, eax;
// LINE 1356:
	__asm        mov    eax, this;
	__asm        mov    ecx, lPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    near ptr 0x004B23C2;
// LINE 1357:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    lPosition, eax;
// LINE 1358:
	__asm        jmp    near ptr 0x004B23C7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        cmp    eax, lPosition;
	__asm        jge    near ptr 0x004B2402;
// LINE 1359:
	__asm        jmp    near ptr 0x004B23EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        mov    lPosition, eax;
// LINE 1361:
	__asm        jmp    near ptr 0x004B246B;
// LINE 1362:
	__asm        mov    eax, nCursorY;
	__asm        mov    lPosition, eax;
// LINE 1363:
	__asm        mov    eax, this;
	__asm        mov    ecx, lPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    near ptr 0x004B242B;
// LINE 1364:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    lPosition, eax;
// LINE 1365:
	__asm        jmp    near ptr 0x004B2430;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        cmp    eax, lPosition;
	__asm        jge    near ptr 0x004B246B;
// LINE 1366:
	__asm        jmp    near ptr 0x004B2453;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x90];
	__asm        mov    lPosition, eax;
// LINE 1368:
	__asm        mov    eax, lPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        imul   eax, lValueScale;
	__asm        cdq;
	__asm        idiv   lPositionScale;
	__asm        mov    ecx, lNewValue;
	__asm        mov    [ecx], eax;
// LINE 1369:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, lNewValue;
	__asm        add    [ecx], eax;
// LINE 1370:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B2499;
// LINE 1371:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b24a0
void SliderWindow::CalculateAllMetrics() {
// LINE 1379:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1382:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B2503;
// LINE 1383:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 1384:
	__asm        jmp    near ptr 0x004B24D0;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x90];
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 1386:
	__asm        jmp    near ptr 0x004B2548;
// LINE 1388:
	__asm        jmp    near ptr 0x004B2508;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x14];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x90];
	__asm        mov    eax, this;
	__asm        mov    [eax+0x84], ebx;
// LINE 1389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 1391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1392:
	__asm        jmp    near ptr 0x004B255B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b2560
void SliderWindow::CalculateThumbPosition() {
	long lPositionScale;
	long lValueScale;

// LINE 1400:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1406:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueScale, eax;
// LINE 1407:
	__asm        cmp    lValueScale, 0;
	__asm        jne    near ptr 0x004B259C;
// LINE 1408:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 1410:
	__asm        jmp    near ptr 0x004B25E3;
// LINE 1411:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        mov    lPositionScale, eax;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        imul   eax, lPositionScale;
	__asm        cdq;
	__asm        idiv   lValueScale;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 1413:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x88], eax;
// LINE 1419:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B2683;
// LINE 1420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 1421:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x9C], ecx;
// LINE 1422:
	__asm        jmp    near ptr 0x004B2629;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x98], ebx;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xA0], ecx;
// LINE 1425:
	__asm        jmp    near ptr 0x004B2711;
// LINE 1426:
	__asm        jmp    near ptr 0x004B2688;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x94], ebx;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x9C], ecx;
// LINE 1428:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 1429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xA0], ecx;
// LINE 1431:
	__asm        jmp    near ptr 0x004B2716;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b271b
long SliderWindow::GetValue() {
// LINE 1438:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1439:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        jmp    near ptr 0x004B2735;
// LINE 1440:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b273a
void SliderWindow::SetValue(long lNewSliderValue) {
// LINE 1447:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1448:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        je     near ptr 0x004B275B;
// LINE 1449:
	__asm        jmp    near ptr 0x004B282D;
// LINE 1450:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 1;
// LINE 1452:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    near ptr 0x004B278C;
// LINE 1453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
// LINE 1454:
	__asm        jmp    near ptr 0x004B282D;
// LINE 1456:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    near ptr 0x004B27A4;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    lNewSliderValue, eax;
// LINE 1458:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSliderValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    near ptr 0x004B27BC;
// LINE 1459:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    lNewSliderValue, eax;
// LINE 1460:
	__asm        mov    eax, lNewSliderValue;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 1462:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1463:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1464:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B281B;
// LINE 1465:
	__asm        mov    eax, this;
	__asm        add    eax, 0x80;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1466:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
// LINE 1467:
	__asm        jmp    near ptr 0x004B282D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b2834
void SliderWindow::SetMinimumValue(long lNewSliderMinimumValue) {
// LINE 1472:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1473:
	__asm        mov    eax, lNewSliderMinimumValue;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 1474:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1475:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1476:
	__asm        jmp    near ptr 0x004B286B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b2872
void SliderWindow::SetMaximumValue(long lNewSliderMaximumValue) {
// LINE 1481:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1482:
	__asm        mov    eax, lNewSliderMaximumValue;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 1483:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1484:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1485:
	__asm        jmp    near ptr 0x004B28A9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b28b0
long SliderWindow::GetThumbWidth() {
// LINE 1495:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1496:
	__asm        jmp    near ptr 0x004B28C1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x004B28CF;
// LINE 1497:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b28d4
long SliderWindow::GetThumbHeight() {
// LINE 1506:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1507:
	__asm        jmp    near ptr 0x004B28E5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x004B28F3;
// LINE 1508:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b28f8
void ScrollBarWindow::ScrollBarWindow() {
// LINE 1546:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004B1134;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B2971;
	__asm        lea    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
	__asm        jmp    near ptr 0x004B2971;
	__asm        jmp    near ptr 0x004B2976;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591FC0;
// LINE 1547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        mov    eax, ds:[0x59ABBC];
	__asm        mov    [ebp-0x34], eax;
// LINE 1548:
	__asm        jmp    near ptr 0x004B29C0;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B2A0B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B29FC;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2A0B;
	__asm        jmp    near ptr 0x004B2A10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B2A41;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004B2BC2;
	__asm        jmp    near ptr 0x004B2A2F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B2BC2;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B2B1C;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B2A94;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2A85;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2A94;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B2AF9;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B2AF4;
	__asm        jmp    near ptr 0x004B2B02;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B2B11;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B2B23;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B2BAF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B2BAF;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B2B8F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B2B94;
	__asm        jmp    near ptr 0x004B2B99;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2BAA;
	__asm        jmp    near ptr 0x004B2BAF;
	__asm        jmp    near ptr 0x004B2BB4;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004B2BF5;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004B2BF5;
	__asm        jmp    near ptr 0x004B2BD1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B2BF5;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B2C06;
	__asm        jmp    near ptr 0x004B2C0B;
// LINE 1549:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1550:
	__asm        jmp    near ptr 0x004B2C1D;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b2c25
void ScrollBarWindow::ScrollBarWindow(class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szImageFileName) {
// LINE 1565:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   8;
	__asm        push   0;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B1256;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B2CBE;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
	__asm        jmp    near ptr 0x004B2CBE;
	__asm        jmp    near ptr 0x004B2CC3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591FC0;
// LINE 1566:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 1567:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1569:
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x004B2E89;
// LINE 1570:
	__asm        jmp    near ptr 0x004B2D1C;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B2D67;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2D58;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2D67;
	__asm        jmp    near ptr 0x004B2D6C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B2D9D;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004B2E3B;
	__asm        jmp    near ptr 0x004B2D8B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B2E3B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B2DCC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B2DD3;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B2E28;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B2E28;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004B2E12;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2E23;
	__asm        jmp    near ptr 0x004B2E28;
	__asm        jmp    near ptr 0x004B2E2D;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004B2E6E;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004B2E6E;
	__asm        jmp    near ptr 0x004B2E4A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B2E6E;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B2E7F;
	__asm        jmp    near ptr 0x004B2E84;
// LINE 1571:
	__asm        jmp    near ptr 0x004B2FFE;
// LINE 1572:
	__asm        mov    eax, ds:[0x59ABBC];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004B2E96;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B2EE1;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2ED2;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2EE1;
	__asm        jmp    near ptr 0x004B2EE6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B2F17;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004B2FB5;
	__asm        jmp    near ptr 0x004B2F05;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B2FB5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004B2F46;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004B2F4D;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B2FA2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004B2FA2;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004B2F8C;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B2F9D;
	__asm        jmp    near ptr 0x004B2FA2;
	__asm        jmp    near ptr 0x004B2FA7;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004B2FE8;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004B2FE8;
	__asm        jmp    near ptr 0x004B2FC4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B2FE8;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B2FF9;
	__asm        jmp    near ptr 0x004B2FFE;
// LINE 1573:
	__asm        jmp    near ptr 0x004B3003;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x004b300d
int32_t ScrollBarWindow::Initialize() {
	int32_t nReturnValue;

// LINE 1581:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1584:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1585:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 1586:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    nReturnValue, eax;
// LINE 1587:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x004B3093;
// LINE 1588:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B3077;
// LINE 1589:
	__asm        jmp    near ptr 0x004B305B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1590:
	__asm        jmp    near ptr 0x004B3093;
// LINE 1591:
	__asm        jmp    near ptr 0x004B307C;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1593:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1594:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004B30A9;
// LINE 1595:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b30ae
int32_t ScrollBarWindow::ComposeSelf() {
	int32_t i;
	long lThumbHeight;
	int32_t nLineUpImageIndexToUse;
	int32_t nLineDownImageIndexToUse;
	long lThumbWidth;
	long lPageDownButtonStartPosition;

// LINE 1603:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1612:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004B30D1;
// LINE 1613:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B35D8;
// LINE 1614:
	__asm        jmp    near ptr 0x004B30D6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x004B30ED;
// LINE 1615:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B35D8;
// LINE 1616:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1619:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B311C;
// LINE 1620:
	__asm        mov    nLineUpImageIndexToUse, 0;
// LINE 1621:
	__asm        mov    nLineDownImageIndexToUse, 4;
// LINE 1623:
	__asm        jmp    near ptr 0x004B312A;
// LINE 1624:
	__asm        mov    nLineUpImageIndexToUse, 6;
// LINE 1625:
	__asm        mov    nLineDownImageIndexToUse, 0xA;
// LINE 1629:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004B313D;
	__asm        jmp    near ptr 0x004B3142;
	__asm        jmp    near ptr 0x004B334F;
	__asm        jmp    near ptr 0x004B3151;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004B334F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD0], 0;
	__asm        je     near ptr 0x004B334F;
// LINE 1633:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jl     near ptr 0x004B334F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jg     near ptr 0x004B334F;
// LINE 1639:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    near ptr 0x004B3199;
// LINE 1640:
	__asm        inc    nLineUpImageIndexToUse;
// LINE 1641:
	__asm        jmp    near ptr 0x004B31AC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    near ptr 0x004B31AC;
// LINE 1642:
	__asm        inc    nLineDownImageIndexToUse;
// LINE 1644:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B31BD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x004B324C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    near ptr 0x004B31F0;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B3237;
	__asm        jmp    near ptr 0x004B3237;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B3220;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B3237;
	__asm        jmp    near ptr 0x004B3237;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B3237;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC0];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B329A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC8], 0;
	__asm        je     near ptr 0x004B329A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0xC8;
	__asm        jbe    near ptr 0x004B3340;
	__asm        jmp    near ptr 0x004B32B9;
	__asm        cmp    dword ptr [ebp-0x24], 0xC8;
	__asm        jbe    near ptr 0x004B3340;
	__asm        jmp    near ptr 0x004B32B9;
	__asm        cmp    dword ptr [ebp-0x38], 0xC8;
	__asm        jbe    near ptr 0x004B3340;
// LINE 1645:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    near ptr 0x004B32DC;
// LINE 1646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 1647:
	__asm        jmp    near ptr 0x004B3340;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    near ptr 0x004B32FF;
// LINE 1648:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1649:
	__asm        jmp    near ptr 0x004B3340;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 3;
	__asm        jne    near ptr 0x004B3322;
// LINE 1650:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE4];
// LINE 1651:
	__asm        jmp    near ptr 0x004B3340;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jne    near ptr 0x004B3340;
// LINE 1652:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1654:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1659:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    lThumbWidth, eax;
// LINE 1660:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    lThumbHeight, eax;
// LINE 1661:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B34A7;
// LINE 1665:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        sub    eax, lThumbWidth;
	__asm        mov    lPageDownButtonStartPosition, eax;
// LINE 1670:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    eax, lThumbWidth;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x004B33DE;
	__asm        mov    eax, lThumbWidth;
	__asm        add    i, eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x004B3426;
// LINE 1673:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*2];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1674:
	__asm        jmp    near ptr 0x004B33D8;
// LINE 1678:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1683:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*2];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1685:
	__asm        jmp    near ptr 0x004B35CE;
// LINE 1689:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineUpImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        sub    eax, lThumbHeight;
	__asm        mov    lPageDownButtonStartPosition, eax;
// LINE 1694:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, lThumbHeight;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x004B3507;
	__asm        mov    eax, lThumbHeight;
	__asm        add    i, eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x004B3551;
// LINE 1697:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*8];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1698:
	__asm        jmp    near ptr 0x004B3501;
// LINE 1702:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        inc    eax;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nLineDownImageIndexToUse;
	__asm        imul   eax, lThumbWidth;
	__asm        push   eax;
	__asm        mov    eax, lPageDownButtonStartPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1707:
	__asm        mov    eax, lThumbHeight;
	__asm        push   eax;
	__asm        mov    eax, lThumbWidth;
	__asm        lea    eax, [eax+eax*8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lThumbWidth;
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1709:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B35D8;
// LINE 1710:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b35dd
long ScrollBarWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1716:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1717:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1719:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xCC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B383F;
// LINE 1720:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 1;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1722:
	__asm        jmp    near ptr 0x004B3640;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        jne    near ptr 0x004B3655;
	__asm        jmp    near ptr 0x004B36E6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    near ptr 0x004B3678;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B36BF;
	__asm        jmp    near ptr 0x004B36BF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B36A8;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B36BF;
	__asm        jmp    near ptr 0x004B36BF;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B36BF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC0];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0xC4], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        jmp    near ptr 0x004B36E6;
// LINE 1723:
	__asm        jmp    near ptr 0x004B36EB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x004B3700;
	__asm        jmp    near ptr 0x004B3781;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 1;
	__asm        jne    near ptr 0x004B3729;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x004B377C;
	__asm        jmp    near ptr 0x004B377C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B375F;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x004B377C;
	__asm        jmp    near ptr 0x004B377C;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x004B377C;
	__asm        jmp    near ptr 0x004B3781;
// LINE 1724:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1726:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 1;
	__asm        jne    near ptr 0x004B37BD;
// LINE 1727:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 1728:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3849;
// LINE 1730:
	__asm        jmp    near ptr 0x004B383F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 2;
	__asm        jne    near ptr 0x004B37EA;
// LINE 1731:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1732:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3849;
// LINE 1734:
	__asm        jmp    near ptr 0x004B383F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 3;
	__asm        jne    near ptr 0x004B3817;
// LINE 1735:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE4];
// LINE 1736:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3849;
// LINE 1738:
	__asm        jmp    near ptr 0x004B383F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 4;
	__asm        jne    near ptr 0x004B383F;
// LINE 1739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1740:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3849;
// LINE 1749:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3849;
// LINE 1750:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b3850
long ScrollBarWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
	long lNewValue;

// LINE 1757:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1760:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004B386F;
	__asm        jmp    near ptr 0x004B3874;
	__asm        jmp    near ptr 0x004B38D3;
	__asm        jmp    near ptr 0x004B3883;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B38D3;
// LINE 1761:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1762:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 5;
	__asm        jne    near ptr 0x004B38D3;
// LINE 1763:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B38D3;
// LINE 1764:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1767:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B38DD;
// LINE 1768:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b38e4
long ScrollBarWindow::DoCursorMove(long nCursorX, long nCursorY) {
	enum ScrollBarWindow::ScrollHitTestResult currentScrollHitTestResult;
	long lNewValue;

// LINE 1775:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1779:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004B3903;
	__asm        jmp    near ptr 0x004B3908;
	__asm        jmp    near ptr 0x004B39BF;
	__asm        jmp    near ptr 0x004B3917;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004B39BF;
// LINE 1780:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 5;
	__asm        jne    near ptr 0x004B395A;
// LINE 1781:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B3955;
// LINE 1782:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1784:
	__asm        jmp    near ptr 0x004B39BF;
// LINE 1785:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, currentScrollHitTestResult;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B398E;
// LINE 1786:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
// LINE 1787:
	__asm        jmp    near ptr 0x004B39BF;
// LINE 1788:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentScrollHitTestResult;
	__asm        cmp    [eax+0xCC], ecx;
	__asm        jne    near ptr 0x004B39B2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 1;
	__asm        jmp    near ptr 0x004B39BF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
// LINE 1791:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B39C9;
// LINE 1792:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b39d0
void ScrollBarWindow::MoveLinePrevious() {
	long lValueDelta;
	long lNewValue;

// LINE 1800:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1801:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB4];
	__asm        mov    lValueDelta, eax;
// LINE 1804:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x78], ecx;
	__asm        jge    near ptr 0x004B3A3C;
// LINE 1805:
	__asm        mov    ecx, this;
	__asm        call   0x004B271B;
	__asm        sub    eax, lValueDelta;
	__asm        mov    lNewValue, eax;
// LINE 1806:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    near ptr 0x004B3A30;
// LINE 1807:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    lNewValue, eax;
// LINE 1808:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1810:
	__asm        jmp    near ptr 0x004B3A41;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3a46
void ScrollBarWindow::MoveLineNext() {
	long lValueDelta;
	long lNewValue;

// LINE 1818:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1819:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB4];
	__asm        mov    lValueDelta, eax;
// LINE 1822:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x004B3AB4;
// LINE 1823:
	__asm        mov    ecx, this;
	__asm        call   0x004B271B;
	__asm        mov    ecx, lValueDelta;
	__asm        add    ecx, eax;
	__asm        mov    lNewValue, ecx;
// LINE 1824:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    near ptr 0x004B3AA8;
// LINE 1825:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    lNewValue, eax;
// LINE 1826:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1828:
	__asm        jmp    near ptr 0x004B3AB9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3abe
void ScrollBarWindow::MovePagePrevious() {
	long lValueDelta;
	long lNewValue;

// LINE 1835:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1836:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lValueDelta, eax;
// LINE 1839:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x004B3B2A;
// LINE 1840:
	__asm        mov    ecx, this;
	__asm        call   0x004B271B;
	__asm        sub    eax, lValueDelta;
	__asm        mov    lNewValue, eax;
// LINE 1841:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jle    near ptr 0x004B3B1E;
// LINE 1842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    lNewValue, eax;
// LINE 1843:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1845:
	__asm        jmp    near ptr 0x004B3B2F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3b34
void ScrollBarWindow::MovePageNext() {
	long lValueDelta;
	long lNewValue;

// LINE 1852:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1853:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lValueDelta, eax;
// LINE 1856:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x004B3BA2;
// LINE 1857:
	__asm        mov    ecx, this;
	__asm        call   0x004B271B;
	__asm        mov    ecx, lValueDelta;
	__asm        add    ecx, eax;
	__asm        mov    lNewValue, ecx;
// LINE 1858:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewValue;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    near ptr 0x004B3B96;
// LINE 1859:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    lNewValue, eax;
// LINE 1860:
	__asm        mov    eax, lNewValue;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B273A;
// LINE 1862:
	__asm        jmp    near ptr 0x004B3BA7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3bac
void ScrollBarWindow::SetLineAndPageCount(long lNewLineCount, long lNewPageCount) {
// LINE 1872:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1873:
	__asm        cmp    lNewLineCount, 0;
	__asm        jle    near ptr 0x004B3BCC;
	__asm        cmp    lNewPageCount, 0;
	__asm        jg     near ptr 0x004B3BD1;
// LINE 1874:
	__asm        jmp    near ptr 0x004B3C41;
// LINE 1876:
	__asm        cmp    lNewLineCount, 0;
	__asm        jne    near ptr 0x004B3BF5;
// LINE 1877:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 1878:
	__asm        jmp    near ptr 0x004B3C01;
// LINE 1879:
	__asm        mov    eax, lNewLineCount;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 1880:
	__asm        cmp    lNewPageCount, 0;
	__asm        jne    near ptr 0x004B3C22;
// LINE 1881:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 1882:
	__asm        jmp    near ptr 0x004B3C2E;
// LINE 1883:
	__asm        mov    eax, lNewPageCount;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 1884:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1885:
	__asm        jmp    near ptr 0x004B3C41;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b3c48
long ScrollBarWindow::GetCurrentLine() {
	long lValueRange;

// LINE 1892:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueRange, eax;
// LINE 1895:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x004B3C7A;
// LINE 1896:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B3C9F;
// LINE 1897:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        dec    ecx;
	__asm        imul   eax, ecx;
	__asm        cdq;
	__asm        idiv   lValueRange;
	__asm        jmp    near ptr 0x004B3C9F;
// LINE 1898:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3ca4
long ScrollBarWindow::GetValueOfGivenLine(long lLine) {
	long lValueRange;

// LINE 1905:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1906:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueRange, eax;
// LINE 1908:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x004B3CDA;
// LINE 1909:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        jmp    near ptr 0x004B3CF9;
// LINE 1910:
	__asm        mov    eax, lValueRange;
	__asm        imul   eax, lLine;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        jmp    near ptr 0x004B3CF9;
// LINE 1911:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b3d00
long ScrollBarWindow::GetCurrentPage() {
	long lValueRange;

// LINE 1919:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1920:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueRange, eax;
// LINE 1922:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 1;
	__asm        jne    near ptr 0x004B3D32;
// LINE 1923:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B3D57;
// LINE 1924:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB8];
	__asm        dec    ecx;
	__asm        imul   eax, ecx;
	__asm        cdq;
	__asm        idiv   lValueRange;
	__asm        jmp    near ptr 0x004B3D57;
// LINE 1925:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b3d5c
long ScrollBarWindow::GetValueOfGivenPage(long lPage) {
	long lValueRange;

// LINE 1932:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1933:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    lValueRange, eax;
// LINE 1935:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 1;
	__asm        jne    near ptr 0x004B3D92;
// LINE 1936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        jmp    near ptr 0x004B3DB1;
// LINE 1937:
	__asm        mov    eax, lValueRange;
	__asm        imul   eax, lPage;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB8];
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        jmp    near ptr 0x004B3DB1;
// LINE 1938:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b3db8
int32_t ScrollBarWindow::DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult& nNewScrollHitTestResult, long nCursorX, long nCursorY) {
	int32_t nPrevNextButtonWidth;
	int32_t nPrevNextButtonHeight;

// LINE 1964:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1968:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B3DF2;
// LINE 1969:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 0;
// LINE 1970:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B3F6C;
// LINE 1973:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B3EB3;
// LINE 1974:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        mov    nPrevNextButtonWidth, eax;
// LINE 1975:
	__asm        mov    eax, nCursorX;
	__asm        cmp    nPrevNextButtonWidth, eax;
	__asm        jle    near ptr 0x004B3E2A;
// LINE 1976:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 1;
// LINE 1977:
	__asm        jmp    near ptr 0x004B3EAE;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jle    near ptr 0x004B3E4A;
// LINE 1978:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 3;
// LINE 1979:
	__asm        jmp    near ptr 0x004B3EAE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, nCursorX;
	__asm        jle    near ptr 0x004B3E7A;
// LINE 1980:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 5;
// LINE 1981:
	__asm        jmp    near ptr 0x004B3EAE;
	__asm        jmp    near ptr 0x004B3E7F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, nPrevNextButtonWidth;
	__asm        cmp    eax, nCursorX;
	__asm        jle    near ptr 0x004B3EA5;
// LINE 1982:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 4;
// LINE 1983:
	__asm        jmp    near ptr 0x004B3EAE;
// LINE 1984:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 2;
// LINE 1986:
	__asm        jmp    near ptr 0x004B3F62;
// LINE 1987:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        mov    nPrevNextButtonHeight, eax;
// LINE 1988:
	__asm        mov    eax, nCursorY;
	__asm        cmp    nPrevNextButtonHeight, eax;
	__asm        jle    near ptr 0x004B3EDE;
// LINE 1989:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 1;
// LINE 1990:
	__asm        jmp    near ptr 0x004B3F62;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jle    near ptr 0x004B3EFE;
// LINE 1991:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 3;
// LINE 1992:
	__asm        jmp    near ptr 0x004B3F62;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, nCursorY;
	__asm        jle    near ptr 0x004B3F2E;
// LINE 1993:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 5;
// LINE 1994:
	__asm        jmp    near ptr 0x004B3F62;
	__asm        jmp    near ptr 0x004B3F33;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        sub    eax, nPrevNextButtonHeight;
	__asm        cmp    eax, nCursorY;
	__asm        jle    near ptr 0x004B3F59;
// LINE 1995:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 4;
// LINE 1996:
	__asm        jmp    near ptr 0x004B3F62;
// LINE 1997:
	__asm        mov    eax, nNewScrollHitTestResult;
	__asm        mov    dword ptr [eax], 2;
// LINE 1999:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B3F6C;
// LINE 2000:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b3f73
void ScrollBarWindow::CalculateAllMetrics() {
// LINE 2007:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2008:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x004B3FE2;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2010:
	__asm        jmp    near ptr 0x004B3FA8;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 2012:
	__asm        jmp    near ptr 0x004B4033;
// LINE 2013:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2014:
	__asm        jmp    near ptr 0x004B3FFE;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        sub    ebx, [eax+0x14];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x8C], ebx;
// LINE 2016:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 2017:
	__asm        jmp    near ptr 0x004B4046;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b404b
long ScrollBarWindow::GetThumbWidth() {
// LINE 2027:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2028:
	__asm        jmp    near ptr 0x004B405C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, 0xC;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        jmp    near ptr 0x004B4072;
// LINE 2029:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b4077
long ScrollBarWindow::GetThumbHeight() {
// LINE 2035:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2036:
	__asm        jmp    near ptr 0x004B4088;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x004B4096;
// LINE 2037:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b409b
long ScrollBarWindow::GetPrevNextButtonWidth() {
// LINE 2044:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2045:
	__asm        jmp    near ptr 0x004B40AC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x004B40BA;
// LINE 2046:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b40bf
long ScrollBarWindow::GetPrevNextButtonHeight() {
// LINE 2053:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2054:
	__asm        jmp    near ptr 0x004B40D0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x004B40DE;
// LINE 2055:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b40e3
void ListBoxWindow::ListBoxWindow() {
// LINE 2076:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x59856C], 0;
	__asm        je     near ptr 0x004B4133;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59856C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B430A;
	__asm        mov    eax, ds:[0x598568];
	__asm        cmp    ds:[0x598564], eax;
	__asm        jne    near ptr 0x004B42F5;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x004B4192;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B4188;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B4197;
	__asm        jmp    near ptr 0x004B419C;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B41D7;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B41DD;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B41E2;
	__asm        jmp    near ptr 0x004B41E7;
	__asm        jmp    near ptr 0x004B41EC;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x004B4247;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B423D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B424C;
	__asm        jmp    near ptr 0x004B4251;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x598570], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x598568], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B42AE;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B42B4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B42B9;
	__asm        jmp    near ptr 0x004B42BE;
	__asm        jmp    near ptr 0x004B42C3;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, ds:[0x598568];
	__asm        mov    ds:[0x598564], eax;
	__asm        jmp    near ptr 0x004B42DB;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B430A;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B430F;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B433A;
	__asm        jmp    near ptr 0x004B433F;
	__asm        jmp    near ptr 0x004B4344;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5920C8;
// LINE 2079:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7D], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7D];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], al;
// LINE 2082:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x80], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x81], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x81];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x82], al;
// LINE 2083:
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2084:
	__asm        mov    eax, ds:[0x606968];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 2085:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
// LINE 2086:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0xFFFFFFFF;
// LINE 2087:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
// LINE 2088:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 2089:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xA;
// LINE 2090:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 2091:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 2092:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
// LINE 2093:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 2094:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 2095:
	__asm        mov    ecx, this;
	__asm        call   0x004B4867;
// LINE 2096:
	__asm        jmp    near ptr 0x004B445A;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b4462
void ListBoxWindow::ListBoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 2105:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x59856C], 0;
	__asm        je     near ptr 0x004B44C6;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59856C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B469D;
	__asm        mov    eax, ds:[0x598568];
	__asm        cmp    ds:[0x598564], eax;
	__asm        jne    near ptr 0x004B4688;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x004B4525;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B451B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B452A;
	__asm        jmp    near ptr 0x004B452F;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B456A;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B4570;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B4575;
	__asm        jmp    near ptr 0x004B457A;
	__asm        jmp    near ptr 0x004B457F;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x004B45DA;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B45D0;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B45DF;
	__asm        jmp    near ptr 0x004B45E4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x598570], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x598568], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B4641;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B4647;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B464C;
	__asm        jmp    near ptr 0x004B4651;
	__asm        jmp    near ptr 0x004B4656;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, ds:[0x598568];
	__asm        mov    ds:[0x598564], eax;
	__asm        jmp    near ptr 0x004B466E;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B469D;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B46A2;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B46CD;
	__asm        jmp    near ptr 0x004B46D2;
	__asm        jmp    near ptr 0x004B46D7;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5920C8;
// LINE 2108:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7D], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x7D];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], al;
// LINE 2111:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x80], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x81], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x81];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x82], al;
// LINE 2112:
	__asm        mov    eax, ds:[0x606974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2113:
	__asm        mov    eax, ds:[0x606968];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 2114:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
// LINE 2115:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0xFFFFFFFF;
// LINE 2116:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
// LINE 2117:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 2118:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xA;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 2120:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 2121:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
// LINE 2122:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 2123:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 2124:
	__asm        mov    ecx, this;
	__asm        call   0x004B4867;
// LINE 2125:
	__asm        jmp    near ptr 0x004B47ED;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004b47f7
int32_t ListBoxWindow::Initialize() {
// LINE 2132:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2133:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 2134:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
	__asm        jmp    near ptr 0x004B481D;
// LINE 2135:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b4822
int32_t ListBoxWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2141:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2142:
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x004B4859;
// LINE 2144:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x004B4859;
// LINE 2146:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2149:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B4860;
// LINE 2150:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004b4867
void ListBoxWindow::CalculateAllMetrics() {
	int32_t nReturnValue;
	long lHeight;
	long lWidth;

// LINE 2157:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2161:
	__asm        lea    eax, lHeight;
	__asm        push   eax;
	__asm        lea    eax, lWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x004A02B1;
	__asm        mov    nReturnValue, eax;
// LINE 2162:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x004B48C8;
// LINE 2163:
	__asm        mov    eax, lHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 2164:
	__asm        jmp    near ptr 0x004B48A9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 2166:
	__asm        jmp    near ptr 0x004B48CD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b48d2
void ListBoxWindow::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
// LINE 2172:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2173:
	__asm        mov    eax, lNewAttributes;
	__asm        push   eax;
	__asm        mov    eax, lNewWidth;
	__asm        push   eax;
	__asm        mov    eax, lNewHeight;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x004A015D;
// LINE 2174:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 2175:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2176:
	__asm        jmp    near ptr 0x004B491A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b4921
int32_t ListBoxWindow::ResizeWindowForExactLineHeights() {
	long lNewVisibleLines;
	long lOriginalHeight;
	long lFixedHeight;

// LINE 2188:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2193:
	__asm        jmp    near ptr 0x004B4932;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    lOriginalHeight, eax;
// LINE 2194:
	__asm        mov    ecx, this;
	__asm        mov    eax, lOriginalHeight;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lNewVisibleLines, eax;
// LINE 2195:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, lNewVisibleLines;
	__asm        mov    lFixedHeight, eax;
// LINE 2196:
	__asm        mov    eax, lOriginalHeight;
	__asm        cmp    lFixedHeight, eax;
	__asm        je     near ptr 0x004B498A;
// LINE 2197:
	__asm        mov    eax, lFixedHeight;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 2198:
	__asm        mov    eax, lNewVisibleLines;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 2200:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2201:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x154];
// LINE 2202:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B49B1;
// LINE 2203:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b49b6
void ListBoxWindow::SetBackgroundDrawing(int32_t bNewBackgroundDrawing) {
// LINE 2210:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2211:
	__asm        cmp    bNewBackgroundDrawing, 0;
	__asm        je     near ptr 0x004B49EB;
// LINE 2212:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0xFF;
// LINE 2213:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 2215:
	__asm        jmp    near ptr 0x004B4A05;
// LINE 2216:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0xFFFFFFFE;
// LINE 2217:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFE;
// LINE 2219:
	__asm        jmp    near ptr 0x004B4A0A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b4a11
void ListBoxWindow::SetBackgroundPaletteIndex(int32_t nNewBackgroundIndex, int32_t nNewBackgroundIndexHighlighted) {
// LINE 2227:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2228:
	__asm        cmp    nNewBackgroundIndex, 0xFFFFFFFF;
	__asm        je     near ptr 0x004B4A33;
// LINE 2229:
	__asm        mov    eax, nNewBackgroundIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 2230:
	__asm        cmp    nNewBackgroundIndexHighlighted, 0xFFFFFFFF;
	__asm        je     near ptr 0x004B4A49;
// LINE 2231:
	__asm        mov    eax, nNewBackgroundIndexHighlighted;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 2232:
	__asm        jmp    near ptr 0x004B4A4E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b4a55
void ListBoxWindow::SetTextColor(const struct SparkalColor* colorNewFont, const struct SparkalColor* colorNewFontHighlighted) {
// LINE 2241:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2242:
	__asm        cmp    colorNewFont, 0;
	__asm        je     near ptr 0x004B4A76;
// LINE 2243:
	__asm        mov    eax, colorNewFont;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 2244:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     near ptr 0x004B4A8E;
// LINE 2245:
	__asm        mov    eax, colorNewFontHighlighted;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 2246:
	__asm        jmp    near ptr 0x004B4A93;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b4a9a
int32_t ListBoxWindow::DrawSelf() {
	int32_t j;
	int32_t i;
	class list<basic_string<char>>::iterator tempStringListIterator;
	class MRect rectHighlighted;
	long lRelativeCurrentSelection;
	class MRect rectCurrentText;

// LINE 2253:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xBC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2258:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B4AC5;
	__asm        jmp    near ptr 0x004B4ACA;
// LINE 2259:
	__asm        jmp    near ptr 0x004B4ACF;
	__asm        jmp    near ptr 0x004B4AD4;
// LINE 2260:
	__asm        jmp    near ptr 0x004B4AD9;
	__asm        jmp    near ptr 0x004B4ADE;
// LINE 2264:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004B4AF5;
// LINE 2265:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B5209;
// LINE 2267:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0xFFFFFFFE;
	__asm        je     near ptr 0x004B4B36;
// LINE 2268:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2269:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004B4C2C;
// LINE 2270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x104];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B4C2C;
// LINE 2271:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB4];
	__asm        mov    lRelativeCurrentSelection, eax;
// LINE 2272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    rectHighlighted.left, eax;
// LINE 2273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    rectHighlighted.right, eax;
// LINE 2274:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, lRelativeCurrentSelection;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    rectHighlighted.top, eax;
// LINE 2275:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        add    eax, rectHighlighted.top;
	__asm        mov    rectHighlighted.bottom, eax;
// LINE 2276:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectHighlighted.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    near ptr 0x004B4BF1;
// LINE 2277:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    rectHighlighted.bottom, eax;
// LINE 2278:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0xFFFFFFFE;
	__asm        je     near ptr 0x004B4C2C;
// LINE 2279:
	__asm        lea    eax, rectHighlighted.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    eax, 5;
	__asm        mov    rectCurrentText.left, eax;
// LINE 2284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    rectCurrentText.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x64], eax;
// LINE 2286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004B4C67;
// LINE 2289:
	__asm        mov    i, 0;
// LINE 2290:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    near ptr 0x004B4D03;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B4C9A;
	__asm        jmp    near ptr 0x004B4C9F;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x004B4CB5;
	__asm        jmp    near ptr 0x004B4CC9;
	__asm        jmp    near ptr 0x004B4CB5;
	__asm        jmp    near ptr 0x004B4CC4;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        jne    near ptr 0x004B4CC9;
	__asm        jmp    near ptr 0x004B4CCE;
	__asm        jmp    near ptr 0x004B4D03;
	__asm        jmp    near ptr 0x004B4CDD;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004B4D03;
// LINE 2291:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B4CF0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B4CFB;
// LINE 2292:
	__asm        inc    i;
// LINE 2293:
	__asm        jmp    near ptr 0x004B4C6E;
// LINE 2296:
	__asm        mov    j, 0;
// LINE 23:
	__asm        jmp    near ptr 0x004B4D12;
// LINE 2296:
	__asm        inc    j;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004B4D29;
	__asm        jmp    near ptr 0x004B4D2E;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x004B4D44;
	__asm        jmp    near ptr 0x004B4D58;
	__asm        jmp    near ptr 0x004B4D44;
	__asm        jmp    near ptr 0x004B4D53;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004B4D58;
	__asm        jmp    near ptr 0x004B4D5D;
	__asm        jmp    near ptr 0x004B51DC;
	__asm        jmp    near ptr 0x004B4D6C;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004B51DC;
	__asm        mov    eax, this;
	__asm        mov    ecx, j;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    near ptr 0x004B51DC;
// LINE 2297:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    near ptr 0x004B4FBE;
// LINE 2298:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, j;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    rectCurrentText.top, eax;
// LINE 2299:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        add    eax, rectCurrentText.top;
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 2300:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    near ptr 0x004B4DE2;
// LINE 2301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 2302:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004B4E05;
// LINE 2305:
	__asm        jmp    near ptr 0x004B4E0A;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004B4E42;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B4E47;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B4E6A;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B4F06;
	__asm        jmp    near ptr 0x004B4E82;
	__asm        jmp    near ptr 0x004B4E87;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B4EB5;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004B4EC4;
	__asm        jmp    near ptr 0x004B4EC4;
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    near ptr 0x004B4EC4;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B4F06;
	__asm        jmp    near ptr 0x004B4F0B;
	__asm        mov    byte ptr [ebp-0x78], 0;
	__asm        jmp    near ptr 0x004B4F14;
	__asm        lea    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004B4F1F;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x94];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004B4F4B;
	__asm        jmp    near ptr 0x004B4F50;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x48], eax;
// LINE 2306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004B4FB9;
// LINE 2308:
	__asm        jmp    near ptr 0x004B51B6;
// LINE 2309:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, j;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    rectCurrentText.top, eax;
// LINE 2310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        add    eax, rectCurrentText.top;
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 2311:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    near ptr 0x004B500A;
// LINE 2312:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 2315:
	__asm        jmp    near ptr 0x004B500F;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004B5053;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5058;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B507B;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B5117;
	__asm        jmp    near ptr 0x004B5093;
	__asm        jmp    near ptr 0x004B5098;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B50C6;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004B50D5;
	__asm        jmp    near ptr 0x004B50D5;
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    near ptr 0x004B50D5;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B5117;
	__asm        jmp    near ptr 0x004B511C;
	__asm        mov    byte ptr [ebp-0x9C], 0;
	__asm        jmp    near ptr 0x004B5128;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004B5139;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004B5168;
	__asm        jmp    near ptr 0x004B516D;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 2317:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B51C9;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004B51D4;
// LINE 2318:
	__asm        inc    i;
// LINE 2319:
	__asm        jmp    near ptr 0x004B4D0F;
// LINE 2321:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x004B51FF;
// LINE 2322:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 2323:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B5209;
// LINE 2324:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b520e
int32_t ListBoxWindow::RemoveString(class basic_string<char>& sToRemove) {
	long lIndex;
	int32_t nReturnValue;

// LINE 2338:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2342:
	__asm        mov    eax, sToRemove;
	__asm        push   eax;
	__asm        lea    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x140];
	__asm        mov    nReturnValue, eax;
// LINE 2343:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x004B5254;
// LINE 2344:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        jmp    near ptr 0x004B525B;
// LINE 2346:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B525B;
// LINE 2347:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b5262
int32_t ListBoxWindow::RemoveString(long lIndex) {
	long lOriginalLineCount;
	long lNewSelection;

// LINE 2354:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2355:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2358:
	__asm        mov    eax, lOriginalLineCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jge    near ptr 0x004B5293;
// LINE 2359:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B5340;
// LINE 2362:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x144];
// LINE 2365:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    near ptr 0x004B52E8;
// LINE 2366:
	__asm        mov    eax, lOriginalLineCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jne    near ptr 0x004B52E3;
// LINE 2367:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    eax;
	__asm        mov    lNewSelection, eax;
// LINE 2368:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2371:
	__asm        jmp    near ptr 0x004B5319;
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    near ptr 0x004B5319;
// LINE 2372:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    eax;
	__asm        mov    lNewSelection, eax;
// LINE 2373:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2375:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2376:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2377:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B5340;
// LINE 2378:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b5347
void ListBoxWindow::RemoveAllStrings() {
// LINE 2385:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2386:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B5367;
	__asm        jmp    near ptr 0x004B536C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B5382;
	__asm        jmp    near ptr 0x004B5387;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jne    near ptr 0x004B53A9;
	__asm        jmp    near ptr 0x004B53BD;
	__asm        jmp    near ptr 0x004B53A9;
	__asm        jmp    near ptr 0x004B53B8;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004B53BD;
	__asm        jmp    near ptr 0x004B53C2;
	__asm        jmp    near ptr 0x004B54E1;
	__asm        jmp    near ptr 0x004B53D1;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B54E1;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004B53E4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004B53EF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B5415;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B546A;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004B546A;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004B5454;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5465;
	__asm        jmp    near ptr 0x004B546A;
	__asm        jmp    near ptr 0x004B546F;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B5497;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B549C;
	__asm        jmp    near ptr 0x004B54B0;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B54B5;
	__asm        jmp    near ptr 0x004B54BA;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x004B54D1;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x78];
	__asm        jmp    near ptr 0x004B54DC;
	__asm        jmp    near ptr 0x004B5393;
	__asm        jmp    near ptr 0x004B54E6;
// LINE 2387:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2388:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 2389:
	__asm        jmp    near ptr 0x004B5509;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b550e
int32_t ListBoxWindow::InsertString(class basic_string<char>& sToAdd, long lIndex) {
	long lOriginalLineCount;
	long lNewSelection;

// LINE 2396:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2397:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2400:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B5540;
// LINE 2401:
	__asm        mov    eax, lOriginalLineCount;
	__asm        mov    lIndex, eax;
// LINE 2402:
	__asm        jmp    near ptr 0x004B5551;
	__asm        cmp    lIndex, 0;
	__asm        jge    near ptr 0x004B5551;
// LINE 2403:
	__asm        mov    lIndex, 0;
// LINE 2405:
	__asm        mov    eax, sToAdd;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x148];
// LINE 2408:
	__asm        cmp    lOriginalLineCount, 0;
	__asm        jne    near ptr 0x004B558F;
// LINE 2409:
	__asm        mov    lNewSelection, 0;
// LINE 2410:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2412:
	__asm        jmp    near ptr 0x004B55C0;
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jl     near ptr 0x004B55C0;
// LINE 2413:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        inc    eax;
	__asm        mov    lNewSelection, eax;
// LINE 2414:
	__asm        mov    eax, lNewSelection;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2419:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2421:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B55E7;
// LINE 2422:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b55ee
int32_t ListBoxWindow::InsertString(long lResourceIndex, long lInsertPosition) {
	class basic_string<char> sNew;
	int32_t nFullStringID;

// LINE 2430:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1078;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2432:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B5654;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B5649;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    near ptr 0x004B565B;
	__asm        mov    sNew.reference, 0;
	__asm        mov    sNew.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004B5667;
// LINE 2434:
	__asm        push   0;
	__asm        mov    eax, lResourceIndex;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2435:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    near ptr 0x004B5995;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    near ptr 0x004B56D7;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B5731;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5722;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5731;
	__asm        jmp    near ptr 0x004B5736;
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B5767;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x004B57C8;
	__asm        jmp    near ptr 0x004B5755;
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B57C8;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x004B57A8;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x004B57B2;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    near ptr 0x004B5807;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x004B5807;
	__asm        jmp    near ptr 0x004B57DA;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B5807;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sNew.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B5818;
	__asm        jmp    near ptr 0x004B581D;
	__asm        jmp    near ptr 0x004B5822;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    near ptr 0x004B583A;
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004B5889;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B587A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5889;
	__asm        jmp    near ptr 0x004B588E;
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B58BD;
	__asm        jmp    near ptr 0x004B58A0;
	__asm        jmp    near ptr 0x004B58A5;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sNew.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    near ptr 0x004B5932;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x004B5917;
	__asm        jmp    near ptr 0x004B58DF;
	__asm        jmp    near ptr 0x004B58E4;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x004B5921;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        lea    ecx, sNew.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sNew.reference, eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x004B597A;
	__asm        jmp    near ptr 0x004B5944;
	__asm        jmp    near ptr 0x004B5949;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sNew.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B597A;
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sNew.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B598B;
	__asm        jmp    near ptr 0x004B5990;
	__asm        jmp    near ptr 0x004B5B29;
	__asm        jmp    near ptr 0x004B599A;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004B59F4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B59E5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B59F4;
	__asm        jmp    near ptr 0x004B59F9;
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004B5A2A;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x004B5ACF;
	__asm        jmp    near ptr 0x004B5A18;
	__asm        mov    eax, sNew.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004B5ACF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x004B5A6B;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    near ptr 0x004B5A75;
	__asm        mov    dword ptr [ebp-0x105C], 0;
	__asm        mov    eax, sNew.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B5ABC;
	__asm        mov    eax, sNew.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x004B5ABC;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004B5ABC;
	__asm        jmp    near ptr 0x004B5AC1;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sNew.reference, eax;
	__asm        jmp    near ptr 0x004B5B0E;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x004B5B0E;
	__asm        jmp    near ptr 0x004B5AE1;
	__asm        mov    eax, sNew.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B5B0E;
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sNew.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B5B1F;
	__asm        jmp    near ptr 0x004B5B24;
	__asm        jmp    near ptr 0x004B5B29;
// LINE 2436:
	__asm        mov    eax, lInsertPosition;
	__asm        push   eax;
	__asm        lea    eax, sNew.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sNew.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sNew.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B5BCB;
	__asm        mov    eax, sNew.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B5BCB;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B5BAB;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B5BB0;
	__asm        jmp    near ptr 0x004B5BB5;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5BC6;
	__asm        jmp    near ptr 0x004B5BCB;
	__asm        jmp    near ptr 0x004B5BD0;
	__asm        cmp    sNew.c_str_ptr, 0;
	__asm        je     near ptr 0x004B5BF2;
	__asm        mov    eax, sNew.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5BF7;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x004B5BFF;
// LINE 2437:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b5c06
int32_t ListBoxWindow::ModifyString(long lIndex, class basic_string<char>& sNew) {
	class basic_string<char>* sAddress;

// LINE 2445:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2448:
	__asm        lea    eax, sAddress;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x138];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B5E13;
	__asm        mov    eax, sAddress;
	__asm        mov    [ebp-0x2C], eax;
// LINE 2449:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    sNew, eax;
	__asm        je     near ptr 0x004B5DF5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B5CCE;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004B5CCE;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B5CAE;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B5CB3;
	__asm        jmp    near ptr 0x004B5CB8;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5CC9;
	__asm        jmp    near ptr 0x004B5CCE;
	__asm        jmp    near ptr 0x004B5CD3;
	__asm        jmp    near ptr 0x004B5CD8;
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004B5D02;
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004B5DF5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B5DEB;
	__asm        jmp    near ptr 0x004B5D1E;
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B5DC5;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B5D65;
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B5D8A;
	__asm        mov    eax, sNew;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004B5D96;
	__asm        jmp    near ptr 0x004B5D96;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x004B5D96;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B5DC0;
	__asm        jmp    near ptr 0x004B5DCE;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B5DDD;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B5DF5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004B5DFA;
// LINE 2450:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2451:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B5E1A;
// LINE 2453:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B5E1A;
// LINE 2454:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b5e21
int32_t ListBoxWindow::GetStringAddressFromIndex(long lIndex, class basic_string<char>*& sFound) {
	long lStringCount;
	long i;
	class list<basic_string<char>>::iterator tempStringListIterator;

// LINE 2464:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2466:
	__asm        jmp    near ptr 0x004B5E32;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    lStringCount, eax;
// LINE 2468:
	__asm        mov    eax, lStringCount;
	__asm        dec    eax;
	__asm        cmp    eax, lIndex;
	__asm        jge    near ptr 0x004B5E4F;
// LINE 2469:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B5ED5;
// LINE 2471:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B5E65;
	__asm        jmp    near ptr 0x004B5E6A;
// LINE 2473:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004B5E79;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    lStringCount, eax;
	__asm        jle    near ptr 0x004B5ECE;
// LINE 2474:
	__asm        mov    eax, lIndex;
	__asm        cmp    i, eax;
	__asm        jne    near ptr 0x004B5EAB;
// LINE 2477:
	__asm        jmp    near ptr 0x004B5E96;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    ecx, sFound;
	__asm        mov    [ecx], eax;
// LINE 2478:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B5ED5;
// LINE 2480:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B5EBE;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B5EC9;
// LINE 2481:
	__asm        jmp    near ptr 0x004B5E76;
// LINE 2482:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B5ED5;
// LINE 2483:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b5edc
int32_t ListBoxWindow::GetStringFromIndex(long lIndex, class basic_string<char>& sFound) {
	class basic_string<char>* sAddress;

// LINE 2495:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2498:
	__asm        lea    eax, sAddress;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x138];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B60D0;
	__asm        mov    eax, sAddress;
	__asm        mov    [ebp-0x2C], eax;
// LINE 2499:
	__asm        mov    eax, sFound;
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     near ptr 0x004B60CB;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B5FA4;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004B5FA4;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B5F84;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B5F89;
	__asm        jmp    near ptr 0x004B5F8E;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B5F9F;
	__asm        jmp    near ptr 0x004B5FA4;
	__asm        jmp    near ptr 0x004B5FA9;
	__asm        jmp    near ptr 0x004B5FAE;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004B5FD8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFound;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004B60CB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004B60C1;
	__asm        jmp    near ptr 0x004B5FF4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B609B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B603B;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B6060;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004B606C;
	__asm        jmp    near ptr 0x004B606C;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x004B606C;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B6096;
	__asm        jmp    near ptr 0x004B60A4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B60B3;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sFound;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B60CB;
	__asm        mov    eax, sFound;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004B60D0;
// LINE 2501:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B60D7;
// LINE 2502:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b60de
int32_t ListBoxWindow::GetIndexFromString(long& lIndex, class basic_string<char>& sFound) {
	long i;
	class list<basic_string<char>>::iterator tempStringListIterator;

// LINE 2510:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2511:
	__asm        mov    i, 0;
// LINE 2512:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B6107;
	__asm        jmp    near ptr 0x004B610C;
// LINE 2514:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B6120;
	__asm        jmp    near ptr 0x004B6125;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x004B613B;
	__asm        jmp    near ptr 0x004B614F;
	__asm        jmp    near ptr 0x004B613B;
	__asm        jmp    near ptr 0x004B614A;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x004B614F;
	__asm        jmp    near ptr 0x004B6154;
	__asm        jmp    near ptr 0x004B6258;
	__asm        jmp    near ptr 0x004B6163;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004B6258;
// LINE 2515:
	__asm        jmp    near ptr 0x004B6168;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004B6176;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x004B619C;
	__asm        jmp    near ptr 0x004B618B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004B61A3;
	__asm        mov    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004B61A8;
	__asm        jmp    near ptr 0x004B61AD;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B61D2;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004B61DE;
	__asm        jmp    near ptr 0x004B61DE;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004B61DE;
	__asm        jmp    near ptr 0x004B61E3;
	__asm        mov    eax, sFound;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x00410C40;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B620C;
	__asm        jmp    near ptr 0x004B6211;
	__asm        jmp    near ptr 0x004B6232;
	__asm        jmp    near ptr 0x004B6220;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B6232;
// LINE 2516:
	__asm        mov    eax, i;
	__asm        mov    ecx, lIndex;
	__asm        mov    [ecx], eax;
// LINE 2517:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B625F;
// LINE 2519:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B6245;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B6250;
// LINE 2520:
	__asm        inc    i;
// LINE 2521:
	__asm        jmp    near ptr 0x004B610C;
// LINE 2522:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B625F;
// LINE 2523:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b6266
int32_t ListBoxWindow::RemoveStringAtIndex(long lIndex) {
	long lOriginalLineCount;

// LINE 2535:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x58;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2536:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2538:
	__asm        cmp    lOriginalLineCount, 0;
	__asm        jne    near ptr 0x004B6294;
// LINE 2539:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B657E;
// LINE 2541:
	__asm        cmp    lIndex, 0;
	__asm        jne    near ptr 0x004B631E;
// LINE 2542:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B62B4;
	__asm        jmp    near ptr 0x004B62B9;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B62DF;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        add    ecx, 8;
	__asm        call   0x0041DEF0;
	__asm        jmp    near ptr 0x004B62F1;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x004B6308;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004B6314;
	__asm        jmp    near ptr 0x004B6319;
// LINE 2544:
	__asm        jmp    near ptr 0x004B6574;
// LINE 2545:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     near ptr 0x004B6334;
	__asm        mov    eax, lIndex;
	__asm        cmp    lOriginalLineCount, eax;
	__asm        jg     near ptr 0x004B63D7;
// LINE 2547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B6348;
	__asm        jmp    near ptr 0x004B634D;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B635B;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B6381;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        add    ecx, 8;
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x004B63A0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B63A5;
	__asm        jmp    near ptr 0x004B63AA;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x004B63C1;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004B63CD;
	__asm        jmp    near ptr 0x004B63D2;
// LINE 2549:
	__asm        jmp    near ptr 0x004B6574;
// LINE 2550:
// Block start:
	long i;
	class list<basic_string<char>>::iterator tempStringListIterator;
	__asm        mov    i, 0;
// LINE 2551:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B63F4;
	__asm        jmp    near ptr 0x004B63F9;
// LINE 2553:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B640D;
	__asm        jmp    near ptr 0x004B6412;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    near ptr 0x004B6428;
	__asm        jmp    near ptr 0x004B643C;
	__asm        jmp    near ptr 0x004B6428;
	__asm        jmp    near ptr 0x004B6437;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004B643C;
	__asm        jmp    near ptr 0x004B6441;
	__asm        jmp    near ptr 0x004B6574;
	__asm        jmp    near ptr 0x004B6450;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004B6574;
// LINE 2554:
	__asm        mov    eax, i;
	__asm        cmp    lIndex, eax;
	__asm        jne    near ptr 0x004B654E;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x54], eax;
// LINE 2555:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B6482;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B64D7;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x004B64D7;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004B64C1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B64D2;
	__asm        jmp    near ptr 0x004B64D7;
	__asm        jmp    near ptr 0x004B64DC;
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B6504;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B6509;
	__asm        jmp    near ptr 0x004B651D;
	__asm        mov    eax, [ebp-0x54];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B6522;
	__asm        jmp    near ptr 0x004B6527;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x004B653E;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x78];
	__asm        jmp    near ptr 0x004B6549;
// LINE 2556:
	__asm        jmp    near ptr 0x004B6574;
// LINE 2558:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B6561;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004B656C;
// LINE 2559:
	__asm        inc    i;
// LINE 2560:
	__asm        jmp    near ptr 0x004B63F9;
// LINE 2562:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B657E;
// LINE 2563:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6585
int32_t ListBoxWindow::InsertStringAtIndex(long lIndex, class basic_string<char>& sToInsert) {
	long lOriginalLineCount;

// LINE 2580:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xB4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lOriginalLineCount, eax;
// LINE 2584:
	__asm        cmp    lIndex, 0;
	__asm        jne    near ptr 0x004B6670;
// LINE 2585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004B65D1;
	__asm        jmp    near ptr 0x004B65D6;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x004399C0;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B65F2;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004B6600;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004B661F;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   0x00411B80;
	__asm        jmp    near ptr 0x004B661F;
	__asm        jmp    near ptr 0x004B6624;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004B6661;
	__asm        jmp    near ptr 0x004B6666;
	__asm        jmp    near ptr 0x004B666B;
// LINE 2587:
	__asm        jmp    near ptr 0x004B6A9E;
// LINE 2588:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     near ptr 0x004B6686;
	__asm        mov    eax, lOriginalLineCount;
	__asm        cmp    lIndex, eax;
	__asm        jl     near ptr 0x004B673C;
// LINE 2590:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004B669D;
	__asm        jmp    near ptr 0x004B66A2;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x004399C0;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B66BE;
	__asm        mov    eax, [ebp-0x50];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004B66CC;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004B66EB;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x00411B80;
	__asm        jmp    near ptr 0x004B66EB;
	__asm        jmp    near ptr 0x004B66F0;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004B672D;
	__asm        jmp    near ptr 0x004B6732;
	__asm        jmp    near ptr 0x004B6737;
// LINE 2592:
	__asm        jmp    near ptr 0x004B6A9E;
// LINE 2593:
// Block start:
	long i;
	class list<basic_string<char>>::iterator tempStringListIterator;
	__asm        mov    i, 0;
// LINE 2594:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B675C;
	__asm        jmp    near ptr 0x004B6761;
// LINE 2596:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B6778;
	__asm        jmp    near ptr 0x004B677D;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x004B6793;
	__asm        jmp    near ptr 0x004B67A7;
	__asm        jmp    near ptr 0x004B6793;
	__asm        jmp    near ptr 0x004B67A2;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004B67A7;
	__asm        jmp    near ptr 0x004B67AC;
	__asm        jmp    near ptr 0x004B6A9E;
	__asm        jmp    near ptr 0x004B67BB;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004B6A9E;
// LINE 2597:
	__asm        mov    eax, i;
	__asm        cmp    lIndex, eax;
	__asm        jne    near ptr 0x004B6A78;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0xB0], eax;
// LINE 2598:
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr ds:[0x59856C], 0;
	__asm        je     near ptr 0x004B67FF;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59856C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004B69E0;
	__asm        mov    eax, ds:[0x598568];
	__asm        cmp    ds:[0x598564], eax;
	__asm        jne    near ptr 0x004B69C8;
	__asm        jmp    near ptr 0x004B6815;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x004B8BA0;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    dword ptr [ebp-0x78], 0x100;
	__asm        lea    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x7C], 1;
	__asm        lea    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B6865;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004B686E;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004B6873;
	__asm        jmp    near ptr 0x004B6878;
	__asm        jmp    near ptr 0x004B687D;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xA8];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA0], eax;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        jne    near ptr 0x004B68ED;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B68E3;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B68F2;
	__asm        jmp    near ptr 0x004B68F7;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ds:[0x598570], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x598568], eax;
	__asm        mov    dword ptr [ebp-0x8C], 0x100;
	__asm        lea    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    dword ptr [ebp-0x90], 1;
	__asm        lea    eax, [ebp-0x90];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004B6975;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004B6981;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004B6986;
	__asm        jmp    near ptr 0x004B698B;
	__asm        jmp    near ptr 0x004B6990;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, ds:[0x598568];
	__asm        mov    ds:[0x598564], eax;
	__asm        jmp    near ptr 0x004B69AB;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-0x6C], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004B69E0;
	__asm        mov    eax, ds:[0x598568];
	__asm        mov    [ebp-0x70], eax;
	__asm        add    dword ptr ds:[0x598568], 0x10;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004B69E5;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004B69F3;
	__asm        mov    eax, [ebp-0x60];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004B6A01;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004B6A20;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x00411B80;
	__asm        jmp    near ptr 0x004B6A20;
	__asm        jmp    near ptr 0x004B6A25;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x78], 1;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004B6A6E;
	__asm        jmp    near ptr 0x004B6A73;
// LINE 2599:
	__asm        jmp    near ptr 0x004B6A9E;
// LINE 2601:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B6A8B;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004B6A96;
// LINE 2602:
	__asm        inc    i;
// LINE 2603:
	__asm        jmp    near ptr 0x004B6761;
// LINE 2605:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6AA8;
// LINE 2606:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b6aaf
long ListBoxWindow::DoCharacter(long lCharacter) {
// LINE 2617:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2619:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6AC2;
// LINE 2620:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6ac9
long ListBoxWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2629:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2630:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004B6AE9;
// LINE 2631:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2633:
	__asm        cmp    lKey, 0x28;
	__asm        jne    near ptr 0x004B6B10;
// LINE 2634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xF0];
// LINE 2635:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2637:
	__asm        jmp    near ptr 0x004B6B80;
	__asm        cmp    lKey, 0x26;
	__asm        jne    near ptr 0x004B6B37;
// LINE 2638:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xEC];
// LINE 2639:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2641:
	__asm        jmp    near ptr 0x004B6B80;
	__asm        cmp    lKey, 0x21;
	__asm        jne    near ptr 0x004B6B5E;
// LINE 2642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xFC];
// LINE 2643:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2645:
	__asm        jmp    near ptr 0x004B6B80;
	__asm        cmp    lKey, 0x22;
	__asm        jne    near ptr 0x004B6B80;
// LINE 2646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x100];
// LINE 2647:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2649:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6B87;
// LINE 2650:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b6b8e
long ListBoxWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lAbsoluteSelectionIndex;
	long lRelativeSelectionIndex;

// LINE 2656:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2662:
	__asm        mov    ecx, this;
	__asm        mov    eax, nCursorY;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    lRelativeSelectionIndex, eax;
// LINE 2663:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        add    eax, lRelativeSelectionIndex;
	__asm        mov    lAbsoluteSelectionIndex, eax;
// LINE 2665:
	__asm        mov    eax, this;
	__asm        mov    ecx, lAbsoluteSelectionIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     near ptr 0x004B6BF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        cmp    eax, lAbsoluteSelectionIndex;
	__asm        jle    near ptr 0x004B6BF4;
// LINE 2667:
	__asm        mov    eax, lAbsoluteSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2669:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 2670:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6C0A;
// LINE 2671:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b6c11
int32_t ListBoxWindow::SetSelection(long lIndex) {
// LINE 2681:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2682:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC8], 0;
	__asm        je     near ptr 0x004B6C34;
// LINE 2683:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6D47;
// LINE 2684:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 1;
// LINE 2686:
	__asm        cmp    lIndex, 0xFFFFFFFF;
	__asm        je     near ptr 0x004B6C80;
	__asm        cmp    lIndex, 0;
	__asm        jl     near ptr 0x004B6C6C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        cmp    eax, lIndex;
	__asm        jg     near ptr 0x004B6C80;
// LINE 2687:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 2688:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6D47;
// LINE 2690:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    near ptr 0x004B6CA9;
// LINE 2691:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 2692:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6D47;
// LINE 2695:
	__asm        mov    eax, lIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 2696:
	__asm        cmp    lIndex, 0;
	__asm        jl     near ptr 0x004B6CEB;
// LINE 2697:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x104];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B6CEB;
// LINE 2698:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x108];
// LINE 2700:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2701:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B6D30;
// LINE 2702:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2705:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 2706:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6D47;
// LINE 2707:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6d4e
long ListBoxWindow::GetSelection() {
// LINE 2713:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2714:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        jmp    near ptr 0x004B6D68;
// LINE 2715:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b6d6d
int32_t ListBoxWindow::IsIndexInView(long lIndex) {
// LINE 2721:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2722:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jg     near ptr 0x004B6DB0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB4];
	__asm        cmp    eax, lIndex;
	__asm        jle    near ptr 0x004B6DB0;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6DB2;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6DB7;
// LINE 2723:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6dbe
void ListBoxWindow::PutIndexInView(long lIndex) {
// LINE 2729:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2730:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    near ptr 0x004B6DF3;
// LINE 2732:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2733:
	__asm        jmp    near ptr 0x004B6E2D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB4];
	__asm        cmp    eax, lIndex;
	__asm        jge    near ptr 0x004B6E2D;
// LINE 2735:
	__asm        mov    eax, lIndex;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2736:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2737:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2738:
	__asm        jmp    near ptr 0x004B6E4F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6e56
void ListBoxWindow::SetIndexOfTopLine(long lIndex) {
// LINE 2750:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2751:
	__asm        mov    eax, this;
	__asm        mov    ecx, lIndex;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jne    near ptr 0x004B6E79;
// LINE 2752:
	__asm        jmp    near ptr 0x004B6F40;
// LINE 2754:
	__asm        mov    eax, lIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 2755:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jge    near ptr 0x004B6EA2;
// LINE 2756:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 2757:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jge    near ptr 0x004B6EE8;
// LINE 2758:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 2759:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2760:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2761:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B6F3B;
// LINE 2762:
	__asm        mov    eax, this;
	__asm        add    eax, 0xB4;
	__asm        push   eax;
	__asm        push   0x10002;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2763:
	__asm        jmp    near ptr 0x004B6F40;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b6f47
int32_t ListBoxWindow::ScrollToStart() {
// LINE 2771:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2772:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x004B6F79;
// LINE 2773:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2774:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B6F80;
// LINE 2775:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b6f85
int32_t ListBoxWindow::ScrollToEnd() {
	long lCurrentLineCount;

// LINE 2785:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2788:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2789:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    near ptr 0x004B6FEE;
// LINE 2790:
	__asm        mov    eax, this;
	__asm        mov    ecx, lCurrentLineCount;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jl     near ptr 0x004B6FD3;
// LINE 2792:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2793:
	__asm        jmp    near ptr 0x004B6FEE;
// LINE 2795:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2797:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B6FF8;
// LINE 2798:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b6ffd
int32_t ListBoxWindow::MoveLineUp() {
	long lCurrentLineCount;

// LINE 2809:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2812:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2813:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jg     near ptr 0x004B702B;
// LINE 2814:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B7065;
// LINE 2816:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jle    near ptr 0x004B705E;
// LINE 2817:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2818:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7065;
// LINE 2820:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B7065;
// LINE 2821:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b706a
int32_t ListBoxWindow::MoveLineDown() {
	long lCurrentLineCount;

// LINE 2834:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2837:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2838:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jg     near ptr 0x004B7098;
// LINE 2839:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B70D5;
// LINE 2841:
	__asm        mov    eax, this;
	__asm        mov    ecx, lCurrentLineCount;
	__asm        dec    ecx;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jge    near ptr 0x004B70CE;
// LINE 2842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2843:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B70D5;
// LINE 2845:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B70D5;
// LINE 2846:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b70da
int32_t ListBoxWindow::ScrollPageUp() {
	long lNewFirstVisibleLine;
	long lCurrentLineCount;

// LINE 2858:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        mov    lNewFirstVisibleLine, eax;
// LINE 2863:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2864:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    near ptr 0x004B713F;
// LINE 2865:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    lNewFirstVisibleLine, eax;
// LINE 2866:
	__asm        jns    near ptr 0x004B712D;
// LINE 2867:
	__asm        mov    lNewFirstVisibleLine, 0;
// LINE 2868:
	__asm        mov    eax, lNewFirstVisibleLine;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2870:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7149;
// LINE 2871:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b714e
int32_t ListBoxWindow::ScrollPageDown() {
	long lNewFirstVisibleLine;
	long lCurrentLineCount;

// LINE 2878:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2882:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        mov    lNewFirstVisibleLine, eax;
// LINE 2883:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    lCurrentLineCount, eax;
// LINE 2884:
	__asm        cmp    lCurrentLineCount, 0;
	__asm        jle    near ptr 0x004B71E5;
// LINE 2885:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jle    near ptr 0x004B71E5;
// LINE 2886:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        dec    eax;
	__asm        add    lNewFirstVisibleLine, eax;
// LINE 2888:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xB4];
	__asm        jge    near ptr 0x004B71D3;
// LINE 2889:
	__asm        mov    eax, lCurrentLineCount;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    lNewFirstVisibleLine, eax;
// LINE 2890:
	__asm        mov    eax, lNewFirstVisibleLine;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x110];
// LINE 2893:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B71EF;
// LINE 2894:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b71f4
int32_t ListBoxWindow::ScrollToFirstLetter(char chValue) {
	int32_t i;
	class list<basic_string<char>>::iterator tempStringListIterator;

// LINE 2901:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2902:
	__asm        mov    i, 0;
// LINE 2903:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B721D;
	__asm        jmp    near ptr 0x004B7222;
// LINE 2905:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B7236;
	__asm        jmp    near ptr 0x004B723B;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004B7251;
	__asm        jmp    near ptr 0x004B7265;
	__asm        jmp    near ptr 0x004B7251;
	__asm        jmp    near ptr 0x004B7260;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004B7265;
	__asm        jmp    near ptr 0x004B726A;
	__asm        jmp    near ptr 0x004B73DB;
	__asm        jmp    near ptr 0x004B7279;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004B73DB;
// LINE 2906:
	__asm        jmp    near ptr 0x004B727E;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004B72AD;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B72B2;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B72CF;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B7347;
	__asm        jmp    near ptr 0x004B72E4;
	__asm        jmp    near ptr 0x004B72E9;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B730E;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004B731A;
	__asm        jmp    near ptr 0x004B731A;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x004B731A;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B7347;
	__asm        jmp    near ptr 0x004B734C;
	__asm        mov    byte ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x004B7355;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004B7360;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x48];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004B7380;
	__asm        jmp    near ptr 0x004B7385;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, byte ptr [eax];
	__asm        movsx  ecx, chValue;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x004B73B5;
// LINE 2907:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2908:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B73E2;
// LINE 2910:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B73C8;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004B73D3;
// LINE 2911:
	__asm        inc    i;
// LINE 2912:
	__asm        jmp    near ptr 0x004B7222;
// LINE 2913:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004B73E2;
// LINE 2914:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b73e9
void ListBoxWindow::SetShouldSort() {
// LINE 2922:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2923:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x004B7420;
// LINE 2924:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
// LINE 2925:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 2927:
	__asm        jmp    near ptr 0x004B7425;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b742a
void ListBoxWindow::Sort() {
	class basic_string<char> sSaved;
	long lNewSelectionIndex;

// LINE 2938:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x27C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2939:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004B748C;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004B7481;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    sSaved.reference, eax;
	__asm        jmp    near ptr 0x004B7493;
	__asm        mov    sSaved.reference, 0;
	__asm        mov    sSaved.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004B749F;
// LINE 2942:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jl     near ptr 0x004B74D7;
// LINE 2943:
	__asm        lea    eax, sSaved.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x13C];
// LINE 2945:
	__asm        jmp    near ptr 0x004B74DC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 2;
	__asm        jae    near ptr 0x004B74F1;
	__asm        jmp    near ptr 0x004B77E5;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   0x004399C0;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004B751F;
	__asm        mov    dword ptr [ebp-0x25C], 0x40;
	__asm        lea    eax, [ebp-0x234];
	__asm        mov    [ebp-0x260], eax;
	__asm        dec    dword ptr [ebp-0x25C];
	__asm        js     near ptr 0x004B7558;
	__asm        mov    ecx, [ebp-0x260];
	__asm        call   0x0043A490;
	__asm        add    dword ptr [ebp-0x260], 8;
	__asm        jmp    near ptr 0x004B7535;
	__asm        jmp    near ptr 0x004B755D;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x004B757E;
	__asm        jmp    near ptr 0x004B7754;
	__asm        jmp    near ptr 0x004B757E;
	__asm        jmp    near ptr 0x004B7590;
	__asm        cmp    dword ptr [ebp-0x258], 0;
	__asm        jne    near ptr 0x004B7754;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x004B75B2;
	__asm        jmp    near ptr 0x004B75B7;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        mov    [ebp-0x240], eax;
	__asm        jmp    near ptr 0x004B75D3;
	__asm        jmp    near ptr 0x004B75D8;
	__asm        mov    eax, [ebp-0x23C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   0x004B8860;
	__asm        mov    dword ptr [ebp-0x238], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x238], eax;
	__asm        jge    near ptr 0x004B76D6;
	__asm        mov    eax, [ebp-0x238];
	__asm        cmp    dword ptr [ebp+eax*8-0x230], 0;
	__asm        jne    near ptr 0x004B762F;
	__asm        jmp    near ptr 0x004B76D6;
	__asm        jmp    near ptr 0x004B762F;
	__asm        jmp    near ptr 0x004B7641;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        jne    near ptr 0x004B76D6;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        lea    ecx, [ebp+eax*8-0x234];
	__asm        call   0x004B8C10;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    [ebp-0x244], eax;
	__asm        add    dword ptr [ebp-0x238], 1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x264], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    eax, [ebp+eax*8-0x234];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    ecx, [ebp-0x244];
	__asm        mov    [ebp+ecx*8-0x234], eax;
	__asm        jmp    near ptr 0x004B769B;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    eax, [ebp+eax*8-0x230];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [ebp-0x244];
	__asm        mov    [ebp+ecx*8-0x230], eax;
	__asm        jmp    near ptr 0x004B76CC;
	__asm        jmp    near ptr 0x004B76D1;
	__asm        jmp    near ptr 0x004B7602;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [ebp+eax*8-0x234];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    [ebp+ecx*8-0x234], eax;
	__asm        jmp    near ptr 0x004B7707;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x270], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [ebp+eax*8-0x230];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x270];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    [ebp+ecx*8-0x230], eax;
	__asm        jmp    near ptr 0x004B7738;
	__asm        jmp    near ptr 0x004B773D;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x238], eax;
	__asm        jne    near ptr 0x004B774F;
	__asm        inc    dword ptr [ebp-0x2C];
	__asm        jmp    near ptr 0x004B7564;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x248], eax;
	__asm        dec    dword ptr [ebp-0x2C];
	__asm        cmp    dword ptr [ebp-0x248], 0;
	__asm        je     near ptr 0x004B778B;
	__asm        mov    eax, [ebp-0x2C];
	__asm        lea    eax, [ebp+eax*8-0x234];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x004B8C10;
	__asm        jmp    near ptr 0x004B7754;
	__asm        mov    dword ptr [ebp-0x274], 0x40;
	__asm        lea    eax, [ebp-0x234];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x278], eax;
	__asm        dec    dword ptr [ebp-0x274];
	__asm        js     near ptr 0x004B77D3;
	__asm        sub    dword ptr [ebp-0x278], 8;
	__asm        mov    ecx, [ebp-0x278];
	__asm        call   0x0043A0C0;
	__asm        jmp    near ptr 0x004B77B0;
	__asm        jmp    near ptr 0x004B77D8;
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   0x0043A0C0;
	__asm        jmp    near ptr 0x004B77E5;
// LINE 2946:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        jl     near ptr 0x004B782C;
// LINE 2947:
	__asm        lea    eax, sSaved.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, lNewSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x140];
// LINE 2948:
	__asm        mov    eax, lNewSelectionIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 2950:
	__asm        mov    eax, sSaved.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sSaved.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004B78AF;
	__asm        mov    eax, sSaved.reference;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004B78AF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004B788F;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004B7894;
	__asm        jmp    near ptr 0x004B7899;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B78AA;
	__asm        jmp    near ptr 0x004B78AF;
	__asm        jmp    near ptr 0x004B78B4;
	__asm        cmp    sSaved.c_str_ptr, 0;
	__asm        je     near ptr 0x004B78D6;
	__asm        mov    eax, sSaved.c_str_ptr;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B78DB;
// LINE 2951:
	__asm        jmp    near ptr 0x004B78E0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b78e5
long ListBoxWindow::GetLineCount() {
// LINE 2957:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2958:
	__asm        jmp    near ptr 0x004B78F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        jmp    near ptr 0x004B7901;
// LINE 2959:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b7906
long ListBoxWindow::GetIndexOfTopLine() {
// LINE 2965:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2966:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        jmp    near ptr 0x004B7920;
// LINE 2967:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b7925
int32_t ListBoxWindow::AddScrollBar(int32_t bVertical, int32_t __formal, char * szImageFileName) {
// LINE 2974:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2978:
	__asm        cmp    bVertical, 0;
	__asm        je     near ptr 0x004B7A18;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004B7A18;
// LINE 2979:
// Block start:
	class MRect rectScrollBar;
	__asm        jmp    near ptr 0x004B7955;
	__asm        jmp    near ptr 0x004B795A;
// LINE 2980:
	__asm        mov    rectScrollBar.top, 0;
// LINE 2981:
	__asm        jmp    near ptr 0x004B7966;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    rectScrollBar.right, eax;
// LINE 2982:
	__asm        mov    eax, rectScrollBar.right;
	__asm        sub    eax, 0x10;
	__asm        mov    rectScrollBar.left, eax;
// LINE 2983:
	__asm        jmp    near ptr 0x004B7983;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    rectScrollBar.bottom, eax;
// LINE 2986:
	__asm        push   0xD4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004B79D8;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        lea    eax, rectScrollBar.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x004B2C25;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x004B79E5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 2987:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+4];
// LINE 2988:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x150];
// LINE 2989:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x154];
// LINE 2991:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7A22;
// LINE 2992:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b7a29
void ListBoxWindow::RemoveScrollBar(int32_t bVertical, int32_t bHorizontal) {
// LINE 2999:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3000:
	__asm        cmp    bVertical, 0;
	__asm        je     near ptr 0x004B7A61;
// LINE 3001:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 3002:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 3004:
	__asm        cmp    bHorizontal, 0;
	__asm        je     near ptr 0x004B7A8D;
// LINE 3005:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x5C];
// LINE 3006:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
// LINE 3008:
	__asm        jmp    near ptr 0x004B7A92;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b7a99
void ListBoxWindow::SetScrollBarValue() {
// LINE 3015:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3016:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x004B7B57;
// LINE 3017:
// Block start:
	long lLinesNotVisible;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB0];
	__asm        mov    lLinesNotVisible, eax;
// LINE 3018:
	__asm        cmp    lLinesNotVisible, 0;
	__asm        jge    near ptr 0x004B7AE0;
// LINE 3019:
	__asm        mov    lLinesNotVisible, 0;
// LINE 3020:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   0x004B2834;
// LINE 3021:
	__asm        mov    eax, lLinesNotVisible;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   0x004B2872;
// LINE 3022:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x114];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB0];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, lLinesNotVisible;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0xD8];
// LINE 3023:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x118];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   0x004B273A;
// LINE 3025:
// Block end:
	__asm        jmp    near ptr 0x004B7B5C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b7b61
void ListBoxWindow::SetScrollBarSizes() {
	int32_t nScrollBarYPosition;
	int32_t nScrollBarXPosition;

// LINE 3031:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3035:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x004B7C1B;
// LINE 3036:
	__asm        jmp    near ptr 0x004B7B82;
	__asm        jmp    near ptr 0x004B7B87;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0xC0];
	__asm        sub    ecx, [edx+0x10];
	__asm        sub    eax, ecx;
	__asm        mov    nScrollBarXPosition, eax;
// LINE 3037:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x004B7BC9;
	__asm        mov    nScrollBarYPosition, 1;
	__asm        jmp    near ptr 0x004B7BD0;
	__asm        mov    nScrollBarYPosition, 0;
// LINE 3038:
	__asm        mov    eax, nScrollBarYPosition;
	__asm        push   eax;
	__asm        mov    eax, nScrollBarXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x34];
// LINE 3039:
	__asm        jmp    near ptr 0x004B7BF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x38];
// LINE 3041:
	__asm        jmp    near ptr 0x004B7C20;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b7c25
void PopupMenuWindow::PopupMenuWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 3059:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B4462;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x592220;
// LINE 3060:
	__asm        jmp    near ptr 0x004B7C5B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004b7c65
int32_t PopupMenuWindow::Initialize() {
	int32_t nReturnValue;

// LINE 3066:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3067:
	__asm        mov    ecx, this;
	__asm        call   0x004B47F7;
	__asm        mov    nReturnValue, eax;
// LINE 3068:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3069:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 3070:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 3071:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 3072:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004B7CBC;
// LINE 3073:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004b7cc1
long PopupMenuWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 3080:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3081:
	__asm        cmp    lKey, 0xD;
	__asm        je     near ptr 0x004B7CE1;
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x004B7D76;
// LINE 3082:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 3083:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B7D61;
// LINE 3084:
	__asm        cmp    lKey, 0xD;
	__asm        jne    near ptr 0x004B7D38;
// LINE 3085:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3086:
	__asm        jmp    near ptr 0x004B7D61;
// LINE 3087:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10004;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3089:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3090:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7D8B;
// LINE 3092:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B6AC9;
	__asm        jmp    near ptr 0x004B7D8B;
// LINE 3093:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b7d92
long PopupMenuWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 3104:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3105:
	__asm        cmp    nCursorX, 0;
	__asm        jl     near ptr 0x004B7DE6;
	__asm        cmp    nCursorY, 0;
	__asm        jl     near ptr 0x004B7DE6;
	__asm        jmp    near ptr 0x004B7DB7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cmp    eax, nCursorX;
	__asm        jl     near ptr 0x004B7DE6;
	__asm        jmp    near ptr 0x004B7DD1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cmp    eax, nCursorY;
	__asm        jge    near ptr 0x004B7E43;
// LINE 3106:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 3107:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B7E2E;
// LINE 3108:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10004;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3109:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3110:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7E5C;
// LINE 3112:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B6B8E;
	__asm        jmp    near ptr 0x004B7E5C;
// LINE 3113:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b7e63
long PopupMenuWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 3120:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004B7EC3;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004B7EC3;
// LINE 3123:
	__asm        mov    eax, this;
	__asm        add    eax, 0xAC;
	__asm        push   eax;
	__asm        push   0x10003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 3124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 3125:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7ED8;
// LINE 3126:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004b7edf
long PopupMenuWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 3138:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3139:
	__asm        mov    ecx, this;
	__asm        mov    eax, nCursorY;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 3140:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004B7F11;
// LINE 3141:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b7f18
int32_t PopupMenuWindow::RemoveStringAtIndex(long lIndex) {
	int32_t nReturnValue;

// LINE 3147:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3150:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xB0];
// LINE 3151:
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B6266;
	__asm        mov    nReturnValue, eax;
// LINE 3152:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3153:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004B7F52;
// LINE 3154:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004b7f59
int32_t PopupMenuWindow::InsertStringAtIndex(long lIndex, class basic_string<char>& sToInsert) {
	int32_t nReturnValue;

// LINE 3160:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3163:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xB0];
// LINE 3164:
	__asm        mov    eax, sToInsert;
	__asm        push   eax;
	__asm        mov    eax, lIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B6585;
	__asm        mov    nReturnValue, eax;
// LINE 3165:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x158];
// LINE 3166:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004B7F97;
// LINE 3167:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004b7f9e
void PopupMenuWindow::ResizeWindowToFitMenuItems() {
	long lCurrentLongestLineWidth;
	class list<basic_string<char>>::iterator tempStringListIterator;
	long lCurrentLineWidth;
	long lCurrentLineHeight;
	class MRect rectNewWindow;

// LINE 3173:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3174:
	__asm        mov    lCurrentLongestLineWidth, 1;
// LINE 3177:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B7FC7;
	__asm        jmp    near ptr 0x004B7FCC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        inc    eax;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, 1;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x4C], eax;
// LINE 3178:
	__asm        jmp    near ptr 0x004B7FF9;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    rectNewWindow.left, eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    rectNewWindow.top, eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    rectNewWindow.right, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    rectNewWindow.bottom, eax;
	__asm        jmp    near ptr 0x004B8016;
// LINE 3180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B802A;
	__asm        jmp    near ptr 0x004B802F;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x004B8045;
	__asm        jmp    near ptr 0x004B8059;
	__asm        jmp    near ptr 0x004B8045;
	__asm        jmp    near ptr 0x004B8054;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x004B8059;
	__asm        jmp    near ptr 0x004B805E;
	__asm        jmp    near ptr 0x004B81CA;
	__asm        jmp    near ptr 0x004B806D;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004B81CA;
// LINE 3181:
	__asm        jmp    near ptr 0x004B8072;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004B80A1;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B80A6;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004B80C3;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B813B;
	__asm        jmp    near ptr 0x004B80D8;
	__asm        jmp    near ptr 0x004B80DD;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004B8102;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004B810E;
	__asm        jmp    near ptr 0x004B810E;
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x004B810E;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004B813B;
	__asm        jmp    near ptr 0x004B8140;
	__asm        mov    byte ptr [ebp-0x54], 0;
	__asm        jmp    near ptr 0x004B8149;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004B8154;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x70];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004B8174;
	__asm        jmp    near ptr 0x004B8179;
	__asm        lea    eax, lCurrentLineHeight;
	__asm        push   eax;
	__asm        lea    eax, lCurrentLineWidth;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x004A02B1;
// LINE 3182:
	__asm        mov    eax, lCurrentLongestLineWidth;
	__asm        cmp    lCurrentLineWidth, eax;
	__asm        jle    near ptr 0x004B81A7;
// LINE 3183:
	__asm        mov    eax, lCurrentLineWidth;
	__asm        mov    lCurrentLongestLineWidth, eax;
// LINE 3184:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004B81BA;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004B81C5;
// LINE 3185:
	__asm        jmp    near ptr 0x004B8016;
// LINE 3186:
	__asm        mov    eax, rectNewWindow.left;
	__asm        add    eax, lCurrentLongestLineWidth;
	__asm        add    eax, 0xA;
	__asm        mov    rectNewWindow.right, eax;
// LINE 3187:
	__asm        jmp    near ptr 0x004B81DB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0xB8];
	__asm        add    eax, rectNewWindow.top;
	__asm        mov    rectNewWindow.bottom, eax;
// LINE 3188:
	__asm        lea    eax, rectNewWindow.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   0x004A4F5C;
// LINE 3189:
	__asm        lea    eax, rectNewWindow.left;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        jmp    near ptr 0x004B823E;
// LINE 3190:
	__asm        jmp    near ptr 0x004B8243;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:000b7250-000b728d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8250
// BoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7290-000b72db Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8290
// TextWindow::`scalar deleting destructor'



// Contribution: 1:000b72e0-000b731d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b82e0
// ButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b7320-000b7362 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8320
// CheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7370-000b73a8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8370
// RadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b73b0-000b758f Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b83b0
// ButtonGroup::`scalar deleting destructor'



// Contribution: 1:000b7590-000b75c8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8590
// SliderWindow::`scalar deleting destructor'



// Contribution: 1:000b75d0-000b7612 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b85d0
// ScrollBarWindow::`scalar deleting destructor'



// Contribution: 1:000b7620-000b785e Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8620
// ListBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7860-000b7947 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8860
// list<basic_string<char>>::splice



// Contribution: 1:000b7950-000b7b93 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004b8950
// PopupMenuWindow::`scalar deleting destructor'



// Contribution: 1:000b7ba0-000b7c08 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8ba0
// allocate



// Contribution: 1:000b7c10-000b803e Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004b8c10
// list<basic_string<char>>::merge



// Contribution: 2:000029c0-00002a8b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005919c0
// ??_7BoxWindow@@6B@


// Contribution: 2:00002a90-00002b77 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591a90
// ??_7TextWindow@@6B@


// Contribution: 2:00002b78-00002c53 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591b78
// ??_7ButtonWindow@@6B@


// Contribution: 2:00002c58-00002d33 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591c58
// ??_7CheckBoxWindow@@6B@


// Contribution: 2:00002d38-00002e1b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591d38
// ??_7RadioButtonWindow@@6B@


// Contribution: 2:00002e20-00002ee3 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591e20
// ??_7ButtonGroup@@6B@


// Contribution: 2:00002ee8-00002fbf Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591ee8
// ??_7SliderWindow@@6B@


// Contribution: 2:00002fc0-000030c7 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591fc0
// ??_7ScrollBarWindow@@6B@


// Contribution: 2:000030c8-0000321f Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005920c8
// ??_7ListBoxWindow@@6B@


// Contribution: 2:00003220-0000337b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00592220
// ??_7PopupMenuWindow@@6B@


// Contribution: 3:00003ba0-00003c2e Module: 5, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059aba0
// SZ_DEFAULT_BUTTON_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aba4
// SZ_DEFAULT_CHECKBOX_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aba8
// SZ_DEFAULT_RADIO_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059abac
// SZ_SLIDER_THUMB_IMAGE_V_FILE_NAME
// GLOBAL: COPTER_D 0x0059abb0
// SZ_SLIDER_THUMB_IMAGE_H_FILE_NAME
// GLOBAL: COPTER_D 0x0059abb4
// SZ_SLIDER_BACKGROUND_IMAGE_V_FILE_NAME
// GLOBAL: COPTER_D 0x0059abb8
// SZ_SLIDER_BACKGROUND_IMAGE_H_FILE_NAME
// GLOBAL: COPTER_D 0x0059abbc
// SZ_DEFAULT_SCROLLBAR_SLIDER_IMAGE_FILE_NAME


// Contribution: 3:00003c30-00003c33 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac30
// list<RadioButtonWindow *>::number_of_lists


// Contribution: 3:00003c34-00003c37 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac34
// list<RadioButtonWindow *>::last


// Contribution: 3:00003c38-00003c3b Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac38
// list<RadioButtonWindow *>::next_avail


// Contribution: 3:00003c3c-00003c3f Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac3c
// list<RadioButtonWindow *>::free_list


// Contribution: 3:00003c40-00003c43 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059ac40
// list<RadioButtonWindow *>::buffer_list
