// Module: Controls.obj
// Source: C:\Copter\source\sparkal\Controls.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000aba90-000b7247 Module: 5, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x004aca90
void BoxWindow::BoxWindow() {
// LINE 26:
	asm( 
"	      004aca90    push ebp"
"	      004aca91    mov ebp,esp"
"	      004aca93    sub esp,4"
"	      004aca96    push ebx"
"	      004aca97    push esi"
"	      004aca98    push edi"
"	      004aca99    mov [ebp-4],ecx"
"	      004aca9c    mov ecx,[ebp-4]"
"	      004aca9f    call 004A2A3Fh"
"	      004acaa4    mov eax,[ebp-4]"
"	      004acaa7    mov dword ptr [eax+74h],1"
"	      004acaae    mov eax,[ebp-4]"
"	      004acab1    mov dword ptr [eax+78h],0"
"	      004acab8    jmp near ptr 004ACABDh"
"	      004acabd    mov eax,ds:[606974h]"
"	      004acac2    mov ecx,[ebp-4]"
"	      004acac5    mov [ecx+80h],eax"
"	      004acacb    mov eax,[ebp-4]"
"	      004acace    mov dword ptr [eax],5919C0h"
);
// LINE 29:
	asm( 
"	      004acad4    mov eax,[ebp-4]"
"	      004acad7    mov byte ptr [eax+7Ch],0"
"	      004acadb    mov eax,[ebp-4]"
"	      004acade    mov al,[eax+7Ch]"
"	      004acae1    mov ecx,[ebp-4]"
"	      004acae4    mov [ecx+7Dh],al"
"	      004acae7    mov eax,[ebp-4]"
"	      004acaea    mov al,[eax+7Dh]"
"	      004acaed    mov ecx,[ebp-4]"
"	      004acaf0    mov [ecx+7Eh],al"
);
// LINE 30:
	asm( 
"	      004acaf3    jmp near ptr 004ACAF8h"
"	      004acaf8    mov eax,[ebp-4]"
"	      004acafb    pop edi"
"	      004acafc    pop esi"
"	      004acafd    pop ebx"
"	      004acafe    leave"
"	      004acaff    ret"
);
}

// FUNCTION: SIMCOPTER 0x004acb00
void BoxWindow::BoxWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t) {
// LINE 41:
	asm( 
"	      004acb00    push ebp"
"	      004acb01    mov ebp,esp"
"	      004acb03    sub esp,4"
"	      004acb06    push ebx"
"	      004acb07    push esi"
"	      004acb08    push edi"
"	      004acb09    mov [ebp-4],ecx"
"	      004acb0c    mov eax,[ebp+18h]"
"	      004acb0f    push eax"
"	      004acb10    mov eax,[ebp+14h]"
"	      004acb13    push eax"
"	      004acb14    mov eax,[ebp+10h]"
"	      004acb17    push eax"
"	      004acb18    mov eax,[ebp+0Ch]"
"	      004acb1b    push eax"
"	      004acb1c    mov eax,[ebp+8]"
"	      004acb1f    push eax"
"	      004acb20    mov ecx,[ebp-4]"
"	      004acb23    call 004A33EEh"
"	      004acb28    mov eax,[ebp-4]"
"	      004acb2b    mov dword ptr [eax+74h],1"
"	      004acb32    mov eax,[ebp-4]"
"	      004acb35    mov dword ptr [eax+78h],0"
"	      004acb3c    jmp near ptr 004ACB41h"
"	      004acb41    mov eax,ds:[606974h]"
"	      004acb46    mov ecx,[ebp-4]"
"	      004acb49    mov [ecx+80h],eax"
"	      004acb4f    mov eax,[ebp-4]"
"	      004acb52    mov dword ptr [eax],5919C0h"
);
// LINE 44:
	asm( 
"	      004acb58    mov eax,[ebp-4]"
"	      004acb5b    mov byte ptr [eax+7Ch],0"
"	      004acb5f    mov eax,[ebp-4]"
"	      004acb62    mov al,[eax+7Ch]"
"	      004acb65    mov ecx,[ebp-4]"
"	      004acb68    mov [ecx+7Dh],al"
"	      004acb6b    mov eax,[ebp-4]"
"	      004acb6e    mov al,[eax+7Dh]"
"	      004acb71    mov ecx,[ebp-4]"
"	      004acb74    mov [ecx+7Eh],al"
);
// LINE 45:
	asm( 
"	      004acb77    jmp near ptr 004ACB7Ch"
"	      004acb7c    mov eax,[ebp-4]"
"	      004acb7f    pop edi"
"	      004acb80    pop esi"
"	      004acb81    pop ebx"
"	      004acb82    leave"
"	      004acb83    ret 14h"
);
}

// FUNCTION: SIMCOPTER 0x004acb86
int32_t BoxWindow::DrawSelf() {
// LINE 51:
	asm( 
"	      004acb86    push ebp"
"	      004acb87    mov ebp,esp"
"	      004acb89    sub esp,4"
"	      004acb8c    push ebx"
"	      004acb8d    push esi"
"	      004acb8e    push edi"
"	      004acb8f    mov [ebp-4],ecx"
);
// LINE 52:
	asm( 
"	      004acb92    mov eax,[ebp-4]"
"	      004acb95    cmp dword ptr [eax+78h],0"
"	      004acb99    je near ptr 004ACBBCh"
);
// LINE 53:
	asm( 
"	      004acb9f    push 0"
"	      004acba1    mov eax,[ebp-4]"
"	      004acba4    mov eax,[eax+80h]"
"	      004acbaa    push eax"
"	      004acbab    mov eax,[ebp-4]"
"	      004acbae    mov ecx,[ebp-4]"
"	      004acbb1    mov ecx,[ecx+44h]"
"	      004acbb4    mov edx,[ecx]"
"	      004acbb6    mov ecx,[eax+44h]"
"	      004acbb9    call dword ptr [edx+44h]"
);
// LINE 54:
	asm( 
"	      004acbbc    mov eax,[ebp-4]"
"	      004acbbf    cmp dword ptr [eax+74h],0"
"	      004acbc3    je near ptr 004ACBDBh"
);
// LINE 55:
	asm( 
"	      004acbc9    mov eax,[ebp-4]"
"	      004acbcc    add eax,7Ch"
"	      004acbcf    push eax"
"	      004acbd0    mov eax,[ebp-4]"
"	      004acbd3    mov eax,[eax]"
"	      004acbd5    mov ecx,[ebp-4]"
"	      004acbd8    call dword ptr [eax+2Ch]"
);
// LINE 56:
	asm( 
"	      004acbdb    mov eax,1"
"	      004acbe0    jmp near ptr 004ACBE5h"
);
// LINE 57:
	asm( 
"	      004acbe5    pop edi"
"	      004acbe6    pop esi"
"	      004acbe7    pop ebx"
"	      004acbe8    leave"
"	      004acbe9    ret"
);
}

// FUNCTION: SIMCOPTER 0x004acbea
void BoxWindow::SetColors(struct SparkalColor&, int32_t) {
// LINE 63:
	asm( 
"	      004acbea    push ebp"
"	      004acbeb    mov ebp,esp"
"	      004acbed    sub esp,4"
"	      004acbf0    push ebx"
"	      004acbf1    push esi"
"	      004acbf2    push edi"
"	      004acbf3    mov [ebp-4],ecx"
);
// LINE 64:
	asm( 
"	      004acbf6    mov eax,[ebp+8]"
"	      004acbf9    mov eax,[eax]"
"	      004acbfb    mov ecx,[ebp-4]"
"	      004acbfe    mov [ecx+7Ch],eax"
);
// LINE 65:
	asm( 
"	      004acc01    mov eax,[ebp+0Ch]"
"	      004acc04    mov ecx,[ebp-4]"
"	      004acc07    mov [ecx+80h],eax"
);
// LINE 66:
	asm( 
"	      004acc0d    jmp near ptr 004ACC12h"
"	      004acc12    pop edi"
"	      004acc13    pop esi"
"	      004acc14    pop ebx"
"	      004acc15    leave"
"	      004acc16    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004acc19
void BoxWindow::SetOutlineAndFillDrawing(int32_t, int32_t) {
// LINE 72:
	asm( 
"	      004acc19    push ebp"
"	      004acc1a    mov ebp,esp"
"	      004acc1c    sub esp,4"
"	      004acc1f    push ebx"
"	      004acc20    push esi"
"	      004acc21    push edi"
"	      004acc22    mov [ebp-4],ecx"
);
// LINE 73:
	asm( 
"	      004acc25    mov eax,[ebp+8]"
"	      004acc28    mov ecx,[ebp-4]"
"	      004acc2b    mov [ecx+74h],eax"
);
// LINE 74:
	asm( 
"	      004acc2e    mov eax,[ebp+0Ch]"
"	      004acc31    mov ecx,[ebp-4]"
"	      004acc34    mov [ecx+78h],eax"
);
// LINE 75:
	asm( 
"	      004acc37    jmp near ptr 004ACC3Ch"
"	      004acc3c    pop edi"
"	      004acc3d    pop esi"
"	      004acc3e    pop ebx"
"	      004acc3f    leave"
"	      004acc40    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004acc43
void TextWindow::TextWindow() {
// LINE 95:
	asm( 
"	      004acc43    push ebp"
"	      004acc44    mov ebp,esp"
"	      004acc46    sub esp,4"
"	      004acc49    push ebx"
"	      004acc4a    push esi"
"	      004acc4b    push edi"
"	      004acc4c    mov [ebp-4],ecx"
"	      004acc4f    mov ecx,[ebp-4]"
"	      004acc52    call 004A2A3Fh"
"	      004acc57    jmp near ptr 004ACC5Ch"
"	      004acc5c    mov ecx,[ebp-4]"
"	      004acc5f    add ecx,84h"
"	      004acc65    call 0049F780h"
"	      004acc6a    mov eax,[ebp-4]"
"	      004acc6d    mov dword ptr [eax],591A90h"
);
// LINE 96:
	asm( 
"	      004acc73    mov eax,[ebp-4]"
"	      004acc76    mov dword ptr [eax+74h],0"
);
// LINE 99:
	asm( 
"	      004acc7d    mov al,ds:[606968h]"
"	      004acc82    mov ecx,[ebp-4]"
"	      004acc85    mov [ecx+78h],al"
"	      004acc88    mov eax,[ebp-4]"
"	      004acc8b    mov al,[eax+78h]"
"	      004acc8e    mov ecx,[ebp-4]"
"	      004acc91    mov [ecx+79h],al"
"	      004acc94    mov eax,[ebp-4]"
"	      004acc97    mov al,[eax+79h]"
"	      004acc9a    mov ecx,[ebp-4]"
"	      004acc9d    mov [ecx+7Ah],al"
);
// LINE 100:
	asm( 
"	      004acca0    mov eax,ds:[606974h]"
"	      004acca5    mov ecx,[ebp-4]"
"	      004acca8    mov [ecx+7Ch],eax"
);
// LINE 101:
	asm( 
"	      004accab    mov eax,[ebp-4]"
"	      004accae    mov dword ptr [eax+80h],0"
);
// LINE 102:
	asm( 
"	      004accb8    mov eax,[ebp-4]"
"	      004accbb    mov dword ptr [eax+0A0h],0"
);
// LINE 103:
	asm( 
"	      004accc5    mov ecx,[ebp-4]"
"	      004accc8    mov eax,[ebp-4]"
"	      004acccb    mov eax,[eax+84h]"
"	      004accd1    add ecx,84h"
"	      004accd7    call dword ptr [eax]"
);
// LINE 104:
	asm( 
"	      004accd9    jmp near ptr 004ACCDEh"
"	      004accde    mov eax,[ebp-4]"
"	      004acce1    pop edi"
"	      004acce2    pop esi"
"	      004acce3    pop ebx"
"	      004acce4    leave"
"	      004acce5    ret"
);
}

// FUNCTION: SIMCOPTER 0x004acce6
void TextWindow::TextWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t) {
// LINE 113:
	asm( 
"	      004acce6    push ebp"
"	      004acce7    mov ebp,esp"
"	      004acce9    sub esp,4"
"	      004accec    push ebx"
"	      004acced    push esi"
"	      004accee    push edi"
"	      004accef    mov [ebp-4],ecx"
"	      004accf2    mov eax,[ebp+1Ch]"
"	      004accf5    push eax"
"	      004accf6    mov eax,[ebp+18h]"
"	      004accf9    push eax"
"	      004accfa    mov eax,[ebp+14h]"
"	      004accfd    push eax"
"	      004accfe    mov eax,[ebp+0Ch]"
"	      004acd01    push eax"
"	      004acd02    mov eax,[ebp+8]"
"	      004acd05    push eax"
"	      004acd06    mov ecx,[ebp-4]"
"	      004acd09    call 004A33EEh"
"	      004acd0e    jmp near ptr 004ACD13h"
"	      004acd13    mov eax,[ebp+10h]"
"	      004acd16    mov ecx,[ebp-4]"
"	      004acd19    mov [ecx+80h],eax"
"	      004acd1f    mov ecx,[ebp-4]"
"	      004acd22    add ecx,84h"
"	      004acd28    call 0049F780h"
"	      004acd2d    mov eax,[ebp-4]"
"	      004acd30    mov dword ptr [eax],591A90h"
);
// LINE 114:
	asm( 
"	      004acd36    mov eax,[ebp-4]"
"	      004acd39    mov dword ptr [eax+74h],0"
);
// LINE 117:
	asm( 
"	      004acd40    mov eax,[ebp-4]"
"	      004acd43    mov byte ptr [eax+78h],0"
"	      004acd47    mov eax,[ebp-4]"
"	      004acd4a    mov al,[eax+78h]"
"	      004acd4d    mov ecx,[ebp-4]"
"	      004acd50    mov [ecx+79h],al"
"	      004acd53    mov eax,[ebp-4]"
"	      004acd56    mov al,[eax+79h]"
"	      004acd59    mov ecx,[ebp-4]"
"	      004acd5c    mov [ecx+7Ah],al"
);
// LINE 118:
	asm( 
"	      004acd5f    mov eax,ds:[606974h]"
"	      004acd64    mov ecx,[ebp-4]"
"	      004acd67    mov [ecx+7Ch],eax"
);
// LINE 119:
	asm( 
"	      004acd6a    mov eax,[ebp-4]"
"	      004acd6d    mov dword ptr [eax+0A0h],0"
);
// LINE 120:
	asm( 
"	      004acd77    mov ecx,[ebp-4]"
"	      004acd7a    mov eax,[ebp-4]"
"	      004acd7d    mov eax,[eax+84h]"
"	      004acd83    add ecx,84h"
"	      004acd89    call dword ptr [eax]"
);
// LINE 121:
	asm( 
"	      004acd8b    mov ecx,[ebp-4]"
"	      004acd8e    call 004AD01Eh"
);
// LINE 122:
	asm( 
"	      004acd93    jmp near ptr 004ACD98h"
"	      004acd98    mov eax,[ebp-4]"
"	      004acd9b    pop edi"
"	      004acd9c    pop esi"
"	      004acd9d    pop ebx"
"	      004acd9e    leave"
"	      004acd9f    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x004acda2
void TextWindow::TextWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t) {
// LINE 131:
	asm( 
"	      004acda2    push ebp"
"	      004acda3    mov ebp,esp"
"	      004acda5    sub esp,28h"
"	      004acda8    push ebx"
"	      004acda9    push esi"
"	      004acdaa    push edi"
"	      004acdab    mov [ebp-28h],ecx"
"	      004acdae    mov eax,[ebp+1Ch]"
"	      004acdb1    push eax"
"	      004acdb2    mov eax,[ebp+18h]"
"	      004acdb5    push eax"
"	      004acdb6    mov eax,[ebp+14h]"
"	      004acdb9    push eax"
"	      004acdba    mov eax,[ebp+0Ch]"
"	      004acdbd    push eax"
"	      004acdbe    mov eax,[ebp+8]"
"	      004acdc1    push eax"
"	      004acdc2    mov ecx,[ebp-28h]"
"	      004acdc5    call 004A33EEh"
"	      004acdca    jmp near ptr 004ACDCFh"
"	      004acdcf    mov ecx,[ebp-28h]"
"	      004acdd2    add ecx,84h"
"	      004acdd8    call 0049F780h"
"	      004acddd    mov eax,[ebp-28h]"
"	      004acde0    mov dword ptr [eax],591A90h"
);
// LINE 132:
	asm( 
"	      004acde6    mov eax,[ebp-28h]"
"	      004acde9    mov dword ptr [eax+74h],0"
);
// LINE 135:
	asm( 
"	      004acdf0    mov eax,[ebp-28h]"
"	      004acdf3    mov byte ptr [eax+78h],0"
"	      004acdf7    mov eax,[ebp-28h]"
"	      004acdfa    mov al,[eax+78h]"
"	      004acdfd    mov ecx,[ebp-28h]"
"	      004ace00    mov [ecx+79h],al"
"	      004ace03    mov eax,[ebp-28h]"
"	      004ace06    mov al,[eax+79h]"
"	      004ace09    mov ecx,[ebp-28h]"
"	      004ace0c    mov [ecx+7Ah],al"
);
// LINE 136:
	asm( 
"	      004ace0f    mov eax,ds:[606974h]"
"	      004ace14    mov ecx,[ebp-28h]"
"	      004ace17    mov [ecx+7Ch],eax"
);
// LINE 137:
	asm( 
"	      004ace1a    mov eax,[ebp-28h]"
"	      004ace1d    mov dword ptr [eax+80h],0"
);
// LINE 138:
	asm( 
"	      004ace27    mov eax,[ebp-28h]"
"	      004ace2a    mov dword ptr [eax+0A0h],0"
);
// LINE 139:
	asm( 
"	      004ace34    mov eax,[ebp-28h]"
"	      004ace37    add eax,8"
"	      004ace3a    cmp eax,[ebp+10h]"
"	      004ace3d    je near ptr 004ACFF6h"
"	      004ace43    mov eax,[ebp-28h]"
"	      004ace46    mov eax,[eax+0Ch]"
"	      004ace49    dec dword ptr [eax+0Ch]"
"	      004ace4c    mov eax,[ebp-28h]"
"	      004ace4f    mov eax,[eax+0Ch]"
"	      004ace52    cmp dword ptr [eax+0Ch],0"
"	      004ace56    jne near ptr 004ACECFh"
"	      004ace5c    mov eax,[ebp-28h]"
"	      004ace5f    mov eax,[eax+0Ch]"
"	      004ace62    mov [ebp-0Ch],eax"
"	      004ace65    mov eax,[ebp-0Ch]"
"	      004ace68    mov [ebp-8],eax"
"	      004ace6b    cmp dword ptr [ebp-8],0"
"	      004ace6f    je near ptr 004ACECFh"
"	      004ace75    mov eax,[ebp-8]"
"	      004ace78    cmp dword ptr [eax+8],0"
"	      004ace7c    je near ptr 004ACEAFh"
"	      004ace82    mov eax,[ebp-8]"
"	      004ace85    mov eax,[eax]"
"	      004ace87    mov [ebp-10h],eax"
"	      004ace8a    mov eax,[ebp-10h]"
"	      004ace8d    mov [ebp-14h],eax"
"	      004ace90    mov eax,[ebp-14h]"
"	      004ace93    push eax"
"	      004ace94    call 0056A740h"
"	      004ace99    add esp,4"
"	      004ace9c    mov eax,[ebp-8]"
"	      004ace9f    mov dword ptr [eax+8],0"
"	      004acea6    mov eax,[ebp-8]"
"	      004acea9    mov dword ptr [eax],0"
"	      004aceaf    jmp near ptr 004ACEB4h"
"	      004aceb4    jmp near ptr 004ACEB9h"
"	      004aceb9    mov eax,[ebp-8]"
"	      004acebc    push eax"
"	      004acebd    call 0056A740h"
"	      004acec2    add esp,4"
"	      004acec5    jmp near ptr 004ACECAh"
"	      004aceca    jmp near ptr 004ACECFh"
"	      004acecf    jmp near ptr 004ACED4h"
"	      004aced4    jmp near ptr 004ACED9h"
"	      004aced9    mov eax,[ebp+10h]"
"	      004acedc    mov eax,[eax+4]"
"	      004acedf    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      004acee3    je near ptr 004ACF03h"
"	      004acee9    mov eax,[ebp+10h]"
"	      004aceec    mov eax,[eax+4]"
"	      004aceef    mov ecx,[ebp-28h]"
"	      004acef2    mov [ecx+0Ch],eax"
"	      004acef5    mov eax,[ebp-28h]"
"	      004acef8    mov eax,[eax+0Ch]"
"	      004acefb    inc dword ptr [eax+0Ch]"
"	      004acefe    jmp near ptr 004ACFF6h"
"	      004acf03    push 10h"
"	      004acf05    call 0056A600h"
"	      004acf0a    add esp,4"
"	      004acf0d    mov [ebp-4],eax"
"	      004acf10    cmp dword ptr [ebp-4],0"
"	      004acf14    je near ptr 004ACFECh"
"	      004acf1a    jmp near ptr 004ACF1Fh"
"	      004acf1f    mov eax,[ebp+10h]"
"	      004acf22    mov eax,[eax+4]"
"	      004acf25    mov eax,[eax+4]"
"	      004acf28    mov [ebp-24h],eax"
"	      004acf2b    mov eax,[ebp-24h]"
"	      004acf2e    mov ecx,[ebp-4]"
"	      004acf31    mov [ecx+4],eax"
"	      004acf34    mov eax,[ebp-4]"
"	      004acf37    mov eax,[eax+4]"
"	      004acf3a    mov ecx,[ebp-4]"
"	      004acf3d    mov [ecx+8],eax"
"	      004acf40    mov eax,[ebp-4]"
"	      004acf43    cmp dword ptr [eax+8],0"
"	      004acf47    je near ptr 004ACFC6h"
"	      004acf4d    mov eax,[ebp-4]"
"	      004acf50    mov eax,[eax+8]"
"	      004acf53    push eax"
"	      004acf54    call 0056A600h"
"	      004acf59    add esp,4"
"	      004acf5c    mov ecx,[ebp-4]"
"	      004acf5f    mov [ecx],eax"
"	      004acf61    jmp near ptr 004ACF66h"
"	      004acf66    mov eax,[ebp+10h]"
"	      004acf69    mov eax,[eax+4]"
"	      004acf6c    cmp dword ptr [eax+4],0"
"	      004acf70    je near ptr 004ACF8Bh"
"	      004acf76    mov eax,[ebp+10h]"
"	      004acf79    mov eax,[eax+4]"
"	      004acf7c    mov eax,[eax]"
"	      004acf7e    mov [ebp-18h],eax"
"	      004acf81    jmp near ptr 004ACF97h"
"	      004acf86    jmp near ptr 004ACF97h"
"	      004acf8b    mov dword ptr [ebp-18h],0"
"	      004acf92    jmp near ptr 004ACF97h"
"	      004acf97    mov eax,[ebp-4]"
"	      004acf9a    mov eax,[eax+4]"
"	      004acf9d    mov [ebp-1Ch],eax"
"	      004acfa0    mov eax,[ebp-4]"
"	      004acfa3    mov eax,[eax]"
"	      004acfa5    mov [ebp-20h],eax"
"	      004acfa8    mov eax,[ebp-1Ch]"
"	      004acfab    push eax"
"	      004acfac    mov eax,[ebp-18h]"
"	      004acfaf    push eax"
"	      004acfb0    mov eax,[ebp-20h]"
"	      004acfb3    push eax"
"	      004acfb4    call 0056A800h"
"	      004acfb9    add esp,0Ch"
"	      004acfbc    jmp near ptr 004ACFC1h"
"	      004acfc1    jmp near ptr 004ACFCFh"
"	      004acfc6    mov eax,[ebp-4]"
"	      004acfc9    mov dword ptr [eax],0"
"	      004acfcf    mov eax,[ebp-4]"
"	      004acfd2    mov dword ptr [eax+0Ch],1"
"	      004acfd9    jmp near ptr 004ACFDEh"
"	      004acfde    mov eax,[ebp-4]"
"	      004acfe1    mov ecx,[ebp-28h]"
"	      004acfe4    mov [ecx+0Ch],eax"
"	      004acfe7    jmp near ptr 004ACFF6h"
"	      004acfec    mov eax,[ebp-28h]"
"	      004acfef    mov dword ptr [eax+0Ch],0"
"	      004acff6    jmp near ptr 004ACFFBh"
);
// LINE 140:
	asm( 
"	      004acffb    mov ecx,[ebp-28h]"
"	      004acffe    mov eax,[ebp-28h]"
"	      004ad001    mov eax,[eax+84h]"
"	      004ad007    add ecx,84h"
"	      004ad00d    call dword ptr [eax]"
);
// LINE 141:
	asm( 
"	      004ad00f    jmp near ptr 004AD014h"
"	      004ad014    mov eax,[ebp-28h]"
"	      004ad017    pop edi"
"	      004ad018    pop esi"
"	      004ad019    pop ebx"
"	      004ad01a    leave"
"	      004ad01b    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x004ad01e
void TextWindow::LoadStrings() {
// LINE 149:
	asm( 
"	      004ad01e    push ebp"
"	      004ad01f    mov ebp,esp"
"	      004ad021    mov eax,1070h"
"	      004ad026    call 0056AC60h"
"	      004ad02b    push ebx"
"	      004ad02c    push esi"
"	      004ad02d    push edi"
"	      004ad02e    mov [ebp-1070h],ecx"
);
// LINE 152:
	asm( 
"	      004ad034    push 0"
"	      004ad036    mov eax,[ebp-1070h]"
"	      004ad03c    mov eax,[eax+80h]"
"	      004ad042    push eax"
"	      004ad043    call 0042B15Fh"
"	      004ad048    add esp,8"
"	      004ad04b    mov [ebp-4],eax"
);
// LINE 153:
	asm( 
"	      004ad04e    push 0FFFh"
"	      004ad053    lea eax,[ebp-1004h]"
"	      004ad059    push eax"
"	      004ad05a    mov eax,[ebp-4]"
"	      004ad05d    push eax"
"	      004ad05e    mov eax,ds:[5C28C8h]"
"	      004ad063    push eax"
"	      004ad064    call dword ptr ds:[6C38B4h]"
"	      004ad06a    mov [ebp-1008h],eax"
"	      004ad070    cmp dword ptr [ebp-1008h],0"
"	      004ad077    jne near ptr 004AD4B1h"
"	      004ad07d    push 0FFFh"
"	      004ad082    lea eax,[ebp-1004h]"
"	      004ad088    push eax"
"	      004ad089    mov ecx,3E8h"
"	      004ad08e    mov eax,[ebp-4]"
"	      004ad091    sub edx,edx"
"	      004ad093    div ecx"
"	      004ad095    push edx"
"	      004ad096    mov eax,ds:[5C28C8h]"
"	      004ad09b    push eax"
"	      004ad09c    call dword ptr ds:[6C38B4h]"
"	      004ad0a2    mov [ebp-1008h],eax"
"	      004ad0a8    jmp near ptr 004AD0ADh"
"	      004ad0ad    lea eax,[ebp-1004h]"
"	      004ad0b3    push eax"
"	      004ad0b4    call 0056ABE0h"
"	      004ad0b9    add esp,4"
"	      004ad0bc    mov [ebp-1024h],eax"
"	      004ad0c2    cmp dword ptr [ebp-1024h],0FFFFFFFFh"
"	      004ad0c9    jne near ptr 004AD107h"
"	      004ad0cf    push 5971E4h"
"	      004ad0d4    mov ecx,638C00h"
"	      004ad0d9    call 00569960h"
"	      004ad0de    mov [ebp-1018h],eax"
"	      004ad0e4    mov eax,[ebp-1018h]"
"	      004ad0ea    push eax"
"	      004ad0eb    call 004011B0h"
"	      004ad0f0    add esp,4"
"	      004ad0f3    jmp near ptr 004AD0F8h"
"	      004ad0f8    push 1"
"	      004ad0fa    call 00569430h"
"	      004ad0ff    add esp,4"
"	      004ad102    jmp near ptr 004AD107h"
"	      004ad107    jmp near ptr 004AD10Ch"
"	      004ad10c    mov eax,[ebp-1070h]"
"	      004ad112    mov eax,[eax+0Ch]"
"	      004ad115    cmp dword ptr [eax+0Ch],1"
"	      004ad119    ja near ptr 004AD149h"
"	      004ad11f    cmp dword ptr [ebp-1024h],0"
"	      004ad126    je near ptr 004AD206h"
"	      004ad12c    jmp near ptr 004AD131h"
"	      004ad131    mov eax,[ebp-1070h]"
"	      004ad137    mov eax,[eax+0Ch]"
"	      004ad13a    mov ecx,[ebp-1024h]"
"	      004ad140    cmp [eax+8],ecx"
"	      004ad143    jae near ptr 004AD206h"
"	      004ad149    push 10h"
"	      004ad14b    call 0056A600h"
"	      004ad150    add esp,4"
"	      004ad153    mov [ebp-1010h],eax"
"	      004ad159    cmp dword ptr [ebp-1010h],0"
"	      004ad160    je near ptr 004AD18Ah"
"	      004ad166    mov eax,[ebp-1024h]"
"	      004ad16c    push eax"
"	      004ad16d    lea eax,[ebp-1004h]"
"	      004ad173    push eax"
"	      004ad174    mov ecx,[ebp-1010h]"
"	      004ad17a    call 0041E090h"
"	      004ad17f    mov [ebp-100Ch],eax"
"	      004ad185    jmp near ptr 004AD194h"
"	      004ad18a    mov dword ptr [ebp-100Ch],0"
"	      004ad194    mov eax,[ebp-1070h]"
"	      004ad19a    mov eax,[eax+0Ch]"
"	      004ad19d    dec dword ptr [eax+0Ch]"
"	      004ad1a0    mov eax,[ebp-1070h]"
"	      004ad1a6    mov eax,[eax+0Ch]"
"	      004ad1a9    cmp dword ptr [eax+0Ch],0"
"	      004ad1ad    jne near ptr 004AD1EDh"
"	      004ad1b3    mov eax,[ebp-1070h]"
"	      004ad1b9    mov eax,[eax+0Ch]"
"	      004ad1bc    mov [ebp-1020h],eax"
"	      004ad1c2    mov eax,[ebp-1020h]"
"	      004ad1c8    mov [ebp-101Ch],eax"
"	      004ad1ce    cmp dword ptr [ebp-101Ch],0"
"	      004ad1d5    je near ptr 004AD1EDh"
"	      004ad1db    push 1"
"	      004ad1dd    mov ecx,[ebp-101Ch]"
"	      004ad1e3    call 0041DD70h"
"	      004ad1e8    jmp near ptr 004AD1EDh"
"	      004ad1ed    jmp near ptr 004AD1F2h"
"	      004ad1f2    mov eax,[ebp-100Ch]"
"	      004ad1f8    mov ecx,[ebp-1070h]"
"	      004ad1fe    mov [ecx+0Ch],eax"
"	      004ad201    jmp near ptr 004AD24Bh"
"	      004ad206    cmp dword ptr [ebp-1024h],0"
"	      004ad20d    je near ptr 004AD24Bh"
"	      004ad213    jmp near ptr 004AD218h"
"	      004ad218    mov eax,[ebp-1070h]"
"	      004ad21e    mov eax,[eax+0Ch]"
"	      004ad221    mov eax,[eax]"
"	      004ad223    mov [ebp-1014h],eax"
"	      004ad229    mov eax,[ebp-1024h]"
"	      004ad22f    push eax"
"	      004ad230    lea eax,[ebp-1004h]"
"	      004ad236    push eax"
"	      004ad237    mov eax,[ebp-1014h]"
"	      004ad23d    push eax"
"	      004ad23e    call 0056A800h"
"	      004ad243    add esp,0Ch"
"	      004ad246    jmp near ptr 004AD24Bh"
"	      004ad24b    mov eax,[ebp-1024h]"
"	      004ad251    mov ecx,[ebp-1070h]"
"	      004ad257    mov ecx,[ecx+0Ch]"
"	      004ad25a    mov [ecx+4],eax"
"	      004ad25d    jmp near ptr 004AD262h"
"	      004ad262    jmp near ptr 004AD267h"
"	      004ad267    jmp near ptr 004AD26Ch"
"	      004ad26c    push 597200h"
"	      004ad271    call 0056ABE0h"
"	      004ad276    add esp,4"
"	      004ad279    mov [ebp-1044h],eax"
"	      004ad27f    jmp near ptr 004AD284h"
"	      004ad284    mov eax,[ebp-1070h]"
"	      004ad28a    mov eax,[eax+0Ch]"
"	      004ad28d    mov ecx,0FFFFFFFFh"
"	      004ad292    sub ecx,[ebp-1044h]"
"	      004ad298    cmp [eax+4],ecx"
"	      004ad29b    jb near ptr 004AD2D9h"
"	      004ad2a1    push 5971E4h"
"	      004ad2a6    mov ecx,638C00h"
"	      004ad2ab    call 00569960h"
"	      004ad2b0    mov [ebp-1038h],eax"
"	      004ad2b6    mov eax,[ebp-1038h]"
"	      004ad2bc    push eax"
"	      004ad2bd    call 004011B0h"
"	      004ad2c2    add esp,4"
"	      004ad2c5    jmp near ptr 004AD2CAh"
"	      004ad2ca    push 1"
"	      004ad2cc    call 00569430h"
"	      004ad2d1    add esp,4"
"	      004ad2d4    jmp near ptr 004AD2D9h"
"	      004ad2d9    jmp near ptr 004AD2DEh"
"	      004ad2de    mov eax,[ebp-1070h]"
"	      004ad2e4    mov eax,[eax+0Ch]"
"	      004ad2e7    cmp dword ptr [eax+0Ch],1"
"	      004ad2eb    ja near ptr 004AD31Fh"
"	      004ad2f1    jmp near ptr 004AD2F6h"
"	      004ad2f6    jmp near ptr 004AD2FBh"
"	      004ad2fb    mov eax,[ebp-1070h]"
"	      004ad301    mov eax,[eax+0Ch]"
"	      004ad304    mov eax,[eax+8]"
"	      004ad307    mov ecx,[ebp-1070h]"
"	      004ad30d    mov ecx,[ecx+0Ch]"
"	      004ad310    sub eax,[ecx+4]"
"	      004ad313    cmp eax,[ebp-1044h]"
"	      004ad319    jae near ptr 004AD43Ch"
"	      004ad31f    push 10h"
"	      004ad321    call 0056A600h"
"	      004ad326    add esp,4"
"	      004ad329    mov [ebp-102Ch],eax"
"	      004ad32f    cmp dword ptr [ebp-102Ch],0"
"	      004ad336    je near ptr 004AD3C5h"
"	      004ad33c    jmp near ptr 004AD341h"
"	      004ad341    jmp near ptr 004AD346h"
"	      004ad346    jmp near ptr 004AD34Bh"
"	      004ad34b    mov eax,[ebp-1070h]"
"	      004ad351    mov eax,[eax+0Ch]"
"	      004ad354    cmp dword ptr [eax+4],0"
"	      004ad358    je near ptr 004AD379h"
"	      004ad35e    mov eax,[ebp-1070h]"
"	      004ad364    mov eax,[eax+0Ch]"
"	      004ad367    mov eax,[eax]"
"	      004ad369    mov [ebp-1034h],eax"
"	      004ad36f    jmp near ptr 004AD388h"
"	      004ad374    jmp near ptr 004AD388h"
"	      004ad379    mov dword ptr [ebp-1034h],0"
"	      004ad383    jmp near ptr 004AD388h"
"	      004ad388    mov eax,[ebp-1070h]"
"	      004ad38e    mov eax,[eax+0Ch]"
"	      004ad391    mov eax,[eax+4]"
"	      004ad394    add eax,[ebp-1044h]"
"	      004ad39a    push eax"
"	      004ad39b    mov eax,[ebp-1070h]"
"	      004ad3a1    mov eax,[eax+0Ch]"
"	      004ad3a4    mov eax,[eax+4]"
"	      004ad3a7    push eax"
"	      004ad3a8    mov eax,[ebp-1034h]"
"	      004ad3ae    push eax"
"	      004ad3af    mov ecx,[ebp-102Ch]"
"	      004ad3b5    call 0041E160h"
"	      004ad3ba    mov [ebp-1028h],eax"
"	      004ad3c0    jmp near ptr 004AD3CFh"
"	      004ad3c5    mov dword ptr [ebp-1028h],0"
"	      004ad3cf    mov eax,[ebp-1070h]"
"	      004ad3d5    mov eax,[eax+0Ch]"
"	      004ad3d8    dec dword ptr [eax+0Ch]"
"	      004ad3db    mov eax,[ebp-1070h]"
"	      004ad3e1    mov eax,[eax+0Ch]"
"	      004ad3e4    cmp dword ptr [eax+0Ch],0"
"	      004ad3e8    jne near ptr 004AD428h"
"	      004ad3ee    mov eax,[ebp-1070h]"
"	      004ad3f4    mov eax,[eax+0Ch]"
"	      004ad3f7    mov [ebp-1040h],eax"
"	      004ad3fd    mov eax,[ebp-1040h]"
"	      004ad403    mov [ebp-103Ch],eax"
"	      004ad409    cmp dword ptr [ebp-103Ch],0"
"	      004ad410    je near ptr 004AD428h"
"	      004ad416    push 1"
"	      004ad418    mov ecx,[ebp-103Ch]"
"	      004ad41e    call 0041DD70h"
"	      004ad423    jmp near ptr 004AD428h"
"	      004ad428    jmp near ptr 004AD42Dh"
"	      004ad42d    mov eax,[ebp-1028h]"
"	      004ad433    mov ecx,[ebp-1070h]"
"	      004ad439    mov [ecx+0Ch],eax"
"	      004ad43c    cmp dword ptr [ebp-1044h],0"
"	      004ad443    je near ptr 004AD490h"
"	      004ad449    jmp near ptr 004AD44Eh"
"	      004ad44e    jmp near ptr 004AD453h"
"	      004ad453    mov eax,[ebp-1070h]"
"	      004ad459    mov eax,[eax+0Ch]"
"	      004ad45c    mov eax,[eax+4]"
"	      004ad45f    mov ecx,[ebp-1070h]"
"	      004ad465    mov ecx,[ecx+0Ch]"
"	      004ad468    add eax,[ecx]"
"	      004ad46a    mov [ebp-1030h],eax"
"	      004ad470    mov eax,[ebp-1044h]"
"	      004ad476    push eax"
"	      004ad477    push 597200h"
"	      004ad47c    mov eax,[ebp-1030h]"
"	      004ad482    push eax"
"	      004ad483    call 0056A800h"
"	      004ad488    add esp,0Ch"
"	      004ad48b    jmp near ptr 004AD490h"
"	      004ad490    mov eax,[ebp-1044h]"
"	      004ad496    mov ecx,[ebp-1070h]"
"	      004ad49c    mov ecx,[ecx+0Ch]"
"	      004ad49f    add [ecx+4],eax"
"	      004ad4a2    jmp near ptr 004AD4A7h"
"	      004ad4a7    jmp near ptr 004AD4ACh"
"	      004ad4ac    jmp near ptr 004AD76Bh"
"	      004ad4b1    jmp near ptr 004AD4B6h"
"	      004ad4b6    lea eax,[ebp-1004h]"
"	      004ad4bc    push eax"
"	      004ad4bd    call 0056ABE0h"
"	      004ad4c2    add esp,4"
"	      004ad4c5    mov [ebp-106Ch],eax"
"	      004ad4cb    cmp dword ptr [ebp-106Ch],0FFFFFFFFh"
"	      004ad4d2    jne near ptr 004AD510h"
"	      004ad4d8    push 5971E4h"
"	      004ad4dd    mov ecx,638C00h"
"	      004ad4e2    call 00569960h"
"	      004ad4e7    mov [ebp-1054h],eax"
"	      004ad4ed    mov eax,[ebp-1054h]"
"	      004ad4f3    push eax"
"	      004ad4f4    call 004011B0h"
"	      004ad4f9    add esp,4"
"	      004ad4fc    jmp near ptr 004AD501h"
"	      004ad501    push 1"
"	      004ad503    call 00569430h"
"	      004ad508    add esp,4"
"	      004ad50b    jmp near ptr 004AD510h"
"	      004ad510    jmp near ptr 004AD515h"
"	      004ad515    mov eax,[ebp-1070h]"
"	      004ad51b    mov eax,[eax+0Ch]"
"	      004ad51e    cmp dword ptr [eax+0Ch],1"
"	      004ad522    ja near ptr 004AD552h"
"	      004ad528    cmp dword ptr [ebp-106Ch],0"
"	      004ad52f    je near ptr 004AD705h"
"	      004ad535    jmp near ptr 004AD53Ah"
"	      004ad53a    mov eax,[ebp-1070h]"
"	      004ad540    mov eax,[eax+0Ch]"
"	      004ad543    mov ecx,[ebp-106Ch]"
"	      004ad549    cmp [eax+8],ecx"
"	      004ad54c    jae near ptr 004AD705h"
"	      004ad552    push 10h"
"	      004ad554    call 0056A600h"
"	      004ad559    add esp,4"
"	      004ad55c    mov [ebp-104Ch],eax"
"	      004ad562    cmp dword ptr [ebp-104Ch],0"
"	      004ad569    je near ptr 004AD672h"
"	      004ad56f    cmp dword ptr [ebp-106Ch],0FFFFFFFFh"
"	      004ad576    jne near ptr 004AD5B4h"
"	      004ad57c    push 5971E4h"
"	      004ad581    mov ecx,638C00h"
"	      004ad586    call 00569960h"
"	      004ad58b    mov [ebp-1068h],eax"
"	      004ad591    mov eax,[ebp-1068h]"
"	      004ad597    push eax"
"	      004ad598    call 004011B0h"
"	      004ad59d    add esp,4"
"	      004ad5a0    jmp near ptr 004AD5A5h"
"	      004ad5a5    push 1"
"	      004ad5a7    call 00569430h"
"	      004ad5ac    add esp,4"
"	      004ad5af    jmp near ptr 004AD5B4h"
"	      004ad5b4    mov eax,[ebp-106Ch]"
"	      004ad5ba    mov ecx,[ebp-104Ch]"
"	      004ad5c0    mov [ecx+4],eax"
"	      004ad5c3    mov eax,[ebp-104Ch]"
"	      004ad5c9    mov eax,[eax+4]"
"	      004ad5cc    mov ecx,[ebp-104Ch]"
"	      004ad5d2    mov [ecx+8],eax"
"	      004ad5d5    mov eax,[ebp-104Ch]"
"	      004ad5db    cmp dword ptr [eax+8],0"
"	      004ad5df    je near ptr 004AD643h"
"	      004ad5e5    mov eax,[ebp-104Ch]"
"	      004ad5eb    mov eax,[eax+8]"
"	      004ad5ee    push eax"
"	      004ad5ef    call 0056A600h"
"	      004ad5f4    add esp,4"
"	      004ad5f7    mov ecx,[ebp-104Ch]"
"	      004ad5fd    mov [ecx],eax"
"	      004ad5ff    mov eax,[ebp-104Ch]"
"	      004ad605    mov eax,[eax+4]"
"	      004ad608    mov [ebp-1060h],eax"
"	      004ad60e    mov eax,[ebp-104Ch]"
"	      004ad614    mov eax,[eax]"
"	      004ad616    mov [ebp-1064h],eax"
"	      004ad61c    mov eax,[ebp-1060h]"
"	      004ad622    push eax"
"	      004ad623    lea eax,[ebp-1004h]"
"	      004ad629    push eax"
"	      004ad62a    mov eax,[ebp-1064h]"
"	      004ad630    push eax"
"	      004ad631    call 0056A800h"
"	      004ad636    add esp,0Ch"
"	      004ad639    jmp near ptr 004AD63Eh"
"	      004ad63e    jmp near ptr 004AD64Fh"
"	      004ad643    mov eax,[ebp-104Ch]"
"	      004ad649    mov dword ptr [eax],0"
"	      004ad64f    mov eax,[ebp-104Ch]"
"	      004ad655    mov dword ptr [eax+0Ch],1"
"	      004ad65c    jmp near ptr 004AD661h"
"	      004ad661    mov eax,[ebp-104Ch]"
"	      004ad667    mov [ebp-1048h],eax"
"	      004ad66d    jmp near ptr 004AD67Ch"
"	      004ad672    mov dword ptr [ebp-1048h],0"
"	      004ad67c    mov eax,[ebp-1070h]"
"	      004ad682    mov eax,[eax+0Ch]"
"	      004ad685    dec dword ptr [eax+0Ch]"
"	      004ad688    mov eax,[ebp-1070h]"
"	      004ad68e    mov eax,[eax+0Ch]"
"	      004ad691    cmp dword ptr [eax+0Ch],0"
"	      004ad695    jne near ptr 004AD6ECh"
"	      004ad69b    mov eax,[ebp-1070h]"
"	      004ad6a1    mov eax,[eax+0Ch]"
"	      004ad6a4    mov [ebp-105Ch],eax"
"	      004ad6aa    mov eax,[ebp-105Ch]"
"	      004ad6b0    mov [ebp-1058h],eax"
"	      004ad6b6    cmp dword ptr [ebp-1058h],0"
"	      004ad6bd    je near ptr 004AD6ECh"
"	      004ad6c3    mov ecx,[ebp-1058h]"
"	      004ad6c9    call 0041F4B0h"
"	      004ad6ce    jmp near ptr 004AD6D3h"
"	      004ad6d3    mov eax,[ebp-1058h]"
"	      004ad6d9    push eax"
"	      004ad6da    call 0056A740h"
"	      004ad6df    add esp,4"
"	      004ad6e2    jmp near ptr 004AD6E7h"
"	      004ad6e7    jmp near ptr 004AD6ECh"
"	      004ad6ec    jmp near ptr 004AD6F1h"
"	      004ad6f1    mov eax,[ebp-1048h]"
"	      004ad6f7    mov ecx,[ebp-1070h]"
"	      004ad6fd    mov [ecx+0Ch],eax"
"	      004ad700    jmp near ptr 004AD74Ah"
"	      004ad705    cmp dword ptr [ebp-106Ch],0"
"	      004ad70c    je near ptr 004AD74Ah"
"	      004ad712    jmp near ptr 004AD717h"
"	      004ad717    mov eax,[ebp-1070h]"
"	      004ad71d    mov eax,[eax+0Ch]"
"	      004ad720    mov eax,[eax]"
"	      004ad722    mov [ebp-1050h],eax"
"	      004ad728    mov eax,[ebp-106Ch]"
"	      004ad72e    push eax"
"	      004ad72f    lea eax,[ebp-1004h]"
"	      004ad735    push eax"
"	      004ad736    mov eax,[ebp-1050h]"
"	      004ad73c    push eax"
"	      004ad73d    call 0056A800h"
"	      004ad742    add esp,0Ch"
"	      004ad745    jmp near ptr 004AD74Ah"
"	      004ad74a    mov eax,[ebp-106Ch]"
"	      004ad750    mov ecx,[ebp-1070h]"
"	      004ad756    mov ecx,[ecx+0Ch]"
"	      004ad759    mov [ecx+4],eax"
"	      004ad75c    jmp near ptr 004AD761h"
"	      004ad761    jmp near ptr 004AD766h"
"	      004ad766    jmp near ptr 004AD76Bh"
);
// LINE 154:
	asm( 
"	      004ad76b    jmp near ptr 004AD770h"
"	      004ad770    pop edi"
"	      004ad771    pop esi"
"	      004ad772    pop ebx"
"	      004ad773    leave"
"	      004ad774    ret"
);
}

// FUNCTION: SIMCOPTER 0x004ad775
void TextWindow::SetWindowTitle(int32_t) {
// LINE 159:
	asm( 
"	      004ad775    push ebp"
"	      004ad776    mov ebp,esp"
"	      004ad778    sub esp,4"
"	      004ad77b    push ebx"
"	      004ad77c    push esi"
"	      004ad77d    push edi"
"	      004ad77e    mov [ebp-4],ecx"
);
// LINE 160:
	asm( 
"	      004ad781    mov eax,[ebp+8]"
"	      004ad784    mov ecx,[ebp-4]"
"	      004ad787    mov [ecx+80h],eax"
);
// LINE 161:
	asm( 
"	      004ad78d    mov eax,[ebp-4]"
"	      004ad790    mov eax,[eax]"
"	      004ad792    mov ecx,[ebp-4]"
"	      004ad795    call dword ptr [eax+0DCh]"
);
// LINE 162:
	asm( 
"	      004ad79b    push 1"
"	      004ad79d    push 1"
"	      004ad79f    mov eax,[ebp-4]"
"	      004ad7a2    mov eax,[eax]"
"	      004ad7a4    mov ecx,[ebp-4]"
"	      004ad7a7    call dword ptr [eax+30h]"
);
// LINE 163:
	asm( 
"	      004ad7aa    jmp near ptr 004AD7AFh"
"	      004ad7af    pop edi"
"	      004ad7b0    pop esi"
"	      004ad7b1    pop ebx"
"	      004ad7b2    leave"
"	      004ad7b3    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004ad7b6
void TextWindow::SetWindowTitle(const class basic_string<char>&) {
// LINE 168:
	asm( 
"	      004ad7b6    push ebp"
"	      004ad7b7    mov ebp,esp"
"	      004ad7b9    sub esp,28h"
"	      004ad7bc    push ebx"
"	      004ad7bd    push esi"
"	      004ad7be    push edi"
"	      004ad7bf    mov [ebp-28h],ecx"
);
// LINE 169:
	asm( 
"	      004ad7c2    mov eax,[ebp-28h]"
"	      004ad7c5    add eax,8"
"	      004ad7c8    cmp eax,[ebp+8]"
"	      004ad7cb    je near ptr 004AD984h"
"	      004ad7d1    mov eax,[ebp-28h]"
"	      004ad7d4    mov eax,[eax+0Ch]"
"	      004ad7d7    dec dword ptr [eax+0Ch]"
"	      004ad7da    mov eax,[ebp-28h]"
"	      004ad7dd    mov eax,[eax+0Ch]"
"	      004ad7e0    cmp dword ptr [eax+0Ch],0"
"	      004ad7e4    jne near ptr 004AD85Dh"
"	      004ad7ea    mov eax,[ebp-28h]"
"	      004ad7ed    mov eax,[eax+0Ch]"
"	      004ad7f0    mov [ebp-0Ch],eax"
"	      004ad7f3    mov eax,[ebp-0Ch]"
"	      004ad7f6    mov [ebp-8],eax"
"	      004ad7f9    cmp dword ptr [ebp-8],0"
"	      004ad7fd    je near ptr 004AD85Dh"
"	      004ad803    mov eax,[ebp-8]"
"	      004ad806    cmp dword ptr [eax+8],0"
"	      004ad80a    je near ptr 004AD83Dh"
"	      004ad810    mov eax,[ebp-8]"
"	      004ad813    mov eax,[eax]"
"	      004ad815    mov [ebp-10h],eax"
"	      004ad818    mov eax,[ebp-10h]"
"	      004ad81b    mov [ebp-14h],eax"
"	      004ad81e    mov eax,[ebp-14h]"
"	      004ad821    push eax"
"	      004ad822    call 0056A740h"
"	      004ad827    add esp,4"
"	      004ad82a    mov eax,[ebp-8]"
"	      004ad82d    mov dword ptr [eax+8],0"
"	      004ad834    mov eax,[ebp-8]"
"	      004ad837    mov dword ptr [eax],0"
"	      004ad83d    jmp near ptr 004AD842h"
"	      004ad842    jmp near ptr 004AD847h"
"	      004ad847    mov eax,[ebp-8]"
"	      004ad84a    push eax"
"	      004ad84b    call 0056A740h"
"	      004ad850    add esp,4"
"	      004ad853    jmp near ptr 004AD858h"
"	      004ad858    jmp near ptr 004AD85Dh"
"	      004ad85d    jmp near ptr 004AD862h"
"	      004ad862    jmp near ptr 004AD867h"
"	      004ad867    mov eax,[ebp+8]"
"	      004ad86a    mov eax,[eax+4]"
"	      004ad86d    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      004ad871    je near ptr 004AD891h"
"	      004ad877    mov eax,[ebp+8]"
"	      004ad87a    mov eax,[eax+4]"
"	      004ad87d    mov ecx,[ebp-28h]"
"	      004ad880    mov [ecx+0Ch],eax"
"	      004ad883    mov eax,[ebp-28h]"
"	      004ad886    mov eax,[eax+0Ch]"
"	      004ad889    inc dword ptr [eax+0Ch]"
"	      004ad88c    jmp near ptr 004AD984h"
"	      004ad891    push 10h"
"	      004ad893    call 0056A600h"
"	      004ad898    add esp,4"
"	      004ad89b    mov [ebp-4],eax"
"	      004ad89e    cmp dword ptr [ebp-4],0"
"	      004ad8a2    je near ptr 004AD97Ah"
"	      004ad8a8    jmp near ptr 004AD8ADh"
"	      004ad8ad    mov eax,[ebp+8]"
"	      004ad8b0    mov eax,[eax+4]"
"	      004ad8b3    mov eax,[eax+4]"
"	      004ad8b6    mov [ebp-24h],eax"
"	      004ad8b9    mov eax,[ebp-24h]"
"	      004ad8bc    mov ecx,[ebp-4]"
"	      004ad8bf    mov [ecx+4],eax"
"	      004ad8c2    mov eax,[ebp-4]"
"	      004ad8c5    mov eax,[eax+4]"
"	      004ad8c8    mov ecx,[ebp-4]"
"	      004ad8cb    mov [ecx+8],eax"
"	      004ad8ce    mov eax,[ebp-4]"
"	      004ad8d1    cmp dword ptr [eax+8],0"
"	      004ad8d5    je near ptr 004AD954h"
"	      004ad8db    mov eax,[ebp-4]"
"	      004ad8de    mov eax,[eax+8]"
"	      004ad8e1    push eax"
"	      004ad8e2    call 0056A600h"
"	      004ad8e7    add esp,4"
"	      004ad8ea    mov ecx,[ebp-4]"
"	      004ad8ed    mov [ecx],eax"
"	      004ad8ef    jmp near ptr 004AD8F4h"
"	      004ad8f4    mov eax,[ebp+8]"
"	      004ad8f7    mov eax,[eax+4]"
"	      004ad8fa    cmp dword ptr [eax+4],0"
"	      004ad8fe    je near ptr 004AD919h"
"	      004ad904    mov eax,[ebp+8]"
"	      004ad907    mov eax,[eax+4]"
"	      004ad90a    mov eax,[eax]"
"	      004ad90c    mov [ebp-18h],eax"
"	      004ad90f    jmp near ptr 004AD925h"
"	      004ad914    jmp near ptr 004AD925h"
"	      004ad919    mov dword ptr [ebp-18h],0"
"	      004ad920    jmp near ptr 004AD925h"
"	      004ad925    mov eax,[ebp-4]"
"	      004ad928    mov eax,[eax+4]"
"	      004ad92b    mov [ebp-1Ch],eax"
"	      004ad92e    mov eax,[ebp-4]"
"	      004ad931    mov eax,[eax]"
"	      004ad933    mov [ebp-20h],eax"
"	      004ad936    mov eax,[ebp-1Ch]"
"	      004ad939    push eax"
"	      004ad93a    mov eax,[ebp-18h]"
"	      004ad93d    push eax"
"	      004ad93e    mov eax,[ebp-20h]"
"	      004ad941    push eax"
"	      004ad942    call 0056A800h"
"	      004ad947    add esp,0Ch"
"	      004ad94a    jmp near ptr 004AD94Fh"
"	      004ad94f    jmp near ptr 004AD95Dh"
"	      004ad954    mov eax,[ebp-4]"
"	      004ad957    mov dword ptr [eax],0"
"	      004ad95d    mov eax,[ebp-4]"
"	      004ad960    mov dword ptr [eax+0Ch],1"
"	      004ad967    jmp near ptr 004AD96Ch"
"	      004ad96c    mov eax,[ebp-4]"
"	      004ad96f    mov ecx,[ebp-28h]"
"	      004ad972    mov [ecx+0Ch],eax"
"	      004ad975    jmp near ptr 004AD984h"
"	      004ad97a    mov eax,[ebp-28h]"
"	      004ad97d    mov dword ptr [eax+0Ch],0"
"	      004ad984    jmp near ptr 004AD989h"
);
// LINE 170:
	asm( 
"	      004ad989    push 1"
"	      004ad98b    push 1"
"	      004ad98d    mov eax,[ebp-28h]"
"	      004ad990    mov eax,[eax]"
"	      004ad992    mov ecx,[ebp-28h]"
"	      004ad995    call dword ptr [eax+30h]"
);
// LINE 171:
	asm( 
"	      004ad998    jmp near ptr 004AD99Dh"
"	      004ad99d    pop edi"
"	      004ad99e    pop esi"
"	      004ad99f    pop ebx"
"	      004ad9a0    leave"
"	      004ad9a1    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004ad9a4
int32_t TextWindow::DrawSelf() {
// LINE 178:
	asm( 
"	      004ad9a4    push ebp"
"	      004ad9a5    mov ebp,esp"
"	      004ad9a7    sub esp,38h"
"	      004ad9aa    push ebx"
"	      004ad9ab    push esi"
"	      004ad9ac    push edi"
"	      004ad9ad    mov [ebp-38h],ecx"
);
// LINE 179:
	asm( 
"	      004ad9b0    mov eax,[ebp-38h]"
"	      004ad9b3    add eax,20h"
"	      004ad9b6    lea ecx,[ebp-10h]"
"	      004ad9b9    mov edx,[eax]"
"	      004ad9bb    mov [ecx],edx"
"	      004ad9bd    mov edx,[eax+4]"
"	      004ad9c0    mov [ecx+4],edx"
"	      004ad9c3    mov edx,[eax+8]"
"	      004ad9c6    mov [ecx+8],edx"
"	      004ad9c9    mov eax,[eax+0Ch]"
"	      004ad9cc    mov [ecx+0Ch],eax"
);
// LINE 181:
	asm( 
"	      004ad9cf    mov eax,[ebp-38h]"
"	      004ad9d2    cmp dword ptr [eax+74h],0"
"	      004ad9d6    je near ptr 004AD9FBh"
);
// LINE 182:
	asm( 
"	      004ad9dc    mov eax,[ebp-38h]"
"	      004ad9df    add eax,20h"
"	      004ad9e2    push eax"
"	      004ad9e3    mov eax,[ebp-38h]"
"	      004ad9e6    mov eax,[eax+7Ch]"
"	      004ad9e9    push eax"
"	      004ad9ea    mov eax,[ebp-38h]"
"	      004ad9ed    mov ecx,[ebp-38h]"
"	      004ad9f0    mov ecx,[ecx+44h]"
"	      004ad9f3    mov edx,[ecx]"
"	      004ad9f5    mov ecx,[eax+44h]"
"	      004ad9f8    call dword ptr [edx+44h]"
);
// LINE 183:
	asm( 
"	      004ad9fb    mov eax,[ebp-38h]"
"	      004ad9fe    cmp dword ptr [eax+6Ch],0"
"	      004ada02    je near ptr 004ADA15h"
);
// LINE 184:
	asm( 
"	      004ada08    push 0"
"	      004ada0a    mov eax,[ebp-38h]"
"	      004ada0d    mov eax,[eax]"
"	      004ada0f    mov ecx,[ebp-38h]"
"	      004ada12    call dword ptr [eax+2Ch]"
);
// LINE 185:
	asm( 
"	      004ada15    mov eax,[ebp-38h]"
"	      004ada18    mov eax,[eax+44h]"
"	      004ada1b    mov [ebp-14h],eax"
"	      004ada1e    mov eax,[ebp-38h]"
"	      004ada21    mov eax,[eax+78h]"
"	      004ada24    mov ecx,[ebp-14h]"
"	      004ada27    mov [ecx+38h],eax"
"	      004ada2a    jmp near ptr 004ADA2Fh"
);
// LINE 186:
	asm( 
"	      004ada2f    add dword ptr [ebp-10h],5"
);
// LINE 187:
	asm( 
"	      004ada33    inc dword ptr [ebp-0Ch]"
);
// LINE 189:
	asm( 
"	      004ada36    mov eax,[ebp-38h]"
"	      004ada39    cmp dword ptr [eax+8],0"
"	      004ada3d    je near ptr 004ADA5Eh"
"	      004ada43    mov eax,[ebp-38h]"
"	      004ada46    mov eax,[eax+8]"
"	      004ada49    mov [ebp-18h],eax"
"	      004ada4c    mov eax,[ebp-18h]"
"	      004ada4f    mov [ebp-20h],eax"
"	      004ada52    mov eax,[ebp-20h]"
"	      004ada55    push eax"
"	      004ada56    call 0056A740h"
"	      004ada5b    add esp,4"
"	      004ada5e    jmp near ptr 004ADA63h"
"	      004ada63    mov eax,[ebp-38h]"
"	      004ada66    mov eax,[eax+0Ch]"
"	      004ada69    mov eax,[eax+4]"
"	      004ada6c    inc eax"
"	      004ada6d    push eax"
"	      004ada6e    call 0056A600h"
"	      004ada73    add esp,4"
"	      004ada76    mov ecx,[ebp-38h]"
"	      004ada79    mov [ecx+8],eax"
"	      004ada7c    jmp near ptr 004ADA81h"
"	      004ada81    mov eax,[ebp-38h]"
"	      004ada84    mov eax,[eax+0Ch]"
"	      004ada87    cmp dword ptr [eax+4],0"
"	      004ada8b    je near ptr 004ADAFAh"
"	      004ada91    jmp near ptr 004ADA96h"
"	      004ada96    jmp near ptr 004ADA9Bh"
"	      004ada9b    mov eax,[ebp-38h]"
"	      004ada9e    mov eax,[eax+0Ch]"
"	      004adaa1    cmp dword ptr [eax+4],0"
"	      004adaa5    je near ptr 004ADAC0h"
"	      004adaab    mov eax,[ebp-38h]"
"	      004adaae    mov eax,[eax+0Ch]"
"	      004adab1    mov eax,[eax]"
"	      004adab3    mov [ebp-2Ch],eax"
"	      004adab6    jmp near ptr 004ADACCh"
"	      004adabb    jmp near ptr 004ADACCh"
"	      004adac0    mov dword ptr [ebp-2Ch],0"
"	      004adac7    jmp near ptr 004ADACCh"
"	      004adacc    mov eax,[ebp-38h]"
"	      004adacf    mov eax,[eax+0Ch]"
"	      004adad2    mov eax,[eax+4]"
"	      004adad5    mov [ebp-30h],eax"
"	      004adad8    mov eax,[ebp-38h]"
"	      004adadb    mov eax,[eax+8]"
"	      004adade    mov [ebp-34h],eax"
"	      004adae1    mov eax,[ebp-30h]"
"	      004adae4    push eax"
"	      004adae5    mov eax,[ebp-2Ch]"
"	      004adae8    push eax"
"	      004adae9    mov eax,[ebp-34h]"
"	      004adaec    push eax"
"	      004adaed    call 0056A800h"
"	      004adaf2    add esp,0Ch"
"	      004adaf5    jmp near ptr 004ADAFAh"
"	      004adafa    jmp near ptr 004ADAFFh"
"	      004adaff    mov byte ptr [ebp-1Ch],0"
"	      004adb03    jmp near ptr 004ADB08h"
"	      004adb08    lea eax,[ebp-1Ch]"
"	      004adb0b    mov [ebp-24h],eax"
"	      004adb0e    jmp near ptr 004ADB13h"
"	      004adb13    mov eax,[ebp-38h]"
"	      004adb16    mov eax,[eax+0Ch]"
"	      004adb19    mov eax,[eax+4]"
"	      004adb1c    mov ecx,[ebp-38h]"
"	      004adb1f    add eax,[ecx+8]"
"	      004adb22    mov [ebp-28h],eax"
"	      004adb25    mov eax,[ebp-24h]"
"	      004adb28    mov al,[eax]"
"	      004adb2a    mov ecx,[ebp-28h]"
"	      004adb2d    mov [ecx],al"
"	      004adb2f    jmp near ptr 004ADB34h"
"	      004adb34    jmp near ptr 004ADB39h"
"	      004adb39    mov eax,[ebp-38h]"
"	      004adb3c    add eax,84h"
"	      004adb41    push eax"
"	      004adb42    lea eax,[ebp-4]"
"	      004adb45    push eax"
"	      004adb46    lea eax,[ebp-8]"
"	      004adb49    push eax"
"	      004adb4a    lea eax,[ebp-0Ch]"
"	      004adb4d    push eax"
"	      004adb4e    lea eax,[ebp-10h]"
"	      004adb51    push eax"
"	      004adb52    mov eax,[ebp-38h]"
"	      004adb55    mov eax,[eax+0A0h]"
"	      004adb5b    push eax"
"	      004adb5c    mov eax,[ebp-38h]"
"	      004adb5f    mov eax,[eax+8]"
"	      004adb62    push eax"
"	      004adb63    mov eax,[ebp-38h]"
"	      004adb66    mov ecx,[ebp-38h]"
"	      004adb69    mov ecx,[ecx+44h]"
"	      004adb6c    mov edx,[ecx]"
"	      004adb6e    mov ecx,[eax+44h]"
"	      004adb71    call dword ptr [edx+4Ch]"
);
// LINE 190:
	asm( 
"	      004adb74    mov eax,1"
"	      004adb79    jmp near ptr 004ADB7Eh"
);
// LINE 191:
	asm( 
"	      004adb7e    pop edi"
"	      004adb7f    pop esi"
"	      004adb80    pop ebx"
"	      004adb81    leave"
"	      004adb82    ret"
);
}

// FUNCTION: SIMCOPTER 0x004adb83
void TextWindow::SetBackgroundDrawing(int32_t) {
// LINE 198:
	asm( 
"	      004adb83    push ebp"
"	      004adb84    mov ebp,esp"
"	      004adb86    sub esp,4"
"	      004adb89    push ebx"
"	      004adb8a    push esi"
"	      004adb8b    push edi"
"	      004adb8c    mov [ebp-4],ecx"
);
// LINE 199:
	asm( 
"	      004adb8f    mov eax,[ebp+8]"
"	      004adb92    mov ecx,[ebp-4]"
"	      004adb95    mov [ecx+74h],eax"
);
// LINE 200:
	asm( 
"	      004adb98    jmp near ptr 004ADB9Dh"
"	      004adb9d    pop edi"
"	      004adb9e    pop esi"
"	      004adb9f    pop ebx"
"	      004adba0    leave"
"	      004adba1    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004adba4
void TextWindow::SetFontCharacteristics(long, long, long) {
// LINE 206:
	asm( 
"	      004adba4    push ebp"
"	      004adba5    mov ebp,esp"
"	      004adba7    sub esp,4"
"	      004adbaa    push ebx"
"	      004adbab    push esi"
"	      004adbac    push edi"
"	      004adbad    mov [ebp-4],ecx"
);
// LINE 207:
	asm( 
"	      004adbb0    mov eax,[ebp+10h]"
"	      004adbb3    push eax"
"	      004adbb4    mov eax,[ebp+0Ch]"
"	      004adbb7    push eax"
"	      004adbb8    mov eax,[ebp+8]"
"	      004adbbb    push eax"
"	      004adbbc    mov ecx,[ebp-4]"
"	      004adbbf    add ecx,84h"
"	      004adbc5    call 004A015Dh"
);
// LINE 208:
	asm( 
"	      004adbca    push 1"
"	      004adbcc    push 1"
"	      004adbce    mov eax,[ebp-4]"
"	      004adbd1    mov eax,[eax]"
"	      004adbd3    mov ecx,[ebp-4]"
"	      004adbd6    call dword ptr [eax+30h]"
);
// LINE 209:
	asm( 
"	      004adbd9    jmp near ptr 004ADBDEh"
"	      004adbde    pop edi"
"	      004adbdf    pop esi"
"	      004adbe0    pop ebx"
"	      004adbe1    leave"
"	      004adbe2    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004adbe5
void TextWindow::SetTextDrawStyle(unsigned long) {
// LINE 215:
	asm( 
"	      004adbe5    push ebp"
"	      004adbe6    mov ebp,esp"
"	      004adbe8    sub esp,4"
"	      004adbeb    push ebx"
"	      004adbec    push esi"
"	      004adbed    push edi"
"	      004adbee    mov [ebp-4],ecx"
);
// LINE 216:
	asm( 
"	      004adbf1    mov eax,[ebp+8]"
"	      004adbf4    mov ecx,[ebp-4]"
"	      004adbf7    mov [ecx+0A0h],eax"
);
// LINE 217:
	asm( 
"	      004adbfd    push 1"
"	      004adbff    push 1"
"	      004adc01    mov eax,[ebp-4]"
"	      004adc04    mov eax,[eax]"
"	      004adc06    mov ecx,[ebp-4]"
"	      004adc09    call dword ptr [eax+30h]"
);
// LINE 218:
	asm( 
"	      004adc0c    jmp near ptr 004ADC11h"
"	      004adc11    pop edi"
"	      004adc12    pop esi"
"	      004adc13    pop ebx"
"	      004adc14    leave"
"	      004adc15    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004adc18
void TextWindow::FitWindowToText() {
// LINE 223:
	asm( 
"	      004adc18    push ebp"
"	      004adc19    mov ebp,esp"
"	      004adc1b    sub esp,2Ch"
"	      004adc1e    push ebx"
"	      004adc1f    push esi"
"	      004adc20    push edi"
"	      004adc21    mov [ebp-2Ch],ecx"
);
// LINE 227:
	asm( 
"	      004adc24    mov eax,[ebp-2Ch]"
"	      004adc27    cmp dword ptr [eax+8],0"
"	      004adc2b    je near ptr 004ADC4Ch"
"	      004adc31    mov eax,[ebp-2Ch]"
"	      004adc34    mov eax,[eax+8]"
"	      004adc37    mov [ebp-0Ch],eax"
"	      004adc3a    mov eax,[ebp-0Ch]"
"	      004adc3d    mov [ebp-14h],eax"
"	      004adc40    mov eax,[ebp-14h]"
"	      004adc43    push eax"
"	      004adc44    call 0056A740h"
"	      004adc49    add esp,4"
"	      004adc4c    jmp near ptr 004ADC51h"
"	      004adc51    mov eax,[ebp-2Ch]"
"	      004adc54    mov eax,[eax+0Ch]"
"	      004adc57    mov eax,[eax+4]"
"	      004adc5a    inc eax"
"	      004adc5b    push eax"
"	      004adc5c    call 0056A600h"
"	      004adc61    add esp,4"
"	      004adc64    mov ecx,[ebp-2Ch]"
"	      004adc67    mov [ecx+8],eax"
"	      004adc6a    jmp near ptr 004ADC6Fh"
"	      004adc6f    mov eax,[ebp-2Ch]"
"	      004adc72    mov eax,[eax+0Ch]"
"	      004adc75    cmp dword ptr [eax+4],0"
"	      004adc79    je near ptr 004ADCE8h"
"	      004adc7f    jmp near ptr 004ADC84h"
"	      004adc84    jmp near ptr 004ADC89h"
"	      004adc89    mov eax,[ebp-2Ch]"
"	      004adc8c    mov eax,[eax+0Ch]"
"	      004adc8f    cmp dword ptr [eax+4],0"
"	      004adc93    je near ptr 004ADCAEh"
"	      004adc99    mov eax,[ebp-2Ch]"
"	      004adc9c    mov eax,[eax+0Ch]"
"	      004adc9f    mov eax,[eax]"
"	      004adca1    mov [ebp-20h],eax"
"	      004adca4    jmp near ptr 004ADCBAh"
"	      004adca9    jmp near ptr 004ADCBAh"
"	      004adcae    mov dword ptr [ebp-20h],0"
"	      004adcb5    jmp near ptr 004ADCBAh"
"	      004adcba    mov eax,[ebp-2Ch]"
"	      004adcbd    mov eax,[eax+0Ch]"
"	      004adcc0    mov eax,[eax+4]"
"	      004adcc3    mov [ebp-24h],eax"
"	      004adcc6    mov eax,[ebp-2Ch]"
"	      004adcc9    mov eax,[eax+8]"
"	      004adccc    mov [ebp-28h],eax"
"	      004adccf    mov eax,[ebp-24h]"
"	      004adcd2    push eax"
"	      004adcd3    mov eax,[ebp-20h]"
"	      004adcd6    push eax"
"	      004adcd7    mov eax,[ebp-28h]"
"	      004adcda    push eax"
"	      004adcdb    call 0056A800h"
"	      004adce0    add esp,0Ch"
"	      004adce3    jmp near ptr 004ADCE8h"
"	      004adce8    jmp near ptr 004ADCEDh"
"	      004adced    mov byte ptr [ebp-10h],0"
"	      004adcf1    jmp near ptr 004ADCF6h"
"	      004adcf6    lea eax,[ebp-10h]"
"	      004adcf9    mov [ebp-18h],eax"
"	      004adcfc    jmp near ptr 004ADD01h"
"	      004add01    mov eax,[ebp-2Ch]"
"	      004add04    mov eax,[eax+0Ch]"
"	      004add07    mov eax,[eax+4]"
"	      004add0a    mov ecx,[ebp-2Ch]"
"	      004add0d    add eax,[ecx+8]"
"	      004add10    mov [ebp-1Ch],eax"
"	      004add13    mov eax,[ebp-18h]"
"	      004add16    mov al,[eax]"
"	      004add18    mov ecx,[ebp-1Ch]"
"	      004add1b    mov [ecx],al"
"	      004add1d    jmp near ptr 004ADD22h"
"	      004add22    jmp near ptr 004ADD27h"
"	      004add27    lea eax,[ebp-8]"
"	      004add2a    push eax"
"	      004add2b    lea eax,[ebp-4]"
"	      004add2e    push eax"
"	      004add2f    mov eax,[ebp-2Ch]"
"	      004add32    mov eax,[eax+8]"
"	      004add35    push eax"
"	      004add36    mov ecx,[ebp-2Ch]"
"	      004add39    add ecx,84h"
"	      004add3f    call 004A02B1h"
"	      004add44    test eax,eax"
"	      004add46    je near ptr 004ADD65h"
);
// LINE 228:
	asm( 
"	      004add4c    mov eax,[ebp-8]"
"	      004add4f    add eax,3"
"	      004add52    push eax"
"	      004add53    mov eax,[ebp-4]"
"	      004add56    add eax,7"
"	      004add59    push eax"
"	      004add5a    mov eax,[ebp-2Ch]"
"	      004add5d    mov eax,[eax]"
"	      004add5f    mov ecx,[ebp-2Ch]"
"	      004add62    call dword ptr [eax+38h]"
);
// LINE 230:
	asm( 
"	      004add65    jmp near ptr 004ADD6Ah"
"	      004add6a    pop edi"
"	      004add6b    pop esi"
"	      004add6c    pop ebx"
"	      004add6d    leave"
"	      004add6e    ret"
);
}

// FUNCTION: SIMCOPTER 0x004add6f
void TextWindow::SetTextColor(const struct SparkalColor&) {
// LINE 236:
	asm( 
"	      004add6f    push ebp"
"	      004add70    mov ebp,esp"
"	      004add72    sub esp,4"
"	      004add75    push ebx"
"	      004add76    push esi"
"	      004add77    push edi"
"	      004add78    mov [ebp-4],ecx"
);
// LINE 237:
	asm( 
"	      004add7b    mov eax,[ebp+8]"
"	      004add7e    mov eax,[eax]"
"	      004add80    mov ecx,[ebp-4]"
"	      004add83    mov [ecx+78h],eax"
);
// LINE 238:
	asm( 
"	      004add86    push 1"
"	      004add88    push 1"
"	      004add8a    mov eax,[ebp-4]"
"	      004add8d    mov eax,[eax]"
"	      004add8f    mov ecx,[ebp-4]"
"	      004add92    call dword ptr [eax+30h]"
);
// LINE 239:
	asm( 
"	      004add95    jmp near ptr 004ADD9Ah"
"	      004add9a    pop edi"
"	      004add9b    pop esi"
"	      004add9c    pop ebx"
"	      004add9d    leave"
"	      004add9e    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004adda1
int32_t TextWindow::ResizeWindowForExactLineHeights() {
// LINE 249:
	asm( 
"	      004adda1    push ebp"
"	      004adda2    mov ebp,esp"
"	      004adda4    sub esp,18h"
"	      004adda7    push ebx"
"	      004adda8    push esi"
"	      004adda9    push edi"
"	      004addaa    mov [ebp-18h],ecx"
);
// LINE 252:
	asm( 
"	      004addad    mov dword ptr [ebp-14h],0"
);
// LINE 253:
	asm( 
"	      004addb4    mov dword ptr [ebp-0Ch],1"
);
// LINE 254:
	asm( 
"	      004addbb    mov dword ptr [ebp-8],1"
);
// LINE 256:
	asm( 
"	      004addc2    lea eax,[ebp-0Ch]"
"	      004addc5    push eax"
"	      004addc6    lea eax,[ebp-8]"
"	      004addc9    push eax"
"	      004addca    push 0"
"	      004addcc    mov ecx,[ebp-18h]"
"	      004addcf    add ecx,84h"
"	      004addd5    call 004A02B1h"
);
// LINE 257:
	asm( 
"	      004addda    jmp near ptr 004ADDDFh"
"	      004adddf    mov eax,[ebp-18h]"
"	      004adde2    mov eax,[eax+1Ch]"
"	      004adde5    mov ecx,[ebp-18h]"
"	      004adde8    sub eax,[ecx+14h]"
"	      004addeb    mov [ebp-10h],eax"
);
// LINE 258:
	asm( 
"	      004addee    mov eax,[ebp-10h]"
"	      004addf1    cdq"
"	      004addf2    idiv dword ptr [ebp-0Ch]"
"	      004addf5    mov [ebp-14h],eax"
);
// LINE 259:
	asm( 
"	      004addf8    mov eax,[ebp-0Ch]"
"	      004addfb    imul eax,[ebp-14h]"
"	      004addff    mov [ebp-4],eax"
);
// LINE 260:
	asm( 
"	      004ade02    mov eax,[ebp-10h]"
"	      004ade05    cmp [ebp-4],eax"
"	      004ade08    je near ptr 004ADE1Fh"
);
// LINE 261:
	asm( 
"	      004ade0e    mov eax,[ebp-4]"
"	      004ade11    push eax"
"	      004ade12    push 0FFFFFFFFh"
"	      004ade14    mov eax,[ebp-18h]"
"	      004ade17    mov eax,[eax]"
"	      004ade19    mov ecx,[ebp-18h]"
"	      004ade1c    call dword ptr [eax+38h]"
);
// LINE 262:
	asm( 
"	      004ade1f    push 1"
"	      004ade21    push 1"
"	      004ade23    mov eax,[ebp-18h]"
"	      004ade26    mov eax,[eax]"
"	      004ade28    mov ecx,[ebp-18h]"
"	      004ade2b    call dword ptr [eax+30h]"
);
// LINE 263:
	asm( 
"	      004ade2e    mov eax,1"
"	      004ade33    jmp near ptr 004ADE38h"
);
// LINE 264:
	asm( 
"	      004ade38    pop edi"
"	      004ade39    pop esi"
"	      004ade3a    pop ebx"
"	      004ade3b    leave"
"	      004ade3c    ret"
);
}

// FUNCTION: SIMCOPTER 0x004ade3d
void ButtonWindow::ButtonWindow() {
// LINE 292:
	asm( 
"	      004ade3d    push ebp"
"	      004ade3e    mov ebp,esp"
"	      004ade40    sub esp,24h"
"	      004ade43    push ebx"
"	      004ade44    push esi"
"	      004ade45    push edi"
"	      004ade46    mov [ebp-24h],ecx"
"	      004ade49    mov ecx,[ebp-24h]"
"	      004ade4c    call 004A2A3Fh"
"	      004ade51    mov eax,[ebp-24h]"
"	      004ade54    mov dword ptr [eax+74h],1"
"	      004ade5b    mov eax,[ebp-24h]"
"	      004ade5e    mov dword ptr [eax+78h],1"
"	      004ade65    mov eax,[ebp-24h]"
"	      004ade68    mov dword ptr [eax+7Ch],0"
"	      004ade6f    jmp near ptr 004ADE74h"
"	      004ade74    mov eax,[ebp-24h]"
"	      004ade77    mov dword ptr [eax+80h],2"
"	      004ade81    mov eax,[ebp-24h]"
"	      004ade84    mov dword ptr [eax+84h],2"
"	      004ade8e    jmp near ptr 004ADE93h"
"	      004ade93    mov eax,[ebp-24h]"
"	      004ade96    mov dword ptr [eax+88h],0"
"	      004adea0    mov eax,[ebp-24h]"
"	      004adea3    mov byte ptr [eax+8Ch],0"
"	      004adeaa    mov eax,[ebp-24h]"
"	      004adead    mov byte ptr [eax+8Dh],0"
"	      004adeb4    mov eax,[ebp-24h]"
"	      004adeb7    mov byte ptr [eax+8Eh],0"
"	      004adebe    jmp near ptr 004ADEC3h"
"	      004adec3    mov eax,[ebp-24h]"
"	      004adec6    mov byte ptr [eax+90h],0"
"	      004adecd    mov eax,[ebp-24h]"
"	      004aded0    mov byte ptr [eax+91h],0"
"	      004aded7    mov eax,[ebp-24h]"
"	      004adeda    mov byte ptr [eax+92h],0"
"	      004adee1    jmp near ptr 004ADEE6h"
"	      004adee6    mov eax,[ebp-24h]"
"	      004adee9    mov dword ptr [eax],591B78h"
"	      004adeef    mov eax,ds:[59ABA0h]"
"	      004adef4    mov [ebp-20h],eax"
);
// LINE 293:
	asm( 
"	      004adef7    jmp near ptr 004ADEFCh"
"	      004adefc    mov eax,[ebp-20h]"
"	      004adeff    push eax"
"	      004adf00    call 0056ABE0h"
"	      004adf05    add esp,4"
"	      004adf08    mov [ebp-1Ch],eax"
"	      004adf0b    cmp dword ptr [ebp-1Ch],0FFFFFFFFh"
"	      004adf0f    jne near ptr 004ADF47h"
"	      004adf15    push 5971E4h"
"	      004adf1a    mov ecx,638C00h"
"	      004adf1f    call 00569960h"
"	      004adf24    mov [ebp-10h],eax"
"	      004adf27    mov eax,[ebp-10h]"
"	      004adf2a    push eax"
"	      004adf2b    call 004011B0h"
"	      004adf30    add esp,4"
"	      004adf33    jmp near ptr 004ADF38h"
"	      004adf38    push 1"
"	      004adf3a    call 00569430h"
"	      004adf3f    add esp,4"
"	      004adf42    jmp near ptr 004ADF47h"
"	      004adf47    jmp near ptr 004ADF4Ch"
"	      004adf4c    mov eax,[ebp-24h]"
"	      004adf4f    mov eax,[eax+60h]"
"	      004adf52    cmp dword ptr [eax+0Ch],1"
"	      004adf56    ja near ptr 004ADF7Dh"
"	      004adf5c    cmp dword ptr [ebp-1Ch],0"
"	      004adf60    je near ptr 004AE007h"
"	      004adf66    jmp near ptr 004ADF6Bh"
"	      004adf6b    mov eax,[ebp-24h]"
"	      004adf6e    mov eax,[eax+60h]"
"	      004adf71    mov ecx,[ebp-1Ch]"
"	      004adf74    cmp [eax+8],ecx"
"	      004adf77    jae near ptr 004AE007h"
"	      004adf7d    push 10h"
"	      004adf7f    call 0056A600h"
"	      004adf84    add esp,4"
"	      004adf87    mov [ebp-8],eax"
"	      004adf8a    cmp dword ptr [ebp-8],0"
"	      004adf8e    je near ptr 004ADFACh"
"	      004adf94    mov eax,[ebp-1Ch]"
"	      004adf97    push eax"
"	      004adf98    mov eax,[ebp-20h]"
"	      004adf9b    push eax"
"	      004adf9c    mov ecx,[ebp-8]"
"	      004adf9f    call 0041E090h"
"	      004adfa4    mov [ebp-4],eax"
"	      004adfa7    jmp near ptr 004ADFB3h"
"	      004adfac    mov dword ptr [ebp-4],0"
"	      004adfb3    mov eax,[ebp-24h]"
"	      004adfb6    mov eax,[eax+60h]"
"	      004adfb9    dec dword ptr [eax+0Ch]"
"	      004adfbc    mov eax,[ebp-24h]"
"	      004adfbf    mov eax,[eax+60h]"
"	      004adfc2    cmp dword ptr [eax+0Ch],0"
"	      004adfc6    jne near ptr 004ADFF4h"
"	      004adfcc    mov eax,[ebp-24h]"
"	      004adfcf    mov eax,[eax+60h]"
"	      004adfd2    mov [ebp-18h],eax"
"	      004adfd5    mov eax,[ebp-18h]"
"	      004adfd8    mov [ebp-14h],eax"
"	      004adfdb    cmp dword ptr [ebp-14h],0"
"	      004adfdf    je near ptr 004ADFF4h"
"	      004adfe5    push 1"
"	      004adfe7    mov ecx,[ebp-14h]"
"	      004adfea    call 0041DD70h"
"	      004adfef    jmp near ptr 004ADFF4h"
"	      004adff4    jmp near ptr 004ADFF9h"
"	      004adff9    mov eax,[ebp-4]"
"	      004adffc    mov ecx,[ebp-24h]"
"	      004adfff    mov [ecx+60h],eax"
"	      004ae002    jmp near ptr 004AE03Ah"
"	      004ae007    cmp dword ptr [ebp-1Ch],0"
"	      004ae00b    je near ptr 004AE03Ah"
"	      004ae011    jmp near ptr 004AE016h"
"	      004ae016    mov eax,[ebp-24h]"
"	      004ae019    mov eax,[eax+60h]"
"	      004ae01c    mov eax,[eax]"
"	      004ae01e    mov [ebp-0Ch],eax"
"	      004ae021    mov eax,[ebp-1Ch]"
"	      004ae024    push eax"
"	      004ae025    mov eax,[ebp-20h]"
"	      004ae028    push eax"
"	      004ae029    mov eax,[ebp-0Ch]"
"	      004ae02c    push eax"
"	      004ae02d    call 0056A800h"
"	      004ae032    add esp,0Ch"
"	      004ae035    jmp near ptr 004AE03Ah"
"	      004ae03a    mov eax,[ebp-1Ch]"
"	      004ae03d    mov ecx,[ebp-24h]"
"	      004ae040    mov ecx,[ecx+60h]"
"	      004ae043    mov [ecx+4],eax"
"	      004ae046    jmp near ptr 004AE04Bh"
"	      004ae04b    jmp near ptr 004AE050h"
);
// LINE 294:
	asm( 
"	      004ae050    jmp near ptr 004AE055h"
"	      004ae055    mov eax,[ebp-24h]"
"	      004ae058    pop edi"
"	      004ae059    pop esi"
"	      004ae05a    pop ebx"
"	      004ae05b    leave"
"	      004ae05c    ret"
);
}

// FUNCTION: SIMCOPTER 0x004ae05d
void ButtonWindow::ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t) {
// LINE 306:
	asm( 
"	      004ae05d    push ebp"
"	      004ae05e    mov ebp,esp"
"	      004ae060    sub esp,30h"
"	      004ae063    push ebx"
"	      004ae064    push esi"
"	      004ae065    push edi"
"	      004ae066    mov [ebp-30h],ecx"
"	      004ae069    mov eax,[ebp+1Ch]"
"	      004ae06c    push eax"
"	      004ae06d    mov eax,[ebp+18h]"
"	      004ae070    push eax"
"	      004ae071    mov eax,[ebp+10h]"
"	      004ae074    push eax"
"	      004ae075    mov eax,[ebp+0Ch]"
"	      004ae078    push eax"
"	      004ae079    mov eax,[ebp+8]"
"	      004ae07c    push eax"
"	      004ae07d    mov ecx,[ebp-30h]"
"	      004ae080    call 004A33EEh"
"	      004ae085    mov eax,[ebp-30h]"
"	      004ae088    mov dword ptr [eax+74h],1"
"	      004ae08f    mov eax,[ebp-30h]"
"	      004ae092    mov dword ptr [eax+78h],1"
"	      004ae099    mov eax,[ebp-30h]"
"	      004ae09c    mov dword ptr [eax+7Ch],0"
"	      004ae0a3    jmp near ptr 004AE0A8h"
"	      004ae0a8    mov eax,[ebp-30h]"
"	      004ae0ab    mov dword ptr [eax+80h],2"
"	      004ae0b5    mov eax,[ebp-30h]"
"	      004ae0b8    mov dword ptr [eax+84h],2"
"	      004ae0c2    jmp near ptr 004AE0C7h"
"	      004ae0c7    mov eax,[ebp-30h]"
"	      004ae0ca    mov dword ptr [eax+88h],0"
"	      004ae0d4    mov eax,[ebp-30h]"
"	      004ae0d7    mov byte ptr [eax+8Ch],0"
"	      004ae0de    mov eax,[ebp-30h]"
"	      004ae0e1    mov byte ptr [eax+8Dh],0"
"	      004ae0e8    mov eax,[ebp-30h]"
"	      004ae0eb    mov byte ptr [eax+8Eh],0"
"	      004ae0f2    jmp near ptr 004AE0F7h"
"	      004ae0f7    mov eax,[ebp-30h]"
"	      004ae0fa    mov byte ptr [eax+90h],0"
"	      004ae101    mov eax,[ebp-30h]"
"	      004ae104    mov byte ptr [eax+91h],0"
"	      004ae10b    mov eax,[ebp-30h]"
"	      004ae10e    mov byte ptr [eax+92h],0"
"	      004ae115    jmp near ptr 004AE11Ah"
"	      004ae11a    mov eax,[ebp-30h]"
"	      004ae11d    mov dword ptr [eax],591B78h"
);
// LINE 307:
	asm( 
"	      004ae123    cmp dword ptr [ebp+14h],0"
"	      004ae127    je near ptr 004AE250h"
);
// LINE 308:
	asm( 
"	      004ae12d    jmp near ptr 004AE132h"
"	      004ae132    mov eax,[ebp+14h]"
"	      004ae135    push eax"
"	      004ae136    call 0056ABE0h"
"	      004ae13b    add esp,4"
"	      004ae13e    mov [ebp-14h],eax"
"	      004ae141    cmp dword ptr [ebp-14h],0FFFFFFFFh"
"	      004ae145    jne near ptr 004AE17Dh"
"	      004ae14b    push 5971E4h"
"	      004ae150    mov ecx,638C00h"
"	      004ae155    call 00569960h"
"	      004ae15a    mov [ebp-10h],eax"
"	      004ae15d    mov eax,[ebp-10h]"
"	      004ae160    push eax"
"	      004ae161    call 004011B0h"
"	      004ae166    add esp,4"
"	      004ae169    jmp near ptr 004AE16Eh"
"	      004ae16e    push 1"
"	      004ae170    call 00569430h"
"	      004ae175    add esp,4"
"	      004ae178    jmp near ptr 004AE17Dh"
"	      004ae17d    jmp near ptr 004AE182h"
"	      004ae182    mov eax,[ebp-30h]"
"	      004ae185    mov eax,[eax+60h]"
"	      004ae188    cmp dword ptr [eax+0Ch],1"
"	      004ae18c    ja near ptr 004AE1B3h"
"	      004ae192    cmp dword ptr [ebp-14h],0"
"	      004ae196    je near ptr 004AE202h"
"	      004ae19c    jmp near ptr 004AE1A1h"
"	      004ae1a1    mov eax,[ebp-30h]"
"	      004ae1a4    mov eax,[eax+60h]"
"	      004ae1a7    mov ecx,[ebp-14h]"
"	      004ae1aa    cmp [eax+8],ecx"
"	      004ae1ad    jae near ptr 004AE202h"
"	      004ae1b3    push 10h"
"	      004ae1b5    call 0056A600h"
"	      004ae1ba    add esp,4"
"	      004ae1bd    mov [ebp-8],eax"
"	      004ae1c0    cmp dword ptr [ebp-8],0"
"	      004ae1c4    je near ptr 004AE1E2h"
"	      004ae1ca    mov eax,[ebp-14h]"
"	      004ae1cd    push eax"
"	      004ae1ce    mov eax,[ebp+14h]"
"	      004ae1d1    push eax"
"	      004ae1d2    mov ecx,[ebp-8]"
"	      004ae1d5    call 0041E090h"
"	      004ae1da    mov [ebp-4],eax"
"	      004ae1dd    jmp near ptr 004AE1E9h"
"	      004ae1e2    mov dword ptr [ebp-4],0"
"	      004ae1e9    mov ecx,[ebp-30h]"
"	      004ae1ec    add ecx,5Ch"
"	      004ae1ef    call 00412080h"
"	      004ae1f4    mov eax,[ebp-4]"
"	      004ae1f7    mov ecx,[ebp-30h]"
"	      004ae1fa    mov [ecx+60h],eax"
"	      004ae1fd    jmp near ptr 004AE235h"
"	      004ae202    cmp dword ptr [ebp-14h],0"
"	      004ae206    je near ptr 004AE235h"
"	      004ae20c    jmp near ptr 004AE211h"
"	      004ae211    mov eax,[ebp-30h]"
"	      004ae214    mov eax,[eax+60h]"
"	      004ae217    mov eax,[eax]"
"	      004ae219    mov [ebp-0Ch],eax"
"	      004ae21c    mov eax,[ebp-14h]"
"	      004ae21f    push eax"
"	      004ae220    mov eax,[ebp+14h]"
"	      004ae223    push eax"
"	      004ae224    mov eax,[ebp-0Ch]"
"	      004ae227    push eax"
"	      004ae228    call 0056A800h"
"	      004ae22d    add esp,0Ch"
"	      004ae230    jmp near ptr 004AE235h"
"	      004ae235    mov eax,[ebp-14h]"
"	      004ae238    mov ecx,[ebp-30h]"
"	      004ae23b    mov ecx,[ecx+60h]"
"	      004ae23e    mov [ecx+4],eax"
"	      004ae241    jmp near ptr 004AE246h"
"	      004ae246    jmp near ptr 004AE24Bh"
);
// LINE 309:
	asm( 
"	      004ae24b    jmp near ptr 004AE376h"
);
// LINE 310:
	asm( 
"	      004ae250    mov eax,ds:[59ABA0h]"
"	      004ae255    mov [ebp-2Ch],eax"
"	      004ae258    jmp near ptr 004AE25Dh"
"	      004ae25d    mov eax,[ebp-2Ch]"
"	      004ae260    push eax"
"	      004ae261    call 0056ABE0h"
"	      004ae266    add esp,4"
"	      004ae269    mov [ebp-28h],eax"
"	      004ae26c    cmp dword ptr [ebp-28h],0FFFFFFFFh"
"	      004ae270    jne near ptr 004AE2A8h"
"	      004ae276    push 5971E4h"
"	      004ae27b    mov ecx,638C00h"
"	      004ae280    call 00569960h"
"	      004ae285    mov [ebp-24h],eax"
"	      004ae288    mov eax,[ebp-24h]"
"	      004ae28b    push eax"
"	      004ae28c    call 004011B0h"
"	      004ae291    add esp,4"
"	      004ae294    jmp near ptr 004AE299h"
"	      004ae299    push 1"
"	      004ae29b    call 00569430h"
"	      004ae2a0    add esp,4"
"	      004ae2a3    jmp near ptr 004AE2A8h"
"	      004ae2a8    jmp near ptr 004AE2ADh"
"	      004ae2ad    mov eax,[ebp-30h]"
"	      004ae2b0    mov eax,[eax+60h]"
"	      004ae2b3    cmp dword ptr [eax+0Ch],1"
"	      004ae2b7    ja near ptr 004AE2DEh"
"	      004ae2bd    cmp dword ptr [ebp-28h],0"
"	      004ae2c1    je near ptr 004AE32Dh"
"	      004ae2c7    jmp near ptr 004AE2CCh"
"	      004ae2cc    mov eax,[ebp-30h]"
"	      004ae2cf    mov eax,[eax+60h]"
"	      004ae2d2    mov ecx,[ebp-28h]"
"	      004ae2d5    cmp [eax+8],ecx"
"	      004ae2d8    jae near ptr 004AE32Dh"
"	      004ae2de    push 10h"
"	      004ae2e0    call 0056A600h"
"	      004ae2e5    add esp,4"
"	      004ae2e8    mov [ebp-1Ch],eax"
"	      004ae2eb    cmp dword ptr [ebp-1Ch],0"
"	      004ae2ef    je near ptr 004AE30Dh"
"	      004ae2f5    mov eax,[ebp-28h]"
"	      004ae2f8    push eax"
"	      004ae2f9    mov eax,[ebp-2Ch]"
"	      004ae2fc    push eax"
"	      004ae2fd    mov ecx,[ebp-1Ch]"
"	      004ae300    call 0041E090h"
"	      004ae305    mov [ebp-18h],eax"
"	      004ae308    jmp near ptr 004AE314h"
"	      004ae30d    mov dword ptr [ebp-18h],0"
"	      004ae314    mov ecx,[ebp-30h]"
"	      004ae317    add ecx,5Ch"
"	      004ae31a    call 00412080h"
"	      004ae31f    mov eax,[ebp-18h]"
"	      004ae322    mov ecx,[ebp-30h]"
"	      004ae325    mov [ecx+60h],eax"
"	      004ae328    jmp near ptr 004AE360h"
"	      004ae32d    cmp dword ptr [ebp-28h],0"
"	      004ae331    je near ptr 004AE360h"
"	      004ae337    jmp near ptr 004AE33Ch"
"	      004ae33c    mov eax,[ebp-30h]"
"	      004ae33f    mov eax,[eax+60h]"
"	      004ae342    mov eax,[eax]"
"	      004ae344    mov [ebp-20h],eax"
"	      004ae347    mov eax,[ebp-28h]"
"	      004ae34a    push eax"
"	      004ae34b    mov eax,[ebp-2Ch]"
"	      004ae34e    push eax"
"	      004ae34f    mov eax,[ebp-20h]"
"	      004ae352    push eax"
"	      004ae353    call 0056A800h"
"	      004ae358    add esp,0Ch"
"	      004ae35b    jmp near ptr 004AE360h"
"	      004ae360    mov eax,[ebp-28h]"
"	      004ae363    mov ecx,[ebp-30h]"
"	      004ae366    mov ecx,[ecx+60h]"
"	      004ae369    mov [ecx+4],eax"
"	      004ae36c    jmp near ptr 004AE371h"
"	      004ae371    jmp near ptr 004AE376h"
);
// LINE 311:
	asm( 
"	      004ae376    jmp near ptr 004AE37Bh"
"	      004ae37b    mov eax,[ebp-30h]"
"	      004ae37e    pop edi"
"	      004ae37f    pop esi"
"	      004ae380    pop ebx"
"	      004ae381    leave"
"	      004ae382    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x004ae385
int32_t ButtonWindow::Initialize() {
// LINE 318:
	asm( 
"	      004ae385    push ebp"
"	      004ae386    mov ebp,esp"
"	      004ae388    sub esp,4"
"	      004ae38b    push ebx"
"	      004ae38c    push esi"
"	      004ae38d    push edi"
"	      004ae38e    mov [ebp-4],ecx"
);
// LINE 319:
	asm( 
"	      004ae391    mov eax,ds:[606988h]"
"	      004ae396    mov ecx,[ebp-4]"
"	      004ae399    mov [ecx+58h],eax"
);
// LINE 320:
	asm( 
"	      004ae39c    push 1"
"	      004ae39e    mov eax,[ebp-4]"
"	      004ae3a1    mov eax,[eax]"
"	      004ae3a3    mov ecx,[ebp-4]"
"	      004ae3a6    call dword ptr [eax+10h]"
"	      004ae3a9    jmp near ptr 004AE3AEh"
);
// LINE 321:
	asm( 
"	      004ae3ae    pop edi"
"	      004ae3af    pop esi"
"	      004ae3b0    pop ebx"
"	      004ae3b1    leave"
"	      004ae3b2    ret"
);
}

// FUNCTION: SIMCOPTER 0x004ae3b3
void ButtonWindow::SetTextColor(const struct SparkalColor*, const struct SparkalColor*) {
// LINE 328:
	asm( 
"	      004ae3b3    push ebp"
"	      004ae3b4    mov ebp,esp"
"	      004ae3b6    sub esp,4"
"	      004ae3b9    push ebx"
"	      004ae3ba    push esi"
"	      004ae3bb    push edi"
"	      004ae3bc    mov [ebp-4],ecx"
);
// LINE 329:
	asm( 
"	      004ae3bf    cmp dword ptr [ebp+8],0"
"	      004ae3c3    je near ptr 004AE3D7h"
);
// LINE 330:
	asm( 
"	      004ae3c9    mov eax,[ebp+8]"
"	      004ae3cc    mov eax,[eax]"
"	      004ae3ce    mov ecx,[ebp-4]"
"	      004ae3d1    mov [ecx+8Ch],eax"
);
// LINE 331:
	asm( 
"	      004ae3d7    cmp dword ptr [ebp+0Ch],0"
"	      004ae3db    je near ptr 004AE3EFh"
);
// LINE 332:
	asm( 
"	      004ae3e1    mov eax,[ebp+0Ch]"
"	      004ae3e4    mov eax,[eax]"
"	      004ae3e6    mov ecx,[ebp-4]"
"	      004ae3e9    mov [ecx+90h],eax"
);
// LINE 333:
	asm( 
"	      004ae3ef    jmp near ptr 004AE3F4h"
"	      004ae3f4    pop edi"
"	      004ae3f5    pop esi"
"	      004ae3f6    pop ebx"
"	      004ae3f7    leave"
"	      004ae3f8    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004ae3fb
int32_t ButtonWindow::GetImageCount() {
// LINE 339:
	asm( 
"	      004ae3fb    push ebp"
"	      004ae3fc    mov ebp,esp"
"	      004ae3fe    sub esp,4"
"	      004ae401    push ebx"
"	      004ae402    push esi"
"	      004ae403    push edi"
"	      004ae404    mov [ebp-4],ecx"
);
// LINE 340:
	asm( 
"	      004ae407    mov eax,3"
"	      004ae40c    jmp near ptr 004AE411h"
);
// LINE 341:
	asm( 
"	      004ae411    pop edi"
"	      004ae412    pop esi"
"	      004ae413    pop ebx"
"	      004ae414    leave"
"	      004ae415    ret"
);
}

// FUNCTION: SIMCOPTER 0x004ae416
int32_t ButtonWindow::CreateImage(int32_t) {
// LINE 348:
	asm( 
"	      004ae416    push ebp"
"	      004ae417    mov ebp,esp"
"	      004ae419    sub esp,0D8h"
"	      004ae41f    push ebx"
"	      004ae420    push esi"
"	      004ae421    push edi"
"	      004ae422    mov [ebp-0D8h],ecx"
);
// LINE 354:
	asm( 
"	      004ae428    jmp near ptr 004AE42Dh"
"	      004ae42d    jmp near ptr 004AE432h"
);
// LINE 356:
	asm( 
"	      004ae432    push 1"
"	      004ae434    mov ecx,[ebp-0D8h]"
"	      004ae43a    call 004A4AA0h"
"	      004ae43f    mov [ebp-60h],eax"
);
// LINE 357:
	asm( 
"	      004ae442    cmp dword ptr [ebp-60h],0"
"	      004ae446    je near ptr 004AEABFh"
);
// LINE 359:
	asm( 
"	      004ae44c    jmp near ptr 004AE451h"
"	      004ae451    mov eax,[ebp-0D8h]"
"	      004ae457    mov ebx,[eax+40h]"
"	      004ae45a    mov eax,[ebp-0D8h]"
"	      004ae460    mov eax,[eax]"
"	      004ae462    mov ecx,[ebp-0D8h]"
"	      004ae468    call dword ptr [eax+0C4h]"
"	      004ae46e    mov ecx,eax"
"	      004ae470    mov eax,[ebx+8]"
"	      004ae473    cdq"
"	      004ae474    idiv ecx"
"	      004ae476    mov ecx,[ebp-0D8h]"
"	      004ae47c    mov ecx,[ecx+10h]"
"	      004ae47f    add ecx,eax"
"	      004ae481    mov eax,[ebp-0D8h]"
"	      004ae487    mov [eax+18h],ecx"
);
// LINE 360:
	asm( 
"	      004ae48a    mov eax,[ebp-0D8h]"
"	      004ae490    mov eax,[eax+18h]"
"	      004ae493    mov ecx,[ebp-0D8h]"
"	      004ae499    sub eax,[ecx+10h]"
"	      004ae49c    mov [ebp-18h],eax"
"	      004ae49f    jmp near ptr 004AE4A4h"
);
// LINE 361:
	asm( 
"	      004ae4a4    mov eax,[ebp-0D8h]"
"	      004ae4aa    mov eax,[eax+1Ch]"
"	      004ae4ad    mov ecx,[ebp-0D8h]"
"	      004ae4b3    sub eax,[ecx+14h]"
"	      004ae4b6    mov [ebp-14h],eax"
"	      004ae4b9    jmp near ptr 004AE4BEh"
);
// LINE 362:
	asm( 
"	      004ae4be    mov eax,[ebp-14h]"
"	      004ae4c1    sub eax,0Ch"
"	      004ae4c4    mov ecx,[ebp-0D8h]"
"	      004ae4ca    mov [ecx+7Ch],eax"
);
// LINE 364:
	asm( 
"	      004ae4cd    jmp near ptr 004AE4D2h"
"	      004ae4d2    mov eax,[ebp-0D8h]"
"	      004ae4d8    mov eax,[eax+0Ch]"
"	      004ae4db    cmp dword ptr [eax+4],0"
"	      004ae4df    je near ptr 004AEABFh"
);
// LINE 365:
	asm( 
"	      004ae4e5    lea eax,[ebp-58h]"
"	      004ae4e8    push eax"
"	      004ae4e9    push 0"
"	      004ae4eb    push 0"
"	      004ae4ed    call 0042CE0Eh"
"	      004ae4f2    add esp,0Ch"
);
// LINE 366:
	asm( 
"	      004ae4f5    push 1Ch"
"	      004ae4f7    call 0056A600h"
"	      004ae4fc    add esp,4"
"	      004ae4ff    mov [ebp-64h],eax"
"	      004ae502    cmp dword ptr [ebp-64h],0"
"	      004ae506    je near ptr 004AE530h"
"	      004ae50c    push 1"
"	      004ae50e    push 0"
"	      004ae510    push 0"
"	      004ae512    mov eax,[ebp-0D8h]"
"	      004ae518    mov eax,[eax+7Ch]"
"	      004ae51b    push eax"
"	      004ae51c    lea eax,[ebp-58h]"
"	      004ae51f    push eax"
"	      004ae520    mov ecx,[ebp-64h]"
"	      004ae523    call 0049F937h"
"	      004ae528    mov [ebp-5Ch],eax"
"	      004ae52b    jmp near ptr 004AE537h"
"	      004ae530    mov dword ptr [ebp-5Ch],0"
);
// LINE 367:
	asm( 
"	      004ae537    mov dword ptr [ebp-0Ch],5"
);
// LINE 368:
	asm( 
"	      004ae53e    mov eax,[ebp-14h]"
"	      004ae541    mov [ebp-4],eax"
);
// LINE 369:
	asm( 
"	      004ae544    mov dword ptr [ebp-10h],0"
);
// LINE 370:
	asm( 
"	      004ae54b    mov eax,[ebp-18h]"
"	      004ae54e    mov [ebp-8],eax"
"	      004ae551    mov eax,[ebp-0D8h]"
"	      004ae557    mov eax,[eax+40h]"
"	      004ae55a    mov [ebp-70h],eax"
);
// LINE 373:
	asm( 
"	      004ae55d    mov eax,[ebp-0D8h]"
"	      004ae563    mov eax,[eax+8Ch]"
"	      004ae569    mov ecx,[ebp-70h]"
"	      004ae56c    mov [ecx+38h],eax"
"	      004ae56f    jmp near ptr 004AE574h"
);
// LINE 376:
	asm( 
"	      004ae574    mov eax,[ebp-0D8h]"
"	      004ae57a    cmp dword ptr [eax+8],0"
"	      004ae57e    je near ptr 004AE5A2h"
"	      004ae584    mov eax,[ebp-0D8h]"
"	      004ae58a    mov eax,[eax+8]"
"	      004ae58d    mov [ebp-78h],eax"
"	      004ae590    mov eax,[ebp-78h]"
"	      004ae593    mov [ebp-80h],eax"
"	      004ae596    mov eax,[ebp-80h]"
"	      004ae599    push eax"
"	      004ae59a    call 0056A740h"
"	      004ae59f    add esp,4"
"	      004ae5a2    jmp near ptr 004AE5A7h"
"	      004ae5a7    mov eax,[ebp-0D8h]"
"	      004ae5ad    mov eax,[eax+0Ch]"
"	      004ae5b0    mov eax,[eax+4]"
"	      004ae5b3    inc eax"
"	      004ae5b4    push eax"
"	      004ae5b5    call 0056A600h"
"	      004ae5ba    add esp,4"
"	      004ae5bd    mov ecx,[ebp-0D8h]"
"	      004ae5c3    mov [ecx+8],eax"
"	      004ae5c6    jmp near ptr 004AE5CBh"
"	      004ae5cb    mov eax,[ebp-0D8h]"
"	      004ae5d1    mov eax,[eax+0Ch]"
"	      004ae5d4    cmp dword ptr [eax+4],0"
"	      004ae5d8    je near ptr 004AE668h"
"	      004ae5de    jmp near ptr 004AE5E3h"
"	      004ae5e3    jmp near ptr 004AE5E8h"
"	      004ae5e8    mov eax,[ebp-0D8h]"
"	      004ae5ee    mov eax,[eax+0Ch]"
"	      004ae5f1    cmp dword ptr [eax+4],0"
"	      004ae5f5    je near ptr 004AE616h"
"	      004ae5fb    mov eax,[ebp-0D8h]"
"	      004ae601    mov eax,[eax+0Ch]"
"	      004ae604    mov eax,[eax]"
"	      004ae606    mov [ebp-8Ch],eax"
"	      004ae60c    jmp near ptr 004AE625h"
"	      004ae611    jmp near ptr 004AE625h"
"	      004ae616    mov dword ptr [ebp-8Ch],0"
"	      004ae620    jmp near ptr 004AE625h"
"	      004ae625    mov eax,[ebp-0D8h]"
"	      004ae62b    mov eax,[eax+0Ch]"
"	      004ae62e    mov eax,[eax+4]"
"	      004ae631    mov [ebp-90h],eax"
"	      004ae637    mov eax,[ebp-0D8h]"
"	      004ae63d    mov eax,[eax+8]"
"	      004ae640    mov [ebp-94h],eax"
"	      004ae646    mov eax,[ebp-90h]"
"	      004ae64c    push eax"
"	      004ae64d    mov eax,[ebp-8Ch]"
"	      004ae653    push eax"
"	      004ae654    mov eax,[ebp-94h]"
"	      004ae65a    push eax"
"	      004ae65b    call 0056A800h"
"	      004ae660    add esp,0Ch"
"	      004ae663    jmp near ptr 004AE668h"
"	      004ae668    jmp near ptr 004AE66Dh"
"	      004ae66d    mov byte ptr [ebp-7Ch],0"
"	      004ae671    jmp near ptr 004AE676h"
"	      004ae676    lea eax,[ebp-7Ch]"
"	      004ae679    mov [ebp-84h],eax"
"	      004ae67f    jmp near ptr 004AE684h"
"	      004ae684    mov eax,[ebp-0D8h]"
"	      004ae68a    mov eax,[eax+0Ch]"
"	      004ae68d    mov eax,[eax+4]"
"	      004ae690    mov ecx,[ebp-0D8h]"
"	      004ae696    add eax,[ecx+8]"
"	      004ae699    mov [ebp-88h],eax"
"	      004ae69f    mov eax,[ebp-84h]"
"	      004ae6a5    mov al,[eax]"
"	      004ae6a7    mov ecx,[ebp-88h]"
"	      004ae6ad    mov [ecx],al"
"	      004ae6af    jmp near ptr 004AE6B4h"
"	      004ae6b4    jmp near ptr 004AE6B9h"
"	      004ae6b9    mov eax,[ebp-5Ch]"
"	      004ae6bc    push eax"
"	      004ae6bd    lea eax,[ebp-4]"
"	      004ae6c0    push eax"
"	      004ae6c1    lea eax,[ebp-8]"
"	      004ae6c4    push eax"
"	      004ae6c5    lea eax,[ebp-0Ch]"
"	      004ae6c8    push eax"
"	      004ae6c9    lea eax,[ebp-10h]"
"	      004ae6cc    push eax"
"	      004ae6cd    push 1"
"	      004ae6cf    mov eax,[ebp-0D8h]"
"	      004ae6d5    mov eax,[eax+8]"
"	      004ae6d8    push eax"
"	      004ae6d9    mov eax,[ebp-0D8h]"
"	      004ae6df    mov ecx,[ebp-0D8h]"
"	      004ae6e5    mov ecx,[ecx+40h]"
"	      004ae6e8    mov edx,[ecx]"
"	      004ae6ea    mov ecx,[eax+40h]"
"	      004ae6ed    call dword ptr [edx+4Ch]"
);
// LINE 379:
	asm( 
"	      004ae6f0    mov eax,[ebp-18h]"
"	      004ae6f3    mov [ebp-10h],eax"
);
// LINE 380:
	asm( 
"	      004ae6f6    mov eax,[ebp-10h]"
"	      004ae6f9    add eax,[ebp-18h]"
"	      004ae6fc    mov [ebp-8],eax"
);
// LINE 383:
	asm( 
"	      004ae6ff    mov eax,[ebp-0D8h]"
"	      004ae705    cmp dword ptr [eax+8],0"
"	      004ae709    je near ptr 004AE739h"
"	      004ae70f    mov eax,[ebp-0D8h]"
"	      004ae715    mov eax,[eax+8]"
"	      004ae718    mov [ebp-98h],eax"
"	      004ae71e    mov eax,[ebp-98h]"
"	      004ae724    mov [ebp-0A0h],eax"
"	      004ae72a    mov eax,[ebp-0A0h]"
"	      004ae730    push eax"
"	      004ae731    call 0056A740h"
"	      004ae736    add esp,4"
"	      004ae739    jmp near ptr 004AE73Eh"
"	      004ae73e    mov eax,[ebp-0D8h]"
"	      004ae744    mov eax,[eax+0Ch]"
"	      004ae747    mov eax,[eax+4]"
"	      004ae74a    inc eax"
"	      004ae74b    push eax"
"	      004ae74c    call 0056A600h"
"	      004ae751    add esp,4"
"	      004ae754    mov ecx,[ebp-0D8h]"
"	      004ae75a    mov [ecx+8],eax"
"	      004ae75d    jmp near ptr 004AE762h"
"	      004ae762    mov eax,[ebp-0D8h]"
"	      004ae768    mov eax,[eax+0Ch]"
"	      004ae76b    cmp dword ptr [eax+4],0"
"	      004ae76f    je near ptr 004AE7FFh"
"	      004ae775    jmp near ptr 004AE77Ah"
"	      004ae77a    jmp near ptr 004AE77Fh"
"	      004ae77f    mov eax,[ebp-0D8h]"
"	      004ae785    mov eax,[eax+0Ch]"
"	      004ae788    cmp dword ptr [eax+4],0"
"	      004ae78c    je near ptr 004AE7ADh"
"	      004ae792    mov eax,[ebp-0D8h]"
"	      004ae798    mov eax,[eax+0Ch]"
"	      004ae79b    mov eax,[eax]"
"	      004ae79d    mov [ebp-0ACh],eax"
"	      004ae7a3    jmp near ptr 004AE7BCh"
"	      004ae7a8    jmp near ptr 004AE7BCh"
"	      004ae7ad    mov dword ptr [ebp-0ACh],0"
"	      004ae7b7    jmp near ptr 004AE7BCh"
"	      004ae7bc    mov eax,[ebp-0D8h]"
"	      004ae7c2    mov eax,[eax+0Ch]"
"	      004ae7c5    mov eax,[eax+4]"
"	      004ae7c8    mov [ebp-0B0h],eax"
"	      004ae7ce    mov eax,[ebp-0D8h]"
"	      004ae7d4    mov eax,[eax+8]"
"	      004ae7d7    mov [ebp-0B4h],eax"
"	      004ae7dd    mov eax,[ebp-0B0h]"
"	      004ae7e3    push eax"
"	      004ae7e4    mov eax,[ebp-0ACh]"
"	      004ae7ea    push eax"
"	      004ae7eb    mov eax,[ebp-0B4h]"
"	      004ae7f1    push eax"
"	      004ae7f2    call 0056A800h"
"	      004ae7f7    add esp,0Ch"
"	      004ae7fa    jmp near ptr 004AE7FFh"
"	      004ae7ff    jmp near ptr 004AE804h"
"	      004ae804    mov byte ptr [ebp-9Ch],0"
"	      004ae80b    jmp near ptr 004AE810h"
"	      004ae810    lea eax,[ebp-9Ch]"
"	      004ae816    mov [ebp-0A4h],eax"
"	      004ae81c    jmp near ptr 004AE821h"
"	      004ae821    mov eax,[ebp-0D8h]"
"	      004ae827    mov eax,[eax+0Ch]"
"	      004ae82a    mov eax,[eax+4]"
"	      004ae82d    mov ecx,[ebp-0D8h]"
"	      004ae833    add eax,[ecx+8]"
"	      004ae836    mov [ebp-0A8h],eax"
"	      004ae83c    mov eax,[ebp-0A4h]"
"	      004ae842    mov al,[eax]"
"	      004ae844    mov ecx,[ebp-0A8h]"
"	      004ae84a    mov [ecx],al"
"	      004ae84c    jmp near ptr 004AE851h"
"	      004ae851    jmp near ptr 004AE856h"
"	      004ae856    mov eax,[ebp-5Ch]"
"	      004ae859    push eax"
"	      004ae85a    lea eax,[ebp-4]"
"	      004ae85d    push eax"
"	      004ae85e    lea eax,[ebp-8]"
"	      004ae861    push eax"
"	      004ae862    lea eax,[ebp-0Ch]"
"	      004ae865    push eax"
"	      004ae866    lea eax,[ebp-10h]"
"	      004ae869    push eax"
"	      004ae86a    push 1"
"	      004ae86c    mov eax,[ebp-0D8h]"
"	      004ae872    mov eax,[eax+8]"
"	      004ae875    push eax"
"	      004ae876    mov eax,[ebp-0D8h]"
"	      004ae87c    mov ecx,[ebp-0D8h]"
"	      004ae882    mov ecx,[ecx+40h]"
"	      004ae885    mov edx,[ecx]"
"	      004ae887    mov ecx,[eax+40h]"
"	      004ae88a    call dword ptr [edx+4Ch]"
);
// LINE 386:
	asm( 
"	      004ae88d    mov eax,[ebp-18h]"
"	      004ae890    add eax,eax"
"	      004ae892    mov [ebp-10h],eax"
);
// LINE 387:
	asm( 
"	      004ae895    mov eax,[ebp-10h]"
"	      004ae898    add eax,[ebp-18h]"
"	      004ae89b    mov [ebp-8],eax"
);
// LINE 388:
	asm( 
"	      004ae89e    mov eax,[ebp-0D8h]"
"	      004ae8a4    mov eax,[eax+80h]"
"	      004ae8aa    add [ebp-10h],eax"
);
// LINE 389:
	asm( 
"	      004ae8ad    mov eax,[ebp-0D8h]"
"	      004ae8b3    mov eax,[eax+80h]"
"	      004ae8b9    add [ebp-8],eax"
);
// LINE 390:
	asm( 
"	      004ae8bc    mov eax,[ebp-0D8h]"
"	      004ae8c2    mov eax,[eax+84h]"
"	      004ae8c8    add [ebp-0Ch],eax"
);
// LINE 391:
	asm( 
"	      004ae8cb    mov eax,[ebp-0D8h]"
"	      004ae8d1    mov eax,[eax+84h]"
"	      004ae8d7    add [ebp-4],eax"
"	      004ae8da    mov eax,[ebp-0D8h]"
"	      004ae8e0    mov eax,[eax+40h]"
"	      004ae8e3    mov [ebp-74h],eax"
);
// LINE 392:
	asm( 
"	      004ae8e6    mov eax,[ebp-0D8h]"
"	      004ae8ec    mov eax,[eax+90h]"
"	      004ae8f2    mov ecx,[ebp-74h]"
"	      004ae8f5    mov [ecx+38h],eax"
"	      004ae8f8    jmp near ptr 004AE8FDh"
);
// LINE 395:
	asm( 
"	      004ae8fd    mov eax,[ebp-0D8h]"
"	      004ae903    cmp dword ptr [eax+8],0"
"	      004ae907    je near ptr 004AE937h"
"	      004ae90d    mov eax,[ebp-0D8h]"
"	      004ae913    mov eax,[eax+8]"
"	      004ae916    mov [ebp-0B8h],eax"
"	      004ae91c    mov eax,[ebp-0B8h]"
"	      004ae922    mov [ebp-0C0h],eax"
"	      004ae928    mov eax,[ebp-0C0h]"
"	      004ae92e    push eax"
"	      004ae92f    call 0056A740h"
"	      004ae934    add esp,4"
"	      004ae937    jmp near ptr 004AE93Ch"
"	      004ae93c    mov eax,[ebp-0D8h]"
"	      004ae942    mov eax,[eax+0Ch]"
"	      004ae945    mov eax,[eax+4]"
"	      004ae948    inc eax"
"	      004ae949    push eax"
"	      004ae94a    call 0056A600h"
"	      004ae94f    add esp,4"
"	      004ae952    mov ecx,[ebp-0D8h]"
"	      004ae958    mov [ecx+8],eax"
"	      004ae95b    jmp near ptr 004AE960h"
"	      004ae960    mov eax,[ebp-0D8h]"
"	      004ae966    mov eax,[eax+0Ch]"
"	      004ae969    cmp dword ptr [eax+4],0"
"	      004ae96d    je near ptr 004AE9FDh"
"	      004ae973    jmp near ptr 004AE978h"
"	      004ae978    jmp near ptr 004AE97Dh"
"	      004ae97d    mov eax,[ebp-0D8h]"
"	      004ae983    mov eax,[eax+0Ch]"
"	      004ae986    cmp dword ptr [eax+4],0"
"	      004ae98a    je near ptr 004AE9ABh"
"	      004ae990    mov eax,[ebp-0D8h]"
"	      004ae996    mov eax,[eax+0Ch]"
"	      004ae999    mov eax,[eax]"
"	      004ae99b    mov [ebp-0CCh],eax"
"	      004ae9a1    jmp near ptr 004AE9BAh"
"	      004ae9a6    jmp near ptr 004AE9BAh"
"	      004ae9ab    mov dword ptr [ebp-0CCh],0"
"	      004ae9b5    jmp near ptr 004AE9BAh"
"	      004ae9ba    mov eax,[ebp-0D8h]"
"	      004ae9c0    mov eax,[eax+0Ch]"
"	      004ae9c3    mov eax,[eax+4]"
"	      004ae9c6    mov [ebp-0D0h],eax"
"	      004ae9cc    mov eax,[ebp-0D8h]"
"	      004ae9d2    mov eax,[eax+8]"
"	      004ae9d5    mov [ebp-0D4h],eax"
"	      004ae9db    mov eax,[ebp-0D0h]"
"	      004ae9e1    push eax"
"	      004ae9e2    mov eax,[ebp-0CCh]"
"	      004ae9e8    push eax"
"	      004ae9e9    mov eax,[ebp-0D4h]"
"	      004ae9ef    push eax"
"	      004ae9f0    call 0056A800h"
"	      004ae9f5    add esp,0Ch"
"	      004ae9f8    jmp near ptr 004AE9FDh"
"	      004ae9fd    jmp near ptr 004AEA02h"
"	      004aea02    mov byte ptr [ebp-0BCh],0"
"	      004aea09    jmp near ptr 004AEA0Eh"
"	      004aea0e    lea eax,[ebp-0BCh]"
"	      004aea14    mov [ebp-0C4h],eax"
"	      004aea1a    jmp near ptr 004AEA1Fh"
"	      004aea1f    mov eax,[ebp-0D8h]"
"	      004aea25    mov eax,[eax+0Ch]"
"	      004aea28    mov eax,[eax+4]"
"	      004aea2b    mov ecx,[ebp-0D8h]"
"	      004aea31    add eax,[ecx+8]"
"	      004aea34    mov [ebp-0C8h],eax"
"	      004aea3a    mov eax,[ebp-0C4h]"
"	      004aea40    mov al,[eax]"
"	      004aea42    mov ecx,[ebp-0C8h]"
"	      004aea48    mov [ecx],al"
"	      004aea4a    jmp near ptr 004AEA4Fh"
"	      004aea4f    jmp near ptr 004AEA54h"
"	      004aea54    mov eax,[ebp-5Ch]"
"	      004aea57    push eax"
"	      004aea58    lea eax,[ebp-4]"
"	      004aea5b    push eax"
"	      004aea5c    lea eax,[ebp-8]"
"	      004aea5f    push eax"
"	      004aea60    lea eax,[ebp-0Ch]"
"	      004aea63    push eax"
"	      004aea64    lea eax,[ebp-10h]"
"	      004aea67    push eax"
"	      004aea68    push 1"
"	      004aea6a    mov eax,[ebp-0D8h]"
"	      004aea70    mov eax,[eax+8]"
"	      004aea73    push eax"
"	      004aea74    mov eax,[ebp-0D8h]"
"	      004aea7a    mov ecx,[ebp-0D8h]"
"	      004aea80    mov ecx,[ecx+40h]"
"	      004aea83    mov edx,[ecx]"
"	      004aea85    mov ecx,[eax+40h]"
"	      004aea88    call dword ptr [edx+4Ch]"
);
// LINE 397:
	asm( 
"	      004aea8b    mov eax,[ebp-5Ch]"
"	      004aea8e    mov [ebp-6Ch],eax"
"	      004aea91    mov eax,[ebp-6Ch]"
"	      004aea94    mov [ebp-68h],eax"
"	      004aea97    cmp dword ptr [ebp-68h],0"
"	      004aea9b    je near ptr 004AEABFh"
"	      004aeaa1    mov ecx,[ebp-68h]"
"	      004aeaa4    call 0049FC4Eh"
"	      004aeaa9    mov eax,[ebp-68h]"
"	      004aeaac    push eax"
"	      004aeaad    call 0056A740h"
"	      004aeab2    add esp,4"
"	      004aeab5    jmp near ptr 004AEABAh"
"	      004aeaba    jmp near ptr 004AEABFh"
);
// LINE 400:
	asm( 
"	      004aeabf    mov eax,[ebp-60h]"
"	      004aeac2    jmp near ptr 004AEAC7h"
);
// LINE 401:
	asm( 
"	      004aeac7    pop edi"
"	      004aeac8    pop esi"
"	      004aeac9    pop ebx"
"	      004aeaca    leave"
"	      004aeacb    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004aeace
void ButtonWindow::SetState(int32_t) {
// LINE 408:
	asm( 
"	      004aeace    push ebp"
"	      004aeacf    mov ebp,esp"
"	      004aead1    sub esp,4"
"	      004aead4    push ebx"
"	      004aead5    push esi"
"	      004aead6    push edi"
"	      004aead7    mov [ebp-4],ecx"
);
// LINE 409:
	asm( 
"	      004aeada    mov eax,[ebp-4]"
"	      004aeadd    mov ecx,[ebp+8]"
"	      004aeae0    cmp [eax+74h],ecx"
"	      004aeae3    je near ptr 004AEB01h"
);
// LINE 410:
	asm( 
"	      004aeae9    mov eax,[ebp+8]"
"	      004aeaec    mov ecx,[ebp-4]"
"	      004aeaef    mov [ecx+74h],eax"
);
// LINE 411:
	asm( 
"	      004aeaf2    push 1"
"	      004aeaf4    push 1"
"	      004aeaf6    mov eax,[ebp-4]"
"	      004aeaf9    mov eax,[eax]"
"	      004aeafb    mov ecx,[ebp-4]"
"	      004aeafe    call dword ptr [eax+30h]"
);
// LINE 413:
	asm( 
"	      004aeb01    jmp near ptr 004AEB06h"
"	      004aeb06    pop edi"
"	      004aeb07    pop esi"
"	      004aeb08    pop ebx"
"	      004aeb09    leave"
"	      004aeb0a    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004aeb0d
void ButtonWindow::Enable() {
// LINE 419:
	asm( 
"	      004aeb0d    push ebp"
"	      004aeb0e    mov ebp,esp"
"	      004aeb10    sub esp,4"
"	      004aeb13    push ebx"
"	      004aeb14    push esi"
"	      004aeb15    push edi"
"	      004aeb16    mov [ebp-4],ecx"
);
// LINE 420:
	asm( 
"	      004aeb19    mov eax,[ebp-4]"
"	      004aeb1c    mov dword ptr [eax+78h],1"
);
// LINE 421:
	asm( 
"	      004aeb23    push 1"
"	      004aeb25    push 1"
"	      004aeb27    mov eax,[ebp-4]"
"	      004aeb2a    mov eax,[eax]"
"	      004aeb2c    mov ecx,[ebp-4]"
"	      004aeb2f    call dword ptr [eax+30h]"
);
// LINE 422:
	asm( 
"	      004aeb32    jmp near ptr 004AEB37h"
"	      004aeb37    pop edi"
"	      004aeb38    pop esi"
"	      004aeb39    pop ebx"
"	      004aeb3a    leave"
"	      004aeb3b    ret"
);
}

// FUNCTION: SIMCOPTER 0x004aeb3c
void ButtonWindow::Disable() {
// LINE 427:
	asm( 
"	      004aeb3c    push ebp"
"	      004aeb3d    mov ebp,esp"
"	      004aeb3f    sub esp,4"
"	      004aeb42    push ebx"
"	      004aeb43    push esi"
"	      004aeb44    push edi"
"	      004aeb45    mov [ebp-4],ecx"
);
// LINE 428:
	asm( 
"	      004aeb48    mov eax,[ebp-4]"
"	      004aeb4b    mov dword ptr [eax+78h],0"
);
// LINE 429:
	asm( 
"	      004aeb52    push 1"
"	      004aeb54    push 1"
"	      004aeb56    mov eax,[ebp-4]"
"	      004aeb59    mov eax,[eax]"
"	      004aeb5b    mov ecx,[ebp-4]"
"	      004aeb5e    call dword ptr [eax+30h]"
);
// LINE 430:
	asm( 
"	      004aeb61    jmp near ptr 004AEB66h"
"	      004aeb66    pop edi"
"	      004aeb67    pop esi"
"	      004aeb68    pop ebx"
"	      004aeb69    leave"
"	      004aeb6a    ret"
);
}

// FUNCTION: SIMCOPTER 0x004aeb6b
int32_t ButtonWindow::ComposeSelf() {
// LINE 436:
	asm( 
"	      004aeb6b    push ebp"
"	      004aeb6c    mov ebp,esp"
"	      004aeb6e    sub esp,0Ch"
"	      004aeb71    push ebx"
"	      004aeb72    push esi"
"	      004aeb73    push edi"
"	      004aeb74    mov [ebp-0Ch],ecx"
);
// LINE 441:
	asm( 
"	      004aeb77    mov eax,[ebp-0Ch]"
"	      004aeb7a    cmp dword ptr [eax+54h],0"
"	      004aeb7e    jne near ptr 004AEB8Eh"
);
// LINE 442:
	asm( 
"	      004aeb84    mov eax,1"
"	      004aeb89    jmp near ptr 004AEC42h"
);
// LINE 443:
	asm( 
"	      004aeb8e    jmp near ptr 004AEB93h"
"	      004aeb93    mov eax,[ebp-0Ch]"
"	      004aeb96    cmp dword ptr [eax+48h],0"
"	      004aeb9a    jne near ptr 004AEBAAh"
);
// LINE 444:
	asm( 
"	      004aeba0    mov eax,1"
"	      004aeba5    jmp near ptr 004AEC42h"
);
// LINE 445:
	asm( 
"	      004aebaa    push 1"
"	      004aebac    push 0"
"	      004aebae    mov eax,[ebp-0Ch]"
"	      004aebb1    mov eax,[eax]"
"	      004aebb3    mov ecx,[ebp-0Ch]"
"	      004aebb6    call dword ptr [eax+30h]"
);
// LINE 448:
	asm( 
"	      004aebb9    mov eax,[ebp-0Ch]"
"	      004aebbc    mov eax,[eax+18h]"
"	      004aebbf    mov ecx,[ebp-0Ch]"
"	      004aebc2    sub eax,[ecx+10h]"
"	      004aebc5    mov [ebp-4],eax"
"	      004aebc8    jmp near ptr 004AEBCDh"
);
// LINE 449:
	asm( 
"	      004aebcd    mov eax,[ebp-0Ch]"
"	      004aebd0    cmp dword ptr [eax+78h],0"
"	      004aebd4    je near ptr 004AEBECh"
);
// LINE 450:
	asm( 
"	      004aebda    mov eax,[ebp-0Ch]"
"	      004aebdd    mov eax,[eax+74h]"
"	      004aebe0    imul eax,[ebp-4]"
"	      004aebe4    mov [ebp-8],eax"
);
// LINE 451:
	asm( 
"	      004aebe7    jmp near ptr 004AEBF3h"
);
// LINE 452:
	asm( 
"	      004aebec    mov dword ptr [ebp-8],0"
);
// LINE 456:
	asm( 
"	      004aebf3    jmp near ptr 004AEBF8h"
"	      004aebf8    mov eax,[ebp-0Ch]"
"	      004aebfb    mov eax,[eax+1Ch]"
"	      004aebfe    mov ecx,[ebp-0Ch]"
"	      004aec01    sub eax,[ecx+14h]"
"	      004aec04    push eax"
"	      004aec05    mov eax,[ebp-8]"
"	      004aec08    add eax,[ebp-4]"
"	      004aec0b    push eax"
"	      004aec0c    push 0"
"	      004aec0e    mov eax,[ebp-8]"
"	      004aec11    push eax"
"	      004aec12    mov eax,[ebp-0Ch]"
"	      004aec15    mov eax,[eax+24h]"
"	      004aec18    push eax"
"	      004aec19    mov eax,[ebp-0Ch]"
"	      004aec1c    mov eax,[eax+20h]"
"	      004aec1f    push eax"
"	      004aec20    mov eax,[ebp-0Ch]"
"	      004aec23    mov eax,[eax+44h]"
"	      004aec26    push eax"
"	      004aec27    mov eax,[ebp-0Ch]"
"	      004aec2a    mov ecx,[ebp-0Ch]"
"	      004aec2d    mov ecx,[ecx+40h]"
"	      004aec30    mov edx,[ecx]"
"	      004aec32    mov ecx,[eax+40h]"
"	      004aec35    call dword ptr [edx+0Ch]"
);
// LINE 457:
	asm( 
"	      004aec38    mov eax,1"
"	      004aec3d    jmp near ptr 004AEC42h"
);
// LINE 458:
	asm( 
"	      004aec42    pop edi"
"	      004aec43    pop esi"
"	      004aec44    pop ebx"
"	      004aec45    leave"
"	      004aec46    ret"
);
}

// FUNCTION: SIMCOPTER 0x004aec47
long ButtonWindow::DoCursorDown(long, long, unsigned long) {
// LINE 465:
	asm( 
"	      004aec47    push ebp"
"	      004aec48    mov ebp,esp"
"	      004aec4a    sub esp,4"
"	      004aec4d    push ebx"
"	      004aec4e    push esi"
"	      004aec4f    push edi"
"	      004aec50    mov [ebp-4],ecx"
);
// LINE 466:
	asm( 
"	      004aec53    mov eax,[ebp-4]"
"	      004aec56    cmp dword ptr [eax+78h],0"
"	      004aec5a    jne near ptr 004AEC67h"
);
// LINE 467:
	asm( 
"	      004aec60    xor eax,eax"
"	      004aec62    jmp near ptr 004AEC93h"
);
// LINE 469:
	asm( 
"	      004aec67    mov eax,[ebp-4]"
"	      004aec6a    push eax"
"	      004aec6b    mov eax,[ebp-4]"
"	      004aec6e    mov eax,[eax]"
"	      004aec70    mov ecx,[ebp-4]"
"	      004aec73    call dword ptr [eax+98h]"
);
// LINE 470:
	asm( 
"	      004aec79    push 2"
"	      004aec7b    mov eax,[ebp-4]"
"	      004aec7e    mov eax,[eax]"
"	      004aec80    mov ecx,[ebp-4]"
"	      004aec83    call dword ptr [eax+0C8h]"
);
// LINE 472:
	asm( 
"	      004aec89    mov eax,1"
"	      004aec8e    jmp near ptr 004AEC93h"
);
// LINE 473:
	asm( 
"	      004aec93    pop edi"
"	      004aec94    pop esi"
"	      004aec95    pop ebx"
"	      004aec96    leave"
"	      004aec97    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004aec9a
long ButtonWindow::DoCursorUp(long, long, unsigned long) {
// LINE 480:
	asm( 
"	      004aec9a    push ebp"
"	      004aec9b    mov ebp,esp"
"	      004aec9d    sub esp,8"
"	      004aeca0    push ebx"
"	      004aeca1    push esi"
"	      004aeca2    push edi"
"	      004aeca3    mov [ebp-8],ecx"
);
// LINE 481:
	asm( 
"	      004aeca6    mov eax,ds:[59A960h]"
"	      004aecab    cmp [ebp-8],eax"
"	      004aecae    jne near ptr 004AECB9h"
"	      004aecb4    jmp near ptr 004AECBEh"
"	      004aecb9    jmp near ptr 004AED3Ch"
"	      004aecbe    jmp near ptr 004AECCDh"
"	      004aecc3    cmp dword ptr [ebp-4],0"
"	      004aecc7    je near ptr 004AED3Ch"
);
// LINE 482:
	asm( 
"	      004aeccd    mov eax,[ebp-8]"
"	      004aecd0    push eax"
"	      004aecd1    mov eax,[ebp-8]"
"	      004aecd4    mov eax,[eax]"
"	      004aecd6    mov ecx,[ebp-8]"
"	      004aecd9    call dword ptr [eax+9Ch]"
);
// LINE 483:
	asm( 
"	      004aecdf    push 1"
"	      004aece1    mov eax,[ebp-8]"
"	      004aece4    mov eax,[eax]"
"	      004aece6    mov ecx,[ebp-8]"
"	      004aece9    call dword ptr [eax+0C8h]"
);
// LINE 484:
	asm( 
"	      004aecef    mov eax,[ebp+0Ch]"
"	      004aecf2    push eax"
"	      004aecf3    mov eax,[ebp+8]"
"	      004aecf6    push eax"
"	      004aecf7    mov eax,[ebp-8]"
"	      004aecfa    mov eax,[eax]"
"	      004aecfc    mov ecx,[ebp-8]"
"	      004aecff    call dword ptr [eax+0A8h]"
"	      004aed05    test eax,eax"
"	      004aed07    je near ptr 004AED3Ch"
"	      004aed0d    mov eax,[ebp-8]"
"	      004aed10    cmp dword ptr [eax+38h],0"
"	      004aed14    je near ptr 004AED3Ch"
);
// LINE 485:
	asm( 
"	      004aed1a    push 0"
"	      004aed1c    push 10001h"
"	      004aed21    mov eax,[ebp-8]"
"	      004aed24    mov eax,[eax+4]"
"	      004aed27    push eax"
"	      004aed28    mov eax,[ebp-8]"
"	      004aed2b    push eax"
"	      004aed2c    mov eax,[ebp-8]"
"	      004aed2f    mov ecx,[ebp-8]"
"	      004aed32    mov ecx,[ecx+38h]"
"	      004aed35    mov edx,[ecx]"
"	      004aed37    mov ecx,[eax+38h]"
"	      004aed3a    call dword ptr [edx]"
);
// LINE 487:
	asm( 
"	      004aed3c    mov eax,1"
"	      004aed41    jmp near ptr 004AED46h"
);
// LINE 488:
	asm( 
"	      004aed46    pop edi"
"	      004aed47    pop esi"
"	      004aed48    pop ebx"
"	      004aed49    leave"
"	      004aed4a    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004aed4d
long ButtonWindow::DoCursorMove(long, long) {
// LINE 495:
	asm( 
"	      004aed4d    push ebp"
"	      004aed4e    mov ebp,esp"
"	      004aed50    sub esp,8"
"	      004aed53    push ebx"
"	      004aed54    push esi"
"	      004aed55    push edi"
"	      004aed56    mov [ebp-8],ecx"
);
// LINE 496:
	asm( 
"	      004aed59    mov eax,ds:[59A960h]"
"	      004aed5e    cmp [ebp-8],eax"
"	      004aed61    jne near ptr 004AED6Ch"
"	      004aed67    jmp near ptr 004AED71h"
"	      004aed6c    jmp near ptr 004AEDD2h"
"	      004aed71    jmp near ptr 004AED80h"
"	      004aed76    cmp dword ptr [ebp-4],0"
"	      004aed7a    je near ptr 004AEDD2h"
);
// LINE 497:
	asm( 
"	      004aed80    mov eax,[ebp+0Ch]"
"	      004aed83    push eax"
"	      004aed84    mov eax,[ebp+8]"
"	      004aed87    push eax"
"	      004aed88    mov eax,[ebp-8]"
"	      004aed8b    mov eax,[eax]"
"	      004aed8d    mov ecx,[ebp-8]"
"	      004aed90    call dword ptr [eax+0A8h]"
"	      004aed96    test eax,eax"
"	      004aed98    je near ptr 004AEDB3h"
);
// LINE 498:
	asm( 
"	      004aed9e    push 2"
"	      004aeda0    mov eax,[ebp-8]"
"	      004aeda3    mov eax,[eax]"
"	      004aeda5    mov ecx,[ebp-8]"
"	      004aeda8    call dword ptr [eax+0C8h]"
);
// LINE 499:
	asm( 
"	      004aedae    jmp near ptr 004AEDC3h"
);
// LINE 500:
	asm( 
"	      004aedb3    push 1"
"	      004aedb5    mov eax,[ebp-8]"
"	      004aedb8    mov eax,[eax]"
"	      004aedba    mov ecx,[ebp-8]"
"	      004aedbd    call dword ptr [eax+0C8h]"
);
// LINE 501:
	asm( 
"	      004aedc3    push 1"
"	      004aedc5    push 1"
"	      004aedc7    mov eax,[ebp-8]"
"	      004aedca    mov eax,[eax]"
"	      004aedcc    mov ecx,[ebp-8]"
"	      004aedcf    call dword ptr [eax+30h]"
);
// LINE 503:
	asm( 
"	      004aedd2    mov eax,1"
"	      004aedd7    jmp near ptr 004AEDDCh"
);
// LINE 504:
	asm( 
"	      004aeddc    pop edi"
"	      004aeddd    pop esi"
"	      004aedde    pop ebx"
"	      004aeddf    leave"
"	      004aede0    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004aede3
int32_t ButtonWindow::CanWeRespondToMessage() {
// LINE 511:
	asm( 
"	      004aede3    push ebp"
"	      004aede4    mov ebp,esp"
"	      004aede6    sub esp,4"
"	      004aede9    push ebx"
"	      004aedea    push esi"
"	      004aedeb    push edi"
"	      004aedec    mov [ebp-4],ecx"
);
// LINE 512:
	asm( 
"	      004aedef    mov ecx,[ebp-4]"
"	      004aedf2    call 004A786Bh"
"	      004aedf7    test eax,eax"
"	      004aedf9    jne near ptr 004AEE06h"
);
// LINE 513:
	asm( 
"	      004aedff    xor eax,eax"
"	      004aee01    jmp near ptr 004AEE24h"
);
// LINE 514:
	asm( 
"	      004aee06    mov eax,[ebp-4]"
"	      004aee09    cmp dword ptr [eax+78h],0"
"	      004aee0d    jne near ptr 004AEE1Ah"
);
// LINE 515:
	asm( 
"	      004aee13    xor eax,eax"
"	      004aee15    jmp near ptr 004AEE24h"
);
// LINE 516:
	asm( 
"	      004aee1a    mov eax,1"
"	      004aee1f    jmp near ptr 004AEE24h"
);
// LINE 517:
	asm( 
"	      004aee24    pop edi"
"	      004aee25    pop esi"
"	      004aee26    pop ebx"
"	      004aee27    leave"
"	      004aee28    ret"
);
}

// FUNCTION: SIMCOPTER 0x004aee29
void CheckBoxWindow::CheckBoxWindow() {
// LINE 539:
	asm( 
"	      004aee29    push ebp"
"	      004aee2a    mov ebp,esp"
"	      004aee2c    sub esp,38h"
"	      004aee2f    push ebx"
"	      004aee30    push esi"
"	      004aee31    push edi"
"	      004aee32    mov [ebp-38h],ecx"
"	      004aee35    mov ecx,[ebp-38h]"
"	      004aee38    call 004ADE3Dh"
"	      004aee3d    mov eax,[ebp-38h]"
"	      004aee40    mov dword ptr [eax],591C58h"
"	      004aee46    mov eax,ds:[59ABA4h]"
"	      004aee4b    mov [ebp-34h],eax"
);
// LINE 540:
	asm( 
"	      004aee4e    jmp near ptr 004AEE53h"
"	      004aee53    mov eax,[ebp-34h]"
"	      004aee56    push eax"
"	      004aee57    call 0056ABE0h"
"	      004aee5c    add esp,4"
"	      004aee5f    mov [ebp-30h],eax"
"	      004aee62    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004aee66    jne near ptr 004AEE9Eh"
"	      004aee6c    push 5971E4h"
"	      004aee71    mov ecx,638C00h"
"	      004aee76    call 00569960h"
"	      004aee7b    mov [ebp-10h],eax"
"	      004aee7e    mov eax,[ebp-10h]"
"	      004aee81    push eax"
"	      004aee82    call 004011B0h"
"	      004aee87    add esp,4"
"	      004aee8a    jmp near ptr 004AEE8Fh"
"	      004aee8f    push 1"
"	      004aee91    call 00569430h"
"	      004aee96    add esp,4"
"	      004aee99    jmp near ptr 004AEE9Eh"
"	      004aee9e    jmp near ptr 004AEEA3h"
"	      004aeea3    mov eax,[ebp-38h]"
"	      004aeea6    mov eax,[eax+60h]"
"	      004aeea9    cmp dword ptr [eax+0Ch],1"
"	      004aeead    ja near ptr 004AEED4h"
"	      004aeeb3    cmp dword ptr [ebp-30h],0"
"	      004aeeb7    je near ptr 004AF055h"
"	      004aeebd    jmp near ptr 004AEEC2h"
"	      004aeec2    mov eax,[ebp-38h]"
"	      004aeec5    mov eax,[eax+60h]"
"	      004aeec8    mov ecx,[ebp-30h]"
"	      004aeecb    cmp [eax+8],ecx"
"	      004aeece    jae near ptr 004AF055h"
"	      004aeed4    push 10h"
"	      004aeed6    call 0056A600h"
"	      004aeedb    add esp,4"
"	      004aeede    mov [ebp-8],eax"
"	      004aeee1    cmp dword ptr [ebp-8],0"
"	      004aeee5    je near ptr 004AEFAFh"
"	      004aeeeb    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004aeeef    jne near ptr 004AEF27h"
"	      004aeef5    push 5971E4h"
"	      004aeefa    mov ecx,638C00h"
"	      004aeeff    call 00569960h"
"	      004aef04    mov [ebp-2Ch],eax"
"	      004aef07    mov eax,[ebp-2Ch]"
"	      004aef0a    push eax"
"	      004aef0b    call 004011B0h"
"	      004aef10    add esp,4"
"	      004aef13    jmp near ptr 004AEF18h"
"	      004aef18    push 1"
"	      004aef1a    call 00569430h"
"	      004aef1f    add esp,4"
"	      004aef22    jmp near ptr 004AEF27h"
"	      004aef27    mov eax,[ebp-30h]"
"	      004aef2a    mov ecx,[ebp-8]"
"	      004aef2d    mov [ecx+4],eax"
"	      004aef30    mov eax,[ebp-8]"
"	      004aef33    mov eax,[eax+4]"
"	      004aef36    mov ecx,[ebp-8]"
"	      004aef39    mov [ecx+8],eax"
"	      004aef3c    mov eax,[ebp-8]"
"	      004aef3f    cmp dword ptr [eax+8],0"
"	      004aef43    je near ptr 004AEF8Ch"
"	      004aef49    mov eax,[ebp-8]"
"	      004aef4c    mov eax,[eax+8]"
"	      004aef4f    push eax"
"	      004aef50    call 0056A600h"
"	      004aef55    add esp,4"
"	      004aef58    mov ecx,[ebp-8]"
"	      004aef5b    mov [ecx],eax"
"	      004aef5d    mov eax,[ebp-8]"
"	      004aef60    mov eax,[eax+4]"
"	      004aef63    mov [ebp-24h],eax"
"	      004aef66    mov eax,[ebp-8]"
"	      004aef69    mov eax,[eax]"
"	      004aef6b    mov [ebp-28h],eax"
"	      004aef6e    mov eax,[ebp-24h]"
"	      004aef71    push eax"
"	      004aef72    mov eax,[ebp-34h]"
"	      004aef75    push eax"
"	      004aef76    mov eax,[ebp-28h]"
"	      004aef79    push eax"
"	      004aef7a    call 0056A800h"
"	      004aef7f    add esp,0Ch"
"	      004aef82    jmp near ptr 004AEF87h"
"	      004aef87    jmp near ptr 004AEF95h"
"	      004aef8c    mov eax,[ebp-8]"
"	      004aef8f    mov dword ptr [eax],0"
"	      004aef95    mov eax,[ebp-8]"
"	      004aef98    mov dword ptr [eax+0Ch],1"
"	      004aef9f    jmp near ptr 004AEFA4h"
"	      004aefa4    mov eax,[ebp-8]"
"	      004aefa7    mov [ebp-4],eax"
"	      004aefaa    jmp near ptr 004AEFB6h"
"	      004aefaf    mov dword ptr [ebp-4],0"
"	      004aefb6    mov eax,[ebp-38h]"
"	      004aefb9    mov eax,[eax+60h]"
"	      004aefbc    dec dword ptr [eax+0Ch]"
"	      004aefbf    mov eax,[ebp-38h]"
"	      004aefc2    mov eax,[eax+60h]"
"	      004aefc5    cmp dword ptr [eax+0Ch],0"
"	      004aefc9    jne near ptr 004AF042h"
"	      004aefcf    mov eax,[ebp-38h]"
"	      004aefd2    mov eax,[eax+60h]"
"	      004aefd5    mov [ebp-18h],eax"
"	      004aefd8    mov eax,[ebp-18h]"
"	      004aefdb    mov [ebp-14h],eax"
"	      004aefde    cmp dword ptr [ebp-14h],0"
"	      004aefe2    je near ptr 004AF042h"
"	      004aefe8    mov eax,[ebp-14h]"
"	      004aefeb    cmp dword ptr [eax+8],0"
"	      004aefef    je near ptr 004AF022h"
"	      004aeff5    mov eax,[ebp-14h]"
"	      004aeff8    mov eax,[eax]"
"	      004aeffa    mov [ebp-1Ch],eax"
"	      004aeffd    mov eax,[ebp-1Ch]"
"	      004af000    mov [ebp-20h],eax"
"	      004af003    mov eax,[ebp-20h]"
"	      004af006    push eax"
"	      004af007    call 0056A740h"
"	      004af00c    add esp,4"
"	      004af00f    mov eax,[ebp-14h]"
"	      004af012    mov dword ptr [eax+8],0"
"	      004af019    mov eax,[ebp-14h]"
"	      004af01c    mov dword ptr [eax],0"
"	      004af022    jmp near ptr 004AF027h"
"	      004af027    jmp near ptr 004AF02Ch"
"	      004af02c    mov eax,[ebp-14h]"
"	      004af02f    push eax"
"	      004af030    call 0056A740h"
"	      004af035    add esp,4"
"	      004af038    jmp near ptr 004AF03Dh"
"	      004af03d    jmp near ptr 004AF042h"
"	      004af042    jmp near ptr 004AF047h"
"	      004af047    mov eax,[ebp-4]"
"	      004af04a    mov ecx,[ebp-38h]"
"	      004af04d    mov [ecx+60h],eax"
"	      004af050    jmp near ptr 004AF088h"
"	      004af055    cmp dword ptr [ebp-30h],0"
"	      004af059    je near ptr 004AF088h"
"	      004af05f    jmp near ptr 004AF064h"
"	      004af064    mov eax,[ebp-38h]"
"	      004af067    mov eax,[eax+60h]"
"	      004af06a    mov eax,[eax]"
"	      004af06c    mov [ebp-0Ch],eax"
"	      004af06f    mov eax,[ebp-30h]"
"	      004af072    push eax"
"	      004af073    mov eax,[ebp-34h]"
"	      004af076    push eax"
"	      004af077    mov eax,[ebp-0Ch]"
"	      004af07a    push eax"
"	      004af07b    call 0056A800h"
"	      004af080    add esp,0Ch"
"	      004af083    jmp near ptr 004AF088h"
"	      004af088    mov eax,[ebp-30h]"
"	      004af08b    mov ecx,[ebp-38h]"
"	      004af08e    mov ecx,[ecx+60h]"
"	      004af091    mov [ecx+4],eax"
"	      004af094    jmp near ptr 004AF099h"
"	      004af099    jmp near ptr 004AF09Eh"
);
// LINE 541:
	asm( 
"	      004af09e    jmp near ptr 004AF0A3h"
"	      004af0a3    mov eax,[ebp-38h]"
"	      004af0a6    pop edi"
"	      004af0a7    pop esi"
"	      004af0a8    pop ebx"
"	      004af0a9    leave"
"	      004af0aa    ret"
);
}

// FUNCTION: SIMCOPTER 0x004af0ab
void CheckBoxWindow::CheckBoxWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t) {
// LINE 552:
	asm( 
"	      004af0ab    push ebp"
"	      004af0ac    mov ebp,esp"
"	      004af0ae    sub esp,68h"
"	      004af0b1    push ebx"
"	      004af0b2    push esi"
"	      004af0b3    push edi"
"	      004af0b4    mov [ebp-68h],ecx"
"	      004af0b7    mov eax,[ebp+1Ch]"
"	      004af0ba    push eax"
"	      004af0bb    mov eax,[ebp+18h]"
"	      004af0be    push eax"
"	      004af0bf    mov eax,[ebp+14h]"
"	      004af0c2    push eax"
"	      004af0c3    mov eax,[ebp+10h]"
"	      004af0c6    push eax"
"	      004af0c7    mov eax,[ebp+0Ch]"
"	      004af0ca    push eax"
"	      004af0cb    mov eax,[ebp+8]"
"	      004af0ce    push eax"
"	      004af0cf    mov ecx,[ebp-68h]"
"	      004af0d2    call 004AE05Dh"
"	      004af0d7    mov eax,[ebp-68h]"
"	      004af0da    mov dword ptr [eax],591C58h"
);
// LINE 553:
	asm( 
"	      004af0e0    cmp dword ptr [ebp+14h],0"
"	      004af0e4    je near ptr 004AF33Fh"
);
// LINE 554:
	asm( 
"	      004af0ea    jmp near ptr 004AF0EFh"
"	      004af0ef    mov eax,[ebp+14h]"
"	      004af0f2    push eax"
"	      004af0f3    call 0056ABE0h"
"	      004af0f8    add esp,4"
"	      004af0fb    mov [ebp-30h],eax"
"	      004af0fe    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004af102    jne near ptr 004AF13Ah"
"	      004af108    push 5971E4h"
"	      004af10d    mov ecx,638C00h"
"	      004af112    call 00569960h"
"	      004af117    mov [ebp-10h],eax"
"	      004af11a    mov eax,[ebp-10h]"
"	      004af11d    push eax"
"	      004af11e    call 004011B0h"
"	      004af123    add esp,4"
"	      004af126    jmp near ptr 004AF12Bh"
"	      004af12b    push 1"
"	      004af12d    call 00569430h"
"	      004af132    add esp,4"
"	      004af135    jmp near ptr 004AF13Ah"
"	      004af13a    jmp near ptr 004AF13Fh"
"	      004af13f    mov eax,[ebp-68h]"
"	      004af142    mov eax,[eax+60h]"
"	      004af145    cmp dword ptr [eax+0Ch],1"
"	      004af149    ja near ptr 004AF170h"
"	      004af14f    cmp dword ptr [ebp-30h],0"
"	      004af153    je near ptr 004AF2F1h"
"	      004af159    jmp near ptr 004AF15Eh"
"	      004af15e    mov eax,[ebp-68h]"
"	      004af161    mov eax,[eax+60h]"
"	      004af164    mov ecx,[ebp-30h]"
"	      004af167    cmp [eax+8],ecx"
"	      004af16a    jae near ptr 004AF2F1h"
"	      004af170    push 10h"
"	      004af172    call 0056A600h"
"	      004af177    add esp,4"
"	      004af17a    mov [ebp-8],eax"
"	      004af17d    cmp dword ptr [ebp-8],0"
"	      004af181    je near ptr 004AF24Bh"
"	      004af187    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004af18b    jne near ptr 004AF1C3h"
"	      004af191    push 5971E4h"
"	      004af196    mov ecx,638C00h"
"	      004af19b    call 00569960h"
"	      004af1a0    mov [ebp-2Ch],eax"
"	      004af1a3    mov eax,[ebp-2Ch]"
"	      004af1a6    push eax"
"	      004af1a7    call 004011B0h"
"	      004af1ac    add esp,4"
"	      004af1af    jmp near ptr 004AF1B4h"
"	      004af1b4    push 1"
"	      004af1b6    call 00569430h"
"	      004af1bb    add esp,4"
"	      004af1be    jmp near ptr 004AF1C3h"
"	      004af1c3    mov eax,[ebp-30h]"
"	      004af1c6    mov ecx,[ebp-8]"
"	      004af1c9    mov [ecx+4],eax"
"	      004af1cc    mov eax,[ebp-8]"
"	      004af1cf    mov eax,[eax+4]"
"	      004af1d2    mov ecx,[ebp-8]"
"	      004af1d5    mov [ecx+8],eax"
"	      004af1d8    mov eax,[ebp-8]"
"	      004af1db    cmp dword ptr [eax+8],0"
"	      004af1df    je near ptr 004AF228h"
"	      004af1e5    mov eax,[ebp-8]"
"	      004af1e8    mov eax,[eax+8]"
"	      004af1eb    push eax"
"	      004af1ec    call 0056A600h"
"	      004af1f1    add esp,4"
"	      004af1f4    mov ecx,[ebp-8]"
"	      004af1f7    mov [ecx],eax"
"	      004af1f9    mov eax,[ebp-8]"
"	      004af1fc    mov eax,[eax+4]"
"	      004af1ff    mov [ebp-24h],eax"
"	      004af202    mov eax,[ebp-8]"
"	      004af205    mov eax,[eax]"
"	      004af207    mov [ebp-28h],eax"
"	      004af20a    mov eax,[ebp-24h]"
"	      004af20d    push eax"
"	      004af20e    mov eax,[ebp+14h]"
"	      004af211    push eax"
"	      004af212    mov eax,[ebp-28h]"
"	      004af215    push eax"
"	      004af216    call 0056A800h"
"	      004af21b    add esp,0Ch"
"	      004af21e    jmp near ptr 004AF223h"
"	      004af223    jmp near ptr 004AF231h"
"	      004af228    mov eax,[ebp-8]"
"	      004af22b    mov dword ptr [eax],0"
"	      004af231    mov eax,[ebp-8]"
"	      004af234    mov dword ptr [eax+0Ch],1"
"	      004af23b    jmp near ptr 004AF240h"
"	      004af240    mov eax,[ebp-8]"
"	      004af243    mov [ebp-4],eax"
"	      004af246    jmp near ptr 004AF252h"
"	      004af24b    mov dword ptr [ebp-4],0"
"	      004af252    mov eax,[ebp-68h]"
"	      004af255    mov eax,[eax+60h]"
"	      004af258    dec dword ptr [eax+0Ch]"
"	      004af25b    mov eax,[ebp-68h]"
"	      004af25e    mov eax,[eax+60h]"
"	      004af261    cmp dword ptr [eax+0Ch],0"
"	      004af265    jne near ptr 004AF2DEh"
"	      004af26b    mov eax,[ebp-68h]"
"	      004af26e    mov eax,[eax+60h]"
"	      004af271    mov [ebp-18h],eax"
"	      004af274    mov eax,[ebp-18h]"
"	      004af277    mov [ebp-14h],eax"
"	      004af27a    cmp dword ptr [ebp-14h],0"
"	      004af27e    je near ptr 004AF2DEh"
"	      004af284    mov eax,[ebp-14h]"
"	      004af287    cmp dword ptr [eax+8],0"
"	      004af28b    je near ptr 004AF2BEh"
"	      004af291    mov eax,[ebp-14h]"
"	      004af294    mov eax,[eax]"
"	      004af296    mov [ebp-1Ch],eax"
"	      004af299    mov eax,[ebp-1Ch]"
"	      004af29c    mov [ebp-20h],eax"
"	      004af29f    mov eax,[ebp-20h]"
"	      004af2a2    push eax"
"	      004af2a3    call 0056A740h"
"	      004af2a8    add esp,4"
"	      004af2ab    mov eax,[ebp-14h]"
"	      004af2ae    mov dword ptr [eax+8],0"
"	      004af2b5    mov eax,[ebp-14h]"
"	      004af2b8    mov dword ptr [eax],0"
"	      004af2be    jmp near ptr 004AF2C3h"
"	      004af2c3    jmp near ptr 004AF2C8h"
"	      004af2c8    mov eax,[ebp-14h]"
"	      004af2cb    push eax"
"	      004af2cc    call 0056A740h"
"	      004af2d1    add esp,4"
"	      004af2d4    jmp near ptr 004AF2D9h"
"	      004af2d9    jmp near ptr 004AF2DEh"
"	      004af2de    jmp near ptr 004AF2E3h"
"	      004af2e3    mov eax,[ebp-4]"
"	      004af2e6    mov ecx,[ebp-68h]"
"	      004af2e9    mov [ecx+60h],eax"
"	      004af2ec    jmp near ptr 004AF324h"
"	      004af2f1    cmp dword ptr [ebp-30h],0"
"	      004af2f5    je near ptr 004AF324h"
"	      004af2fb    jmp near ptr 004AF300h"
"	      004af300    mov eax,[ebp-68h]"
"	      004af303    mov eax,[eax+60h]"
"	      004af306    mov eax,[eax]"
"	      004af308    mov [ebp-0Ch],eax"
"	      004af30b    mov eax,[ebp-30h]"
"	      004af30e    push eax"
"	      004af30f    mov eax,[ebp+14h]"
"	      004af312    push eax"
"	      004af313    mov eax,[ebp-0Ch]"
"	      004af316    push eax"
"	      004af317    call 0056A800h"
"	      004af31c    add esp,0Ch"
"	      004af31f    jmp near ptr 004AF324h"
"	      004af324    mov eax,[ebp-30h]"
"	      004af327    mov ecx,[ebp-68h]"
"	      004af32a    mov ecx,[ecx+60h]"
"	      004af32d    mov [ecx+4],eax"
"	      004af330    jmp near ptr 004AF335h"
"	      004af335    jmp near ptr 004AF33Ah"
);
// LINE 555:
	asm( 
"	      004af33a    jmp near ptr 004AF597h"
);
// LINE 556:
	asm( 
"	      004af33f    mov eax,ds:[59ABA4h]"
"	      004af344    mov [ebp-64h],eax"
"	      004af347    jmp near ptr 004AF34Ch"
"	      004af34c    mov eax,[ebp-64h]"
"	      004af34f    push eax"
"	      004af350    call 0056ABE0h"
"	      004af355    add esp,4"
"	      004af358    mov [ebp-60h],eax"
"	      004af35b    cmp dword ptr [ebp-60h],0FFFFFFFFh"
"	      004af35f    jne near ptr 004AF397h"
"	      004af365    push 5971E4h"
"	      004af36a    mov ecx,638C00h"
"	      004af36f    call 00569960h"
"	      004af374    mov [ebp-40h],eax"
"	      004af377    mov eax,[ebp-40h]"
"	      004af37a    push eax"
"	      004af37b    call 004011B0h"
"	      004af380    add esp,4"
"	      004af383    jmp near ptr 004AF388h"
"	      004af388    push 1"
"	      004af38a    call 00569430h"
"	      004af38f    add esp,4"
"	      004af392    jmp near ptr 004AF397h"
"	      004af397    jmp near ptr 004AF39Ch"
"	      004af39c    mov eax,[ebp-68h]"
"	      004af39f    mov eax,[eax+60h]"
"	      004af3a2    cmp dword ptr [eax+0Ch],1"
"	      004af3a6    ja near ptr 004AF3CDh"
"	      004af3ac    cmp dword ptr [ebp-60h],0"
"	      004af3b0    je near ptr 004AF54Eh"
"	      004af3b6    jmp near ptr 004AF3BBh"
"	      004af3bb    mov eax,[ebp-68h]"
"	      004af3be    mov eax,[eax+60h]"
"	      004af3c1    mov ecx,[ebp-60h]"
"	      004af3c4    cmp [eax+8],ecx"
"	      004af3c7    jae near ptr 004AF54Eh"
"	      004af3cd    push 10h"
"	      004af3cf    call 0056A600h"
"	      004af3d4    add esp,4"
"	      004af3d7    mov [ebp-38h],eax"
"	      004af3da    cmp dword ptr [ebp-38h],0"
"	      004af3de    je near ptr 004AF4A8h"
"	      004af3e4    cmp dword ptr [ebp-60h],0FFFFFFFFh"
"	      004af3e8    jne near ptr 004AF420h"
"	      004af3ee    push 5971E4h"
"	      004af3f3    mov ecx,638C00h"
"	      004af3f8    call 00569960h"
"	      004af3fd    mov [ebp-5Ch],eax"
"	      004af400    mov eax,[ebp-5Ch]"
"	      004af403    push eax"
"	      004af404    call 004011B0h"
"	      004af409    add esp,4"
"	      004af40c    jmp near ptr 004AF411h"
"	      004af411    push 1"
"	      004af413    call 00569430h"
"	      004af418    add esp,4"
"	      004af41b    jmp near ptr 004AF420h"
"	      004af420    mov eax,[ebp-60h]"
"	      004af423    mov ecx,[ebp-38h]"
"	      004af426    mov [ecx+4],eax"
"	      004af429    mov eax,[ebp-38h]"
"	      004af42c    mov eax,[eax+4]"
"	      004af42f    mov ecx,[ebp-38h]"
"	      004af432    mov [ecx+8],eax"
"	      004af435    mov eax,[ebp-38h]"
"	      004af438    cmp dword ptr [eax+8],0"
"	      004af43c    je near ptr 004AF485h"
"	      004af442    mov eax,[ebp-38h]"
"	      004af445    mov eax,[eax+8]"
"	      004af448    push eax"
"	      004af449    call 0056A600h"
"	      004af44e    add esp,4"
"	      004af451    mov ecx,[ebp-38h]"
"	      004af454    mov [ecx],eax"
"	      004af456    mov eax,[ebp-38h]"
"	      004af459    mov eax,[eax+4]"
"	      004af45c    mov [ebp-54h],eax"
"	      004af45f    mov eax,[ebp-38h]"
"	      004af462    mov eax,[eax]"
"	      004af464    mov [ebp-58h],eax"
"	      004af467    mov eax,[ebp-54h]"
"	      004af46a    push eax"
"	      004af46b    mov eax,[ebp-64h]"
"	      004af46e    push eax"
"	      004af46f    mov eax,[ebp-58h]"
"	      004af472    push eax"
"	      004af473    call 0056A800h"
"	      004af478    add esp,0Ch"
"	      004af47b    jmp near ptr 004AF480h"
"	      004af480    jmp near ptr 004AF48Eh"
"	      004af485    mov eax,[ebp-38h]"
"	      004af488    mov dword ptr [eax],0"
"	      004af48e    mov eax,[ebp-38h]"
"	      004af491    mov dword ptr [eax+0Ch],1"
"	      004af498    jmp near ptr 004AF49Dh"
"	      004af49d    mov eax,[ebp-38h]"
"	      004af4a0    mov [ebp-34h],eax"
"	      004af4a3    jmp near ptr 004AF4AFh"
"	      004af4a8    mov dword ptr [ebp-34h],0"
"	      004af4af    mov eax,[ebp-68h]"
"	      004af4b2    mov eax,[eax+60h]"
"	      004af4b5    dec dword ptr [eax+0Ch]"
"	      004af4b8    mov eax,[ebp-68h]"
"	      004af4bb    mov eax,[eax+60h]"
"	      004af4be    cmp dword ptr [eax+0Ch],0"
"	      004af4c2    jne near ptr 004AF53Bh"
"	      004af4c8    mov eax,[ebp-68h]"
"	      004af4cb    mov eax,[eax+60h]"
"	      004af4ce    mov [ebp-48h],eax"
"	      004af4d1    mov eax,[ebp-48h]"
"	      004af4d4    mov [ebp-44h],eax"
"	      004af4d7    cmp dword ptr [ebp-44h],0"
"	      004af4db    je near ptr 004AF53Bh"
"	      004af4e1    mov eax,[ebp-44h]"
"	      004af4e4    cmp dword ptr [eax+8],0"
"	      004af4e8    je near ptr 004AF51Bh"
"	      004af4ee    mov eax,[ebp-44h]"
"	      004af4f1    mov eax,[eax]"
"	      004af4f3    mov [ebp-4Ch],eax"
"	      004af4f6    mov eax,[ebp-4Ch]"
"	      004af4f9    mov [ebp-50h],eax"
"	      004af4fc    mov eax,[ebp-50h]"
"	      004af4ff    push eax"
"	      004af500    call 0056A740h"
"	      004af505    add esp,4"
"	      004af508    mov eax,[ebp-44h]"
"	      004af50b    mov dword ptr [eax+8],0"
"	      004af512    mov eax,[ebp-44h]"
"	      004af515    mov dword ptr [eax],0"
"	      004af51b    jmp near ptr 004AF520h"
"	      004af520    jmp near ptr 004AF525h"
"	      004af525    mov eax,[ebp-44h]"
"	      004af528    push eax"
"	      004af529    call 0056A740h"
"	      004af52e    add esp,4"
"	      004af531    jmp near ptr 004AF536h"
"	      004af536    jmp near ptr 004AF53Bh"
"	      004af53b    jmp near ptr 004AF540h"
"	      004af540    mov eax,[ebp-34h]"
"	      004af543    mov ecx,[ebp-68h]"
"	      004af546    mov [ecx+60h],eax"
"	      004af549    jmp near ptr 004AF581h"
"	      004af54e    cmp dword ptr [ebp-60h],0"
"	      004af552    je near ptr 004AF581h"
"	      004af558    jmp near ptr 004AF55Dh"
"	      004af55d    mov eax,[ebp-68h]"
"	      004af560    mov eax,[eax+60h]"
"	      004af563    mov eax,[eax]"
"	      004af565    mov [ebp-3Ch],eax"
"	      004af568    mov eax,[ebp-60h]"
"	      004af56b    push eax"
"	      004af56c    mov eax,[ebp-64h]"
"	      004af56f    push eax"
"	      004af570    mov eax,[ebp-3Ch]"
"	      004af573    push eax"
"	      004af574    call 0056A800h"
"	      004af579    add esp,0Ch"
"	      004af57c    jmp near ptr 004AF581h"
"	      004af581    mov eax,[ebp-60h]"
"	      004af584    mov ecx,[ebp-68h]"
"	      004af587    mov ecx,[ecx+60h]"
"	      004af58a    mov [ecx+4],eax"
"	      004af58d    jmp near ptr 004AF592h"
"	      004af592    jmp near ptr 004AF597h"
);
// LINE 557:
	asm( 
"	      004af597    jmp near ptr 004AF59Ch"
"	      004af59c    mov eax,[ebp-68h]"
"	      004af59f    pop edi"
"	      004af5a0    pop esi"
"	      004af5a1    pop ebx"
"	      004af5a2    leave"
"	      004af5a3    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x004af5a6
int32_t CheckBoxWindow::GetImageCount() {
// LINE 563:
	asm( 
"	      004af5a6    push ebp"
"	      004af5a7    mov ebp,esp"
"	      004af5a9    sub esp,4"
"	      004af5ac    push ebx"
"	      004af5ad    push esi"
"	      004af5ae    push edi"
"	      004af5af    mov [ebp-4],ecx"
);
// LINE 564:
	asm( 
"	      004af5b2    mov eax,4"
"	      004af5b7    jmp near ptr 004AF5BCh"
);
// LINE 565:
	asm( 
"	      004af5bc    pop edi"
"	      004af5bd    pop esi"
"	      004af5be    pop ebx"
"	      004af5bf    leave"
"	      004af5c0    ret"
);
}

// FUNCTION: SIMCOPTER 0x004af5c1
int32_t CheckBoxWindow::ComposeSelf() {
// LINE 571:
	asm( 
"	      004af5c1    push ebp"
"	      004af5c2    mov ebp,esp"
"	      004af5c4    sub esp,0Ch"
"	      004af5c7    push ebx"
"	      004af5c8    push esi"
"	      004af5c9    push edi"
"	      004af5ca    mov [ebp-0Ch],ecx"
);
// LINE 576:
	asm( 
"	      004af5cd    mov eax,[ebp-0Ch]"
"	      004af5d0    cmp dword ptr [eax+54h],0"
"	      004af5d4    jne near ptr 004AF5E4h"
);
// LINE 577:
	asm( 
"	      004af5da    mov eax,1"
"	      004af5df    jmp near ptr 004AF6A6h"
);
// LINE 578:
	asm( 
"	      004af5e4    jmp near ptr 004AF5E9h"
"	      004af5e9    mov eax,[ebp-0Ch]"
"	      004af5ec    cmp dword ptr [eax+48h],0"
"	      004af5f0    jne near ptr 004AF600h"
);
// LINE 579:
	asm( 
"	      004af5f6    mov eax,1"
"	      004af5fb    jmp near ptr 004AF6A6h"
);
// LINE 580:
	asm( 
"	      004af600    push 1"
"	      004af602    push 1"
"	      004af604    mov eax,[ebp-0Ch]"
"	      004af607    mov eax,[eax]"
"	      004af609    mov ecx,[ebp-0Ch]"
"	      004af60c    call dword ptr [eax+30h]"
);
// LINE 583:
	asm( 
"	      004af60f    mov eax,[ebp-0Ch]"
"	      004af612    mov eax,[eax+18h]"
"	      004af615    mov ecx,[ebp-0Ch]"
"	      004af618    sub eax,[ecx+10h]"
"	      004af61b    mov [ebp-4],eax"
"	      004af61e    jmp near ptr 004AF623h"
);
// LINE 584:
	asm( 
"	      004af623    mov eax,[ebp-0Ch]"
"	      004af626    cmp dword ptr [eax+78h],0"
"	      004af62a    je near ptr 004AF649h"
);
// LINE 585:
	asm( 
"	      004af630    mov eax,[ebp-0Ch]"
"	      004af633    mov eax,[eax+74h]"
"	      004af636    dec eax"
"	      004af637    imul eax,[ebp-4]"
"	      004af63b    add eax,[ebp-4]"
"	      004af63e    add eax,[ebp-4]"
"	      004af641    mov [ebp-8],eax"
);
// LINE 586:
	asm( 
"	      004af644    jmp near ptr 004AF657h"
);
// LINE 587:
	asm( 
"	      004af649    mov eax,[ebp-0Ch]"
"	      004af64c    mov eax,[eax+74h]"
"	      004af64f    dec eax"
"	      004af650    imul eax,[ebp-4]"
"	      004af654    mov [ebp-8],eax"
);
// LINE 590:
	asm( 
"	      004af657    jmp near ptr 004AF65Ch"
"	      004af65c    mov eax,[ebp-0Ch]"
"	      004af65f    mov eax,[eax+1Ch]"
"	      004af662    mov ecx,[ebp-0Ch]"
"	      004af665    sub eax,[ecx+14h]"
"	      004af668    push eax"
"	      004af669    mov eax,[ebp-8]"
"	      004af66c    add eax,[ebp-4]"
"	      004af66f    push eax"
"	      004af670    push 0"
"	      004af672    mov eax,[ebp-8]"
"	      004af675    push eax"
"	      004af676    mov eax,[ebp-0Ch]"
"	      004af679    mov eax,[eax+24h]"
"	      004af67c    push eax"
"	      004af67d    mov eax,[ebp-0Ch]"
"	      004af680    mov eax,[eax+20h]"
"	      004af683    push eax"
"	      004af684    mov eax,[ebp-0Ch]"
"	      004af687    mov eax,[eax+44h]"
"	      004af68a    push eax"
"	      004af68b    mov eax,[ebp-0Ch]"
"	      004af68e    mov ecx,[ebp-0Ch]"
"	      004af691    mov ecx,[ecx+40h]"
"	      004af694    mov edx,[ecx]"
"	      004af696    mov ecx,[eax+40h]"
"	      004af699    call dword ptr [edx+0Ch]"
);
// LINE 591:
	asm( 
"	      004af69c    mov eax,1"
"	      004af6a1    jmp near ptr 004AF6A6h"
);
// LINE 592:
	asm( 
"	      004af6a6    pop edi"
"	      004af6a7    pop esi"
"	      004af6a8    pop ebx"
"	      004af6a9    leave"
"	      004af6aa    ret"
);
}

// FUNCTION: SIMCOPTER 0x004af6ab
void CheckBoxWindow::SetState(int32_t) {
// LINE 601:
	asm( 
"	      004af6ab    push ebp"
"	      004af6ac    mov ebp,esp"
"	      004af6ae    sub esp,4"
"	      004af6b1    push ebx"
"	      004af6b2    push esi"
"	      004af6b3    push edi"
"	      004af6b4    mov [ebp-4],ecx"
);
// LINE 602:
	asm( 
"	      004af6b7    mov eax,[ebp-4]"
"	      004af6ba    cmp dword ptr [eax+88h],0"
"	      004af6c1    je near ptr 004AF6CCh"
);
// LINE 603:
	asm( 
"	      004af6c7    jmp near ptr 004AF746h"
);
// LINE 604:
	asm( 
"	      004af6cc    mov eax,[ebp-4]"
"	      004af6cf    mov dword ptr [eax+88h],1"
);
// LINE 606:
	asm( 
"	      004af6d9    mov eax,[ebp-4]"
"	      004af6dc    mov ecx,[ebp+8]"
"	      004af6df    cmp [eax+74h],ecx"
"	      004af6e2    je near ptr 004AF734h"
);
// LINE 607:
	asm( 
"	      004af6e8    mov eax,[ebp+8]"
"	      004af6eb    mov ecx,[ebp-4]"
"	      004af6ee    mov [ecx+74h],eax"
);
// LINE 608:
	asm( 
"	      004af6f1    push 1"
"	      004af6f3    push 1"
"	      004af6f5    mov eax,[ebp-4]"
"	      004af6f8    mov eax,[eax]"
"	      004af6fa    mov ecx,[ebp-4]"
"	      004af6fd    call dword ptr [eax+30h]"
);
// LINE 609:
	asm( 
"	      004af700    mov eax,[ebp-4]"
"	      004af703    cmp dword ptr [eax+38h],0"
"	      004af707    je near ptr 004AF734h"
);
// LINE 610:
	asm( 
"	      004af70d    mov eax,[ebp-4]"
"	      004af710    add eax,74h"
"	      004af713    push eax"
"	      004af714    push 10001h"
"	      004af719    mov eax,[ebp-4]"
"	      004af71c    mov eax,[eax+4]"
"	      004af71f    push eax"
"	      004af720    mov eax,[ebp-4]"
"	      004af723    push eax"
"	      004af724    mov eax,[ebp-4]"
"	      004af727    mov ecx,[ebp-4]"
"	      004af72a    mov ecx,[ecx+38h]"
"	      004af72d    mov edx,[ecx]"
"	      004af72f    mov ecx,[eax+38h]"
"	      004af732    call dword ptr [edx]"
);
// LINE 612:
	asm( 
"	      004af734    mov eax,[ebp-4]"
"	      004af737    mov dword ptr [eax+88h],0"
);
// LINE 613:
	asm( 
"	      004af741    jmp near ptr 004AF746h"
"	      004af746    pop edi"
"	      004af747    pop esi"
"	      004af748    pop ebx"
"	      004af749    leave"
"	      004af74a    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004af74d
long CheckBoxWindow::DoCursorDown(long, long, unsigned long) {
// LINE 621:
	asm( 
"	      004af74d    push ebp"
"	      004af74e    mov ebp,esp"
"	      004af750    sub esp,4"
"	      004af753    push ebx"
"	      004af754    push esi"
"	      004af755    push edi"
"	      004af756    mov [ebp-4],ecx"
);
// LINE 622:
	asm( 
"	      004af759    mov eax,[ebp-4]"
"	      004af75c    cmp dword ptr [eax+78h],0"
"	      004af760    jne near ptr 004AF76Dh"
);
// LINE 623:
	asm( 
"	      004af766    xor eax,eax"
"	      004af768    jmp near ptr 004AF7B6h"
);
// LINE 625:
	asm( 
"	      004af76d    mov eax,[ebp-4]"
"	      004af770    cmp dword ptr [eax+74h],1"
"	      004af774    jne near ptr 004AF78Fh"
);
// LINE 626:
	asm( 
"	      004af77a    push 2"
"	      004af77c    mov eax,[ebp-4]"
"	      004af77f    mov eax,[eax]"
"	      004af781    mov ecx,[ebp-4]"
"	      004af784    call dword ptr [eax+0C8h]"
);
// LINE 627:
	asm( 
"	      004af78a    jmp near ptr 004AF7ACh"
"	      004af78f    mov eax,[ebp-4]"
"	      004af792    cmp dword ptr [eax+74h],2"
"	      004af796    jne near ptr 004AF7ACh"
);
// LINE 628:
	asm( 
"	      004af79c    push 1"
"	      004af79e    mov eax,[ebp-4]"
"	      004af7a1    mov eax,[eax]"
"	      004af7a3    mov ecx,[ebp-4]"
"	      004af7a6    call dword ptr [eax+0C8h]"
);
// LINE 630:
	asm( 
"	      004af7ac    mov eax,1"
"	      004af7b1    jmp near ptr 004AF7B6h"
);
// LINE 631:
	asm( 
"	      004af7b6    pop edi"
"	      004af7b7    pop esi"
"	      004af7b8    pop ebx"
"	      004af7b9    leave"
"	      004af7ba    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004af7bd
long CheckBoxWindow::DoCursorUp(long, long, unsigned long) {
// LINE 638:
	asm( 
"	      004af7bd    push ebp"
"	      004af7be    mov ebp,esp"
"	      004af7c0    sub esp,4"
"	      004af7c3    push ebx"
"	      004af7c4    push esi"
"	      004af7c5    push edi"
"	      004af7c6    mov [ebp-4],ecx"
);
// LINE 639:
	asm( 
"	      004af7c9    mov eax,1"
"	      004af7ce    jmp near ptr 004AF7D3h"
);
// LINE 640:
	asm( 
"	      004af7d3    pop edi"
"	      004af7d4    pop esi"
"	      004af7d5    pop ebx"
"	      004af7d6    leave"
"	      004af7d7    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004af7da
long CheckBoxWindow::DoCursorMove(long, long) {
// LINE 647:
	asm( 
"	      004af7da    push ebp"
"	      004af7db    mov ebp,esp"
"	      004af7dd    sub esp,4"
"	      004af7e0    push ebx"
"	      004af7e1    push esi"
"	      004af7e2    push edi"
"	      004af7e3    mov [ebp-4],ecx"
);
// LINE 648:
	asm( 
"	      004af7e6    mov eax,1"
"	      004af7eb    jmp near ptr 004AF7F0h"
);
// LINE 649:
	asm( 
"	      004af7f0    pop edi"
"	      004af7f1    pop esi"
"	      004af7f2    pop ebx"
"	      004af7f3    leave"
"	      004af7f4    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004af7f7
void RadioButtonWindow::RadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t) {
// LINE 676:
	asm( 
"	      004af7f7    push ebp"
"	      004af7f8    mov ebp,esp"
"	      004af7fa    sub esp,68h"
"	      004af7fd    push ebx"
"	      004af7fe    push esi"
"	      004af7ff    push edi"
"	      004af800    mov [ebp-68h],ecx"
"	      004af803    mov eax,[ebp+20h]"
"	      004af806    push eax"
"	      004af807    mov eax,[ebp+1Ch]"
"	      004af80a    push eax"
"	      004af80b    mov eax,[ebp+18h]"
"	      004af80e    push eax"
"	      004af80f    mov eax,[ebp+14h]"
"	      004af812    push eax"
"	      004af813    mov eax,[ebp+10h]"
"	      004af816    push eax"
"	      004af817    mov eax,[ebp+0Ch]"
"	      004af81a    push eax"
"	      004af81b    mov ecx,[ebp-68h]"
"	      004af81e    call 004AE05Dh"
"	      004af823    mov eax,[ebp+8]"
"	      004af826    mov ecx,[ebp-68h]"
"	      004af829    mov [ecx+94h],eax"
"	      004af82f    mov eax,[ebp-68h]"
"	      004af832    mov dword ptr [eax],591D38h"
);
// LINE 677:
	asm( 
"	      004af838    cmp dword ptr [ebp+18h],0"
"	      004af83c    je near ptr 004AFA97h"
);
// LINE 678:
	asm( 
"	      004af842    jmp near ptr 004AF847h"
"	      004af847    mov eax,[ebp+18h]"
"	      004af84a    push eax"
"	      004af84b    call 0056ABE0h"
"	      004af850    add esp,4"
"	      004af853    mov [ebp-30h],eax"
"	      004af856    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004af85a    jne near ptr 004AF892h"
"	      004af860    push 5971E4h"
"	      004af865    mov ecx,638C00h"
"	      004af86a    call 00569960h"
"	      004af86f    mov [ebp-10h],eax"
"	      004af872    mov eax,[ebp-10h]"
"	      004af875    push eax"
"	      004af876    call 004011B0h"
"	      004af87b    add esp,4"
"	      004af87e    jmp near ptr 004AF883h"
"	      004af883    push 1"
"	      004af885    call 00569430h"
"	      004af88a    add esp,4"
"	      004af88d    jmp near ptr 004AF892h"
"	      004af892    jmp near ptr 004AF897h"
"	      004af897    mov eax,[ebp-68h]"
"	      004af89a    mov eax,[eax+60h]"
"	      004af89d    cmp dword ptr [eax+0Ch],1"
"	      004af8a1    ja near ptr 004AF8C8h"
"	      004af8a7    cmp dword ptr [ebp-30h],0"
"	      004af8ab    je near ptr 004AFA49h"
"	      004af8b1    jmp near ptr 004AF8B6h"
"	      004af8b6    mov eax,[ebp-68h]"
"	      004af8b9    mov eax,[eax+60h]"
"	      004af8bc    mov ecx,[ebp-30h]"
"	      004af8bf    cmp [eax+8],ecx"
"	      004af8c2    jae near ptr 004AFA49h"
"	      004af8c8    push 10h"
"	      004af8ca    call 0056A600h"
"	      004af8cf    add esp,4"
"	      004af8d2    mov [ebp-8],eax"
"	      004af8d5    cmp dword ptr [ebp-8],0"
"	      004af8d9    je near ptr 004AF9A3h"
"	      004af8df    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004af8e3    jne near ptr 004AF91Bh"
"	      004af8e9    push 5971E4h"
"	      004af8ee    mov ecx,638C00h"
"	      004af8f3    call 00569960h"
"	      004af8f8    mov [ebp-2Ch],eax"
"	      004af8fb    mov eax,[ebp-2Ch]"
"	      004af8fe    push eax"
"	      004af8ff    call 004011B0h"
"	      004af904    add esp,4"
"	      004af907    jmp near ptr 004AF90Ch"
"	      004af90c    push 1"
"	      004af90e    call 00569430h"
"	      004af913    add esp,4"
"	      004af916    jmp near ptr 004AF91Bh"
"	      004af91b    mov eax,[ebp-30h]"
"	      004af91e    mov ecx,[ebp-8]"
"	      004af921    mov [ecx+4],eax"
"	      004af924    mov eax,[ebp-8]"
"	      004af927    mov eax,[eax+4]"
"	      004af92a    mov ecx,[ebp-8]"
"	      004af92d    mov [ecx+8],eax"
"	      004af930    mov eax,[ebp-8]"
"	      004af933    cmp dword ptr [eax+8],0"
"	      004af937    je near ptr 004AF980h"
"	      004af93d    mov eax,[ebp-8]"
"	      004af940    mov eax,[eax+8]"
"	      004af943    push eax"
"	      004af944    call 0056A600h"
"	      004af949    add esp,4"
"	      004af94c    mov ecx,[ebp-8]"
"	      004af94f    mov [ecx],eax"
"	      004af951    mov eax,[ebp-8]"
"	      004af954    mov eax,[eax+4]"
"	      004af957    mov [ebp-24h],eax"
"	      004af95a    mov eax,[ebp-8]"
"	      004af95d    mov eax,[eax]"
"	      004af95f    mov [ebp-28h],eax"
"	      004af962    mov eax,[ebp-24h]"
"	      004af965    push eax"
"	      004af966    mov eax,[ebp+18h]"
"	      004af969    push eax"
"	      004af96a    mov eax,[ebp-28h]"
"	      004af96d    push eax"
"	      004af96e    call 0056A800h"
"	      004af973    add esp,0Ch"
"	      004af976    jmp near ptr 004AF97Bh"
"	      004af97b    jmp near ptr 004AF989h"
"	      004af980    mov eax,[ebp-8]"
"	      004af983    mov dword ptr [eax],0"
"	      004af989    mov eax,[ebp-8]"
"	      004af98c    mov dword ptr [eax+0Ch],1"
"	      004af993    jmp near ptr 004AF998h"
"	      004af998    mov eax,[ebp-8]"
"	      004af99b    mov [ebp-4],eax"
"	      004af99e    jmp near ptr 004AF9AAh"
"	      004af9a3    mov dword ptr [ebp-4],0"
"	      004af9aa    mov eax,[ebp-68h]"
"	      004af9ad    mov eax,[eax+60h]"
"	      004af9b0    dec dword ptr [eax+0Ch]"
"	      004af9b3    mov eax,[ebp-68h]"
"	      004af9b6    mov eax,[eax+60h]"
"	      004af9b9    cmp dword ptr [eax+0Ch],0"
"	      004af9bd    jne near ptr 004AFA36h"
"	      004af9c3    mov eax,[ebp-68h]"
"	      004af9c6    mov eax,[eax+60h]"
"	      004af9c9    mov [ebp-18h],eax"
"	      004af9cc    mov eax,[ebp-18h]"
"	      004af9cf    mov [ebp-14h],eax"
"	      004af9d2    cmp dword ptr [ebp-14h],0"
"	      004af9d6    je near ptr 004AFA36h"
"	      004af9dc    mov eax,[ebp-14h]"
"	      004af9df    cmp dword ptr [eax+8],0"
"	      004af9e3    je near ptr 004AFA16h"
"	      004af9e9    mov eax,[ebp-14h]"
"	      004af9ec    mov eax,[eax]"
"	      004af9ee    mov [ebp-1Ch],eax"
"	      004af9f1    mov eax,[ebp-1Ch]"
"	      004af9f4    mov [ebp-20h],eax"
"	      004af9f7    mov eax,[ebp-20h]"
"	      004af9fa    push eax"
"	      004af9fb    call 0056A740h"
"	      004afa00    add esp,4"
"	      004afa03    mov eax,[ebp-14h]"
"	      004afa06    mov dword ptr [eax+8],0"
"	      004afa0d    mov eax,[ebp-14h]"
"	      004afa10    mov dword ptr [eax],0"
"	      004afa16    jmp near ptr 004AFA1Bh"
"	      004afa1b    jmp near ptr 004AFA20h"
"	      004afa20    mov eax,[ebp-14h]"
"	      004afa23    push eax"
"	      004afa24    call 0056A740h"
"	      004afa29    add esp,4"
"	      004afa2c    jmp near ptr 004AFA31h"
"	      004afa31    jmp near ptr 004AFA36h"
"	      004afa36    jmp near ptr 004AFA3Bh"
"	      004afa3b    mov eax,[ebp-4]"
"	      004afa3e    mov ecx,[ebp-68h]"
"	      004afa41    mov [ecx+60h],eax"
"	      004afa44    jmp near ptr 004AFA7Ch"
"	      004afa49    cmp dword ptr [ebp-30h],0"
"	      004afa4d    je near ptr 004AFA7Ch"
"	      004afa53    jmp near ptr 004AFA58h"
"	      004afa58    mov eax,[ebp-68h]"
"	      004afa5b    mov eax,[eax+60h]"
"	      004afa5e    mov eax,[eax]"
"	      004afa60    mov [ebp-0Ch],eax"
"	      004afa63    mov eax,[ebp-30h]"
"	      004afa66    push eax"
"	      004afa67    mov eax,[ebp+18h]"
"	      004afa6a    push eax"
"	      004afa6b    mov eax,[ebp-0Ch]"
"	      004afa6e    push eax"
"	      004afa6f    call 0056A800h"
"	      004afa74    add esp,0Ch"
"	      004afa77    jmp near ptr 004AFA7Ch"
"	      004afa7c    mov eax,[ebp-30h]"
"	      004afa7f    mov ecx,[ebp-68h]"
"	      004afa82    mov ecx,[ecx+60h]"
"	      004afa85    mov [ecx+4],eax"
"	      004afa88    jmp near ptr 004AFA8Dh"
"	      004afa8d    jmp near ptr 004AFA92h"
);
// LINE 679:
	asm( 
"	      004afa92    jmp near ptr 004AFCEFh"
);
// LINE 680:
	asm( 
"	      004afa97    mov eax,ds:[59ABA8h]"
"	      004afa9c    mov [ebp-64h],eax"
"	      004afa9f    jmp near ptr 004AFAA4h"
"	      004afaa4    mov eax,[ebp-64h]"
"	      004afaa7    push eax"
"	      004afaa8    call 0056ABE0h"
"	      004afaad    add esp,4"
"	      004afab0    mov [ebp-60h],eax"
"	      004afab3    cmp dword ptr [ebp-60h],0FFFFFFFFh"
"	      004afab7    jne near ptr 004AFAEFh"
"	      004afabd    push 5971E4h"
"	      004afac2    mov ecx,638C00h"
"	      004afac7    call 00569960h"
"	      004afacc    mov [ebp-40h],eax"
"	      004afacf    mov eax,[ebp-40h]"
"	      004afad2    push eax"
"	      004afad3    call 004011B0h"
"	      004afad8    add esp,4"
"	      004afadb    jmp near ptr 004AFAE0h"
"	      004afae0    push 1"
"	      004afae2    call 00569430h"
"	      004afae7    add esp,4"
"	      004afaea    jmp near ptr 004AFAEFh"
"	      004afaef    jmp near ptr 004AFAF4h"
"	      004afaf4    mov eax,[ebp-68h]"
"	      004afaf7    mov eax,[eax+60h]"
"	      004afafa    cmp dword ptr [eax+0Ch],1"
"	      004afafe    ja near ptr 004AFB25h"
"	      004afb04    cmp dword ptr [ebp-60h],0"
"	      004afb08    je near ptr 004AFCA6h"
"	      004afb0e    jmp near ptr 004AFB13h"
"	      004afb13    mov eax,[ebp-68h]"
"	      004afb16    mov eax,[eax+60h]"
"	      004afb19    mov ecx,[ebp-60h]"
"	      004afb1c    cmp [eax+8],ecx"
"	      004afb1f    jae near ptr 004AFCA6h"
"	      004afb25    push 10h"
"	      004afb27    call 0056A600h"
"	      004afb2c    add esp,4"
"	      004afb2f    mov [ebp-38h],eax"
"	      004afb32    cmp dword ptr [ebp-38h],0"
"	      004afb36    je near ptr 004AFC00h"
"	      004afb3c    cmp dword ptr [ebp-60h],0FFFFFFFFh"
"	      004afb40    jne near ptr 004AFB78h"
"	      004afb46    push 5971E4h"
"	      004afb4b    mov ecx,638C00h"
"	      004afb50    call 00569960h"
"	      004afb55    mov [ebp-5Ch],eax"
"	      004afb58    mov eax,[ebp-5Ch]"
"	      004afb5b    push eax"
"	      004afb5c    call 004011B0h"
"	      004afb61    add esp,4"
"	      004afb64    jmp near ptr 004AFB69h"
"	      004afb69    push 1"
"	      004afb6b    call 00569430h"
"	      004afb70    add esp,4"
"	      004afb73    jmp near ptr 004AFB78h"
"	      004afb78    mov eax,[ebp-60h]"
"	      004afb7b    mov ecx,[ebp-38h]"
"	      004afb7e    mov [ecx+4],eax"
"	      004afb81    mov eax,[ebp-38h]"
"	      004afb84    mov eax,[eax+4]"
"	      004afb87    mov ecx,[ebp-38h]"
"	      004afb8a    mov [ecx+8],eax"
"	      004afb8d    mov eax,[ebp-38h]"
"	      004afb90    cmp dword ptr [eax+8],0"
"	      004afb94    je near ptr 004AFBDDh"
"	      004afb9a    mov eax,[ebp-38h]"
"	      004afb9d    mov eax,[eax+8]"
"	      004afba0    push eax"
"	      004afba1    call 0056A600h"
"	      004afba6    add esp,4"
"	      004afba9    mov ecx,[ebp-38h]"
"	      004afbac    mov [ecx],eax"
"	      004afbae    mov eax,[ebp-38h]"
"	      004afbb1    mov eax,[eax+4]"
"	      004afbb4    mov [ebp-54h],eax"
"	      004afbb7    mov eax,[ebp-38h]"
"	      004afbba    mov eax,[eax]"
"	      004afbbc    mov [ebp-58h],eax"
"	      004afbbf    mov eax,[ebp-54h]"
"	      004afbc2    push eax"
"	      004afbc3    mov eax,[ebp-64h]"
"	      004afbc6    push eax"
"	      004afbc7    mov eax,[ebp-58h]"
"	      004afbca    push eax"
"	      004afbcb    call 0056A800h"
"	      004afbd0    add esp,0Ch"
"	      004afbd3    jmp near ptr 004AFBD8h"
"	      004afbd8    jmp near ptr 004AFBE6h"
"	      004afbdd    mov eax,[ebp-38h]"
"	      004afbe0    mov dword ptr [eax],0"
"	      004afbe6    mov eax,[ebp-38h]"
"	      004afbe9    mov dword ptr [eax+0Ch],1"
"	      004afbf0    jmp near ptr 004AFBF5h"
"	      004afbf5    mov eax,[ebp-38h]"
"	      004afbf8    mov [ebp-34h],eax"
"	      004afbfb    jmp near ptr 004AFC07h"
"	      004afc00    mov dword ptr [ebp-34h],0"
"	      004afc07    mov eax,[ebp-68h]"
"	      004afc0a    mov eax,[eax+60h]"
"	      004afc0d    dec dword ptr [eax+0Ch]"
"	      004afc10    mov eax,[ebp-68h]"
"	      004afc13    mov eax,[eax+60h]"
"	      004afc16    cmp dword ptr [eax+0Ch],0"
"	      004afc1a    jne near ptr 004AFC93h"
"	      004afc20    mov eax,[ebp-68h]"
"	      004afc23    mov eax,[eax+60h]"
"	      004afc26    mov [ebp-48h],eax"
"	      004afc29    mov eax,[ebp-48h]"
"	      004afc2c    mov [ebp-44h],eax"
"	      004afc2f    cmp dword ptr [ebp-44h],0"
"	      004afc33    je near ptr 004AFC93h"
"	      004afc39    mov eax,[ebp-44h]"
"	      004afc3c    cmp dword ptr [eax+8],0"
"	      004afc40    je near ptr 004AFC73h"
"	      004afc46    mov eax,[ebp-44h]"
"	      004afc49    mov eax,[eax]"
"	      004afc4b    mov [ebp-4Ch],eax"
"	      004afc4e    mov eax,[ebp-4Ch]"
"	      004afc51    mov [ebp-50h],eax"
"	      004afc54    mov eax,[ebp-50h]"
"	      004afc57    push eax"
"	      004afc58    call 0056A740h"
"	      004afc5d    add esp,4"
"	      004afc60    mov eax,[ebp-44h]"
"	      004afc63    mov dword ptr [eax+8],0"
"	      004afc6a    mov eax,[ebp-44h]"
"	      004afc6d    mov dword ptr [eax],0"
"	      004afc73    jmp near ptr 004AFC78h"
"	      004afc78    jmp near ptr 004AFC7Dh"
"	      004afc7d    mov eax,[ebp-44h]"
"	      004afc80    push eax"
"	      004afc81    call 0056A740h"
"	      004afc86    add esp,4"
"	      004afc89    jmp near ptr 004AFC8Eh"
"	      004afc8e    jmp near ptr 004AFC93h"
"	      004afc93    jmp near ptr 004AFC98h"
"	      004afc98    mov eax,[ebp-34h]"
"	      004afc9b    mov ecx,[ebp-68h]"
"	      004afc9e    mov [ecx+60h],eax"
"	      004afca1    jmp near ptr 004AFCD9h"
"	      004afca6    cmp dword ptr [ebp-60h],0"
"	      004afcaa    je near ptr 004AFCD9h"
"	      004afcb0    jmp near ptr 004AFCB5h"
"	      004afcb5    mov eax,[ebp-68h]"
"	      004afcb8    mov eax,[eax+60h]"
"	      004afcbb    mov eax,[eax]"
"	      004afcbd    mov [ebp-3Ch],eax"
"	      004afcc0    mov eax,[ebp-60h]"
"	      004afcc3    push eax"
"	      004afcc4    mov eax,[ebp-64h]"
"	      004afcc7    push eax"
"	      004afcc8    mov eax,[ebp-3Ch]"
"	      004afccb    push eax"
"	      004afccc    call 0056A800h"
"	      004afcd1    add esp,0Ch"
"	      004afcd4    jmp near ptr 004AFCD9h"
"	      004afcd9    mov eax,[ebp-60h]"
"	      004afcdc    mov ecx,[ebp-68h]"
"	      004afcdf    mov ecx,[ecx+60h]"
"	      004afce2    mov [ecx+4],eax"
"	      004afce5    jmp near ptr 004AFCEAh"
"	      004afcea    jmp near ptr 004AFCEFh"
);
// LINE 681:
	asm( 
"	      004afcef    jmp near ptr 004AFCF4h"
"	      004afcf4    mov eax,[ebp-68h]"
"	      004afcf7    pop edi"
"	      004afcf8    pop esi"
"	      004afcf9    pop ebx"
"	      004afcfa    leave"
"	      004afcfb    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x004afcfe
void RadioButtonWindow::~RadioButtonWindow() {
// LINE 687:
	asm( 
"	      004afcfe    push ebp"
"	      004afcff    mov ebp,esp"
"	      004afd01    sub esp,4"
"	      004afd04    push ebx"
"	      004afd05    push esi"
"	      004afd06    push edi"
"	      004afd07    mov [ebp-4],ecx"
"	      004afd0a    mov eax,[ebp-4]"
"	      004afd0d    mov dword ptr [eax],591D38h"
);
// LINE 703:
	asm( 
"	      004afd13    jmp near ptr 004AFD18h"
"	      004afd18    jmp near ptr 004AFD1Dh"
"	      004afd1d    mov ecx,[ebp-4]"
"	      004afd20    call 004A4045h"
"	      004afd25    pop edi"
"	      004afd26    pop esi"
"	      004afd27    pop ebx"
"	      004afd28    leave"
"	      004afd29    ret"
);
}

// FUNCTION: SIMCOPTER 0x004afd2a
int32_t RadioButtonWindow::Initialize() {
// LINE 710:
	asm( 
"	      004afd2a    push ebp"
"	      004afd2b    mov ebp,esp"
"	      004afd2d    sub esp,4"
"	      004afd30    push ebx"
"	      004afd31    push esi"
"	      004afd32    push edi"
"	      004afd33    mov [ebp-4],ecx"
);
// LINE 711:
	asm( 
"	      004afd36    mov eax,[ebp-4]"
"	      004afd39    cmp dword ptr [eax+94h],0"
"	      004afd40    je near ptr 004AFD58h"
);
// LINE 712:
	asm( 
"	      004afd46    mov eax,[ebp-4]"
"	      004afd49    push eax"
"	      004afd4a    mov eax,[ebp-4]"
"	      004afd4d    mov ecx,[eax+94h]"
"	      004afd53    call 004B05E2h"
);
// LINE 713:
	asm( 
"	      004afd58    mov ecx,[ebp-4]"
"	      004afd5b    call 004AE385h"
"	      004afd60    jmp near ptr 004AFD65h"
);
// LINE 714:
	asm( 
"	      004afd65    pop edi"
"	      004afd66    pop esi"
"	      004afd67    pop ebx"
"	      004afd68    leave"
"	      004afd69    ret"
);
}

// FUNCTION: SIMCOPTER 0x004afd6a
int32_t RadioButtonWindow::ComposeSelf() {
// LINE 720:
	asm( 
"	      004afd6a    push ebp"
"	      004afd6b    mov ebp,esp"
"	      004afd6d    sub esp,0Ch"
"	      004afd70    push ebx"
"	      004afd71    push esi"
"	      004afd72    push edi"
"	      004afd73    mov [ebp-0Ch],ecx"
);
// LINE 725:
	asm( 
"	      004afd76    mov eax,[ebp-0Ch]"
"	      004afd79    cmp dword ptr [eax+54h],0"
"	      004afd7d    jne near ptr 004AFD8Dh"
);
// LINE 726:
	asm( 
"	      004afd83    mov eax,1"
"	      004afd88    jmp near ptr 004AFE4Fh"
);
// LINE 727:
	asm( 
"	      004afd8d    jmp near ptr 004AFD92h"
"	      004afd92    mov eax,[ebp-0Ch]"
"	      004afd95    cmp dword ptr [eax+48h],0"
"	      004afd99    jne near ptr 004AFDA9h"
);
// LINE 728:
	asm( 
"	      004afd9f    mov eax,1"
"	      004afda4    jmp near ptr 004AFE4Fh"
);
// LINE 729:
	asm( 
"	      004afda9    push 1"
"	      004afdab    push 0"
"	      004afdad    mov eax,[ebp-0Ch]"
"	      004afdb0    mov eax,[eax]"
"	      004afdb2    mov ecx,[ebp-0Ch]"
"	      004afdb5    call dword ptr [eax+30h]"
);
// LINE 732:
	asm( 
"	      004afdb8    mov eax,[ebp-0Ch]"
"	      004afdbb    mov eax,[eax+18h]"
"	      004afdbe    mov ecx,[ebp-0Ch]"
"	      004afdc1    sub eax,[ecx+10h]"
"	      004afdc4    mov [ebp-4],eax"
"	      004afdc7    jmp near ptr 004AFDCCh"
);
// LINE 733:
	asm( 
"	      004afdcc    mov eax,[ebp-0Ch]"
"	      004afdcf    cmp dword ptr [eax+78h],0"
"	      004afdd3    je near ptr 004AFDF2h"
);
// LINE 734:
	asm( 
"	      004afdd9    mov eax,[ebp-0Ch]"
"	      004afddc    mov eax,[eax+74h]"
"	      004afddf    dec eax"
"	      004afde0    imul eax,[ebp-4]"
"	      004afde4    add eax,[ebp-4]"
"	      004afde7    add eax,[ebp-4]"
"	      004afdea    mov [ebp-8],eax"
);
// LINE 735:
	asm( 
"	      004afded    jmp near ptr 004AFE00h"
);
// LINE 736:
	asm( 
"	      004afdf2    mov eax,[ebp-0Ch]"
"	      004afdf5    mov eax,[eax+74h]"
"	      004afdf8    dec eax"
"	      004afdf9    imul eax,[ebp-4]"
"	      004afdfd    mov [ebp-8],eax"
);
// LINE 739:
	asm( 
"	      004afe00    jmp near ptr 004AFE05h"
"	      004afe05    mov eax,[ebp-0Ch]"
"	      004afe08    mov eax,[eax+1Ch]"
"	      004afe0b    mov ecx,[ebp-0Ch]"
"	      004afe0e    sub eax,[ecx+14h]"
"	      004afe11    push eax"
"	      004afe12    mov eax,[ebp-8]"
"	      004afe15    add eax,[ebp-4]"
"	      004afe18    push eax"
"	      004afe19    push 0"
"	      004afe1b    mov eax,[ebp-8]"
"	      004afe1e    push eax"
"	      004afe1f    mov eax,[ebp-0Ch]"
"	      004afe22    mov eax,[eax+24h]"
"	      004afe25    push eax"
"	      004afe26    mov eax,[ebp-0Ch]"
"	      004afe29    mov eax,[eax+20h]"
"	      004afe2c    push eax"
"	      004afe2d    mov eax,[ebp-0Ch]"
"	      004afe30    mov eax,[eax+44h]"
"	      004afe33    push eax"
"	      004afe34    mov eax,[ebp-0Ch]"
"	      004afe37    mov ecx,[ebp-0Ch]"
"	      004afe3a    mov ecx,[ecx+40h]"
"	      004afe3d    mov edx,[ecx]"
"	      004afe3f    mov ecx,[eax+40h]"
"	      004afe42    call dword ptr [edx+0Ch]"
);
// LINE 740:
	asm( 
"	      004afe45    mov eax,1"
"	      004afe4a    jmp near ptr 004AFE4Fh"
);
// LINE 741:
	asm( 
"	      004afe4f    pop edi"
"	      004afe50    pop esi"
"	      004afe51    pop ebx"
"	      004afe52    leave"
"	      004afe53    ret"
);
}

// FUNCTION: SIMCOPTER 0x004afe54
int32_t RadioButtonWindow::GetImageCount() {
// LINE 751:
	asm( 
"	      004afe54    push ebp"
"	      004afe55    mov ebp,esp"
"	      004afe57    sub esp,4"
"	      004afe5a    push ebx"
"	      004afe5b    push esi"
"	      004afe5c    push edi"
"	      004afe5d    mov [ebp-4],ecx"
);
// LINE 752:
	asm( 
"	      004afe60    mov eax,4"
"	      004afe65    jmp near ptr 004AFE6Ah"
);
// LINE 753:
	asm( 
"	      004afe6a    pop edi"
"	      004afe6b    pop esi"
"	      004afe6c    pop ebx"
"	      004afe6d    leave"
"	      004afe6e    ret"
);
}

// FUNCTION: SIMCOPTER 0x004afe6f
void RadioButtonWindow::AddToGroup(class ButtonGroup*) {
// LINE 759:
	asm( 
"	      004afe6f    push ebp"
"	      004afe70    mov ebp,esp"
"	      004afe72    sub esp,4"
"	      004afe75    push ebx"
"	      004afe76    push esi"
"	      004afe77    push edi"
"	      004afe78    mov [ebp-4],ecx"
);
// LINE 760:
	asm( 
"	      004afe7b    mov eax,[ebp+8]"
"	      004afe7e    mov ecx,[ebp-4]"
"	      004afe81    mov [ecx+94h],eax"
);
// LINE 761:
	asm( 
"	      004afe87    mov eax,[ebp-4]"
"	      004afe8a    push eax"
"	      004afe8b    mov ecx,[ebp+8]"
"	      004afe8e    call 004B05E2h"
);
// LINE 762:
	asm( 
"	      004afe93    jmp near ptr 004AFE98h"
"	      004afe98    pop edi"
"	      004afe99    pop esi"
"	      004afe9a    pop ebx"
"	      004afe9b    leave"
"	      004afe9c    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004afe9f
int32_t RadioButtonWindow::RemoveFromGroup() {
// LINE 768:
	asm( 
"	      004afe9f    push ebp"
"	      004afea0    mov ebp,esp"
"	      004afea2    sub esp,4"
"	      004afea5    push ebx"
"	      004afea6    push esi"
"	      004afea7    push edi"
"	      004afea8    mov [ebp-4],ecx"
);
// LINE 769:
	asm( 
"	      004afeab    mov eax,[ebp-4]"
"	      004afeae    cmp dword ptr [eax+94h],0"
"	      004afeb5    je near ptr 004AFED7h"
);
// LINE 770:
	asm( 
"	      004afebb    mov eax,[ebp-4]"
"	      004afebe    push eax"
"	      004afebf    mov eax,[ebp-4]"
"	      004afec2    mov ecx,[eax+94h]"
"	      004afec8    call 004B08B4h"
);
// LINE 771:
	asm( 
"	      004afecd    mov eax,1"
"	      004afed2    jmp near ptr 004AFEDEh"
);
// LINE 773:
	asm( 
"	      004afed7    xor eax,eax"
"	      004afed9    jmp near ptr 004AFEDEh"
);
// LINE 774:
	asm( 
"	      004afede    pop edi"
"	      004afedf    pop esi"
"	      004afee0    pop ebx"
"	      004afee1    leave"
"	      004afee2    ret"
);
}

// FUNCTION: SIMCOPTER 0x004afee3
void RadioButtonWindow::SetState(int32_t) {
// LINE 781:
	asm( 
"	      004afee3    push ebp"
"	      004afee4    mov ebp,esp"
"	      004afee6    sub esp,4"
"	      004afee9    push ebx"
"	      004afeea    push esi"
"	      004afeeb    push edi"
"	      004afeec    mov [ebp-4],ecx"
);
// LINE 782:
	asm( 
"	      004afeef    mov eax,[ebp-4]"
"	      004afef2    cmp dword ptr [eax+88h],0"
"	      004afef9    je near ptr 004AFF04h"
);
// LINE 783:
	asm( 
"	      004afeff    jmp near ptr 004AFFCDh"
);
// LINE 784:
	asm( 
"	      004aff04    mov eax,[ebp-4]"
"	      004aff07    mov dword ptr [eax+88h],1"
);
// LINE 786:
	asm( 
"	      004aff11    mov eax,[ebp-4]"
"	      004aff14    mov ecx,[ebp+8]"
"	      004aff17    cmp [eax+74h],ecx"
"	      004aff1a    je near ptr 004AFFBBh"
);
// LINE 787:
	asm( 
"	      004aff20    mov eax,[ebp+8]"
"	      004aff23    mov ecx,[ebp-4]"
"	      004aff26    mov [ecx+74h],eax"
);
// LINE 788:
	asm( 
"	      004aff29    push 1"
"	      004aff2b    push 1"
"	      004aff2d    mov eax,[ebp-4]"
"	      004aff30    mov eax,[eax]"
"	      004aff32    mov ecx,[ebp-4]"
"	      004aff35    call dword ptr [eax+30h]"
);
// LINE 789:
	asm( 
"	      004aff38    mov eax,[ebp-4]"
"	      004aff3b    cmp dword ptr [eax+74h],2"
"	      004aff3f    jne near ptr 004AFFBBh"
);
// LINE 790:
	asm( 
"	      004aff45    mov eax,[ebp-4]"
"	      004aff48    cmp dword ptr [eax+94h],0"
"	      004aff4f    je near ptr 004AFF87h"
);
// LINE 791:
	asm( 
"	      004aff55    mov eax,[ebp-4]"
"	      004aff58    add eax,74h"
"	      004aff5b    push eax"
"	      004aff5c    push 10001h"
"	      004aff61    mov eax,[ebp-4]"
"	      004aff64    mov eax,[eax+4]"
"	      004aff67    push eax"
"	      004aff68    mov eax,[ebp-4]"
"	      004aff6b    push eax"
"	      004aff6c    mov eax,[ebp-4]"
"	      004aff6f    mov ecx,[ebp-4]"
"	      004aff72    mov ecx,[ecx+94h]"
"	      004aff78    mov edx,[ecx]"
"	      004aff7a    mov ecx,[eax+94h]"
"	      004aff80    call dword ptr [edx]"
);
// LINE 792:
	asm( 
"	      004aff82    jmp near ptr 004AFFBBh"
"	      004aff87    mov eax,[ebp-4]"
"	      004aff8a    cmp dword ptr [eax+38h],0"
"	      004aff8e    je near ptr 004AFFBBh"
);
// LINE 793:
	asm( 
"	      004aff94    mov eax,[ebp-4]"
"	      004aff97    add eax,74h"
"	      004aff9a    push eax"
"	      004aff9b    push 10001h"
"	      004affa0    mov eax,[ebp-4]"
"	      004affa3    mov eax,[eax+4]"
"	      004affa6    push eax"
"	      004affa7    mov eax,[ebp-4]"
"	      004affaa    push eax"
"	      004affab    mov eax,[ebp-4]"
"	      004affae    mov ecx,[ebp-4]"
"	      004affb1    mov ecx,[ecx+38h]"
"	      004affb4    mov edx,[ecx]"
"	      004affb6    mov ecx,[eax+38h]"
"	      004affb9    call dword ptr [edx]"
);
// LINE 796:
	asm( 
"	      004affbb    mov eax,[ebp-4]"
"	      004affbe    mov dword ptr [eax+88h],0"
);
// LINE 797:
	asm( 
"	      004affc8    jmp near ptr 004AFFCDh"
"	      004affcd    pop edi"
"	      004affce    pop esi"
"	      004affcf    pop ebx"
"	      004affd0    leave"
"	      004affd1    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004affd4
long RadioButtonWindow::DoCursorDown(long, long, unsigned long) {
// LINE 805:
	asm( 
"	      004affd4    push ebp"
"	      004affd5    mov ebp,esp"
"	      004affd7    sub esp,4"
"	      004affda    push ebx"
"	      004affdb    push esi"
"	      004affdc    push edi"
"	      004affdd    mov [ebp-4],ecx"
);
// LINE 806:
	asm( 
"	      004affe0    mov eax,[ebp-4]"
"	      004affe3    cmp dword ptr [eax+78h],0"
"	      004affe7    jne near ptr 004AFFF4h"
);
// LINE 807:
	asm( 
"	      004affed    xor eax,eax"
"	      004affef    jmp near ptr 004B0042h"
);
// LINE 809:
	asm( 
"	      004afff4    mov eax,[ebp-4]"
"	      004afff7    cmp dword ptr [eax+74h],1"
"	      004afffb    jne near ptr 004B0038h"
);
// LINE 810:
	asm( 
"	      004b0001    mov eax,[ebp-4]"
"	      004b0004    cmp dword ptr [eax+94h],0"
"	      004b000b    je near ptr 004B0028h"
);
// LINE 812:
	asm( 
"	      004b0011    mov eax,[ebp-4]"
"	      004b0014    push eax"
"	      004b0015    mov eax,[ebp-4]"
"	      004b0018    mov ecx,[eax+94h]"
"	      004b001e    call 004B09EDh"
);
// LINE 814:
	asm( 
"	      004b0023    jmp near ptr 004B0038h"
);
// LINE 815:
	asm( 
"	      004b0028    push 2"
"	      004b002a    mov eax,[ebp-4]"
"	      004b002d    mov eax,[eax]"
"	      004b002f    mov ecx,[ebp-4]"
"	      004b0032    call dword ptr [eax+0C8h]"
);
// LINE 824:
	asm( 
"	      004b0038    mov eax,1"
"	      004b003d    jmp near ptr 004B0042h"
);
// LINE 825:
	asm( 
"	      004b0042    pop edi"
"	      004b0043    pop esi"
"	      004b0044    pop ebx"
"	      004b0045    leave"
"	      004b0046    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b0049
long RadioButtonWindow::DoCursorUp(long, long, unsigned long) {
// LINE 830:
	asm( 
"	      004b0049    push ebp"
"	      004b004a    mov ebp,esp"
"	      004b004c    sub esp,4"
"	      004b004f    push ebx"
"	      004b0050    push esi"
"	      004b0051    push edi"
"	      004b0052    mov [ebp-4],ecx"
);
// LINE 831:
	asm( 
"	      004b0055    mov eax,1"
"	      004b005a    jmp near ptr 004B005Fh"
);
// LINE 832:
	asm( 
"	      004b005f    pop edi"
"	      004b0060    pop esi"
"	      004b0061    pop ebx"
"	      004b0062    leave"
"	      004b0063    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b0066
long RadioButtonWindow::DoCursorMove(long, long) {
// LINE 837:
	asm( 
"	      004b0066    push ebp"
"	      004b0067    mov ebp,esp"
"	      004b0069    sub esp,4"
"	      004b006c    push ebx"
"	      004b006d    push esi"
"	      004b006e    push edi"
"	      004b006f    mov [ebp-4],ecx"
);
// LINE 838:
	asm( 
"	      004b0072    mov eax,1"
"	      004b0077    jmp near ptr 004B007Ch"
);
// LINE 839:
	asm( 
"	      004b007c    pop edi"
"	      004b007d    pop esi"
"	      004b007e    pop ebx"
"	      004b007f    leave"
"	      004b0080    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b0083
public: __thiscall ButtonGroup::ButtonGroup(void) {
// LINE 855:
	asm( 
"	      004b0083    push ebp"
"	      004b0084    mov ebp,esp"
"	      004b0086    sub esp,54h"
"	      004b0089    push ebx"
"	      004b008a    push esi"
"	      004b008b    push edi"
"	      004b008c    mov [ebp-54h],ecx"
"	      004b008f    mov ecx,[ebp-54h]"
"	      004b0092    call 004A2A3Fh"
"	      004b0097    mov eax,[ebp-54h]"
"	      004b009a    mov dword ptr [eax+78h],0"
"	      004b00a1    inc dword ptr ds:[59AC30h]"
"	      004b00a7    mov eax,ds:[59AC3Ch]"
"	      004b00ac    mov [ebp-4],eax"
"	      004b00af    cmp dword ptr ds:[59AC3Ch],0"
"	      004b00b6    je near ptr 004B00D3h"
"	      004b00bc    mov eax,ds:[59AC3Ch]"
"	      004b00c1    mov eax,[eax]"
"	      004b00c3    mov ds:[59AC3Ch],eax"
"	      004b00c8    mov eax,[ebp-4]"
"	      004b00cb    mov [ebp-50h],eax"
"	      004b00ce    jmp near ptr 004B02B0h"
"	      004b00d3    mov eax,ds:[59AC38h]"
"	      004b00d8    cmp ds:[59AC34h],eax"
"	      004b00de    jne near ptr 004B029Bh"
"	      004b00e4    push 0"
"	      004b00e6    call 0056A620h"
"	      004b00eb    add esp,4"
"	      004b00ee    push 8"
"	      004b00f0    call 0056A600h"
"	      004b00f5    add esp,4"
"	      004b00f8    mov [ebp-3Ch],eax"
"	      004b00fb    cmp dword ptr [ebp-3Ch],0"
"	      004b00ff    jne near ptr 004B0132h"
"	      004b0105    push 5971ACh"
"	      004b010a    mov ecx,638BA0h"
"	      004b010f    call 00569960h"
"	      004b0114    mov [ebp-40h],eax"
"	      004b0117    mov eax,[ebp-40h]"
"	      004b011a    push eax"
"	      004b011b    call 004011B0h"
"	      004b0120    add esp,4"
"	      004b0123    jmp near ptr 004B0128h"
"	      004b0128    push 1"
"	      004b012a    call 00569430h"
"	      004b012f    add esp,4"
"	      004b0132    jmp near ptr 004B0137h"
"	      004b0137    jmp near ptr 004B013Ch"
"	      004b013c    mov eax,[ebp-3Ch]"
"	      004b013f    mov [ebp-10h],eax"
"	      004b0142    mov dword ptr [ebp-14h],155h"
"	      004b0149    lea eax,[ebp-14h]"
"	      004b014c    mov [ebp-1Ch],eax"
"	      004b014f    mov dword ptr [ebp-18h],1"
"	      004b0156    lea eax,[ebp-18h]"
"	      004b0159    mov [ebp-20h],eax"
"	      004b015c    mov eax,[ebp-20h]"
"	      004b015f    mov ecx,[ebp-1Ch]"
"	      004b0162    mov ecx,[ecx]"
"	      004b0164    cmp [eax],ecx"
"	      004b0166    jb near ptr 004B0177h"
"	      004b016c    mov eax,[ebp-20h]"
"	      004b016f    mov [ebp-24h],eax"
"	      004b0172    jmp near ptr 004B017Dh"
"	      004b0177    mov eax,[ebp-1Ch]"
"	      004b017a    mov [ebp-24h],eax"
"	      004b017d    jmp near ptr 004B0182h"
"	      004b0182    jmp near ptr 004B0187h"
"	      004b0187    jmp near ptr 004B018Ch"
"	      004b018c    mov eax,[ebp-24h]"
"	      004b018f    mov eax,[eax]"
"	      004b0191    mov [ebp-4Ch],eax"
"	      004b0194    push 0"
"	      004b0196    call 0056A620h"
"	      004b019b    add esp,4"
"	      004b019e    mov eax,[ebp-4Ch]"
"	      004b01a1    lea eax,[eax+eax*2]"
"	      004b01a4    shl eax,2"
"	      004b01a7    push eax"
"	      004b01a8    call 0056A600h"
"	      004b01ad    add esp,4"
"	      004b01b0    mov [ebp-44h],eax"
"	      004b01b3    cmp dword ptr [ebp-44h],0"
"	      004b01b7    jne near ptr 004B01EAh"
"	      004b01bd    push 5971ACh"
"	      004b01c2    mov ecx,638BA0h"
"	      004b01c7    call 00569960h"
"	      004b01cc    mov [ebp-48h],eax"
"	      004b01cf    mov eax,[ebp-48h]"
"	      004b01d2    push eax"
"	      004b01d3    call 004011B0h"
"	      004b01d8    add esp,4"
"	      004b01db    jmp near ptr 004B01E0h"
"	      004b01e0    push 1"
"	      004b01e2    call 00569430h"
"	      004b01e7    add esp,4"
"	      004b01ea    jmp near ptr 004B01EFh"
"	      004b01ef    jmp near ptr 004B01F4h"
"	      004b01f4    mov eax,[ebp-44h]"
"	      004b01f7    mov ecx,[ebp-10h]"
"	      004b01fa    mov [ecx+4],eax"
"	      004b01fd    mov eax,ds:[59AC40h]"
"	      004b0202    mov ecx,[ebp-10h]"
"	      004b0205    mov [ecx],eax"
"	      004b0207    mov eax,[ebp-10h]"
"	      004b020a    mov ds:[59AC40h],eax"
"	      004b020f    mov eax,ds:[59AC40h]"
"	      004b0214    mov eax,[eax+4]"
"	      004b0217    mov ds:[59AC38h],eax"
"	      004b021c    mov dword ptr [ebp-28h],155h"
"	      004b0223    lea eax,[ebp-28h]"
"	      004b0226    mov [ebp-30h],eax"
"	      004b0229    mov dword ptr [ebp-2Ch],1"
"	      004b0230    lea eax,[ebp-2Ch]"
"	      004b0233    mov [ebp-34h],eax"
"	      004b0236    mov eax,[ebp-34h]"
"	      004b0239    mov ecx,[ebp-30h]"
"	      004b023c    mov ecx,[ecx]"
"	      004b023e    cmp [eax],ecx"
"	      004b0240    jb near ptr 004B0251h"
"	      004b0246    mov eax,[ebp-34h]"
"	      004b0249    mov [ebp-38h],eax"
"	      004b024c    jmp near ptr 004B0257h"
"	      004b0251    mov eax,[ebp-30h]"
"	      004b0254    mov [ebp-38h],eax"
"	      004b0257    jmp near ptr 004B025Ch"
"	      004b025c    jmp near ptr 004B0261h"
"	      004b0261    jmp near ptr 004B0266h"
"	      004b0266    mov eax,[ebp-38h]"
"	      004b0269    mov eax,[eax]"
"	      004b026b    lea eax,[eax+eax*2]"
"	      004b026e    shl eax,2"
"	      004b0271    add eax,ds:[59AC38h]"
"	      004b0277    mov ds:[59AC34h],eax"
"	      004b027c    jmp near ptr 004B0281h"
"	      004b0281    mov eax,ds:[59AC38h]"
"	      004b0286    mov [ebp-8],eax"
"	      004b0289    add dword ptr ds:[59AC38h],0Ch"
"	      004b0290    mov eax,[ebp-8]"
"	      004b0293    mov [ebp-50h],eax"
"	      004b0296    jmp near ptr 004B02B0h"
"	      004b029b    mov eax,ds:[59AC38h]"
"	      004b02a0    mov [ebp-0Ch],eax"
"	      004b02a3    add dword ptr ds:[59AC38h],0Ch"
"	      004b02aa    mov eax,[ebp-0Ch]"
"	      004b02ad    mov [ebp-50h],eax"
"	      004b02b0    jmp near ptr 004B02B5h"
"	      004b02b5    mov eax,[ebp-50h]"
"	      004b02b8    mov ecx,[ebp-54h]"
"	      004b02bb    mov [ecx+74h],eax"
"	      004b02be    mov eax,[ebp-54h]"
"	      004b02c1    mov eax,[eax+74h]"
"	      004b02c4    mov ecx,[ebp-54h]"
"	      004b02c7    mov ecx,[ecx+74h]"
"	      004b02ca    mov [ecx],eax"
"	      004b02cc    mov eax,[ebp-54h]"
"	      004b02cf    mov eax,[eax+74h]"
"	      004b02d2    mov ecx,[ebp-54h]"
"	      004b02d5    mov ecx,[ecx+74h]"
"	      004b02d8    mov [ecx+4],eax"
"	      004b02db    jmp near ptr 004B02E0h"
"	      004b02e0    mov eax,[ebp-54h]"
"	      004b02e3    mov dword ptr [eax+7Ch],0"
"	      004b02ea    mov eax,[ebp-54h]"
"	      004b02ed    mov dword ptr [eax+80h],0"
"	      004b02f7    mov eax,[ebp-54h]"
"	      004b02fa    mov dword ptr [eax],591E20h"
);
// LINE 857:
	asm( 
"	      004b0300    jmp near ptr 004B0305h"
"	      004b0305    mov eax,[ebp-54h]"
"	      004b0308    pop edi"
"	      004b0309    pop esi"
"	      004b030a    pop ebx"
"	      004b030b    leave"
"	      004b030c    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b030d
public: __thiscall ButtonGroup::ButtonGroup(long, class GraphicWindow *, class GraphicWindow *, int) {
// LINE 868:
	asm( 
"	      004b030d    push ebp"
"	      004b030e    mov ebp,esp"
"	      004b0310    sub esp,64h"
"	      004b0313    push ebx"
"	      004b0314    push esi"
"	      004b0315    push edi"
"	      004b0316    mov [ebp-64h],ecx"
"	      004b0319    jmp near ptr 004B031Eh"
"	      004b031e    mov dword ptr [ebp-10h],0"
"	      004b0325    mov dword ptr [ebp-0Ch],0"
"	      004b032c    mov dword ptr [ebp-8],1"
"	      004b0333    mov dword ptr [ebp-4],1"
"	      004b033a    jmp near ptr 004B033Fh"
"	      004b033f    mov eax,[ebp+14h]"
"	      004b0342    push eax"
"	      004b0343    mov eax,[ebp+10h]"
"	      004b0346    push eax"
"	      004b0347    mov eax,[ebp+0Ch]"
"	      004b034a    push eax"
"	      004b034b    mov eax,[ebp+8]"
"	      004b034e    push eax"
"	      004b034f    lea eax,[ebp-10h]"
"	      004b0352    push eax"
"	      004b0353    mov ecx,[ebp-64h]"
"	      004b0356    call 004A33EEh"
"	      004b035b    mov eax,[ebp-64h]"
"	      004b035e    mov dword ptr [eax+78h],0"
"	      004b0365    inc dword ptr ds:[59AC30h]"
"	      004b036b    mov eax,ds:[59AC3Ch]"
"	      004b0370    mov [ebp-14h],eax"
"	      004b0373    cmp dword ptr ds:[59AC3Ch],0"
"	      004b037a    je near ptr 004B0397h"
"	      004b0380    mov eax,ds:[59AC3Ch]"
"	      004b0385    mov eax,[eax]"
"	      004b0387    mov ds:[59AC3Ch],eax"
"	      004b038c    mov eax,[ebp-14h]"
"	      004b038f    mov [ebp-60h],eax"
"	      004b0392    jmp near ptr 004B0574h"
"	      004b0397    mov eax,ds:[59AC38h]"
"	      004b039c    cmp ds:[59AC34h],eax"
"	      004b03a2    jne near ptr 004B055Fh"
"	      004b03a8    push 0"
"	      004b03aa    call 0056A620h"
"	      004b03af    add esp,4"
"	      004b03b2    push 8"
"	      004b03b4    call 0056A600h"
"	      004b03b9    add esp,4"
"	      004b03bc    mov [ebp-4Ch],eax"
"	      004b03bf    cmp dword ptr [ebp-4Ch],0"
"	      004b03c3    jne near ptr 004B03F6h"
"	      004b03c9    push 5971ACh"
"	      004b03ce    mov ecx,638BA0h"
"	      004b03d3    call 00569960h"
"	      004b03d8    mov [ebp-50h],eax"
"	      004b03db    mov eax,[ebp-50h]"
"	      004b03de    push eax"
"	      004b03df    call 004011B0h"
"	      004b03e4    add esp,4"
"	      004b03e7    jmp near ptr 004B03ECh"
"	      004b03ec    push 1"
"	      004b03ee    call 00569430h"
"	      004b03f3    add esp,4"
"	      004b03f6    jmp near ptr 004B03FBh"
"	      004b03fb    jmp near ptr 004B0400h"
"	      004b0400    mov eax,[ebp-4Ch]"
"	      004b0403    mov [ebp-20h],eax"
"	      004b0406    mov dword ptr [ebp-24h],155h"
"	      004b040d    lea eax,[ebp-24h]"
"	      004b0410    mov [ebp-2Ch],eax"
"	      004b0413    mov dword ptr [ebp-28h],1"
"	      004b041a    lea eax,[ebp-28h]"
"	      004b041d    mov [ebp-30h],eax"
"	      004b0420    mov eax,[ebp-30h]"
"	      004b0423    mov ecx,[ebp-2Ch]"
"	      004b0426    mov ecx,[ecx]"
"	      004b0428    cmp [eax],ecx"
"	      004b042a    jb near ptr 004B043Bh"
"	      004b0430    mov eax,[ebp-30h]"
"	      004b0433    mov [ebp-34h],eax"
"	      004b0436    jmp near ptr 004B0441h"
"	      004b043b    mov eax,[ebp-2Ch]"
"	      004b043e    mov [ebp-34h],eax"
"	      004b0441    jmp near ptr 004B0446h"
"	      004b0446    jmp near ptr 004B044Bh"
"	      004b044b    jmp near ptr 004B0450h"
"	      004b0450    mov eax,[ebp-34h]"
"	      004b0453    mov eax,[eax]"
"	      004b0455    mov [ebp-5Ch],eax"
"	      004b0458    push 0"
"	      004b045a    call 0056A620h"
"	      004b045f    add esp,4"
"	      004b0462    mov eax,[ebp-5Ch]"
"	      004b0465    lea eax,[eax+eax*2]"
"	      004b0468    shl eax,2"
"	      004b046b    push eax"
"	      004b046c    call 0056A600h"
"	      004b0471    add esp,4"
"	      004b0474    mov [ebp-54h],eax"
"	      004b0477    cmp dword ptr [ebp-54h],0"
"	      004b047b    jne near ptr 004B04AEh"
"	      004b0481    push 5971ACh"
"	      004b0486    mov ecx,638BA0h"
"	      004b048b    call 00569960h"
"	      004b0490    mov [ebp-58h],eax"
"	      004b0493    mov eax,[ebp-58h]"
"	      004b0496    push eax"
"	      004b0497    call 004011B0h"
"	      004b049c    add esp,4"
"	      004b049f    jmp near ptr 004B04A4h"
"	      004b04a4    push 1"
"	      004b04a6    call 00569430h"
"	      004b04ab    add esp,4"
"	      004b04ae    jmp near ptr 004B04B3h"
"	      004b04b3    jmp near ptr 004B04B8h"
"	      004b04b8    mov eax,[ebp-54h]"
"	      004b04bb    mov ecx,[ebp-20h]"
"	      004b04be    mov [ecx+4],eax"
"	      004b04c1    mov eax,ds:[59AC40h]"
"	      004b04c6    mov ecx,[ebp-20h]"
"	      004b04c9    mov [ecx],eax"
"	      004b04cb    mov eax,[ebp-20h]"
"	      004b04ce    mov ds:[59AC40h],eax"
"	      004b04d3    mov eax,ds:[59AC40h]"
"	      004b04d8    mov eax,[eax+4]"
"	      004b04db    mov ds:[59AC38h],eax"
"	      004b04e0    mov dword ptr [ebp-38h],155h"
"	      004b04e7    lea eax,[ebp-38h]"
"	      004b04ea    mov [ebp-40h],eax"
"	      004b04ed    mov dword ptr [ebp-3Ch],1"
"	      004b04f4    lea eax,[ebp-3Ch]"
"	      004b04f7    mov [ebp-44h],eax"
"	      004b04fa    mov eax,[ebp-44h]"
"	      004b04fd    mov ecx,[ebp-40h]"
"	      004b0500    mov ecx,[ecx]"
"	      004b0502    cmp [eax],ecx"
"	      004b0504    jb near ptr 004B0515h"
"	      004b050a    mov eax,[ebp-44h]"
"	      004b050d    mov [ebp-48h],eax"
"	      004b0510    jmp near ptr 004B051Bh"
"	      004b0515    mov eax,[ebp-40h]"
"	      004b0518    mov [ebp-48h],eax"
"	      004b051b    jmp near ptr 004B0520h"
"	      004b0520    jmp near ptr 004B0525h"
"	      004b0525    jmp near ptr 004B052Ah"
"	      004b052a    mov eax,[ebp-48h]"
"	      004b052d    mov eax,[eax]"
"	      004b052f    lea eax,[eax+eax*2]"
"	      004b0532    shl eax,2"
"	      004b0535    add eax,ds:[59AC38h]"
"	      004b053b    mov ds:[59AC34h],eax"
"	      004b0540    jmp near ptr 004B0545h"
"	      004b0545    mov eax,ds:[59AC38h]"
"	      004b054a    mov [ebp-18h],eax"
"	      004b054d    add dword ptr ds:[59AC38h],0Ch"
"	      004b0554    mov eax,[ebp-18h]"
"	      004b0557    mov [ebp-60h],eax"
"	      004b055a    jmp near ptr 004B0574h"
"	      004b055f    mov eax,ds:[59AC38h]"
"	      004b0564    mov [ebp-1Ch],eax"
"	      004b0567    add dword ptr ds:[59AC38h],0Ch"
"	      004b056e    mov eax,[ebp-1Ch]"
"	      004b0571    mov [ebp-60h],eax"
"	      004b0574    jmp near ptr 004B0579h"
"	      004b0579    mov eax,[ebp-60h]"
"	      004b057c    mov ecx,[ebp-64h]"
"	      004b057f    mov [ecx+74h],eax"
"	      004b0582    mov eax,[ebp-64h]"
"	      004b0585    mov eax,[eax+74h]"
"	      004b0588    mov ecx,[ebp-64h]"
"	      004b058b    mov ecx,[ecx+74h]"
"	      004b058e    mov [ecx],eax"
"	      004b0590    mov eax,[ebp-64h]"
"	      004b0593    mov eax,[eax+74h]"
"	      004b0596    mov ecx,[ebp-64h]"
"	      004b0599    mov ecx,[ecx+74h]"
"	      004b059c    mov [ecx+4],eax"
"	      004b059f    jmp near ptr 004B05A4h"
"	      004b05a4    mov eax,[ebp-64h]"
"	      004b05a7    mov dword ptr [eax+7Ch],0"
"	      004b05ae    mov eax,[ebp-64h]"
"	      004b05b1    mov dword ptr [eax+80h],0"
"	      004b05bb    mov eax,[ebp-64h]"
"	      004b05be    mov dword ptr [eax],591E20h"
);
// LINE 869:
	asm( 
"	      004b05c4    mov eax,[ebp-64h]"
"	      004b05c7    mov dword ptr [eax+54h],0"
"	      004b05ce    jmp near ptr 004B05D3h"
);
// LINE 870:
	asm( 
"	      004b05d3    jmp near ptr 004B05D8h"
"	      004b05d8    mov eax,[ebp-64h]"
"	      004b05db    pop edi"
"	      004b05dc    pop esi"
"	      004b05dd    pop ebx"
"	      004b05de    leave"
"	      004b05df    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x004b05e2
public: void __thiscall ButtonGroup::AddButton(class RadioButtonWindow *) {
// LINE 878:
	asm( 
"	      004b05e2    push ebp"
"	      004b05e3    mov ebp,esp"
"	      004b05e5    sub esp,6Ch"
"	      004b05e8    push ebx"
"	      004b05e9    push esi"
"	      004b05ea    push edi"
"	      004b05eb    mov [ebp-6Ch],ecx"
);
// LINE 879:
	asm( 
"	      004b05ee    mov eax,[ebp+8]"
"	      004b05f1    push eax"
"	      004b05f2    mov ecx,[ebp-6Ch]"
"	      004b05f5    call 004B1067h"
"	      004b05fa    test eax,eax"
"	      004b05fc    jne near ptr 004B08A8h"
);
// LINE 880:
	asm( 
"	      004b0602    mov eax,[ebp-6Ch]"
"	      004b0605    mov eax,[eax+74h]"
"	      004b0608    mov [ebp-0Ch],eax"
"	      004b060b    mov eax,[ebp-0Ch]"
"	      004b060e    mov [ebp-4],eax"
"	      004b0611    jmp near ptr 004B0616h"
"	      004b0616    jmp near ptr 004B061Bh"
"	      004b061b    mov eax,[ebp-4]"
"	      004b061e    mov [ebp-68h],eax"
"	      004b0621    mov eax,ds:[59AC3Ch]"
"	      004b0626    mov [ebp-18h],eax"
"	      004b0629    cmp dword ptr ds:[59AC3Ch],0"
"	      004b0630    je near ptr 004B064Dh"
"	      004b0636    mov eax,ds:[59AC3Ch]"
"	      004b063b    mov eax,[eax]"
"	      004b063d    mov ds:[59AC3Ch],eax"
"	      004b0642    mov eax,[ebp-18h]"
"	      004b0645    mov [ebp-64h],eax"
"	      004b0648    jmp near ptr 004B082Ah"
"	      004b064d    mov eax,ds:[59AC38h]"
"	      004b0652    cmp ds:[59AC34h],eax"
"	      004b0658    jne near ptr 004B0815h"
"	      004b065e    push 0"
"	      004b0660    call 0056A620h"
"	      004b0665    add esp,4"
"	      004b0668    push 8"
"	      004b066a    call 0056A600h"
"	      004b066f    add esp,4"
"	      004b0672    mov [ebp-50h],eax"
"	      004b0675    cmp dword ptr [ebp-50h],0"
"	      004b0679    jne near ptr 004B06ACh"
"	      004b067f    push 5971ACh"
"	      004b0684    mov ecx,638BA0h"
"	      004b0689    call 00569960h"
"	      004b068e    mov [ebp-54h],eax"
"	      004b0691    mov eax,[ebp-54h]"
"	      004b0694    push eax"
"	      004b0695    call 004011B0h"
"	      004b069a    add esp,4"
"	      004b069d    jmp near ptr 004B06A2h"
"	      004b06a2    push 1"
"	      004b06a4    call 00569430h"
"	      004b06a9    add esp,4"
"	      004b06ac    jmp near ptr 004B06B1h"
"	      004b06b1    jmp near ptr 004B06B6h"
"	      004b06b6    mov eax,[ebp-50h]"
"	      004b06b9    mov [ebp-24h],eax"
"	      004b06bc    mov dword ptr [ebp-28h],155h"
"	      004b06c3    lea eax,[ebp-28h]"
"	      004b06c6    mov [ebp-30h],eax"
"	      004b06c9    mov dword ptr [ebp-2Ch],1"
"	      004b06d0    lea eax,[ebp-2Ch]"
"	      004b06d3    mov [ebp-34h],eax"
"	      004b06d6    mov eax,[ebp-34h]"
"	      004b06d9    mov ecx,[ebp-30h]"
"	      004b06dc    mov ecx,[ecx]"
"	      004b06de    cmp [eax],ecx"
"	      004b06e0    jb near ptr 004B06F1h"
"	      004b06e6    mov eax,[ebp-34h]"
"	      004b06e9    mov [ebp-38h],eax"
"	      004b06ec    jmp near ptr 004B06F7h"
"	      004b06f1    mov eax,[ebp-30h]"
"	      004b06f4    mov [ebp-38h],eax"
"	      004b06f7    jmp near ptr 004B06FCh"
"	      004b06fc    jmp near ptr 004B0701h"
"	      004b0701    jmp near ptr 004B0706h"
"	      004b0706    mov eax,[ebp-38h]"
"	      004b0709    mov eax,[eax]"
"	      004b070b    mov [ebp-60h],eax"
"	      004b070e    push 0"
"	      004b0710    call 0056A620h"
"	      004b0715    add esp,4"
"	      004b0718    mov eax,[ebp-60h]"
"	      004b071b    lea eax,[eax+eax*2]"
"	      004b071e    shl eax,2"
"	      004b0721    push eax"
"	      004b0722    call 0056A600h"
"	      004b0727    add esp,4"
"	      004b072a    mov [ebp-58h],eax"
"	      004b072d    cmp dword ptr [ebp-58h],0"
"	      004b0731    jne near ptr 004B0764h"
"	      004b0737    push 5971ACh"
"	      004b073c    mov ecx,638BA0h"
"	      004b0741    call 00569960h"
"	      004b0746    mov [ebp-5Ch],eax"
"	      004b0749    mov eax,[ebp-5Ch]"
"	      004b074c    push eax"
"	      004b074d    call 004011B0h"
"	      004b0752    add esp,4"
"	      004b0755    jmp near ptr 004B075Ah"
"	      004b075a    push 1"
"	      004b075c    call 00569430h"
"	      004b0761    add esp,4"
"	      004b0764    jmp near ptr 004B0769h"
"	      004b0769    jmp near ptr 004B076Eh"
"	      004b076e    mov eax,[ebp-58h]"
"	      004b0771    mov ecx,[ebp-24h]"
"	      004b0774    mov [ecx+4],eax"
"	      004b0777    mov eax,ds:[59AC40h]"
"	      004b077c    mov ecx,[ebp-24h]"
"	      004b077f    mov [ecx],eax"
"	      004b0781    mov eax,[ebp-24h]"
"	      004b0784    mov ds:[59AC40h],eax"
"	      004b0789    mov eax,ds:[59AC40h]"
"	      004b078e    mov eax,[eax+4]"
"	      004b0791    mov ds:[59AC38h],eax"
"	      004b0796    mov dword ptr [ebp-3Ch],155h"
"	      004b079d    lea eax,[ebp-3Ch]"
"	      004b07a0    mov [ebp-44h],eax"
"	      004b07a3    mov dword ptr [ebp-40h],1"
"	      004b07aa    lea eax,[ebp-40h]"
"	      004b07ad    mov [ebp-48h],eax"
"	      004b07b0    mov eax,[ebp-48h]"
"	      004b07b3    mov ecx,[ebp-44h]"
"	      004b07b6    mov ecx,[ecx]"
"	      004b07b8    cmp [eax],ecx"
"	      004b07ba    jb near ptr 004B07CBh"
"	      004b07c0    mov eax,[ebp-48h]"
"	      004b07c3    mov [ebp-4Ch],eax"
"	      004b07c6    jmp near ptr 004B07D1h"
"	      004b07cb    mov eax,[ebp-44h]"
"	      004b07ce    mov [ebp-4Ch],eax"
"	      004b07d1    jmp near ptr 004B07D6h"
"	      004b07d6    jmp near ptr 004B07DBh"
"	      004b07db    jmp near ptr 004B07E0h"
"	      004b07e0    mov eax,[ebp-4Ch]"
"	      004b07e3    mov eax,[eax]"
"	      004b07e5    lea eax,[eax+eax*2]"
"	      004b07e8    shl eax,2"
"	      004b07eb    add eax,ds:[59AC38h]"
"	      004b07f1    mov ds:[59AC34h],eax"
"	      004b07f6    jmp near ptr 004B07FBh"
"	      004b07fb    mov eax,ds:[59AC38h]"
"	      004b0800    mov [ebp-1Ch],eax"
"	      004b0803    add dword ptr ds:[59AC38h],0Ch"
"	      004b080a    mov eax,[ebp-1Ch]"
"	      004b080d    mov [ebp-64h],eax"
"	      004b0810    jmp near ptr 004B082Ah"
"	      004b0815    mov eax,ds:[59AC38h]"
"	      004b081a    mov [ebp-20h],eax"
"	      004b081d    add dword ptr ds:[59AC38h],0Ch"
"	      004b0824    mov eax,[ebp-20h]"
"	      004b0827    mov [ebp-64h],eax"
"	      004b082a    jmp near ptr 004B082Fh"
"	      004b082f    mov eax,[ebp-64h]"
"	      004b0832    mov [ebp-10h],eax"
"	      004b0835    jmp near ptr 004B083Ah"
"	      004b083a    mov eax,[ebp-10h]"
"	      004b083d    add eax,8"
"	      004b0840    mov [ebp-14h],eax"
"	      004b0843    jmp near ptr 004B0848h"
"	      004b0848    cmp dword ptr [ebp-14h],0"
"	      004b084c    je near ptr 004B085Fh"
"	      004b0852    mov eax,[ebp+8]"
"	      004b0855    mov ecx,[ebp-14h]"
"	      004b0858    mov [ecx],eax"
"	      004b085a    jmp near ptr 004B085Fh"
"	      004b085f    jmp near ptr 004B0864h"
"	      004b0864    mov eax,[ebp-68h]"
"	      004b0867    mov ecx,[ebp-10h]"
"	      004b086a    mov [ecx],eax"
"	      004b086c    mov eax,[ebp-68h]"
"	      004b086f    mov eax,[eax+4]"
"	      004b0872    mov ecx,[ebp-10h]"
"	      004b0875    mov [ecx+4],eax"
"	      004b0878    mov eax,[ebp-10h]"
"	      004b087b    mov ecx,[ebp-68h]"
"	      004b087e    mov ecx,[ecx+4]"
"	      004b0881    mov [ecx],eax"
"	      004b0883    mov eax,[ebp-10h]"
"	      004b0886    mov ecx,[ebp-68h]"
"	      004b0889    mov [ecx+4],eax"
"	      004b088c    mov eax,[ebp-6Ch]"
"	      004b088f    add dword ptr [eax+78h],1"
"	      004b0893    mov eax,[ebp-10h]"
"	      004b0896    mov [ebp-8],eax"
"	      004b0899    jmp near ptr 004B089Eh"
"	      004b089e    jmp near ptr 004B08A3h"
"	      004b08a3    jmp near ptr 004B08A8h"
);
// LINE 881:
	asm( 
"	      004b08a8    jmp near ptr 004B08ADh"
"	      004b08ad    pop edi"
"	      004b08ae    pop esi"
"	      004b08af    pop ebx"
"	      004b08b0    leave"
"	      004b08b1    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b08b4
public: void __thiscall ButtonGroup::RemoveButton(class RadioButtonWindow *) {
// LINE 892:
	asm( 
"	      004b08b4    push ebp"
"	      004b08b5    mov ebp,esp"
"	      004b08b7    sub esp,28h"
"	      004b08ba    push ebx"
"	      004b08bb    push esi"
"	      004b08bc    push edi"
"	      004b08bd    mov [ebp-28h],ecx"
);
// LINE 893:
	asm( 
"	      004b08c0    mov eax,[ebp-28h]"
"	      004b08c3    mov eax,[eax+74h]"
"	      004b08c6    mov eax,[eax]"
"	      004b08c8    mov [ebp-1Ch],eax"
"	      004b08cb    mov eax,[ebp-1Ch]"
"	      004b08ce    mov [ebp-4],eax"
"	      004b08d1    jmp near ptr 004B08D6h"
"	      004b08d6    jmp near ptr 004B08DBh"
);
// LINE 895:
	asm( 
"	      004b08db    mov eax,[ebp-28h]"
"	      004b08de    cmp dword ptr [eax+7Ch],0"
"	      004b08e2    je near ptr 004B08EDh"
);
// LINE 896:
	asm( 
"	      004b08e8    jmp near ptr 004B09E6h"
);
// LINE 897:
	asm( 
"	      004b08ed    mov eax,[ebp-28h]"
"	      004b08f0    mov dword ptr [eax+7Ch],1"
);
// LINE 899:
	asm( 
"	      004b08f7    mov eax,[ebp-28h]"
"	      004b08fa    mov eax,[eax+74h]"
"	      004b08fd    mov [ebp-10h],eax"
"	      004b0900    mov eax,[ebp-10h]"
"	      004b0903    mov [ebp-8],eax"
"	      004b0906    jmp near ptr 004B090Bh"
"	      004b090b    jmp near ptr 004B0910h"
"	      004b0910    mov eax,[ebp-8]"
"	      004b0913    cmp [ebp-4],eax"
"	      004b0916    jne near ptr 004B0926h"
"	      004b091c    jmp near ptr 004B093Ah"
"	      004b0921    jmp near ptr 004B0926h"
"	      004b0926    jmp near ptr 004B0935h"
"	      004b092b    cmp dword ptr [ebp-14h],0"
"	      004b092f    jne near ptr 004B093Ah"
"	      004b0935    jmp near ptr 004B093Fh"
"	      004b093a    jmp near ptr 004B09D7h"
"	      004b093f    jmp near ptr 004B094Eh"
"	      004b0944    cmp dword ptr [ebp-18h],0"
"	      004b0948    je near ptr 004B09D7h"
);
// LINE 900:
	asm( 
"	      004b094e    jmp near ptr 004B0953h"
"	      004b0953    mov eax,[ebp-4]"
"	      004b0956    mov ecx,[ebp+8]"
"	      004b0959    cmp [eax+8],ecx"
"	      004b095c    jne near ptr 004B09B4h"
"	      004b0962    mov eax,[ebp-4]"
"	      004b0965    mov [ebp-24h],eax"
);
// LINE 901:
	asm( 
"	      004b0968    mov eax,[ebp-24h]"
"	      004b096b    mov eax,[eax]"
"	      004b096d    mov ecx,[ebp-24h]"
"	      004b0970    mov ecx,[ecx+4]"
"	      004b0973    mov [ecx],eax"
"	      004b0975    mov eax,[ebp-24h]"
"	      004b0978    mov eax,[eax+4]"
"	      004b097b    mov ecx,[ebp-24h]"
"	      004b097e    mov ecx,[ecx]"
"	      004b0980    mov [ecx+4],eax"
"	      004b0983    jmp near ptr 004B0988h"
"	      004b0988    jmp near ptr 004B098Dh"
"	      004b098d    mov eax,ds:[59AC3Ch]"
"	      004b0992    mov ecx,[ebp-24h]"
"	      004b0995    mov [ecx],eax"
"	      004b0997    mov eax,[ebp-24h]"
"	      004b099a    mov ds:[59AC3Ch],eax"
"	      004b099f    jmp near ptr 004B09A4h"
"	      004b09a4    mov eax,[ebp-28h]"
"	      004b09a7    dec dword ptr [eax+78h]"
"	      004b09aa    jmp near ptr 004B09AFh"
);
// LINE 902:
	asm( 
"	      004b09af    jmp near ptr 004B09E6h"
);
// LINE 904:
	asm( 
"	      004b09b4    mov eax,[ebp-4]"
"	      004b09b7    mov [ebp-20h],eax"
"	      004b09ba    mov eax,[ebp-4]"
"	      004b09bd    mov eax,[eax]"
"	      004b09bf    mov [ebp-4],eax"
"	      004b09c2    jmp near ptr 004B09C7h"
"	      004b09c7    mov eax,[ebp-20h]"
"	      004b09ca    mov [ebp-0Ch],eax"
"	      004b09cd    jmp near ptr 004B09D2h"
);
// LINE 905:
	asm( 
"	      004b09d2    jmp near ptr 004B08F7h"
);
// LINE 906:
	asm( 
"	      004b09d7    mov eax,[ebp-28h]"
"	      004b09da    mov dword ptr [eax+7Ch],0"
);
// LINE 907:
	asm( 
"	      004b09e1    jmp near ptr 004B09E6h"
"	      004b09e6    pop edi"
"	      004b09e7    pop esi"
"	      004b09e8    pop ebx"
"	      004b09e9    leave"
"	      004b09ea    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b09ed
public: void __thiscall ButtonGroup::SetSelection(class RadioButtonWindow *) {
// LINE 919:
	asm( 
"	      004b09ed    push ebp"
"	      004b09ee    mov ebp,esp"
"	      004b09f0    sub esp,34h"
"	      004b09f3    push ebx"
"	      004b09f4    push esi"
"	      004b09f5    push edi"
"	      004b09f6    mov [ebp-34h],ecx"
);
// LINE 920:
	asm( 
"	      004b09f9    mov eax,[ebp-34h]"
"	      004b09fc    mov eax,[eax+74h]"
"	      004b09ff    mov eax,[eax]"
"	      004b0a01    mov [ebp-2Ch],eax"
"	      004b0a04    mov eax,[ebp-2Ch]"
"	      004b0a07    mov [ebp-4],eax"
"	      004b0a0a    jmp near ptr 004B0A0Fh"
"	      004b0a0f    jmp near ptr 004B0A14h"
);
// LINE 922:
	asm( 
"	      004b0a14    mov eax,[ebp-34h]"
"	      004b0a17    cmp dword ptr [eax+80h],0"
"	      004b0a1e    je near ptr 004B0A29h"
);
// LINE 923:
	asm( 
"	      004b0a24    jmp near ptr 004B0B54h"
);
// LINE 924:
	asm( 
"	      004b0a29    mov eax,[ebp-34h]"
"	      004b0a2c    mov dword ptr [eax+80h],1"
);
// LINE 926:
	asm( 
"	      004b0a36    mov eax,[ebp-34h]"
"	      004b0a39    mov eax,[eax+74h]"
"	      004b0a3c    mov [ebp-20h],eax"
"	      004b0a3f    mov eax,[ebp-20h]"
"	      004b0a42    mov [ebp-8],eax"
"	      004b0a45    jmp near ptr 004B0A4Ah"
"	      004b0a4a    jmp near ptr 004B0A4Fh"
"	      004b0a4f    mov eax,[ebp-8]"
"	      004b0a52    cmp [ebp-4],eax"
"	      004b0a55    jne near ptr 004B0A65h"
"	      004b0a5b    jmp near ptr 004B0A79h"
"	      004b0a60    jmp near ptr 004B0A65h"
"	      004b0a65    jmp near ptr 004B0A74h"
"	      004b0a6a    cmp dword ptr [ebp-24h],0"
"	      004b0a6e    jne near ptr 004B0A79h"
"	      004b0a74    jmp near ptr 004B0A7Eh"
"	      004b0a79    jmp near ptr 004B0B11h"
"	      004b0a7e    jmp near ptr 004B0A8Dh"
"	      004b0a83    cmp dword ptr [ebp-28h],0"
"	      004b0a87    je near ptr 004B0B11h"
);
// LINE 927:
	asm( 
"	      004b0a8d    jmp near ptr 004B0A92h"
"	      004b0a92    mov eax,[ebp-4]"
"	      004b0a95    mov ecx,[ebp+8]"
"	      004b0a98    cmp [eax+8],ecx"
"	      004b0a9b    jne near ptr 004B0ACAh"
);
// LINE 928:
	asm( 
"	      004b0aa1    jmp near ptr 004B0AA6h"
"	      004b0aa6    mov eax,[ebp-4]"
"	      004b0aa9    mov eax,[eax+8]"
"	      004b0aac    mov [ebp-10h],eax"
"	      004b0aaf    mov eax,[ebp-10h]"
"	      004b0ab2    mov eax,[eax]"
"	      004b0ab4    mov [ebp-14h],eax"
"	      004b0ab7    push 2"
"	      004b0ab9    mov eax,[ebp-14h]"
"	      004b0abc    mov ecx,[ebp-10h]"
"	      004b0abf    call dword ptr [eax+0C8h]"
);
// LINE 929:
	asm( 
"	      004b0ac5    jmp near ptr 004B0AEEh"
);
// LINE 930:
	asm( 
"	      004b0aca    jmp near ptr 004B0ACFh"
"	      004b0acf    mov eax,[ebp-4]"
"	      004b0ad2    mov eax,[eax+8]"
"	      004b0ad5    mov [ebp-18h],eax"
"	      004b0ad8    mov eax,[ebp-18h]"
"	      004b0adb    mov eax,[eax]"
"	      004b0add    mov [ebp-1Ch],eax"
"	      004b0ae0    push 1"
"	      004b0ae2    mov eax,[ebp-1Ch]"
"	      004b0ae5    mov ecx,[ebp-18h]"
"	      004b0ae8    call dword ptr [eax+0C8h]"
);
// LINE 931:
	asm( 
"	      004b0aee    mov eax,[ebp-4]"
"	      004b0af1    mov [ebp-30h],eax"
"	      004b0af4    mov eax,[ebp-4]"
"	      004b0af7    mov eax,[eax]"
"	      004b0af9    mov [ebp-4],eax"
"	      004b0afc    jmp near ptr 004B0B01h"
"	      004b0b01    mov eax,[ebp-30h]"
"	      004b0b04    mov [ebp-0Ch],eax"
"	      004b0b07    jmp near ptr 004B0B0Ch"
);
// LINE 932:
	asm( 
"	      004b0b0c    jmp near ptr 004B0A36h"
);
// LINE 933:
	asm( 
"	      004b0b11    mov eax,[ebp-34h]"
"	      004b0b14    cmp dword ptr [eax+38h],0"
"	      004b0b18    je near ptr 004B0B42h"
);
// LINE 934:
	asm( 
"	      004b0b1e    mov eax,[ebp+8]"
"	      004b0b21    push eax"
"	      004b0b22    push 10001h"
"	      004b0b27    mov eax,[ebp-34h]"
"	      004b0b2a    mov eax,[eax+4]"
"	      004b0b2d    push eax"
"	      004b0b2e    mov eax,[ebp-34h]"
"	      004b0b31    push eax"
"	      004b0b32    mov eax,[ebp-34h]"
"	      004b0b35    mov ecx,[ebp-34h]"
"	      004b0b38    mov ecx,[ecx+38h]"
"	      004b0b3b    mov edx,[ecx]"
"	      004b0b3d    mov ecx,[eax+38h]"
"	      004b0b40    call dword ptr [edx]"
);
// LINE 936:
	asm( 
"	      004b0b42    mov eax,[ebp-34h]"
"	      004b0b45    mov dword ptr [eax+80h],0"
);
// LINE 937:
	asm( 
"	      004b0b4f    jmp near ptr 004B0B54h"
"	      004b0b54    pop edi"
"	      004b0b55    pop esi"
"	      004b0b56    pop ebx"
"	      004b0b57    leave"
"	      004b0b58    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b0b5b
public: void __thiscall ButtonGroup::SetSelection(long) {
// LINE 949:
	asm( 
"	      004b0b5b    push ebp"
"	      004b0b5c    mov ebp,esp"
"	      004b0b5e    sub esp,34h"
"	      004b0b61    push ebx"
"	      004b0b62    push esi"
"	      004b0b63    push edi"
"	      004b0b64    mov [ebp-34h],ecx"
);
// LINE 950:
	asm( 
"	      004b0b67    mov eax,[ebp-34h]"
"	      004b0b6a    mov eax,[eax+74h]"
"	      004b0b6d    mov eax,[eax]"
"	      004b0b6f    mov [ebp-2Ch],eax"
"	      004b0b72    mov eax,[ebp-2Ch]"
"	      004b0b75    mov [ebp-4],eax"
"	      004b0b78    jmp near ptr 004B0B7Dh"
"	      004b0b7d    jmp near ptr 004B0B82h"
);
// LINE 952:
	asm( 
"	      004b0b82    mov eax,[ebp-34h]"
"	      004b0b85    cmp dword ptr [eax+80h],0"
"	      004b0b8c    je near ptr 004B0B97h"
);
// LINE 953:
	asm( 
"	      004b0b92    jmp near ptr 004B0CCDh"
);
// LINE 954:
	asm( 
"	      004b0b97    mov eax,[ebp-34h]"
"	      004b0b9a    mov dword ptr [eax+80h],1"
);
// LINE 956:
	asm( 
"	      004b0ba4    mov eax,[ebp-34h]"
"	      004b0ba7    mov eax,[eax+74h]"
"	      004b0baa    mov [ebp-20h],eax"
"	      004b0bad    mov eax,[ebp-20h]"
"	      004b0bb0    mov [ebp-8],eax"
"	      004b0bb3    jmp near ptr 004B0BB8h"
"	      004b0bb8    jmp near ptr 004B0BBDh"
"	      004b0bbd    mov eax,[ebp-4]"
"	      004b0bc0    cmp [ebp-8],eax"
"	      004b0bc3    jne near ptr 004B0BD3h"
"	      004b0bc9    jmp near ptr 004B0BE7h"
"	      004b0bce    jmp near ptr 004B0BD3h"
"	      004b0bd3    jmp near ptr 004B0BE2h"
"	      004b0bd8    cmp dword ptr [ebp-24h],0"
"	      004b0bdc    jne near ptr 004B0BE7h"
"	      004b0be2    jmp near ptr 004B0BECh"
"	      004b0be7    jmp near ptr 004B0C82h"
"	      004b0bec    jmp near ptr 004B0BFBh"
"	      004b0bf1    cmp dword ptr [ebp-28h],0"
"	      004b0bf5    je near ptr 004B0C82h"
);
// LINE 957:
	asm( 
"	      004b0bfb    jmp near ptr 004B0C00h"
"	      004b0c00    mov eax,[ebp-4]"
"	      004b0c03    mov eax,[eax+8]"
"	      004b0c06    mov ecx,[ebp+8]"
"	      004b0c09    cmp [eax+4],ecx"
"	      004b0c0c    jne near ptr 004B0C3Bh"
);
// LINE 958:
	asm( 
"	      004b0c12    jmp near ptr 004B0C17h"
"	      004b0c17    mov eax,[ebp-4]"
"	      004b0c1a    mov eax,[eax+8]"
"	      004b0c1d    mov [ebp-10h],eax"
"	      004b0c20    mov eax,[ebp-10h]"
"	      004b0c23    mov eax,[eax]"
"	      004b0c25    mov [ebp-14h],eax"
"	      004b0c28    push 2"
"	      004b0c2a    mov eax,[ebp-14h]"
"	      004b0c2d    mov ecx,[ebp-10h]"
"	      004b0c30    call dword ptr [eax+0C8h]"
);
// LINE 959:
	asm( 
"	      004b0c36    jmp near ptr 004B0C5Fh"
);
// LINE 960:
	asm( 
"	      004b0c3b    jmp near ptr 004B0C40h"
"	      004b0c40    mov eax,[ebp-4]"
"	      004b0c43    mov eax,[eax+8]"
"	      004b0c46    mov [ebp-18h],eax"
"	      004b0c49    mov eax,[ebp-18h]"
"	      004b0c4c    mov eax,[eax]"
"	      004b0c4e    mov [ebp-1Ch],eax"
"	      004b0c51    push 1"
"	      004b0c53    mov eax,[ebp-1Ch]"
"	      004b0c56    mov ecx,[ebp-18h]"
"	      004b0c59    call dword ptr [eax+0C8h]"
);
// LINE 961:
	asm( 
"	      004b0c5f    mov eax,[ebp-4]"
"	      004b0c62    mov [ebp-30h],eax"
"	      004b0c65    mov eax,[ebp-4]"
"	      004b0c68    mov eax,[eax]"
"	      004b0c6a    mov [ebp-4],eax"
"	      004b0c6d    jmp near ptr 004B0C72h"
"	      004b0c72    mov eax,[ebp-30h]"
"	      004b0c75    mov [ebp-0Ch],eax"
"	      004b0c78    jmp near ptr 004B0C7Dh"
);
// LINE 962:
	asm( 
"	      004b0c7d    jmp near ptr 004B0BA4h"
);
// LINE 964:
	asm( 
"	      004b0c82    mov eax,[ebp-34h]"
"	      004b0c85    cmp dword ptr [eax+38h],0"
"	      004b0c89    je near ptr 004B0CBBh"
);
// LINE 965:
	asm( 
"	      004b0c8f    jmp near ptr 004B0C94h"
"	      004b0c94    mov eax,[ebp-4]"
"	      004b0c97    mov eax,[eax+8]"
"	      004b0c9a    push eax"
"	      004b0c9b    push 10001h"
"	      004b0ca0    mov eax,[ebp-34h]"
"	      004b0ca3    mov eax,[eax+4]"
"	      004b0ca6    push eax"
"	      004b0ca7    mov eax,[ebp-34h]"
"	      004b0caa    push eax"
"	      004b0cab    mov eax,[ebp-34h]"
"	      004b0cae    mov ecx,[ebp-34h]"
"	      004b0cb1    mov ecx,[ecx+38h]"
"	      004b0cb4    mov edx,[ecx]"
"	      004b0cb6    mov ecx,[eax+38h]"
"	      004b0cb9    call dword ptr [edx]"
);
// LINE 967:
	asm( 
"	      004b0cbb    mov eax,[ebp-34h]"
"	      004b0cbe    mov dword ptr [eax+80h],0"
);
// LINE 968:
	asm( 
"	      004b0cc8    jmp near ptr 004B0CCDh"
"	      004b0ccd    pop edi"
"	      004b0cce    pop esi"
"	      004b0ccf    pop ebx"
"	      004b0cd0    leave"
"	      004b0cd1    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b0cd4
public: void __thiscall ButtonGroup::SetSelectionIndex(int) {
// LINE 980:
	asm( 
"	      004b0cd4    push ebp"
"	      004b0cd5    mov ebp,esp"
"	      004b0cd7    sub esp,38h"
"	      004b0cda    push ebx"
"	      004b0cdb    push esi"
"	      004b0cdc    push edi"
"	      004b0cdd    mov [ebp-38h],ecx"
);
// LINE 981:
	asm( 
"	      004b0ce0    mov eax,[ebp-38h]"
"	      004b0ce3    mov eax,[eax+74h]"
"	      004b0ce6    mov eax,[eax]"
"	      004b0ce8    mov [ebp-30h],eax"
"	      004b0ceb    mov eax,[ebp-30h]"
"	      004b0cee    mov [ebp-8],eax"
"	      004b0cf1    jmp near ptr 004B0CF6h"
"	      004b0cf6    jmp near ptr 004B0CFBh"
);
// LINE 982:
	asm( 
"	      004b0cfb    mov dword ptr [ebp-4],0"
);
// LINE 984:
	asm( 
"	      004b0d02    mov eax,[ebp-38h]"
"	      004b0d05    cmp dword ptr [eax+80h],0"
"	      004b0d0c    je near ptr 004B0D17h"
);
// LINE 985:
	asm( 
"	      004b0d12    jmp near ptr 004B0E46h"
);
// LINE 986:
	asm( 
"	      004b0d17    mov eax,[ebp-38h]"
"	      004b0d1a    mov dword ptr [eax+80h],1"
);
// LINE 988:
	asm( 
"	      004b0d24    mov eax,[ebp-38h]"
"	      004b0d27    mov eax,[eax+74h]"
"	      004b0d2a    mov [ebp-24h],eax"
"	      004b0d2d    mov eax,[ebp-24h]"
"	      004b0d30    mov [ebp-0Ch],eax"
"	      004b0d33    jmp near ptr 004B0D38h"
"	      004b0d38    jmp near ptr 004B0D3Dh"
"	      004b0d3d    mov eax,[ebp-0Ch]"
"	      004b0d40    cmp [ebp-8],eax"
"	      004b0d43    jne near ptr 004B0D53h"
"	      004b0d49    jmp near ptr 004B0D67h"
"	      004b0d4e    jmp near ptr 004B0D53h"
"	      004b0d53    jmp near ptr 004B0D62h"
"	      004b0d58    cmp dword ptr [ebp-28h],0"
"	      004b0d5c    jne near ptr 004B0D67h"
"	      004b0d62    jmp near ptr 004B0D6Ch"
"	      004b0d67    jmp near ptr 004B0DFBh"
"	      004b0d6c    jmp near ptr 004B0D7Bh"
"	      004b0d71    cmp dword ptr [ebp-2Ch],0"
"	      004b0d75    je near ptr 004B0DFBh"
);
// LINE 989:
	asm( 
"	      004b0d7b    mov eax,[ebp+8]"
"	      004b0d7e    cmp [ebp-4],eax"
"	      004b0d81    jne near ptr 004B0DB0h"
);
// LINE 990:
	asm( 
"	      004b0d87    jmp near ptr 004B0D8Ch"
"	      004b0d8c    mov eax,[ebp-8]"
"	      004b0d8f    mov eax,[eax+8]"
"	      004b0d92    mov [ebp-14h],eax"
"	      004b0d95    mov eax,[ebp-14h]"
"	      004b0d98    mov eax,[eax]"
"	      004b0d9a    mov [ebp-18h],eax"
"	      004b0d9d    push 2"
"	      004b0d9f    mov eax,[ebp-18h]"
"	      004b0da2    mov ecx,[ebp-14h]"
"	      004b0da5    call dword ptr [eax+0C8h]"
);
// LINE 991:
	asm( 
"	      004b0dab    jmp near ptr 004B0DD4h"
);
// LINE 992:
	asm( 
"	      004b0db0    jmp near ptr 004B0DB5h"
"	      004b0db5    mov eax,[ebp-8]"
"	      004b0db8    mov eax,[eax+8]"
"	      004b0dbb    mov [ebp-1Ch],eax"
"	      004b0dbe    mov eax,[ebp-1Ch]"
"	      004b0dc1    mov eax,[eax]"
"	      004b0dc3    mov [ebp-20h],eax"
"	      004b0dc6    push 1"
"	      004b0dc8    mov eax,[ebp-20h]"
"	      004b0dcb    mov ecx,[ebp-1Ch]"
"	      004b0dce    call dword ptr [eax+0C8h]"
);
// LINE 993:
	asm( 
"	      004b0dd4    add dword ptr [ebp-4],1"
);
// LINE 994:
	asm( 
"	      004b0dd8    mov eax,[ebp-8]"
"	      004b0ddb    mov [ebp-34h],eax"
"	      004b0dde    mov eax,[ebp-8]"
"	      004b0de1    mov eax,[eax]"
"	      004b0de3    mov [ebp-8],eax"
"	      004b0de6    jmp near ptr 004B0DEBh"
"	      004b0deb    mov eax,[ebp-34h]"
"	      004b0dee    mov [ebp-10h],eax"
"	      004b0df1    jmp near ptr 004B0DF6h"
);
// LINE 995:
	asm( 
"	      004b0df6    jmp near ptr 004B0D24h"
);
// LINE 997:
	asm( 
"	      004b0dfb    mov eax,[ebp-38h]"
"	      004b0dfe    cmp dword ptr [eax+38h],0"
"	      004b0e02    je near ptr 004B0E34h"
);
// LINE 998:
	asm( 
"	      004b0e08    jmp near ptr 004B0E0Dh"
"	      004b0e0d    mov eax,[ebp-8]"
"	      004b0e10    mov eax,[eax+8]"
"	      004b0e13    push eax"
"	      004b0e14    push 10001h"
"	      004b0e19    mov eax,[ebp-38h]"
"	      004b0e1c    mov eax,[eax+4]"
"	      004b0e1f    push eax"
"	      004b0e20    mov eax,[ebp-38h]"
"	      004b0e23    push eax"
"	      004b0e24    mov eax,[ebp-38h]"
"	      004b0e27    mov ecx,[ebp-38h]"
"	      004b0e2a    mov ecx,[ecx+38h]"
"	      004b0e2d    mov edx,[ecx]"
"	      004b0e2f    mov ecx,[eax+38h]"
"	      004b0e32    call dword ptr [edx]"
);
// LINE 1000:
	asm( 
"	      004b0e34    mov eax,[ebp-38h]"
"	      004b0e37    mov dword ptr [eax+80h],0"
);
// LINE 1001:
	asm( 
"	      004b0e41    jmp near ptr 004B0E46h"
"	      004b0e46    pop edi"
"	      004b0e47    pop esi"
"	      004b0e48    pop ebx"
"	      004b0e49    leave"
"	      004b0e4a    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b0e4d
public: int __thiscall ButtonGroup::GetSelection(class RadioButtonWindow *&) {
// LINE 1011:
	asm( 
"	      004b0e4d    push ebp"
"	      004b0e4e    mov ebp,esp"
"	      004b0e50    sub esp,2Ch"
"	      004b0e53    push ebx"
"	      004b0e54    push esi"
"	      004b0e55    push edi"
"	      004b0e56    mov [ebp-2Ch],ecx"
);
// LINE 1012:
	asm( 
"	      004b0e59    mov eax,[ebp-2Ch]"
"	      004b0e5c    mov eax,[eax+74h]"
"	      004b0e5f    mov eax,[eax]"
"	      004b0e61    mov [ebp-24h],eax"
"	      004b0e64    mov eax,[ebp-24h]"
"	      004b0e67    mov [ebp-4],eax"
"	      004b0e6a    jmp near ptr 004B0E6Fh"
"	      004b0e6f    jmp near ptr 004B0E74h"
);
// LINE 1014:
	asm( 
"	      004b0e74    mov eax,[ebp-2Ch]"
"	      004b0e77    mov eax,[eax+74h]"
"	      004b0e7a    mov [ebp-18h],eax"
"	      004b0e7d    mov eax,[ebp-18h]"
"	      004b0e80    mov [ebp-8],eax"
"	      004b0e83    jmp near ptr 004B0E88h"
"	      004b0e88    jmp near ptr 004B0E8Dh"
"	      004b0e8d    mov eax,[ebp-8]"
"	      004b0e90    cmp [ebp-4],eax"
"	      004b0e93    jne near ptr 004B0EA3h"
"	      004b0e99    jmp near ptr 004B0EB7h"
"	      004b0e9e    jmp near ptr 004B0EA3h"
"	      004b0ea3    jmp near ptr 004B0EB2h"
"	      004b0ea8    cmp dword ptr [ebp-1Ch],0"
"	      004b0eac    jne near ptr 004B0EB7h"
"	      004b0eb2    jmp near ptr 004B0EBCh"
"	      004b0eb7    jmp near ptr 004B0F33h"
"	      004b0ebc    jmp near ptr 004B0ECBh"
"	      004b0ec1    cmp dword ptr [ebp-20h],0"
"	      004b0ec5    je near ptr 004B0F33h"
);
// LINE 1015:
	asm( 
"	      004b0ecb    jmp near ptr 004B0ED0h"
"	      004b0ed0    mov eax,[ebp-4]"
"	      004b0ed3    mov eax,[eax+8]"
"	      004b0ed6    mov [ebp-10h],eax"
"	      004b0ed9    mov eax,[ebp-10h]"
"	      004b0edc    mov eax,[eax]"
"	      004b0ede    mov [ebp-14h],eax"
"	      004b0ee1    mov eax,[ebp-14h]"
"	      004b0ee4    mov ecx,[ebp-10h]"
"	      004b0ee7    call dword ptr [eax+0CCh]"
"	      004b0eed    cmp eax,2"
"	      004b0ef0    jne near ptr 004B0F10h"
);
// LINE 1016:
	asm( 
"	      004b0ef6    jmp near ptr 004B0EFBh"
"	      004b0efb    mov eax,[ebp-4]"
"	      004b0efe    mov eax,[eax+8]"
"	      004b0f01    mov ecx,[ebp+8]"
"	      004b0f04    mov [ecx],eax"
);
// LINE 1017:
	asm( 
"	      004b0f06    mov eax,1"
"	      004b0f0b    jmp near ptr 004B0F3Ah"
);
// LINE 1019:
	asm( 
"	      004b0f10    mov eax,[ebp-4]"
"	      004b0f13    mov [ebp-28h],eax"
"	      004b0f16    mov eax,[ebp-4]"
"	      004b0f19    mov eax,[eax]"
"	      004b0f1b    mov [ebp-4],eax"
"	      004b0f1e    jmp near ptr 004B0F23h"
"	      004b0f23    mov eax,[ebp-28h]"
"	      004b0f26    mov [ebp-0Ch],eax"
"	      004b0f29    jmp near ptr 004B0F2Eh"
);
// LINE 1020:
	asm( 
"	      004b0f2e    jmp near ptr 004B0E74h"
);
// LINE 1021:
	asm( 
"	      004b0f33    xor eax,eax"
"	      004b0f35    jmp near ptr 004B0F3Ah"
);
// LINE 1022:
	asm( 
"	      004b0f3a    pop edi"
"	      004b0f3b    pop esi"
"	      004b0f3c    pop ebx"
"	      004b0f3d    leave"
"	      004b0f3e    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b0f41
public: int __thiscall ButtonGroup::GetSelection(long &) {
// LINE 1032:
	asm( 
"	      004b0f41    push ebp"
"	      004b0f42    mov ebp,esp"
"	      004b0f44    sub esp,8"
"	      004b0f47    push ebx"
"	      004b0f48    push esi"
"	      004b0f49    push edi"
"	      004b0f4a    mov [ebp-8],ecx"
);
// LINE 1035:
	asm( 
"	      004b0f4d    lea eax,[ebp-4]"
"	      004b0f50    push eax"
"	      004b0f51    mov ecx,[ebp-8]"
"	      004b0f54    call 004B0E4Dh"
"	      004b0f59    test eax,eax"
"	      004b0f5b    je near ptr 004B0F6Bh"
);
// LINE 1037:
	asm( 
"	      004b0f61    mov eax,1"
"	      004b0f66    jmp near ptr 004B0F72h"
);
// LINE 1039:
	asm( 
"	      004b0f6b    xor eax,eax"
"	      004b0f6d    jmp near ptr 004B0F72h"
);
// LINE 1040:
	asm( 
"	      004b0f72    pop edi"
"	      004b0f73    pop esi"
"	      004b0f74    pop ebx"
"	      004b0f75    leave"
"	      004b0f76    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b0f79
public: int __thiscall ButtonGroup::GetSelectionIndex(void) {
// LINE 1049:
	asm( 
"	      004b0f79    push ebp"
"	      004b0f7a    mov ebp,esp"
"	      004b0f7c    sub esp,30h"
"	      004b0f7f    push ebx"
"	      004b0f80    push esi"
"	      004b0f81    push edi"
"	      004b0f82    mov [ebp-30h],ecx"
);
// LINE 1050:
	asm( 
"	      004b0f85    mov eax,[ebp-30h]"
"	      004b0f88    mov eax,[eax+74h]"
"	      004b0f8b    mov eax,[eax]"
"	      004b0f8d    mov [ebp-28h],eax"
"	      004b0f90    mov eax,[ebp-28h]"
"	      004b0f93    mov [ebp-8],eax"
"	      004b0f96    jmp near ptr 004B0F9Bh"
"	      004b0f9b    jmp near ptr 004B0FA0h"
);
// LINE 1051:
	asm( 
"	      004b0fa0    mov dword ptr [ebp-4],0"
);
// LINE 1053:
	asm( 
"	      004b0fa7    mov eax,[ebp-30h]"
"	      004b0faa    mov eax,[eax+74h]"
"	      004b0fad    mov [ebp-1Ch],eax"
"	      004b0fb0    mov eax,[ebp-1Ch]"
"	      004b0fb3    mov [ebp-0Ch],eax"
"	      004b0fb6    jmp near ptr 004B0FBBh"
"	      004b0fbb    jmp near ptr 004B0FC0h"
"	      004b0fc0    mov eax,[ebp-0Ch]"
"	      004b0fc3    cmp [ebp-8],eax"
"	      004b0fc6    jne near ptr 004B0FD6h"
"	      004b0fcc    jmp near ptr 004B0FEAh"
"	      004b0fd1    jmp near ptr 004B0FD6h"
"	      004b0fd6    jmp near ptr 004B0FE5h"
"	      004b0fdb    cmp dword ptr [ebp-20h],0"
"	      004b0fdf    jne near ptr 004B0FEAh"
"	      004b0fe5    jmp near ptr 004B0FEFh"
"	      004b0fea    jmp near ptr 004B1058h"
"	      004b0fef    jmp near ptr 004B0FFEh"
"	      004b0ff4    cmp dword ptr [ebp-24h],0"
"	      004b0ff8    je near ptr 004B1058h"
);
// LINE 1054:
	asm( 
"	      004b0ffe    jmp near ptr 004B1003h"
"	      004b1003    mov eax,[ebp-8]"
"	      004b1006    mov eax,[eax+8]"
"	      004b1009    mov [ebp-14h],eax"
"	      004b100c    mov eax,[ebp-14h]"
"	      004b100f    mov eax,[eax]"
"	      004b1011    mov [ebp-18h],eax"
"	      004b1014    mov eax,[ebp-18h]"
"	      004b1017    mov ecx,[ebp-14h]"
"	      004b101a    call dword ptr [eax+0CCh]"
"	      004b1020    cmp eax,2"
"	      004b1023    jne near ptr 004B1031h"
);
// LINE 1055:
	asm( 
"	      004b1029    mov eax,[ebp-4]"
"	      004b102c    jmp near ptr 004B1062h"
);
// LINE 1056:
	asm( 
"	      004b1031    add dword ptr [ebp-4],1"
);
// LINE 1057:
	asm( 
"	      004b1035    mov eax,[ebp-8]"
"	      004b1038    mov [ebp-2Ch],eax"
"	      004b103b    mov eax,[ebp-8]"
"	      004b103e    mov eax,[eax]"
"	      004b1040    mov [ebp-8],eax"
"	      004b1043    jmp near ptr 004B1048h"
"	      004b1048    mov eax,[ebp-2Ch]"
"	      004b104b    mov [ebp-10h],eax"
"	      004b104e    jmp near ptr 004B1053h"
);
// LINE 1058:
	asm( 
"	      004b1053    jmp near ptr 004B0FA7h"
);
// LINE 1059:
	asm( 
"	      004b1058    mov eax,0FFFFFFFFh"
"	      004b105d    jmp near ptr 004B1062h"
);
// LINE 1060:
	asm( 
"	      004b1062    pop edi"
"	      004b1063    pop esi"
"	      004b1064    pop ebx"
"	      004b1065    leave"
"	      004b1066    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b1067
protected: int __thiscall ButtonGroup::IsButtonInGroup(class RadioButtonWindow *) {
// LINE 1068:
	asm( 
"	      004b1067    push ebp"
"	      004b1068    mov ebp,esp"
"	      004b106a    sub esp,24h"
"	      004b106d    push ebx"
"	      004b106e    push esi"
"	      004b106f    push edi"
"	      004b1070    mov [ebp-24h],ecx"
);
// LINE 1069:
	asm( 
"	      004b1073    mov eax,[ebp-24h]"
"	      004b1076    mov eax,[eax+74h]"
"	      004b1079    mov eax,[eax]"
"	      004b107b    mov [ebp-1Ch],eax"
"	      004b107e    mov eax,[ebp-1Ch]"
"	      004b1081    mov [ebp-4],eax"
"	      004b1084    jmp near ptr 004B1089h"
"	      004b1089    jmp near ptr 004B108Eh"
);
// LINE 1071:
	asm( 
"	      004b108e    mov eax,[ebp-24h]"
"	      004b1091    mov eax,[eax+74h]"
"	      004b1094    mov [ebp-10h],eax"
"	      004b1097    mov eax,[ebp-10h]"
"	      004b109a    mov [ebp-8],eax"
"	      004b109d    jmp near ptr 004B10A2h"
"	      004b10a2    jmp near ptr 004B10A7h"
"	      004b10a7    mov eax,[ebp-8]"
"	      004b10aa    cmp [ebp-4],eax"
"	      004b10ad    jne near ptr 004B10BDh"
"	      004b10b3    jmp near ptr 004B10D1h"
"	      004b10b8    jmp near ptr 004B10BDh"
"	      004b10bd    jmp near ptr 004B10CCh"
"	      004b10c2    cmp dword ptr [ebp-14h],0"
"	      004b10c6    jne near ptr 004B10D1h"
"	      004b10cc    jmp near ptr 004B10D6h"
"	      004b10d1    jmp near ptr 004B1126h"
"	      004b10d6    jmp near ptr 004B10E5h"
"	      004b10db    cmp dword ptr [ebp-18h],0"
"	      004b10df    je near ptr 004B1126h"
);
// LINE 1072:
	asm( 
"	      004b10e5    jmp near ptr 004B10EAh"
"	      004b10ea    mov eax,[ebp-4]"
"	      004b10ed    mov ecx,[ebp+8]"
"	      004b10f0    cmp [eax+8],ecx"
"	      004b10f3    jne near ptr 004B1103h"
);
// LINE 1073:
	asm( 
"	      004b10f9    mov eax,1"
"	      004b10fe    jmp near ptr 004B112Dh"
);
// LINE 1074:
	asm( 
"	      004b1103    mov eax,[ebp-4]"
"	      004b1106    mov [ebp-20h],eax"
"	      004b1109    mov eax,[ebp-4]"
"	      004b110c    mov eax,[eax]"
"	      004b110e    mov [ebp-4],eax"
"	      004b1111    jmp near ptr 004B1116h"
"	      004b1116    mov eax,[ebp-20h]"
"	      004b1119    mov [ebp-0Ch],eax"
"	      004b111c    jmp near ptr 004B1121h"
);
// LINE 1075:
	asm( 
"	      004b1121    jmp near ptr 004B108Eh"
);
// LINE 1076:
	asm( 
"	      004b1126    xor eax,eax"
"	      004b1128    jmp near ptr 004B112Dh"
);
// LINE 1077:
	asm( 
"	      004b112d    pop edi"
"	      004b112e    pop esi"
"	      004b112f    pop ebx"
"	      004b1130    leave"
"	      004b1131    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b1134
void SliderWindow::SliderWindow() {
// LINE 1109:
	asm( 
"	      004b1134    push ebp"
"	      004b1135    mov ebp,esp"
"	      004b1137    sub esp,8"
"	      004b113a    push ebx"
"	      004b113b    push esi"
"	      004b113c    push edi"
"	      004b113d    mov [ebp-8],ecx"
"	      004b1140    mov ecx,[ebp-8]"
"	      004b1143    call 004A2A3Fh"
"	      004b1148    mov eax,[ebp-8]"
"	      004b114b    mov dword ptr [eax+74h],0"
"	      004b1152    mov eax,[ebp-8]"
"	      004b1155    mov dword ptr [eax+78h],0"
"	      004b115c    mov eax,[ebp-8]"
"	      004b115f    mov dword ptr [eax+7Ch],8"
"	      004b1166    mov eax,[ebp-8]"
"	      004b1169    mov dword ptr [eax+80h],0"
"	      004b1173    mov eax,[ebp-8]"
"	      004b1176    mov dword ptr [eax+84h],0"
"	      004b1180    mov eax,[ebp-8]"
"	      004b1183    mov dword ptr [eax+88h],0"
"	      004b118d    mov eax,[ebp-8]"
"	      004b1190    mov dword ptr [eax+8Ch],0"
"	      004b119a    mov eax,[ebp-8]"
"	      004b119d    mov dword ptr [eax+90h],8"
"	      004b11a7    jmp near ptr 004B11ACh"
"	      004b11ac    jmp near ptr 004B11B1h"
"	      004b11b1    mov eax,[ebp-8]"
"	      004b11b4    mov dword ptr [eax+0A4h],0"
"	      004b11be    push 10h"
"	      004b11c0    call 0056A600h"
"	      004b11c5    add esp,4"
"	      004b11c8    mov [ebp-4],eax"
"	      004b11cb    cmp dword ptr [ebp-4],0"
"	      004b11cf    je near ptr 004B1214h"
"	      004b11d5    mov eax,[ebp-4]"
"	      004b11d8    mov dword ptr [eax+4],0"
"	      004b11df    mov eax,[ebp-4]"
"	      004b11e2    mov eax,[eax+4]"
"	      004b11e5    mov ecx,[ebp-4]"
"	      004b11e8    mov [ecx+8],eax"
"	      004b11eb    mov eax,[ebp-4]"
"	      004b11ee    mov dword ptr [eax],0"
"	      004b11f4    mov eax,[ebp-4]"
"	      004b11f7    mov dword ptr [eax+0Ch],1"
"	      004b11fe    jmp near ptr 004B1203h"
"	      004b1203    mov eax,[ebp-4]"
"	      004b1206    mov ecx,[ebp-8]"
"	      004b1209    mov [ecx+0ACh],eax"
"	      004b120f    jmp near ptr 004B1221h"
"	      004b1214    mov eax,[ebp-8]"
"	      004b1217    mov dword ptr [eax+0ACh],0"
"	      004b1221    mov eax,[ebp-8]"
"	      004b1224    mov dword ptr [eax+0A8h],0"
"	      004b122e    jmp near ptr 004B1233h"
"	      004b1233    mov eax,[ebp-8]"
"	      004b1236    mov dword ptr [eax+0B0h],0"
"	      004b1240    mov eax,[ebp-8]"
"	      004b1243    mov dword ptr [eax],591EE8h"
);
// LINE 1110:
	asm( 
"	      004b1249    jmp near ptr 004B124Eh"
"	      004b124e    mov eax,[ebp-8]"
"	      004b1251    pop edi"
"	      004b1252    pop esi"
"	      004b1253    pop ebx"
"	      004b1254    leave"
"	      004b1255    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b1256
void SliderWindow::SliderWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *, char *, long) {
// LINE 1133:
	asm( 
"	      004b1256    push ebp"
"	      004b1257    mov ebp,esp"
"	      004b1259    sub esp,7Ch"
"	      004b125c    push ebx"
"	      004b125d    push esi"
"	      004b125e    push edi"
"	      004b125f    mov [ebp-7Ch],ecx"
"	      004b1262    mov eax,[ebp+1Ch]"
"	      004b1265    push eax"
"	      004b1266    mov eax,[ebp+18h]"
"	      004b1269    push eax"
"	      004b126a    mov eax,[ebp+14h]"
"	      004b126d    push eax"
"	      004b126e    mov eax,[ebp+0Ch]"
"	      004b1271    push eax"
"	      004b1272    mov eax,[ebp+8]"
"	      004b1275    push eax"
"	      004b1276    mov ecx,[ebp-7Ch]"
"	      004b1279    call 004A33EEh"
"	      004b127e    mov eax,[ebp+10h]"
"	      004b1281    mov ecx,[ebp-7Ch]"
"	      004b1284    mov [ecx+74h],eax"
"	      004b1287    mov eax,[ebp-7Ch]"
"	      004b128a    mov dword ptr [eax+78h],0"
"	      004b1291    mov eax,[ebp-7Ch]"
"	      004b1294    mov dword ptr [eax+7Ch],8"
"	      004b129b    mov eax,[ebp-7Ch]"
"	      004b129e    mov dword ptr [eax+80h],0"
"	      004b12a8    mov eax,[ebp-7Ch]"
"	      004b12ab    mov dword ptr [eax+84h],0"
"	      004b12b5    mov eax,[ebp-7Ch]"
"	      004b12b8    mov dword ptr [eax+88h],0"
"	      004b12c2    mov eax,[ebp-7Ch]"
"	      004b12c5    mov dword ptr [eax+8Ch],0"
"	      004b12cf    mov eax,[ebp+28h]"
"	      004b12d2    mov ecx,[ebp-7Ch]"
"	      004b12d5    mov [ecx+90h],eax"
"	      004b12db    jmp near ptr 004B12E0h"
"	      004b12e0    jmp near ptr 004B12E5h"
"	      004b12e5    mov eax,[ebp-7Ch]"
"	      004b12e8    mov dword ptr [eax+0A4h],0"
"	      004b12f2    push 10h"
"	      004b12f4    call 0056A600h"
"	      004b12f9    add esp,4"
"	      004b12fc    mov [ebp-78h],eax"
"	      004b12ff    cmp dword ptr [ebp-78h],0"
"	      004b1303    je near ptr 004B1348h"
"	      004b1309    mov eax,[ebp-78h]"
"	      004b130c    mov dword ptr [eax+4],0"
"	      004b1313    mov eax,[ebp-78h]"
"	      004b1316    mov eax,[eax+4]"
"	      004b1319    mov ecx,[ebp-78h]"
"	      004b131c    mov [ecx+8],eax"
"	      004b131f    mov eax,[ebp-78h]"
"	      004b1322    mov dword ptr [eax],0"
"	      004b1328    mov eax,[ebp-78h]"
"	      004b132b    mov dword ptr [eax+0Ch],1"
"	      004b1332    jmp near ptr 004B1337h"
"	      004b1337    mov eax,[ebp-78h]"
"	      004b133a    mov ecx,[ebp-7Ch]"
"	      004b133d    mov [ecx+0ACh],eax"
"	      004b1343    jmp near ptr 004B1355h"
"	      004b1348    mov eax,[ebp-7Ch]"
"	      004b134b    mov dword ptr [eax+0ACh],0"
"	      004b1355    mov eax,[ebp-7Ch]"
"	      004b1358    mov dword ptr [eax+0A8h],0"
"	      004b1362    jmp near ptr 004B1367h"
"	      004b1367    mov eax,[ebp-7Ch]"
"	      004b136a    mov dword ptr [eax+0B0h],0"
"	      004b1374    mov eax,[ebp-7Ch]"
"	      004b1377    mov dword ptr [eax],591EE8h"
);
// LINE 1134:
	asm( 
"	      004b137d    cmp dword ptr [ebp+20h],0"
"	      004b1381    je near ptr 004B13B2h"
);
// LINE 1135:
	asm( 
"	      004b1387    jmp near ptr 004B138Ch"
"	      004b138c    mov eax,[ebp+20h]"
"	      004b138f    push eax"
"	      004b1390    call 0056ABE0h"
"	      004b1395    add esp,4"
"	      004b1398    push eax"
"	      004b1399    mov eax,[ebp+20h]"
"	      004b139c    push eax"
"	      004b139d    mov ecx,[ebp-7Ch]"
"	      004b13a0    add ecx,5Ch"
"	      004b13a3    call 0040FEE0h"
"	      004b13a8    jmp near ptr 004B13ADh"
);
// LINE 1137:
	asm( 
"	      004b13ad    jmp near ptr 004B1610h"
);
// LINE 1138:
	asm( 
"	      004b13b2    mov eax,[ebp-7Ch]"
"	      004b13b5    cmp dword ptr [eax+74h],0"
"	      004b13b9    jne near ptr 004B14EAh"
);
// LINE 1139:
	asm( 
"	      004b13bf    mov eax,ds:[59ABB0h]"
"	      004b13c4    mov [ebp-18h],eax"
"	      004b13c7    jmp near ptr 004B13CCh"
"	      004b13cc    mov eax,[ebp-18h]"
"	      004b13cf    push eax"
"	      004b13d0    call 0056ABE0h"
"	      004b13d5    add esp,4"
"	      004b13d8    mov [ebp-14h],eax"
"	      004b13db    cmp dword ptr [ebp-14h],0FFFFFFFFh"
"	      004b13df    jne near ptr 004B1417h"
"	      004b13e5    push 5971E4h"
"	      004b13ea    mov ecx,638C00h"
"	      004b13ef    call 00569960h"
"	      004b13f4    mov [ebp-10h],eax"
"	      004b13f7    mov eax,[ebp-10h]"
"	      004b13fa    push eax"
"	      004b13fb    call 004011B0h"
"	      004b1400    add esp,4"
"	      004b1403    jmp near ptr 004B1408h"
"	      004b1408    push 1"
"	      004b140a    call 00569430h"
"	      004b140f    add esp,4"
"	      004b1412    jmp near ptr 004B1417h"
"	      004b1417    jmp near ptr 004B141Ch"
"	      004b141c    mov eax,[ebp-7Ch]"
"	      004b141f    mov eax,[eax+60h]"
"	      004b1422    cmp dword ptr [eax+0Ch],1"
"	      004b1426    ja near ptr 004B144Dh"
"	      004b142c    cmp dword ptr [ebp-14h],0"
"	      004b1430    je near ptr 004B149Ch"
"	      004b1436    jmp near ptr 004B143Bh"
"	      004b143b    mov eax,[ebp-7Ch]"
"	      004b143e    mov eax,[eax+60h]"
"	      004b1441    mov ecx,[ebp-14h]"
"	      004b1444    cmp [eax+8],ecx"
"	      004b1447    jae near ptr 004B149Ch"
"	      004b144d    push 10h"
"	      004b144f    call 0056A600h"
"	      004b1454    add esp,4"
"	      004b1457    mov [ebp-8],eax"
"	      004b145a    cmp dword ptr [ebp-8],0"
"	      004b145e    je near ptr 004B147Ch"
"	      004b1464    mov eax,[ebp-14h]"
"	      004b1467    push eax"
"	      004b1468    mov eax,[ebp-18h]"
"	      004b146b    push eax"
"	      004b146c    mov ecx,[ebp-8]"
"	      004b146f    call 0041E090h"
"	      004b1474    mov [ebp-4],eax"
"	      004b1477    jmp near ptr 004B1483h"
"	      004b147c    mov dword ptr [ebp-4],0"
"	      004b1483    mov ecx,[ebp-7Ch]"
"	      004b1486    add ecx,5Ch"
"	      004b1489    call 00412080h"
"	      004b148e    mov eax,[ebp-4]"
"	      004b1491    mov ecx,[ebp-7Ch]"
"	      004b1494    mov [ecx+60h],eax"
"	      004b1497    jmp near ptr 004B14CFh"
"	      004b149c    cmp dword ptr [ebp-14h],0"
"	      004b14a0    je near ptr 004B14CFh"
"	      004b14a6    jmp near ptr 004B14ABh"
"	      004b14ab    mov eax,[ebp-7Ch]"
"	      004b14ae    mov eax,[eax+60h]"
"	      004b14b1    mov eax,[eax]"
"	      004b14b3    mov [ebp-0Ch],eax"
"	      004b14b6    mov eax,[ebp-14h]"
"	      004b14b9    push eax"
"	      004b14ba    mov eax,[ebp-18h]"
"	      004b14bd    push eax"
"	      004b14be    mov eax,[ebp-0Ch]"
"	      004b14c1    push eax"
"	      004b14c2    call 0056A800h"
"	      004b14c7    add esp,0Ch"
"	      004b14ca    jmp near ptr 004B14CFh"
"	      004b14cf    mov eax,[ebp-14h]"
"	      004b14d2    mov ecx,[ebp-7Ch]"
"	      004b14d5    mov ecx,[ecx+60h]"
"	      004b14d8    mov [ecx+4],eax"
"	      004b14db    jmp near ptr 004B14E0h"
"	      004b14e0    jmp near ptr 004B14E5h"
);
// LINE 1140:
	asm( 
"	      004b14e5    jmp near ptr 004B1610h"
);
// LINE 1141:
	asm( 
"	      004b14ea    mov eax,ds:[59ABACh]"
"	      004b14ef    mov [ebp-30h],eax"
"	      004b14f2    jmp near ptr 004B14F7h"
"	      004b14f7    mov eax,[ebp-30h]"
"	      004b14fa    push eax"
"	      004b14fb    call 0056ABE0h"
"	      004b1500    add esp,4"
"	      004b1503    mov [ebp-2Ch],eax"
"	      004b1506    cmp dword ptr [ebp-2Ch],0FFFFFFFFh"
"	      004b150a    jne near ptr 004B1542h"
"	      004b1510    push 5971E4h"
"	      004b1515    mov ecx,638C00h"
"	      004b151a    call 00569960h"
"	      004b151f    mov [ebp-28h],eax"
"	      004b1522    mov eax,[ebp-28h]"
"	      004b1525    push eax"
"	      004b1526    call 004011B0h"
"	      004b152b    add esp,4"
"	      004b152e    jmp near ptr 004B1533h"
"	      004b1533    push 1"
"	      004b1535    call 00569430h"
"	      004b153a    add esp,4"
"	      004b153d    jmp near ptr 004B1542h"
"	      004b1542    jmp near ptr 004B1547h"
"	      004b1547    mov eax,[ebp-7Ch]"
"	      004b154a    mov eax,[eax+60h]"
"	      004b154d    cmp dword ptr [eax+0Ch],1"
"	      004b1551    ja near ptr 004B1578h"
"	      004b1557    cmp dword ptr [ebp-2Ch],0"
"	      004b155b    je near ptr 004B15C7h"
"	      004b1561    jmp near ptr 004B1566h"
"	      004b1566    mov eax,[ebp-7Ch]"
"	      004b1569    mov eax,[eax+60h]"
"	      004b156c    mov ecx,[ebp-2Ch]"
"	      004b156f    cmp [eax+8],ecx"
"	      004b1572    jae near ptr 004B15C7h"
"	      004b1578    push 10h"
"	      004b157a    call 0056A600h"
"	      004b157f    add esp,4"
"	      004b1582    mov [ebp-20h],eax"
"	      004b1585    cmp dword ptr [ebp-20h],0"
"	      004b1589    je near ptr 004B15A7h"
"	      004b158f    mov eax,[ebp-2Ch]"
"	      004b1592    push eax"
"	      004b1593    mov eax,[ebp-30h]"
"	      004b1596    push eax"
"	      004b1597    mov ecx,[ebp-20h]"
"	      004b159a    call 0041E090h"
"	      004b159f    mov [ebp-1Ch],eax"
"	      004b15a2    jmp near ptr 004B15AEh"
"	      004b15a7    mov dword ptr [ebp-1Ch],0"
"	      004b15ae    mov ecx,[ebp-7Ch]"
"	      004b15b1    add ecx,5Ch"
"	      004b15b4    call 00412080h"
"	      004b15b9    mov eax,[ebp-1Ch]"
"	      004b15bc    mov ecx,[ebp-7Ch]"
"	      004b15bf    mov [ecx+60h],eax"
"	      004b15c2    jmp near ptr 004B15FAh"
"	      004b15c7    cmp dword ptr [ebp-2Ch],0"
"	      004b15cb    je near ptr 004B15FAh"
"	      004b15d1    jmp near ptr 004B15D6h"
"	      004b15d6    mov eax,[ebp-7Ch]"
"	      004b15d9    mov eax,[eax+60h]"
"	      004b15dc    mov eax,[eax]"
"	      004b15de    mov [ebp-24h],eax"
"	      004b15e1    mov eax,[ebp-2Ch]"
"	      004b15e4    push eax"
"	      004b15e5    mov eax,[ebp-30h]"
"	      004b15e8    push eax"
"	      004b15e9    mov eax,[ebp-24h]"
"	      004b15ec    push eax"
"	      004b15ed    call 0056A800h"
"	      004b15f2    add esp,0Ch"
"	      004b15f5    jmp near ptr 004B15FAh"
"	      004b15fa    mov eax,[ebp-2Ch]"
"	      004b15fd    mov ecx,[ebp-7Ch]"
"	      004b1600    mov ecx,[ecx+60h]"
"	      004b1603    mov [ecx+4],eax"
"	      004b1606    jmp near ptr 004B160Bh"
"	      004b160b    jmp near ptr 004B1610h"
);
// LINE 1143:
	asm( 
"	      004b1610    cmp dword ptr [ebp+24h],0"
"	      004b1614    je near ptr 004B174Fh"
);
// LINE 1144:
	asm( 
"	      004b161a    jmp near ptr 004B161Fh"
"	      004b161f    mov eax,[ebp+24h]"
"	      004b1622    push eax"
"	      004b1623    call 0056ABE0h"
"	      004b1628    add esp,4"
"	      004b162b    mov [ebp-44h],eax"
"	      004b162e    cmp dword ptr [ebp-44h],0FFFFFFFFh"
"	      004b1632    jne near ptr 004B166Ah"
"	      004b1638    push 5971E4h"
"	      004b163d    mov ecx,638C00h"
"	      004b1642    call 00569960h"
"	      004b1647    mov [ebp-40h],eax"
"	      004b164a    mov eax,[ebp-40h]"
"	      004b164d    push eax"
"	      004b164e    call 004011B0h"
"	      004b1653    add esp,4"
"	      004b1656    jmp near ptr 004B165Bh"
"	      004b165b    push 1"
"	      004b165d    call 00569430h"
"	      004b1662    add esp,4"
"	      004b1665    jmp near ptr 004B166Ah"
"	      004b166a    jmp near ptr 004B166Fh"
"	      004b166f    mov eax,[ebp-7Ch]"
"	      004b1672    mov eax,[eax+0ACh]"
"	      004b1678    cmp dword ptr [eax+0Ch],1"
"	      004b167c    ja near ptr 004B16A6h"
"	      004b1682    cmp dword ptr [ebp-44h],0"
"	      004b1686    je near ptr 004B16FBh"
"	      004b168c    jmp near ptr 004B1691h"
"	      004b1691    mov eax,[ebp-7Ch]"
"	      004b1694    mov eax,[eax+0ACh]"
"	      004b169a    mov ecx,[ebp-44h]"
"	      004b169d    cmp [eax+8],ecx"
"	      004b16a0    jae near ptr 004B16FBh"
"	      004b16a6    push 10h"
"	      004b16a8    call 0056A600h"
"	      004b16ad    add esp,4"
"	      004b16b0    mov [ebp-38h],eax"
"	      004b16b3    cmp dword ptr [ebp-38h],0"
"	      004b16b7    je near ptr 004B16D5h"
"	      004b16bd    mov eax,[ebp-44h]"
"	      004b16c0    push eax"
"	      004b16c1    mov eax,[ebp+24h]"
"	      004b16c4    push eax"
"	      004b16c5    mov ecx,[ebp-38h]"
"	      004b16c8    call 0041E090h"
"	      004b16cd    mov [ebp-34h],eax"
"	      004b16d0    jmp near ptr 004B16DCh"
"	      004b16d5    mov dword ptr [ebp-34h],0"
"	      004b16dc    mov ecx,[ebp-7Ch]"
"	      004b16df    add ecx,0A8h"
"	      004b16e5    call 00412080h"
"	      004b16ea    mov eax,[ebp-34h]"
"	      004b16ed    mov ecx,[ebp-7Ch]"
"	      004b16f0    mov [ecx+0ACh],eax"
"	      004b16f6    jmp near ptr 004B1731h"
"	      004b16fb    cmp dword ptr [ebp-44h],0"
"	      004b16ff    je near ptr 004B1731h"
"	      004b1705    jmp near ptr 004B170Ah"
"	      004b170a    mov eax,[ebp-7Ch]"
"	      004b170d    mov eax,[eax+0ACh]"
"	      004b1713    mov eax,[eax]"
"	      004b1715    mov [ebp-3Ch],eax"
"	      004b1718    mov eax,[ebp-44h]"
"	      004b171b    push eax"
"	      004b171c    mov eax,[ebp+24h]"
"	      004b171f    push eax"
"	      004b1720    mov eax,[ebp-3Ch]"
"	      004b1723    push eax"
"	      004b1724    call 0056A800h"
"	      004b1729    add esp,0Ch"
"	      004b172c    jmp near ptr 004B1731h"
"	      004b1731    mov eax,[ebp-44h]"
"	      004b1734    mov ecx,[ebp-7Ch]"
"	      004b1737    mov ecx,[ecx+0ACh]"
"	      004b173d    mov [ecx+4],eax"
"	      004b1740    jmp near ptr 004B1745h"
"	      004b1745    jmp near ptr 004B174Ah"
);
// LINE 1146:
	asm( 
"	      004b174a    jmp near ptr 004B19D1h"
);
// LINE 1147:
	asm( 
"	      004b174f    mov eax,[ebp-7Ch]"
"	      004b1752    cmp dword ptr [eax+74h],0"
"	      004b1756    jne near ptr 004B1899h"
);
// LINE 1148:
	asm( 
"	      004b175c    mov eax,ds:[59ABB8h]"
"	      004b1761    mov [ebp-5Ch],eax"
"	      004b1764    jmp near ptr 004B1769h"
"	      004b1769    mov eax,[ebp-5Ch]"
"	      004b176c    push eax"
"	      004b176d    call 0056ABE0h"
"	      004b1772    add esp,4"
"	      004b1775    mov [ebp-58h],eax"
"	      004b1778    cmp dword ptr [ebp-58h],0FFFFFFFFh"
"	      004b177c    jne near ptr 004B17B4h"
"	      004b1782    push 5971E4h"
"	      004b1787    mov ecx,638C00h"
"	      004b178c    call 00569960h"
"	      004b1791    mov [ebp-54h],eax"
"	      004b1794    mov eax,[ebp-54h]"
"	      004b1797    push eax"
"	      004b1798    call 004011B0h"
"	      004b179d    add esp,4"
"	      004b17a0    jmp near ptr 004B17A5h"
"	      004b17a5    push 1"
"	      004b17a7    call 00569430h"
"	      004b17ac    add esp,4"
"	      004b17af    jmp near ptr 004B17B4h"
"	      004b17b4    jmp near ptr 004B17B9h"
"	      004b17b9    mov eax,[ebp-7Ch]"
"	      004b17bc    mov eax,[eax+0ACh]"
"	      004b17c2    cmp dword ptr [eax+0Ch],1"
"	      004b17c6    ja near ptr 004B17F0h"
"	      004b17cc    cmp dword ptr [ebp-58h],0"
"	      004b17d0    je near ptr 004B1845h"
"	      004b17d6    jmp near ptr 004B17DBh"
"	      004b17db    mov eax,[ebp-7Ch]"
"	      004b17de    mov eax,[eax+0ACh]"
"	      004b17e4    mov ecx,[ebp-58h]"
"	      004b17e7    cmp [eax+8],ecx"
"	      004b17ea    jae near ptr 004B1845h"
"	      004b17f0    push 10h"
"	      004b17f2    call 0056A600h"
"	      004b17f7    add esp,4"
"	      004b17fa    mov [ebp-4Ch],eax"
"	      004b17fd    cmp dword ptr [ebp-4Ch],0"
"	      004b1801    je near ptr 004B181Fh"
"	      004b1807    mov eax,[ebp-58h]"
"	      004b180a    push eax"
"	      004b180b    mov eax,[ebp-5Ch]"
"	      004b180e    push eax"
"	      004b180f    mov ecx,[ebp-4Ch]"
"	      004b1812    call 0041E090h"
"	      004b1817    mov [ebp-48h],eax"
"	      004b181a    jmp near ptr 004B1826h"
"	      004b181f    mov dword ptr [ebp-48h],0"
"	      004b1826    mov ecx,[ebp-7Ch]"
"	      004b1829    add ecx,0A8h"
"	      004b182f    call 00412080h"
"	      004b1834    mov eax,[ebp-48h]"
"	      004b1837    mov ecx,[ebp-7Ch]"
"	      004b183a    mov [ecx+0ACh],eax"
"	      004b1840    jmp near ptr 004B187Bh"
"	      004b1845    cmp dword ptr [ebp-58h],0"
"	      004b1849    je near ptr 004B187Bh"
"	      004b184f    jmp near ptr 004B1854h"
"	      004b1854    mov eax,[ebp-7Ch]"
"	      004b1857    mov eax,[eax+0ACh]"
"	      004b185d    mov eax,[eax]"
"	      004b185f    mov [ebp-50h],eax"
"	      004b1862    mov eax,[ebp-58h]"
"	      004b1865    push eax"
"	      004b1866    mov eax,[ebp-5Ch]"
"	      004b1869    push eax"
"	      004b186a    mov eax,[ebp-50h]"
"	      004b186d    push eax"
"	      004b186e    call 0056A800h"
"	      004b1873    add esp,0Ch"
"	      004b1876    jmp near ptr 004B187Bh"
"	      004b187b    mov eax,[ebp-58h]"
"	      004b187e    mov ecx,[ebp-7Ch]"
"	      004b1881    mov ecx,[ecx+0ACh]"
"	      004b1887    mov [ecx+4],eax"
"	      004b188a    jmp near ptr 004B188Fh"
"	      004b188f    jmp near ptr 004B1894h"
);
// LINE 1149:
	asm( 
"	      004b1894    jmp near ptr 004B19D1h"
);
// LINE 1150:
	asm( 
"	      004b1899    mov eax,ds:[59ABB4h]"
"	      004b189e    mov [ebp-74h],eax"
"	      004b18a1    jmp near ptr 004B18A6h"
"	      004b18a6    mov eax,[ebp-74h]"
"	      004b18a9    push eax"
"	      004b18aa    call 0056ABE0h"
"	      004b18af    add esp,4"
"	      004b18b2    mov [ebp-70h],eax"
"	      004b18b5    cmp dword ptr [ebp-70h],0FFFFFFFFh"
"	      004b18b9    jne near ptr 004B18F1h"
"	      004b18bf    push 5971E4h"
"	      004b18c4    mov ecx,638C00h"
"	      004b18c9    call 00569960h"
"	      004b18ce    mov [ebp-6Ch],eax"
"	      004b18d1    mov eax,[ebp-6Ch]"
"	      004b18d4    push eax"
"	      004b18d5    call 004011B0h"
"	      004b18da    add esp,4"
"	      004b18dd    jmp near ptr 004B18E2h"
"	      004b18e2    push 1"
"	      004b18e4    call 00569430h"
"	      004b18e9    add esp,4"
"	      004b18ec    jmp near ptr 004B18F1h"
"	      004b18f1    jmp near ptr 004B18F6h"
"	      004b18f6    mov eax,[ebp-7Ch]"
"	      004b18f9    mov eax,[eax+0ACh]"
"	      004b18ff    cmp dword ptr [eax+0Ch],1"
"	      004b1903    ja near ptr 004B192Dh"
"	      004b1909    cmp dword ptr [ebp-70h],0"
"	      004b190d    je near ptr 004B1982h"
"	      004b1913    jmp near ptr 004B1918h"
"	      004b1918    mov eax,[ebp-7Ch]"
"	      004b191b    mov eax,[eax+0ACh]"
"	      004b1921    mov ecx,[ebp-70h]"
"	      004b1924    cmp [eax+8],ecx"
"	      004b1927    jae near ptr 004B1982h"
"	      004b192d    push 10h"
"	      004b192f    call 0056A600h"
"	      004b1934    add esp,4"
"	      004b1937    mov [ebp-64h],eax"
"	      004b193a    cmp dword ptr [ebp-64h],0"
"	      004b193e    je near ptr 004B195Ch"
"	      004b1944    mov eax,[ebp-70h]"
"	      004b1947    push eax"
"	      004b1948    mov eax,[ebp-74h]"
"	      004b194b    push eax"
"	      004b194c    mov ecx,[ebp-64h]"
"	      004b194f    call 0041E090h"
"	      004b1954    mov [ebp-60h],eax"
"	      004b1957    jmp near ptr 004B1963h"
"	      004b195c    mov dword ptr [ebp-60h],0"
"	      004b1963    mov ecx,[ebp-7Ch]"
"	      004b1966    add ecx,0A8h"
"	      004b196c    call 00412080h"
"	      004b1971    mov eax,[ebp-60h]"
"	      004b1974    mov ecx,[ebp-7Ch]"
"	      004b1977    mov [ecx+0ACh],eax"
"	      004b197d    jmp near ptr 004B19B8h"
"	      004b1982    cmp dword ptr [ebp-70h],0"
"	      004b1986    je near ptr 004B19B8h"
"	      004b198c    jmp near ptr 004B1991h"
"	      004b1991    mov eax,[ebp-7Ch]"
"	      004b1994    mov eax,[eax+0ACh]"
"	      004b199a    mov eax,[eax]"
"	      004b199c    mov [ebp-68h],eax"
"	      004b199f    mov eax,[ebp-70h]"
"	      004b19a2    push eax"
"	      004b19a3    mov eax,[ebp-74h]"
"	      004b19a6    push eax"
"	      004b19a7    mov eax,[ebp-68h]"
"	      004b19aa    push eax"
"	      004b19ab    call 0056A800h"
"	      004b19b0    add esp,0Ch"
"	      004b19b3    jmp near ptr 004B19B8h"
"	      004b19b8    mov eax,[ebp-70h]"
"	      004b19bb    mov ecx,[ebp-7Ch]"
"	      004b19be    mov ecx,[ecx+0ACh]"
"	      004b19c4    mov [ecx+4],eax"
"	      004b19c7    jmp near ptr 004B19CCh"
"	      004b19cc    jmp near ptr 004B19D1h"
);
// LINE 1152:
	asm( 
"	      004b19d1    jmp near ptr 004B19D6h"
"	      004b19d6    mov eax,[ebp-7Ch]"
"	      004b19d9    pop edi"
"	      004b19da    pop esi"
"	      004b19db    pop ebx"
"	      004b19dc    leave"
"	      004b19dd    ret 24h"
);
}

// FUNCTION: SIMCOPTER 0x004b19e0
void SliderWindow::~SliderWindow() {
// LINE 1158:
	asm( 
"	      004b19e0    push ebp"
"	      004b19e1    mov ebp,esp"
"	      004b19e3    sub esp,1Ch"
"	      004b19e6    push ebx"
"	      004b19e7    push esi"
"	      004b19e8    push edi"
"	      004b19e9    mov [ebp-1Ch],ecx"
"	      004b19ec    mov eax,[ebp-1Ch]"
"	      004b19ef    mov dword ptr [eax],591EE8h"
);
// LINE 1159:
	asm( 
"	      004b19f5    mov ecx,[ebp-1Ch]"
"	      004b19f8    call 004B1E64h"
);
// LINE 1160:
	asm( 
"	      004b19fd    jmp near ptr 004B1A02h"
"	      004b1a02    mov eax,[ebp-1Ch]"
"	      004b1a05    mov eax,[eax+0ACh]"
"	      004b1a0b    dec dword ptr [eax+0Ch]"
"	      004b1a0e    mov eax,[ebp-1Ch]"
"	      004b1a11    mov eax,[eax+0ACh]"
"	      004b1a17    cmp dword ptr [eax+0Ch],0"
"	      004b1a1b    jne near ptr 004B1A97h"
"	      004b1a21    mov eax,[ebp-1Ch]"
"	      004b1a24    mov eax,[eax+0ACh]"
"	      004b1a2a    mov [ebp-10h],eax"
"	      004b1a2d    mov eax,[ebp-10h]"
"	      004b1a30    mov [ebp-0Ch],eax"
"	      004b1a33    cmp dword ptr [ebp-0Ch],0"
"	      004b1a37    je near ptr 004B1A97h"
"	      004b1a3d    mov eax,[ebp-0Ch]"
"	      004b1a40    cmp dword ptr [eax+8],0"
"	      004b1a44    je near ptr 004B1A77h"
"	      004b1a4a    mov eax,[ebp-0Ch]"
"	      004b1a4d    mov eax,[eax]"
"	      004b1a4f    mov [ebp-14h],eax"
"	      004b1a52    mov eax,[ebp-14h]"
"	      004b1a55    mov [ebp-18h],eax"
"	      004b1a58    mov eax,[ebp-18h]"
"	      004b1a5b    push eax"
"	      004b1a5c    call 0056A740h"
"	      004b1a61    add esp,4"
"	      004b1a64    mov eax,[ebp-0Ch]"
"	      004b1a67    mov dword ptr [eax+8],0"
"	      004b1a6e    mov eax,[ebp-0Ch]"
"	      004b1a71    mov dword ptr [eax],0"
"	      004b1a77    jmp near ptr 004B1A7Ch"
"	      004b1a7c    jmp near ptr 004B1A81h"
"	      004b1a81    mov eax,[ebp-0Ch]"
"	      004b1a84    push eax"
"	      004b1a85    call 0056A740h"
"	      004b1a8a    add esp,4"
"	      004b1a8d    jmp near ptr 004B1A92h"
"	      004b1a92    jmp near ptr 004B1A97h"
"	      004b1a97    jmp near ptr 004B1A9Ch"
"	      004b1a9c    mov eax,[ebp-1Ch]"
"	      004b1a9f    cmp dword ptr [eax+0A8h],0"
"	      004b1aa6    je near ptr 004B1ACAh"
"	      004b1aac    mov eax,[ebp-1Ch]"
"	      004b1aaf    mov eax,[eax+0A8h]"
"	      004b1ab5    mov [ebp-4],eax"
"	      004b1ab8    mov eax,[ebp-4]"
"	      004b1abb    mov [ebp-8],eax"
"	      004b1abe    mov eax,[ebp-8]"
"	      004b1ac1    push eax"
"	      004b1ac2    call 0056A740h"
"	      004b1ac7    add esp,4"
"	      004b1aca    jmp near ptr 004B1ACFh"
"	      004b1acf    mov ecx,[ebp-1Ch]"
"	      004b1ad2    call 004A4045h"
"	      004b1ad7    pop edi"
"	      004b1ad8    pop esi"
"	      004b1ad9    pop ebx"
"	      004b1ada    leave"
"	      004b1adb    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b1adc
int32_t SliderWindow::Initialize() {
// LINE 1166:
	asm( 
"	      004b1adc    push ebp"
"	      004b1add    mov ebp,esp"
"	      004b1adf    sub esp,8"
"	      004b1ae2    push ebx"
"	      004b1ae3    push esi"
"	      004b1ae4    push edi"
"	      004b1ae5    mov [ebp-8],ecx"
);
// LINE 1169:
	asm( 
"	      004b1ae8    mov ecx,[ebp-8]"
"	      004b1aeb    call 004A44D4h"
);
// LINE 1170:
	asm( 
"	      004b1af0    mov eax,ds:[606988h]"
"	      004b1af5    mov ecx,[ebp-8]"
"	      004b1af8    mov [ecx+58h],eax"
);
// LINE 1171:
	asm( 
"	      004b1afb    push 0"
"	      004b1afd    mov eax,[ebp-8]"
"	      004b1b00    mov eax,[eax]"
"	      004b1b02    mov ecx,[ebp-8]"
"	      004b1b05    call dword ptr [eax+10h]"
"	      004b1b08    mov [ebp-4],eax"
);
// LINE 1172:
	asm( 
"	      004b1b0b    mov eax,[ebp-8]"
"	      004b1b0e    cmp dword ptr [eax+0A4h],0"
"	      004b1b15    je near ptr 004B1B4Ah"
);
// LINE 1173:
	asm( 
"	      004b1b1b    jmp near ptr 004B1B20h"
"	      004b1b20    jmp near ptr 004B1B25h"
"	      004b1b25    mov eax,[ebp-8]"
"	      004b1b28    mov eax,[eax+0A4h]"
"	      004b1b2e    mov eax,[eax+0Ch]"
"	      004b1b31    push eax"
"	      004b1b32    mov eax,[ebp-8]"
"	      004b1b35    mov eax,[eax+0A4h]"
"	      004b1b3b    mov eax,[eax+8]"
"	      004b1b3e    push eax"
"	      004b1b3f    mov eax,[ebp-8]"
"	      004b1b42    mov eax,[eax]"
"	      004b1b44    mov ecx,[ebp-8]"
"	      004b1b47    call dword ptr [eax+38h]"
);
// LINE 1174:
	asm( 
"	      004b1b4a    mov eax,[ebp-8]"
"	      004b1b4d    mov eax,[eax]"
"	      004b1b4f    mov ecx,[ebp-8]"
"	      004b1b52    call dword ptr [eax+0CCh]"
);
// LINE 1175:
	asm( 
"	      004b1b58    mov eax,[ebp-4]"
"	      004b1b5b    jmp near ptr 004B1B60h"
);
// LINE 1176:
	asm( 
"	      004b1b60    pop edi"
"	      004b1b61    pop esi"
"	      004b1b62    pop ebx"
"	      004b1b63    leave"
"	      004b1b64    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b1b65
int32_t SliderWindow::CreateImage(int32_t) {
// LINE 1183:
	asm( 
"	      004b1b65    push ebp"
"	      004b1b66    mov ebp,esp"
"	      004b1b68    sub esp,54h"
"	      004b1b6b    push ebx"
"	      004b1b6c    push esi"
"	      004b1b6d    push edi"
"	      004b1b6e    mov [ebp-54h],ecx"
);
// LINE 1184:
	asm( 
"	      004b1b71    push 10h"
"	      004b1b73    call 0056A600h"
"	      004b1b78    add esp,4"
"	      004b1b7b    mov [ebp-18h],eax"
"	      004b1b7e    cmp dword ptr [ebp-18h],0"
"	      004b1b82    je near ptr 004B1BC1h"
"	      004b1b88    mov eax,[ebp-18h]"
"	      004b1b8b    mov dword ptr [eax+4],0"
"	      004b1b92    mov eax,[ebp-18h]"
"	      004b1b95    mov eax,[eax+4]"
"	      004b1b98    mov ecx,[ebp-18h]"
"	      004b1b9b    mov [ecx+8],eax"
"	      004b1b9e    mov eax,[ebp-18h]"
"	      004b1ba1    mov dword ptr [eax],0"
"	      004b1ba7    mov eax,[ebp-18h]"
"	      004b1baa    mov dword ptr [eax+0Ch],1"
"	      004b1bb1    jmp near ptr 004B1BB6h"
"	      004b1bb6    mov eax,[ebp-18h]"
"	      004b1bb9    mov [ebp-4],eax"
"	      004b1bbc    jmp near ptr 004B1BC8h"
"	      004b1bc1    mov dword ptr [ebp-4],0"
"	      004b1bc8    mov dword ptr [ebp-8],0"
"	      004b1bcf    jmp near ptr 004B1BD4h"
);
// LINE 1188:
	asm( 
"	      004b1bd4    push 0"
"	      004b1bd6    mov ecx,[ebp-54h]"
"	      004b1bd9    call 004A4AA0h"
"	      004b1bde    mov [ebp-0Ch],eax"
);
// LINE 1189:
	asm( 
"	      004b1be1    mov eax,[ebp-54h]"
"	      004b1be4    cmp dword ptr [eax+58h],0FFFFFFFFh"
"	      004b1be8    je near ptr 004B1C08h"
);
// LINE 1190:
	asm( 
"	      004b1bee    mov eax,[ebp-54h]"
"	      004b1bf1    mov eax,[eax+58h]"
"	      004b1bf4    push eax"
"	      004b1bf5    push 1"
"	      004b1bf7    mov eax,[ebp-54h]"
"	      004b1bfa    mov ecx,[ebp-54h]"
"	      004b1bfd    mov ecx,[ecx+40h]"
"	      004b1c00    mov edx,[ecx]"
"	      004b1c02    mov ecx,[eax+40h]"
"	      004b1c05    call dword ptr [edx+8]"
);
// LINE 1192:
	asm( 
"	      004b1c08    jmp near ptr 004B1C0Dh"
"	      004b1c0d    mov eax,[ebp-54h]"
"	      004b1c10    mov eax,[eax+0ACh]"
"	      004b1c16    cmp dword ptr [eax+4],0"
"	      004b1c1a    je near ptr 004B1DA0h"
"	      004b1c20    mov eax,[ebp-54h]"
"	      004b1c23    cmp dword ptr [eax+0A4h],0"
"	      004b1c2a    jne near ptr 004B1DA0h"
);
// LINE 1193:
	asm( 
"	      004b1c30    lea eax,[ebp-8]"
"	      004b1c33    push eax"
"	      004b1c34    mov eax,[ebp-54h]"
"	      004b1c37    add eax,0A8h"
"	      004b1c3c    push eax"
"	      004b1c3d    push 0"
"	      004b1c3f    push 6"
"	      004b1c41    mov ecx,604C00h"
"	      004b1c46    call 00494F82h"
"	      004b1c4b    jmp near ptr 004B1C50h"
);
// LINE 1194:
	asm( 
"	      004b1c50    push 134h"
"	      004b1c55    call 0056A600h"
"	      004b1c5a    add esp,4"
"	      004b1c5d    mov [ebp-10h],eax"
"	      004b1c60    cmp dword ptr [ebp-10h],0"
"	      004b1c64    je near ptr 004B1D66h"
"	      004b1c6a    cmp dword ptr [ebp-8],0"
"	      004b1c6e    je near ptr 004B1C8Ch"
"	      004b1c74    mov eax,[ebp-8]"
"	      004b1c77    mov [ebp-34h],eax"
"	      004b1c7a    mov eax,[ebp-34h]"
"	      004b1c7d    mov [ebp-3Ch],eax"
"	      004b1c80    mov eax,[ebp-3Ch]"
"	      004b1c83    push eax"
"	      004b1c84    call 0056A740h"
"	      004b1c89    add esp,4"
"	      004b1c8c    jmp near ptr 004B1C91h"
"	      004b1c91    mov eax,[ebp-4]"
"	      004b1c94    mov eax,[eax+4]"
"	      004b1c97    inc eax"
"	      004b1c98    push eax"
"	      004b1c99    call 0056A600h"
"	      004b1c9e    add esp,4"
"	      004b1ca1    mov [ebp-8],eax"
"	      004b1ca4    jmp near ptr 004B1CA9h"
"	      004b1ca9    mov eax,[ebp-4]"
"	      004b1cac    cmp dword ptr [eax+4],0"
"	      004b1cb0    je near ptr 004B1D13h"
"	      004b1cb6    jmp near ptr 004B1CBBh"
"	      004b1cbb    jmp near ptr 004B1CC0h"
"	      004b1cc0    mov eax,[ebp-4]"
"	      004b1cc3    cmp dword ptr [eax+4],0"
"	      004b1cc7    je near ptr 004B1CDFh"
"	      004b1ccd    mov eax,[ebp-4]"
"	      004b1cd0    mov eax,[eax]"
"	      004b1cd2    mov [ebp-48h],eax"
"	      004b1cd5    jmp near ptr 004B1CEBh"
"	      004b1cda    jmp near ptr 004B1CEBh"
"	      004b1cdf    mov dword ptr [ebp-48h],0"
"	      004b1ce6    jmp near ptr 004B1CEBh"
"	      004b1ceb    mov eax,[ebp-4]"
"	      004b1cee    mov eax,[eax+4]"
"	      004b1cf1    mov [ebp-4Ch],eax"
"	      004b1cf4    mov eax,[ebp-8]"
"	      004b1cf7    mov [ebp-50h],eax"
"	      004b1cfa    mov eax,[ebp-4Ch]"
"	      004b1cfd    push eax"
"	      004b1cfe    mov eax,[ebp-48h]"
"	      004b1d01    push eax"
"	      004b1d02    mov eax,[ebp-50h]"
"	      004b1d05    push eax"
"	      004b1d06    call 0056A800h"
"	      004b1d0b    add esp,0Ch"
"	      004b1d0e    jmp near ptr 004B1D13h"
"	      004b1d13    jmp near ptr 004B1D18h"
"	      004b1d18    mov byte ptr [ebp-38h],0"
"	      004b1d1c    jmp near ptr 004B1D21h"
"	      004b1d21    lea eax,[ebp-38h]"
"	      004b1d24    mov [ebp-40h],eax"
"	      004b1d27    jmp near ptr 004B1D2Ch"
"	      004b1d2c    mov eax,[ebp-4]"
"	      004b1d2f    mov eax,[eax+4]"
"	      004b1d32    add eax,[ebp-8]"
"	      004b1d35    mov [ebp-44h],eax"
"	      004b1d38    mov eax,[ebp-40h]"
"	      004b1d3b    mov al,[eax]"
"	      004b1d3d    mov ecx,[ebp-44h]"
"	      004b1d40    mov [ecx],al"
"	      004b1d42    jmp near ptr 004B1D47h"
"	      004b1d47    jmp near ptr 004B1D4Ch"
"	      004b1d4c    mov eax,[ebp-8]"
"	      004b1d4f    push eax"
"	      004b1d50    mov ecx,[ebp-10h]"
"	      004b1d53    call 0046E6DFh"
"	      004b1d58    mov ecx,[ebp-54h]"
"	      004b1d5b    mov [ecx+0A4h],eax"
"	      004b1d61    jmp near ptr 004B1D73h"
"	      004b1d66    mov eax,[ebp-54h]"
"	      004b1d69    mov dword ptr [eax+0A4h],0"
);
// LINE 1195:
	asm( 
"	      004b1d73    mov eax,[ebp-54h]"
"	      004b1d76    cmp dword ptr [eax+58h],0FFFFFFFFh"
"	      004b1d7a    je near ptr 004B1DA0h"
);
// LINE 1196:
	asm( 
"	      004b1d80    mov eax,[ebp-54h]"
"	      004b1d83    mov eax,[eax+58h]"
"	      004b1d86    push eax"
"	      004b1d87    push 1"
"	      004b1d89    mov eax,[ebp-54h]"
"	      004b1d8c    mov ecx,[ebp-54h]"
"	      004b1d8f    mov ecx,[ecx+0A4h]"
"	      004b1d95    mov edx,[ecx]"
"	      004b1d97    mov ecx,[eax+0A4h]"
"	      004b1d9d    call dword ptr [edx+8]"
);
// LINE 1198:
	asm( 
"	      004b1da0    mov eax,[ebp-0Ch]"
"	      004b1da3    mov [ebp-14h],eax"
"	      004b1da6    mov eax,[ebp-4]"
"	      004b1da9    dec dword ptr [eax+0Ch]"
"	      004b1dac    mov eax,[ebp-4]"
"	      004b1daf    cmp dword ptr [eax+0Ch],0"
"	      004b1db3    jne near ptr 004B1E29h"
"	      004b1db9    mov eax,[ebp-4]"
"	      004b1dbc    mov [ebp-28h],eax"
"	      004b1dbf    mov eax,[ebp-28h]"
"	      004b1dc2    mov [ebp-24h],eax"
"	      004b1dc5    cmp dword ptr [ebp-24h],0"
"	      004b1dc9    je near ptr 004B1E29h"
"	      004b1dcf    mov eax,[ebp-24h]"
"	      004b1dd2    cmp dword ptr [eax+8],0"
"	      004b1dd6    je near ptr 004B1E09h"
"	      004b1ddc    mov eax,[ebp-24h]"
"	      004b1ddf    mov eax,[eax]"
"	      004b1de1    mov [ebp-2Ch],eax"
"	      004b1de4    mov eax,[ebp-2Ch]"
"	      004b1de7    mov [ebp-30h],eax"
"	      004b1dea    mov eax,[ebp-30h]"
"	      004b1ded    push eax"
"	      004b1dee    call 0056A740h"
"	      004b1df3    add esp,4"
"	      004b1df6    mov eax,[ebp-24h]"
"	      004b1df9    mov dword ptr [eax+8],0"
"	      004b1e00    mov eax,[ebp-24h]"
"	      004b1e03    mov dword ptr [eax],0"
"	      004b1e09    jmp near ptr 004B1E0Eh"
"	      004b1e0e    jmp near ptr 004B1E13h"
"	      004b1e13    mov eax,[ebp-24h]"
"	      004b1e16    push eax"
"	      004b1e17    call 0056A740h"
"	      004b1e1c    add esp,4"
"	      004b1e1f    jmp near ptr 004B1E24h"
"	      004b1e24    jmp near ptr 004B1E29h"
"	      004b1e29    jmp near ptr 004B1E2Eh"
"	      004b1e2e    cmp dword ptr [ebp-8],0"
"	      004b1e32    je near ptr 004B1E50h"
"	      004b1e38    mov eax,[ebp-8]"
"	      004b1e3b    mov [ebp-1Ch],eax"
"	      004b1e3e    mov eax,[ebp-1Ch]"
"	      004b1e41    mov [ebp-20h],eax"
"	      004b1e44    mov eax,[ebp-20h]"
"	      004b1e47    push eax"
"	      004b1e48    call 0056A740h"
"	      004b1e4d    add esp,4"
"	      004b1e50    jmp near ptr 004B1E55h"
"	      004b1e55    mov eax,[ebp-14h]"
"	      004b1e58    jmp near ptr 004B1E5Dh"
);
// LINE 1199:
	asm( 
"	      004b1e5d    pop edi"
"	      004b1e5e    pop esi"
"	      004b1e5f    pop ebx"
"	      004b1e60    leave"
"	      004b1e61    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b1e64
void SliderWindow::DestroyImage() {
// LINE 1206:
	asm( 
"	      004b1e64    push ebp"
"	      004b1e65    mov ebp,esp"
"	      004b1e67    sub esp,0Ch"
"	      004b1e6a    push ebx"
"	      004b1e6b    push esi"
"	      004b1e6c    push edi"
"	      004b1e6d    mov [ebp-0Ch],ecx"
);
// LINE 1208:
	asm( 
"	      004b1e70    mov ecx,[ebp-0Ch]"
"	      004b1e73    call 004A4CABh"
);
// LINE 1209:
	asm( 
"	      004b1e78    mov eax,[ebp-0Ch]"
"	      004b1e7b    cmp dword ptr [eax+0A4h],0"
"	      004b1e82    je near ptr 004B1ECFh"
);
// LINE 1210:
	asm( 
"	      004b1e88    mov eax,[ebp-0Ch]"
"	      004b1e8b    mov eax,[eax+0A4h]"
"	      004b1e91    mov [ebp-8],eax"
"	      004b1e94    mov eax,[ebp-8]"
"	      004b1e97    mov [ebp-4],eax"
"	      004b1e9a    cmp dword ptr [ebp-4],0"
"	      004b1e9e    je near ptr 004B1EC2h"
"	      004b1ea4    mov ecx,[ebp-4]"
"	      004b1ea7    call 0046EC7Ah"
"	      004b1eac    mov eax,[ebp-4]"
"	      004b1eaf    push eax"
"	      004b1eb0    call 0056A740h"
"	      004b1eb5    add esp,4"
"	      004b1eb8    jmp near ptr 004B1EBDh"
"	      004b1ebd    jmp near ptr 004B1EC2h"
);
// LINE 1211:
	asm( 
"	      004b1ec2    mov eax,[ebp-0Ch]"
"	      004b1ec5    mov dword ptr [eax+0A4h],0"
);
// LINE 1213:
	asm( 
"	      004b1ecf    jmp near ptr 004B1ED4h"
"	      004b1ed4    pop edi"
"	      004b1ed5    pop esi"
"	      004b1ed6    pop ebx"
"	      004b1ed7    leave"
"	      004b1ed8    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b1ed9
void SliderWindow::MoveWindow(int32_t, int32_t) {
// LINE 1219:
	asm( 
"	      004b1ed9    push ebp"
"	      004b1eda    mov ebp,esp"
"	      004b1edc    sub esp,4"
"	      004b1edf    push ebx"
"	      004b1ee0    push esi"
"	      004b1ee1    push edi"
"	      004b1ee2    mov [ebp-4],ecx"
);
// LINE 1220:
	asm( 
"	      004b1ee5    mov eax,[ebp+0Ch]"
"	      004b1ee8    push eax"
"	      004b1ee9    mov eax,[ebp+8]"
"	      004b1eec    push eax"
"	      004b1eed    mov ecx,[ebp-4]"
"	      004b1ef0    call 004A4D7Eh"
);
// LINE 1221:
	asm( 
"	      004b1ef5    mov eax,[ebp-4]"
"	      004b1ef8    mov eax,[eax]"
"	      004b1efa    mov ecx,[ebp-4]"
"	      004b1efd    call dword ptr [eax+0CCh]"
);
// LINE 1222:
	asm( 
"	      004b1f03    jmp near ptr 004B1F08h"
"	      004b1f08    pop edi"
"	      004b1f09    pop esi"
"	      004b1f0a    pop ebx"
"	      004b1f0b    leave"
"	      004b1f0c    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b1f0f
void SliderWindow::SetWidthAndHeight(int32_t, int32_t) {
// LINE 1228:
	asm( 
"	      004b1f0f    push ebp"
"	      004b1f10    mov ebp,esp"
"	      004b1f12    sub esp,4"
"	      004b1f15    push ebx"
"	      004b1f16    push esi"
"	      004b1f17    push edi"
"	      004b1f18    mov [ebp-4],ecx"
);
// LINE 1229:
	asm( 
"	      004b1f1b    mov eax,[ebp+0Ch]"
"	      004b1f1e    push eax"
"	      004b1f1f    mov eax,[ebp+8]"
"	      004b1f22    push eax"
"	      004b1f23    mov ecx,[ebp-4]"
"	      004b1f26    call 004A4DF1h"
);
// LINE 1230:
	asm( 
"	      004b1f2b    mov eax,[ebp-4]"
"	      004b1f2e    mov eax,[eax]"
"	      004b1f30    mov ecx,[ebp-4]"
"	      004b1f33    call dword ptr [eax+0CCh]"
);
// LINE 1231:
	asm( 
"	      004b1f39    jmp near ptr 004B1F3Eh"
"	      004b1f3e    pop edi"
"	      004b1f3f    pop esi"
"	      004b1f40    pop ebx"
"	      004b1f41    leave"
"	      004b1f42    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b1f45
int32_t SliderWindow::ComposeSelf() {
// LINE 1239:
	asm( 
"	      004b1f45    push ebp"
"	      004b1f46    mov ebp,esp"
"	      004b1f48    sub esp,14h"
"	      004b1f4b    push ebx"
"	      004b1f4c    push esi"
"	      004b1f4d    push edi"
"	      004b1f4e    mov [ebp-14h],ecx"
);
// LINE 1246:
	asm( 
"	      004b1f51    mov eax,[ebp-14h]"
"	      004b1f54    cmp dword ptr [eax+54h],0"
"	      004b1f58    jne near ptr 004B1F68h"
);
// LINE 1247:
	asm( 
"	      004b1f5e    mov eax,1"
"	      004b1f63    jmp near ptr 004B21FDh"
);
// LINE 1248:
	asm( 
"	      004b1f68    jmp near ptr 004B1F6Dh"
"	      004b1f6d    mov eax,[ebp-14h]"
"	      004b1f70    cmp dword ptr [eax+48h],0"
"	      004b1f74    jne near ptr 004B1F84h"
);
// LINE 1249:
	asm( 
"	      004b1f7a    mov eax,1"
"	      004b1f7f    jmp near ptr 004B21FDh"
);
// LINE 1250:
	asm( 
"	      004b1f84    push 1"
"	      004b1f86    push 0"
"	      004b1f88    mov eax,[ebp-14h]"
"	      004b1f8b    mov eax,[eax]"
"	      004b1f8d    mov ecx,[ebp-14h]"
"	      004b1f90    call dword ptr [eax+30h]"
);
// LINE 1253:
	asm( 
"	      004b1f93    mov eax,[ebp-14h]"
"	      004b1f96    cmp dword ptr [eax+0A4h],0"
"	      004b1f9d    je near ptr 004B1FFCh"
);
// LINE 1255:
	asm( 
"	      004b1fa3    jmp near ptr 004B1FA8h"
"	      004b1fa8    jmp near ptr 004B1FADh"
"	      004b1fad    mov eax,[ebp-14h]"
"	      004b1fb0    mov eax,[eax+0A4h]"
"	      004b1fb6    mov eax,[eax+0Ch]"
"	      004b1fb9    push eax"
"	      004b1fba    mov eax,[ebp-14h]"
"	      004b1fbd    mov eax,[eax+0A4h]"
"	      004b1fc3    mov eax,[eax+8]"
"	      004b1fc6    push eax"
"	      004b1fc7    push 0"
"	      004b1fc9    push 0"
"	      004b1fcb    mov eax,[ebp-14h]"
"	      004b1fce    mov eax,[eax+24h]"
"	      004b1fd1    push eax"
"	      004b1fd2    mov eax,[ebp-14h]"
"	      004b1fd5    mov eax,[eax+20h]"
"	      004b1fd8    push eax"
"	      004b1fd9    mov eax,[ebp-14h]"
"	      004b1fdc    mov eax,[eax+44h]"
"	      004b1fdf    push eax"
"	      004b1fe0    mov eax,[ebp-14h]"
"	      004b1fe3    mov ecx,[ebp-14h]"
"	      004b1fe6    mov ecx,[ecx+0A4h]"
"	      004b1fec    mov edx,[ecx]"
"	      004b1fee    mov ecx,[eax+0A4h]"
"	      004b1ff4    call dword ptr [edx+0Ch]"
);
// LINE 1257:
	asm( 
"	      004b1ff7    jmp near ptr 004B211Fh"
);
// LINE 1258:
	asm( 
"	      004b1ffc    mov eax,[ebp-14h]"
"	      004b1fff    add eax,20h"
"	      004b2002    push eax"
"	      004b2003    mov eax,ds:[60696Ch]"
"	      004b2008    push eax"
"	      004b2009    mov eax,[ebp-14h]"
"	      004b200c    mov ecx,[ebp-14h]"
"	      004b200f    mov ecx,[ecx+44h]"
"	      004b2012    mov edx,[ecx]"
"	      004b2014    mov ecx,[eax+44h]"
"	      004b2017    call dword ptr [edx+44h]"
);
// LINE 1259:
	asm( 
"	      004b201a    mov eax,[ebp-14h]"
"	      004b201d    cmp dword ptr [eax+74h],0"
"	      004b2021    jne near ptr 004B209Fh"
);
// LINE 1263:
	asm( 
"	      004b2027    jmp near ptr 004B202Ch"
"	      004b202c    jmp near ptr 004B2031h"
"	      004b2031    push 1"
"	      004b2033    mov eax,[ebp-14h]"
"	      004b2036    mov eax,[eax+1Ch]"
"	      004b2039    mov ecx,[ebp-14h]"
"	      004b203c    sub eax,[ecx+14h]"
"	      004b203f    cdq"
"	      004b2040    sub eax,edx"
"	      004b2042    sar eax,1"
"	      004b2045    mov ecx,[ebp-14h]"
"	      004b2048    mov ecx,[ecx+24h]"
"	      004b204b    add ecx,eax"
"	      004b204d    push ecx"
"	      004b204e    mov eax,[ebp-14h]"
"	      004b2051    mov eax,[eax+28h]"
"	      004b2054    mov ecx,[ebp-14h]"
"	      004b2057    sub eax,[ecx+90h]"
"	      004b205d    push eax"
"	      004b205e    mov eax,[ebp-14h]"
"	      004b2061    mov eax,[eax+1Ch]"
"	      004b2064    mov ecx,[ebp-14h]"
"	      004b2067    sub eax,[ecx+14h]"
"	      004b206a    cdq"
"	      004b206b    sub eax,edx"
"	      004b206d    sar eax,1"
"	      004b2070    mov ecx,[ebp-14h]"
"	      004b2073    mov ecx,[ecx+24h]"
"	      004b2076    add ecx,eax"
"	      004b2078    push ecx"
"	      004b2079    mov eax,[ebp-14h]"
"	      004b207c    mov eax,[eax+20h]"
"	      004b207f    mov ecx,[ebp-14h]"
"	      004b2082    add eax,[ecx+90h]"
"	      004b2088    push eax"
"	      004b2089    mov eax,[ebp-14h]"
"	      004b208c    mov ecx,[ebp-14h]"
"	      004b208f    mov ecx,[ecx+44h]"
"	      004b2092    mov edx,[ecx]"
"	      004b2094    mov ecx,[eax+44h]"
"	      004b2097    call dword ptr [edx+40h]"
);
// LINE 1264:
	asm( 
"	      004b209a    jmp near ptr 004B2112h"
);
// LINE 1268:
	asm( 
"	      004b209f    jmp near ptr 004B20A4h"
"	      004b20a4    jmp near ptr 004B20A9h"
"	      004b20a9    push 1"
"	      004b20ab    mov eax,[ebp-14h]"
"	      004b20ae    mov eax,[eax+2Ch]"
"	      004b20b1    mov ecx,[ebp-14h]"
"	      004b20b4    sub eax,[ecx+90h]"
"	      004b20ba    push eax"
"	      004b20bb    mov eax,[ebp-14h]"
"	      004b20be    mov ecx,[eax+28h]"
"	      004b20c1    mov eax,[ebp-14h]"
"	      004b20c4    mov eax,[eax+18h]"
"	      004b20c7    mov edx,[ebp-14h]"
"	      004b20ca    sub eax,[edx+10h]"
"	      004b20cd    cdq"
"	      004b20ce    sub eax,edx"
"	      004b20d0    sar eax,1"
"	      004b20d3    sub ecx,eax"
"	      004b20d5    push ecx"
"	      004b20d6    mov eax,[ebp-14h]"
"	      004b20d9    mov eax,[eax+24h]"
"	      004b20dc    mov ecx,[ebp-14h]"
"	      004b20df    add eax,[ecx+90h]"
"	      004b20e5    push eax"
"	      004b20e6    mov eax,[ebp-14h]"
"	      004b20e9    mov eax,[eax+18h]"
"	      004b20ec    mov ecx,[ebp-14h]"
"	      004b20ef    sub eax,[ecx+10h]"
"	      004b20f2    cdq"
"	      004b20f3    sub eax,edx"
"	      004b20f5    sar eax,1"
"	      004b20f8    mov ecx,[ebp-14h]"
"	      004b20fb    mov ecx,[ecx+20h]"
"	      004b20fe    add ecx,eax"
"	      004b2100    push ecx"
"	      004b2101    mov eax,[ebp-14h]"
"	      004b2104    mov ecx,[ebp-14h]"
"	      004b2107    mov ecx,[ecx+44h]"
"	      004b210a    mov edx,[ecx]"
"	      004b210c    mov ecx,[eax+44h]"
"	      004b210f    call dword ptr [edx+40h]"
);
// LINE 1269:
	asm( 
"	      004b2112    push 0"
"	      004b2114    mov eax,[ebp-14h]"
"	      004b2117    mov eax,[eax]"
"	      004b2119    mov ecx,[ebp-14h]"
"	      004b211c    call dword ptr [eax+2Ch]"
);
// LINE 1272:
	asm( 
"	      004b211f    mov eax,[ebp-14h]"
"	      004b2122    mov eax,[eax]"
"	      004b2124    mov ecx,[ebp-14h]"
"	      004b2127    call dword ptr [eax+0D0h]"
"	      004b212d    mov [ebp-4],eax"
);
// LINE 1273:
	asm( 
"	      004b2130    mov eax,[ebp-14h]"
"	      004b2133    mov eax,[eax]"
"	      004b2135    mov ecx,[ebp-14h]"
"	      004b2138    call dword ptr [eax+0D4h]"
"	      004b213e    mov [ebp-8],eax"
);
// LINE 1274:
	asm( 
"	      004b2141    mov eax,[ebp-14h]"
"	      004b2144    cmp dword ptr [eax+74h],0"
"	      004b2148    jne near ptr 004B21A3h"
);
// LINE 1275:
	asm( 
"	      004b214e    mov eax,[ebp-14h]"
"	      004b2151    mov eax,[eax+94h]"
"	      004b2157    mov ecx,[ebp-14h]"
"	      004b215a    add eax,[ecx+20h]"
"	      004b215d    mov [ebp-10h],eax"
);
// LINE 1276:
	asm( 
"	      004b2160    mov eax,[ebp-14h]"
"	      004b2163    mov eax,[eax+98h]"
"	      004b2169    mov ecx,[ebp-14h]"
"	      004b216c    add eax,[ecx+24h]"
"	      004b216f    mov [ebp-0Ch],eax"
);
// LINE 1277:
	asm( 
"	      004b2172    mov eax,[ebp-8]"
"	      004b2175    push eax"
"	      004b2176    mov eax,[ebp-4]"
"	      004b2179    push eax"
"	      004b217a    push 0"
"	      004b217c    push 0"
"	      004b217e    mov eax,[ebp-0Ch]"
"	      004b2181    push eax"
"	      004b2182    mov eax,[ebp-10h]"
"	      004b2185    push eax"
"	      004b2186    mov eax,[ebp-14h]"
"	      004b2189    mov eax,[eax+44h]"
"	      004b218c    push eax"
"	      004b218d    mov eax,[ebp-14h]"
"	      004b2190    mov ecx,[ebp-14h]"
"	      004b2193    mov ecx,[ecx+40h]"
"	      004b2196    mov edx,[ecx]"
"	      004b2198    mov ecx,[eax+40h]"
"	      004b219b    call dword ptr [edx+0Ch]"
);
// LINE 1279:
	asm( 
"	      004b219e    jmp near ptr 004B21F3h"
);
// LINE 1280:
	asm( 
"	      004b21a3    mov eax,[ebp-14h]"
"	      004b21a6    mov eax,[eax+94h]"
"	      004b21ac    mov ecx,[ebp-14h]"
"	      004b21af    add eax,[ecx+20h]"
"	      004b21b2    mov [ebp-10h],eax"
);
// LINE 1281:
	asm( 
"	      004b21b5    mov eax,[ebp-14h]"
"	      004b21b8    mov eax,[eax+98h]"
"	      004b21be    mov ecx,[ebp-14h]"
"	      004b21c1    add eax,[ecx+24h]"
"	      004b21c4    mov [ebp-0Ch],eax"
);
// LINE 1282:
	asm( 
"	      004b21c7    mov eax,[ebp-8]"
"	      004b21ca    push eax"
"	      004b21cb    mov eax,[ebp-4]"
"	      004b21ce    push eax"
"	      004b21cf    push 0"
"	      004b21d1    push 0"
"	      004b21d3    mov eax,[ebp-0Ch]"
"	      004b21d6    push eax"
"	      004b21d7    mov eax,[ebp-10h]"
"	      004b21da    push eax"
"	      004b21db    mov eax,[ebp-14h]"
"	      004b21de    mov eax,[eax+44h]"
"	      004b21e1    push eax"
"	      004b21e2    mov eax,[ebp-14h]"
"	      004b21e5    mov ecx,[ebp-14h]"
"	      004b21e8    mov ecx,[ecx+40h]"
"	      004b21eb    mov edx,[ecx]"
"	      004b21ed    mov ecx,[eax+40h]"
"	      004b21f0    call dword ptr [edx+0Ch]"
);
// LINE 1284:
	asm( 
"	      004b21f3    mov eax,1"
"	      004b21f8    jmp near ptr 004B21FDh"
);
// LINE 1285:
	asm( 
"	      004b21fd    pop edi"
"	      004b21fe    pop esi"
"	      004b21ff    pop ebx"
"	      004b2200    leave"
"	      004b2201    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b2202
long SliderWindow::DoCursorDown(long, long, unsigned long) {
// LINE 1292:
	asm( 
"	      004b2202    push ebp"
"	      004b2203    mov ebp,esp"
"	      004b2205    sub esp,8"
"	      004b2208    push ebx"
"	      004b2209    push esi"
"	      004b220a    push edi"
"	      004b220b    mov [ebp-8],ecx"
);
// LINE 1295:
	asm( 
"	      004b220e    mov eax,[ebp-8]"
"	      004b2211    push eax"
"	      004b2212    mov eax,[ebp-8]"
"	      004b2215    mov eax,[eax]"
"	      004b2217    mov ecx,[ebp-8]"
"	      004b221a    call dword ptr [eax+98h]"
);
// LINE 1296:
	asm( 
"	      004b2220    mov eax,[ebp+0Ch]"
"	      004b2223    push eax"
"	      004b2224    mov eax,[ebp+8]"
"	      004b2227    push eax"
"	      004b2228    lea eax,[ebp-4]"
"	      004b222b    push eax"
"	      004b222c    mov eax,[ebp-8]"
"	      004b222f    mov eax,[eax]"
"	      004b2231    mov ecx,[ebp-8]"
"	      004b2234    call dword ptr [eax+0C4h]"
"	      004b223a    test eax,eax"
"	      004b223c    je near ptr 004B224Eh"
);
// LINE 1297:
	asm( 
"	      004b2242    mov eax,[ebp-4]"
"	      004b2245    push eax"
"	      004b2246    mov ecx,[ebp-8]"
"	      004b2249    call 004B273Ah"
);
// LINE 1299:
	asm( 
"	      004b224e    mov eax,[ebp-8]"
"	      004b2251    push eax"
"	      004b2252    call 004A7470h"
"	      004b2257    add esp,4"
);
// LINE 1300:
	asm( 
"	      004b225a    mov eax,1"
"	      004b225f    jmp near ptr 004B2264h"
);
// LINE 1301:
	asm( 
"	      004b2264    pop edi"
"	      004b2265    pop esi"
"	      004b2266    pop ebx"
"	      004b2267    leave"
"	      004b2268    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b226b
long SliderWindow::DoCursorUp(long, long, unsigned long) {
// LINE 1307:
	asm( 
"	      004b226b    push ebp"
"	      004b226c    mov ebp,esp"
"	      004b226e    sub esp,0Ch"
"	      004b2271    push ebx"
"	      004b2272    push esi"
"	      004b2273    push edi"
"	      004b2274    mov [ebp-0Ch],ecx"
);
// LINE 1310:
	asm( 
"	      004b2277    mov eax,ds:[59A960h]"
"	      004b227c    cmp [ebp-0Ch],eax"
"	      004b227f    jne near ptr 004B228Ah"
"	      004b2285    jmp near ptr 004B228Fh"
"	      004b228a    jmp near ptr 004B22DEh"
"	      004b228f    jmp near ptr 004B229Eh"
"	      004b2294    cmp dword ptr [ebp-8],0"
"	      004b2298    je near ptr 004B22DEh"
);
// LINE 1311:
	asm( 
"	      004b229e    mov eax,[ebp-0Ch]"
"	      004b22a1    push eax"
"	      004b22a2    mov eax,[ebp-0Ch]"
"	      004b22a5    mov eax,[eax]"
"	      004b22a7    mov ecx,[ebp-0Ch]"
"	      004b22aa    call dword ptr [eax+9Ch]"
);
// LINE 1312:
	asm( 
"	      004b22b0    mov eax,[ebp+0Ch]"
"	      004b22b3    push eax"
"	      004b22b4    mov eax,[ebp+8]"
"	      004b22b7    push eax"
"	      004b22b8    lea eax,[ebp-4]"
"	      004b22bb    push eax"
"	      004b22bc    mov eax,[ebp-0Ch]"
"	      004b22bf    mov eax,[eax]"
"	      004b22c1    mov ecx,[ebp-0Ch]"
"	      004b22c4    call dword ptr [eax+0C4h]"
"	      004b22ca    test eax,eax"
"	      004b22cc    je near ptr 004B22DEh"
);
// LINE 1313:
	asm( 
"	      004b22d2    mov eax,[ebp-4]"
"	      004b22d5    push eax"
"	      004b22d6    mov ecx,[ebp-0Ch]"
"	      004b22d9    call 004B273Ah"
);
// LINE 1315:
	asm( 
"	      004b22de    mov eax,1"
"	      004b22e3    jmp near ptr 004B22E8h"
);
// LINE 1316:
	asm( 
"	      004b22e8    pop edi"
"	      004b22e9    pop esi"
"	      004b22ea    pop ebx"
"	      004b22eb    leave"
"	      004b22ec    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b22ef
long SliderWindow::DoCursorMove(long, long) {
// LINE 1323:
	asm( 
"	      004b22ef    push ebp"
"	      004b22f0    mov ebp,esp"
"	      004b22f2    sub esp,0Ch"
"	      004b22f5    push ebx"
"	      004b22f6    push esi"
"	      004b22f7    push edi"
"	      004b22f8    mov [ebp-0Ch],ecx"
);
// LINE 1326:
	asm( 
"	      004b22fb    mov eax,ds:[59A960h]"
"	      004b2300    cmp [ebp-0Ch],eax"
"	      004b2303    jne near ptr 004B230Eh"
"	      004b2309    jmp near ptr 004B2313h"
"	      004b230e    jmp near ptr 004B2350h"
"	      004b2313    jmp near ptr 004B2322h"
"	      004b2318    cmp dword ptr [ebp-8],0"
"	      004b231c    je near ptr 004B2350h"
);
// LINE 1327:
	asm( 
"	      004b2322    mov eax,[ebp+0Ch]"
"	      004b2325    push eax"
"	      004b2326    mov eax,[ebp+8]"
"	      004b2329    push eax"
"	      004b232a    lea eax,[ebp-4]"
"	      004b232d    push eax"
"	      004b232e    mov eax,[ebp-0Ch]"
"	      004b2331    mov eax,[eax]"
"	      004b2333    mov ecx,[ebp-0Ch]"
"	      004b2336    call dword ptr [eax+0C4h]"
"	      004b233c    test eax,eax"
"	      004b233e    je near ptr 004B2350h"
);
// LINE 1328:
	asm( 
"	      004b2344    mov eax,[ebp-4]"
"	      004b2347    push eax"
"	      004b2348    mov ecx,[ebp-0Ch]"
"	      004b234b    call 004B273Ah"
);
// LINE 1330:
	asm( 
"	      004b2350    mov eax,1"
"	      004b2355    jmp near ptr 004B235Ah"
);
// LINE 1331:
	asm( 
"	      004b235a    pop edi"
"	      004b235b    pop esi"
"	      004b235c    pop ebx"
"	      004b235d    leave"
"	      004b235e    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b2361
int32_t SliderWindow::ConvertCursorPositionToValue(long&, long, long) {
// LINE 1346:
	asm( 
"	      004b2361    push ebp"
"	      004b2362    mov ebp,esp"
"	      004b2364    sub esp,10h"
"	      004b2367    push ebx"
"	      004b2368    push esi"
"	      004b2369    push edi"
"	      004b236a    mov [ebp-10h],ecx"
);
// LINE 1351:
	asm( 
"	      004b236d    mov eax,[ebp-10h]"
"	      004b2370    mov eax,[eax+8Ch]"
"	      004b2376    mov ecx,[ebp-10h]"
"	      004b2379    sub eax,[ecx+84h]"
"	      004b237f    mov [ebp-8],eax"
);
// LINE 1352:
	asm( 
"	      004b2382    mov eax,[ebp-10h]"
"	      004b2385    mov eax,[eax+7Ch]"
"	      004b2388    mov ecx,[ebp-10h]"
"	      004b238b    sub eax,[ecx+78h]"
"	      004b238e    mov [ebp-4],eax"
);
// LINE 1354:
	asm( 
"	      004b2391    mov eax,[ebp-10h]"
"	      004b2394    cmp dword ptr [eax+74h],0"
"	      004b2398    jne near ptr 004B2407h"
);
// LINE 1355:
	asm( 
"	      004b239e    mov eax,[ebp+0Ch]"
"	      004b23a1    mov [ebp-0Ch],eax"
);
// LINE 1356:
	asm( 
"	      004b23a4    mov eax,[ebp-10h]"
"	      004b23a7    mov ecx,[ebp-0Ch]"
"	      004b23aa    cmp [eax+90h],ecx"
"	      004b23b0    jle near ptr 004B23C2h"
);
// LINE 1357:
	asm( 
"	      004b23b6    mov eax,[ebp-10h]"
"	      004b23b9    mov eax,[eax+90h]"
"	      004b23bf    mov [ebp-0Ch],eax"
);
// LINE 1358:
	asm( 
"	      004b23c2    jmp near ptr 004B23C7h"
"	      004b23c7    mov eax,[ebp-10h]"
"	      004b23ca    mov eax,[eax+18h]"
"	      004b23cd    mov ecx,[ebp-10h]"
"	      004b23d0    sub eax,[ecx+10h]"
"	      004b23d3    mov ecx,[ebp-10h]"
"	      004b23d6    sub eax,[ecx+90h]"
"	      004b23dc    cmp eax,[ebp-0Ch]"
"	      004b23df    jge near ptr 004B2402h"
);
// LINE 1359:
	asm( 
"	      004b23e5    jmp near ptr 004B23EAh"
"	      004b23ea    mov eax,[ebp-10h]"
"	      004b23ed    mov eax,[eax+18h]"
"	      004b23f0    mov ecx,[ebp-10h]"
"	      004b23f3    sub eax,[ecx+10h]"
"	      004b23f6    mov ecx,[ebp-10h]"
"	      004b23f9    sub eax,[ecx+90h]"
"	      004b23ff    mov [ebp-0Ch],eax"
);
// LINE 1361:
	asm( 
"	      004b2402    jmp near ptr 004B246Bh"
);
// LINE 1362:
	asm( 
"	      004b2407    mov eax,[ebp+10h]"
"	      004b240a    mov [ebp-0Ch],eax"
);
// LINE 1363:
	asm( 
"	      004b240d    mov eax,[ebp-10h]"
"	      004b2410    mov ecx,[ebp-0Ch]"
"	      004b2413    cmp [eax+90h],ecx"
"	      004b2419    jle near ptr 004B242Bh"
);
// LINE 1364:
	asm( 
"	      004b241f    mov eax,[ebp-10h]"
"	      004b2422    mov eax,[eax+90h]"
"	      004b2428    mov [ebp-0Ch],eax"
);
// LINE 1365:
	asm( 
"	      004b242b    jmp near ptr 004B2430h"
"	      004b2430    mov eax,[ebp-10h]"
"	      004b2433    mov eax,[eax+1Ch]"
"	      004b2436    mov ecx,[ebp-10h]"
"	      004b2439    sub eax,[ecx+14h]"
"	      004b243c    mov ecx,[ebp-10h]"
"	      004b243f    sub eax,[ecx+90h]"
"	      004b2445    cmp eax,[ebp-0Ch]"
"	      004b2448    jge near ptr 004B246Bh"
);
// LINE 1366:
	asm( 
"	      004b244e    jmp near ptr 004B2453h"
"	      004b2453    mov eax,[ebp-10h]"
"	      004b2456    mov eax,[eax+1Ch]"
"	      004b2459    mov ecx,[ebp-10h]"
"	      004b245c    sub eax,[ecx+14h]"
"	      004b245f    mov ecx,[ebp-10h]"
"	      004b2462    sub eax,[ecx+90h]"
"	      004b2468    mov [ebp-0Ch],eax"
);
// LINE 1368:
	asm( 
"	      004b246b    mov eax,[ebp-0Ch]"
"	      004b246e    mov ecx,[ebp-10h]"
"	      004b2471    sub eax,[ecx+84h]"
"	      004b2477    imul eax,[ebp-4]"
"	      004b247b    cdq"
"	      004b247c    idiv dword ptr [ebp-8]"
"	      004b247f    mov ecx,[ebp+8]"
"	      004b2482    mov [ecx],eax"
);
// LINE 1369:
	asm( 
"	      004b2484    mov eax,[ebp-10h]"
"	      004b2487    mov eax,[eax+78h]"
"	      004b248a    mov ecx,[ebp+8]"
"	      004b248d    add [ecx],eax"
);
// LINE 1370:
	asm( 
"	      004b248f    mov eax,1"
"	      004b2494    jmp near ptr 004B2499h"
);
// LINE 1371:
	asm( 
"	      004b2499    pop edi"
"	      004b249a    pop esi"
"	      004b249b    pop ebx"
"	      004b249c    leave"
"	      004b249d    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b24a0
void SliderWindow::CalculateAllMetrics() {
// LINE 1379:
	asm( 
"	      004b24a0    push ebp"
"	      004b24a1    mov ebp,esp"
"	      004b24a3    sub esp,4"
"	      004b24a6    push ebx"
"	      004b24a7    push esi"
"	      004b24a8    push edi"
"	      004b24a9    mov [ebp-4],ecx"
);
// LINE 1382:
	asm( 
"	      004b24ac    mov eax,[ebp-4]"
"	      004b24af    cmp dword ptr [eax+74h],0"
"	      004b24b3    jne near ptr 004B2503h"
);
// LINE 1383:
	asm( 
"	      004b24b9    mov eax,[ebp-4]"
"	      004b24bc    mov eax,[eax+90h]"
"	      004b24c2    mov ecx,[ebp-4]"
"	      004b24c5    mov [ecx+84h],eax"
);
// LINE 1384:
	asm( 
"	      004b24cb    jmp near ptr 004B24D0h"
"	      004b24d0    mov eax,[ebp-4]"
"	      004b24d3    mov ebx,[eax+18h]"
"	      004b24d6    mov eax,[ebp-4]"
"	      004b24d9    sub ebx,[eax+10h]"
"	      004b24dc    mov eax,[ebp-4]"
"	      004b24df    mov eax,[eax]"
"	      004b24e1    mov ecx,[ebp-4]"
"	      004b24e4    call dword ptr [eax+0D0h]"
"	      004b24ea    sub ebx,eax"
"	      004b24ec    mov eax,[ebp-4]"
"	      004b24ef    sub ebx,[eax+90h]"
"	      004b24f5    mov eax,[ebp-4]"
"	      004b24f8    mov [eax+8Ch],ebx"
);
// LINE 1386:
	asm( 
"	      004b24fe    jmp near ptr 004B2548h"
);
// LINE 1388:
	asm( 
"	      004b2503    jmp near ptr 004B2508h"
"	      004b2508    mov eax,[ebp-4]"
"	      004b250b    mov ebx,[eax+1Ch]"
"	      004b250e    mov eax,[ebp-4]"
"	      004b2511    sub ebx,[eax+14h]"
"	      004b2514    mov eax,[ebp-4]"
"	      004b2517    mov eax,[eax]"
"	      004b2519    mov ecx,[ebp-4]"
"	      004b251c    call dword ptr [eax+0D4h]"
"	      004b2522    sub ebx,eax"
"	      004b2524    mov eax,[ebp-4]"
"	      004b2527    sub ebx,[eax+90h]"
"	      004b252d    mov eax,[ebp-4]"
"	      004b2530    mov [eax+84h],ebx"
);
// LINE 1389:
	asm( 
"	      004b2536    mov eax,[ebp-4]"
"	      004b2539    mov eax,[eax+90h]"
"	      004b253f    mov ecx,[ebp-4]"
"	      004b2542    mov [ecx+8Ch],eax"
);
// LINE 1391:
	asm( 
"	      004b2548    mov eax,[ebp-4]"
"	      004b254b    mov eax,[eax]"
"	      004b254d    mov ecx,[ebp-4]"
"	      004b2550    call dword ptr [eax+0C8h]"
);
// LINE 1392:
	asm( 
"	      004b2556    jmp near ptr 004B255Bh"
"	      004b255b    pop edi"
"	      004b255c    pop esi"
"	      004b255d    pop ebx"
"	      004b255e    leave"
"	      004b255f    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b2560
void SliderWindow::CalculateThumbPosition() {
// LINE 1400:
	asm( 
"	      004b2560    push ebp"
"	      004b2561    mov ebp,esp"
"	      004b2563    sub esp,0Ch"
"	      004b2566    push ebx"
"	      004b2567    push esi"
"	      004b2568    push edi"
"	      004b2569    mov [ebp-0Ch],ecx"
);
// LINE 1406:
	asm( 
"	      004b256c    mov eax,[ebp-0Ch]"
"	      004b256f    mov eax,[eax+7Ch]"
"	      004b2572    mov ecx,[ebp-0Ch]"
"	      004b2575    sub eax,[ecx+78h]"
"	      004b2578    mov [ebp-4],eax"
);
// LINE 1407:
	asm( 
"	      004b257b    cmp dword ptr [ebp-4],0"
"	      004b257f    jne near ptr 004B259Ch"
);
// LINE 1408:
	asm( 
"	      004b2585    mov eax,[ebp-0Ch]"
"	      004b2588    mov eax,[eax+84h]"
"	      004b258e    mov ecx,[ebp-0Ch]"
"	      004b2591    mov [ecx+88h],eax"
);
// LINE 1410:
	asm( 
"	      004b2597    jmp near ptr 004B25E3h"
);
// LINE 1411:
	asm( 
"	      004b259c    mov eax,[ebp-0Ch]"
"	      004b259f    mov eax,[eax+8Ch]"
"	      004b25a5    mov ecx,[ebp-0Ch]"
"	      004b25a8    sub eax,[ecx+84h]"
"	      004b25ae    mov [ebp-8],eax"
);
// LINE 1412:
	asm( 
"	      004b25b1    mov eax,[ebp-0Ch]"
"	      004b25b4    mov eax,[eax+80h]"
"	      004b25ba    mov ecx,[ebp-0Ch]"
"	      004b25bd    sub eax,[ecx+78h]"
"	      004b25c0    imul eax,[ebp-8]"
"	      004b25c4    cdq"
"	      004b25c5    idiv dword ptr [ebp-4]"
"	      004b25c8    mov ecx,[ebp-0Ch]"
"	      004b25cb    mov [ecx+88h],eax"
);
// LINE 1413:
	asm( 
"	      004b25d1    mov eax,[ebp-0Ch]"
"	      004b25d4    mov eax,[eax+84h]"
"	      004b25da    mov ecx,[ebp-0Ch]"
"	      004b25dd    add [ecx+88h],eax"
);
// LINE 1419:
	asm( 
"	      004b25e3    mov eax,[ebp-0Ch]"
"	      004b25e6    cmp dword ptr [eax+74h],0"
"	      004b25ea    jne near ptr 004B2683h"
);
// LINE 1420:
	asm( 
"	      004b25f0    mov eax,[ebp-0Ch]"
"	      004b25f3    mov eax,[eax+88h]"
"	      004b25f9    mov ecx,[ebp-0Ch]"
"	      004b25fc    mov [ecx+94h],eax"
);
// LINE 1421:
	asm( 
"	      004b2602    mov eax,[ebp-0Ch]"
"	      004b2605    mov eax,[eax]"
"	      004b2607    mov ecx,[ebp-0Ch]"
"	      004b260a    call dword ptr [eax+0D0h]"
"	      004b2610    mov ecx,[ebp-0Ch]"
"	      004b2613    mov ecx,[ecx+94h]"
"	      004b2619    add ecx,eax"
"	      004b261b    mov eax,[ebp-0Ch]"
"	      004b261e    mov [eax+9Ch],ecx"
);
// LINE 1422:
	asm( 
"	      004b2624    jmp near ptr 004B2629h"
"	      004b2629    mov eax,[ebp-0Ch]"
"	      004b262c    mov eax,[eax+1Ch]"
"	      004b262f    mov ecx,[ebp-0Ch]"
"	      004b2632    sub eax,[ecx+14h]"
"	      004b2635    cdq"
"	      004b2636    sub eax,edx"
"	      004b2638    sar eax,1"
"	      004b263b    mov ebx,eax"
"	      004b263d    mov eax,[ebp-0Ch]"
"	      004b2640    mov eax,[eax]"
"	      004b2642    mov ecx,[ebp-0Ch]"
"	      004b2645    call dword ptr [eax+0D4h]"
"	      004b264b    cdq"
"	      004b264c    sub eax,edx"
"	      004b264e    sar eax,1"
"	      004b2651    sub ebx,eax"
"	      004b2653    mov eax,[ebp-0Ch]"
"	      004b2656    mov [eax+98h],ebx"
);
// LINE 1423:
	asm( 
"	      004b265c    mov eax,[ebp-0Ch]"
"	      004b265f    mov eax,[eax]"
"	      004b2661    mov ecx,[ebp-0Ch]"
"	      004b2664    call dword ptr [eax+0D4h]"
"	      004b266a    mov ecx,[ebp-0Ch]"
"	      004b266d    mov ecx,[ecx+98h]"
"	      004b2673    add ecx,eax"
"	      004b2675    mov eax,[ebp-0Ch]"
"	      004b2678    mov [eax+0A0h],ecx"
);
// LINE 1425:
	asm( 
"	      004b267e    jmp near ptr 004B2711h"
);
// LINE 1426:
	asm( 
"	      004b2683    jmp near ptr 004B2688h"
"	      004b2688    mov eax,[ebp-0Ch]"
"	      004b268b    mov eax,[eax+18h]"
"	      004b268e    mov ecx,[ebp-0Ch]"
"	      004b2691    sub eax,[ecx+10h]"
"	      004b2694    cdq"
"	      004b2695    sub eax,edx"
"	      004b2697    sar eax,1"
"	      004b269a    mov ebx,eax"
"	      004b269c    mov eax,[ebp-0Ch]"
"	      004b269f    mov eax,[eax]"
"	      004b26a1    mov ecx,[ebp-0Ch]"
"	      004b26a4    call dword ptr [eax+0D0h]"
"	      004b26aa    cdq"
"	      004b26ab    sub eax,edx"
"	      004b26ad    sar eax,1"
"	      004b26b0    sub ebx,eax"
"	      004b26b2    mov eax,[ebp-0Ch]"
"	      004b26b5    mov [eax+94h],ebx"
);
// LINE 1427:
	asm( 
"	      004b26bb    mov eax,[ebp-0Ch]"
"	      004b26be    mov eax,[eax]"
"	      004b26c0    mov ecx,[ebp-0Ch]"
"	      004b26c3    call dword ptr [eax+0D0h]"
"	      004b26c9    mov ecx,[ebp-0Ch]"
"	      004b26cc    mov ecx,[ecx+94h]"
"	      004b26d2    add ecx,eax"
"	      004b26d4    mov eax,[ebp-0Ch]"
"	      004b26d7    mov [eax+9Ch],ecx"
);
// LINE 1428:
	asm( 
"	      004b26dd    mov eax,[ebp-0Ch]"
"	      004b26e0    mov eax,[eax+88h]"
"	      004b26e6    mov ecx,[ebp-0Ch]"
"	      004b26e9    mov [ecx+98h],eax"
);
// LINE 1429:
	asm( 
"	      004b26ef    mov eax,[ebp-0Ch]"
"	      004b26f2    mov eax,[eax]"
"	      004b26f4    mov ecx,[ebp-0Ch]"
"	      004b26f7    call dword ptr [eax+0D4h]"
"	      004b26fd    mov ecx,[ebp-0Ch]"
"	      004b2700    mov ecx,[ecx+98h]"
"	      004b2706    add ecx,eax"
"	      004b2708    mov eax,[ebp-0Ch]"
"	      004b270b    mov [eax+0A0h],ecx"
);
// LINE 1431:
	asm( 
"	      004b2711    jmp near ptr 004B2716h"
"	      004b2716    pop edi"
"	      004b2717    pop esi"
"	      004b2718    pop ebx"
"	      004b2719    leave"
"	      004b271a    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b271b
long SliderWindow::GetValue() {
// LINE 1438:
	asm( 
"	      004b271b    push ebp"
"	      004b271c    mov ebp,esp"
"	      004b271e    sub esp,4"
"	      004b2721    push ebx"
"	      004b2722    push esi"
"	      004b2723    push edi"
"	      004b2724    mov [ebp-4],ecx"
);
// LINE 1439:
	asm( 
"	      004b2727    mov eax,[ebp-4]"
"	      004b272a    mov eax,[eax+80h]"
"	      004b2730    jmp near ptr 004B2735h"
);
// LINE 1440:
	asm( 
"	      004b2735    pop edi"
"	      004b2736    pop esi"
"	      004b2737    pop ebx"
"	      004b2738    leave"
"	      004b2739    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b273a
void SliderWindow::SetValue(long) {
// LINE 1447:
	asm( 
"	      004b273a    push ebp"
"	      004b273b    mov ebp,esp"
"	      004b273d    sub esp,4"
"	      004b2740    push ebx"
"	      004b2741    push esi"
"	      004b2742    push edi"
"	      004b2743    mov [ebp-4],ecx"
);
// LINE 1448:
	asm( 
"	      004b2746    mov eax,[ebp-4]"
"	      004b2749    cmp dword ptr [eax+0B0h],0"
"	      004b2750    je near ptr 004B275Bh"
);
// LINE 1449:
	asm( 
"	      004b2756    jmp near ptr 004B282Dh"
);
// LINE 1450:
	asm( 
"	      004b275b    mov eax,[ebp-4]"
"	      004b275e    mov dword ptr [eax+0B0h],1"
);
// LINE 1452:
	asm( 
"	      004b2768    mov eax,[ebp-4]"
"	      004b276b    mov ecx,[ebp+8]"
"	      004b276e    cmp [eax+80h],ecx"
"	      004b2774    jne near ptr 004B278Ch"
);
// LINE 1453:
	asm( 
"	      004b277a    mov eax,[ebp-4]"
"	      004b277d    mov dword ptr [eax+0B0h],0"
);
// LINE 1454:
	asm( 
"	      004b2787    jmp near ptr 004B282Dh"
);
// LINE 1456:
	asm( 
"	      004b278c    mov eax,[ebp-4]"
"	      004b278f    mov ecx,[ebp+8]"
"	      004b2792    cmp [eax+7Ch],ecx"
"	      004b2795    jge near ptr 004B27A4h"
);
// LINE 1457:
	asm( 
"	      004b279b    mov eax,[ebp-4]"
"	      004b279e    mov eax,[eax+7Ch]"
"	      004b27a1    mov [ebp+8],eax"
);
// LINE 1458:
	asm( 
"	      004b27a4    mov eax,[ebp-4]"
"	      004b27a7    mov ecx,[ebp+8]"
"	      004b27aa    cmp [eax+78h],ecx"
"	      004b27ad    jle near ptr 004B27BCh"
);
// LINE 1459:
	asm( 
"	      004b27b3    mov eax,[ebp-4]"
"	      004b27b6    mov eax,[eax+78h]"
"	      004b27b9    mov [ebp+8],eax"
);
// LINE 1460:
	asm( 
"	      004b27bc    mov eax,[ebp+8]"
"	      004b27bf    mov ecx,[ebp-4]"
"	      004b27c2    mov [ecx+80h],eax"
);
// LINE 1462:
	asm( 
"	      004b27c8    push 1"
"	      004b27ca    push 1"
"	      004b27cc    mov eax,[ebp-4]"
"	      004b27cf    mov eax,[eax]"
"	      004b27d1    mov ecx,[ebp-4]"
"	      004b27d4    call dword ptr [eax+30h]"
);
// LINE 1463:
	asm( 
"	      004b27d7    mov eax,[ebp-4]"
"	      004b27da    mov eax,[eax]"
"	      004b27dc    mov ecx,[ebp-4]"
"	      004b27df    call dword ptr [eax+0C8h]"
);
// LINE 1464:
	asm( 
"	      004b27e5    mov eax,[ebp-4]"
"	      004b27e8    cmp dword ptr [eax+38h],0"
"	      004b27ec    je near ptr 004B281Bh"
);
// LINE 1465:
	asm( 
"	      004b27f2    mov eax,[ebp-4]"
"	      004b27f5    add eax,80h"
"	      004b27fa    push eax"
"	      004b27fb    push 10001h"
"	      004b2800    mov eax,[ebp-4]"
"	      004b2803    mov eax,[eax+4]"
"	      004b2806    push eax"
"	      004b2807    mov eax,[ebp-4]"
"	      004b280a    push eax"
"	      004b280b    mov eax,[ebp-4]"
"	      004b280e    mov ecx,[ebp-4]"
"	      004b2811    mov ecx,[ecx+38h]"
"	      004b2814    mov edx,[ecx]"
"	      004b2816    mov ecx,[eax+38h]"
"	      004b2819    call dword ptr [edx]"
);
// LINE 1466:
	asm( 
"	      004b281b    mov eax,[ebp-4]"
"	      004b281e    mov dword ptr [eax+0B0h],0"
);
// LINE 1467:
	asm( 
"	      004b2828    jmp near ptr 004B282Dh"
"	      004b282d    pop edi"
"	      004b282e    pop esi"
"	      004b282f    pop ebx"
"	      004b2830    leave"
"	      004b2831    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b2834
void SliderWindow::SetMinimumValue(long) {
// LINE 1472:
	asm( 
"	      004b2834    push ebp"
"	      004b2835    mov ebp,esp"
"	      004b2837    sub esp,4"
"	      004b283a    push ebx"
"	      004b283b    push esi"
"	      004b283c    push edi"
"	      004b283d    mov [ebp-4],ecx"
);
// LINE 1473:
	asm( 
"	      004b2840    mov eax,[ebp+8]"
"	      004b2843    mov ecx,[ebp-4]"
"	      004b2846    mov [ecx+78h],eax"
);
// LINE 1474:
	asm( 
"	      004b2849    push 1"
"	      004b284b    push 1"
"	      004b284d    mov eax,[ebp-4]"
"	      004b2850    mov eax,[eax]"
"	      004b2852    mov ecx,[ebp-4]"
"	      004b2855    call dword ptr [eax+30h]"
);
// LINE 1475:
	asm( 
"	      004b2858    mov eax,[ebp-4]"
"	      004b285b    mov eax,[eax]"
"	      004b285d    mov ecx,[ebp-4]"
"	      004b2860    call dword ptr [eax+0CCh]"
);
// LINE 1476:
	asm( 
"	      004b2866    jmp near ptr 004B286Bh"
"	      004b286b    pop edi"
"	      004b286c    pop esi"
"	      004b286d    pop ebx"
"	      004b286e    leave"
"	      004b286f    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b2872
void SliderWindow::SetMaximumValue(long) {
// LINE 1481:
	asm( 
"	      004b2872    push ebp"
"	      004b2873    mov ebp,esp"
"	      004b2875    sub esp,4"
"	      004b2878    push ebx"
"	      004b2879    push esi"
"	      004b287a    push edi"
"	      004b287b    mov [ebp-4],ecx"
);
// LINE 1482:
	asm( 
"	      004b287e    mov eax,[ebp+8]"
"	      004b2881    mov ecx,[ebp-4]"
"	      004b2884    mov [ecx+7Ch],eax"
);
// LINE 1483:
	asm( 
"	      004b2887    push 1"
"	      004b2889    push 1"
"	      004b288b    mov eax,[ebp-4]"
"	      004b288e    mov eax,[eax]"
"	      004b2890    mov ecx,[ebp-4]"
"	      004b2893    call dword ptr [eax+30h]"
);
// LINE 1484:
	asm( 
"	      004b2896    mov eax,[ebp-4]"
"	      004b2899    mov eax,[eax]"
"	      004b289b    mov ecx,[ebp-4]"
"	      004b289e    call dword ptr [eax+0CCh]"
);
// LINE 1485:
	asm( 
"	      004b28a4    jmp near ptr 004B28A9h"
"	      004b28a9    pop edi"
"	      004b28aa    pop esi"
"	      004b28ab    pop ebx"
"	      004b28ac    leave"
"	      004b28ad    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b28b0
long SliderWindow::GetThumbWidth() {
// LINE 1495:
	asm( 
"	      004b28b0    push ebp"
"	      004b28b1    mov ebp,esp"
"	      004b28b3    sub esp,4"
"	      004b28b6    push ebx"
"	      004b28b7    push esi"
"	      004b28b8    push edi"
"	      004b28b9    mov [ebp-4],ecx"
);
// LINE 1496:
	asm( 
"	      004b28bc    jmp near ptr 004B28C1h"
"	      004b28c1    mov eax,[ebp-4]"
"	      004b28c4    mov eax,[eax+40h]"
"	      004b28c7    mov eax,[eax+8]"
"	      004b28ca    jmp near ptr 004B28CFh"
);
// LINE 1497:
	asm( 
"	      004b28cf    pop edi"
"	      004b28d0    pop esi"
"	      004b28d1    pop ebx"
"	      004b28d2    leave"
"	      004b28d3    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b28d4
long SliderWindow::GetThumbHeight() {
// LINE 1506:
	asm( 
"	      004b28d4    push ebp"
"	      004b28d5    mov ebp,esp"
"	      004b28d7    sub esp,4"
"	      004b28da    push ebx"
"	      004b28db    push esi"
"	      004b28dc    push edi"
"	      004b28dd    mov [ebp-4],ecx"
);
// LINE 1507:
	asm( 
"	      004b28e0    jmp near ptr 004B28E5h"
"	      004b28e5    mov eax,[ebp-4]"
"	      004b28e8    mov eax,[eax+40h]"
"	      004b28eb    mov eax,[eax+0Ch]"
"	      004b28ee    jmp near ptr 004B28F3h"
);
// LINE 1508:
	asm( 
"	      004b28f3    pop edi"
"	      004b28f4    pop esi"
"	      004b28f5    pop ebx"
"	      004b28f6    leave"
"	      004b28f7    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b28f8
void ScrollBarWindow::ScrollBarWindow() {
// LINE 1546:
	asm( 
"	      004b28f8    push ebp"
"	      004b28f9    mov ebp,esp"
"	      004b28fb    sub esp,44h"
"	      004b28fe    push ebx"
"	      004b28ff    push esi"
"	      004b2900    push edi"
"	      004b2901    mov [ebp-44h],ecx"
"	      004b2904    mov ecx,[ebp-44h]"
"	      004b2907    call 004B1134h"
"	      004b290c    mov eax,[ebp-44h]"
"	      004b290f    mov dword ptr [eax+0BCh],1"
"	      004b2919    mov eax,[ebp-44h]"
"	      004b291c    mov dword ptr [eax+0C0h],0"
"	      004b2926    mov eax,[ebp-44h]"
"	      004b2929    mov dword ptr [eax+0C4h],0"
"	      004b2933    mov eax,[ebp-44h]"
"	      004b2936    mov dword ptr [eax+0C8h],0"
"	      004b2940    mov eax,[ebp-44h]"
"	      004b2943    cmp dword ptr [eax+0BCh],0"
"	      004b294a    jne near ptr 004B2971h"
"	      004b2950    lea eax,[ebp-40h]"
"	      004b2953    push eax"
"	      004b2954    call dword ptr ds:[6C3668h]"
"	      004b295a    mov eax,[ebp-40h]"
"	      004b295d    mov [ebp-38h],eax"
"	      004b2960    mov eax,[ebp-38h]"
"	      004b2963    mov ecx,[ebp-44h]"
"	      004b2966    mov [ecx+0C8h],eax"
"	      004b296c    jmp near ptr 004B2971h"
"	      004b2971    jmp near ptr 004B2976h"
"	      004b2976    mov eax,[ebp-44h]"
"	      004b2979    mov dword ptr [eax+0D0h],1"
"	      004b2983    mov eax,[ebp-44h]"
"	      004b2986    mov dword ptr [eax],591FC0h"
);
// LINE 1547:
	asm( 
"	      004b298c    mov eax,[ebp-44h]"
"	      004b298f    mov eax,[eax+7Ch]"
"	      004b2992    mov ecx,[ebp-44h]"
"	      004b2995    sub eax,[ecx+78h]"
"	      004b2998    mov ecx,[ebp-44h]"
"	      004b299b    mov [ecx+0B8h],eax"
"	      004b29a1    mov eax,[ebp-44h]"
"	      004b29a4    mov eax,[eax+0B8h]"
"	      004b29aa    mov ecx,[ebp-44h]"
"	      004b29ad    mov [ecx+0B4h],eax"
"	      004b29b3    mov eax,ds:[59ABBCh]"
"	      004b29b8    mov [ebp-34h],eax"
);
// LINE 1548:
	asm( 
"	      004b29bb    jmp near ptr 004B29C0h"
"	      004b29c0    mov eax,[ebp-34h]"
"	      004b29c3    push eax"
"	      004b29c4    call 0056ABE0h"
"	      004b29c9    add esp,4"
"	      004b29cc    mov [ebp-30h],eax"
"	      004b29cf    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004b29d3    jne near ptr 004B2A0Bh"
"	      004b29d9    push 5971E4h"
"	      004b29de    mov ecx,638C00h"
"	      004b29e3    call 00569960h"
"	      004b29e8    mov [ebp-10h],eax"
"	      004b29eb    mov eax,[ebp-10h]"
"	      004b29ee    push eax"
"	      004b29ef    call 004011B0h"
"	      004b29f4    add esp,4"
"	      004b29f7    jmp near ptr 004B29FCh"
"	      004b29fc    push 1"
"	      004b29fe    call 00569430h"
"	      004b2a03    add esp,4"
"	      004b2a06    jmp near ptr 004B2A0Bh"
"	      004b2a0b    jmp near ptr 004B2A10h"
"	      004b2a10    mov eax,[ebp-44h]"
"	      004b2a13    mov eax,[eax+60h]"
"	      004b2a16    cmp dword ptr [eax+0Ch],1"
"	      004b2a1a    ja near ptr 004B2A41h"
"	      004b2a20    cmp dword ptr [ebp-30h],0"
"	      004b2a24    je near ptr 004B2BC2h"
"	      004b2a2a    jmp near ptr 004B2A2Fh"
"	      004b2a2f    mov eax,[ebp-44h]"
"	      004b2a32    mov eax,[eax+60h]"
"	      004b2a35    mov ecx,[ebp-30h]"
"	      004b2a38    cmp [eax+8],ecx"
"	      004b2a3b    jae near ptr 004B2BC2h"
"	      004b2a41    push 10h"
"	      004b2a43    call 0056A600h"
"	      004b2a48    add esp,4"
"	      004b2a4b    mov [ebp-8],eax"
"	      004b2a4e    cmp dword ptr [ebp-8],0"
"	      004b2a52    je near ptr 004B2B1Ch"
"	      004b2a58    cmp dword ptr [ebp-30h],0FFFFFFFFh"
"	      004b2a5c    jne near ptr 004B2A94h"
"	      004b2a62    push 5971E4h"
"	      004b2a67    mov ecx,638C00h"
"	      004b2a6c    call 00569960h"
"	      004b2a71    mov [ebp-2Ch],eax"
"	      004b2a74    mov eax,[ebp-2Ch]"
"	      004b2a77    push eax"
"	      004b2a78    call 004011B0h"
"	      004b2a7d    add esp,4"
"	      004b2a80    jmp near ptr 004B2A85h"
"	      004b2a85    push 1"
"	      004b2a87    call 00569430h"
"	      004b2a8c    add esp,4"
"	      004b2a8f    jmp near ptr 004B2A94h"
"	      004b2a94    mov eax,[ebp-30h]"
"	      004b2a97    mov ecx,[ebp-8]"
"	      004b2a9a    mov [ecx+4],eax"
"	      004b2a9d    mov eax,[ebp-8]"
"	      004b2aa0    mov eax,[eax+4]"
"	      004b2aa3    mov ecx,[ebp-8]"
"	      004b2aa6    mov [ecx+8],eax"
"	      004b2aa9    mov eax,[ebp-8]"
"	      004b2aac    cmp dword ptr [eax+8],0"
"	      004b2ab0    je near ptr 004B2AF9h"
"	      004b2ab6    mov eax,[ebp-8]"
"	      004b2ab9    mov eax,[eax+8]"
"	      004b2abc    push eax"
"	      004b2abd    call 0056A600h"
"	      004b2ac2    add esp,4"
"	      004b2ac5    mov ecx,[ebp-8]"
"	      004b2ac8    mov [ecx],eax"
"	      004b2aca    mov eax,[ebp-8]"
"	      004b2acd    mov eax,[eax+4]"
"	      004b2ad0    mov [ebp-24h],eax"
"	      004b2ad3    mov eax,[ebp-8]"
"	      004b2ad6    mov eax,[eax]"
"	      004b2ad8    mov [ebp-28h],eax"
"	      004b2adb    mov eax,[ebp-24h]"
"	      004b2ade    push eax"
"	      004b2adf    mov eax,[ebp-34h]"
"	      004b2ae2    push eax"
"	      004b2ae3    mov eax,[ebp-28h]"
"	      004b2ae6    push eax"
"	      004b2ae7    call 0056A800h"
"	      004b2aec    add esp,0Ch"
"	      004b2aef    jmp near ptr 004B2AF4h"
"	      004b2af4    jmp near ptr 004B2B02h"
"	      004b2af9    mov eax,[ebp-8]"
"	      004b2afc    mov dword ptr [eax],0"
"	      004b2b02    mov eax,[ebp-8]"
"	      004b2b05    mov dword ptr [eax+0Ch],1"
"	      004b2b0c    jmp near ptr 004B2B11h"
"	      004b2b11    mov eax,[ebp-8]"
"	      004b2b14    mov [ebp-4],eax"
"	      004b2b17    jmp near ptr 004B2B23h"
"	      004b2b1c    mov dword ptr [ebp-4],0"
"	      004b2b23    mov eax,[ebp-44h]"
"	      004b2b26    mov eax,[eax+60h]"
"	      004b2b29    dec dword ptr [eax+0Ch]"
"	      004b2b2c    mov eax,[ebp-44h]"
"	      004b2b2f    mov eax,[eax+60h]"
"	      004b2b32    cmp dword ptr [eax+0Ch],0"
"	      004b2b36    jne near ptr 004B2BAFh"
"	      004b2b3c    mov eax,[ebp-44h]"
"	      004b2b3f    mov eax,[eax+60h]"
"	      004b2b42    mov [ebp-18h],eax"
"	      004b2b45    mov eax,[ebp-18h]"
"	      004b2b48    mov [ebp-14h],eax"
"	      004b2b4b    cmp dword ptr [ebp-14h],0"
"	      004b2b4f    je near ptr 004B2BAFh"
"	      004b2b55    mov eax,[ebp-14h]"
"	      004b2b58    cmp dword ptr [eax+8],0"
"	      004b2b5c    je near ptr 004B2B8Fh"
"	      004b2b62    mov eax,[ebp-14h]"
"	      004b2b65    mov eax,[eax]"
"	      004b2b67    mov [ebp-1Ch],eax"
"	      004b2b6a    mov eax,[ebp-1Ch]"
"	      004b2b6d    mov [ebp-20h],eax"
"	      004b2b70    mov eax,[ebp-20h]"
"	      004b2b73    push eax"
"	      004b2b74    call 0056A740h"
"	      004b2b79    add esp,4"
"	      004b2b7c    mov eax,[ebp-14h]"
"	      004b2b7f    mov dword ptr [eax+8],0"
"	      004b2b86    mov eax,[ebp-14h]"
"	      004b2b89    mov dword ptr [eax],0"
"	      004b2b8f    jmp near ptr 004B2B94h"
"	      004b2b94    jmp near ptr 004B2B99h"
"	      004b2b99    mov eax,[ebp-14h]"
"	      004b2b9c    push eax"
"	      004b2b9d    call 0056A740h"
"	      004b2ba2    add esp,4"
"	      004b2ba5    jmp near ptr 004B2BAAh"
"	      004b2baa    jmp near ptr 004B2BAFh"
"	      004b2baf    jmp near ptr 004B2BB4h"
"	      004b2bb4    mov eax,[ebp-4]"
"	      004b2bb7    mov ecx,[ebp-44h]"
"	      004b2bba    mov [ecx+60h],eax"
"	      004b2bbd    jmp near ptr 004B2BF5h"
"	      004b2bc2    cmp dword ptr [ebp-30h],0"
"	      004b2bc6    je near ptr 004B2BF5h"
"	      004b2bcc    jmp near ptr 004B2BD1h"
"	      004b2bd1    mov eax,[ebp-44h]"
"	      004b2bd4    mov eax,[eax+60h]"
"	      004b2bd7    mov eax,[eax]"
"	      004b2bd9    mov [ebp-0Ch],eax"
"	      004b2bdc    mov eax,[ebp-30h]"
"	      004b2bdf    push eax"
"	      004b2be0    mov eax,[ebp-34h]"
"	      004b2be3    push eax"
"	      004b2be4    mov eax,[ebp-0Ch]"
"	      004b2be7    push eax"
"	      004b2be8    call 0056A800h"
"	      004b2bed    add esp,0Ch"
"	      004b2bf0    jmp near ptr 004B2BF5h"
"	      004b2bf5    mov eax,[ebp-30h]"
"	      004b2bf8    mov ecx,[ebp-44h]"
"	      004b2bfb    mov ecx,[ecx+60h]"
"	      004b2bfe    mov [ecx+4],eax"
"	      004b2c01    jmp near ptr 004B2C06h"
"	      004b2c06    jmp near ptr 004B2C0Bh"
);
// LINE 1549:
	asm( 
"	      004b2c0b    mov eax,[ebp-44h]"
"	      004b2c0e    mov dword ptr [eax+90h],0"
);
// LINE 1550:
	asm( 
"	      004b2c18    jmp near ptr 004B2C1Dh"
"	      004b2c1d    mov eax,[ebp-44h]"
"	      004b2c20    pop edi"
"	      004b2c21    pop esi"
"	      004b2c22    pop ebx"
"	      004b2c23    leave"
"	      004b2c24    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b2c25
void ScrollBarWindow::ScrollBarWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *) {
// LINE 1565:
	asm( 
"	      004b2c25    push ebp"
"	      004b2c26    mov ebp,esp"
"	      004b2c28    sub esp,4Ch"
"	      004b2c2b    push ebx"
"	      004b2c2c    push esi"
"	      004b2c2d    push edi"
"	      004b2c2e    mov [ebp-4Ch],ecx"
"	      004b2c31    push 8"
"	      004b2c33    push 0"
"	      004b2c35    mov eax,[ebp+20h]"
"	      004b2c38    push eax"
"	      004b2c39    mov eax,[ebp+1Ch]"
"	      004b2c3c    push eax"
"	      004b2c3d    mov eax,[ebp+18h]"
"	      004b2c40    push eax"
"	      004b2c41    mov eax,[ebp+14h]"
"	      004b2c44    push eax"
"	      004b2c45    mov eax,[ebp+10h]"
"	      004b2c48    push eax"
"	      004b2c49    mov eax,[ebp+0Ch]"
"	      004b2c4c    push eax"
"	      004b2c4d    mov eax,[ebp+8]"
"	      004b2c50    push eax"
"	      004b2c51    mov ecx,[ebp-4Ch]"
"	      004b2c54    call 004B1256h"
"	      004b2c59    mov eax,[ebp-4Ch]"
"	      004b2c5c    mov dword ptr [eax+0BCh],1"
"	      004b2c66    mov eax,[ebp-4Ch]"
"	      004b2c69    mov dword ptr [eax+0C0h],0"
"	      004b2c73    mov eax,[ebp-4Ch]"
"	      004b2c76    mov dword ptr [eax+0C4h],0"
"	      004b2c80    mov eax,[ebp-4Ch]"
"	      004b2c83    mov dword ptr [eax+0C8h],0"
"	      004b2c8d    mov eax,[ebp-4Ch]"
"	      004b2c90    cmp dword ptr [eax+0BCh],0"
"	      004b2c97    jne near ptr 004B2CBEh"
"	      004b2c9d    lea eax,[ebp-48h]"
"	      004b2ca0    push eax"
"	      004b2ca1    call dword ptr ds:[6C3668h]"
"	      004b2ca7    mov eax,[ebp-48h]"
"	      004b2caa    mov [ebp-40h],eax"
"	      004b2cad    mov eax,[ebp-40h]"
"	      004b2cb0    mov ecx,[ebp-4Ch]"
"	      004b2cb3    mov [ecx+0C8h],eax"
"	      004b2cb9    jmp near ptr 004B2CBEh"
"	      004b2cbe    jmp near ptr 004B2CC3h"
"	      004b2cc3    mov eax,[ebp-4Ch]"
"	      004b2cc6    mov dword ptr [eax+0D0h],1"
"	      004b2cd0    mov eax,[ebp-4Ch]"
"	      004b2cd3    mov dword ptr [eax],591FC0h"
);
// LINE 1566:
	asm( 
"	      004b2cd9    mov eax,[ebp-4Ch]"
"	      004b2cdc    mov eax,[eax+7Ch]"
"	      004b2cdf    mov ecx,[ebp-4Ch]"
"	      004b2ce2    sub eax,[ecx+78h]"
"	      004b2ce5    mov ecx,[ebp-4Ch]"
"	      004b2ce8    mov [ecx+0B8h],eax"
"	      004b2cee    mov eax,[ebp-4Ch]"
"	      004b2cf1    mov eax,[eax+0B8h]"
"	      004b2cf7    mov ecx,[ebp-4Ch]"
"	      004b2cfa    mov [ecx+0B4h],eax"
);
// LINE 1567:
	asm( 
"	      004b2d00    mov eax,[ebp-4Ch]"
"	      004b2d03    mov dword ptr [eax+90h],0"
);
// LINE 1569:
	asm( 
"	      004b2d0d    cmp dword ptr [ebp+20h],0"
"	      004b2d11    je near ptr 004B2E89h"
);
// LINE 1570:
	asm( 
"	      004b2d17    jmp near ptr 004B2D1Ch"
"	      004b2d1c    mov eax,[ebp+20h]"
"	      004b2d1f    push eax"
"	      004b2d20    call 0056ABE0h"
"	      004b2d25    add esp,4"
"	      004b2d28    mov [ebp-1Ch],eax"
"	      004b2d2b    cmp dword ptr [ebp-1Ch],0FFFFFFFFh"
"	      004b2d2f    jne near ptr 004B2D67h"
"	      004b2d35    push 5971E4h"
"	      004b2d3a    mov ecx,638C00h"
"	      004b2d3f    call 00569960h"
"	      004b2d44    mov [ebp-10h],eax"
"	      004b2d47    mov eax,[ebp-10h]"
"	      004b2d4a    push eax"
"	      004b2d4b    call 004011B0h"
"	      004b2d50    add esp,4"
"	      004b2d53    jmp near ptr 004B2D58h"
"	      004b2d58    push 1"
"	      004b2d5a    call 00569430h"
"	      004b2d5f    add esp,4"
"	      004b2d62    jmp near ptr 004B2D67h"
"	      004b2d67    jmp near ptr 004B2D6Ch"
"	      004b2d6c    mov eax,[ebp-4Ch]"
"	      004b2d6f    mov eax,[eax+60h]"
"	      004b2d72    cmp dword ptr [eax+0Ch],1"
"	      004b2d76    ja near ptr 004B2D9Dh"
"	      004b2d7c    cmp dword ptr [ebp-1Ch],0"
"	      004b2d80    je near ptr 004B2E3Bh"
"	      004b2d86    jmp near ptr 004B2D8Bh"
"	      004b2d8b    mov eax,[ebp-4Ch]"
"	      004b2d8e    mov eax,[eax+60h]"
"	      004b2d91    mov ecx,[ebp-1Ch]"
"	      004b2d94    cmp [eax+8],ecx"
"	      004b2d97    jae near ptr 004B2E3Bh"
"	      004b2d9d    push 10h"
"	      004b2d9f    call 0056A600h"
"	      004b2da4    add esp,4"
"	      004b2da7    mov [ebp-8],eax"
"	      004b2daa    cmp dword ptr [ebp-8],0"
"	      004b2dae    je near ptr 004B2DCCh"
"	      004b2db4    mov eax,[ebp-1Ch]"
"	      004b2db7    push eax"
"	      004b2db8    mov eax,[ebp+20h]"
"	      004b2dbb    push eax"
"	      004b2dbc    mov ecx,[ebp-8]"
"	      004b2dbf    call 0041E090h"
"	      004b2dc4    mov [ebp-4],eax"
"	      004b2dc7    jmp near ptr 004B2DD3h"
"	      004b2dcc    mov dword ptr [ebp-4],0"
"	      004b2dd3    mov eax,[ebp-4Ch]"
"	      004b2dd6    mov eax,[eax+60h]"
"	      004b2dd9    dec dword ptr [eax+0Ch]"
"	      004b2ddc    mov eax,[ebp-4Ch]"
"	      004b2ddf    mov eax,[eax+60h]"
"	      004b2de2    cmp dword ptr [eax+0Ch],0"
"	      004b2de6    jne near ptr 004B2E28h"
"	      004b2dec    mov eax,[ebp-4Ch]"
"	      004b2def    mov eax,[eax+60h]"
"	      004b2df2    mov [ebp-18h],eax"
"	      004b2df5    mov eax,[ebp-18h]"
"	      004b2df8    mov [ebp-14h],eax"
"	      004b2dfb    cmp dword ptr [ebp-14h],0"
"	      004b2dff    je near ptr 004B2E28h"
"	      004b2e05    mov ecx,[ebp-14h]"
"	      004b2e08    call 0041F4B0h"
"	      004b2e0d    jmp near ptr 004B2E12h"
"	      004b2e12    mov eax,[ebp-14h]"
"	      004b2e15    push eax"
"	      004b2e16    call 0056A740h"
"	      004b2e1b    add esp,4"
"	      004b2e1e    jmp near ptr 004B2E23h"
"	      004b2e23    jmp near ptr 004B2E28h"
"	      004b2e28    jmp near ptr 004B2E2Dh"
"	      004b2e2d    mov eax,[ebp-4]"
"	      004b2e30    mov ecx,[ebp-4Ch]"
"	      004b2e33    mov [ecx+60h],eax"
"	      004b2e36    jmp near ptr 004B2E6Eh"
"	      004b2e3b    cmp dword ptr [ebp-1Ch],0"
"	      004b2e3f    je near ptr 004B2E6Eh"
"	      004b2e45    jmp near ptr 004B2E4Ah"
"	      004b2e4a    mov eax,[ebp-4Ch]"
"	      004b2e4d    mov eax,[eax+60h]"
"	      004b2e50    mov eax,[eax]"
"	      004b2e52    mov [ebp-0Ch],eax"
"	      004b2e55    mov eax,[ebp-1Ch]"
"	      004b2e58    push eax"
"	      004b2e59    mov eax,[ebp+20h]"
"	      004b2e5c    push eax"
"	      004b2e5d    mov eax,[ebp-0Ch]"
"	      004b2e60    push eax"
"	      004b2e61    call 0056A800h"
"	      004b2e66    add esp,0Ch"
"	      004b2e69    jmp near ptr 004B2E6Eh"
"	      004b2e6e    mov eax,[ebp-1Ch]"
"	      004b2e71    mov ecx,[ebp-4Ch]"
"	      004b2e74    mov ecx,[ecx+60h]"
"	      004b2e77    mov [ecx+4],eax"
"	      004b2e7a    jmp near ptr 004B2E7Fh"
"	      004b2e7f    jmp near ptr 004B2E84h"
);
// LINE 1571:
	asm( 
"	      004b2e84    jmp near ptr 004B2FFEh"
);
// LINE 1572:
	asm( 
"	      004b2e89    mov eax,ds:[59ABBCh]"
"	      004b2e8e    mov [ebp-3Ch],eax"
"	      004b2e91    jmp near ptr 004B2E96h"
"	      004b2e96    mov eax,[ebp-3Ch]"
"	      004b2e99    push eax"
"	      004b2e9a    call 0056ABE0h"
"	      004b2e9f    add esp,4"
"	      004b2ea2    mov [ebp-38h],eax"
"	      004b2ea5    cmp dword ptr [ebp-38h],0FFFFFFFFh"
"	      004b2ea9    jne near ptr 004B2EE1h"
"	      004b2eaf    push 5971E4h"
"	      004b2eb4    mov ecx,638C00h"
"	      004b2eb9    call 00569960h"
"	      004b2ebe    mov [ebp-2Ch],eax"
"	      004b2ec1    mov eax,[ebp-2Ch]"
"	      004b2ec4    push eax"
"	      004b2ec5    call 004011B0h"
"	      004b2eca    add esp,4"
"	      004b2ecd    jmp near ptr 004B2ED2h"
"	      004b2ed2    push 1"
"	      004b2ed4    call 00569430h"
"	      004b2ed9    add esp,4"
"	      004b2edc    jmp near ptr 004B2EE1h"
"	      004b2ee1    jmp near ptr 004B2EE6h"
"	      004b2ee6    mov eax,[ebp-4Ch]"
"	      004b2ee9    mov eax,[eax+60h]"
"	      004b2eec    cmp dword ptr [eax+0Ch],1"
"	      004b2ef0    ja near ptr 004B2F17h"
"	      004b2ef6    cmp dword ptr [ebp-38h],0"
"	      004b2efa    je near ptr 004B2FB5h"
"	      004b2f00    jmp near ptr 004B2F05h"
"	      004b2f05    mov eax,[ebp-4Ch]"
"	      004b2f08    mov eax,[eax+60h]"
"	      004b2f0b    mov ecx,[ebp-38h]"
"	      004b2f0e    cmp [eax+8],ecx"
"	      004b2f11    jae near ptr 004B2FB5h"
"	      004b2f17    push 10h"
"	      004b2f19    call 0056A600h"
"	      004b2f1e    add esp,4"
"	      004b2f21    mov [ebp-24h],eax"
"	      004b2f24    cmp dword ptr [ebp-24h],0"
"	      004b2f28    je near ptr 004B2F46h"
"	      004b2f2e    mov eax,[ebp-38h]"
"	      004b2f31    push eax"
"	      004b2f32    mov eax,[ebp-3Ch]"
"	      004b2f35    push eax"
"	      004b2f36    mov ecx,[ebp-24h]"
"	      004b2f39    call 0041E090h"
"	      004b2f3e    mov [ebp-20h],eax"
"	      004b2f41    jmp near ptr 004B2F4Dh"
"	      004b2f46    mov dword ptr [ebp-20h],0"
"	      004b2f4d    mov eax,[ebp-4Ch]"
"	      004b2f50    mov eax,[eax+60h]"
"	      004b2f53    dec dword ptr [eax+0Ch]"
"	      004b2f56    mov eax,[ebp-4Ch]"
"	      004b2f59    mov eax,[eax+60h]"
"	      004b2f5c    cmp dword ptr [eax+0Ch],0"
"	      004b2f60    jne near ptr 004B2FA2h"
"	      004b2f66    mov eax,[ebp-4Ch]"
"	      004b2f69    mov eax,[eax+60h]"
"	      004b2f6c    mov [ebp-34h],eax"
"	      004b2f6f    mov eax,[ebp-34h]"
"	      004b2f72    mov [ebp-30h],eax"
"	      004b2f75    cmp dword ptr [ebp-30h],0"
"	      004b2f79    je near ptr 004B2FA2h"
"	      004b2f7f    mov ecx,[ebp-30h]"
"	      004b2f82    call 0041F4B0h"
"	      004b2f87    jmp near ptr 004B2F8Ch"
"	      004b2f8c    mov eax,[ebp-30h]"
"	      004b2f8f    push eax"
"	      004b2f90    call 0056A740h"
"	      004b2f95    add esp,4"
"	      004b2f98    jmp near ptr 004B2F9Dh"
"	      004b2f9d    jmp near ptr 004B2FA2h"
"	      004b2fa2    jmp near ptr 004B2FA7h"
"	      004b2fa7    mov eax,[ebp-20h]"
"	      004b2faa    mov ecx,[ebp-4Ch]"
"	      004b2fad    mov [ecx+60h],eax"
"	      004b2fb0    jmp near ptr 004B2FE8h"
"	      004b2fb5    cmp dword ptr [ebp-38h],0"
"	      004b2fb9    je near ptr 004B2FE8h"
"	      004b2fbf    jmp near ptr 004B2FC4h"
"	      004b2fc4    mov eax,[ebp-4Ch]"
"	      004b2fc7    mov eax,[eax+60h]"
"	      004b2fca    mov eax,[eax]"
"	      004b2fcc    mov [ebp-28h],eax"
"	      004b2fcf    mov eax,[ebp-38h]"
"	      004b2fd2    push eax"
"	      004b2fd3    mov eax,[ebp-3Ch]"
"	      004b2fd6    push eax"
"	      004b2fd7    mov eax,[ebp-28h]"
"	      004b2fda    push eax"
"	      004b2fdb    call 0056A800h"
"	      004b2fe0    add esp,0Ch"
"	      004b2fe3    jmp near ptr 004B2FE8h"
"	      004b2fe8    mov eax,[ebp-38h]"
"	      004b2feb    mov ecx,[ebp-4Ch]"
"	      004b2fee    mov ecx,[ecx+60h]"
"	      004b2ff1    mov [ecx+4],eax"
"	      004b2ff4    jmp near ptr 004B2FF9h"
"	      004b2ff9    jmp near ptr 004B2FFEh"
);
// LINE 1573:
	asm( 
"	      004b2ffe    jmp near ptr 004B3003h"
"	      004b3003    mov eax,[ebp-4Ch]"
"	      004b3006    pop edi"
"	      004b3007    pop esi"
"	      004b3008    pop ebx"
"	      004b3009    leave"
"	      004b300a    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b300d
int32_t ScrollBarWindow::Initialize() {
// LINE 1581:
	asm( 
"	      004b300d    push ebp"
"	      004b300e    mov ebp,esp"
"	      004b3010    sub esp,8"
"	      004b3013    push ebx"
"	      004b3014    push esi"
"	      004b3015    push edi"
"	      004b3016    mov [ebp-8],ecx"
);
// LINE 1584:
	asm( 
"	      004b3019    mov ecx,[ebp-8]"
"	      004b301c    call 004A44D4h"
);
// LINE 1585:
	asm( 
"	      004b3021    mov eax,ds:[606988h]"
"	      004b3026    mov ecx,[ebp-8]"
"	      004b3029    mov [ecx+58h],eax"
);
// LINE 1586:
	asm( 
"	      004b302c    push 0"
"	      004b302e    mov eax,[ebp-8]"
"	      004b3031    mov eax,[eax]"
"	      004b3033    mov ecx,[ebp-8]"
"	      004b3036    call dword ptr [eax+10h]"
"	      004b3039    mov [ebp-4],eax"
);
// LINE 1587:
	asm( 
"	      004b303c    mov eax,[ebp-8]"
"	      004b303f    cmp dword ptr [eax+40h],0"
"	      004b3043    je near ptr 004B3093h"
);
// LINE 1588:
	asm( 
"	      004b3049    mov eax,[ebp-8]"
"	      004b304c    cmp dword ptr [eax+74h],0"
"	      004b3050    jne near ptr 004B3077h"
);
// LINE 1589:
	asm( 
"	      004b3056    jmp near ptr 004B305Bh"
"	      004b305b    mov eax,[ebp-8]"
"	      004b305e    mov eax,[eax+40h]"
"	      004b3061    mov eax,[eax+0Ch]"
"	      004b3064    push eax"
"	      004b3065    push 0FFFFFFFFh"
"	      004b3067    mov eax,[ebp-8]"
"	      004b306a    mov eax,[eax]"
"	      004b306c    mov ecx,[ebp-8]"
"	      004b306f    call dword ptr [eax+38h]"
);
// LINE 1590:
	asm( 
"	      004b3072    jmp near ptr 004B3093h"
);
// LINE 1591:
	asm( 
"	      004b3077    jmp near ptr 004B307Ch"
"	      004b307c    push 0FFFFFFFFh"
"	      004b307e    mov eax,[ebp-8]"
"	      004b3081    mov eax,[eax+40h]"
"	      004b3084    mov eax,[eax+0Ch]"
"	      004b3087    push eax"
"	      004b3088    mov eax,[ebp-8]"
"	      004b308b    mov eax,[eax]"
"	      004b308d    mov ecx,[ebp-8]"
"	      004b3090    call dword ptr [eax+38h]"
);
// LINE 1593:
	asm( 
"	      004b3093    mov eax,[ebp-8]"
"	      004b3096    mov eax,[eax]"
"	      004b3098    mov ecx,[ebp-8]"
"	      004b309b    call dword ptr [eax+0CCh]"
);
// LINE 1594:
	asm( 
"	      004b30a1    mov eax,[ebp-4]"
"	      004b30a4    jmp near ptr 004B30A9h"
);
// LINE 1595:
	asm( 
"	      004b30a9    pop edi"
"	      004b30aa    pop esi"
"	      004b30ab    pop ebx"
"	      004b30ac    leave"
"	      004b30ad    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b30ae
int32_t ScrollBarWindow::ComposeSelf() {
// LINE 1603:
	asm( 
"	      004b30ae    push ebp"
"	      004b30af    mov ebp,esp"
"	      004b30b1    sub esp,3Ch"
"	      004b30b4    push ebx"
"	      004b30b5    push esi"
"	      004b30b6    push edi"
"	      004b30b7    mov [ebp-3Ch],ecx"
);
// LINE 1612:
	asm( 
"	      004b30ba    mov eax,[ebp-3Ch]"
"	      004b30bd    cmp dword ptr [eax+54h],0"
"	      004b30c1    jne near ptr 004B30D1h"
);
// LINE 1613:
	asm( 
"	      004b30c7    mov eax,1"
"	      004b30cc    jmp near ptr 004B35D8h"
);
// LINE 1614:
	asm( 
"	      004b30d1    jmp near ptr 004B30D6h"
"	      004b30d6    mov eax,[ebp-3Ch]"
"	      004b30d9    cmp dword ptr [eax+48h],0"
"	      004b30dd    jne near ptr 004B30EDh"
);
// LINE 1615:
	asm( 
"	      004b30e3    mov eax,1"
"	      004b30e8    jmp near ptr 004B35D8h"
);
// LINE 1616:
	asm( 
"	      004b30ed    push 1"
"	      004b30ef    push 0"
"	      004b30f1    mov eax,[ebp-3Ch]"
"	      004b30f4    mov eax,[eax]"
"	      004b30f6    mov ecx,[ebp-3Ch]"
"	      004b30f9    call dword ptr [eax+30h]"
);
// LINE 1619:
	asm( 
"	      004b30fc    mov eax,[ebp-3Ch]"
"	      004b30ff    cmp dword ptr [eax+74h],0"
"	      004b3103    jne near ptr 004B311Ch"
);
// LINE 1620:
	asm( 
"	      004b3109    mov dword ptr [ebp-10h],0"
);
// LINE 1621:
	asm( 
"	      004b3110    mov dword ptr [ebp-0Ch],4"
);
// LINE 1623:
	asm( 
"	      004b3117    jmp near ptr 004B312Ah"
);
// LINE 1624:
	asm( 
"	      004b311c    mov dword ptr [ebp-10h],6"
);
// LINE 1625:
	asm( 
"	      004b3123    mov dword ptr [ebp-0Ch],0Ah"
);
// LINE 1629:
	asm( 
"	      004b312a    mov eax,ds:[59A960h]"
"	      004b312f    cmp [ebp-3Ch],eax"
"	      004b3132    jne near ptr 004B313Dh"
"	      004b3138    jmp near ptr 004B3142h"
"	      004b313d    jmp near ptr 004B334Fh"
"	      004b3142    jmp near ptr 004B3151h"
"	      004b3147    cmp dword ptr [ebp-1Ch],0"
"	      004b314b    je near ptr 004B334Fh"
"	      004b3151    mov eax,[ebp-3Ch]"
"	      004b3154    cmp dword ptr [eax+0D0h],0"
"	      004b315b    je near ptr 004B334Fh"
);
// LINE 1633:
	asm( 
"	      004b3161    mov eax,[ebp-3Ch]"
"	      004b3164    cmp dword ptr [eax+0CCh],1"
"	      004b316b    jl near ptr 004B334Fh"
"	      004b3171    mov eax,[ebp-3Ch]"
"	      004b3174    cmp dword ptr [eax+0CCh],4"
"	      004b317b    jg near ptr 004B334Fh"
);
// LINE 1639:
	asm( 
"	      004b3181    mov eax,[ebp-3Ch]"
"	      004b3184    cmp dword ptr [eax+0CCh],1"
"	      004b318b    jne near ptr 004B3199h"
);
// LINE 1640:
	asm( 
"	      004b3191    inc dword ptr [ebp-10h]"
);
// LINE 1641:
	asm( 
"	      004b3194    jmp near ptr 004B31ACh"
"	      004b3199    mov eax,[ebp-3Ch]"
"	      004b319c    cmp dword ptr [eax+0CCh],2"
"	      004b31a3    jne near ptr 004B31ACh"
);
// LINE 1642:
	asm( 
"	      004b31a9    inc dword ptr [ebp-0Ch]"
);
// LINE 1644:
	asm( 
"	      004b31ac    mov eax,[ebp-3Ch]"
"	      004b31af    mov eax,[eax+0C4h]"
"	      004b31b5    mov [ebp-24h],eax"
"	      004b31b8    jmp near ptr 004B31BDh"
"	      004b31bd    mov eax,[ebp-3Ch]"
"	      004b31c0    cmp dword ptr [eax+0C0h],0"
"	      004b31c7    je near ptr 004B324Ch"
"	      004b31cd    mov eax,[ebp-3Ch]"
"	      004b31d0    cmp dword ptr [eax+0BCh],1"
"	      004b31d7    jne near ptr 004B31F0h"
"	      004b31dd    call dword ptr ds:[6C3908h]"
"	      004b31e3    mov [ebp-34h],eax"
"	      004b31e6    jmp near ptr 004B3237h"
"	      004b31eb    jmp near ptr 004B3237h"
"	      004b31f0    mov eax,[ebp-3Ch]"
"	      004b31f3    cmp dword ptr [eax+0BCh],0"
"	      004b31fa    jne near ptr 004B3220h"
"	      004b3200    lea eax,[ebp-30h]"
"	      004b3203    push eax"
"	      004b3204    call dword ptr ds:[6C365Ch]"
"	      004b320a    mov eax,[ebp-30h]"
"	      004b320d    mov [ebp-28h],eax"
"	      004b3210    mov eax,[ebp-28h]"
"	      004b3213    mov [ebp-34h],eax"
"	      004b3216    jmp near ptr 004B3237h"
"	      004b321b    jmp near ptr 004B3237h"
"	      004b3220    call dword ptr ds:[6C3908h]"
"	      004b3226    mov ecx,3E8h"
"	      004b322b    sub edx,edx"
"	      004b322d    div ecx"
"	      004b322f    mov [ebp-34h],eax"
"	      004b3232    jmp near ptr 004B3237h"
"	      004b3237    mov eax,[ebp-34h]"
"	      004b323a    mov ecx,[ebp-3Ch]"
"	      004b323d    sub eax,[ecx+0C0h]"
"	      004b3243    mov [ebp-20h],eax"
"	      004b3246    mov eax,[ebp-20h]"
"	      004b3249    add [ebp-24h],eax"
"	      004b324c    mov eax,[ebp-3Ch]"
"	      004b324f    cmp dword ptr [eax+0BCh],0"
"	      004b3256    jne near ptr 004B329Ah"
"	      004b325c    mov eax,[ebp-3Ch]"
"	      004b325f    cmp dword ptr [eax+0C8h],0"
"	      004b3266    je near ptr 004B329Ah"
"	      004b326c    mov eax,[ebp-3Ch]"
"	      004b326f    mov eax,[eax+0C8h]"
"	      004b3275    push eax"
"	      004b3276    push 0F4240h"
"	      004b327b    mov eax,[ebp-24h]"
"	      004b327e    push eax"
"	      004b327f    call dword ptr ds:[6C372Ch]"
"	      004b3285    mov [ebp-24h],eax"
"	      004b3288    cmp dword ptr [ebp-24h],0C8h"
"	      004b328f    jbe near ptr 004B3340h"
"	      004b3295    jmp near ptr 004B32B9h"
"	      004b329a    cmp dword ptr [ebp-24h],0C8h"
"	      004b32a1    jbe near ptr 004B3340h"
"	      004b32a7    jmp near ptr 004B32B9h"
"	      004b32ac    cmp dword ptr [ebp-38h],0C8h"
"	      004b32b3    jbe near ptr 004B3340h"
);
// LINE 1645:
	asm( 
"	      004b32b9    mov eax,[ebp-3Ch]"
"	      004b32bc    cmp dword ptr [eax+0CCh],1"
"	      004b32c3    jne near ptr 004B32DCh"
);
// LINE 1646:
	asm( 
"	      004b32c9    mov eax,[ebp-3Ch]"
"	      004b32cc    mov eax,[eax]"
"	      004b32ce    mov ecx,[ebp-3Ch]"
"	      004b32d1    call dword ptr [eax+0DCh]"
);
// LINE 1647:
	asm( 
"	      004b32d7    jmp near ptr 004B3340h"
"	      004b32dc    mov eax,[ebp-3Ch]"
"	      004b32df    cmp dword ptr [eax+0CCh],2"
"	      004b32e6    jne near ptr 004B32FFh"
);
// LINE 1648:
	asm( 
"	      004b32ec    mov eax,[ebp-3Ch]"
"	      004b32ef    mov eax,[eax]"
"	      004b32f1    mov ecx,[ebp-3Ch]"
"	      004b32f4    call dword ptr [eax+0E0h]"
);
// LINE 1649:
	asm( 
"	      004b32fa    jmp near ptr 004B3340h"
"	      004b32ff    mov eax,[ebp-3Ch]"
"	      004b3302    cmp dword ptr [eax+0CCh],3"
"	      004b3309    jne near ptr 004B3322h"
);
// LINE 1650:
	asm( 
"	      004b330f    mov eax,[ebp-3Ch]"
"	      004b3312    mov eax,[eax]"
"	      004b3314    mov ecx,[ebp-3Ch]"
"	      004b3317    call dword ptr [eax+0E4h]"
);
// LINE 1651:
	asm( 
"	      004b331d    jmp near ptr 004B3340h"
"	      004b3322    mov eax,[ebp-3Ch]"
"	      004b3325    cmp dword ptr [eax+0CCh],4"
"	      004b332c    jne near ptr 004B3340h"
);
// LINE 1652:
	asm( 
"	      004b3332    mov eax,[ebp-3Ch]"
"	      004b3335    mov eax,[eax]"
"	      004b3337    mov ecx,[ebp-3Ch]"
"	      004b333a    call dword ptr [eax+0E8h]"
);
// LINE 1654:
	asm( 
"	      004b3340    push 1"
"	      004b3342    push 1"
"	      004b3344    mov eax,[ebp-3Ch]"
"	      004b3347    mov eax,[eax]"
"	      004b3349    mov ecx,[ebp-3Ch]"
"	      004b334c    call dword ptr [eax+30h]"
);
// LINE 1659:
	asm( 
"	      004b334f    mov eax,[ebp-3Ch]"
"	      004b3352    mov eax,[eax]"
"	      004b3354    mov ecx,[ebp-3Ch]"
"	      004b3357    call dword ptr [eax+0D0h]"
"	      004b335d    mov [ebp-8],eax"
);
// LINE 1660:
	asm( 
"	      004b3360    mov eax,[ebp-3Ch]"
"	      004b3363    mov eax,[eax]"
"	      004b3365    mov ecx,[ebp-3Ch]"
"	      004b3368    call dword ptr [eax+0D4h]"
"	      004b336e    mov [ebp-14h],eax"
);
// LINE 1661:
	asm( 
"	      004b3371    mov eax,[ebp-3Ch]"
"	      004b3374    cmp dword ptr [eax+74h],0"
"	      004b3378    jne near ptr 004B34A7h"
);
// LINE 1665:
	asm( 
"	      004b337e    mov eax,[ebp-14h]"
"	      004b3381    push eax"
"	      004b3382    mov eax,[ebp-10h]"
"	      004b3385    inc eax"
"	      004b3386    imul eax,[ebp-8]"
"	      004b338a    push eax"
"	      004b338b    push 0"
"	      004b338d    mov eax,[ebp-10h]"
"	      004b3390    imul eax,[ebp-8]"
"	      004b3394    push eax"
"	      004b3395    mov eax,[ebp-3Ch]"
"	      004b3398    mov eax,[eax+24h]"
"	      004b339b    push eax"
"	      004b339c    mov eax,[ebp-3Ch]"
"	      004b339f    mov eax,[eax+20h]"
"	      004b33a2    push eax"
"	      004b33a3    mov eax,[ebp-3Ch]"
"	      004b33a6    mov eax,[eax+44h]"
"	      004b33a9    push eax"
"	      004b33aa    mov eax,[ebp-3Ch]"
"	      004b33ad    mov ecx,[ebp-3Ch]"
"	      004b33b0    mov ecx,[ecx+40h]"
"	      004b33b3    mov edx,[ecx]"
"	      004b33b5    mov ecx,[eax+40h]"
"	      004b33b8    call dword ptr [edx+0Ch]"
);
// LINE 1668:
	asm( 
"	      004b33bb    mov eax,[ebp-3Ch]"
"	      004b33be    mov eax,[eax+28h]"
"	      004b33c1    sub eax,[ebp-8]"
"	      004b33c4    mov [ebp-4],eax"
);
// LINE 1670:
	asm( 
"	      004b33c7    mov eax,[ebp-3Ch]"
"	      004b33ca    mov eax,[eax+20h]"
"	      004b33cd    add eax,[ebp-8]"
"	      004b33d0    mov [ebp-18h],eax"
"	      004b33d3    jmp near ptr 004B33DEh"
"	      004b33d8    mov eax,[ebp-8]"
"	      004b33db    add [ebp-18h],eax"
"	      004b33de    mov eax,[ebp-4]"
"	      004b33e1    cmp [ebp-18h],eax"
"	      004b33e4    jge near ptr 004B3426h"
);
// LINE 1673:
	asm( 
"	      004b33ea    mov eax,[ebp-14h]"
"	      004b33ed    push eax"
"	      004b33ee    mov eax,[ebp-8]"
"	      004b33f1    shl eax,2"
"	      004b33f4    push eax"
"	      004b33f5    push 0"
"	      004b33f7    mov eax,[ebp-8]"
"	      004b33fa    lea eax,[eax+eax*2]"
"	      004b33fd    push eax"
"	      004b33fe    mov eax,[ebp-3Ch]"
"	      004b3401    mov eax,[eax+24h]"
"	      004b3404    push eax"
"	      004b3405    mov eax,[ebp-18h]"
"	      004b3408    push eax"
"	      004b3409    mov eax,[ebp-3Ch]"
"	      004b340c    mov eax,[eax+44h]"
"	      004b340f    push eax"
"	      004b3410    mov eax,[ebp-3Ch]"
"	      004b3413    mov ecx,[ebp-3Ch]"
"	      004b3416    mov ecx,[ecx+40h]"
"	      004b3419    mov edx,[ecx]"
"	      004b341b    mov ecx,[eax+40h]"
"	      004b341e    call dword ptr [edx+0Ch]"
);
// LINE 1674:
	asm( 
"	      004b3421    jmp near ptr 004B33D8h"
);
// LINE 1678:
	asm( 
"	      004b3426    mov eax,[ebp-14h]"
"	      004b3429    push eax"
"	      004b342a    mov eax,[ebp-0Ch]"
"	      004b342d    inc eax"
"	      004b342e    imul eax,[ebp-8]"
"	      004b3432    push eax"
"	      004b3433    push 0"
"	      004b3435    mov eax,[ebp-0Ch]"
"	      004b3438    imul eax,[ebp-8]"
"	      004b343c    push eax"
"	      004b343d    mov eax,[ebp-3Ch]"
"	      004b3440    mov eax,[eax+24h]"
"	      004b3443    push eax"
"	      004b3444    mov eax,[ebp-4]"
"	      004b3447    push eax"
"	      004b3448    mov eax,[ebp-3Ch]"
"	      004b344b    mov eax,[eax+44h]"
"	      004b344e    push eax"
"	      004b344f    mov eax,[ebp-3Ch]"
"	      004b3452    mov ecx,[ebp-3Ch]"
"	      004b3455    mov ecx,[ecx+40h]"
"	      004b3458    mov edx,[ecx]"
"	      004b345a    mov ecx,[eax+40h]"
"	      004b345d    call dword ptr [edx+0Ch]"
);
// LINE 1683:
	asm( 
"	      004b3460    mov eax,[ebp-14h]"
"	      004b3463    push eax"
"	      004b3464    mov eax,[ebp-8]"
"	      004b3467    lea eax,[eax+eax*2]"
"	      004b346a    push eax"
"	      004b346b    push 0"
"	      004b346d    mov eax,[ebp-8]"
"	      004b3470    add eax,eax"
"	      004b3472    push eax"
"	      004b3473    mov eax,[ebp-3Ch]"
"	      004b3476    mov eax,[eax+24h]"
"	      004b3479    push eax"
"	      004b347a    mov eax,[ebp-3Ch]"
"	      004b347d    mov eax,[eax+94h]"
"	      004b3483    mov ecx,[ebp-3Ch]"
"	      004b3486    add eax,[ecx+20h]"
"	      004b3489    push eax"
"	      004b348a    mov eax,[ebp-3Ch]"
"	      004b348d    mov eax,[eax+44h]"
"	      004b3490    push eax"
"	      004b3491    mov eax,[ebp-3Ch]"
"	      004b3494    mov ecx,[ebp-3Ch]"
"	      004b3497    mov ecx,[ecx+40h]"
"	      004b349a    mov edx,[ecx]"
"	      004b349c    mov ecx,[eax+40h]"
"	      004b349f    call dword ptr [edx+0Ch]"
);
// LINE 1685:
	asm( 
"	      004b34a2    jmp near ptr 004B35CEh"
);
// LINE 1689:
	asm( 
"	      004b34a7    mov eax,[ebp-14h]"
"	      004b34aa    push eax"
"	      004b34ab    mov eax,[ebp-10h]"
"	      004b34ae    inc eax"
"	      004b34af    imul eax,[ebp-8]"
"	      004b34b3    push eax"
"	      004b34b4    push 0"
"	      004b34b6    mov eax,[ebp-10h]"
"	      004b34b9    imul eax,[ebp-8]"
"	      004b34bd    push eax"
"	      004b34be    mov eax,[ebp-3Ch]"
"	      004b34c1    mov eax,[eax+24h]"
"	      004b34c4    push eax"
"	      004b34c5    mov eax,[ebp-3Ch]"
"	      004b34c8    mov eax,[eax+20h]"
"	      004b34cb    push eax"
"	      004b34cc    mov eax,[ebp-3Ch]"
"	      004b34cf    mov eax,[eax+44h]"
"	      004b34d2    push eax"
"	      004b34d3    mov eax,[ebp-3Ch]"
"	      004b34d6    mov ecx,[ebp-3Ch]"
"	      004b34d9    mov ecx,[ecx+40h]"
"	      004b34dc    mov edx,[ecx]"
"	      004b34de    mov ecx,[eax+40h]"
"	      004b34e1    call dword ptr [edx+0Ch]"
);
// LINE 1692:
	asm( 
"	      004b34e4    mov eax,[ebp-3Ch]"
"	      004b34e7    mov eax,[eax+2Ch]"
"	      004b34ea    sub eax,[ebp-14h]"
"	      004b34ed    mov [ebp-4],eax"
);
// LINE 1694:
	asm( 
"	      004b34f0    mov eax,[ebp-3Ch]"
"	      004b34f3    mov eax,[eax+24h]"
"	      004b34f6    add eax,[ebp-14h]"
"	      004b34f9    mov [ebp-18h],eax"
"	      004b34fc    jmp near ptr 004B3507h"
"	      004b3501    mov eax,[ebp-14h]"
"	      004b3504    add [ebp-18h],eax"
"	      004b3507    mov eax,[ebp-4]"
"	      004b350a    cmp [ebp-18h],eax"
"	      004b350d    jge near ptr 004B3551h"
);
// LINE 1697:
	asm( 
"	      004b3513    mov eax,[ebp-14h]"
"	      004b3516    push eax"
"	      004b3517    mov eax,[ebp-8]"
"	      004b351a    lea eax,[eax+eax*4]"
"	      004b351d    add eax,eax"
"	      004b351f    push eax"
"	      004b3520    push 0"
"	      004b3522    mov eax,[ebp-8]"
"	      004b3525    lea eax,[eax+eax*8]"
"	      004b3528    push eax"
"	      004b3529    mov eax,[ebp-18h]"
"	      004b352c    push eax"
"	      004b352d    mov eax,[ebp-3Ch]"
"	      004b3530    mov eax,[eax+20h]"
"	      004b3533    push eax"
"	      004b3534    mov eax,[ebp-3Ch]"
"	      004b3537    mov eax,[eax+44h]"
"	      004b353a    push eax"
"	      004b353b    mov eax,[ebp-3Ch]"
"	      004b353e    mov ecx,[ebp-3Ch]"
"	      004b3541    mov ecx,[ecx+40h]"
"	      004b3544    mov edx,[ecx]"
"	      004b3546    mov ecx,[eax+40h]"
"	      004b3549    call dword ptr [edx+0Ch]"
);
// LINE 1698:
	asm( 
"	      004b354c    jmp near ptr 004B3501h"
);
// LINE 1702:
	asm( 
"	      004b3551    mov eax,[ebp-14h]"
"	      004b3554    push eax"
"	      004b3555    mov eax,[ebp-0Ch]"
"	      004b3558    inc eax"
"	      004b3559    imul eax,[ebp-8]"
"	      004b355d    push eax"
"	      004b355e    push 0"
"	      004b3560    mov eax,[ebp-0Ch]"
"	      004b3563    imul eax,[ebp-8]"
"	      004b3567    push eax"
"	      004b3568    mov eax,[ebp-4]"
"	      004b356b    push eax"
"	      004b356c    mov eax,[ebp-3Ch]"
"	      004b356f    mov eax,[eax+20h]"
"	      004b3572    push eax"
"	      004b3573    mov eax,[ebp-3Ch]"
"	      004b3576    mov eax,[eax+44h]"
"	      004b3579    push eax"
"	      004b357a    mov eax,[ebp-3Ch]"
"	      004b357d    mov ecx,[ebp-3Ch]"
"	      004b3580    mov ecx,[ecx+40h]"
"	      004b3583    mov edx,[ecx]"
"	      004b3585    mov ecx,[eax+40h]"
"	      004b3588    call dword ptr [edx+0Ch]"
);
// LINE 1707:
	asm( 
"	      004b358b    mov eax,[ebp-14h]"
"	      004b358e    push eax"
"	      004b358f    mov eax,[ebp-8]"
"	      004b3592    lea eax,[eax+eax*8]"
"	      004b3595    push eax"
"	      004b3596    push 0"
"	      004b3598    mov eax,[ebp-8]"
"	      004b359b    shl eax,3"
"	      004b359e    push eax"
"	      004b359f    mov eax,[ebp-3Ch]"
"	      004b35a2    mov eax,[eax+98h]"
"	      004b35a8    mov ecx,[ebp-3Ch]"
"	      004b35ab    add eax,[ecx+24h]"
"	      004b35ae    push eax"
"	      004b35af    mov eax,[ebp-3Ch]"
"	      004b35b2    mov eax,[eax+20h]"
"	      004b35b5    push eax"
"	      004b35b6    mov eax,[ebp-3Ch]"
"	      004b35b9    mov eax,[eax+44h]"
"	      004b35bc    push eax"
"	      004b35bd    mov eax,[ebp-3Ch]"
"	      004b35c0    mov ecx,[ebp-3Ch]"
"	      004b35c3    mov ecx,[ecx+40h]"
"	      004b35c6    mov edx,[ecx]"
"	      004b35c8    mov ecx,[eax+40h]"
"	      004b35cb    call dword ptr [edx+0Ch]"
);
// LINE 1709:
	asm( 
"	      004b35ce    mov eax,1"
"	      004b35d3    jmp near ptr 004B35D8h"
);
// LINE 1710:
	asm( 
"	      004b35d8    pop edi"
"	      004b35d9    pop esi"
"	      004b35da    pop ebx"
"	      004b35db    leave"
"	      004b35dc    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b35dd
long ScrollBarWindow::DoCursorDown(long, long, unsigned long) {
// LINE 1716:
	asm( 
"	      004b35dd    push ebp"
"	      004b35de    mov ebp,esp"
"	      004b35e0    sub esp,20h"
"	      004b35e3    push ebx"
"	      004b35e4    push esi"
"	      004b35e5    push edi"
"	      004b35e6    mov [ebp-20h],ecx"
);
// LINE 1717:
	asm( 
"	      004b35e9    mov eax,[ebp-20h]"
"	      004b35ec    push eax"
"	      004b35ed    call 004A7470h"
"	      004b35f2    add esp,4"
);
// LINE 1719:
	asm( 
"	      004b35f5    mov eax,[ebp+0Ch]"
"	      004b35f8    push eax"
"	      004b35f9    mov eax,[ebp+8]"
"	      004b35fc    push eax"
"	      004b35fd    mov eax,[ebp-20h]"
"	      004b3600    add eax,0CCh"
"	      004b3605    push eax"
"	      004b3606    mov eax,[ebp-20h]"
"	      004b3609    mov eax,[eax]"
"	      004b360b    mov ecx,[ebp-20h]"
"	      004b360e    call dword ptr [eax+0ECh]"
"	      004b3614    test eax,eax"
"	      004b3616    je near ptr 004B383Fh"
);
// LINE 1720:
	asm( 
"	      004b361c    mov eax,[ebp-20h]"
"	      004b361f    mov dword ptr [eax+0D0h],1"
);
// LINE 1721:
	asm( 
"	      004b3629    mov eax,[ebp-20h]"
"	      004b362c    push eax"
"	      004b362d    mov eax,[ebp-20h]"
"	      004b3630    mov eax,[eax]"
"	      004b3632    mov ecx,[ebp-20h]"
"	      004b3635    call dword ptr [eax+98h]"
);
// LINE 1722:
	asm( 
"	      004b363b    jmp near ptr 004B3640h"
"	      004b3640    mov eax,[ebp-20h]"
"	      004b3643    cmp dword ptr [eax+0C0h],0"
"	      004b364a    jne near ptr 004B3655h"
"	      004b3650    jmp near ptr 004B36E6h"
"	      004b3655    mov eax,[ebp-20h]"
"	      004b3658    cmp dword ptr [eax+0BCh],1"
"	      004b365f    jne near ptr 004B3678h"
"	      004b3665    call dword ptr ds:[6C3908h]"
"	      004b366b    mov [ebp-10h],eax"
"	      004b366e    jmp near ptr 004B36BFh"
"	      004b3673    jmp near ptr 004B36BFh"
"	      004b3678    mov eax,[ebp-20h]"
"	      004b367b    cmp dword ptr [eax+0BCh],0"
"	      004b3682    jne near ptr 004B36A8h"
"	      004b3688    lea eax,[ebp-1Ch]"
"	      004b368b    push eax"
"	      004b368c    call dword ptr ds:[6C365Ch]"
"	      004b3692    mov eax,[ebp-1Ch]"
"	      004b3695    mov [ebp-14h],eax"
"	      004b3698    mov eax,[ebp-14h]"
"	      004b369b    mov [ebp-10h],eax"
"	      004b369e    jmp near ptr 004B36BFh"
"	      004b36a3    jmp near ptr 004B36BFh"
"	      004b36a8    call dword ptr ds:[6C3908h]"
"	      004b36ae    mov ecx,3E8h"
"	      004b36b3    sub edx,edx"
"	      004b36b5    div ecx"
"	      004b36b7    mov [ebp-10h],eax"
"	      004b36ba    jmp near ptr 004B36BFh"
"	      004b36bf    mov eax,[ebp-10h]"
"	      004b36c2    mov ecx,[ebp-20h]"
"	      004b36c5    sub eax,[ecx+0C0h]"
"	      004b36cb    mov ecx,[ebp-20h]"
"	      004b36ce    add [ecx+0C4h],eax"
"	      004b36d4    mov eax,[ebp-20h]"
"	      004b36d7    mov dword ptr [eax+0C0h],0"
"	      004b36e1    jmp near ptr 004B36E6h"
);
// LINE 1723:
	asm( 
"	      004b36e6    jmp near ptr 004B36EBh"
"	      004b36eb    mov eax,[ebp-20h]"
"	      004b36ee    cmp dword ptr [eax+0C0h],0"
"	      004b36f5    je near ptr 004B3700h"
"	      004b36fb    jmp near ptr 004B3781h"
"	      004b3700    mov eax,[ebp-20h]"
"	      004b3703    cmp dword ptr [eax+0BCh],1"
"	      004b370a    jne near ptr 004B3729h"
"	      004b3710    call dword ptr ds:[6C3908h]"
"	      004b3716    mov ecx,[ebp-20h]"
"	      004b3719    mov [ecx+0C0h],eax"
"	      004b371f    jmp near ptr 004B377Ch"
"	      004b3724    jmp near ptr 004B377Ch"
"	      004b3729    mov eax,[ebp-20h]"
"	      004b372c    cmp dword ptr [eax+0BCh],0"
"	      004b3733    jne near ptr 004B375Fh"
"	      004b3739    lea eax,[ebp-0Ch]"
"	      004b373c    push eax"
"	      004b373d    call dword ptr ds:[6C365Ch]"
"	      004b3743    mov eax,[ebp-0Ch]"
"	      004b3746    mov [ebp-4],eax"
"	      004b3749    mov eax,[ebp-4]"
"	      004b374c    mov ecx,[ebp-20h]"
"	      004b374f    mov [ecx+0C0h],eax"
"	      004b3755    jmp near ptr 004B377Ch"
"	      004b375a    jmp near ptr 004B377Ch"
"	      004b375f    call dword ptr ds:[6C3908h]"
"	      004b3765    mov ecx,3E8h"
"	      004b376a    sub edx,edx"
"	      004b376c    div ecx"
"	      004b376e    mov ecx,[ebp-20h]"
"	      004b3771    mov [ecx+0C0h],eax"
"	      004b3777    jmp near ptr 004B377Ch"
"	      004b377c    jmp near ptr 004B3781h"
);
// LINE 1724:
	asm( 
"	      004b3781    push 1"
"	      004b3783    push 1"
"	      004b3785    mov eax,[ebp-20h]"
"	      004b3788    mov eax,[eax]"
"	      004b378a    mov ecx,[ebp-20h]"
"	      004b378d    call dword ptr [eax+30h]"
);
// LINE 1726:
	asm( 
"	      004b3790    mov eax,[ebp-20h]"
"	      004b3793    cmp dword ptr [eax+0CCh],1"
"	      004b379a    jne near ptr 004B37BDh"
);
// LINE 1727:
	asm( 
"	      004b37a0    mov eax,[ebp-20h]"
"	      004b37a3    mov eax,[eax]"
"	      004b37a5    mov ecx,[ebp-20h]"
"	      004b37a8    call dword ptr [eax+0DCh]"
);
// LINE 1728:
	asm( 
"	      004b37ae    mov eax,1"
"	      004b37b3    jmp near ptr 004B3849h"
);
// LINE 1730:
	asm( 
"	      004b37b8    jmp near ptr 004B383Fh"
"	      004b37bd    mov eax,[ebp-20h]"
"	      004b37c0    cmp dword ptr [eax+0CCh],2"
"	      004b37c7    jne near ptr 004B37EAh"
);
// LINE 1731:
	asm( 
"	      004b37cd    mov eax,[ebp-20h]"
"	      004b37d0    mov eax,[eax]"
"	      004b37d2    mov ecx,[ebp-20h]"
"	      004b37d5    call dword ptr [eax+0E0h]"
);
// LINE 1732:
	asm( 
"	      004b37db    mov eax,1"
"	      004b37e0    jmp near ptr 004B3849h"
);
// LINE 1734:
	asm( 
"	      004b37e5    jmp near ptr 004B383Fh"
"	      004b37ea    mov eax,[ebp-20h]"
"	      004b37ed    cmp dword ptr [eax+0CCh],3"
"	      004b37f4    jne near ptr 004B3817h"
);
// LINE 1735:
	asm( 
"	      004b37fa    mov eax,[ebp-20h]"
"	      004b37fd    mov eax,[eax]"
"	      004b37ff    mov ecx,[ebp-20h]"
"	      004b3802    call dword ptr [eax+0E4h]"
);
// LINE 1736:
	asm( 
"	      004b3808    mov eax,1"
"	      004b380d    jmp near ptr 004B3849h"
);
// LINE 1738:
	asm( 
"	      004b3812    jmp near ptr 004B383Fh"
"	      004b3817    mov eax,[ebp-20h]"
"	      004b381a    cmp dword ptr [eax+0CCh],4"
"	      004b3821    jne near ptr 004B383Fh"
);
// LINE 1739:
	asm( 
"	      004b3827    mov eax,[ebp-20h]"
"	      004b382a    mov eax,[eax]"
"	      004b382c    mov ecx,[ebp-20h]"
"	      004b382f    call dword ptr [eax+0E8h]"
);
// LINE 1740:
	asm( 
"	      004b3835    mov eax,1"
"	      004b383a    jmp near ptr 004B3849h"
);
// LINE 1749:
	asm( 
"	      004b383f    mov eax,1"
"	      004b3844    jmp near ptr 004B3849h"
);
// LINE 1750:
	asm( 
"	      004b3849    pop edi"
"	      004b384a    pop esi"
"	      004b384b    pop ebx"
"	      004b384c    leave"
"	      004b384d    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b3850
long ScrollBarWindow::DoCursorUp(long, long, unsigned long) {
// LINE 1757:
	asm( 
"	      004b3850    push ebp"
"	      004b3851    mov ebp,esp"
"	      004b3853    sub esp,0Ch"
"	      004b3856    push ebx"
"	      004b3857    push esi"
"	      004b3858    push edi"
"	      004b3859    mov [ebp-0Ch],ecx"
);
// LINE 1760:
	asm( 
"	      004b385c    mov eax,ds:[59A960h]"
"	      004b3861    cmp [ebp-0Ch],eax"
"	      004b3864    jne near ptr 004B386Fh"
"	      004b386a    jmp near ptr 004B3874h"
"	      004b386f    jmp near ptr 004B38D3h"
"	      004b3874    jmp near ptr 004B3883h"
"	      004b3879    cmp dword ptr [ebp-8],0"
"	      004b387d    je near ptr 004B38D3h"
);
// LINE 1761:
	asm( 
"	      004b3883    mov eax,[ebp-0Ch]"
"	      004b3886    push eax"
"	      004b3887    mov eax,[ebp-0Ch]"
"	      004b388a    mov eax,[eax]"
"	      004b388c    mov ecx,[ebp-0Ch]"
"	      004b388f    call dword ptr [eax+9Ch]"
);
// LINE 1762:
	asm( 
"	      004b3895    mov eax,[ebp-0Ch]"
"	      004b3898    cmp dword ptr [eax+0CCh],5"
"	      004b389f    jne near ptr 004B38D3h"
);
// LINE 1763:
	asm( 
"	      004b38a5    mov eax,[ebp+0Ch]"
"	      004b38a8    push eax"
"	      004b38a9    mov eax,[ebp+8]"
"	      004b38ac    push eax"
"	      004b38ad    lea eax,[ebp-4]"
"	      004b38b0    push eax"
"	      004b38b1    mov eax,[ebp-0Ch]"
"	      004b38b4    mov eax,[eax]"
"	      004b38b6    mov ecx,[ebp-0Ch]"
"	      004b38b9    call dword ptr [eax+0C4h]"
"	      004b38bf    test eax,eax"
"	      004b38c1    je near ptr 004B38D3h"
);
// LINE 1764:
	asm( 
"	      004b38c7    mov eax,[ebp-4]"
"	      004b38ca    push eax"
"	      004b38cb    mov ecx,[ebp-0Ch]"
"	      004b38ce    call 004B273Ah"
);
// LINE 1767:
	asm( 
"	      004b38d3    mov eax,1"
"	      004b38d8    jmp near ptr 004B38DDh"
);
// LINE 1768:
	asm( 
"	      004b38dd    pop edi"
"	      004b38de    pop esi"
"	      004b38df    pop ebx"
"	      004b38e0    leave"
"	      004b38e1    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b38e4
long ScrollBarWindow::DoCursorMove(long, long) {
// LINE 1775:
	asm( 
"	      004b38e4    push ebp"
"	      004b38e5    mov ebp,esp"
"	      004b38e7    sub esp,10h"
"	      004b38ea    push ebx"
"	      004b38eb    push esi"
"	      004b38ec    push edi"
"	      004b38ed    mov [ebp-10h],ecx"
);
// LINE 1779:
	asm( 
"	      004b38f0    mov eax,ds:[59A960h]"
"	      004b38f5    cmp [ebp-10h],eax"
"	      004b38f8    jne near ptr 004B3903h"
"	      004b38fe    jmp near ptr 004B3908h"
"	      004b3903    jmp near ptr 004B39BFh"
"	      004b3908    jmp near ptr 004B3917h"
"	      004b390d    cmp dword ptr [ebp-0Ch],0"
"	      004b3911    je near ptr 004B39BFh"
);
// LINE 1780:
	asm( 
"	      004b3917    mov eax,[ebp-10h]"
"	      004b391a    cmp dword ptr [eax+0CCh],5"
"	      004b3921    jne near ptr 004B395Ah"
);
// LINE 1781:
	asm( 
"	      004b3927    mov eax,[ebp+0Ch]"
"	      004b392a    push eax"
"	      004b392b    mov eax,[ebp+8]"
"	      004b392e    push eax"
"	      004b392f    lea eax,[ebp-4]"
"	      004b3932    push eax"
"	      004b3933    mov eax,[ebp-10h]"
"	      004b3936    mov eax,[eax]"
"	      004b3938    mov ecx,[ebp-10h]"
"	      004b393b    call dword ptr [eax+0C4h]"
"	      004b3941    test eax,eax"
"	      004b3943    je near ptr 004B3955h"
);
// LINE 1782:
	asm( 
"	      004b3949    mov eax,[ebp-4]"
"	      004b394c    push eax"
"	      004b394d    mov ecx,[ebp-10h]"
"	      004b3950    call 004B273Ah"
);
// LINE 1784:
	asm( 
"	      004b3955    jmp near ptr 004B39BFh"
);
// LINE 1785:
	asm( 
"	      004b395a    mov eax,[ebp+0Ch]"
"	      004b395d    push eax"
"	      004b395e    mov eax,[ebp+8]"
"	      004b3961    push eax"
"	      004b3962    lea eax,[ebp-8]"
"	      004b3965    push eax"
"	      004b3966    mov eax,[ebp-10h]"
"	      004b3969    mov eax,[eax]"
"	      004b396b    mov ecx,[ebp-10h]"
"	      004b396e    call dword ptr [eax+0ECh]"
"	      004b3974    test eax,eax"
"	      004b3976    jne near ptr 004B398Eh"
);
// LINE 1786:
	asm( 
"	      004b397c    mov eax,[ebp-10h]"
"	      004b397f    mov dword ptr [eax+0D0h],0"
);
// LINE 1787:
	asm( 
"	      004b3989    jmp near ptr 004B39BFh"
);
// LINE 1788:
	asm( 
"	      004b398e    mov eax,[ebp-10h]"
"	      004b3991    mov ecx,[ebp-8]"
"	      004b3994    cmp [eax+0CCh],ecx"
"	      004b399a    jne near ptr 004B39B2h"
"	      004b39a0    mov eax,[ebp-10h]"
"	      004b39a3    mov dword ptr [eax+0D0h],1"
"	      004b39ad    jmp near ptr 004B39BFh"
"	      004b39b2    mov eax,[ebp-10h]"
"	      004b39b5    mov dword ptr [eax+0D0h],0"
);
// LINE 1791:
	asm( 
"	      004b39bf    mov eax,1"
"	      004b39c4    jmp near ptr 004B39C9h"
);
// LINE 1792:
	asm( 
"	      004b39c9    pop edi"
"	      004b39ca    pop esi"
"	      004b39cb    pop ebx"
"	      004b39cc    leave"
"	      004b39cd    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b39d0
void ScrollBarWindow::MoveLinePrevious() {
// LINE 1800:
	asm( 
"	      004b39d0    push ebp"
"	      004b39d1    mov ebp,esp"
"	      004b39d3    sub esp,0Ch"
"	      004b39d6    push ebx"
"	      004b39d7    push esi"
"	      004b39d8    push edi"
"	      004b39d9    mov [ebp-0Ch],ecx"
);
// LINE 1801:
	asm( 
"	      004b39dc    mov eax,[ebp-0Ch]"
"	      004b39df    mov eax,[eax+7Ch]"
"	      004b39e2    mov ecx,[ebp-0Ch]"
"	      004b39e5    sub eax,[ecx+78h]"
"	      004b39e8    mov ecx,[ebp-0Ch]"
"	      004b39eb    cdq"
"	      004b39ec    idiv dword ptr [ecx+0B4h]"
"	      004b39f2    mov [ebp-8],eax"
);
// LINE 1804:
	asm( 
"	      004b39f5    mov eax,[ebp-0Ch]"
"	      004b39f8    mov ecx,[ebp-0Ch]"
"	      004b39fb    mov ecx,[ecx+80h]"
"	      004b3a01    cmp [eax+78h],ecx"
"	      004b3a04    jge near ptr 004B3A3Ch"
);
// LINE 1805:
	asm( 
"	      004b3a0a    mov ecx,[ebp-0Ch]"
"	      004b3a0d    call 004B271Bh"
"	      004b3a12    sub eax,[ebp-8]"
"	      004b3a15    mov [ebp-4],eax"
);
// LINE 1806:
	asm( 
"	      004b3a18    mov eax,[ebp-0Ch]"
"	      004b3a1b    mov ecx,[ebp-4]"
"	      004b3a1e    cmp [eax+78h],ecx"
"	      004b3a21    jle near ptr 004B3A30h"
);
// LINE 1807:
	asm( 
"	      004b3a27    mov eax,[ebp-0Ch]"
"	      004b3a2a    mov eax,[eax+78h]"
"	      004b3a2d    mov [ebp-4],eax"
);
// LINE 1808:
	asm( 
"	      004b3a30    mov eax,[ebp-4]"
"	      004b3a33    push eax"
"	      004b3a34    mov ecx,[ebp-0Ch]"
"	      004b3a37    call 004B273Ah"
);
// LINE 1810:
	asm( 
"	      004b3a3c    jmp near ptr 004B3A41h"
"	      004b3a41    pop edi"
"	      004b3a42    pop esi"
"	      004b3a43    pop ebx"
"	      004b3a44    leave"
"	      004b3a45    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3a46
void ScrollBarWindow::MoveLineNext() {
// LINE 1818:
	asm( 
"	      004b3a46    push ebp"
"	      004b3a47    mov ebp,esp"
"	      004b3a49    sub esp,0Ch"
"	      004b3a4c    push ebx"
"	      004b3a4d    push esi"
"	      004b3a4e    push edi"
"	      004b3a4f    mov [ebp-0Ch],ecx"
);
// LINE 1819:
	asm( 
"	      004b3a52    mov eax,[ebp-0Ch]"
"	      004b3a55    mov eax,[eax+7Ch]"
"	      004b3a58    mov ecx,[ebp-0Ch]"
"	      004b3a5b    sub eax,[ecx+78h]"
"	      004b3a5e    mov ecx,[ebp-0Ch]"
"	      004b3a61    cdq"
"	      004b3a62    idiv dword ptr [ecx+0B4h]"
"	      004b3a68    mov [ebp-8],eax"
);
// LINE 1822:
	asm( 
"	      004b3a6b    mov eax,[ebp-0Ch]"
"	      004b3a6e    mov ecx,[ebp-0Ch]"
"	      004b3a71    mov ecx,[ecx+80h]"
"	      004b3a77    cmp [eax+7Ch],ecx"
"	      004b3a7a    jle near ptr 004B3AB4h"
);
// LINE 1823:
	asm( 
"	      004b3a80    mov ecx,[ebp-0Ch]"
"	      004b3a83    call 004B271Bh"
"	      004b3a88    mov ecx,[ebp-8]"
"	      004b3a8b    add ecx,eax"
"	      004b3a8d    mov [ebp-4],ecx"
);
// LINE 1824:
	asm( 
"	      004b3a90    mov eax,[ebp-0Ch]"
"	      004b3a93    mov ecx,[ebp-4]"
"	      004b3a96    cmp [eax+7Ch],ecx"
"	      004b3a99    jge near ptr 004B3AA8h"
);
// LINE 1825:
	asm( 
"	      004b3a9f    mov eax,[ebp-0Ch]"
"	      004b3aa2    mov eax,[eax+7Ch]"
"	      004b3aa5    mov [ebp-4],eax"
);
// LINE 1826:
	asm( 
"	      004b3aa8    mov eax,[ebp-4]"
"	      004b3aab    push eax"
"	      004b3aac    mov ecx,[ebp-0Ch]"
"	      004b3aaf    call 004B273Ah"
);
// LINE 1828:
	asm( 
"	      004b3ab4    jmp near ptr 004B3AB9h"
"	      004b3ab9    pop edi"
"	      004b3aba    pop esi"
"	      004b3abb    pop ebx"
"	      004b3abc    leave"
"	      004b3abd    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3abe
void ScrollBarWindow::MovePagePrevious() {
// LINE 1835:
	asm( 
"	      004b3abe    push ebp"
"	      004b3abf    mov ebp,esp"
"	      004b3ac1    sub esp,0Ch"
"	      004b3ac4    push ebx"
"	      004b3ac5    push esi"
"	      004b3ac6    push edi"
"	      004b3ac7    mov [ebp-0Ch],ecx"
);
// LINE 1836:
	asm( 
"	      004b3aca    mov eax,[ebp-0Ch]"
"	      004b3acd    mov eax,[eax+7Ch]"
"	      004b3ad0    mov ecx,[ebp-0Ch]"
"	      004b3ad3    sub eax,[ecx+78h]"
"	      004b3ad6    mov ecx,[ebp-0Ch]"
"	      004b3ad9    cdq"
"	      004b3ada    idiv dword ptr [ecx+0B8h]"
"	      004b3ae0    mov [ebp-8],eax"
);
// LINE 1839:
	asm( 
"	      004b3ae3    mov eax,[ebp-0Ch]"
"	      004b3ae6    mov ecx,[ebp-0Ch]"
"	      004b3ae9    mov ecx,[ecx+78h]"
"	      004b3aec    cmp [eax+80h],ecx"
"	      004b3af2    jle near ptr 004B3B2Ah"
);
// LINE 1840:
	asm( 
"	      004b3af8    mov ecx,[ebp-0Ch]"
"	      004b3afb    call 004B271Bh"
"	      004b3b00    sub eax,[ebp-8]"
"	      004b3b03    mov [ebp-4],eax"
);
// LINE 1841:
	asm( 
"	      004b3b06    mov eax,[ebp-0Ch]"
"	      004b3b09    mov ecx,[ebp-4]"
"	      004b3b0c    cmp [eax+78h],ecx"
"	      004b3b0f    jle near ptr 004B3B1Eh"
);
// LINE 1842:
	asm( 
"	      004b3b15    mov eax,[ebp-0Ch]"
"	      004b3b18    mov eax,[eax+78h]"
"	      004b3b1b    mov [ebp-4],eax"
);
// LINE 1843:
	asm( 
"	      004b3b1e    mov eax,[ebp-4]"
"	      004b3b21    push eax"
"	      004b3b22    mov ecx,[ebp-0Ch]"
"	      004b3b25    call 004B273Ah"
);
// LINE 1845:
	asm( 
"	      004b3b2a    jmp near ptr 004B3B2Fh"
"	      004b3b2f    pop edi"
"	      004b3b30    pop esi"
"	      004b3b31    pop ebx"
"	      004b3b32    leave"
"	      004b3b33    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3b34
void ScrollBarWindow::MovePageNext() {
// LINE 1852:
	asm( 
"	      004b3b34    push ebp"
"	      004b3b35    mov ebp,esp"
"	      004b3b37    sub esp,0Ch"
"	      004b3b3a    push ebx"
"	      004b3b3b    push esi"
"	      004b3b3c    push edi"
"	      004b3b3d    mov [ebp-0Ch],ecx"
);
// LINE 1853:
	asm( 
"	      004b3b40    mov eax,[ebp-0Ch]"
"	      004b3b43    mov eax,[eax+7Ch]"
"	      004b3b46    mov ecx,[ebp-0Ch]"
"	      004b3b49    sub eax,[ecx+78h]"
"	      004b3b4c    mov ecx,[ebp-0Ch]"
"	      004b3b4f    cdq"
"	      004b3b50    idiv dword ptr [ecx+0B8h]"
"	      004b3b56    mov [ebp-8],eax"
);
// LINE 1856:
	asm( 
"	      004b3b59    mov eax,[ebp-0Ch]"
"	      004b3b5c    mov ecx,[ebp-0Ch]"
"	      004b3b5f    mov ecx,[ecx+80h]"
"	      004b3b65    cmp [eax+7Ch],ecx"
"	      004b3b68    jle near ptr 004B3BA2h"
);
// LINE 1857:
	asm( 
"	      004b3b6e    mov ecx,[ebp-0Ch]"
"	      004b3b71    call 004B271Bh"
"	      004b3b76    mov ecx,[ebp-8]"
"	      004b3b79    add ecx,eax"
"	      004b3b7b    mov [ebp-4],ecx"
);
// LINE 1858:
	asm( 
"	      004b3b7e    mov eax,[ebp-0Ch]"
"	      004b3b81    mov ecx,[ebp-4]"
"	      004b3b84    cmp [eax+7Ch],ecx"
"	      004b3b87    jge near ptr 004B3B96h"
);
// LINE 1859:
	asm( 
"	      004b3b8d    mov eax,[ebp-0Ch]"
"	      004b3b90    mov eax,[eax+7Ch]"
"	      004b3b93    mov [ebp-4],eax"
);
// LINE 1860:
	asm( 
"	      004b3b96    mov eax,[ebp-4]"
"	      004b3b99    push eax"
"	      004b3b9a    mov ecx,[ebp-0Ch]"
"	      004b3b9d    call 004B273Ah"
);
// LINE 1862:
	asm( 
"	      004b3ba2    jmp near ptr 004B3BA7h"
"	      004b3ba7    pop edi"
"	      004b3ba8    pop esi"
"	      004b3ba9    pop ebx"
"	      004b3baa    leave"
"	      004b3bab    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3bac
void ScrollBarWindow::SetLineAndPageCount(long, long) {
// LINE 1872:
	asm( 
"	      004b3bac    push ebp"
"	      004b3bad    mov ebp,esp"
"	      004b3baf    sub esp,4"
"	      004b3bb2    push ebx"
"	      004b3bb3    push esi"
"	      004b3bb4    push edi"
"	      004b3bb5    mov [ebp-4],ecx"
);
// LINE 1873:
	asm( 
"	      004b3bb8    cmp dword ptr [ebp+8],0"
"	      004b3bbc    jle near ptr 004B3BCCh"
"	      004b3bc2    cmp dword ptr [ebp+0Ch],0"
"	      004b3bc6    jg near ptr 004B3BD1h"
);
// LINE 1874:
	asm( 
"	      004b3bcc    jmp near ptr 004B3C41h"
);
// LINE 1876:
	asm( 
"	      004b3bd1    cmp dword ptr [ebp+8],0"
"	      004b3bd5    jne near ptr 004B3BF5h"
);
// LINE 1877:
	asm( 
"	      004b3bdb    mov eax,[ebp-4]"
"	      004b3bde    mov eax,[eax+7Ch]"
"	      004b3be1    mov ecx,[ebp-4]"
"	      004b3be4    sub eax,[ecx+78h]"
"	      004b3be7    mov ecx,[ebp-4]"
"	      004b3bea    mov [ecx+0B4h],eax"
);
// LINE 1878:
	asm( 
"	      004b3bf0    jmp near ptr 004B3C01h"
);
// LINE 1879:
	asm( 
"	      004b3bf5    mov eax,[ebp+8]"
"	      004b3bf8    mov ecx,[ebp-4]"
"	      004b3bfb    mov [ecx+0B4h],eax"
);
// LINE 1880:
	asm( 
"	      004b3c01    cmp dword ptr [ebp+0Ch],0"
"	      004b3c05    jne near ptr 004B3C22h"
);
// LINE 1881:
	asm( 
"	      004b3c0b    mov eax,[ebp-4]"
"	      004b3c0e    mov eax,[eax+0B4h]"
"	      004b3c14    mov ecx,[ebp-4]"
"	      004b3c17    mov [ecx+0B8h],eax"
);
// LINE 1882:
	asm( 
"	      004b3c1d    jmp near ptr 004B3C2Eh"
);
// LINE 1883:
	asm( 
"	      004b3c22    mov eax,[ebp+0Ch]"
"	      004b3c25    mov ecx,[ebp-4]"
"	      004b3c28    mov [ecx+0B8h],eax"
);
// LINE 1884:
	asm( 
"	      004b3c2e    mov eax,[ebp-4]"
"	      004b3c31    mov eax,[eax]"
"	      004b3c33    mov ecx,[ebp-4]"
"	      004b3c36    call dword ptr [eax+0CCh]"
);
// LINE 1885:
	asm( 
"	      004b3c3c    jmp near ptr 004B3C41h"
"	      004b3c41    pop edi"
"	      004b3c42    pop esi"
"	      004b3c43    pop ebx"
"	      004b3c44    leave"
"	      004b3c45    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b3c48
long ScrollBarWindow::GetCurrentLine() {
// LINE 1892:
	asm( 
"	      004b3c48    push ebp"
"	      004b3c49    mov ebp,esp"
"	      004b3c4b    sub esp,8"
"	      004b3c4e    push ebx"
"	      004b3c4f    push esi"
"	      004b3c50    push edi"
"	      004b3c51    mov [ebp-8],ecx"
);
// LINE 1893:
	asm( 
"	      004b3c54    mov eax,[ebp-8]"
"	      004b3c57    mov eax,[eax+7Ch]"
"	      004b3c5a    mov ecx,[ebp-8]"
"	      004b3c5d    sub eax,[ecx+78h]"
"	      004b3c60    mov [ebp-4],eax"
);
// LINE 1895:
	asm( 
"	      004b3c63    mov eax,[ebp-8]"
"	      004b3c66    cmp dword ptr [eax+0B4h],1"
"	      004b3c6d    jne near ptr 004B3C7Ah"
);
// LINE 1896:
	asm( 
"	      004b3c73    xor eax,eax"
"	      004b3c75    jmp near ptr 004B3C9Fh"
);
// LINE 1897:
	asm( 
"	      004b3c7a    mov eax,[ebp-8]"
"	      004b3c7d    mov eax,[eax+80h]"
"	      004b3c83    mov ecx,[ebp-8]"
"	      004b3c86    sub eax,[ecx+78h]"
"	      004b3c89    mov ecx,[ebp-8]"
"	      004b3c8c    mov ecx,[ecx+0B4h]"
"	      004b3c92    dec ecx"
"	      004b3c93    imul eax,ecx"
"	      004b3c96    cdq"
"	      004b3c97    idiv dword ptr [ebp-4]"
"	      004b3c9a    jmp near ptr 004B3C9Fh"
);
// LINE 1898:
	asm( 
"	      004b3c9f    pop edi"
"	      004b3ca0    pop esi"
"	      004b3ca1    pop ebx"
"	      004b3ca2    leave"
"	      004b3ca3    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3ca4
long ScrollBarWindow::GetValueOfGivenLine(long) {
// LINE 1905:
	asm( 
"	      004b3ca4    push ebp"
"	      004b3ca5    mov ebp,esp"
"	      004b3ca7    sub esp,8"
"	      004b3caa    push ebx"
"	      004b3cab    push esi"
"	      004b3cac    push edi"
"	      004b3cad    mov [ebp-8],ecx"
);
// LINE 1906:
	asm( 
"	      004b3cb0    mov eax,[ebp-8]"
"	      004b3cb3    mov eax,[eax+7Ch]"
"	      004b3cb6    mov ecx,[ebp-8]"
"	      004b3cb9    sub eax,[ecx+78h]"
"	      004b3cbc    mov [ebp-4],eax"
);
// LINE 1908:
	asm( 
"	      004b3cbf    mov eax,[ebp-8]"
"	      004b3cc2    cmp dword ptr [eax+0B4h],1"
"	      004b3cc9    jne near ptr 004B3CDAh"
);
// LINE 1909:
	asm( 
"	      004b3ccf    mov eax,[ebp-8]"
"	      004b3cd2    mov eax,[eax+78h]"
"	      004b3cd5    jmp near ptr 004B3CF9h"
);
// LINE 1910:
	asm( 
"	      004b3cda    mov eax,[ebp-4]"
"	      004b3cdd    imul eax,[ebp+8]"
"	      004b3ce1    mov ecx,[ebp-8]"
"	      004b3ce4    mov ecx,[ecx+0B4h]"
"	      004b3cea    dec ecx"
"	      004b3ceb    cdq"
"	      004b3cec    idiv ecx"
"	      004b3cee    mov ecx,[ebp-8]"
"	      004b3cf1    add eax,[ecx+78h]"
"	      004b3cf4    jmp near ptr 004B3CF9h"
);
// LINE 1911:
	asm( 
"	      004b3cf9    pop edi"
"	      004b3cfa    pop esi"
"	      004b3cfb    pop ebx"
"	      004b3cfc    leave"
"	      004b3cfd    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b3d00
long ScrollBarWindow::GetCurrentPage() {
// LINE 1919:
	asm( 
"	      004b3d00    push ebp"
"	      004b3d01    mov ebp,esp"
"	      004b3d03    sub esp,8"
"	      004b3d06    push ebx"
"	      004b3d07    push esi"
"	      004b3d08    push edi"
"	      004b3d09    mov [ebp-8],ecx"
);
// LINE 1920:
	asm( 
"	      004b3d0c    mov eax,[ebp-8]"
"	      004b3d0f    mov eax,[eax+7Ch]"
"	      004b3d12    mov ecx,[ebp-8]"
"	      004b3d15    sub eax,[ecx+78h]"
"	      004b3d18    mov [ebp-4],eax"
);
// LINE 1922:
	asm( 
"	      004b3d1b    mov eax,[ebp-8]"
"	      004b3d1e    cmp dword ptr [eax+0B8h],1"
"	      004b3d25    jne near ptr 004B3D32h"
);
// LINE 1923:
	asm( 
"	      004b3d2b    xor eax,eax"
"	      004b3d2d    jmp near ptr 004B3D57h"
);
// LINE 1924:
	asm( 
"	      004b3d32    mov eax,[ebp-8]"
"	      004b3d35    mov eax,[eax+80h]"
"	      004b3d3b    mov ecx,[ebp-8]"
"	      004b3d3e    sub eax,[ecx+78h]"
"	      004b3d41    mov ecx,[ebp-8]"
"	      004b3d44    mov ecx,[ecx+0B8h]"
"	      004b3d4a    dec ecx"
"	      004b3d4b    imul eax,ecx"
"	      004b3d4e    cdq"
"	      004b3d4f    idiv dword ptr [ebp-4]"
"	      004b3d52    jmp near ptr 004B3D57h"
);
// LINE 1925:
	asm( 
"	      004b3d57    pop edi"
"	      004b3d58    pop esi"
"	      004b3d59    pop ebx"
"	      004b3d5a    leave"
"	      004b3d5b    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b3d5c
long ScrollBarWindow::GetValueOfGivenPage(long) {
// LINE 1932:
	asm( 
"	      004b3d5c    push ebp"
"	      004b3d5d    mov ebp,esp"
"	      004b3d5f    sub esp,8"
"	      004b3d62    push ebx"
"	      004b3d63    push esi"
"	      004b3d64    push edi"
"	      004b3d65    mov [ebp-8],ecx"
);
// LINE 1933:
	asm( 
"	      004b3d68    mov eax,[ebp-8]"
"	      004b3d6b    mov eax,[eax+7Ch]"
"	      004b3d6e    mov ecx,[ebp-8]"
"	      004b3d71    sub eax,[ecx+78h]"
"	      004b3d74    mov [ebp-4],eax"
);
// LINE 1935:
	asm( 
"	      004b3d77    mov eax,[ebp-8]"
"	      004b3d7a    cmp dword ptr [eax+0B8h],1"
"	      004b3d81    jne near ptr 004B3D92h"
);
// LINE 1936:
	asm( 
"	      004b3d87    mov eax,[ebp-8]"
"	      004b3d8a    mov eax,[eax+78h]"
"	      004b3d8d    jmp near ptr 004B3DB1h"
);
// LINE 1937:
	asm( 
"	      004b3d92    mov eax,[ebp-4]"
"	      004b3d95    imul eax,[ebp+8]"
"	      004b3d99    mov ecx,[ebp-8]"
"	      004b3d9c    mov ecx,[ecx+0B8h]"
"	      004b3da2    dec ecx"
"	      004b3da3    cdq"
"	      004b3da4    idiv ecx"
"	      004b3da6    mov ecx,[ebp-8]"
"	      004b3da9    add eax,[ecx+78h]"
"	      004b3dac    jmp near ptr 004B3DB1h"
);
// LINE 1938:
	asm( 
"	      004b3db1    pop edi"
"	      004b3db2    pop esi"
"	      004b3db3    pop ebx"
"	      004b3db4    leave"
"	      004b3db5    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b3db8
int32_t ScrollBarWindow::DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult&, long, long) {
// LINE 1964:
	asm( 
"	      004b3db8    push ebp"
"	      004b3db9    mov ebp,esp"
"	      004b3dbb    sub esp,0Ch"
"	      004b3dbe    push ebx"
"	      004b3dbf    push esi"
"	      004b3dc0    push edi"
"	      004b3dc1    mov [ebp-0Ch],ecx"
);
// LINE 1968:
	asm( 
"	      004b3dc4    mov eax,[ebp+10h]"
"	      004b3dc7    push eax"
"	      004b3dc8    mov eax,[ebp+0Ch]"
"	      004b3dcb    push eax"
"	      004b3dcc    mov eax,[ebp-0Ch]"
"	      004b3dcf    mov eax,[eax]"
"	      004b3dd1    mov ecx,[ebp-0Ch]"
"	      004b3dd4    call dword ptr [eax+0A8h]"
"	      004b3dda    test eax,eax"
"	      004b3ddc    jne near ptr 004B3DF2h"
);
// LINE 1969:
	asm( 
"	      004b3de2    mov eax,[ebp+8]"
"	      004b3de5    mov dword ptr [eax],0"
);
// LINE 1970:
	asm( 
"	      004b3deb    xor eax,eax"
"	      004b3ded    jmp near ptr 004B3F6Ch"
);
// LINE 1973:
	asm( 
"	      004b3df2    mov eax,[ebp-0Ch]"
"	      004b3df5    cmp dword ptr [eax+74h],0"
"	      004b3df9    jne near ptr 004B3EB3h"
);
// LINE 1974:
	asm( 
"	      004b3dff    mov eax,[ebp-0Ch]"
"	      004b3e02    mov eax,[eax]"
"	      004b3e04    mov ecx,[ebp-0Ch]"
"	      004b3e07    call dword ptr [eax+0F0h]"
"	      004b3e0d    mov [ebp-8],eax"
);
// LINE 1975:
	asm( 
"	      004b3e10    mov eax,[ebp+0Ch]"
"	      004b3e13    cmp [ebp-8],eax"
"	      004b3e16    jle near ptr 004B3E2Ah"
);
// LINE 1976:
	asm( 
"	      004b3e1c    mov eax,[ebp+8]"
"	      004b3e1f    mov dword ptr [eax],1"
);
// LINE 1977:
	asm( 
"	      004b3e25    jmp near ptr 004B3EAEh"
"	      004b3e2a    mov eax,[ebp-0Ch]"
"	      004b3e2d    mov ecx,[ebp+0Ch]"
"	      004b3e30    cmp [eax+88h],ecx"
"	      004b3e36    jle near ptr 004B3E4Ah"
);
// LINE 1978:
	asm( 
"	      004b3e3c    mov eax,[ebp+8]"
"	      004b3e3f    mov dword ptr [eax],3"
);
// LINE 1979:
	asm( 
"	      004b3e45    jmp near ptr 004B3EAEh"
"	      004b3e4a    mov eax,[ebp-0Ch]"
"	      004b3e4d    mov eax,[eax]"
"	      004b3e4f    mov ecx,[ebp-0Ch]"
"	      004b3e52    call dword ptr [eax+0D0h]"
"	      004b3e58    mov ecx,[ebp-0Ch]"
"	      004b3e5b    mov ecx,[ecx+88h]"
"	      004b3e61    add ecx,eax"
"	      004b3e63    cmp ecx,[ebp+0Ch]"
"	      004b3e66    jle near ptr 004B3E7Ah"
);
// LINE 1980:
	asm( 
"	      004b3e6c    mov eax,[ebp+8]"
"	      004b3e6f    mov dword ptr [eax],5"
);
// LINE 1981:
	asm( 
"	      004b3e75    jmp near ptr 004B3EAEh"
"	      004b3e7a    jmp near ptr 004B3E7Fh"
"	      004b3e7f    mov eax,[ebp-0Ch]"
"	      004b3e82    mov eax,[eax+18h]"
"	      004b3e85    mov ecx,[ebp-0Ch]"
"	      004b3e88    sub eax,[ecx+10h]"
"	      004b3e8b    sub eax,[ebp-8]"
"	      004b3e8e    cmp eax,[ebp+0Ch]"
"	      004b3e91    jle near ptr 004B3EA5h"
);
// LINE 1982:
	asm( 
"	      004b3e97    mov eax,[ebp+8]"
"	      004b3e9a    mov dword ptr [eax],4"
);
// LINE 1983:
	asm( 
"	      004b3ea0    jmp near ptr 004B3EAEh"
);
// LINE 1984:
	asm( 
"	      004b3ea5    mov eax,[ebp+8]"
"	      004b3ea8    mov dword ptr [eax],2"
);
// LINE 1986:
	asm( 
"	      004b3eae    jmp near ptr 004B3F62h"
);
// LINE 1987:
	asm( 
"	      004b3eb3    mov eax,[ebp-0Ch]"
"	      004b3eb6    mov eax,[eax]"
"	      004b3eb8    mov ecx,[ebp-0Ch]"
"	      004b3ebb    call dword ptr [eax+0F4h]"
"	      004b3ec1    mov [ebp-4],eax"
);
// LINE 1988:
	asm( 
"	      004b3ec4    mov eax,[ebp+10h]"
"	      004b3ec7    cmp [ebp-4],eax"
"	      004b3eca    jle near ptr 004B3EDEh"
);
// LINE 1989:
	asm( 
"	      004b3ed0    mov eax,[ebp+8]"
"	      004b3ed3    mov dword ptr [eax],1"
);
// LINE 1990:
	asm( 
"	      004b3ed9    jmp near ptr 004B3F62h"
"	      004b3ede    mov eax,[ebp-0Ch]"
"	      004b3ee1    mov ecx,[ebp+10h]"
"	      004b3ee4    cmp [eax+88h],ecx"
"	      004b3eea    jle near ptr 004B3EFEh"
);
// LINE 1991:
	asm( 
"	      004b3ef0    mov eax,[ebp+8]"
"	      004b3ef3    mov dword ptr [eax],3"
);
// LINE 1992:
	asm( 
"	      004b3ef9    jmp near ptr 004B3F62h"
"	      004b3efe    mov eax,[ebp-0Ch]"
"	      004b3f01    mov eax,[eax]"
"	      004b3f03    mov ecx,[ebp-0Ch]"
"	      004b3f06    call dword ptr [eax+0D4h]"
"	      004b3f0c    mov ecx,[ebp-0Ch]"
"	      004b3f0f    mov ecx,[ecx+88h]"
"	      004b3f15    add ecx,eax"
"	      004b3f17    cmp ecx,[ebp+10h]"
"	      004b3f1a    jle near ptr 004B3F2Eh"
);
// LINE 1993:
	asm( 
"	      004b3f20    mov eax,[ebp+8]"
"	      004b3f23    mov dword ptr [eax],5"
);
// LINE 1994:
	asm( 
"	      004b3f29    jmp near ptr 004B3F62h"
"	      004b3f2e    jmp near ptr 004B3F33h"
"	      004b3f33    mov eax,[ebp-0Ch]"
"	      004b3f36    mov eax,[eax+1Ch]"
"	      004b3f39    mov ecx,[ebp-0Ch]"
"	      004b3f3c    sub eax,[ecx+14h]"
"	      004b3f3f    sub eax,[ebp-4]"
"	      004b3f42    cmp eax,[ebp+10h]"
"	      004b3f45    jle near ptr 004B3F59h"
);
// LINE 1995:
	asm( 
"	      004b3f4b    mov eax,[ebp+8]"
"	      004b3f4e    mov dword ptr [eax],4"
);
// LINE 1996:
	asm( 
"	      004b3f54    jmp near ptr 004B3F62h"
);
// LINE 1997:
	asm( 
"	      004b3f59    mov eax,[ebp+8]"
"	      004b3f5c    mov dword ptr [eax],2"
);
// LINE 1999:
	asm( 
"	      004b3f62    mov eax,1"
"	      004b3f67    jmp near ptr 004B3F6Ch"
);
// LINE 2000:
	asm( 
"	      004b3f6c    pop edi"
"	      004b3f6d    pop esi"
"	      004b3f6e    pop ebx"
"	      004b3f6f    leave"
"	      004b3f70    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b3f73
void ScrollBarWindow::CalculateAllMetrics() {
// LINE 2007:
	asm( 
"	      004b3f73    push ebp"
"	      004b3f74    mov ebp,esp"
"	      004b3f76    sub esp,4"
"	      004b3f79    push ebx"
"	      004b3f7a    push esi"
"	      004b3f7b    push edi"
"	      004b3f7c    mov [ebp-4],ecx"
);
// LINE 2008:
	asm( 
"	      004b3f7f    mov eax,[ebp-4]"
"	      004b3f82    cmp dword ptr [eax+74h],0"
"	      004b3f86    jne near ptr 004B3FE2h"
);
// LINE 2009:
	asm( 
"	      004b3f8c    mov eax,[ebp-4]"
"	      004b3f8f    mov eax,[eax]"
"	      004b3f91    mov ecx,[ebp-4]"
"	      004b3f94    call dword ptr [eax+0F0h]"
"	      004b3f9a    mov ecx,[ebp-4]"
"	      004b3f9d    mov [ecx+84h],eax"
);
// LINE 2010:
	asm( 
"	      004b3fa3    jmp near ptr 004B3FA8h"
"	      004b3fa8    mov eax,[ebp-4]"
"	      004b3fab    mov ebx,[eax+18h]"
"	      004b3fae    mov eax,[ebp-4]"
"	      004b3fb1    sub ebx,[eax+10h]"
"	      004b3fb4    mov eax,[ebp-4]"
"	      004b3fb7    mov eax,[eax]"
"	      004b3fb9    mov ecx,[ebp-4]"
"	      004b3fbc    call dword ptr [eax+0F0h]"
"	      004b3fc2    sub ebx,eax"
"	      004b3fc4    mov eax,[ebp-4]"
"	      004b3fc7    mov eax,[eax]"
"	      004b3fc9    mov ecx,[ebp-4]"
"	      004b3fcc    call dword ptr [eax+0D0h]"
"	      004b3fd2    sub ebx,eax"
"	      004b3fd4    mov eax,[ebp-4]"
"	      004b3fd7    mov [eax+8Ch],ebx"
);
// LINE 2012:
	asm( 
"	      004b3fdd    jmp near ptr 004B4033h"
);
// LINE 2013:
	asm( 
"	      004b3fe2    mov eax,[ebp-4]"
"	      004b3fe5    mov eax,[eax]"
"	      004b3fe7    mov ecx,[ebp-4]"
"	      004b3fea    call dword ptr [eax+0F4h]"
"	      004b3ff0    mov ecx,[ebp-4]"
"	      004b3ff3    mov [ecx+84h],eax"
);
// LINE 2014:
	asm( 
"	      004b3ff9    jmp near ptr 004B3FFEh"
"	      004b3ffe    mov eax,[ebp-4]"
"	      004b4001    mov ebx,[eax+1Ch]"
"	      004b4004    mov eax,[ebp-4]"
"	      004b4007    sub ebx,[eax+14h]"
"	      004b400a    mov eax,[ebp-4]"
"	      004b400d    mov eax,[eax]"
"	      004b400f    mov ecx,[ebp-4]"
"	      004b4012    call dword ptr [eax+0F4h]"
"	      004b4018    sub ebx,eax"
"	      004b401a    mov eax,[ebp-4]"
"	      004b401d    mov eax,[eax]"
"	      004b401f    mov ecx,[ebp-4]"
"	      004b4022    call dword ptr [eax+0D4h]"
"	      004b4028    sub ebx,eax"
"	      004b402a    mov eax,[ebp-4]"
"	      004b402d    mov [eax+8Ch],ebx"
);
// LINE 2016:
	asm( 
"	      004b4033    mov eax,[ebp-4]"
"	      004b4036    mov eax,[eax]"
"	      004b4038    mov ecx,[ebp-4]"
"	      004b403b    call dword ptr [eax+0C8h]"
);
// LINE 2017:
	asm( 
"	      004b4041    jmp near ptr 004B4046h"
"	      004b4046    pop edi"
"	      004b4047    pop esi"
"	      004b4048    pop ebx"
"	      004b4049    leave"
"	      004b404a    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b404b
long ScrollBarWindow::GetThumbWidth() {
// LINE 2027:
	asm( 
"	      004b404b    push ebp"
"	      004b404c    mov ebp,esp"
"	      004b404e    sub esp,4"
"	      004b4051    push ebx"
"	      004b4052    push esi"
"	      004b4053    push edi"
"	      004b4054    mov [ebp-4],ecx"
);
// LINE 2028:
	asm( 
"	      004b4057    jmp near ptr 004B405Ch"
"	      004b405c    mov eax,[ebp-4]"
"	      004b405f    mov eax,[eax+40h]"
"	      004b4062    mov ecx,0Ch"
"	      004b4067    mov eax,[eax+8]"
"	      004b406a    cdq"
"	      004b406b    idiv ecx"
"	      004b406d    jmp near ptr 004B4072h"
);
// LINE 2029:
	asm( 
"	      004b4072    pop edi"
"	      004b4073    pop esi"
"	      004b4074    pop ebx"
"	      004b4075    leave"
"	      004b4076    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b4077
long ScrollBarWindow::GetThumbHeight() {
// LINE 2035:
	asm( 
"	      004b4077    push ebp"
"	      004b4078    mov ebp,esp"
"	      004b407a    sub esp,4"
"	      004b407d    push ebx"
"	      004b407e    push esi"
"	      004b407f    push edi"
"	      004b4080    mov [ebp-4],ecx"
);
// LINE 2036:
	asm( 
"	      004b4083    jmp near ptr 004B4088h"
"	      004b4088    mov eax,[ebp-4]"
"	      004b408b    mov eax,[eax+40h]"
"	      004b408e    mov eax,[eax+0Ch]"
"	      004b4091    jmp near ptr 004B4096h"
);
// LINE 2037:
	asm( 
"	      004b4096    pop edi"
"	      004b4097    pop esi"
"	      004b4098    pop ebx"
"	      004b4099    leave"
"	      004b409a    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b409b
long ScrollBarWindow::GetPrevNextButtonWidth() {
// LINE 2044:
	asm( 
"	      004b409b    push ebp"
"	      004b409c    mov ebp,esp"
"	      004b409e    sub esp,4"
"	      004b40a1    push ebx"
"	      004b40a2    push esi"
"	      004b40a3    push edi"
"	      004b40a4    mov [ebp-4],ecx"
);
// LINE 2045:
	asm( 
"	      004b40a7    jmp near ptr 004B40ACh"
"	      004b40ac    mov eax,[ebp-4]"
"	      004b40af    mov eax,[eax+40h]"
"	      004b40b2    mov eax,[eax+0Ch]"
"	      004b40b5    jmp near ptr 004B40BAh"
);
// LINE 2046:
	asm( 
"	      004b40ba    pop edi"
"	      004b40bb    pop esi"
"	      004b40bc    pop ebx"
"	      004b40bd    leave"
"	      004b40be    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b40bf
long ScrollBarWindow::GetPrevNextButtonHeight() {
// LINE 2053:
	asm( 
"	      004b40bf    push ebp"
"	      004b40c0    mov ebp,esp"
"	      004b40c2    sub esp,4"
"	      004b40c5    push ebx"
"	      004b40c6    push esi"
"	      004b40c7    push edi"
"	      004b40c8    mov [ebp-4],ecx"
);
// LINE 2054:
	asm( 
"	      004b40cb    jmp near ptr 004B40D0h"
"	      004b40d0    mov eax,[ebp-4]"
"	      004b40d3    mov eax,[eax+40h]"
"	      004b40d6    mov eax,[eax+0Ch]"
"	      004b40d9    jmp near ptr 004B40DEh"
);
// LINE 2055:
	asm( 
"	      004b40de    pop edi"
"	      004b40df    pop esi"
"	      004b40e0    pop ebx"
"	      004b40e1    leave"
"	      004b40e2    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b40e3
void ListBoxWindow::ListBoxWindow() {
// LINE 2076:
	asm( 
"	      004b40e3    push ebp"
"	      004b40e4    mov ebp,esp"
"	      004b40e6    sub esp,54h"
"	      004b40e9    push ebx"
"	      004b40ea    push esi"
"	      004b40eb    push edi"
"	      004b40ec    mov [ebp-54h],ecx"
"	      004b40ef    mov ecx,[ebp-54h]"
"	      004b40f2    call 004A2A3Fh"
"	      004b40f7    mov eax,[ebp-54h]"
"	      004b40fa    mov dword ptr [eax+78h],0"
"	      004b4101    inc dword ptr ds:[598560h]"
"	      004b4107    mov eax,ds:[59856Ch]"
"	      004b410c    mov [ebp-4],eax"
"	      004b410f    cmp dword ptr ds:[59856Ch],0"
"	      004b4116    je near ptr 004B4133h"
"	      004b411c    mov eax,ds:[59856Ch]"
"	      004b4121    mov eax,[eax]"
"	      004b4123    mov ds:[59856Ch],eax"
"	      004b4128    mov eax,[ebp-4]"
"	      004b412b    mov [ebp-50h],eax"
"	      004b412e    jmp near ptr 004B430Ah"
"	      004b4133    mov eax,ds:[598568h]"
"	      004b4138    cmp ds:[598564h],eax"
"	      004b413e    jne near ptr 004B42F5h"
"	      004b4144    push 0"
"	      004b4146    call 0056A620h"
"	      004b414b    add esp,4"
"	      004b414e    push 8"
"	      004b4150    call 0056A600h"
"	      004b4155    add esp,4"
"	      004b4158    mov [ebp-3Ch],eax"
"	      004b415b    cmp dword ptr [ebp-3Ch],0"
"	      004b415f    jne near ptr 004B4192h"
"	      004b4165    push 5971ACh"
"	      004b416a    mov ecx,638BA0h"
"	      004b416f    call 00569960h"
"	      004b4174    mov [ebp-40h],eax"
"	      004b4177    mov eax,[ebp-40h]"
"	      004b417a    push eax"
"	      004b417b    call 004011B0h"
"	      004b4180    add esp,4"
"	      004b4183    jmp near ptr 004B4188h"
"	      004b4188    push 1"
"	      004b418a    call 00569430h"
"	      004b418f    add esp,4"
"	      004b4192    jmp near ptr 004B4197h"
"	      004b4197    jmp near ptr 004B419Ch"
"	      004b419c    mov eax,[ebp-3Ch]"
"	      004b419f    mov [ebp-10h],eax"
"	      004b41a2    mov dword ptr [ebp-14h],100h"
"	      004b41a9    lea eax,[ebp-14h]"
"	      004b41ac    mov [ebp-1Ch],eax"
"	      004b41af    mov dword ptr [ebp-18h],1"
"	      004b41b6    lea eax,[ebp-18h]"
"	      004b41b9    mov [ebp-20h],eax"
"	      004b41bc    mov eax,[ebp-20h]"
"	      004b41bf    mov ecx,[ebp-1Ch]"
"	      004b41c2    mov ecx,[ecx]"
"	      004b41c4    cmp [eax],ecx"
"	      004b41c6    jb near ptr 004B41D7h"
"	      004b41cc    mov eax,[ebp-20h]"
"	      004b41cf    mov [ebp-24h],eax"
"	      004b41d2    jmp near ptr 004B41DDh"
"	      004b41d7    mov eax,[ebp-1Ch]"
"	      004b41da    mov [ebp-24h],eax"
"	      004b41dd    jmp near ptr 004B41E2h"
"	      004b41e2    jmp near ptr 004B41E7h"
"	      004b41e7    jmp near ptr 004B41ECh"
"	      004b41ec    mov eax,[ebp-24h]"
"	      004b41ef    mov eax,[eax]"
"	      004b41f1    mov [ebp-4Ch],eax"
"	      004b41f4    push 0"
"	      004b41f6    call 0056A620h"
"	      004b41fb    add esp,4"
"	      004b41fe    mov eax,[ebp-4Ch]"
"	      004b4201    shl eax,4"
"	      004b4204    push eax"
"	      004b4205    call 0056A600h"
"	      004b420a    add esp,4"
"	      004b420d    mov [ebp-44h],eax"
"	      004b4210    cmp dword ptr [ebp-44h],0"
"	      004b4214    jne near ptr 004B4247h"
"	      004b421a    push 5971ACh"
"	      004b421f    mov ecx,638BA0h"
"	      004b4224    call 00569960h"
"	      004b4229    mov [ebp-48h],eax"
"	      004b422c    mov eax,[ebp-48h]"
"	      004b422f    push eax"
"	      004b4230    call 004011B0h"
"	      004b4235    add esp,4"
"	      004b4238    jmp near ptr 004B423Dh"
"	      004b423d    push 1"
"	      004b423f    call 00569430h"
"	      004b4244    add esp,4"
"	      004b4247    jmp near ptr 004B424Ch"
"	      004b424c    jmp near ptr 004B4251h"
"	      004b4251    mov eax,[ebp-44h]"
"	      004b4254    mov ecx,[ebp-10h]"
"	      004b4257    mov [ecx+4],eax"
"	      004b425a    mov eax,ds:[598570h]"
"	      004b425f    mov ecx,[ebp-10h]"
"	      004b4262    mov [ecx],eax"
"	      004b4264    mov eax,[ebp-10h]"
"	      004b4267    mov ds:[598570h],eax"
"	      004b426c    mov eax,ds:[598570h]"
"	      004b4271    mov eax,[eax+4]"
"	      004b4274    mov ds:[598568h],eax"
"	      004b4279    mov dword ptr [ebp-28h],100h"
"	      004b4280    lea eax,[ebp-28h]"
"	      004b4283    mov [ebp-30h],eax"
"	      004b4286    mov dword ptr [ebp-2Ch],1"
"	      004b428d    lea eax,[ebp-2Ch]"
"	      004b4290    mov [ebp-34h],eax"
"	      004b4293    mov eax,[ebp-34h]"
"	      004b4296    mov ecx,[ebp-30h]"
"	      004b4299    mov ecx,[ecx]"
"	      004b429b    cmp [eax],ecx"
"	      004b429d    jb near ptr 004B42AEh"
"	      004b42a3    mov eax,[ebp-34h]"
"	      004b42a6    mov [ebp-38h],eax"
"	      004b42a9    jmp near ptr 004B42B4h"
"	      004b42ae    mov eax,[ebp-30h]"
"	      004b42b1    mov [ebp-38h],eax"
"	      004b42b4    jmp near ptr 004B42B9h"
"	      004b42b9    jmp near ptr 004B42BEh"
"	      004b42be    jmp near ptr 004B42C3h"
"	      004b42c3    mov eax,[ebp-38h]"
"	      004b42c6    mov eax,[eax]"
"	      004b42c8    shl eax,4"
"	      004b42cb    add eax,ds:[598568h]"
"	      004b42d1    mov ds:[598564h],eax"
"	      004b42d6    jmp near ptr 004B42DBh"
"	      004b42db    mov eax,ds:[598568h]"
"	      004b42e0    mov [ebp-8],eax"
"	      004b42e3    add dword ptr ds:[598568h],10h"
"	      004b42ea    mov eax,[ebp-8]"
"	      004b42ed    mov [ebp-50h],eax"
"	      004b42f0    jmp near ptr 004B430Ah"
"	      004b42f5    mov eax,ds:[598568h]"
"	      004b42fa    mov [ebp-0Ch],eax"
"	      004b42fd    add dword ptr ds:[598568h],10h"
"	      004b4304    mov eax,[ebp-0Ch]"
"	      004b4307    mov [ebp-50h],eax"
"	      004b430a    jmp near ptr 004B430Fh"
"	      004b430f    mov eax,[ebp-50h]"
"	      004b4312    mov ecx,[ebp-54h]"
"	      004b4315    mov [ecx+74h],eax"
"	      004b4318    mov eax,[ebp-54h]"
"	      004b431b    mov eax,[eax+74h]"
"	      004b431e    mov ecx,[ebp-54h]"
"	      004b4321    mov ecx,[ecx+74h]"
"	      004b4324    mov [ecx],eax"
"	      004b4326    mov eax,[ebp-54h]"
"	      004b4329    mov eax,[eax+74h]"
"	      004b432c    mov ecx,[ebp-54h]"
"	      004b432f    mov ecx,[ecx+74h]"
"	      004b4332    mov [ecx+4],eax"
"	      004b4335    jmp near ptr 004B433Ah"
"	      004b433a    jmp near ptr 004B433Fh"
"	      004b433f    jmp near ptr 004B4344h"
"	      004b4344    mov ecx,[ebp-54h]"
"	      004b4347    add ecx,8Ch"
"	      004b434d    call 0049F780h"
"	      004b4352    mov eax,[ebp-54h]"
"	      004b4355    mov dword ptr [eax],5920C8h"
);
// LINE 2079:
	asm( 
"	      004b435b    mov eax,[ebp-54h]"
"	      004b435e    mov byte ptr [eax+7Ch],0"
"	      004b4362    mov eax,[ebp-54h]"
"	      004b4365    mov al,[eax+7Ch]"
"	      004b4368    mov ecx,[ebp-54h]"
"	      004b436b    mov [ecx+7Dh],al"
"	      004b436e    mov eax,[ebp-54h]"
"	      004b4371    mov al,[eax+7Dh]"
"	      004b4374    mov ecx,[ebp-54h]"
"	      004b4377    mov [ecx+7Eh],al"
);
// LINE 2082:
	asm( 
"	      004b437a    mov eax,[ebp-54h]"
"	      004b437d    mov byte ptr [eax+80h],0FFh"
"	      004b4384    mov eax,[ebp-54h]"
"	      004b4387    mov al,[eax+80h]"
"	      004b438d    mov ecx,[ebp-54h]"
"	      004b4390    mov [ecx+81h],al"
"	      004b4396    mov eax,[ebp-54h]"
"	      004b4399    mov al,[eax+81h]"
"	      004b439f    mov ecx,[ebp-54h]"
"	      004b43a2    mov [ecx+82h],al"
);
// LINE 2083:
	asm( 
"	      004b43a8    mov eax,ds:[606974h]"
"	      004b43ad    mov ecx,[ebp-54h]"
"	      004b43b0    mov [ecx+84h],eax"
);
// LINE 2084:
	asm( 
"	      004b43b6    mov eax,ds:[606968h]"
"	      004b43bb    mov ecx,[ebp-54h]"
"	      004b43be    mov [ecx+88h],eax"
);
// LINE 2085:
	asm( 
"	      004b43c4    mov eax,[ebp-54h]"
"	      004b43c7    mov dword ptr [eax+0A8h],0"
);
// LINE 2086:
	asm( 
"	      004b43d1    mov eax,[ebp-54h]"
"	      004b43d4    mov dword ptr [eax+0ACh],0FFFFFFFFh"
);
// LINE 2087:
	asm( 
"	      004b43de    mov eax,[ebp-54h]"
"	      004b43e1    mov dword ptr [eax+0B0h],0"
);
// LINE 2088:
	asm( 
"	      004b43eb    mov eax,[ebp-54h]"
"	      004b43ee    mov dword ptr [eax+0B4h],0"
);
// LINE 2089:
	asm( 
"	      004b43f8    mov eax,[ebp-54h]"
"	      004b43fb    mov dword ptr [eax+0B8h],0Ah"
);
// LINE 2090:
	asm( 
"	      004b4405    mov eax,[ebp-54h]"
"	      004b4408    mov dword ptr [eax+0BCh],0"
);
// LINE 2091:
	asm( 
"	      004b4412    mov eax,[ebp-54h]"
"	      004b4415    mov dword ptr [eax+0C0h],0"
);
// LINE 2092:
	asm( 
"	      004b441f    mov eax,[ebp-54h]"
"	      004b4422    mov dword ptr [eax+0C4h],0"
);
// LINE 2093:
	asm( 
"	      004b442c    mov eax,[ebp-54h]"
"	      004b442f    mov dword ptr [eax+0C8h],0"
);
// LINE 2094:
	asm( 
"	      004b4439    mov ecx,[ebp-54h]"
"	      004b443c    mov eax,[ebp-54h]"
"	      004b443f    mov eax,[eax+8Ch]"
"	      004b4445    add ecx,8Ch"
"	      004b444b    call dword ptr [eax]"
);
// LINE 2095:
	asm( 
"	      004b444d    mov ecx,[ebp-54h]"
"	      004b4450    call 004B4867h"
);
// LINE 2096:
	asm( 
"	      004b4455    jmp near ptr 004B445Ah"
"	      004b445a    mov eax,[ebp-54h]"
"	      004b445d    pop edi"
"	      004b445e    pop esi"
"	      004b445f    pop ebx"
"	      004b4460    leave"
"	      004b4461    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b4462
void ListBoxWindow::ListBoxWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t) {
// LINE 2105:
	asm( 
"	      004b4462    push ebp"
"	      004b4463    mov ebp,esp"
"	      004b4465    sub esp,54h"
"	      004b4468    push ebx"
"	      004b4469    push esi"
"	      004b446a    push edi"
"	      004b446b    mov [ebp-54h],ecx"
"	      004b446e    mov eax,[ebp+18h]"
"	      004b4471    push eax"
"	      004b4472    mov eax,[ebp+14h]"
"	      004b4475    push eax"
"	      004b4476    mov eax,[ebp+10h]"
"	      004b4479    push eax"
"	      004b447a    mov eax,[ebp+0Ch]"
"	      004b447d    push eax"
"	      004b447e    mov eax,[ebp+8]"
"	      004b4481    push eax"
"	      004b4482    mov ecx,[ebp-54h]"
"	      004b4485    call 004A33EEh"
"	      004b448a    mov eax,[ebp-54h]"
"	      004b448d    mov dword ptr [eax+78h],0"
"	      004b4494    inc dword ptr ds:[598560h]"
"	      004b449a    mov eax,ds:[59856Ch]"
"	      004b449f    mov [ebp-4],eax"
"	      004b44a2    cmp dword ptr ds:[59856Ch],0"
"	      004b44a9    je near ptr 004B44C6h"
"	      004b44af    mov eax,ds:[59856Ch]"
"	      004b44b4    mov eax,[eax]"
"	      004b44b6    mov ds:[59856Ch],eax"
"	      004b44bb    mov eax,[ebp-4]"
"	      004b44be    mov [ebp-50h],eax"
"	      004b44c1    jmp near ptr 004B469Dh"
"	      004b44c6    mov eax,ds:[598568h]"
"	      004b44cb    cmp ds:[598564h],eax"
"	      004b44d1    jne near ptr 004B4688h"
"	      004b44d7    push 0"
"	      004b44d9    call 0056A620h"
"	      004b44de    add esp,4"
"	      004b44e1    push 8"
"	      004b44e3    call 0056A600h"
"	      004b44e8    add esp,4"
"	      004b44eb    mov [ebp-3Ch],eax"
"	      004b44ee    cmp dword ptr [ebp-3Ch],0"
"	      004b44f2    jne near ptr 004B4525h"
"	      004b44f8    push 5971ACh"
"	      004b44fd    mov ecx,638BA0h"
"	      004b4502    call 00569960h"
"	      004b4507    mov [ebp-40h],eax"
"	      004b450a    mov eax,[ebp-40h]"
"	      004b450d    push eax"
"	      004b450e    call 004011B0h"
"	      004b4513    add esp,4"
"	      004b4516    jmp near ptr 004B451Bh"
"	      004b451b    push 1"
"	      004b451d    call 00569430h"
"	      004b4522    add esp,4"
"	      004b4525    jmp near ptr 004B452Ah"
"	      004b452a    jmp near ptr 004B452Fh"
"	      004b452f    mov eax,[ebp-3Ch]"
"	      004b4532    mov [ebp-10h],eax"
"	      004b4535    mov dword ptr [ebp-14h],100h"
"	      004b453c    lea eax,[ebp-14h]"
"	      004b453f    mov [ebp-1Ch],eax"
"	      004b4542    mov dword ptr [ebp-18h],1"
"	      004b4549    lea eax,[ebp-18h]"
"	      004b454c    mov [ebp-20h],eax"
"	      004b454f    mov eax,[ebp-20h]"
"	      004b4552    mov ecx,[ebp-1Ch]"
"	      004b4555    mov ecx,[ecx]"
"	      004b4557    cmp [eax],ecx"
"	      004b4559    jb near ptr 004B456Ah"
"	      004b455f    mov eax,[ebp-20h]"
"	      004b4562    mov [ebp-24h],eax"
"	      004b4565    jmp near ptr 004B4570h"
"	      004b456a    mov eax,[ebp-1Ch]"
"	      004b456d    mov [ebp-24h],eax"
"	      004b4570    jmp near ptr 004B4575h"
"	      004b4575    jmp near ptr 004B457Ah"
"	      004b457a    jmp near ptr 004B457Fh"
"	      004b457f    mov eax,[ebp-24h]"
"	      004b4582    mov eax,[eax]"
"	      004b4584    mov [ebp-4Ch],eax"
"	      004b4587    push 0"
"	      004b4589    call 0056A620h"
"	      004b458e    add esp,4"
"	      004b4591    mov eax,[ebp-4Ch]"
"	      004b4594    shl eax,4"
"	      004b4597    push eax"
"	      004b4598    call 0056A600h"
"	      004b459d    add esp,4"
"	      004b45a0    mov [ebp-44h],eax"
"	      004b45a3    cmp dword ptr [ebp-44h],0"
"	      004b45a7    jne near ptr 004B45DAh"
"	      004b45ad    push 5971ACh"
"	      004b45b2    mov ecx,638BA0h"
"	      004b45b7    call 00569960h"
"	      004b45bc    mov [ebp-48h],eax"
"	      004b45bf    mov eax,[ebp-48h]"
"	      004b45c2    push eax"
"	      004b45c3    call 004011B0h"
"	      004b45c8    add esp,4"
"	      004b45cb    jmp near ptr 004B45D0h"
"	      004b45d0    push 1"
"	      004b45d2    call 00569430h"
"	      004b45d7    add esp,4"
"	      004b45da    jmp near ptr 004B45DFh"
"	      004b45df    jmp near ptr 004B45E4h"
"	      004b45e4    mov eax,[ebp-44h]"
"	      004b45e7    mov ecx,[ebp-10h]"
"	      004b45ea    mov [ecx+4],eax"
"	      004b45ed    mov eax,ds:[598570h]"
"	      004b45f2    mov ecx,[ebp-10h]"
"	      004b45f5    mov [ecx],eax"
"	      004b45f7    mov eax,[ebp-10h]"
"	      004b45fa    mov ds:[598570h],eax"
"	      004b45ff    mov eax,ds:[598570h]"
"	      004b4604    mov eax,[eax+4]"
"	      004b4607    mov ds:[598568h],eax"
"	      004b460c    mov dword ptr [ebp-28h],100h"
"	      004b4613    lea eax,[ebp-28h]"
"	      004b4616    mov [ebp-30h],eax"
"	      004b4619    mov dword ptr [ebp-2Ch],1"
"	      004b4620    lea eax,[ebp-2Ch]"
"	      004b4623    mov [ebp-34h],eax"
"	      004b4626    mov eax,[ebp-34h]"
"	      004b4629    mov ecx,[ebp-30h]"
"	      004b462c    mov ecx,[ecx]"
"	      004b462e    cmp [eax],ecx"
"	      004b4630    jb near ptr 004B4641h"
"	      004b4636    mov eax,[ebp-34h]"
"	      004b4639    mov [ebp-38h],eax"
"	      004b463c    jmp near ptr 004B4647h"
"	      004b4641    mov eax,[ebp-30h]"
"	      004b4644    mov [ebp-38h],eax"
"	      004b4647    jmp near ptr 004B464Ch"
"	      004b464c    jmp near ptr 004B4651h"
"	      004b4651    jmp near ptr 004B4656h"
"	      004b4656    mov eax,[ebp-38h]"
"	      004b4659    mov eax,[eax]"
"	      004b465b    shl eax,4"
"	      004b465e    add eax,ds:[598568h]"
"	      004b4664    mov ds:[598564h],eax"
"	      004b4669    jmp near ptr 004B466Eh"
"	      004b466e    mov eax,ds:[598568h]"
"	      004b4673    mov [ebp-8],eax"
"	      004b4676    add dword ptr ds:[598568h],10h"
"	      004b467d    mov eax,[ebp-8]"
"	      004b4680    mov [ebp-50h],eax"
"	      004b4683    jmp near ptr 004B469Dh"
"	      004b4688    mov eax,ds:[598568h]"
"	      004b468d    mov [ebp-0Ch],eax"
"	      004b4690    add dword ptr ds:[598568h],10h"
"	      004b4697    mov eax,[ebp-0Ch]"
"	      004b469a    mov [ebp-50h],eax"
"	      004b469d    jmp near ptr 004B46A2h"
"	      004b46a2    mov eax,[ebp-50h]"
"	      004b46a5    mov ecx,[ebp-54h]"
"	      004b46a8    mov [ecx+74h],eax"
"	      004b46ab    mov eax,[ebp-54h]"
"	      004b46ae    mov eax,[eax+74h]"
"	      004b46b1    mov ecx,[ebp-54h]"
"	      004b46b4    mov ecx,[ecx+74h]"
"	      004b46b7    mov [ecx],eax"
"	      004b46b9    mov eax,[ebp-54h]"
"	      004b46bc    mov eax,[eax+74h]"
"	      004b46bf    mov ecx,[ebp-54h]"
"	      004b46c2    mov ecx,[ecx+74h]"
"	      004b46c5    mov [ecx+4],eax"
"	      004b46c8    jmp near ptr 004B46CDh"
"	      004b46cd    jmp near ptr 004B46D2h"
"	      004b46d2    jmp near ptr 004B46D7h"
"	      004b46d7    mov ecx,[ebp-54h]"
"	      004b46da    add ecx,8Ch"
"	      004b46e0    call 0049F780h"
"	      004b46e5    mov eax,[ebp-54h]"
"	      004b46e8    mov dword ptr [eax],5920C8h"
);
// LINE 2108:
	asm( 
"	      004b46ee    mov eax,[ebp-54h]"
"	      004b46f1    mov byte ptr [eax+7Ch],0"
"	      004b46f5    mov eax,[ebp-54h]"
"	      004b46f8    mov al,[eax+7Ch]"
"	      004b46fb    mov ecx,[ebp-54h]"
"	      004b46fe    mov [ecx+7Dh],al"
"	      004b4701    mov eax,[ebp-54h]"
"	      004b4704    mov al,[eax+7Dh]"
"	      004b4707    mov ecx,[ebp-54h]"
"	      004b470a    mov [ecx+7Eh],al"
);
// LINE 2111:
	asm( 
"	      004b470d    mov eax,[ebp-54h]"
"	      004b4710    mov byte ptr [eax+80h],0FFh"
"	      004b4717    mov eax,[ebp-54h]"
"	      004b471a    mov al,[eax+80h]"
"	      004b4720    mov ecx,[ebp-54h]"
"	      004b4723    mov [ecx+81h],al"
"	      004b4729    mov eax,[ebp-54h]"
"	      004b472c    mov al,[eax+81h]"
"	      004b4732    mov ecx,[ebp-54h]"
"	      004b4735    mov [ecx+82h],al"
);
// LINE 2112:
	asm( 
"	      004b473b    mov eax,ds:[606974h]"
"	      004b4740    mov ecx,[ebp-54h]"
"	      004b4743    mov [ecx+84h],eax"
);
// LINE 2113:
	asm( 
"	      004b4749    mov eax,ds:[606968h]"
"	      004b474e    mov ecx,[ebp-54h]"
"	      004b4751    mov [ecx+88h],eax"
);
// LINE 2114:
	asm( 
"	      004b4757    mov eax,[ebp-54h]"
"	      004b475a    mov dword ptr [eax+0A8h],0"
);
// LINE 2115:
	asm( 
"	      004b4764    mov eax,[ebp-54h]"
"	      004b4767    mov dword ptr [eax+0ACh],0FFFFFFFFh"
);
// LINE 2116:
	asm( 
"	      004b4771    mov eax,[ebp-54h]"
"	      004b4774    mov dword ptr [eax+0B0h],0"
);
// LINE 2117:
	asm( 
"	      004b477e    mov eax,[ebp-54h]"
"	      004b4781    mov dword ptr [eax+0B4h],0"
);
// LINE 2118:
	asm( 
"	      004b478b    mov eax,[ebp-54h]"
"	      004b478e    mov dword ptr [eax+0B8h],0Ah"
);
// LINE 2119:
	asm( 
"	      004b4798    mov eax,[ebp-54h]"
"	      004b479b    mov dword ptr [eax+0BCh],0"
);
// LINE 2120:
	asm( 
"	      004b47a5    mov eax,[ebp-54h]"
"	      004b47a8    mov dword ptr [eax+0C0h],0"
);
// LINE 2121:
	asm( 
"	      004b47b2    mov eax,[ebp-54h]"
"	      004b47b5    mov dword ptr [eax+0C4h],0"
);
// LINE 2122:
	asm( 
"	      004b47bf    mov eax,[ebp-54h]"
"	      004b47c2    mov dword ptr [eax+0C8h],0"
);
// LINE 2123:
	asm( 
"	      004b47cc    mov ecx,[ebp-54h]"
"	      004b47cf    mov eax,[ebp-54h]"
"	      004b47d2    mov eax,[eax+8Ch]"
"	      004b47d8    add ecx,8Ch"
"	      004b47de    call dword ptr [eax]"
);
// LINE 2124:
	asm( 
"	      004b47e0    mov ecx,[ebp-54h]"
"	      004b47e3    call 004B4867h"
);
// LINE 2125:
	asm( 
"	      004b47e8    jmp near ptr 004B47EDh"
"	      004b47ed    mov eax,[ebp-54h]"
"	      004b47f0    pop edi"
"	      004b47f1    pop esi"
"	      004b47f2    pop ebx"
"	      004b47f3    leave"
"	      004b47f4    ret 14h"
);
}

// FUNCTION: SIMCOPTER 0x004b47f7
int32_t ListBoxWindow::Initialize() {
// LINE 2132:
	asm( 
"	      004b47f7    push ebp"
"	      004b47f8    mov ebp,esp"
"	      004b47fa    sub esp,4"
"	      004b47fd    push ebx"
"	      004b47fe    push esi"
"	      004b47ff    push edi"
"	      004b4800    mov [ebp-4],ecx"
);
// LINE 2133:
	asm( 
"	      004b4803    push 1"
"	      004b4805    mov eax,[ebp-4]"
"	      004b4808    mov eax,[eax]"
"	      004b480a    mov ecx,[ebp-4]"
"	      004b480d    call dword ptr [eax+28h]"
);
// LINE 2134:
	asm( 
"	      004b4810    mov ecx,[ebp-4]"
"	      004b4813    call 004A44D4h"
"	      004b4818    jmp near ptr 004B481Dh"
);
// LINE 2135:
	asm( 
"	      004b481d    pop edi"
"	      004b481e    pop esi"
"	      004b481f    pop ebx"
"	      004b4820    leave"
"	      004b4821    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b4822
int32_t ListBoxWindow::DoMessage(class GraphicWindow*, long, long, void * __ptr32) {
// LINE 2141:
	asm( 
"	      004b4822    push ebp"
"	      004b4823    mov ebp,esp"
"	      004b4825    sub esp,4"
"	      004b4828    push ebx"
"	      004b4829    push esi"
"	      004b482a    push edi"
"	      004b482b    mov [ebp-4],ecx"
);
// LINE 2142:
	asm( 
"	      004b482e    cmp dword ptr [ebp+0Ch],1"
"	      004b4832    jne near ptr 004B4859h"
);
// LINE 2144:
	asm( 
"	      004b4838    cmp dword ptr [ebp+10h],10001h"
"	      004b483f    jne near ptr 004B4859h"
);
// LINE 2146:
	asm( 
"	      004b4845    mov eax,[ebp+14h]"
"	      004b4848    mov eax,[eax]"
"	      004b484a    push eax"
"	      004b484b    mov eax,[ebp-4]"
"	      004b484e    mov eax,[eax]"
"	      004b4850    mov ecx,[ebp-4]"
"	      004b4853    call dword ptr [eax+110h]"
);
// LINE 2149:
	asm( 
"	      004b4859    xor eax,eax"
"	      004b485b    jmp near ptr 004B4860h"
);
// LINE 2150:
	asm( 
"	      004b4860    pop edi"
"	      004b4861    pop esi"
"	      004b4862    pop ebx"
"	      004b4863    leave"
"	      004b4864    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x004b4867
void ListBoxWindow::CalculateAllMetrics() {
// LINE 2157:
	asm( 
"	      004b4867    push ebp"
"	      004b4868    mov ebp,esp"
"	      004b486a    sub esp,10h"
"	      004b486d    push ebx"
"	      004b486e    push esi"
"	      004b486f    push edi"
"	      004b4870    mov [ebp-10h],ecx"
);
// LINE 2161:
	asm( 
"	      004b4873    lea eax,[ebp-8]"
"	      004b4876    push eax"
"	      004b4877    lea eax,[ebp-4]"
"	      004b487a    push eax"
"	      004b487b    push 0"
"	      004b487d    mov ecx,[ebp-10h]"
"	      004b4880    add ecx,8Ch"
"	      004b4886    call 004A02B1h"
"	      004b488b    mov [ebp-0Ch],eax"
);
// LINE 2162:
	asm( 
"	      004b488e    cmp dword ptr [ebp-0Ch],0"
"	      004b4892    je near ptr 004B48C8h"
);
// LINE 2163:
	asm( 
"	      004b4898    mov eax,[ebp-8]"
"	      004b489b    mov ecx,[ebp-10h]"
"	      004b489e    mov [ecx+0B8h],eax"
);
// LINE 2164:
	asm( 
"	      004b48a4    jmp near ptr 004B48A9h"
"	      004b48a9    mov eax,[ebp-10h]"
"	      004b48ac    mov eax,[eax+1Ch]"
"	      004b48af    mov ecx,[ebp-10h]"
"	      004b48b2    sub eax,[ecx+14h]"
"	      004b48b5    mov ecx,[ebp-10h]"
"	      004b48b8    cdq"
"	      004b48b9    idiv dword ptr [ecx+0B8h]"
"	      004b48bf    mov ecx,[ebp-10h]"
"	      004b48c2    mov [ecx+0B0h],eax"
);
// LINE 2166:
	asm( 
"	      004b48c8    jmp near ptr 004B48CDh"
"	      004b48cd    pop edi"
"	      004b48ce    pop esi"
"	      004b48cf    pop ebx"
"	      004b48d0    leave"
"	      004b48d1    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b48d2
void ListBoxWindow::SetFontCharacteristics(long, long, long) {
// LINE 2172:
	asm( 
"	      004b48d2    push ebp"
"	      004b48d3    mov ebp,esp"
"	      004b48d5    sub esp,4"
"	      004b48d8    push ebx"
"	      004b48d9    push esi"
"	      004b48da    push edi"
"	      004b48db    mov [ebp-4],ecx"
);
// LINE 2173:
	asm( 
"	      004b48de    mov eax,[ebp+10h]"
"	      004b48e1    push eax"
"	      004b48e2    mov eax,[ebp+0Ch]"
"	      004b48e5    push eax"
"	      004b48e6    mov eax,[ebp+8]"
"	      004b48e9    push eax"
"	      004b48ea    mov ecx,[ebp-4]"
"	      004b48ed    add ecx,8Ch"
"	      004b48f3    call 004A015Dh"
);
// LINE 2174:
	asm( 
"	      004b48f8    mov eax,[ebp-4]"
"	      004b48fb    mov eax,[eax]"
"	      004b48fd    mov ecx,[ebp-4]"
"	      004b4900    call dword ptr [eax+134h]"
);
// LINE 2175:
	asm( 
"	      004b4906    push 1"
"	      004b4908    push 1"
"	      004b490a    mov eax,[ebp-4]"
"	      004b490d    mov eax,[eax]"
"	      004b490f    mov ecx,[ebp-4]"
"	      004b4912    call dword ptr [eax+30h]"
);
// LINE 2176:
	asm( 
"	      004b4915    jmp near ptr 004B491Ah"
"	      004b491a    pop edi"
"	      004b491b    pop esi"
"	      004b491c    pop ebx"
"	      004b491d    leave"
"	      004b491e    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b4921
int32_t ListBoxWindow::ResizeWindowForExactLineHeights() {
// LINE 2188:
	asm( 
"	      004b4921    push ebp"
"	      004b4922    mov ebp,esp"
"	      004b4924    sub esp,10h"
"	      004b4927    push ebx"
"	      004b4928    push esi"
"	      004b4929    push edi"
"	      004b492a    mov [ebp-10h],ecx"
);
// LINE 2193:
	asm( 
"	      004b492d    jmp near ptr 004B4932h"
"	      004b4932    mov eax,[ebp-10h]"
"	      004b4935    mov eax,[eax+1Ch]"
"	      004b4938    mov ecx,[ebp-10h]"
"	      004b493b    sub eax,[ecx+14h]"
"	      004b493e    mov [ebp-8],eax"
);
// LINE 2194:
	asm( 
"	      004b4941    mov ecx,[ebp-10h]"
"	      004b4944    mov eax,[ebp-8]"
"	      004b4947    cdq"
"	      004b4948    idiv dword ptr [ecx+0B8h]"
"	      004b494e    mov [ebp-0Ch],eax"
);
// LINE 2195:
	asm( 
"	      004b4951    mov eax,[ebp-10h]"
"	      004b4954    mov eax,[eax+0B8h]"
"	      004b495a    imul eax,[ebp-0Ch]"
"	      004b495e    mov [ebp-4],eax"
);
// LINE 2196:
	asm( 
"	      004b4961    mov eax,[ebp-8]"
"	      004b4964    cmp [ebp-4],eax"
"	      004b4967    je near ptr 004B498Ah"
);
// LINE 2197:
	asm( 
"	      004b496d    mov eax,[ebp-4]"
"	      004b4970    push eax"
"	      004b4971    push 0FFFFFFFFh"
"	      004b4973    mov eax,[ebp-10h]"
"	      004b4976    mov eax,[eax]"
"	      004b4978    mov ecx,[ebp-10h]"
"	      004b497b    call dword ptr [eax+38h]"
);
// LINE 2198:
	asm( 
"	      004b497e    mov eax,[ebp-0Ch]"
"	      004b4981    mov ecx,[ebp-10h]"
"	      004b4984    mov [ecx+0B0h],eax"
);
// LINE 2200:
	asm( 
"	      004b498a    push 1"
"	      004b498c    push 1"
"	      004b498e    mov eax,[ebp-10h]"
"	      004b4991    mov eax,[eax]"
"	      004b4993    mov ecx,[ebp-10h]"
"	      004b4996    call dword ptr [eax+30h]"
);
// LINE 2201:
	asm( 
"	      004b4999    mov eax,[ebp-10h]"
"	      004b499c    mov eax,[eax]"
"	      004b499e    mov ecx,[ebp-10h]"
"	      004b49a1    call dword ptr [eax+154h]"
);
// LINE 2202:
	asm( 
"	      004b49a7    mov eax,1"
"	      004b49ac    jmp near ptr 004B49B1h"
);
// LINE 2203:
	asm( 
"	      004b49b1    pop edi"
"	      004b49b2    pop esi"
"	      004b49b3    pop ebx"
"	      004b49b4    leave"
"	      004b49b5    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b49b6
void ListBoxWindow::SetBackgroundDrawing(int32_t) {
// LINE 2210:
	asm( 
"	      004b49b6    push ebp"
"	      004b49b7    mov ebp,esp"
"	      004b49b9    sub esp,4"
"	      004b49bc    push ebx"
"	      004b49bd    push esi"
"	      004b49be    push edi"
"	      004b49bf    mov [ebp-4],ecx"
);
// LINE 2211:
	asm( 
"	      004b49c2    cmp dword ptr [ebp+8],0"
"	      004b49c6    je near ptr 004B49EBh"
);
// LINE 2212:
	asm( 
"	      004b49cc    mov eax,[ebp-4]"
"	      004b49cf    mov dword ptr [eax+84h],0FFh"
);
// LINE 2213:
	asm( 
"	      004b49d9    mov eax,[ebp-4]"
"	      004b49dc    mov dword ptr [eax+88h],0"
);
// LINE 2215:
	asm( 
"	      004b49e6    jmp near ptr 004B4A05h"
);
// LINE 2216:
	asm( 
"	      004b49eb    mov eax,[ebp-4]"
"	      004b49ee    mov dword ptr [eax+84h],0FFFFFFFEh"
);
// LINE 2217:
	asm( 
"	      004b49f8    mov eax,[ebp-4]"
"	      004b49fb    mov dword ptr [eax+88h],0FFFFFFFEh"
);
// LINE 2219:
	asm( 
"	      004b4a05    jmp near ptr 004B4A0Ah"
"	      004b4a0a    pop edi"
"	      004b4a0b    pop esi"
"	      004b4a0c    pop ebx"
"	      004b4a0d    leave"
"	      004b4a0e    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b4a11
void ListBoxWindow::SetBackgroundPaletteIndex(int32_t, int32_t) {
// LINE 2227:
	asm( 
"	      004b4a11    push ebp"
"	      004b4a12    mov ebp,esp"
"	      004b4a14    sub esp,4"
"	      004b4a17    push ebx"
"	      004b4a18    push esi"
"	      004b4a19    push edi"
"	      004b4a1a    mov [ebp-4],ecx"
);
// LINE 2228:
	asm( 
"	      004b4a1d    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      004b4a21    je near ptr 004B4A33h"
);
// LINE 2229:
	asm( 
"	      004b4a27    mov eax,[ebp+8]"
"	      004b4a2a    mov ecx,[ebp-4]"
"	      004b4a2d    mov [ecx+84h],eax"
);
// LINE 2230:
	asm( 
"	      004b4a33    cmp dword ptr [ebp+0Ch],0FFFFFFFFh"
"	      004b4a37    je near ptr 004B4A49h"
);
// LINE 2231:
	asm( 
"	      004b4a3d    mov eax,[ebp+0Ch]"
"	      004b4a40    mov ecx,[ebp-4]"
"	      004b4a43    mov [ecx+88h],eax"
);
// LINE 2232:
	asm( 
"	      004b4a49    jmp near ptr 004B4A4Eh"
"	      004b4a4e    pop edi"
"	      004b4a4f    pop esi"
"	      004b4a50    pop ebx"
"	      004b4a51    leave"
"	      004b4a52    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b4a55
void ListBoxWindow::SetTextColor(const struct SparkalColor*, const struct SparkalColor*) {
// LINE 2241:
	asm( 
"	      004b4a55    push ebp"
"	      004b4a56    mov ebp,esp"
"	      004b4a58    sub esp,4"
"	      004b4a5b    push ebx"
"	      004b4a5c    push esi"
"	      004b4a5d    push edi"
"	      004b4a5e    mov [ebp-4],ecx"
);
// LINE 2242:
	asm( 
"	      004b4a61    cmp dword ptr [ebp+8],0"
"	      004b4a65    je near ptr 004B4A76h"
);
// LINE 2243:
	asm( 
"	      004b4a6b    mov eax,[ebp+8]"
"	      004b4a6e    mov eax,[eax]"
"	      004b4a70    mov ecx,[ebp-4]"
"	      004b4a73    mov [ecx+7Ch],eax"
);
// LINE 2244:
	asm( 
"	      004b4a76    cmp dword ptr [ebp+0Ch],0"
"	      004b4a7a    je near ptr 004B4A8Eh"
);
// LINE 2245:
	asm( 
"	      004b4a80    mov eax,[ebp+0Ch]"
"	      004b4a83    mov eax,[eax]"
"	      004b4a85    mov ecx,[ebp-4]"
"	      004b4a88    mov [ecx+80h],eax"
);
// LINE 2246:
	asm( 
"	      004b4a8e    jmp near ptr 004B4A93h"
"	      004b4a93    pop edi"
"	      004b4a94    pop esi"
"	      004b4a95    pop ebx"
"	      004b4a96    leave"
"	      004b4a97    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b4a9a
int32_t ListBoxWindow::DrawSelf() {
// LINE 2253:
	asm( 
"	      004b4a9a    push ebp"
"	      004b4a9b    mov ebp,esp"
"	      004b4a9d    sub esp,0BCh"
"	      004b4aa3    push ebx"
"	      004b4aa4    push esi"
"	      004b4aa5    push edi"
"	      004b4aa6    mov [ebp-0BCh],ecx"
);
// LINE 2258:
	asm( 
"	      004b4aac    mov eax,[ebp-0BCh]"
"	      004b4ab2    mov eax,[eax+74h]"
"	      004b4ab5    mov eax,[eax]"
"	      004b4ab7    mov [ebp-68h],eax"
"	      004b4aba    mov eax,[ebp-68h]"
"	      004b4abd    mov [ebp-28h],eax"
"	      004b4ac0    jmp near ptr 004B4AC5h"
"	      004b4ac5    jmp near ptr 004B4ACAh"
);
// LINE 2259:
	asm( 
"	      004b4aca    jmp near ptr 004B4ACFh"
"	      004b4acf    jmp near ptr 004B4AD4h"
);
// LINE 2260:
	asm( 
"	      004b4ad4    jmp near ptr 004B4AD9h"
"	      004b4ad9    jmp near ptr 004B4ADEh"
);
// LINE 2264:
	asm( 
"	      004b4ade    mov eax,[ebp-0BCh]"
"	      004b4ae4    cmp dword ptr [eax+54h],0"
"	      004b4ae8    jne near ptr 004B4AF5h"
);
// LINE 2265:
	asm( 
"	      004b4aee    xor eax,eax"
"	      004b4af0    jmp near ptr 004B5209h"
);
// LINE 2267:
	asm( 
"	      004b4af5    mov eax,[ebp-0BCh]"
"	      004b4afb    cmp dword ptr [eax+84h],0FFFFFFFEh"
"	      004b4b02    je near ptr 004B4B36h"
);
// LINE 2268:
	asm( 
"	      004b4b08    mov eax,[ebp-0BCh]"
"	      004b4b0e    add eax,20h"
"	      004b4b11    push eax"
"	      004b4b12    mov eax,[ebp-0BCh]"
"	      004b4b18    mov eax,[eax+84h]"
"	      004b4b1e    push eax"
"	      004b4b1f    mov eax,[ebp-0BCh]"
"	      004b4b25    mov ecx,[ebp-0BCh]"
"	      004b4b2b    mov ecx,[ecx+44h]"
"	      004b4b2e    mov edx,[ecx]"
"	      004b4b30    mov ecx,[eax+44h]"
"	      004b4b33    call dword ptr [edx+44h]"
);
// LINE 2269:
	asm( 
"	      004b4b36    mov eax,[ebp-0BCh]"
"	      004b4b3c    cmp dword ptr [eax+0ACh],0FFFFFFFFh"
"	      004b4b43    jle near ptr 004B4C2Ch"
);
// LINE 2270:
	asm( 
"	      004b4b49    mov eax,[ebp-0BCh]"
"	      004b4b4f    mov eax,[eax+0ACh]"
"	      004b4b55    push eax"
"	      004b4b56    mov eax,[ebp-0BCh]"
"	      004b4b5c    mov eax,[eax]"
"	      004b4b5e    mov ecx,[ebp-0BCh]"
"	      004b4b64    call dword ptr [eax+104h]"
"	      004b4b6a    test eax,eax"
"	      004b4b6c    je near ptr 004B4C2Ch"
);
// LINE 2271:
	asm( 
"	      004b4b72    mov eax,[ebp-0BCh]"
"	      004b4b78    mov eax,[eax+0ACh]"
"	      004b4b7e    mov ecx,[ebp-0BCh]"
"	      004b4b84    sub eax,[ecx+0B4h]"
"	      004b4b8a    mov [ebp-14h],eax"
);
// LINE 2272:
	asm( 
"	      004b4b8d    mov eax,[ebp-0BCh]"
"	      004b4b93    mov eax,[eax+20h]"
"	      004b4b96    mov [ebp-24h],eax"
);
// LINE 2273:
	asm( 
"	      004b4b99    mov eax,[ebp-0BCh]"
"	      004b4b9f    mov eax,[eax+28h]"
"	      004b4ba2    mov [ebp-1Ch],eax"
);
// LINE 2274:
	asm( 
"	      004b4ba5    mov eax,[ebp-0BCh]"
"	      004b4bab    mov eax,[eax+0B8h]"
"	      004b4bb1    imul eax,[ebp-14h]"
"	      004b4bb5    mov ecx,[ebp-0BCh]"
"	      004b4bbb    add eax,[ecx+24h]"
"	      004b4bbe    mov [ebp-20h],eax"
);
// LINE 2275:
	asm( 
"	      004b4bc1    mov eax,[ebp-0BCh]"
"	      004b4bc7    mov eax,[eax+0B8h]"
"	      004b4bcd    add eax,[ebp-20h]"
"	      004b4bd0    mov [ebp-18h],eax"
);
// LINE 2276:
	asm( 
"	      004b4bd3    mov eax,[ebp-0BCh]"
"	      004b4bd9    mov ecx,[ebp-18h]"
"	      004b4bdc    cmp [eax+2Ch],ecx"
"	      004b4bdf    jge near ptr 004B4BF1h"
);
// LINE 2277:
	asm( 
"	      004b4be5    mov eax,[ebp-0BCh]"
"	      004b4beb    mov eax,[eax+2Ch]"
"	      004b4bee    mov [ebp-18h],eax"
);
// LINE 2278:
	asm( 
"	      004b4bf1    mov eax,[ebp-0BCh]"
"	      004b4bf7    cmp dword ptr [eax+88h],0FFFFFFFEh"
"	      004b4bfe    je near ptr 004B4C2Ch"
);
// LINE 2279:
	asm( 
"	      004b4c04    lea eax,[ebp-24h]"
"	      004b4c07    push eax"
"	      004b4c08    mov eax,[ebp-0BCh]"
"	      004b4c0e    mov eax,[eax+88h]"
"	      004b4c14    push eax"
"	      004b4c15    mov eax,[ebp-0BCh]"
"	      004b4c1b    mov ecx,[ebp-0BCh]"
"	      004b4c21    mov ecx,[ecx+44h]"
"	      004b4c24    mov edx,[ecx]"
"	      004b4c26    mov ecx,[eax+44h]"
"	      004b4c29    call dword ptr [edx+44h]"
);
// LINE 2283:
	asm( 
"	      004b4c2c    mov eax,[ebp-0BCh]"
"	      004b4c32    mov eax,[eax+20h]"
"	      004b4c35    add eax,5"
"	      004b4c38    mov [ebp-10h],eax"
);
// LINE 2284:
	asm( 
"	      004b4c3b    mov eax,[ebp-0BCh]"
"	      004b4c41    mov eax,[eax+28h]"
"	      004b4c44    mov [ebp-8],eax"
"	      004b4c47    mov eax,[ebp-0BCh]"
"	      004b4c4d    mov eax,[eax+44h]"
"	      004b4c50    mov [ebp-64h],eax"
);
// LINE 2286:
	asm( 
"	      004b4c53    mov eax,[ebp-0BCh]"
"	      004b4c59    mov eax,[eax+7Ch]"
"	      004b4c5c    mov ecx,[ebp-64h]"
"	      004b4c5f    mov [ecx+38h],eax"
"	      004b4c62    jmp near ptr 004B4C67h"
);
// LINE 2289:
	asm( 
"	      004b4c67    mov dword ptr [ebp-2Ch],0"
);
// LINE 2290:
	asm( 
"	      004b4c6e    mov eax,[ebp-0BCh]"
"	      004b4c74    mov ecx,[ebp-2Ch]"
"	      004b4c77    cmp [eax+0B4h],ecx"
"	      004b4c7d    jle near ptr 004B4D03h"
"	      004b4c83    mov eax,[ebp-0BCh]"
"	      004b4c89    mov eax,[eax+74h]"
"	      004b4c8c    mov [ebp-58h],eax"
"	      004b4c8f    mov eax,[ebp-58h]"
"	      004b4c92    mov [ebp-34h],eax"
"	      004b4c95    jmp near ptr 004B4C9Ah"
"	      004b4c9a    jmp near ptr 004B4C9Fh"
"	      004b4c9f    mov eax,[ebp-34h]"
"	      004b4ca2    cmp [ebp-28h],eax"
"	      004b4ca5    jne near ptr 004B4CB5h"
"	      004b4cab    jmp near ptr 004B4CC9h"
"	      004b4cb0    jmp near ptr 004B4CB5h"
"	      004b4cb5    jmp near ptr 004B4CC4h"
"	      004b4cba    cmp dword ptr [ebp-5Ch],0"
"	      004b4cbe    jne near ptr 004B4CC9h"
"	      004b4cc4    jmp near ptr 004B4CCEh"
"	      004b4cc9    jmp near ptr 004B4D03h"
"	      004b4cce    jmp near ptr 004B4CDDh"
"	      004b4cd3    cmp dword ptr [ebp-60h],0"
"	      004b4cd7    je near ptr 004B4D03h"
);
// LINE 2291:
	asm( 
"	      004b4cdd    mov eax,[ebp-28h]"
"	      004b4ce0    mov [ebp-6Ch],eax"
"	      004b4ce3    mov eax,[ebp-28h]"
"	      004b4ce6    mov eax,[eax]"
"	      004b4ce8    mov [ebp-28h],eax"
"	      004b4ceb    jmp near ptr 004B4CF0h"
"	      004b4cf0    mov eax,[ebp-6Ch]"
"	      004b4cf3    mov [ebp-38h],eax"
"	      004b4cf6    jmp near ptr 004B4CFBh"
);
// LINE 2292:
	asm( 
"	      004b4cfb    inc dword ptr [ebp-2Ch]"
);
// LINE 2293:
	asm( 
"	      004b4cfe    jmp near ptr 004B4C6Eh"
);
// LINE 2296:
	asm( 
"	      004b4d03    mov dword ptr [ebp-30h],0"
);
// LINE 23:
	asm( 
"	      004b4d0a    jmp near ptr 004B4D12h"
);
// LINE 2296:
	asm( 
"	      004b4d0f    inc dword ptr [ebp-30h]"
"	      004b4d12    mov eax,[ebp-0BCh]"
"	      004b4d18    mov eax,[eax+74h]"
"	      004b4d1b    mov [ebp-4Ch],eax"
"	      004b4d1e    mov eax,[ebp-4Ch]"
"	      004b4d21    mov [ebp-3Ch],eax"
"	      004b4d24    jmp near ptr 004B4D29h"
"	      004b4d29    jmp near ptr 004B4D2Eh"
"	      004b4d2e    mov eax,[ebp-3Ch]"
"	      004b4d31    cmp [ebp-28h],eax"
"	      004b4d34    jne near ptr 004B4D44h"
"	      004b4d3a    jmp near ptr 004B4D58h"
"	      004b4d3f    jmp near ptr 004B4D44h"
"	      004b4d44    jmp near ptr 004B4D53h"
"	      004b4d49    cmp dword ptr [ebp-50h],0"
"	      004b4d4d    jne near ptr 004B4D58h"
"	      004b4d53    jmp near ptr 004B4D5Dh"
"	      004b4d58    jmp near ptr 004B51DCh"
"	      004b4d5d    jmp near ptr 004B4D6Ch"
"	      004b4d62    cmp dword ptr [ebp-54h],0"
"	      004b4d66    je near ptr 004B51DCh"
"	      004b4d6c    mov eax,[ebp-0BCh]"
"	      004b4d72    mov ecx,[ebp-30h]"
"	      004b4d75    cmp [eax+0B0h],ecx"
"	      004b4d7b    jle near ptr 004B51DCh"
);
// LINE 2297:
	asm( 
"	      004b4d81    mov eax,[ebp-0BCh]"
"	      004b4d87    mov ecx,[ebp-2Ch]"
"	      004b4d8a    cmp [eax+0ACh],ecx"
"	      004b4d90    jne near ptr 004B4FBEh"
);
// LINE 2298:
	asm( 
"	      004b4d96    mov eax,[ebp-0BCh]"
"	      004b4d9c    mov eax,[eax+0B8h]"
"	      004b4da2    imul eax,[ebp-30h]"
"	      004b4da6    mov ecx,[ebp-0BCh]"
"	      004b4dac    add eax,[ecx+24h]"
"	      004b4daf    mov [ebp-0Ch],eax"
);
// LINE 2299:
	asm( 
"	      004b4db2    mov eax,[ebp-0BCh]"
"	      004b4db8    mov eax,[eax+0B8h]"
"	      004b4dbe    add eax,[ebp-0Ch]"
"	      004b4dc1    mov [ebp-4],eax"
);
// LINE 2300:
	asm( 
"	      004b4dc4    mov eax,[ebp-0BCh]"
"	      004b4dca    mov ecx,[ebp-4]"
"	      004b4dcd    cmp [eax+2Ch],ecx"
"	      004b4dd0    jge near ptr 004B4DE2h"
);
// LINE 2301:
	asm( 
"	      004b4dd6    mov eax,[ebp-0BCh]"
"	      004b4ddc    mov eax,[eax+2Ch]"
"	      004b4ddf    mov [ebp-4],eax"
);
// LINE 2302:
	asm( 
"	      004b4de2    mov eax,[ebp-0BCh]"
"	      004b4de8    mov eax,[eax+44h]"
"	      004b4deb    mov [ebp-44h],eax"
"	      004b4dee    mov eax,[ebp-0BCh]"
"	      004b4df4    mov eax,[eax+80h]"
"	      004b4dfa    mov ecx,[ebp-44h]"
"	      004b4dfd    mov [ecx+38h],eax"
"	      004b4e00    jmp near ptr 004B4E05h"
);
// LINE 2305:
	asm( 
"	      004b4e05    jmp near ptr 004B4E0Ah"
"	      004b4e0a    mov eax,[ebp-28h]"
"	      004b4e0d    add eax,8"
"	      004b4e10    mov [ebp-94h],eax"
"	      004b4e16    mov eax,[ebp-94h]"
"	      004b4e1c    cmp dword ptr [eax],0"
"	      004b4e1f    je near ptr 004B4E42h"
"	      004b4e25    mov eax,[ebp-94h]"
"	      004b4e2b    mov eax,[eax]"
"	      004b4e2d    mov [ebp-74h],eax"
"	      004b4e30    mov eax,[ebp-74h]"
"	      004b4e33    mov [ebp-7Ch],eax"
"	      004b4e36    mov eax,[ebp-7Ch]"
"	      004b4e39    push eax"
"	      004b4e3a    call 0056A740h"
"	      004b4e3f    add esp,4"
"	      004b4e42    jmp near ptr 004B4E47h"
"	      004b4e47    mov eax,[ebp-94h]"
"	      004b4e4d    mov eax,[eax+4]"
"	      004b4e50    mov eax,[eax+4]"
"	      004b4e53    inc eax"
"	      004b4e54    push eax"
"	      004b4e55    call 0056A600h"
"	      004b4e5a    add esp,4"
"	      004b4e5d    mov ecx,[ebp-94h]"
"	      004b4e63    mov [ecx],eax"
"	      004b4e65    jmp near ptr 004B4E6Ah"
"	      004b4e6a    mov eax,[ebp-94h]"
"	      004b4e70    mov eax,[eax+4]"
"	      004b4e73    cmp dword ptr [eax+4],0"
"	      004b4e77    je near ptr 004B4F06h"
"	      004b4e7d    jmp near ptr 004B4E82h"
"	      004b4e82    jmp near ptr 004B4E87h"
"	      004b4e87    mov eax,[ebp-94h]"
"	      004b4e8d    mov eax,[eax+4]"
"	      004b4e90    cmp dword ptr [eax+4],0"
"	      004b4e94    je near ptr 004B4EB5h"
"	      004b4e9a    mov eax,[ebp-94h]"
"	      004b4ea0    mov eax,[eax+4]"
"	      004b4ea3    mov eax,[eax]"
"	      004b4ea5    mov [ebp-88h],eax"
"	      004b4eab    jmp near ptr 004B4EC4h"
"	      004b4eb0    jmp near ptr 004B4EC4h"
"	      004b4eb5    mov dword ptr [ebp-88h],0"
"	      004b4ebf    jmp near ptr 004B4EC4h"
"	      004b4ec4    mov eax,[ebp-94h]"
"	      004b4eca    mov eax,[eax+4]"
"	      004b4ecd    mov eax,[eax+4]"
"	      004b4ed0    mov [ebp-8Ch],eax"
"	      004b4ed6    mov eax,[ebp-94h]"
"	      004b4edc    mov eax,[eax]"
"	      004b4ede    mov [ebp-90h],eax"
"	      004b4ee4    mov eax,[ebp-8Ch]"
"	      004b4eea    push eax"
"	      004b4eeb    mov eax,[ebp-88h]"
"	      004b4ef1    push eax"
"	      004b4ef2    mov eax,[ebp-90h]"
"	      004b4ef8    push eax"
"	      004b4ef9    call 0056A800h"
"	      004b4efe    add esp,0Ch"
"	      004b4f01    jmp near ptr 004B4F06h"
"	      004b4f06    jmp near ptr 004B4F0Bh"
"	      004b4f0b    mov byte ptr [ebp-78h],0"
"	      004b4f0f    jmp near ptr 004B4F14h"
"	      004b4f14    lea eax,[ebp-78h]"
"	      004b4f17    mov [ebp-80h],eax"
"	      004b4f1a    jmp near ptr 004B4F1Fh"
"	      004b4f1f    mov eax,[ebp-94h]"
"	      004b4f25    mov eax,[eax+4]"
"	      004b4f28    mov eax,[eax+4]"
"	      004b4f2b    mov ecx,[ebp-94h]"
"	      004b4f31    add eax,[ecx]"
"	      004b4f33    mov [ebp-84h],eax"
"	      004b4f39    mov eax,[ebp-80h]"
"	      004b4f3c    mov al,[eax]"
"	      004b4f3e    mov ecx,[ebp-84h]"
"	      004b4f44    mov [ecx],al"
"	      004b4f46    jmp near ptr 004B4F4Bh"
"	      004b4f4b    jmp near ptr 004B4F50h"
"	      004b4f50    mov eax,[ebp-0BCh]"
"	      004b4f56    add eax,8Ch"
"	      004b4f5b    push eax"
"	      004b4f5c    lea eax,[ebp-4]"
"	      004b4f5f    push eax"
"	      004b4f60    lea eax,[ebp-8]"
"	      004b4f63    push eax"
"	      004b4f64    lea eax,[ebp-0Ch]"
"	      004b4f67    push eax"
"	      004b4f68    lea eax,[ebp-10h]"
"	      004b4f6b    push eax"
"	      004b4f6c    mov eax,[ebp-0BCh]"
"	      004b4f72    mov eax,[eax+0A8h]"
"	      004b4f78    push eax"
"	      004b4f79    mov eax,[ebp-94h]"
"	      004b4f7f    mov eax,[eax]"
"	      004b4f81    push eax"
"	      004b4f82    mov eax,[ebp-0BCh]"
"	      004b4f88    mov ecx,[ebp-0BCh]"
"	      004b4f8e    mov ecx,[ecx+44h]"
"	      004b4f91    mov edx,[ecx]"
"	      004b4f93    mov ecx,[eax+44h]"
"	      004b4f96    call dword ptr [edx+4Ch]"
"	      004b4f99    mov eax,[ebp-0BCh]"
"	      004b4f9f    mov eax,[eax+44h]"
"	      004b4fa2    mov [ebp-48h],eax"
);
// LINE 2306:
	asm( 
"	      004b4fa5    mov eax,[ebp-0BCh]"
"	      004b4fab    mov eax,[eax+7Ch]"
"	      004b4fae    mov ecx,[ebp-48h]"
"	      004b4fb1    mov [ecx+38h],eax"
"	      004b4fb4    jmp near ptr 004B4FB9h"
);
// LINE 2308:
	asm( 
"	      004b4fb9    jmp near ptr 004B51B6h"
);
// LINE 2309:
	asm( 
"	      004b4fbe    mov eax,[ebp-0BCh]"
"	      004b4fc4    mov eax,[eax+0B8h]"
"	      004b4fca    imul eax,[ebp-30h]"
"	      004b4fce    mov ecx,[ebp-0BCh]"
"	      004b4fd4    add eax,[ecx+24h]"
"	      004b4fd7    mov [ebp-0Ch],eax"
);
// LINE 2310:
	asm( 
"	      004b4fda    mov eax,[ebp-0BCh]"
"	      004b4fe0    mov eax,[eax+0B8h]"
"	      004b4fe6    add eax,[ebp-0Ch]"
"	      004b4fe9    mov [ebp-4],eax"
);
// LINE 2311:
	asm( 
"	      004b4fec    mov eax,[ebp-0BCh]"
"	      004b4ff2    mov ecx,[ebp-4]"
"	      004b4ff5    cmp [eax+2Ch],ecx"
"	      004b4ff8    jge near ptr 004B500Ah"
);
// LINE 2312:
	asm( 
"	      004b4ffe    mov eax,[ebp-0BCh]"
"	      004b5004    mov eax,[eax+2Ch]"
"	      004b5007    mov [ebp-4],eax"
);
// LINE 2315:
	asm( 
"	      004b500a    jmp near ptr 004B500Fh"
"	      004b500f    mov eax,[ebp-28h]"
"	      004b5012    add eax,8"
"	      004b5015    mov [ebp-0B8h],eax"
"	      004b501b    mov eax,[ebp-0B8h]"
"	      004b5021    cmp dword ptr [eax],0"
"	      004b5024    je near ptr 004B5053h"
"	      004b502a    mov eax,[ebp-0B8h]"
"	      004b5030    mov eax,[eax]"
"	      004b5032    mov [ebp-98h],eax"
"	      004b5038    mov eax,[ebp-98h]"
"	      004b503e    mov [ebp-0A0h],eax"
"	      004b5044    mov eax,[ebp-0A0h]"
"	      004b504a    push eax"
"	      004b504b    call 0056A740h"
"	      004b5050    add esp,4"
"	      004b5053    jmp near ptr 004B5058h"
"	      004b5058    mov eax,[ebp-0B8h]"
"	      004b505e    mov eax,[eax+4]"
"	      004b5061    mov eax,[eax+4]"
"	      004b5064    inc eax"
"	      004b5065    push eax"
"	      004b5066    call 0056A600h"
"	      004b506b    add esp,4"
"	      004b506e    mov ecx,[ebp-0B8h]"
"	      004b5074    mov [ecx],eax"
"	      004b5076    jmp near ptr 004B507Bh"
"	      004b507b    mov eax,[ebp-0B8h]"
"	      004b5081    mov eax,[eax+4]"
"	      004b5084    cmp dword ptr [eax+4],0"
"	      004b5088    je near ptr 004B5117h"
"	      004b508e    jmp near ptr 004B5093h"
"	      004b5093    jmp near ptr 004B5098h"
"	      004b5098    mov eax,[ebp-0B8h]"
"	      004b509e    mov eax,[eax+4]"
"	      004b50a1    cmp dword ptr [eax+4],0"
"	      004b50a5    je near ptr 004B50C6h"
"	      004b50ab    mov eax,[ebp-0B8h]"
"	      004b50b1    mov eax,[eax+4]"
"	      004b50b4    mov eax,[eax]"
"	      004b50b6    mov [ebp-0ACh],eax"
"	      004b50bc    jmp near ptr 004B50D5h"
"	      004b50c1    jmp near ptr 004B50D5h"
"	      004b50c6    mov dword ptr [ebp-0ACh],0"
"	      004b50d0    jmp near ptr 004B50D5h"
"	      004b50d5    mov eax,[ebp-0B8h]"
"	      004b50db    mov eax,[eax+4]"
"	      004b50de    mov eax,[eax+4]"
"	      004b50e1    mov [ebp-0B0h],eax"
"	      004b50e7    mov eax,[ebp-0B8h]"
"	      004b50ed    mov eax,[eax]"
"	      004b50ef    mov [ebp-0B4h],eax"
"	      004b50f5    mov eax,[ebp-0B0h]"
"	      004b50fb    push eax"
"	      004b50fc    mov eax,[ebp-0ACh]"
"	      004b5102    push eax"
"	      004b5103    mov eax,[ebp-0B4h]"
"	      004b5109    push eax"
"	      004b510a    call 0056A800h"
"	      004b510f    add esp,0Ch"
"	      004b5112    jmp near ptr 004B5117h"
"	      004b5117    jmp near ptr 004B511Ch"
"	      004b511c    mov byte ptr [ebp-9Ch],0"
"	      004b5123    jmp near ptr 004B5128h"
"	      004b5128    lea eax,[ebp-9Ch]"
"	      004b512e    mov [ebp-0A4h],eax"
"	      004b5134    jmp near ptr 004B5139h"
"	      004b5139    mov eax,[ebp-0B8h]"
"	      004b513f    mov eax,[eax+4]"
"	      004b5142    mov eax,[eax+4]"
"	      004b5145    mov ecx,[ebp-0B8h]"
"	      004b514b    add eax,[ecx]"
"	      004b514d    mov [ebp-0A8h],eax"
"	      004b5153    mov eax,[ebp-0A4h]"
"	      004b5159    mov al,[eax]"
"	      004b515b    mov ecx,[ebp-0A8h]"
"	      004b5161    mov [ecx],al"
"	      004b5163    jmp near ptr 004B5168h"
"	      004b5168    jmp near ptr 004B516Dh"
"	      004b516d    mov eax,[ebp-0BCh]"
"	      004b5173    add eax,8Ch"
"	      004b5178    push eax"
"	      004b5179    lea eax,[ebp-4]"
"	      004b517c    push eax"
"	      004b517d    lea eax,[ebp-8]"
"	      004b5180    push eax"
"	      004b5181    lea eax,[ebp-0Ch]"
"	      004b5184    push eax"
"	      004b5185    lea eax,[ebp-10h]"
"	      004b5188    push eax"
"	      004b5189    mov eax,[ebp-0BCh]"
"	      004b518f    mov eax,[eax+0A8h]"
"	      004b5195    push eax"
"	      004b5196    mov eax,[ebp-0B8h]"
"	      004b519c    mov eax,[eax]"
"	      004b519e    push eax"
"	      004b519f    mov eax,[ebp-0BCh]"
"	      004b51a5    mov ecx,[ebp-0BCh]"
"	      004b51ab    mov ecx,[ecx+44h]"
"	      004b51ae    mov edx,[ecx]"
"	      004b51b0    mov ecx,[eax+44h]"
"	      004b51b3    call dword ptr [edx+4Ch]"
);
// LINE 2317:
	asm( 
"	      004b51b6    mov eax,[ebp-28h]"
"	      004b51b9    mov [ebp-70h],eax"
"	      004b51bc    mov eax,[ebp-28h]"
"	      004b51bf    mov eax,[eax]"
"	      004b51c1    mov [ebp-28h],eax"
"	      004b51c4    jmp near ptr 004B51C9h"
"	      004b51c9    mov eax,[ebp-70h]"
"	      004b51cc    mov [ebp-40h],eax"
"	      004b51cf    jmp near ptr 004B51D4h"
);
// LINE 2318:
	asm( 
"	      004b51d4    inc dword ptr [ebp-2Ch]"
);
// LINE 2319:
	asm( 
"	      004b51d7    jmp near ptr 004B4D0Fh"
);
// LINE 2321:
	asm( 
"	      004b51dc    mov eax,[ebp-0BCh]"
"	      004b51e2    cmp dword ptr [eax+6Ch],0"
"	      004b51e6    je near ptr 004B51FFh"
);
// LINE 2322:
	asm( 
"	      004b51ec    push 0"
"	      004b51ee    mov eax,[ebp-0BCh]"
"	      004b51f4    mov eax,[eax]"
"	      004b51f6    mov ecx,[ebp-0BCh]"
"	      004b51fc    call dword ptr [eax+2Ch]"
);
// LINE 2323:
	asm( 
"	      004b51ff    mov eax,1"
"	      004b5204    jmp near ptr 004B5209h"
);
// LINE 2324:
	asm( 
"	      004b5209    pop edi"
"	      004b520a    pop esi"
"	      004b520b    pop ebx"
"	      004b520c    leave"
"	      004b520d    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b520e
int32_t ListBoxWindow::RemoveString(class basic_string<char>&) {
// LINE 2338:
	asm( 
"	      004b520e    push ebp"
"	      004b520f    mov ebp,esp"
"	      004b5211    sub esp,0Ch"
"	      004b5214    push ebx"
"	      004b5215    push esi"
"	      004b5216    push edi"
"	      004b5217    mov [ebp-0Ch],ecx"
);
// LINE 2342:
	asm( 
"	      004b521a    mov eax,[ebp+8]"
"	      004b521d    push eax"
"	      004b521e    lea eax,[ebp-8]"
"	      004b5221    push eax"
"	      004b5222    mov eax,[ebp-0Ch]"
"	      004b5225    mov eax,[eax]"
"	      004b5227    mov ecx,[ebp-0Ch]"
"	      004b522a    call dword ptr [eax+140h]"
"	      004b5230    mov [ebp-4],eax"
);
// LINE 2343:
	asm( 
"	      004b5233    cmp dword ptr [ebp-4],0"
"	      004b5237    je near ptr 004B5254h"
);
// LINE 2344:
	asm( 
"	      004b523d    mov eax,[ebp-8]"
"	      004b5240    push eax"
"	      004b5241    mov eax,[ebp-0Ch]"
"	      004b5244    mov eax,[eax]"
"	      004b5246    mov ecx,[ebp-0Ch]"
"	      004b5249    call dword ptr [eax+0C4h]"
"	      004b524f    jmp near ptr 004B525Bh"
);
// LINE 2346:
	asm( 
"	      004b5254    xor eax,eax"
"	      004b5256    jmp near ptr 004B525Bh"
);
// LINE 2347:
	asm( 
"	      004b525b    pop edi"
"	      004b525c    pop esi"
"	      004b525d    pop ebx"
"	      004b525e    leave"
"	      004b525f    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b5262
int32_t ListBoxWindow::RemoveString(long) {
// LINE 2354:
	asm( 
"	      004b5262    push ebp"
"	      004b5263    mov ebp,esp"
"	      004b5265    sub esp,0Ch"
"	      004b5268    push ebx"
"	      004b5269    push esi"
"	      004b526a    push edi"
"	      004b526b    mov [ebp-0Ch],ecx"
);
// LINE 2355:
	asm( 
"	      004b526e    mov eax,[ebp-0Ch]"
"	      004b5271    mov eax,[eax]"
"	      004b5273    mov ecx,[ebp-0Ch]"
"	      004b5276    call dword ptr [eax+114h]"
"	      004b527c    mov [ebp-8],eax"
);
// LINE 2358:
	asm( 
"	      004b527f    mov eax,[ebp-8]"
"	      004b5282    dec eax"
"	      004b5283    cmp eax,[ebp+8]"
"	      004b5286    jge near ptr 004B5293h"
);
// LINE 2359:
	asm( 
"	      004b528c    xor eax,eax"
"	      004b528e    jmp near ptr 004B5340h"
);
// LINE 2362:
	asm( 
"	      004b5293    mov eax,[ebp+8]"
"	      004b5296    push eax"
"	      004b5297    mov eax,[ebp-0Ch]"
"	      004b529a    mov eax,[eax]"
"	      004b529c    mov ecx,[ebp-0Ch]"
"	      004b529f    call dword ptr [eax+144h]"
);
// LINE 2365:
	asm( 
"	      004b52a5    mov eax,[ebp-0Ch]"
"	      004b52a8    mov ecx,[ebp+8]"
"	      004b52ab    cmp [eax+0ACh],ecx"
"	      004b52b1    jne near ptr 004B52E8h"
);
// LINE 2366:
	asm( 
"	      004b52b7    mov eax,[ebp-8]"
"	      004b52ba    dec eax"
"	      004b52bb    cmp eax,[ebp+8]"
"	      004b52be    jne near ptr 004B52E3h"
);
// LINE 2367:
	asm( 
"	      004b52c4    mov eax,[ebp-0Ch]"
"	      004b52c7    mov eax,[eax+0ACh]"
"	      004b52cd    dec eax"
"	      004b52ce    mov [ebp-4],eax"
);
// LINE 2368:
	asm( 
"	      004b52d1    mov eax,[ebp-4]"
"	      004b52d4    push eax"
"	      004b52d5    mov eax,[ebp-0Ch]"
"	      004b52d8    mov eax,[eax]"
"	      004b52da    mov ecx,[ebp-0Ch]"
"	      004b52dd    call dword ptr [eax+0DCh]"
);
// LINE 2371:
	asm( 
"	      004b52e3    jmp near ptr 004B5319h"
"	      004b52e8    mov eax,[ebp-0Ch]"
"	      004b52eb    mov ecx,[ebp+8]"
"	      004b52ee    cmp [eax+0ACh],ecx"
"	      004b52f4    jle near ptr 004B5319h"
);
// LINE 2372:
	asm( 
"	      004b52fa    mov eax,[ebp-0Ch]"
"	      004b52fd    mov eax,[eax+0ACh]"
"	      004b5303    dec eax"
"	      004b5304    mov [ebp-4],eax"
);
// LINE 2373:
	asm( 
"	      004b5307    mov eax,[ebp-4]"
"	      004b530a    push eax"
"	      004b530b    mov eax,[ebp-0Ch]"
"	      004b530e    mov eax,[eax]"
"	      004b5310    mov ecx,[ebp-0Ch]"
"	      004b5313    call dword ptr [eax+0DCh]"
);
// LINE 2375:
	asm( 
"	      004b5319    push 1"
"	      004b531b    push 1"
"	      004b531d    mov eax,[ebp-0Ch]"
"	      004b5320    mov eax,[eax]"
"	      004b5322    mov ecx,[ebp-0Ch]"
"	      004b5325    call dword ptr [eax+30h]"
);
// LINE 2376:
	asm( 
"	      004b5328    mov eax,[ebp-0Ch]"
"	      004b532b    mov eax,[eax]"
"	      004b532d    mov ecx,[ebp-0Ch]"
"	      004b5330    call dword ptr [eax+150h]"
);
// LINE 2377:
	asm( 
"	      004b5336    mov eax,1"
"	      004b533b    jmp near ptr 004B5340h"
);
// LINE 2378:
	asm( 
"	      004b5340    pop edi"
"	      004b5341    pop esi"
"	      004b5342    pop ebx"
"	      004b5343    leave"
"	      004b5344    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b5347
void ListBoxWindow::RemoveAllStrings() {
// LINE 2385:
	asm( 
"	      004b5347    push ebp"
"	      004b5348    mov ebp,esp"
"	      004b534a    sub esp,40h"
"	      004b534d    push ebx"
"	      004b534e    push esi"
"	      004b534f    push edi"
"	      004b5350    mov [ebp-40h],ecx"
);
// LINE 2386:
	asm( 
"	      004b5353    mov eax,[ebp-40h]"
"	      004b5356    mov eax,[eax+74h]"
"	      004b5359    mov [ebp-0Ch],eax"
"	      004b535c    mov eax,[ebp-0Ch]"
"	      004b535f    mov [ebp-4],eax"
"	      004b5362    jmp near ptr 004B5367h"
"	      004b5367    jmp near ptr 004B536Ch"
"	      004b536c    mov eax,[ebp-40h]"
"	      004b536f    mov eax,[eax+74h]"
"	      004b5372    mov eax,[eax]"
"	      004b5374    mov [ebp-10h],eax"
"	      004b5377    mov eax,[ebp-10h]"
"	      004b537a    mov [ebp-8],eax"
"	      004b537d    jmp near ptr 004B5382h"
"	      004b5382    jmp near ptr 004B5387h"
"	      004b5387    mov eax,[ebp-4]"
"	      004b538a    mov [ebp-38h],eax"
"	      004b538d    mov eax,[ebp-8]"
"	      004b5390    mov [ebp-3Ch],eax"
"	      004b5393    mov eax,[ebp-38h]"
"	      004b5396    cmp [ebp-3Ch],eax"
"	      004b5399    jne near ptr 004B53A9h"
"	      004b539f    jmp near ptr 004B53BDh"
"	      004b53a4    jmp near ptr 004B53A9h"
"	      004b53a9    jmp near ptr 004B53B8h"
"	      004b53ae    cmp dword ptr [ebp-1Ch],0"
"	      004b53b2    jne near ptr 004B53BDh"
"	      004b53b8    jmp near ptr 004B53C2h"
"	      004b53bd    jmp near ptr 004B54E1h"
"	      004b53c2    jmp near ptr 004B53D1h"
"	      004b53c7    cmp dword ptr [ebp-20h],0"
"	      004b53cb    je near ptr 004B54E1h"
"	      004b53d1    mov eax,[ebp-3Ch]"
"	      004b53d4    mov [ebp-18h],eax"
"	      004b53d7    mov eax,[ebp-3Ch]"
"	      004b53da    mov eax,[eax]"
"	      004b53dc    mov [ebp-3Ch],eax"
"	      004b53df    jmp near ptr 004B53E4h"
"	      004b53e4    mov eax,[ebp-18h]"
"	      004b53e7    mov [ebp-14h],eax"
"	      004b53ea    jmp near ptr 004B53EFh"
"	      004b53ef    mov eax,[ebp-14h]"
"	      004b53f2    mov [ebp-34h],eax"
"	      004b53f5    mov eax,[ebp-34h]"
"	      004b53f8    mov eax,[eax]"
"	      004b53fa    mov ecx,[ebp-34h]"
"	      004b53fd    mov ecx,[ecx+4]"
"	      004b5400    mov [ecx],eax"
"	      004b5402    mov eax,[ebp-34h]"
"	      004b5405    mov eax,[eax+4]"
"	      004b5408    mov ecx,[ebp-34h]"
"	      004b540b    mov ecx,[ecx]"
"	      004b540d    mov [ecx+4],eax"
"	      004b5410    jmp near ptr 004B5415h"
"	      004b5415    mov eax,[ebp-34h]"
"	      004b5418    mov eax,[eax+0Ch]"
"	      004b541b    dec dword ptr [eax+0Ch]"
"	      004b541e    mov eax,[ebp-34h]"
"	      004b5421    mov eax,[eax+0Ch]"
"	      004b5424    cmp dword ptr [eax+0Ch],0"
"	      004b5428    jne near ptr 004B546Ah"
"	      004b542e    mov eax,[ebp-34h]"
"	      004b5431    mov eax,[eax+0Ch]"
"	      004b5434    mov [ebp-30h],eax"
"	      004b5437    mov eax,[ebp-30h]"
"	      004b543a    mov [ebp-2Ch],eax"
"	      004b543d    cmp dword ptr [ebp-2Ch],0"
"	      004b5441    je near ptr 004B546Ah"
"	      004b5447    mov ecx,[ebp-2Ch]"
"	      004b544a    call 0041F4B0h"
"	      004b544f    jmp near ptr 004B5454h"
"	      004b5454    mov eax,[ebp-2Ch]"
"	      004b5457    push eax"
"	      004b5458    call 0056A740h"
"	      004b545d    add esp,4"
"	      004b5460    jmp near ptr 004B5465h"
"	      004b5465    jmp near ptr 004B546Ah"
"	      004b546a    jmp near ptr 004B546Fh"
"	      004b546f    mov eax,[ebp-34h]"
"	      004b5472    cmp dword ptr [eax+8],0"
"	      004b5476    je near ptr 004B5497h"
"	      004b547c    mov eax,[ebp-34h]"
"	      004b547f    mov eax,[eax+8]"
"	      004b5482    mov [ebp-24h],eax"
"	      004b5485    mov eax,[ebp-24h]"
"	      004b5488    mov [ebp-28h],eax"
"	      004b548b    mov eax,[ebp-28h]"
"	      004b548e    push eax"
"	      004b548f    call 0056A740h"
"	      004b5494    add esp,4"
"	      004b5497    jmp near ptr 004B549Ch"
"	      004b549c    jmp near ptr 004B54B0h"
"	      004b54a1    mov eax,[ebp-34h]"
"	      004b54a4    add eax,8"
"	      004b54a7    push eax"
"	      004b54a8    call 0056A740h"
"	      004b54ad    add esp,4"
"	      004b54b0    jmp near ptr 004B54B5h"
"	      004b54b5    jmp near ptr 004B54BAh"
"	      004b54ba    mov eax,ds:[59856Ch]"
"	      004b54bf    mov ecx,[ebp-34h]"
"	      004b54c2    mov [ecx],eax"
"	      004b54c4    mov eax,[ebp-34h]"
"	      004b54c7    mov ds:[59856Ch],eax"
"	      004b54cc    jmp near ptr 004B54D1h"
"	      004b54d1    mov eax,[ebp-40h]"
"	      004b54d4    dec dword ptr [eax+78h]"
"	      004b54d7    jmp near ptr 004B54DCh"
"	      004b54dc    jmp near ptr 004B5393h"
"	      004b54e1    jmp near ptr 004B54E6h"
);
// LINE 2387:
	asm( 
"	      004b54e6    push 0FFFFFFFFh"
"	      004b54e8    mov eax,[ebp-40h]"
"	      004b54eb    mov eax,[eax]"
"	      004b54ed    mov ecx,[ebp-40h]"
"	      004b54f0    call dword ptr [eax+0DCh]"
);
// LINE 2388:
	asm( 
"	      004b54f6    mov eax,[ebp-40h]"
"	      004b54f9    mov eax,[eax]"
"	      004b54fb    mov ecx,[ebp-40h]"
"	      004b54fe    call dword ptr [eax+134h]"
);
// LINE 2389:
	asm( 
"	      004b5504    jmp near ptr 004B5509h"
"	      004b5509    pop edi"
"	      004b550a    pop esi"
"	      004b550b    pop ebx"
"	      004b550c    leave"
"	      004b550d    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b550e
int32_t ListBoxWindow::InsertString(class basic_string<char>&, long) {
// LINE 2396:
	asm( 
"	      004b550e    push ebp"
"	      004b550f    mov ebp,esp"
"	      004b5511    sub esp,0Ch"
"	      004b5514    push ebx"
"	      004b5515    push esi"
"	      004b5516    push edi"
"	      004b5517    mov [ebp-0Ch],ecx"
);
// LINE 2397:
	asm( 
"	      004b551a    mov eax,[ebp-0Ch]"
"	      004b551d    mov eax,[eax]"
"	      004b551f    mov ecx,[ebp-0Ch]"
"	      004b5522    call dword ptr [eax+114h]"
"	      004b5528    mov [ebp-8],eax"
);
// LINE 2400:
	asm( 
"	      004b552b    cmp dword ptr [ebp+0Ch],0FFFFFFFFh"
"	      004b552f    jne near ptr 004B5540h"
);
// LINE 2401:
	asm( 
"	      004b5535    mov eax,[ebp-8]"
"	      004b5538    mov [ebp+0Ch],eax"
);
// LINE 2402:
	asm( 
"	      004b553b    jmp near ptr 004B5551h"
"	      004b5540    cmp dword ptr [ebp+0Ch],0"
"	      004b5544    jge near ptr 004B5551h"
);
// LINE 2403:
	asm( 
"	      004b554a    mov dword ptr [ebp+0Ch],0"
);
// LINE 2405:
	asm( 
"	      004b5551    mov eax,[ebp+8]"
"	      004b5554    push eax"
"	      004b5555    mov eax,[ebp+0Ch]"
"	      004b5558    push eax"
"	      004b5559    mov eax,[ebp-0Ch]"
"	      004b555c    mov eax,[eax]"
"	      004b555e    mov ecx,[ebp-0Ch]"
"	      004b5561    call dword ptr [eax+148h]"
);
// LINE 2408:
	asm( 
"	      004b5567    cmp dword ptr [ebp-8],0"
"	      004b556b    jne near ptr 004B558Fh"
);
// LINE 2409:
	asm( 
"	      004b5571    mov dword ptr [ebp-4],0"
);
// LINE 2410:
	asm( 
"	      004b5578    mov eax,[ebp-4]"
"	      004b557b    push eax"
"	      004b557c    mov eax,[ebp-0Ch]"
"	      004b557f    mov eax,[eax]"
"	      004b5581    mov ecx,[ebp-0Ch]"
"	      004b5584    call dword ptr [eax+0DCh]"
);
// LINE 2412:
	asm( 
"	      004b558a    jmp near ptr 004B55C0h"
"	      004b558f    mov eax,[ebp-0Ch]"
"	      004b5592    mov ecx,[ebp+0Ch]"
"	      004b5595    cmp [eax+0ACh],ecx"
"	      004b559b    jl near ptr 004B55C0h"
);
// LINE 2413:
	asm( 
"	      004b55a1    mov eax,[ebp-0Ch]"
"	      004b55a4    mov eax,[eax+0ACh]"
"	      004b55aa    inc eax"
"	      004b55ab    mov [ebp-4],eax"
);
// LINE 2414:
	asm( 
"	      004b55ae    mov eax,[ebp-4]"
"	      004b55b1    push eax"
"	      004b55b2    mov eax,[ebp-0Ch]"
"	      004b55b5    mov eax,[eax]"
"	      004b55b7    mov ecx,[ebp-0Ch]"
"	      004b55ba    call dword ptr [eax+0DCh]"
);
// LINE 2419:
	asm( 
"	      004b55c0    push 1"
"	      004b55c2    push 1"
"	      004b55c4    mov eax,[ebp-0Ch]"
"	      004b55c7    mov eax,[eax]"
"	      004b55c9    mov ecx,[ebp-0Ch]"
"	      004b55cc    call dword ptr [eax+30h]"
);
// LINE 2420:
	asm( 
"	      004b55cf    mov eax,[ebp-0Ch]"
"	      004b55d2    mov eax,[eax]"
"	      004b55d4    mov ecx,[ebp-0Ch]"
"	      004b55d7    call dword ptr [eax+150h]"
);
// LINE 2421:
	asm( 
"	      004b55dd    mov eax,1"
"	      004b55e2    jmp near ptr 004B55E7h"
);
// LINE 2422:
	asm( 
"	      004b55e7    pop edi"
"	      004b55e8    pop esi"
"	      004b55e9    pop ebx"
"	      004b55ea    leave"
"	      004b55eb    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b55ee
int32_t ListBoxWindow::InsertString(long, long) {
// LINE 2430:
	asm( 
"	      004b55ee    push ebp"
"	      004b55ef    mov ebp,esp"
"	      004b55f1    mov eax,1078h"
"	      004b55f6    call 0056AC60h"
"	      004b55fb    push ebx"
"	      004b55fc    push esi"
"	      004b55fd    push edi"
"	      004b55fe    mov [ebp-1078h],ecx"
);
// LINE 2432:
	asm( 
"	      004b5604    push 10h"
"	      004b5606    call 0056A600h"
"	      004b560b    add esp,4"
"	      004b560e    mov [ebp-14h],eax"
"	      004b5611    cmp dword ptr [ebp-14h],0"
"	      004b5615    je near ptr 004B5654h"
"	      004b561b    mov eax,[ebp-14h]"
"	      004b561e    mov dword ptr [eax+4],0"
"	      004b5625    mov eax,[ebp-14h]"
"	      004b5628    mov eax,[eax+4]"
"	      004b562b    mov ecx,[ebp-14h]"
"	      004b562e    mov [ecx+8],eax"
"	      004b5631    mov eax,[ebp-14h]"
"	      004b5634    mov dword ptr [eax],0"
"	      004b563a    mov eax,[ebp-14h]"
"	      004b563d    mov dword ptr [eax+0Ch],1"
"	      004b5644    jmp near ptr 004B5649h"
"	      004b5649    mov eax,[ebp-14h]"
"	      004b564c    mov [ebp-8],eax"
"	      004b564f    jmp near ptr 004B565Bh"
"	      004b5654    mov dword ptr [ebp-8],0"
"	      004b565b    mov dword ptr [ebp-0Ch],0"
"	      004b5662    jmp near ptr 004B5667h"
);
// LINE 2434:
	asm( 
"	      004b5667    push 0"
"	      004b5669    mov eax,[ebp+8]"
"	      004b566c    push eax"
"	      004b566d    call 0042B15Fh"
"	      004b5672    add esp,8"
"	      004b5675    mov [ebp-4],eax"
);
// LINE 2435:
	asm( 
"	      004b5678    push 0FFFh"
"	      004b567d    lea eax,[ebp-102Ch]"
"	      004b5683    push eax"
"	      004b5684    mov eax,[ebp-4]"
"	      004b5687    push eax"
"	      004b5688    mov eax,ds:[5C28C8h]"
"	      004b568d    push eax"
"	      004b568e    call dword ptr ds:[6C38B4h]"
"	      004b5694    mov [ebp-1030h],eax"
"	      004b569a    cmp dword ptr [ebp-1030h],0"
"	      004b56a1    jne near ptr 004B5995h"
"	      004b56a7    push 0FFFh"
"	      004b56ac    lea eax,[ebp-102Ch]"
"	      004b56b2    push eax"
"	      004b56b3    mov ecx,3E8h"
"	      004b56b8    mov eax,[ebp-4]"
"	      004b56bb    sub edx,edx"
"	      004b56bd    div ecx"
"	      004b56bf    push edx"
"	      004b56c0    mov eax,ds:[5C28C8h]"
"	      004b56c5    push eax"
"	      004b56c6    call dword ptr ds:[6C38B4h]"
"	      004b56cc    mov [ebp-1030h],eax"
"	      004b56d2    jmp near ptr 004B56D7h"
"	      004b56d7    lea eax,[ebp-102Ch]"
"	      004b56dd    push eax"
"	      004b56de    call 0056ABE0h"
"	      004b56e3    add esp,4"
"	      004b56e6    mov [ebp-1044h],eax"
"	      004b56ec    cmp dword ptr [ebp-1044h],0FFFFFFFFh"
"	      004b56f3    jne near ptr 004B5731h"
"	      004b56f9    push 5971E4h"
"	      004b56fe    mov ecx,638C00h"
"	      004b5703    call 00569960h"
"	      004b5708    mov [ebp-1040h],eax"
"	      004b570e    mov eax,[ebp-1040h]"
"	      004b5714    push eax"
"	      004b5715    call 004011B0h"
"	      004b571a    add esp,4"
"	      004b571d    jmp near ptr 004B5722h"
"	      004b5722    push 1"
"	      004b5724    call 00569430h"
"	      004b5729    add esp,4"
"	      004b572c    jmp near ptr 004B5731h"
"	      004b5731    jmp near ptr 004B5736h"
"	      004b5736    mov eax,[ebp-8]"
"	      004b5739    cmp dword ptr [eax+0Ch],1"
"	      004b573d    ja near ptr 004B5767h"
"	      004b5743    cmp dword ptr [ebp-1044h],0"
"	      004b574a    je near ptr 004B57C8h"
"	      004b5750    jmp near ptr 004B5755h"
"	      004b5755    mov eax,[ebp-8]"
"	      004b5758    mov ecx,[ebp-1044h]"
"	      004b575e    cmp [eax+8],ecx"
"	      004b5761    jae near ptr 004B57C8h"
"	      004b5767    push 10h"
"	      004b5769    call 0056A600h"
"	      004b576e    add esp,4"
"	      004b5771    mov [ebp-1038h],eax"
"	      004b5777    cmp dword ptr [ebp-1038h],0"
"	      004b577e    je near ptr 004B57A8h"
"	      004b5784    mov eax,[ebp-1044h]"
"	      004b578a    push eax"
"	      004b578b    lea eax,[ebp-102Ch]"
"	      004b5791    push eax"
"	      004b5792    mov ecx,[ebp-1038h]"
"	      004b5798    call 0041E090h"
"	      004b579d    mov [ebp-1034h],eax"
"	      004b57a3    jmp near ptr 004B57B2h"
"	      004b57a8    mov dword ptr [ebp-1034h],0"
"	      004b57b2    lea ecx,[ebp-0Ch]"
"	      004b57b5    call 00412080h"
"	      004b57ba    mov eax,[ebp-1034h]"
"	      004b57c0    mov [ebp-8],eax"
"	      004b57c3    jmp near ptr 004B5807h"
"	      004b57c8    cmp dword ptr [ebp-1044h],0"
"	      004b57cf    je near ptr 004B5807h"
"	      004b57d5    jmp near ptr 004B57DAh"
"	      004b57da    mov eax,[ebp-8]"
"	      004b57dd    mov eax,[eax]"
"	      004b57df    mov [ebp-103Ch],eax"
"	      004b57e5    mov eax,[ebp-1044h]"
"	      004b57eb    push eax"
"	      004b57ec    lea eax,[ebp-102Ch]"
"	      004b57f2    push eax"
"	      004b57f3    mov eax,[ebp-103Ch]"
"	      004b57f9    push eax"
"	      004b57fa    call 0056A800h"
"	      004b57ff    add esp,0Ch"
"	      004b5802    jmp near ptr 004B5807h"
"	      004b5807    mov eax,[ebp-1044h]"
"	      004b580d    mov ecx,[ebp-8]"
"	      004b5810    mov [ecx+4],eax"
"	      004b5813    jmp near ptr 004B5818h"
"	      004b5818    jmp near ptr 004B581Dh"
"	      004b581d    jmp near ptr 004B5822h"
"	      004b5822    push 597200h"
"	      004b5827    call 0056ABE0h"
"	      004b582c    add esp,4"
"	      004b582f    mov [ebp-1058h],eax"
"	      004b5835    jmp near ptr 004B583Ah"
"	      004b583a    mov eax,[ebp-8]"
"	      004b583d    mov ecx,0FFFFFFFFh"
"	      004b5842    sub ecx,[ebp-1058h]"
"	      004b5848    cmp [eax+4],ecx"
"	      004b584b    jb near ptr 004B5889h"
"	      004b5851    push 5971E4h"
"	      004b5856    mov ecx,638C00h"
"	      004b585b    call 00569960h"
"	      004b5860    mov [ebp-1054h],eax"
"	      004b5866    mov eax,[ebp-1054h]"
"	      004b586c    push eax"
"	      004b586d    call 004011B0h"
"	      004b5872    add esp,4"
"	      004b5875    jmp near ptr 004B587Ah"
"	      004b587a    push 1"
"	      004b587c    call 00569430h"
"	      004b5881    add esp,4"
"	      004b5884    jmp near ptr 004B5889h"
"	      004b5889    jmp near ptr 004B588Eh"
"	      004b588e    mov eax,[ebp-8]"
"	      004b5891    cmp dword ptr [eax+0Ch],1"
"	      004b5895    ja near ptr 004B58BDh"
"	      004b589b    jmp near ptr 004B58A0h"
"	      004b58a0    jmp near ptr 004B58A5h"
"	      004b58a5    mov eax,[ebp-8]"
"	      004b58a8    mov eax,[eax+8]"
"	      004b58ab    mov ecx,[ebp-8]"
"	      004b58ae    sub eax,[ecx+4]"
"	      004b58b1    cmp eax,[ebp-1058h]"
"	      004b58b7    jae near ptr 004B5932h"
"	      004b58bd    push 10h"
"	      004b58bf    call 0056A600h"
"	      004b58c4    add esp,4"
"	      004b58c7    mov [ebp-104Ch],eax"
"	      004b58cd    cmp dword ptr [ebp-104Ch],0"
"	      004b58d4    je near ptr 004B5917h"
"	      004b58da    jmp near ptr 004B58DFh"
"	      004b58df    jmp near ptr 004B58E4h"
"	      004b58e4    mov eax,[ebp-8]"
"	      004b58e7    mov eax,[eax+4]"
"	      004b58ea    add eax,[ebp-1058h]"
"	      004b58f0    push eax"
"	      004b58f1    mov eax,[ebp-8]"
"	      004b58f4    mov eax,[eax+4]"
"	      004b58f7    push eax"
"	      004b58f8    lea ecx,[ebp-0Ch]"
"	      004b58fb    call 00417C00h"
"	      004b5900    push eax"
"	      004b5901    mov ecx,[ebp-104Ch]"
"	      004b5907    call 0041E160h"
"	      004b590c    mov [ebp-1048h],eax"
"	      004b5912    jmp near ptr 004B5921h"
"	      004b5917    mov dword ptr [ebp-1048h],0"
"	      004b5921    lea ecx,[ebp-0Ch]"
"	      004b5924    call 00412080h"
"	      004b5929    mov eax,[ebp-1048h]"
"	      004b592f    mov [ebp-8],eax"
"	      004b5932    cmp dword ptr [ebp-1058h],0"
"	      004b5939    je near ptr 004B597Ah"
"	      004b593f    jmp near ptr 004B5944h"
"	      004b5944    jmp near ptr 004B5949h"
"	      004b5949    mov eax,[ebp-8]"
"	      004b594c    mov eax,[eax+4]"
"	      004b594f    mov ecx,[ebp-8]"
"	      004b5952    add eax,[ecx]"
"	      004b5954    mov [ebp-1050h],eax"
"	      004b595a    mov eax,[ebp-1058h]"
"	      004b5960    push eax"
"	      004b5961    push 597200h"
"	      004b5966    mov eax,[ebp-1050h]"
"	      004b596c    push eax"
"	      004b596d    call 0056A800h"
"	      004b5972    add esp,0Ch"
"	      004b5975    jmp near ptr 004B597Ah"
"	      004b597a    mov eax,[ebp-1058h]"
"	      004b5980    mov ecx,[ebp-8]"
"	      004b5983    add [ecx+4],eax"
"	      004b5986    jmp near ptr 004B598Bh"
"	      004b598b    jmp near ptr 004B5990h"
"	      004b5990    jmp near ptr 004B5B29h"
"	      004b5995    jmp near ptr 004B599Ah"
"	      004b599a    lea eax,[ebp-102Ch]"
"	      004b59a0    push eax"
"	      004b59a1    call 0056ABE0h"
"	      004b59a6    add esp,4"
"	      004b59a9    mov [ebp-1074h],eax"
"	      004b59af    cmp dword ptr [ebp-1074h],0FFFFFFFFh"
"	      004b59b6    jne near ptr 004B59F4h"
"	      004b59bc    push 5971E4h"
"	      004b59c1    mov ecx,638C00h"
"	      004b59c6    call 00569960h"
"	      004b59cb    mov [ebp-1068h],eax"
"	      004b59d1    mov eax,[ebp-1068h]"
"	      004b59d7    push eax"
"	      004b59d8    call 004011B0h"
"	      004b59dd    add esp,4"
"	      004b59e0    jmp near ptr 004B59E5h"
"	      004b59e5    push 1"
"	      004b59e7    call 00569430h"
"	      004b59ec    add esp,4"
"	      004b59ef    jmp near ptr 004B59F4h"
"	      004b59f4    jmp near ptr 004B59F9h"
"	      004b59f9    mov eax,[ebp-8]"
"	      004b59fc    cmp dword ptr [eax+0Ch],1"
"	      004b5a00    ja near ptr 004B5A2Ah"
"	      004b5a06    cmp dword ptr [ebp-1074h],0"
"	      004b5a0d    je near ptr 004B5ACFh"
"	      004b5a13    jmp near ptr 004B5A18h"
"	      004b5a18    mov eax,[ebp-8]"
"	      004b5a1b    mov ecx,[ebp-1074h]"
"	      004b5a21    cmp [eax+8],ecx"
"	      004b5a24    jae near ptr 004B5ACFh"
"	      004b5a2a    push 10h"
"	      004b5a2c    call 0056A600h"
"	      004b5a31    add esp,4"
"	      004b5a34    mov [ebp-1060h],eax"
"	      004b5a3a    cmp dword ptr [ebp-1060h],0"
"	      004b5a41    je near ptr 004B5A6Bh"
"	      004b5a47    mov eax,[ebp-1074h]"
"	      004b5a4d    push eax"
"	      004b5a4e    lea eax,[ebp-102Ch]"
"	      004b5a54    push eax"
"	      004b5a55    mov ecx,[ebp-1060h]"
"	      004b5a5b    call 0041E090h"
"	      004b5a60    mov [ebp-105Ch],eax"
"	      004b5a66    jmp near ptr 004B5A75h"
"	      004b5a6b    mov dword ptr [ebp-105Ch],0"
"	      004b5a75    mov eax,[ebp-8]"
"	      004b5a78    dec dword ptr [eax+0Ch]"
"	      004b5a7b    mov eax,[ebp-8]"
"	      004b5a7e    cmp dword ptr [eax+0Ch],0"
"	      004b5a82    jne near ptr 004B5ABCh"
"	      004b5a88    mov eax,[ebp-8]"
"	      004b5a8b    mov [ebp-1070h],eax"
"	      004b5a91    mov eax,[ebp-1070h]"
"	      004b5a97    mov [ebp-106Ch],eax"
"	      004b5a9d    cmp dword ptr [ebp-106Ch],0"
"	      004b5aa4    je near ptr 004B5ABCh"
"	      004b5aaa    push 1"
"	      004b5aac    mov ecx,[ebp-106Ch]"
"	      004b5ab2    call 0041DD70h"
"	      004b5ab7    jmp near ptr 004B5ABCh"
"	      004b5abc    jmp near ptr 004B5AC1h"
"	      004b5ac1    mov eax,[ebp-105Ch]"
"	      004b5ac7    mov [ebp-8],eax"
"	      004b5aca    jmp near ptr 004B5B0Eh"
"	      004b5acf    cmp dword ptr [ebp-1074h],0"
"	      004b5ad6    je near ptr 004B5B0Eh"
"	      004b5adc    jmp near ptr 004B5AE1h"
"	      004b5ae1    mov eax,[ebp-8]"
"	      004b5ae4    mov eax,[eax]"
"	      004b5ae6    mov [ebp-1064h],eax"
"	      004b5aec    mov eax,[ebp-1074h]"
"	      004b5af2    push eax"
"	      004b5af3    lea eax,[ebp-102Ch]"
"	      004b5af9    push eax"
"	      004b5afa    mov eax,[ebp-1064h]"
"	      004b5b00    push eax"
"	      004b5b01    call 0056A800h"
"	      004b5b06    add esp,0Ch"
"	      004b5b09    jmp near ptr 004B5B0Eh"
"	      004b5b0e    mov eax,[ebp-1074h]"
"	      004b5b14    mov ecx,[ebp-8]"
"	      004b5b17    mov [ecx+4],eax"
"	      004b5b1a    jmp near ptr 004B5B1Fh"
"	      004b5b1f    jmp near ptr 004B5B24h"
"	      004b5b24    jmp near ptr 004B5B29h"
);
// LINE 2436:
	asm( 
"	      004b5b29    mov eax,[ebp+0Ch]"
"	      004b5b2c    push eax"
"	      004b5b2d    lea eax,[ebp-0Ch]"
"	      004b5b30    push eax"
"	      004b5b31    mov eax,[ebp-1078h]"
"	      004b5b37    mov eax,[eax]"
"	      004b5b39    mov ecx,[ebp-1078h]"
"	      004b5b3f    call dword ptr [eax+0D4h]"
"	      004b5b45    mov [ebp-10h],eax"
"	      004b5b48    mov eax,[ebp-8]"
"	      004b5b4b    dec dword ptr [eax+0Ch]"
"	      004b5b4e    mov eax,[ebp-8]"
"	      004b5b51    cmp dword ptr [eax+0Ch],0"
"	      004b5b55    jne near ptr 004B5BCBh"
"	      004b5b5b    mov eax,[ebp-8]"
"	      004b5b5e    mov [ebp-24h],eax"
"	      004b5b61    mov eax,[ebp-24h]"
"	      004b5b64    mov [ebp-20h],eax"
"	      004b5b67    cmp dword ptr [ebp-20h],0"
"	      004b5b6b    je near ptr 004B5BCBh"
"	      004b5b71    mov eax,[ebp-20h]"
"	      004b5b74    cmp dword ptr [eax+8],0"
"	      004b5b78    je near ptr 004B5BABh"
"	      004b5b7e    mov eax,[ebp-20h]"
"	      004b5b81    mov eax,[eax]"
"	      004b5b83    mov [ebp-28h],eax"
"	      004b5b86    mov eax,[ebp-28h]"
"	      004b5b89    mov [ebp-2Ch],eax"
"	      004b5b8c    mov eax,[ebp-2Ch]"
"	      004b5b8f    push eax"
"	      004b5b90    call 0056A740h"
"	      004b5b95    add esp,4"
"	      004b5b98    mov eax,[ebp-20h]"
"	      004b5b9b    mov dword ptr [eax+8],0"
"	      004b5ba2    mov eax,[ebp-20h]"
"	      004b5ba5    mov dword ptr [eax],0"
"	      004b5bab    jmp near ptr 004B5BB0h"
"	      004b5bb0    jmp near ptr 004B5BB5h"
"	      004b5bb5    mov eax,[ebp-20h]"
"	      004b5bb8    push eax"
"	      004b5bb9    call 0056A740h"
"	      004b5bbe    add esp,4"
"	      004b5bc1    jmp near ptr 004B5BC6h"
"	      004b5bc6    jmp near ptr 004B5BCBh"
"	      004b5bcb    jmp near ptr 004B5BD0h"
"	      004b5bd0    cmp dword ptr [ebp-0Ch],0"
"	      004b5bd4    je near ptr 004B5BF2h"
"	      004b5bda    mov eax,[ebp-0Ch]"
"	      004b5bdd    mov [ebp-18h],eax"
"	      004b5be0    mov eax,[ebp-18h]"
"	      004b5be3    mov [ebp-1Ch],eax"
"	      004b5be6    mov eax,[ebp-1Ch]"
"	      004b5be9    push eax"
"	      004b5bea    call 0056A740h"
"	      004b5bef    add esp,4"
"	      004b5bf2    jmp near ptr 004B5BF7h"
"	      004b5bf7    mov eax,[ebp-10h]"
"	      004b5bfa    jmp near ptr 004B5BFFh"
);
// LINE 2437:
	asm( 
"	      004b5bff    pop edi"
"	      004b5c00    pop esi"
"	      004b5c01    pop ebx"
"	      004b5c02    leave"
"	      004b5c03    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b5c06
int32_t ListBoxWindow::ModifyString(long, class basic_string<char>&) {
// LINE 2445:
	asm( 
"	      004b5c06    push ebp"
"	      004b5c07    mov ebp,esp"
"	      004b5c09    sub esp,30h"
"	      004b5c0c    push ebx"
"	      004b5c0d    push esi"
"	      004b5c0e    push edi"
"	      004b5c0f    mov [ebp-30h],ecx"
);
// LINE 2448:
	asm( 
"	      004b5c12    lea eax,[ebp-4]"
"	      004b5c15    push eax"
"	      004b5c16    mov eax,[ebp+8]"
"	      004b5c19    push eax"
"	      004b5c1a    mov eax,[ebp-30h]"
"	      004b5c1d    mov eax,[eax]"
"	      004b5c1f    mov ecx,[ebp-30h]"
"	      004b5c22    call dword ptr [eax+138h]"
"	      004b5c28    test eax,eax"
"	      004b5c2a    je near ptr 004B5E13h"
"	      004b5c30    mov eax,[ebp-4]"
"	      004b5c33    mov [ebp-2Ch],eax"
);
// LINE 2449:
	asm( 
"	      004b5c36    mov eax,[ebp-2Ch]"
"	      004b5c39    cmp [ebp+0Ch],eax"
"	      004b5c3c    je near ptr 004B5DF5h"
"	      004b5c42    mov eax,[ebp-2Ch]"
"	      004b5c45    mov eax,[eax+4]"
"	      004b5c48    dec dword ptr [eax+0Ch]"
"	      004b5c4b    mov eax,[ebp-2Ch]"
"	      004b5c4e    mov eax,[eax+4]"
"	      004b5c51    cmp dword ptr [eax+0Ch],0"
"	      004b5c55    jne near ptr 004B5CCEh"
"	      004b5c5b    mov eax,[ebp-2Ch]"
"	      004b5c5e    mov eax,[eax+4]"
"	      004b5c61    mov [ebp-10h],eax"
"	      004b5c64    mov eax,[ebp-10h]"
"	      004b5c67    mov [ebp-0Ch],eax"
"	      004b5c6a    cmp dword ptr [ebp-0Ch],0"
"	      004b5c6e    je near ptr 004B5CCEh"
"	      004b5c74    mov eax,[ebp-0Ch]"
"	      004b5c77    cmp dword ptr [eax+8],0"
"	      004b5c7b    je near ptr 004B5CAEh"
"	      004b5c81    mov eax,[ebp-0Ch]"
"	      004b5c84    mov eax,[eax]"
"	      004b5c86    mov [ebp-14h],eax"
"	      004b5c89    mov eax,[ebp-14h]"
"	      004b5c8c    mov [ebp-18h],eax"
"	      004b5c8f    mov eax,[ebp-18h]"
"	      004b5c92    push eax"
"	      004b5c93    call 0056A740h"
"	      004b5c98    add esp,4"
"	      004b5c9b    mov eax,[ebp-0Ch]"
"	      004b5c9e    mov dword ptr [eax+8],0"
"	      004b5ca5    mov eax,[ebp-0Ch]"
"	      004b5ca8    mov dword ptr [eax],0"
"	      004b5cae    jmp near ptr 004B5CB3h"
"	      004b5cb3    jmp near ptr 004B5CB8h"
"	      004b5cb8    mov eax,[ebp-0Ch]"
"	      004b5cbb    push eax"
"	      004b5cbc    call 0056A740h"
"	      004b5cc1    add esp,4"
"	      004b5cc4    jmp near ptr 004B5CC9h"
"	      004b5cc9    jmp near ptr 004B5CCEh"
"	      004b5cce    jmp near ptr 004B5CD3h"
"	      004b5cd3    jmp near ptr 004B5CD8h"
"	      004b5cd8    mov eax,[ebp+0Ch]"
"	      004b5cdb    mov eax,[eax+4]"
"	      004b5cde    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      004b5ce2    je near ptr 004B5D02h"
"	      004b5ce8    mov eax,[ebp+0Ch]"
"	      004b5ceb    mov eax,[eax+4]"
"	      004b5cee    mov ecx,[ebp-2Ch]"
"	      004b5cf1    mov [ecx+4],eax"
"	      004b5cf4    mov eax,[ebp-2Ch]"
"	      004b5cf7    mov eax,[eax+4]"
"	      004b5cfa    inc dword ptr [eax+0Ch]"
"	      004b5cfd    jmp near ptr 004B5DF5h"
"	      004b5d02    push 10h"
"	      004b5d04    call 0056A600h"
"	      004b5d09    add esp,4"
"	      004b5d0c    mov [ebp-8],eax"
"	      004b5d0f    cmp dword ptr [ebp-8],0"
"	      004b5d13    je near ptr 004B5DEBh"
"	      004b5d19    jmp near ptr 004B5D1Eh"
"	      004b5d1e    mov eax,[ebp+0Ch]"
"	      004b5d21    mov eax,[eax+4]"
"	      004b5d24    mov eax,[eax+4]"
"	      004b5d27    mov [ebp-28h],eax"
"	      004b5d2a    mov eax,[ebp-28h]"
"	      004b5d2d    mov ecx,[ebp-8]"
"	      004b5d30    mov [ecx+4],eax"
"	      004b5d33    mov eax,[ebp-8]"
"	      004b5d36    mov eax,[eax+4]"
"	      004b5d39    mov ecx,[ebp-8]"
"	      004b5d3c    mov [ecx+8],eax"
"	      004b5d3f    mov eax,[ebp-8]"
"	      004b5d42    cmp dword ptr [eax+8],0"
"	      004b5d46    je near ptr 004B5DC5h"
"	      004b5d4c    mov eax,[ebp-8]"
"	      004b5d4f    mov eax,[eax+8]"
"	      004b5d52    push eax"
"	      004b5d53    call 0056A600h"
"	      004b5d58    add esp,4"
"	      004b5d5b    mov ecx,[ebp-8]"
"	      004b5d5e    mov [ecx],eax"
"	      004b5d60    jmp near ptr 004B5D65h"
"	      004b5d65    mov eax,[ebp+0Ch]"
"	      004b5d68    mov eax,[eax+4]"
"	      004b5d6b    cmp dword ptr [eax+4],0"
"	      004b5d6f    je near ptr 004B5D8Ah"
"	      004b5d75    mov eax,[ebp+0Ch]"
"	      004b5d78    mov eax,[eax+4]"
"	      004b5d7b    mov eax,[eax]"
"	      004b5d7d    mov [ebp-1Ch],eax"
"	      004b5d80    jmp near ptr 004B5D96h"
"	      004b5d85    jmp near ptr 004B5D96h"
"	      004b5d8a    mov dword ptr [ebp-1Ch],0"
"	      004b5d91    jmp near ptr 004B5D96h"
"	      004b5d96    mov eax,[ebp-8]"
"	      004b5d99    mov eax,[eax+4]"
"	      004b5d9c    mov [ebp-20h],eax"
"	      004b5d9f    mov eax,[ebp-8]"
"	      004b5da2    mov eax,[eax]"
"	      004b5da4    mov [ebp-24h],eax"
"	      004b5da7    mov eax,[ebp-20h]"
"	      004b5daa    push eax"
"	      004b5dab    mov eax,[ebp-1Ch]"
"	      004b5dae    push eax"
"	      004b5daf    mov eax,[ebp-24h]"
"	      004b5db2    push eax"
"	      004b5db3    call 0056A800h"
"	      004b5db8    add esp,0Ch"
"	      004b5dbb    jmp near ptr 004B5DC0h"
"	      004b5dc0    jmp near ptr 004B5DCEh"
"	      004b5dc5    mov eax,[ebp-8]"
"	      004b5dc8    mov dword ptr [eax],0"
"	      004b5dce    mov eax,[ebp-8]"
"	      004b5dd1    mov dword ptr [eax+0Ch],1"
"	      004b5dd8    jmp near ptr 004B5DDDh"
"	      004b5ddd    mov eax,[ebp-8]"
"	      004b5de0    mov ecx,[ebp-2Ch]"
"	      004b5de3    mov [ecx+4],eax"
"	      004b5de6    jmp near ptr 004B5DF5h"
"	      004b5deb    mov eax,[ebp-2Ch]"
"	      004b5dee    mov dword ptr [eax+4],0"
"	      004b5df5    jmp near ptr 004B5DFAh"
);
// LINE 2450:
	asm( 
"	      004b5dfa    push 1"
"	      004b5dfc    push 1"
"	      004b5dfe    mov eax,[ebp-30h]"
"	      004b5e01    mov eax,[eax]"
"	      004b5e03    mov ecx,[ebp-30h]"
"	      004b5e06    call dword ptr [eax+30h]"
);
// LINE 2451:
	asm( 
"	      004b5e09    mov eax,1"
"	      004b5e0e    jmp near ptr 004B5E1Ah"
);
// LINE 2453:
	asm( 
"	      004b5e13    xor eax,eax"
"	      004b5e15    jmp near ptr 004B5E1Ah"
);
// LINE 2454:
	asm( 
"	      004b5e1a    pop edi"
"	      004b5e1b    pop esi"
"	      004b5e1c    pop ebx"
"	      004b5e1d    leave"
"	      004b5e1e    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b5e21
int32_t ListBoxWindow::GetStringAddressFromIndex(long, class basic_string<char>*&) {
// LINE 2464:
	asm( 
"	      004b5e21    push ebp"
"	      004b5e22    mov ebp,esp"
"	      004b5e24    sub esp,1Ch"
"	      004b5e27    push ebx"
"	      004b5e28    push esi"
"	      004b5e29    push edi"
"	      004b5e2a    mov [ebp-1Ch],ecx"
);
// LINE 2466:
	asm( 
"	      004b5e2d    jmp near ptr 004B5E32h"
"	      004b5e32    mov eax,[ebp-1Ch]"
"	      004b5e35    mov eax,[eax+78h]"
"	      004b5e38    mov [ebp-0Ch],eax"
);
// LINE 2468:
	asm( 
"	      004b5e3b    mov eax,[ebp-0Ch]"
"	      004b5e3e    dec eax"
"	      004b5e3f    cmp eax,[ebp+8]"
"	      004b5e42    jge near ptr 004B5E4Fh"
);
// LINE 2469:
	asm( 
"	      004b5e48    xor eax,eax"
"	      004b5e4a    jmp near ptr 004B5ED5h"
);
// LINE 2471:
	asm( 
"	      004b5e4f    mov eax,[ebp-1Ch]"
"	      004b5e52    mov eax,[eax+74h]"
"	      004b5e55    mov eax,[eax]"
"	      004b5e57    mov [ebp-14h],eax"
"	      004b5e5a    mov eax,[ebp-14h]"
"	      004b5e5d    mov [ebp-4],eax"
"	      004b5e60    jmp near ptr 004B5E65h"
"	      004b5e65    jmp near ptr 004B5E6Ah"
);
// LINE 2473:
	asm( 
"	      004b5e6a    mov dword ptr [ebp-8],0"
"	      004b5e71    jmp near ptr 004B5E79h"
"	      004b5e76    inc dword ptr [ebp-8]"
"	      004b5e79    mov eax,[ebp-8]"
"	      004b5e7c    cmp [ebp-0Ch],eax"
"	      004b5e7f    jle near ptr 004B5ECEh"
);
// LINE 2474:
	asm( 
"	      004b5e85    mov eax,[ebp+8]"
"	      004b5e88    cmp [ebp-8],eax"
"	      004b5e8b    jne near ptr 004B5EABh"
);
// LINE 2477:
	asm( 
"	      004b5e91    jmp near ptr 004B5E96h"
"	      004b5e96    mov eax,[ebp-4]"
"	      004b5e99    add eax,8"
"	      004b5e9c    mov ecx,[ebp+0Ch]"
"	      004b5e9f    mov [ecx],eax"
);
// LINE 2478:
	asm( 
"	      004b5ea1    mov eax,1"
"	      004b5ea6    jmp near ptr 004B5ED5h"
);
// LINE 2480:
	asm( 
"	      004b5eab    mov eax,[ebp-4]"
"	      004b5eae    mov [ebp-18h],eax"
"	      004b5eb1    mov eax,[ebp-4]"
"	      004b5eb4    mov eax,[eax]"
"	      004b5eb6    mov [ebp-4],eax"
"	      004b5eb9    jmp near ptr 004B5EBEh"
"	      004b5ebe    mov eax,[ebp-18h]"
"	      004b5ec1    mov [ebp-10h],eax"
"	      004b5ec4    jmp near ptr 004B5EC9h"
);
// LINE 2481:
	asm( 
"	      004b5ec9    jmp near ptr 004B5E76h"
);
// LINE 2482:
	asm( 
"	      004b5ece    xor eax,eax"
"	      004b5ed0    jmp near ptr 004B5ED5h"
);
// LINE 2483:
	asm( 
"	      004b5ed5    pop edi"
"	      004b5ed6    pop esi"
"	      004b5ed7    pop ebx"
"	      004b5ed8    leave"
"	      004b5ed9    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b5edc
int32_t ListBoxWindow::GetStringFromIndex(long, class basic_string<char>&) {
// LINE 2495:
	asm( 
"	      004b5edc    push ebp"
"	      004b5edd    mov ebp,esp"
"	      004b5edf    sub esp,30h"
"	      004b5ee2    push ebx"
"	      004b5ee3    push esi"
"	      004b5ee4    push edi"
"	      004b5ee5    mov [ebp-30h],ecx"
);
// LINE 2498:
	asm( 
"	      004b5ee8    lea eax,[ebp-4]"
"	      004b5eeb    push eax"
"	      004b5eec    mov eax,[ebp+8]"
"	      004b5eef    push eax"
"	      004b5ef0    mov eax,[ebp-30h]"
"	      004b5ef3    mov eax,[eax]"
"	      004b5ef5    mov ecx,[ebp-30h]"
"	      004b5ef8    call dword ptr [eax+138h]"
"	      004b5efe    test eax,eax"
"	      004b5f00    je near ptr 004B60D0h"
"	      004b5f06    mov eax,[ebp-4]"
"	      004b5f09    mov [ebp-2Ch],eax"
);
// LINE 2499:
	asm( 
"	      004b5f0c    mov eax,[ebp+0Ch]"
"	      004b5f0f    cmp [ebp-2Ch],eax"
"	      004b5f12    je near ptr 004B60CBh"
"	      004b5f18    mov eax,[ebp+0Ch]"
"	      004b5f1b    mov eax,[eax+4]"
"	      004b5f1e    dec dword ptr [eax+0Ch]"
"	      004b5f21    mov eax,[ebp+0Ch]"
"	      004b5f24    mov eax,[eax+4]"
"	      004b5f27    cmp dword ptr [eax+0Ch],0"
"	      004b5f2b    jne near ptr 004B5FA4h"
"	      004b5f31    mov eax,[ebp+0Ch]"
"	      004b5f34    mov eax,[eax+4]"
"	      004b5f37    mov [ebp-10h],eax"
"	      004b5f3a    mov eax,[ebp-10h]"
"	      004b5f3d    mov [ebp-0Ch],eax"
"	      004b5f40    cmp dword ptr [ebp-0Ch],0"
"	      004b5f44    je near ptr 004B5FA4h"
"	      004b5f4a    mov eax,[ebp-0Ch]"
"	      004b5f4d    cmp dword ptr [eax+8],0"
"	      004b5f51    je near ptr 004B5F84h"
"	      004b5f57    mov eax,[ebp-0Ch]"
"	      004b5f5a    mov eax,[eax]"
"	      004b5f5c    mov [ebp-14h],eax"
"	      004b5f5f    mov eax,[ebp-14h]"
"	      004b5f62    mov [ebp-18h],eax"
"	      004b5f65    mov eax,[ebp-18h]"
"	      004b5f68    push eax"
"	      004b5f69    call 0056A740h"
"	      004b5f6e    add esp,4"
"	      004b5f71    mov eax,[ebp-0Ch]"
"	      004b5f74    mov dword ptr [eax+8],0"
"	      004b5f7b    mov eax,[ebp-0Ch]"
"	      004b5f7e    mov dword ptr [eax],0"
"	      004b5f84    jmp near ptr 004B5F89h"
"	      004b5f89    jmp near ptr 004B5F8Eh"
"	      004b5f8e    mov eax,[ebp-0Ch]"
"	      004b5f91    push eax"
"	      004b5f92    call 0056A740h"
"	      004b5f97    add esp,4"
"	      004b5f9a    jmp near ptr 004B5F9Fh"
"	      004b5f9f    jmp near ptr 004B5FA4h"
"	      004b5fa4    jmp near ptr 004B5FA9h"
"	      004b5fa9    jmp near ptr 004B5FAEh"
"	      004b5fae    mov eax,[ebp-2Ch]"
"	      004b5fb1    mov eax,[eax+4]"
"	      004b5fb4    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      004b5fb8    je near ptr 004B5FD8h"
"	      004b5fbe    mov eax,[ebp-2Ch]"
"	      004b5fc1    mov eax,[eax+4]"
"	      004b5fc4    mov ecx,[ebp+0Ch]"
"	      004b5fc7    mov [ecx+4],eax"
"	      004b5fca    mov eax,[ebp+0Ch]"
"	      004b5fcd    mov eax,[eax+4]"
"	      004b5fd0    inc dword ptr [eax+0Ch]"
"	      004b5fd3    jmp near ptr 004B60CBh"
"	      004b5fd8    push 10h"
"	      004b5fda    call 0056A600h"
"	      004b5fdf    add esp,4"
"	      004b5fe2    mov [ebp-8],eax"
"	      004b5fe5    cmp dword ptr [ebp-8],0"
"	      004b5fe9    je near ptr 004B60C1h"
"	      004b5fef    jmp near ptr 004B5FF4h"
"	      004b5ff4    mov eax,[ebp-2Ch]"
"	      004b5ff7    mov eax,[eax+4]"
"	      004b5ffa    mov eax,[eax+4]"
"	      004b5ffd    mov [ebp-28h],eax"
"	      004b6000    mov eax,[ebp-28h]"
"	      004b6003    mov ecx,[ebp-8]"
"	      004b6006    mov [ecx+4],eax"
"	      004b6009    mov eax,[ebp-8]"
"	      004b600c    mov eax,[eax+4]"
"	      004b600f    mov ecx,[ebp-8]"
"	      004b6012    mov [ecx+8],eax"
"	      004b6015    mov eax,[ebp-8]"
"	      004b6018    cmp dword ptr [eax+8],0"
"	      004b601c    je near ptr 004B609Bh"
"	      004b6022    mov eax,[ebp-8]"
"	      004b6025    mov eax,[eax+8]"
"	      004b6028    push eax"
"	      004b6029    call 0056A600h"
"	      004b602e    add esp,4"
"	      004b6031    mov ecx,[ebp-8]"
"	      004b6034    mov [ecx],eax"
"	      004b6036    jmp near ptr 004B603Bh"
"	      004b603b    mov eax,[ebp-2Ch]"
"	      004b603e    mov eax,[eax+4]"
"	      004b6041    cmp dword ptr [eax+4],0"
"	      004b6045    je near ptr 004B6060h"
"	      004b604b    mov eax,[ebp-2Ch]"
"	      004b604e    mov eax,[eax+4]"
"	      004b6051    mov eax,[eax]"
"	      004b6053    mov [ebp-1Ch],eax"
"	      004b6056    jmp near ptr 004B606Ch"
"	      004b605b    jmp near ptr 004B606Ch"
"	      004b6060    mov dword ptr [ebp-1Ch],0"
"	      004b6067    jmp near ptr 004B606Ch"
"	      004b606c    mov eax,[ebp-8]"
"	      004b606f    mov eax,[eax+4]"
"	      004b6072    mov [ebp-20h],eax"
"	      004b6075    mov eax,[ebp-8]"
"	      004b6078    mov eax,[eax]"
"	      004b607a    mov [ebp-24h],eax"
"	      004b607d    mov eax,[ebp-20h]"
"	      004b6080    push eax"
"	      004b6081    mov eax,[ebp-1Ch]"
"	      004b6084    push eax"
"	      004b6085    mov eax,[ebp-24h]"
"	      004b6088    push eax"
"	      004b6089    call 0056A800h"
"	      004b608e    add esp,0Ch"
"	      004b6091    jmp near ptr 004B6096h"
"	      004b6096    jmp near ptr 004B60A4h"
"	      004b609b    mov eax,[ebp-8]"
"	      004b609e    mov dword ptr [eax],0"
"	      004b60a4    mov eax,[ebp-8]"
"	      004b60a7    mov dword ptr [eax+0Ch],1"
"	      004b60ae    jmp near ptr 004B60B3h"
"	      004b60b3    mov eax,[ebp-8]"
"	      004b60b6    mov ecx,[ebp+0Ch]"
"	      004b60b9    mov [ecx+4],eax"
"	      004b60bc    jmp near ptr 004B60CBh"
"	      004b60c1    mov eax,[ebp+0Ch]"
"	      004b60c4    mov dword ptr [eax+4],0"
"	      004b60cb    jmp near ptr 004B60D0h"
);
// LINE 2501:
	asm( 
"	      004b60d0    xor eax,eax"
"	      004b60d2    jmp near ptr 004B60D7h"
);
// LINE 2502:
	asm( 
"	      004b60d7    pop edi"
"	      004b60d8    pop esi"
"	      004b60d9    pop ebx"
"	      004b60da    leave"
"	      004b60db    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b60de
int32_t ListBoxWindow::GetIndexFromString(long&, class basic_string<char>&) {
// LINE 2510:
	asm( 
"	      004b60de    push ebp"
"	      004b60df    mov ebp,esp"
"	      004b60e1    sub esp,38h"
"	      004b60e4    push ebx"
"	      004b60e5    push esi"
"	      004b60e6    push edi"
"	      004b60e7    mov [ebp-38h],ecx"
);
// LINE 2511:
	asm( 
"	      004b60ea    mov dword ptr [ebp-8],0"
);
// LINE 2512:
	asm( 
"	      004b60f1    mov eax,[ebp-38h]"
"	      004b60f4    mov eax,[eax+74h]"
"	      004b60f7    mov eax,[eax]"
"	      004b60f9    mov [ebp-30h],eax"
"	      004b60fc    mov eax,[ebp-30h]"
"	      004b60ff    mov [ebp-4],eax"
"	      004b6102    jmp near ptr 004B6107h"
"	      004b6107    jmp near ptr 004B610Ch"
);
// LINE 2514:
	asm( 
"	      004b610c    mov eax,[ebp-38h]"
"	      004b610f    mov eax,[eax+74h]"
"	      004b6112    mov [ebp-24h],eax"
"	      004b6115    mov eax,[ebp-24h]"
"	      004b6118    mov [ebp-0Ch],eax"
"	      004b611b    jmp near ptr 004B6120h"
"	      004b6120    jmp near ptr 004B6125h"
"	      004b6125    mov eax,[ebp-0Ch]"
"	      004b6128    cmp [ebp-4],eax"
"	      004b612b    jne near ptr 004B613Bh"
"	      004b6131    jmp near ptr 004B614Fh"
"	      004b6136    jmp near ptr 004B613Bh"
"	      004b613b    jmp near ptr 004B614Ah"
"	      004b6140    cmp dword ptr [ebp-28h],0"
"	      004b6144    jne near ptr 004B614Fh"
"	      004b614a    jmp near ptr 004B6154h"
"	      004b614f    jmp near ptr 004B6258h"
"	      004b6154    jmp near ptr 004B6163h"
"	      004b6159    cmp dword ptr [ebp-2Ch],0"
"	      004b615d    je near ptr 004B6258h"
);
// LINE 2515:
	asm( 
"	      004b6163    jmp near ptr 004B6168h"
"	      004b6168    mov eax,[ebp-4]"
"	      004b616b    add eax,8"
"	      004b616e    mov [ebp-1Ch],eax"
"	      004b6171    jmp near ptr 004B6176h"
"	      004b6176    mov eax,[ebp-1Ch]"
"	      004b6179    mov eax,[eax+4]"
"	      004b617c    cmp dword ptr [eax+4],0FFFFFFFFh"
"	      004b6180    jae near ptr 004B619Ch"
"	      004b6186    jmp near ptr 004B618Bh"
"	      004b618b    mov eax,[ebp-1Ch]"
"	      004b618e    mov eax,[eax+4]"
"	      004b6191    mov eax,[eax+4]"
"	      004b6194    mov [ebp-14h],eax"
"	      004b6197    jmp near ptr 004B61A3h"
"	      004b619c    mov dword ptr [ebp-14h],0FFFFFFFFh"
"	      004b61a3    jmp near ptr 004B61A8h"
"	      004b61a8    jmp near ptr 004B61ADh"
"	      004b61ad    mov eax,[ebp+0Ch]"
"	      004b61b0    mov eax,[eax+4]"
"	      004b61b3    cmp dword ptr [eax+4],0"
"	      004b61b7    je near ptr 004B61D2h"
"	      004b61bd    mov eax,[ebp+0Ch]"
"	      004b61c0    mov eax,[eax+4]"
"	      004b61c3    mov eax,[eax]"
"	      004b61c5    mov [ebp-18h],eax"
"	      004b61c8    jmp near ptr 004B61DEh"
"	      004b61cd    jmp near ptr 004B61DEh"
"	      004b61d2    mov dword ptr [ebp-18h],0"
"	      004b61d9    jmp near ptr 004B61DEh"
"	      004b61de    jmp near ptr 004B61E3h"
"	      004b61e3    mov eax,[ebp+0Ch]"
"	      004b61e6    mov eax,[eax+4]"
"	      004b61e9    mov eax,[eax+4]"
"	      004b61ec    push eax"
"	      004b61ed    mov eax,[ebp-14h]"
"	      004b61f0    push eax"
"	      004b61f1    mov eax,[ebp-18h]"
"	      004b61f4    push eax"
"	      004b61f5    push 0"
"	      004b61f7    mov ecx,[ebp-1Ch]"
"	      004b61fa    call 00410C40h"
"	      004b61ff    test eax,eax"
"	      004b6201    jne near ptr 004B620Ch"
"	      004b6207    jmp near ptr 004B6211h"
"	      004b620c    jmp near ptr 004B6232h"
"	      004b6211    jmp near ptr 004B6220h"
"	      004b6216    cmp dword ptr [ebp-20h],0"
"	      004b621a    je near ptr 004B6232h"
);
// LINE 2516:
	asm( 
"	      004b6220    mov eax,[ebp-8]"
"	      004b6223    mov ecx,[ebp+8]"
"	      004b6226    mov [ecx],eax"
);
// LINE 2517:
	asm( 
"	      004b6228    mov eax,1"
"	      004b622d    jmp near ptr 004B625Fh"
);
// LINE 2519:
	asm( 
"	      004b6232    mov eax,[ebp-4]"
"	      004b6235    mov [ebp-34h],eax"
"	      004b6238    mov eax,[ebp-4]"
"	      004b623b    mov eax,[eax]"
"	      004b623d    mov [ebp-4],eax"
"	      004b6240    jmp near ptr 004B6245h"
"	      004b6245    mov eax,[ebp-34h]"
"	      004b6248    mov [ebp-10h],eax"
"	      004b624b    jmp near ptr 004B6250h"
);
// LINE 2520:
	asm( 
"	      004b6250    inc dword ptr [ebp-8]"
);
// LINE 2521:
	asm( 
"	      004b6253    jmp near ptr 004B610Ch"
);
// LINE 2522:
	asm( 
"	      004b6258    xor eax,eax"
"	      004b625a    jmp near ptr 004B625Fh"
);
// LINE 2523:
	asm( 
"	      004b625f    pop edi"
"	      004b6260    pop esi"
"	      004b6261    pop ebx"
"	      004b6262    leave"
"	      004b6263    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b6266
int32_t ListBoxWindow::RemoveStringAtIndex(long) {
// LINE 2535:
	asm( 
"	      004b6266    push ebp"
"	      004b6267    mov ebp,esp"
"	      004b6269    sub esp,58h"
"	      004b626c    push ebx"
"	      004b626d    push esi"
"	      004b626e    push edi"
"	      004b626f    mov [ebp-58h],ecx"
);
// LINE 2536:
	asm( 
"	      004b6272    mov eax,[ebp-58h]"
"	      004b6275    mov eax,[eax]"
"	      004b6277    mov ecx,[ebp-58h]"
"	      004b627a    call dword ptr [eax+114h]"
"	      004b6280    mov [ebp-4],eax"
);
// LINE 2538:
	asm( 
"	      004b6283    cmp dword ptr [ebp-4],0"
"	      004b6287    jne near ptr 004B6294h"
);
// LINE 2539:
	asm( 
"	      004b628d    xor eax,eax"
"	      004b628f    jmp near ptr 004B657Eh"
);
// LINE 2541:
	asm( 
"	      004b6294    cmp dword ptr [ebp+8],0"
"	      004b6298    jne near ptr 004B631Eh"
);
// LINE 2542:
	asm( 
"	      004b629e    mov eax,[ebp-58h]"
"	      004b62a1    mov eax,[eax+74h]"
"	      004b62a4    mov eax,[eax]"
"	      004b62a6    mov [ebp-28h],eax"
"	      004b62a9    mov eax,[ebp-28h]"
"	      004b62ac    mov [ebp-24h],eax"
"	      004b62af    jmp near ptr 004B62B4h"
"	      004b62b4    jmp near ptr 004B62B9h"
"	      004b62b9    mov eax,[ebp-24h]"
"	      004b62bc    mov [ebp-2Ch],eax"
"	      004b62bf    mov eax,[ebp-2Ch]"
"	      004b62c2    mov eax,[eax]"
"	      004b62c4    mov ecx,[ebp-2Ch]"
"	      004b62c7    mov ecx,[ecx+4]"
"	      004b62ca    mov [ecx],eax"
"	      004b62cc    mov eax,[ebp-2Ch]"
"	      004b62cf    mov eax,[eax+4]"
"	      004b62d2    mov ecx,[ebp-2Ch]"
"	      004b62d5    mov ecx,[ecx]"
"	      004b62d7    mov [ecx+4],eax"
"	      004b62da    jmp near ptr 004B62DFh"
"	      004b62df    push 0"
"	      004b62e1    mov ecx,[ebp-2Ch]"
"	      004b62e4    add ecx,8"
"	      004b62e7    call 0041DEF0h"
"	      004b62ec    jmp near ptr 004B62F1h"
"	      004b62f1    mov eax,ds:[59856Ch]"
"	      004b62f6    mov ecx,[ebp-2Ch]"
"	      004b62f9    mov [ecx],eax"
"	      004b62fb    mov eax,[ebp-2Ch]"
"	      004b62fe    mov ds:[59856Ch],eax"
"	      004b6303    jmp near ptr 004B6308h"
"	      004b6308    mov eax,[ebp-58h]"
"	      004b630b    add dword ptr [eax+78h],0FFFFFFFFh"
"	      004b630f    jmp near ptr 004B6314h"
"	      004b6314    jmp near ptr 004B6319h"
);
// LINE 2544:
	asm( 
"	      004b6319    jmp near ptr 004B6574h"
);
// LINE 2545:
	asm( 
"	      004b631e    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      004b6322    je near ptr 004B6334h"
"	      004b6328    mov eax,[ebp+8]"
"	      004b632b    cmp [ebp-4],eax"
"	      004b632e    jg near ptr 004B63D7h"
);
// LINE 2547:
	asm( 
"	      004b6334    mov eax,[ebp-58h]"
"	      004b6337    mov eax,[eax+74h]"
"	      004b633a    mov [ebp-38h],eax"
"	      004b633d    mov eax,[ebp-38h]"
"	      004b6340    mov [ebp-34h],eax"
"	      004b6343    jmp near ptr 004B6348h"
"	      004b6348    jmp near ptr 004B634Dh"
"	      004b634d    mov eax,[ebp-34h]"
"	      004b6350    mov eax,[eax+4]"
"	      004b6353    mov [ebp-34h],eax"
"	      004b6356    jmp near ptr 004B635Bh"
"	      004b635b    mov eax,[ebp-34h]"
"	      004b635e    mov [ebp-3Ch],eax"
"	      004b6361    mov eax,[ebp-3Ch]"
"	      004b6364    mov eax,[eax]"
"	      004b6366    mov ecx,[ebp-3Ch]"
"	      004b6369    mov ecx,[ecx+4]"
"	      004b636c    mov [ecx],eax"
"	      004b636e    mov eax,[ebp-3Ch]"
"	      004b6371    mov eax,[eax+4]"
"	      004b6374    mov ecx,[ebp-3Ch]"
"	      004b6377    mov ecx,[ecx]"
"	      004b6379    mov [ecx+4],eax"
"	      004b637c    jmp near ptr 004B6381h"
"	      004b6381    mov ecx,[ebp-3Ch]"
"	      004b6384    add ecx,8"
"	      004b6387    call 00412130h"
"	      004b638c    jmp near ptr 004B63A0h"
"	      004b6391    mov eax,[ebp-3Ch]"
"	      004b6394    add eax,8"
"	      004b6397    push eax"
"	      004b6398    call 0056A740h"
"	      004b639d    add esp,4"
"	      004b63a0    jmp near ptr 004B63A5h"
"	      004b63a5    jmp near ptr 004B63AAh"
"	      004b63aa    mov eax,ds:[59856Ch]"
"	      004b63af    mov ecx,[ebp-3Ch]"
"	      004b63b2    mov [ecx],eax"
"	      004b63b4    mov eax,[ebp-3Ch]"
"	      004b63b7    mov ds:[59856Ch],eax"
"	      004b63bc    jmp near ptr 004B63C1h"
"	      004b63c1    mov eax,[ebp-58h]"
"	      004b63c4    add dword ptr [eax+78h],0FFFFFFFFh"
"	      004b63c8    jmp near ptr 004B63CDh"
"	      004b63cd    jmp near ptr 004B63D2h"
);
// LINE 2549:
	asm( 
"	      004b63d2    jmp near ptr 004B6574h"
);
// LINE 2550:
	asm( 
"	      004b63d7    mov dword ptr [ebp-0Ch],0"
);
// LINE 2551:
	asm( 
"	      004b63de    mov eax,[ebp-58h]"
"	      004b63e1    mov eax,[eax+74h]"
"	      004b63e4    mov eax,[eax]"
"	      004b63e6    mov [ebp-30h],eax"
"	      004b63e9    mov eax,[ebp-30h]"
"	      004b63ec    mov [ebp-8],eax"
"	      004b63ef    jmp near ptr 004B63F4h"
"	      004b63f4    jmp near ptr 004B63F9h"
);
// LINE 2553:
	asm( 
"	      004b63f9    mov eax,[ebp-58h]"
"	      004b63fc    mov eax,[eax+74h]"
"	      004b63ff    mov [ebp-18h],eax"
"	      004b6402    mov eax,[ebp-18h]"
"	      004b6405    mov [ebp-10h],eax"
"	      004b6408    jmp near ptr 004B640Dh"
"	      004b640d    jmp near ptr 004B6412h"
"	      004b6412    mov eax,[ebp-8]"
"	      004b6415    cmp [ebp-10h],eax"
"	      004b6418    jne near ptr 004B6428h"
"	      004b641e    jmp near ptr 004B643Ch"
"	      004b6423    jmp near ptr 004B6428h"
"	      004b6428    jmp near ptr 004B6437h"
"	      004b642d    cmp dword ptr [ebp-1Ch],0"
"	      004b6431    jne near ptr 004B643Ch"
"	      004b6437    jmp near ptr 004B6441h"
"	      004b643c    jmp near ptr 004B6574h"
"	      004b6441    jmp near ptr 004B6450h"
"	      004b6446    cmp dword ptr [ebp-20h],0"
"	      004b644a    je near ptr 004B6574h"
);
// LINE 2554:
	asm( 
"	      004b6450    mov eax,[ebp-0Ch]"
"	      004b6453    cmp [ebp+8],eax"
"	      004b6456    jne near ptr 004B654Eh"
"	      004b645c    mov eax,[ebp-8]"
"	      004b645f    mov [ebp-54h],eax"
);
// LINE 2555:
	asm( 
"	      004b6462    mov eax,[ebp-54h]"
"	      004b6465    mov eax,[eax]"
"	      004b6467    mov ecx,[ebp-54h]"
"	      004b646a    mov ecx,[ecx+4]"
"	      004b646d    mov [ecx],eax"
"	      004b646f    mov eax,[ebp-54h]"
"	      004b6472    mov eax,[eax+4]"
"	      004b6475    mov ecx,[ebp-54h]"
"	      004b6478    mov ecx,[ecx]"
"	      004b647a    mov [ecx+4],eax"
"	      004b647d    jmp near ptr 004B6482h"
"	      004b6482    mov eax,[ebp-54h]"
"	      004b6485    mov eax,[eax+0Ch]"
"	      004b6488    dec dword ptr [eax+0Ch]"
"	      004b648b    mov eax,[ebp-54h]"
"	      004b648e    mov eax,[eax+0Ch]"
"	      004b6491    cmp dword ptr [eax+0Ch],0"
"	      004b6495    jne near ptr 004B64D7h"
"	      004b649b    mov eax,[ebp-54h]"
"	      004b649e    mov eax,[eax+0Ch]"
"	      004b64a1    mov [ebp-50h],eax"
"	      004b64a4    mov eax,[ebp-50h]"
"	      004b64a7    mov [ebp-4Ch],eax"
"	      004b64aa    cmp dword ptr [ebp-4Ch],0"
"	      004b64ae    je near ptr 004B64D7h"
"	      004b64b4    mov ecx,[ebp-4Ch]"
"	      004b64b7    call 0041F4B0h"
"	      004b64bc    jmp near ptr 004B64C1h"
"	      004b64c1    mov eax,[ebp-4Ch]"
"	      004b64c4    push eax"
"	      004b64c5    call 0056A740h"
"	      004b64ca    add esp,4"
"	      004b64cd    jmp near ptr 004B64D2h"
"	      004b64d2    jmp near ptr 004B64D7h"
"	      004b64d7    jmp near ptr 004B64DCh"
"	      004b64dc    mov eax,[ebp-54h]"
"	      004b64df    cmp dword ptr [eax+8],0"
"	      004b64e3    je near ptr 004B6504h"
"	      004b64e9    mov eax,[ebp-54h]"
"	      004b64ec    mov eax,[eax+8]"
"	      004b64ef    mov [ebp-44h],eax"
"	      004b64f2    mov eax,[ebp-44h]"
"	      004b64f5    mov [ebp-48h],eax"
"	      004b64f8    mov eax,[ebp-48h]"
"	      004b64fb    push eax"
"	      004b64fc    call 0056A740h"
"	      004b6501    add esp,4"
"	      004b6504    jmp near ptr 004B6509h"
"	      004b6509    jmp near ptr 004B651Dh"
"	      004b650e    mov eax,[ebp-54h]"
"	      004b6511    add eax,8"
"	      004b6514    push eax"
"	      004b6515    call 0056A740h"
"	      004b651a    add esp,4"
"	      004b651d    jmp near ptr 004B6522h"
"	      004b6522    jmp near ptr 004B6527h"
"	      004b6527    mov eax,ds:[59856Ch]"
"	      004b652c    mov ecx,[ebp-54h]"
"	      004b652f    mov [ecx],eax"
"	      004b6531    mov eax,[ebp-54h]"
"	      004b6534    mov ds:[59856Ch],eax"
"	      004b6539    jmp near ptr 004B653Eh"
"	      004b653e    mov eax,[ebp-58h]"
"	      004b6541    dec dword ptr [eax+78h]"
"	      004b6544    jmp near ptr 004B6549h"
);
// LINE 2556:
	asm( 
"	      004b6549    jmp near ptr 004B6574h"
);
// LINE 2558:
	asm( 
"	      004b654e    mov eax,[ebp-8]"
"	      004b6551    mov [ebp-40h],eax"
"	      004b6554    mov eax,[ebp-8]"
"	      004b6557    mov eax,[eax]"
"	      004b6559    mov [ebp-8],eax"
"	      004b655c    jmp near ptr 004B6561h"
"	      004b6561    mov eax,[ebp-40h]"
"	      004b6564    mov [ebp-14h],eax"
"	      004b6567    jmp near ptr 004B656Ch"
);
// LINE 2559:
	asm( 
"	      004b656c    inc dword ptr [ebp-0Ch]"
);
// LINE 2560:
	asm( 
"	      004b656f    jmp near ptr 004B63F9h"
);
// LINE 2562:
	asm( 
"	      004b6574    mov eax,1"
"	      004b6579    jmp near ptr 004B657Eh"
);
// LINE 2563:
	asm( 
"	      004b657e    pop edi"
"	      004b657f    pop esi"
"	      004b6580    pop ebx"
"	      004b6581    leave"
"	      004b6582    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6585
int32_t ListBoxWindow::InsertStringAtIndex(long, class basic_string<char>&) {
// LINE 2580:
	asm( 
"	      004b6585    push ebp"
"	      004b6586    mov ebp,esp"
"	      004b6588    sub esp,0B4h"
"	      004b658e    push ebx"
"	      004b658f    push esi"
"	      004b6590    push edi"
"	      004b6591    mov [ebp-0B4h],ecx"
);
// LINE 2581:
	asm( 
"	      004b6597    mov eax,[ebp-0B4h]"
"	      004b659d    mov eax,[eax]"
"	      004b659f    mov ecx,[ebp-0B4h]"
"	      004b65a5    call dword ptr [eax+114h]"
"	      004b65ab    mov [ebp-4],eax"
);
// LINE 2584:
	asm( 
"	      004b65ae    cmp dword ptr [ebp+8],0"
"	      004b65b2    jne near ptr 004B6670h"
);
// LINE 2585:
	asm( 
"	      004b65b8    mov eax,[ebp-0B4h]"
"	      004b65be    mov eax,[eax+74h]"
"	      004b65c1    mov eax,[eax]"
"	      004b65c3    mov [ebp-34h],eax"
"	      004b65c6    mov eax,[ebp-34h]"
"	      004b65c9    mov [ebp-2Ch],eax"
"	      004b65cc    jmp near ptr 004B65D1h"
"	      004b65d1    jmp near ptr 004B65D6h"
"	      004b65d6    mov eax,[ebp-2Ch]"
"	      004b65d9    mov [ebp-40h],eax"
"	      004b65dc    mov ecx,[ebp-0B4h]"
"	      004b65e2    add ecx,74h"
"	      004b65e5    call 004399C0h"
"	      004b65ea    mov [ebp-38h],eax"
"	      004b65ed    jmp near ptr 004B65F2h"
"	      004b65f2    mov eax,[ebp-38h]"
"	      004b65f5    add eax,8"
"	      004b65f8    mov [ebp-3Ch],eax"
"	      004b65fb    jmp near ptr 004B6600h"
"	      004b6600    cmp dword ptr [ebp-3Ch],0"
"	      004b6604    je near ptr 004B661Fh"
"	      004b660a    push 0FFFFFFFFh"
"	      004b660c    push 0"
"	      004b660e    mov eax,[ebp+0Ch]"
"	      004b6611    push eax"
"	      004b6612    mov ecx,[ebp-3Ch]"
"	      004b6615    call 00411B80h"
"	      004b661a    jmp near ptr 004B661Fh"
"	      004b661f    jmp near ptr 004B6624h"
"	      004b6624    mov eax,[ebp-40h]"
"	      004b6627    mov ecx,[ebp-38h]"
"	      004b662a    mov [ecx],eax"
"	      004b662c    mov eax,[ebp-40h]"
"	      004b662f    mov eax,[eax+4]"
"	      004b6632    mov ecx,[ebp-38h]"
"	      004b6635    mov [ecx+4],eax"
"	      004b6638    mov eax,[ebp-38h]"
"	      004b663b    mov ecx,[ebp-40h]"
"	      004b663e    mov ecx,[ecx+4]"
"	      004b6641    mov [ecx],eax"
"	      004b6643    mov eax,[ebp-38h]"
"	      004b6646    mov ecx,[ebp-40h]"
"	      004b6649    mov [ecx+4],eax"
"	      004b664c    mov eax,[ebp-0B4h]"
"	      004b6652    add dword ptr [eax+78h],1"
"	      004b6656    mov eax,[ebp-38h]"
"	      004b6659    mov [ebp-30h],eax"
"	      004b665c    jmp near ptr 004B6661h"
"	      004b6661    jmp near ptr 004B6666h"
"	      004b6666    jmp near ptr 004B666Bh"
);
// LINE 2587:
	asm( 
"	      004b666b    jmp near ptr 004B6A9Eh"
);
// LINE 2588:
	asm( 
"	      004b6670    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      004b6674    je near ptr 004B6686h"
"	      004b667a    mov eax,[ebp-4]"
"	      004b667d    cmp [ebp+8],eax"
"	      004b6680    jl near ptr 004B673Ch"
);
// LINE 2590:
	asm( 
"	      004b6686    mov eax,[ebp-0B4h]"
"	      004b668c    mov eax,[eax+74h]"
"	      004b668f    mov [ebp-4Ch],eax"
"	      004b6692    mov eax,[ebp-4Ch]"
"	      004b6695    mov [ebp-44h],eax"
"	      004b6698    jmp near ptr 004B669Dh"
"	      004b669d    jmp near ptr 004B66A2h"
"	      004b66a2    mov eax,[ebp-44h]"
"	      004b66a5    mov [ebp-58h],eax"
"	      004b66a8    mov ecx,[ebp-0B4h]"
"	      004b66ae    add ecx,74h"
"	      004b66b1    call 004399C0h"
"	      004b66b6    mov [ebp-50h],eax"
"	      004b66b9    jmp near ptr 004B66BEh"
"	      004b66be    mov eax,[ebp-50h]"
"	      004b66c1    add eax,8"
"	      004b66c4    mov [ebp-54h],eax"
"	      004b66c7    jmp near ptr 004B66CCh"
"	      004b66cc    cmp dword ptr [ebp-54h],0"
"	      004b66d0    je near ptr 004B66EBh"
"	      004b66d6    push 0FFFFFFFFh"
"	      004b66d8    push 0"
"	      004b66da    mov eax,[ebp+0Ch]"
"	      004b66dd    push eax"
"	      004b66de    mov ecx,[ebp-54h]"
"	      004b66e1    call 00411B80h"
"	      004b66e6    jmp near ptr 004B66EBh"
"	      004b66eb    jmp near ptr 004B66F0h"
"	      004b66f0    mov eax,[ebp-58h]"
"	      004b66f3    mov ecx,[ebp-50h]"
"	      004b66f6    mov [ecx],eax"
"	      004b66f8    mov eax,[ebp-58h]"
"	      004b66fb    mov eax,[eax+4]"
"	      004b66fe    mov ecx,[ebp-50h]"
"	      004b6701    mov [ecx+4],eax"
"	      004b6704    mov eax,[ebp-50h]"
"	      004b6707    mov ecx,[ebp-58h]"
"	      004b670a    mov ecx,[ecx+4]"
"	      004b670d    mov [ecx],eax"
"	      004b670f    mov eax,[ebp-50h]"
"	      004b6712    mov ecx,[ebp-58h]"
"	      004b6715    mov [ecx+4],eax"
"	      004b6718    mov eax,[ebp-0B4h]"
"	      004b671e    add dword ptr [eax+78h],1"
"	      004b6722    mov eax,[ebp-50h]"
"	      004b6725    mov [ebp-48h],eax"
"	      004b6728    jmp near ptr 004B672Dh"
"	      004b672d    jmp near ptr 004B6732h"
"	      004b6732    jmp near ptr 004B6737h"
);
// LINE 2592:
	asm( 
"	      004b6737    jmp near ptr 004B6A9Eh"
);
// LINE 2593:
	asm( 
"	      004b673c    mov dword ptr [ebp-0Ch],0"
);
// LINE 2594:
	asm( 
"	      004b6743    mov eax,[ebp-0B4h]"
"	      004b6749    mov eax,[eax+74h]"
"	      004b674c    mov eax,[eax]"
"	      004b674e    mov [ebp-28h],eax"
"	      004b6751    mov eax,[ebp-28h]"
"	      004b6754    mov [ebp-8],eax"
"	      004b6757    jmp near ptr 004B675Ch"
"	      004b675c    jmp near ptr 004B6761h"
);
// LINE 2596:
	asm( 
"	      004b6761    mov eax,[ebp-0B4h]"
"	      004b6767    mov eax,[eax+74h]"
"	      004b676a    mov [ebp-1Ch],eax"
"	      004b676d    mov eax,[ebp-1Ch]"
"	      004b6770    mov [ebp-10h],eax"
"	      004b6773    jmp near ptr 004B6778h"
"	      004b6778    jmp near ptr 004B677Dh"
"	      004b677d    mov eax,[ebp-10h]"
"	      004b6780    cmp [ebp-8],eax"
"	      004b6783    jne near ptr 004B6793h"
"	      004b6789    jmp near ptr 004B67A7h"
"	      004b678e    jmp near ptr 004B6793h"
"	      004b6793    jmp near ptr 004B67A2h"
"	      004b6798    cmp dword ptr [ebp-20h],0"
"	      004b679c    jne near ptr 004B67A7h"
"	      004b67a2    jmp near ptr 004B67ACh"
"	      004b67a7    jmp near ptr 004B6A9Eh"
"	      004b67ac    jmp near ptr 004B67BBh"
"	      004b67b1    cmp dword ptr [ebp-24h],0"
"	      004b67b5    je near ptr 004B6A9Eh"
);
// LINE 2597:
	asm( 
"	      004b67bb    mov eax,[ebp-0Ch]"
"	      004b67be    cmp [ebp+8],eax"
"	      004b67c1    jne near ptr 004B6A78h"
"	      004b67c7    mov eax,[ebp-8]"
"	      004b67ca    mov [ebp-0B0h],eax"
);
// LINE 2598:
	asm( 
"	      004b67d0    mov eax,ds:[59856Ch]"
"	      004b67d5    mov [ebp-68h],eax"
"	      004b67d8    cmp dword ptr ds:[59856Ch],0"
"	      004b67df    je near ptr 004B67FFh"
"	      004b67e5    mov eax,ds:[59856Ch]"
"	      004b67ea    mov eax,[eax]"
"	      004b67ec    mov ds:[59856Ch],eax"
"	      004b67f1    mov eax,[ebp-68h]"
"	      004b67f4    mov [ebp-0ACh],eax"
"	      004b67fa    jmp near ptr 004B69E0h"
"	      004b67ff    mov eax,ds:[598568h]"
"	      004b6804    cmp ds:[598564h],eax"
"	      004b680a    jne near ptr 004B69C8h"
"	      004b6810    jmp near ptr 004B6815h"
"	      004b6815    push 0"
"	      004b6817    push 1"
"	      004b6819    call 004B8BA0h"
"	      004b681e    add esp,8"
"	      004b6821    mov [ebp-74h],eax"
"	      004b6824    mov dword ptr [ebp-78h],100h"
"	      004b682b    lea eax,[ebp-78h]"
"	      004b682e    mov [ebp-80h],eax"
"	      004b6831    mov dword ptr [ebp-7Ch],1"
"	      004b6838    lea eax,[ebp-7Ch]"
"	      004b683b    mov [ebp-84h],eax"
"	      004b6841    mov eax,[ebp-84h]"
"	      004b6847    mov ecx,[ebp-80h]"
"	      004b684a    mov ecx,[ecx]"
"	      004b684c    cmp [eax],ecx"
"	      004b684e    jb near ptr 004B6865h"
"	      004b6854    mov eax,[ebp-84h]"
"	      004b685a    mov [ebp-88h],eax"
"	      004b6860    jmp near ptr 004B686Eh"
"	      004b6865    mov eax,[ebp-80h]"
"	      004b6868    mov [ebp-88h],eax"
"	      004b686e    jmp near ptr 004B6873h"
"	      004b6873    jmp near ptr 004B6878h"
"	      004b6878    jmp near ptr 004B687Dh"
"	      004b687d    mov eax,[ebp-88h]"
"	      004b6883    mov eax,[eax]"
"	      004b6885    mov [ebp-0A8h],eax"
"	      004b688b    push 0"
"	      004b688d    call 0056A620h"
"	      004b6892    add esp,4"
"	      004b6895    mov eax,[ebp-0A8h]"
"	      004b689b    shl eax,4"
"	      004b689e    push eax"
"	      004b689f    call 0056A600h"
"	      004b68a4    add esp,4"
"	      004b68a7    mov [ebp-0A0h],eax"
"	      004b68ad    cmp dword ptr [ebp-0A0h],0"
"	      004b68b4    jne near ptr 004B68EDh"
"	      004b68ba    push 5971ACh"
"	      004b68bf    mov ecx,638BA0h"
"	      004b68c4    call 00569960h"
"	      004b68c9    mov [ebp-0A4h],eax"
"	      004b68cf    mov eax,[ebp-0A4h]"
"	      004b68d5    push eax"
"	      004b68d6    call 004011B0h"
"	      004b68db    add esp,4"
"	      004b68de    jmp near ptr 004B68E3h"
"	      004b68e3    push 1"
"	      004b68e5    call 00569430h"
"	      004b68ea    add esp,4"
"	      004b68ed    jmp near ptr 004B68F2h"
"	      004b68f2    jmp near ptr 004B68F7h"
"	      004b68f7    mov eax,[ebp-0A0h]"
"	      004b68fd    mov ecx,[ebp-74h]"
"	      004b6900    mov [ecx+4],eax"
"	      004b6903    mov eax,ds:[598570h]"
"	      004b6908    mov ecx,[ebp-74h]"
"	      004b690b    mov [ecx],eax"
"	      004b690d    mov eax,[ebp-74h]"
"	      004b6910    mov ds:[598570h],eax"
"	      004b6915    mov eax,ds:[598570h]"
"	      004b691a    mov eax,[eax+4]"
"	      004b691d    mov ds:[598568h],eax"
"	      004b6922    mov dword ptr [ebp-8Ch],100h"
"	      004b692c    lea eax,[ebp-8Ch]"
"	      004b6932    mov [ebp-94h],eax"
"	      004b6938    mov dword ptr [ebp-90h],1"
"	      004b6942    lea eax,[ebp-90h]"
"	      004b6948    mov [ebp-98h],eax"
"	      004b694e    mov eax,[ebp-98h]"
"	      004b6954    mov ecx,[ebp-94h]"
"	      004b695a    mov ecx,[ecx]"
"	      004b695c    cmp [eax],ecx"
"	      004b695e    jb near ptr 004B6975h"
"	      004b6964    mov eax,[ebp-98h]"
"	      004b696a    mov [ebp-9Ch],eax"
"	      004b6970    jmp near ptr 004B6981h"
"	      004b6975    mov eax,[ebp-94h]"
"	      004b697b    mov [ebp-9Ch],eax"
"	      004b6981    jmp near ptr 004B6986h"
"	      004b6986    jmp near ptr 004B698Bh"
"	      004b698b    jmp near ptr 004B6990h"
"	      004b6990    mov eax,[ebp-9Ch]"
"	      004b6996    mov eax,[eax]"
"	      004b6998    shl eax,4"
"	      004b699b    add eax,ds:[598568h]"
"	      004b69a1    mov ds:[598564h],eax"
"	      004b69a6    jmp near ptr 004B69ABh"
"	      004b69ab    mov eax,ds:[598568h]"
"	      004b69b0    mov [ebp-6Ch],eax"
"	      004b69b3    add dword ptr ds:[598568h],10h"
"	      004b69ba    mov eax,[ebp-6Ch]"
"	      004b69bd    mov [ebp-0ACh],eax"
"	      004b69c3    jmp near ptr 004B69E0h"
"	      004b69c8    mov eax,ds:[598568h]"
"	      004b69cd    mov [ebp-70h],eax"
"	      004b69d0    add dword ptr ds:[598568h],10h"
"	      004b69d7    mov eax,[ebp-70h]"
"	      004b69da    mov [ebp-0ACh],eax"
"	      004b69e0    jmp near ptr 004B69E5h"
"	      004b69e5    mov eax,[ebp-0ACh]"
"	      004b69eb    mov [ebp-60h],eax"
"	      004b69ee    jmp near ptr 004B69F3h"
"	      004b69f3    mov eax,[ebp-60h]"
"	      004b69f6    add eax,8"
"	      004b69f9    mov [ebp-64h],eax"
"	      004b69fc    jmp near ptr 004B6A01h"
"	      004b6a01    cmp dword ptr [ebp-64h],0"
"	      004b6a05    je near ptr 004B6A20h"
"	      004b6a0b    push 0FFFFFFFFh"
"	      004b6a0d    push 0"
"	      004b6a0f    mov eax,[ebp+0Ch]"
"	      004b6a12    push eax"
"	      004b6a13    mov ecx,[ebp-64h]"
"	      004b6a16    call 00411B80h"
"	      004b6a1b    jmp near ptr 004B6A20h"
"	      004b6a20    jmp near ptr 004B6A25h"
"	      004b6a25    mov eax,[ebp-0B0h]"
"	      004b6a2b    mov ecx,[ebp-60h]"
"	      004b6a2e    mov [ecx],eax"
"	      004b6a30    mov eax,[ebp-0B0h]"
"	      004b6a36    mov eax,[eax+4]"
"	      004b6a39    mov ecx,[ebp-60h]"
"	      004b6a3c    mov [ecx+4],eax"
"	      004b6a3f    mov eax,[ebp-60h]"
"	      004b6a42    mov ecx,[ebp-0B0h]"
"	      004b6a48    mov ecx,[ecx+4]"
"	      004b6a4b    mov [ecx],eax"
"	      004b6a4d    mov eax,[ebp-60h]"
"	      004b6a50    mov ecx,[ebp-0B0h]"
"	      004b6a56    mov [ecx+4],eax"
"	      004b6a59    mov eax,[ebp-0B4h]"
"	      004b6a5f    add dword ptr [eax+78h],1"
"	      004b6a63    mov eax,[ebp-60h]"
"	      004b6a66    mov [ebp-14h],eax"
"	      004b6a69    jmp near ptr 004B6A6Eh"
"	      004b6a6e    jmp near ptr 004B6A73h"
);
// LINE 2599:
	asm( 
"	      004b6a73    jmp near ptr 004B6A9Eh"
);
// LINE 2601:
	asm( 
"	      004b6a78    mov eax,[ebp-8]"
"	      004b6a7b    mov [ebp-5Ch],eax"
"	      004b6a7e    mov eax,[ebp-8]"
"	      004b6a81    mov eax,[eax]"
"	      004b6a83    mov [ebp-8],eax"
"	      004b6a86    jmp near ptr 004B6A8Bh"
"	      004b6a8b    mov eax,[ebp-5Ch]"
"	      004b6a8e    mov [ebp-18h],eax"
"	      004b6a91    jmp near ptr 004B6A96h"
);
// LINE 2602:
	asm( 
"	      004b6a96    inc dword ptr [ebp-0Ch]"
);
// LINE 2603:
	asm( 
"	      004b6a99    jmp near ptr 004B6761h"
);
// LINE 2605:
	asm( 
"	      004b6a9e    mov eax,1"
"	      004b6aa3    jmp near ptr 004B6AA8h"
);
// LINE 2606:
	asm( 
"	      004b6aa8    pop edi"
"	      004b6aa9    pop esi"
"	      004b6aaa    pop ebx"
"	      004b6aab    leave"
"	      004b6aac    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b6aaf
long ListBoxWindow::DoCharacter(long) {
// LINE 2617:
	asm( 
"	      004b6aaf    push ebp"
"	      004b6ab0    mov ebp,esp"
"	      004b6ab2    sub esp,4"
"	      004b6ab5    push ebx"
"	      004b6ab6    push esi"
"	      004b6ab7    push edi"
"	      004b6ab8    mov [ebp-4],ecx"
);
// LINE 2619:
	asm( 
"	      004b6abb    xor eax,eax"
"	      004b6abd    jmp near ptr 004B6AC2h"
);
// LINE 2620:
	asm( 
"	      004b6ac2    pop edi"
"	      004b6ac3    pop esi"
"	      004b6ac4    pop ebx"
"	      004b6ac5    leave"
"	      004b6ac6    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6ac9
long ListBoxWindow::DoKeyDown(long, char) {
// LINE 2629:
	asm( 
"	      004b6ac9    push ebp"
"	      004b6aca    mov ebp,esp"
"	      004b6acc    sub esp,4"
"	      004b6acf    push ebx"
"	      004b6ad0    push esi"
"	      004b6ad1    push edi"
"	      004b6ad2    mov [ebp-4],ecx"
);
// LINE 2630:
	asm( 
"	      004b6ad5    mov eax,[ebp-4]"
"	      004b6ad8    cmp dword ptr [eax+54h],0"
"	      004b6adc    jne near ptr 004B6AE9h"
);
// LINE 2631:
	asm( 
"	      004b6ae2    xor eax,eax"
"	      004b6ae4    jmp near ptr 004B6B87h"
);
// LINE 2633:
	asm( 
"	      004b6ae9    cmp dword ptr [ebp+8],28h"
"	      004b6aed    jne near ptr 004B6B10h"
);
// LINE 2634:
	asm( 
"	      004b6af3    mov eax,[ebp-4]"
"	      004b6af6    mov eax,[eax]"
"	      004b6af8    mov ecx,[ebp-4]"
"	      004b6afb    call dword ptr [eax+0F0h]"
);
// LINE 2635:
	asm( 
"	      004b6b01    mov eax,1"
"	      004b6b06    jmp near ptr 004B6B87h"
);
// LINE 2637:
	asm( 
"	      004b6b0b    jmp near ptr 004B6B80h"
"	      004b6b10    cmp dword ptr [ebp+8],26h"
"	      004b6b14    jne near ptr 004B6B37h"
);
// LINE 2638:
	asm( 
"	      004b6b1a    mov eax,[ebp-4]"
"	      004b6b1d    mov eax,[eax]"
"	      004b6b1f    mov ecx,[ebp-4]"
"	      004b6b22    call dword ptr [eax+0ECh]"
);
// LINE 2639:
	asm( 
"	      004b6b28    mov eax,1"
"	      004b6b2d    jmp near ptr 004B6B87h"
);
// LINE 2641:
	asm( 
"	      004b6b32    jmp near ptr 004B6B80h"
"	      004b6b37    cmp dword ptr [ebp+8],21h"
"	      004b6b3b    jne near ptr 004B6B5Eh"
);
// LINE 2642:
	asm( 
"	      004b6b41    mov eax,[ebp-4]"
"	      004b6b44    mov eax,[eax]"
"	      004b6b46    mov ecx,[ebp-4]"
"	      004b6b49    call dword ptr [eax+0FCh]"
);
// LINE 2643:
	asm( 
"	      004b6b4f    mov eax,1"
"	      004b6b54    jmp near ptr 004B6B87h"
);
// LINE 2645:
	asm( 
"	      004b6b59    jmp near ptr 004B6B80h"
"	      004b6b5e    cmp dword ptr [ebp+8],22h"
"	      004b6b62    jne near ptr 004B6B80h"
);
// LINE 2646:
	asm( 
"	      004b6b68    mov eax,[ebp-4]"
"	      004b6b6b    mov eax,[eax]"
"	      004b6b6d    mov ecx,[ebp-4]"
"	      004b6b70    call dword ptr [eax+100h]"
);
// LINE 2647:
	asm( 
"	      004b6b76    mov eax,1"
"	      004b6b7b    jmp near ptr 004B6B87h"
);
// LINE 2649:
	asm( 
"	      004b6b80    xor eax,eax"
"	      004b6b82    jmp near ptr 004B6B87h"
);
// LINE 2650:
	asm( 
"	      004b6b87    pop edi"
"	      004b6b88    pop esi"
"	      004b6b89    pop ebx"
"	      004b6b8a    leave"
"	      004b6b8b    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b6b8e
long ListBoxWindow::DoCursorDown(long, long, unsigned long) {
// LINE 2656:
	asm( 
"	      004b6b8e    push ebp"
"	      004b6b8f    mov ebp,esp"
"	      004b6b91    sub esp,0Ch"
"	      004b6b94    push ebx"
"	      004b6b95    push esi"
"	      004b6b96    push edi"
"	      004b6b97    mov [ebp-0Ch],ecx"
);
// LINE 2662:
	asm( 
"	      004b6b9a    mov ecx,[ebp-0Ch]"
"	      004b6b9d    mov eax,[ebp+0Ch]"
"	      004b6ba0    cdq"
"	      004b6ba1    idiv dword ptr [ecx+0B8h]"
"	      004b6ba7    mov [ebp-4],eax"
);
// LINE 2663:
	asm( 
"	      004b6baa    mov eax,[ebp-0Ch]"
"	      004b6bad    mov eax,[eax+0B4h]"
"	      004b6bb3    add eax,[ebp-4]"
"	      004b6bb6    mov [ebp-8],eax"
);
// LINE 2665:
	asm( 
"	      004b6bb9    mov eax,[ebp-0Ch]"
"	      004b6bbc    mov ecx,[ebp-8]"
"	      004b6bbf    cmp [eax+0ACh],ecx"
"	      004b6bc5    je near ptr 004B6BF4h"
"	      004b6bcb    mov eax,[ebp-0Ch]"
"	      004b6bce    mov eax,[eax]"
"	      004b6bd0    mov ecx,[ebp-0Ch]"
"	      004b6bd3    call dword ptr [eax+114h]"
"	      004b6bd9    cmp eax,[ebp-8]"
"	      004b6bdc    jle near ptr 004B6BF4h"
);
// LINE 2667:
	asm( 
"	      004b6be2    mov eax,[ebp-8]"
"	      004b6be5    push eax"
"	      004b6be6    mov eax,[ebp-0Ch]"
"	      004b6be9    mov eax,[eax]"
"	      004b6beb    mov ecx,[ebp-0Ch]"
"	      004b6bee    call dword ptr [eax+0DCh]"
);
// LINE 2669:
	asm( 
"	      004b6bf4    mov eax,[ebp-0Ch]"
"	      004b6bf7    push eax"
"	      004b6bf8    call 004A7470h"
"	      004b6bfd    add esp,4"
);
// LINE 2670:
	asm( 
"	      004b6c00    mov eax,1"
"	      004b6c05    jmp near ptr 004B6C0Ah"
);
// LINE 2671:
	asm( 
"	      004b6c0a    pop edi"
"	      004b6c0b    pop esi"
"	      004b6c0c    pop ebx"
"	      004b6c0d    leave"
"	      004b6c0e    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b6c11
int32_t ListBoxWindow::SetSelection(long) {
// LINE 2681:
	asm( 
"	      004b6c11    push ebp"
"	      004b6c12    mov ebp,esp"
"	      004b6c14    sub esp,4"
"	      004b6c17    push ebx"
"	      004b6c18    push esi"
"	      004b6c19    push edi"
"	      004b6c1a    mov [ebp-4],ecx"
);
// LINE 2682:
	asm( 
"	      004b6c1d    mov eax,[ebp-4]"
"	      004b6c20    cmp dword ptr [eax+0C8h],0"
"	      004b6c27    je near ptr 004B6C34h"
);
// LINE 2683:
	asm( 
"	      004b6c2d    xor eax,eax"
"	      004b6c2f    jmp near ptr 004B6D47h"
);
// LINE 2684:
	asm( 
"	      004b6c34    mov eax,[ebp-4]"
"	      004b6c37    mov dword ptr [eax+0C8h],1"
);
// LINE 2686:
	asm( 
"	      004b6c41    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      004b6c45    je near ptr 004B6C80h"
"	      004b6c4b    cmp dword ptr [ebp+8],0"
"	      004b6c4f    jl near ptr 004B6C6Ch"
"	      004b6c55    mov eax,[ebp-4]"
"	      004b6c58    mov eax,[eax]"
"	      004b6c5a    mov ecx,[ebp-4]"
"	      004b6c5d    call dword ptr [eax+114h]"
"	      004b6c63    cmp eax,[ebp+8]"
"	      004b6c66    jg near ptr 004B6C80h"
);
// LINE 2687:
	asm( 
"	      004b6c6c    mov eax,[ebp-4]"
"	      004b6c6f    mov dword ptr [eax+0C8h],0"
);
// LINE 2688:
	asm( 
"	      004b6c79    xor eax,eax"
"	      004b6c7b    jmp near ptr 004B6D47h"
);
// LINE 2690:
	asm( 
"	      004b6c80    mov eax,[ebp-4]"
"	      004b6c83    mov ecx,[ebp+8]"
"	      004b6c86    cmp [eax+0ACh],ecx"
"	      004b6c8c    jne near ptr 004B6CA9h"
);
// LINE 2691:
	asm( 
"	      004b6c92    mov eax,[ebp-4]"
"	      004b6c95    mov dword ptr [eax+0C8h],0"
);
// LINE 2692:
	asm( 
"	      004b6c9f    mov eax,1"
"	      004b6ca4    jmp near ptr 004B6D47h"
);
// LINE 2695:
	asm( 
"	      004b6ca9    mov eax,[ebp+8]"
"	      004b6cac    mov ecx,[ebp-4]"
"	      004b6caf    mov [ecx+0ACh],eax"
);
// LINE 2696:
	asm( 
"	      004b6cb5    cmp dword ptr [ebp+8],0"
"	      004b6cb9    jl near ptr 004B6CEBh"
);
// LINE 2697:
	asm( 
"	      004b6cbf    mov eax,[ebp+8]"
"	      004b6cc2    push eax"
"	      004b6cc3    mov eax,[ebp-4]"
"	      004b6cc6    mov eax,[eax]"
"	      004b6cc8    mov ecx,[ebp-4]"
"	      004b6ccb    call dword ptr [eax+104h]"
"	      004b6cd1    test eax,eax"
"	      004b6cd3    jne near ptr 004B6CEBh"
);
// LINE 2698:
	asm( 
"	      004b6cd9    mov eax,[ebp+8]"
"	      004b6cdc    push eax"
"	      004b6cdd    mov eax,[ebp-4]"
"	      004b6ce0    mov eax,[eax]"
"	      004b6ce2    mov ecx,[ebp-4]"
"	      004b6ce5    call dword ptr [eax+108h]"
);
// LINE 2700:
	asm( 
"	      004b6ceb    push 1"
"	      004b6ced    push 1"
"	      004b6cef    mov eax,[ebp-4]"
"	      004b6cf2    mov eax,[eax]"
"	      004b6cf4    mov ecx,[ebp-4]"
"	      004b6cf7    call dword ptr [eax+30h]"
);
// LINE 2701:
	asm( 
"	      004b6cfa    mov eax,[ebp-4]"
"	      004b6cfd    cmp dword ptr [eax+38h],0"
"	      004b6d01    je near ptr 004B6D30h"
);
// LINE 2702:
	asm( 
"	      004b6d07    mov eax,[ebp-4]"
"	      004b6d0a    add eax,0ACh"
"	      004b6d0f    push eax"
"	      004b6d10    push 10001h"
"	      004b6d15    mov eax,[ebp-4]"
"	      004b6d18    mov eax,[eax+4]"
"	      004b6d1b    push eax"
"	      004b6d1c    mov eax,[ebp-4]"
"	      004b6d1f    push eax"
"	      004b6d20    mov eax,[ebp-4]"
"	      004b6d23    mov ecx,[ebp-4]"
"	      004b6d26    mov ecx,[ecx+38h]"
"	      004b6d29    mov edx,[ecx]"
"	      004b6d2b    mov ecx,[eax+38h]"
"	      004b6d2e    call dword ptr [edx]"
);
// LINE 2705:
	asm( 
"	      004b6d30    mov eax,[ebp-4]"
"	      004b6d33    mov dword ptr [eax+0C8h],0"
);
// LINE 2706:
	asm( 
"	      004b6d3d    mov eax,1"
"	      004b6d42    jmp near ptr 004B6D47h"
);
// LINE 2707:
	asm( 
"	      004b6d47    pop edi"
"	      004b6d48    pop esi"
"	      004b6d49    pop ebx"
"	      004b6d4a    leave"
"	      004b6d4b    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6d4e
long ListBoxWindow::GetSelection() {
// LINE 2713:
	asm( 
"	      004b6d4e    push ebp"
"	      004b6d4f    mov ebp,esp"
"	      004b6d51    sub esp,4"
"	      004b6d54    push ebx"
"	      004b6d55    push esi"
"	      004b6d56    push edi"
"	      004b6d57    mov [ebp-4],ecx"
);
// LINE 2714:
	asm( 
"	      004b6d5a    mov eax,[ebp-4]"
"	      004b6d5d    mov eax,[eax+0ACh]"
"	      004b6d63    jmp near ptr 004B6D68h"
);
// LINE 2715:
	asm( 
"	      004b6d68    pop edi"
"	      004b6d69    pop esi"
"	      004b6d6a    pop ebx"
"	      004b6d6b    leave"
"	      004b6d6c    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b6d6d
int32_t ListBoxWindow::IsIndexInView(long) {
// LINE 2721:
	asm( 
"	      004b6d6d    push ebp"
"	      004b6d6e    mov ebp,esp"
"	      004b6d70    sub esp,4"
"	      004b6d73    push ebx"
"	      004b6d74    push esi"
"	      004b6d75    push edi"
"	      004b6d76    mov [ebp-4],ecx"
);
// LINE 2722:
	asm( 
"	      004b6d79    mov eax,[ebp-4]"
"	      004b6d7c    mov ecx,[ebp+8]"
"	      004b6d7f    cmp [eax+0B4h],ecx"
"	      004b6d85    jg near ptr 004B6DB0h"
"	      004b6d8b    mov eax,[ebp-4]"
"	      004b6d8e    mov eax,[eax+0B0h]"
"	      004b6d94    mov ecx,[ebp-4]"
"	      004b6d97    add eax,[ecx+0B4h]"
"	      004b6d9d    cmp eax,[ebp+8]"
"	      004b6da0    jle near ptr 004B6DB0h"
"	      004b6da6    mov eax,1"
"	      004b6dab    jmp near ptr 004B6DB2h"
"	      004b6db0    xor eax,eax"
"	      004b6db2    jmp near ptr 004B6DB7h"
);
// LINE 2723:
	asm( 
"	      004b6db7    pop edi"
"	      004b6db8    pop esi"
"	      004b6db9    pop ebx"
"	      004b6dba    leave"
"	      004b6dbb    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6dbe
void ListBoxWindow::PutIndexInView(long) {
// LINE 2729:
	asm( 
"	      004b6dbe    push ebp"
"	      004b6dbf    mov ebp,esp"
"	      004b6dc1    sub esp,4"
"	      004b6dc4    push ebx"
"	      004b6dc5    push esi"
"	      004b6dc6    push edi"
"	      004b6dc7    mov [ebp-4],ecx"
);
// LINE 2730:
	asm( 
"	      004b6dca    mov eax,[ebp-4]"
"	      004b6dcd    mov ecx,[ebp+8]"
"	      004b6dd0    cmp [eax+0B4h],ecx"
"	      004b6dd6    jle near ptr 004B6DF3h"
);
// LINE 2732:
	asm( 
"	      004b6ddc    mov eax,[ebp+8]"
"	      004b6ddf    push eax"
"	      004b6de0    mov eax,[ebp-4]"
"	      004b6de3    mov eax,[eax]"
"	      004b6de5    mov ecx,[ebp-4]"
"	      004b6de8    call dword ptr [eax+110h]"
);
// LINE 2733:
	asm( 
"	      004b6dee    jmp near ptr 004B6E2Dh"
"	      004b6df3    mov eax,[ebp-4]"
"	      004b6df6    mov eax,[eax+0B0h]"
"	      004b6dfc    dec eax"
"	      004b6dfd    mov ecx,[ebp-4]"
"	      004b6e00    add eax,[ecx+0B4h]"
"	      004b6e06    cmp eax,[ebp+8]"
"	      004b6e09    jge near ptr 004B6E2Dh"
);
// LINE 2735:
	asm( 
"	      004b6e0f    mov eax,[ebp+8]"
"	      004b6e12    mov ecx,[ebp-4]"
"	      004b6e15    mov ecx,[ecx+0B0h]"
"	      004b6e1b    dec ecx"
"	      004b6e1c    sub eax,ecx"
"	      004b6e1e    push eax"
"	      004b6e1f    mov eax,[ebp-4]"
"	      004b6e22    mov eax,[eax]"
"	      004b6e24    mov ecx,[ebp-4]"
"	      004b6e27    call dword ptr [eax+110h]"
);
// LINE 2736:
	asm( 
"	      004b6e2d    push 1"
"	      004b6e2f    push 1"
"	      004b6e31    mov eax,[ebp-4]"
"	      004b6e34    mov eax,[eax]"
"	      004b6e36    mov ecx,[ebp-4]"
"	      004b6e39    call dword ptr [eax+30h]"
);
// LINE 2737:
	asm( 
"	      004b6e3c    mov eax,[ebp-4]"
"	      004b6e3f    mov eax,[eax]"
"	      004b6e41    mov ecx,[ebp-4]"
"	      004b6e44    call dword ptr [eax+150h]"
);
// LINE 2738:
	asm( 
"	      004b6e4a    jmp near ptr 004B6E4Fh"
"	      004b6e4f    pop edi"
"	      004b6e50    pop esi"
"	      004b6e51    pop ebx"
"	      004b6e52    leave"
"	      004b6e53    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6e56
void ListBoxWindow::SetIndexOfTopLine(long) {
// LINE 2750:
	asm( 
"	      004b6e56    push ebp"
"	      004b6e57    mov ebp,esp"
"	      004b6e59    sub esp,4"
"	      004b6e5c    push ebx"
"	      004b6e5d    push esi"
"	      004b6e5e    push edi"
"	      004b6e5f    mov [ebp-4],ecx"
);
// LINE 2751:
	asm( 
"	      004b6e62    mov eax,[ebp-4]"
"	      004b6e65    mov ecx,[ebp+8]"
"	      004b6e68    cmp [eax+0B4h],ecx"
"	      004b6e6e    jne near ptr 004B6E79h"
);
// LINE 2752:
	asm( 
"	      004b6e74    jmp near ptr 004B6F40h"
);
// LINE 2754:
	asm( 
"	      004b6e79    mov eax,[ebp+8]"
"	      004b6e7c    mov ecx,[ebp-4]"
"	      004b6e7f    mov [ecx+0B4h],eax"
);
// LINE 2755:
	asm( 
"	      004b6e85    mov eax,[ebp-4]"
"	      004b6e88    cmp dword ptr [eax+0B4h],0"
"	      004b6e8f    jge near ptr 004B6EA2h"
);
// LINE 2756:
	asm( 
"	      004b6e95    mov eax,[ebp-4]"
"	      004b6e98    mov dword ptr [eax+0B4h],0"
);
// LINE 2757:
	asm( 
"	      004b6ea2    mov eax,[ebp-4]"
"	      004b6ea5    mov eax,[eax]"
"	      004b6ea7    mov ecx,[ebp-4]"
"	      004b6eaa    call dword ptr [eax+114h]"
"	      004b6eb0    mov ecx,[ebp-4]"
"	      004b6eb3    sub eax,[ecx+0B0h]"
"	      004b6eb9    mov ecx,[ebp-4]"
"	      004b6ebc    cmp eax,[ecx+0B4h]"
"	      004b6ec2    jge near ptr 004B6EE8h"
);
// LINE 2758:
	asm( 
"	      004b6ec8    mov eax,[ebp-4]"
"	      004b6ecb    mov eax,[eax]"
"	      004b6ecd    mov ecx,[ebp-4]"
"	      004b6ed0    call dword ptr [eax+114h]"
"	      004b6ed6    mov ecx,[ebp-4]"
"	      004b6ed9    sub eax,[ecx+0B0h]"
"	      004b6edf    mov ecx,[ebp-4]"
"	      004b6ee2    mov [ecx+0B4h],eax"
);
// LINE 2759:
	asm( 
"	      004b6ee8    push 1"
"	      004b6eea    push 1"
"	      004b6eec    mov eax,[ebp-4]"
"	      004b6eef    mov eax,[eax]"
"	      004b6ef1    mov ecx,[ebp-4]"
"	      004b6ef4    call dword ptr [eax+30h]"
);
// LINE 2760:
	asm( 
"	      004b6ef7    mov eax,[ebp-4]"
"	      004b6efa    mov eax,[eax]"
"	      004b6efc    mov ecx,[ebp-4]"
"	      004b6eff    call dword ptr [eax+150h]"
);
// LINE 2761:
	asm( 
"	      004b6f05    mov eax,[ebp-4]"
"	      004b6f08    cmp dword ptr [eax+38h],0"
"	      004b6f0c    je near ptr 004B6F3Bh"
);
// LINE 2762:
	asm( 
"	      004b6f12    mov eax,[ebp-4]"
"	      004b6f15    add eax,0B4h"
"	      004b6f1a    push eax"
"	      004b6f1b    push 10002h"
"	      004b6f20    mov eax,[ebp-4]"
"	      004b6f23    mov eax,[eax+4]"
"	      004b6f26    push eax"
"	      004b6f27    mov eax,[ebp-4]"
"	      004b6f2a    push eax"
"	      004b6f2b    mov eax,[ebp-4]"
"	      004b6f2e    mov ecx,[ebp-4]"
"	      004b6f31    mov ecx,[ecx+38h]"
"	      004b6f34    mov edx,[ecx]"
"	      004b6f36    mov ecx,[eax+38h]"
"	      004b6f39    call dword ptr [edx]"
);
// LINE 2763:
	asm( 
"	      004b6f3b    jmp near ptr 004B6F40h"
"	      004b6f40    pop edi"
"	      004b6f41    pop esi"
"	      004b6f42    pop ebx"
"	      004b6f43    leave"
"	      004b6f44    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b6f47
int32_t ListBoxWindow::ScrollToStart() {
// LINE 2771:
	asm( 
"	      004b6f47    push ebp"
"	      004b6f48    mov ebp,esp"
"	      004b6f4a    sub esp,4"
"	      004b6f4d    push ebx"
"	      004b6f4e    push esi"
"	      004b6f4f    push edi"
"	      004b6f50    mov [ebp-4],ecx"
);
// LINE 2772:
	asm( 
"	      004b6f53    mov eax,[ebp-4]"
"	      004b6f56    mov eax,[eax]"
"	      004b6f58    mov ecx,[ebp-4]"
"	      004b6f5b    call dword ptr [eax+114h]"
"	      004b6f61    test eax,eax"
"	      004b6f63    jle near ptr 004B6F79h"
);
// LINE 2773:
	asm( 
"	      004b6f69    push 0"
"	      004b6f6b    mov eax,[ebp-4]"
"	      004b6f6e    mov eax,[eax]"
"	      004b6f70    mov ecx,[ebp-4]"
"	      004b6f73    call dword ptr [eax+110h]"
);
// LINE 2774:
	asm( 
"	      004b6f79    xor eax,eax"
"	      004b6f7b    jmp near ptr 004B6F80h"
);
// LINE 2775:
	asm( 
"	      004b6f80    pop edi"
"	      004b6f81    pop esi"
"	      004b6f82    pop ebx"
"	      004b6f83    leave"
"	      004b6f84    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b6f85
int32_t ListBoxWindow::ScrollToEnd() {
// LINE 2785:
	asm( 
"	      004b6f85    push ebp"
"	      004b6f86    mov ebp,esp"
"	      004b6f88    sub esp,8"
"	      004b6f8b    push ebx"
"	      004b6f8c    push esi"
"	      004b6f8d    push edi"
"	      004b6f8e    mov [ebp-8],ecx"
);
// LINE 2788:
	asm( 
"	      004b6f91    mov eax,[ebp-8]"
"	      004b6f94    mov eax,[eax]"
"	      004b6f96    mov ecx,[ebp-8]"
"	      004b6f99    call dword ptr [eax+114h]"
"	      004b6f9f    mov [ebp-4],eax"
);
// LINE 2789:
	asm( 
"	      004b6fa2    cmp dword ptr [ebp-4],0"
"	      004b6fa6    jle near ptr 004B6FEEh"
);
// LINE 2790:
	asm( 
"	      004b6fac    mov eax,[ebp-8]"
"	      004b6faf    mov ecx,[ebp-4]"
"	      004b6fb2    cmp [eax+0B0h],ecx"
"	      004b6fb8    jl near ptr 004B6FD3h"
);
// LINE 2792:
	asm( 
"	      004b6fbe    push 0"
"	      004b6fc0    mov eax,[ebp-8]"
"	      004b6fc3    mov eax,[eax]"
"	      004b6fc5    mov ecx,[ebp-8]"
"	      004b6fc8    call dword ptr [eax+110h]"
);
// LINE 2793:
	asm( 
"	      004b6fce    jmp near ptr 004B6FEEh"
);
// LINE 2795:
	asm( 
"	      004b6fd3    mov eax,[ebp-4]"
"	      004b6fd6    mov ecx,[ebp-8]"
"	      004b6fd9    sub eax,[ecx+0B0h]"
"	      004b6fdf    push eax"
"	      004b6fe0    mov eax,[ebp-8]"
"	      004b6fe3    mov eax,[eax]"
"	      004b6fe5    mov ecx,[ebp-8]"
"	      004b6fe8    call dword ptr [eax+110h]"
);
// LINE 2797:
	asm( 
"	      004b6fee    mov eax,1"
"	      004b6ff3    jmp near ptr 004B6FF8h"
);
// LINE 2798:
	asm( 
"	      004b6ff8    pop edi"
"	      004b6ff9    pop esi"
"	      004b6ffa    pop ebx"
"	      004b6ffb    leave"
"	      004b6ffc    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b6ffd
int32_t ListBoxWindow::MoveLineUp() {
// LINE 2809:
	asm( 
"	      004b6ffd    push ebp"
"	      004b6ffe    mov ebp,esp"
"	      004b7000    sub esp,8"
"	      004b7003    push ebx"
"	      004b7004    push esi"
"	      004b7005    push edi"
"	      004b7006    mov [ebp-8],ecx"
);
// LINE 2812:
	asm( 
"	      004b7009    mov eax,[ebp-8]"
"	      004b700c    mov eax,[eax]"
"	      004b700e    mov ecx,[ebp-8]"
"	      004b7011    call dword ptr [eax+114h]"
"	      004b7017    mov [ebp-4],eax"
);
// LINE 2813:
	asm( 
"	      004b701a    cmp dword ptr [ebp-4],0"
"	      004b701e    jg near ptr 004B702Bh"
);
// LINE 2814:
	asm( 
"	      004b7024    xor eax,eax"
"	      004b7026    jmp near ptr 004B7065h"
);
// LINE 2816:
	asm( 
"	      004b702b    mov eax,[ebp-8]"
"	      004b702e    cmp dword ptr [eax+0ACh],0"
"	      004b7035    jle near ptr 004B705Eh"
);
// LINE 2817:
	asm( 
"	      004b703b    mov eax,[ebp-8]"
"	      004b703e    mov eax,[eax+0ACh]"
"	      004b7044    dec eax"
"	      004b7045    push eax"
"	      004b7046    mov eax,[ebp-8]"
"	      004b7049    mov eax,[eax]"
"	      004b704b    mov ecx,[ebp-8]"
"	      004b704e    call dword ptr [eax+0DCh]"
);
// LINE 2818:
	asm( 
"	      004b7054    mov eax,1"
"	      004b7059    jmp near ptr 004B7065h"
);
// LINE 2820:
	asm( 
"	      004b705e    xor eax,eax"
"	      004b7060    jmp near ptr 004B7065h"
);
// LINE 2821:
	asm( 
"	      004b7065    pop edi"
"	      004b7066    pop esi"
"	      004b7067    pop ebx"
"	      004b7068    leave"
"	      004b7069    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b706a
int32_t ListBoxWindow::MoveLineDown() {
// LINE 2834:
	asm( 
"	      004b706a    push ebp"
"	      004b706b    mov ebp,esp"
"	      004b706d    sub esp,8"
"	      004b7070    push ebx"
"	      004b7071    push esi"
"	      004b7072    push edi"
"	      004b7073    mov [ebp-8],ecx"
);
// LINE 2837:
	asm( 
"	      004b7076    mov eax,[ebp-8]"
"	      004b7079    mov eax,[eax]"
"	      004b707b    mov ecx,[ebp-8]"
"	      004b707e    call dword ptr [eax+114h]"
"	      004b7084    mov [ebp-4],eax"
);
// LINE 2838:
	asm( 
"	      004b7087    cmp dword ptr [ebp-4],0"
"	      004b708b    jg near ptr 004B7098h"
);
// LINE 2839:
	asm( 
"	      004b7091    xor eax,eax"
"	      004b7093    jmp near ptr 004B70D5h"
);
// LINE 2841:
	asm( 
"	      004b7098    mov eax,[ebp-8]"
"	      004b709b    mov ecx,[ebp-4]"
"	      004b709e    dec ecx"
"	      004b709f    cmp [eax+0ACh],ecx"
"	      004b70a5    jge near ptr 004B70CEh"
);
// LINE 2842:
	asm( 
"	      004b70ab    mov eax,[ebp-8]"
"	      004b70ae    mov eax,[eax+0ACh]"
"	      004b70b4    inc eax"
"	      004b70b5    push eax"
"	      004b70b6    mov eax,[ebp-8]"
"	      004b70b9    mov eax,[eax]"
"	      004b70bb    mov ecx,[ebp-8]"
"	      004b70be    call dword ptr [eax+0DCh]"
);
// LINE 2843:
	asm( 
"	      004b70c4    mov eax,1"
"	      004b70c9    jmp near ptr 004B70D5h"
);
// LINE 2845:
	asm( 
"	      004b70ce    xor eax,eax"
"	      004b70d0    jmp near ptr 004B70D5h"
);
// LINE 2846:
	asm( 
"	      004b70d5    pop edi"
"	      004b70d6    pop esi"
"	      004b70d7    pop ebx"
"	      004b70d8    leave"
"	      004b70d9    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b70da
int32_t ListBoxWindow::ScrollPageUp() {
// LINE 2858:
	asm( 
"	      004b70da    push ebp"
"	      004b70db    mov ebp,esp"
"	      004b70dd    sub esp,0Ch"
"	      004b70e0    push ebx"
"	      004b70e1    push esi"
"	      004b70e2    push edi"
"	      004b70e3    mov [ebp-0Ch],ecx"
);
// LINE 2862:
	asm( 
"	      004b70e6    mov eax,[ebp-0Ch]"
"	      004b70e9    mov eax,[eax+0B4h]"
"	      004b70ef    mov [ebp-8],eax"
);
// LINE 2863:
	asm( 
"	      004b70f2    mov eax,[ebp-0Ch]"
"	      004b70f5    mov eax,[eax]"
"	      004b70f7    mov ecx,[ebp-0Ch]"
"	      004b70fa    call dword ptr [eax+114h]"
"	      004b7100    mov [ebp-4],eax"
);
// LINE 2864:
	asm( 
"	      004b7103    cmp dword ptr [ebp-4],0"
"	      004b7107    jle near ptr 004B713Fh"
);
// LINE 2865:
	asm( 
"	      004b710d    xor eax,eax"
"	      004b710f    mov ecx,[ebp-0Ch]"
"	      004b7112    mov ecx,[ecx+0B0h]"
"	      004b7118    dec ecx"
"	      004b7119    sub eax,ecx"
"	      004b711b    neg eax"
"	      004b711d    sub [ebp-8],eax"
);
// LINE 2866:
	asm( 
"	      004b7120    jns near ptr 004B712Dh"
);
// LINE 2867:
	asm( 
"	      004b7126    mov dword ptr [ebp-8],0"
);
// LINE 2868:
	asm( 
"	      004b712d    mov eax,[ebp-8]"
"	      004b7130    push eax"
"	      004b7131    mov eax,[ebp-0Ch]"
"	      004b7134    mov eax,[eax]"
"	      004b7136    mov ecx,[ebp-0Ch]"
"	      004b7139    call dword ptr [eax+110h]"
);
// LINE 2870:
	asm( 
"	      004b713f    mov eax,1"
"	      004b7144    jmp near ptr 004B7149h"
);
// LINE 2871:
	asm( 
"	      004b7149    pop edi"
"	      004b714a    pop esi"
"	      004b714b    pop ebx"
"	      004b714c    leave"
"	      004b714d    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b714e
int32_t ListBoxWindow::ScrollPageDown() {
// LINE 2878:
	asm( 
"	      004b714e    push ebp"
"	      004b714f    mov ebp,esp"
"	      004b7151    sub esp,0Ch"
"	      004b7154    push ebx"
"	      004b7155    push esi"
"	      004b7156    push edi"
"	      004b7157    mov [ebp-0Ch],ecx"
);
// LINE 2882:
	asm( 
"	      004b715a    mov eax,[ebp-0Ch]"
"	      004b715d    mov eax,[eax+0B4h]"
"	      004b7163    mov [ebp-8],eax"
);
// LINE 2883:
	asm( 
"	      004b7166    mov eax,[ebp-0Ch]"
"	      004b7169    mov eax,[eax]"
"	      004b716b    mov ecx,[ebp-0Ch]"
"	      004b716e    call dword ptr [eax+114h]"
"	      004b7174    mov [ebp-4],eax"
);
// LINE 2884:
	asm( 
"	      004b7177    cmp dword ptr [ebp-4],0"
"	      004b717b    jle near ptr 004B71E5h"
);
// LINE 2885:
	asm( 
"	      004b7181    mov eax,[ebp-4]"
"	      004b7184    mov ecx,[ebp-0Ch]"
"	      004b7187    sub eax,[ecx+0B0h]"
"	      004b718d    mov ecx,[ebp-0Ch]"
"	      004b7190    cmp eax,[ecx+0B4h]"
"	      004b7196    jle near ptr 004B71E5h"
);
// LINE 2886:
	asm( 
"	      004b719c    mov eax,[ebp-0Ch]"
"	      004b719f    mov eax,[eax+0B0h]"
"	      004b71a5    dec eax"
"	      004b71a6    add [ebp-8],eax"
);
// LINE 2888:
	asm( 
"	      004b71a9    mov eax,[ebp-4]"
"	      004b71ac    mov ecx,[ebp-0Ch]"
"	      004b71af    sub eax,[ecx+0B0h]"
"	      004b71b5    mov ecx,[ebp-0Ch]"
"	      004b71b8    cmp eax,[ecx+0B4h]"
"	      004b71be    jge near ptr 004B71D3h"
);
// LINE 2889:
	asm( 
"	      004b71c4    mov eax,[ebp-4]"
"	      004b71c7    mov ecx,[ebp-0Ch]"
"	      004b71ca    sub eax,[ecx+0B0h]"
"	      004b71d0    mov [ebp-8],eax"
);
// LINE 2890:
	asm( 
"	      004b71d3    mov eax,[ebp-8]"
"	      004b71d6    push eax"
"	      004b71d7    mov eax,[ebp-0Ch]"
"	      004b71da    mov eax,[eax]"
"	      004b71dc    mov ecx,[ebp-0Ch]"
"	      004b71df    call dword ptr [eax+110h]"
);
// LINE 2893:
	asm( 
"	      004b71e5    mov eax,1"
"	      004b71ea    jmp near ptr 004B71EFh"
);
// LINE 2894:
	asm( 
"	      004b71ef    pop edi"
"	      004b71f0    pop esi"
"	      004b71f1    pop ebx"
"	      004b71f2    leave"
"	      004b71f3    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b71f4
int32_t ListBoxWindow::ScrollToFirstLetter(char) {
// LINE 2901:
	asm( 
"	      004b71f4    push ebp"
"	      004b71f5    mov ebp,esp"
"	      004b71f7    sub esp,4Ch"
"	      004b71fa    push ebx"
"	      004b71fb    push esi"
"	      004b71fc    push edi"
"	      004b71fd    mov [ebp-4Ch],ecx"
);
// LINE 2902:
	asm( 
"	      004b7200    mov dword ptr [ebp-8],0"
);
// LINE 2903:
	asm( 
"	      004b7207    mov eax,[ebp-4Ch]"
"	      004b720a    mov eax,[eax+74h]"
"	      004b720d    mov eax,[eax]"
"	      004b720f    mov [ebp-20h],eax"
"	      004b7212    mov eax,[ebp-20h]"
"	      004b7215    mov [ebp-4],eax"
"	      004b7218    jmp near ptr 004B721Dh"
"	      004b721d    jmp near ptr 004B7222h"
);
// LINE 2905:
	asm( 
"	      004b7222    mov eax,[ebp-4Ch]"
"	      004b7225    mov eax,[eax+74h]"
"	      004b7228    mov [ebp-14h],eax"
"	      004b722b    mov eax,[ebp-14h]"
"	      004b722e    mov [ebp-0Ch],eax"
"	      004b7231    jmp near ptr 004B7236h"
"	      004b7236    jmp near ptr 004B723Bh"
"	      004b723b    mov eax,[ebp-4]"
"	      004b723e    cmp [ebp-0Ch],eax"
"	      004b7241    jne near ptr 004B7251h"
"	      004b7247    jmp near ptr 004B7265h"
"	      004b724c    jmp near ptr 004B7251h"
"	      004b7251    jmp near ptr 004B7260h"
"	      004b7256    cmp dword ptr [ebp-18h],0"
"	      004b725a    jne near ptr 004B7265h"
"	      004b7260    jmp near ptr 004B726Ah"
"	      004b7265    jmp near ptr 004B73DBh"
"	      004b726a    jmp near ptr 004B7279h"
"	      004b726f    cmp dword ptr [ebp-1Ch],0"
"	      004b7273    je near ptr 004B73DBh"
);
// LINE 2906:
	asm( 
"	      004b7279    jmp near ptr 004B727Eh"
"	      004b727e    mov eax,[ebp-4]"
"	      004b7281    add eax,8"
"	      004b7284    mov [ebp-48h],eax"
"	      004b7287    mov eax,[ebp-48h]"
"	      004b728a    cmp dword ptr [eax],0"
"	      004b728d    je near ptr 004B72ADh"
"	      004b7293    mov eax,[ebp-48h]"
"	      004b7296    mov eax,[eax]"
"	      004b7298    mov [ebp-28h],eax"
"	      004b729b    mov eax,[ebp-28h]"
"	      004b729e    mov [ebp-30h],eax"
"	      004b72a1    mov eax,[ebp-30h]"
"	      004b72a4    push eax"
"	      004b72a5    call 0056A740h"
"	      004b72aa    add esp,4"
"	      004b72ad    jmp near ptr 004B72B2h"
"	      004b72b2    mov eax,[ebp-48h]"
"	      004b72b5    mov eax,[eax+4]"
"	      004b72b8    mov eax,[eax+4]"
"	      004b72bb    inc eax"
"	      004b72bc    push eax"
"	      004b72bd    call 0056A600h"
"	      004b72c2    add esp,4"
"	      004b72c5    mov ecx,[ebp-48h]"
"	      004b72c8    mov [ecx],eax"
"	      004b72ca    jmp near ptr 004B72CFh"
"	      004b72cf    mov eax,[ebp-48h]"
"	      004b72d2    mov eax,[eax+4]"
"	      004b72d5    cmp dword ptr [eax+4],0"
"	      004b72d9    je near ptr 004B7347h"
"	      004b72df    jmp near ptr 004B72E4h"
"	      004b72e4    jmp near ptr 004B72E9h"
"	      004b72e9    mov eax,[ebp-48h]"
"	      004b72ec    mov eax,[eax+4]"
"	      004b72ef    cmp dword ptr [eax+4],0"
"	      004b72f3    je near ptr 004B730Eh"
"	      004b72f9    mov eax,[ebp-48h]"
"	      004b72fc    mov eax,[eax+4]"
"	      004b72ff    mov eax,[eax]"
"	      004b7301    mov [ebp-3Ch],eax"
"	      004b7304    jmp near ptr 004B731Ah"
"	      004b7309    jmp near ptr 004B731Ah"
"	      004b730e    mov dword ptr [ebp-3Ch],0"
"	      004b7315    jmp near ptr 004B731Ah"
"	      004b731a    mov eax,[ebp-48h]"
"	      004b731d    mov eax,[eax+4]"
"	      004b7320    mov eax,[eax+4]"
"	      004b7323    mov [ebp-40h],eax"
"	      004b7326    mov eax,[ebp-48h]"
"	      004b7329    mov eax,[eax]"
"	      004b732b    mov [ebp-44h],eax"
"	      004b732e    mov eax,[ebp-40h]"
"	      004b7331    push eax"
"	      004b7332    mov eax,[ebp-3Ch]"
"	      004b7335    push eax"
"	      004b7336    mov eax,[ebp-44h]"
"	      004b7339    push eax"
"	      004b733a    call 0056A800h"
"	      004b733f    add esp,0Ch"
"	      004b7342    jmp near ptr 004B7347h"
"	      004b7347    jmp near ptr 004B734Ch"
"	      004b734c    mov byte ptr [ebp-2Ch],0"
"	      004b7350    jmp near ptr 004B7355h"
"	      004b7355    lea eax,[ebp-2Ch]"
"	      004b7358    mov [ebp-34h],eax"
"	      004b735b    jmp near ptr 004B7360h"
"	      004b7360    mov eax,[ebp-48h]"
"	      004b7363    mov eax,[eax+4]"
"	      004b7366    mov eax,[eax+4]"
"	      004b7369    mov ecx,[ebp-48h]"
"	      004b736c    add eax,[ecx]"
"	      004b736e    mov [ebp-38h],eax"
"	      004b7371    mov eax,[ebp-34h]"
"	      004b7374    mov al,[eax]"
"	      004b7376    mov ecx,[ebp-38h]"
"	      004b7379    mov [ecx],al"
"	      004b737b    jmp near ptr 004B7380h"
"	      004b7380    jmp near ptr 004B7385h"
"	      004b7385    mov eax,[ebp-48h]"
"	      004b7388    mov eax,[eax]"
"	      004b738a    movsx eax,byte ptr [eax]"
"	      004b738d    movsx ecx,byte ptr [ebp+8]"
"	      004b7391    cmp eax,ecx"
"	      004b7393    jne near ptr 004B73B5h"
);
// LINE 2907:
	asm( 
"	      004b7399    mov eax,[ebp-8]"
"	      004b739c    push eax"
"	      004b739d    mov eax,[ebp-4Ch]"
"	      004b73a0    mov eax,[eax]"
"	      004b73a2    mov ecx,[ebp-4Ch]"
"	      004b73a5    call dword ptr [eax+0DCh]"
);
// LINE 2908:
	asm( 
"	      004b73ab    mov eax,1"
"	      004b73b0    jmp near ptr 004B73E2h"
);
// LINE 2910:
	asm( 
"	      004b73b5    mov eax,[ebp-4]"
"	      004b73b8    mov [ebp-24h],eax"
"	      004b73bb    mov eax,[ebp-4]"
"	      004b73be    mov eax,[eax]"
"	      004b73c0    mov [ebp-4],eax"
"	      004b73c3    jmp near ptr 004B73C8h"
"	      004b73c8    mov eax,[ebp-24h]"
"	      004b73cb    mov [ebp-10h],eax"
"	      004b73ce    jmp near ptr 004B73D3h"
);
// LINE 2911:
	asm( 
"	      004b73d3    inc dword ptr [ebp-8]"
);
// LINE 2912:
	asm( 
"	      004b73d6    jmp near ptr 004B7222h"
);
// LINE 2913:
	asm( 
"	      004b73db    xor eax,eax"
"	      004b73dd    jmp near ptr 004B73E2h"
);
// LINE 2914:
	asm( 
"	      004b73e2    pop edi"
"	      004b73e3    pop esi"
"	      004b73e4    pop ebx"
"	      004b73e5    leave"
"	      004b73e6    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b73e9
void ListBoxWindow::SetShouldSort() {
// LINE 2922:
	asm( 
"	      004b73e9    push ebp"
"	      004b73ea    mov ebp,esp"
"	      004b73ec    sub esp,4"
"	      004b73ef    push ebx"
"	      004b73f0    push esi"
"	      004b73f1    push edi"
"	      004b73f2    mov [ebp-4],ecx"
);
// LINE 2923:
	asm( 
"	      004b73f5    mov eax,[ebp-4]"
"	      004b73f8    cmp dword ptr [eax+0BCh],0"
"	      004b73ff    jne near ptr 004B7420h"
);
// LINE 2924:
	asm( 
"	      004b7405    mov eax,[ebp-4]"
"	      004b7408    mov dword ptr [eax+0BCh],1"
);
// LINE 2925:
	asm( 
"	      004b7412    mov eax,[ebp-4]"
"	      004b7415    mov eax,[eax]"
"	      004b7417    mov ecx,[ebp-4]"
"	      004b741a    call dword ptr [eax+0E8h]"
);
// LINE 2927:
	asm( 
"	      004b7420    jmp near ptr 004B7425h"
"	      004b7425    pop edi"
"	      004b7426    pop esi"
"	      004b7427    pop ebx"
"	      004b7428    leave"
"	      004b7429    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b742a
void ListBoxWindow::Sort() {
// LINE 2938:
	asm( 
"	      004b742a    push ebp"
"	      004b742b    mov ebp,esp"
"	      004b742d    sub esp,27Ch"
"	      004b7433    push ebx"
"	      004b7434    push esi"
"	      004b7435    push edi"
"	      004b7436    mov [ebp-27Ch],ecx"
);
// LINE 2939:
	asm( 
"	      004b743c    push 10h"
"	      004b743e    call 0056A600h"
"	      004b7443    add esp,4"
"	      004b7446    mov [ebp-10h],eax"
"	      004b7449    cmp dword ptr [ebp-10h],0"
"	      004b744d    je near ptr 004B748Ch"
"	      004b7453    mov eax,[ebp-10h]"
"	      004b7456    mov dword ptr [eax+4],0"
"	      004b745d    mov eax,[ebp-10h]"
"	      004b7460    mov eax,[eax+4]"
"	      004b7463    mov ecx,[ebp-10h]"
"	      004b7466    mov [ecx+8],eax"
"	      004b7469    mov eax,[ebp-10h]"
"	      004b746c    mov dword ptr [eax],0"
"	      004b7472    mov eax,[ebp-10h]"
"	      004b7475    mov dword ptr [eax+0Ch],1"
"	      004b747c    jmp near ptr 004B7481h"
"	      004b7481    mov eax,[ebp-10h]"
"	      004b7484    mov [ebp-8],eax"
"	      004b7487    jmp near ptr 004B7493h"
"	      004b748c    mov dword ptr [ebp-8],0"
"	      004b7493    mov dword ptr [ebp-0Ch],0"
"	      004b749a    jmp near ptr 004B749Fh"
);
// LINE 2942:
	asm( 
"	      004b749f    mov eax,[ebp-27Ch]"
"	      004b74a5    cmp dword ptr [eax+0ACh],0"
"	      004b74ac    jl near ptr 004B74D7h"
);
// LINE 2943:
	asm( 
"	      004b74b2    lea eax,[ebp-0Ch]"
"	      004b74b5    push eax"
"	      004b74b6    mov eax,[ebp-27Ch]"
"	      004b74bc    mov eax,[eax+0ACh]"
"	      004b74c2    push eax"
"	      004b74c3    mov eax,[ebp-27Ch]"
"	      004b74c9    mov eax,[eax]"
"	      004b74cb    mov ecx,[ebp-27Ch]"
"	      004b74d1    call dword ptr [eax+13Ch]"
);
// LINE 2945:
	asm( 
"	      004b74d7    jmp near ptr 004B74DCh"
"	      004b74dc    mov eax,[ebp-27Ch]"
"	      004b74e2    cmp dword ptr [eax+78h],2"
"	      004b74e6    jae near ptr 004B74F1h"
"	      004b74ec    jmp near ptr 004B77E5h"
"	      004b74f1    mov dword ptr [ebp-30h],0"
"	      004b74f8    inc dword ptr ds:[598560h]"
"	      004b74fe    lea ecx,[ebp-34h]"
"	      004b7501    call 004399C0h"
"	      004b7506    mov [ebp-34h],eax"
"	      004b7509    mov eax,[ebp-34h]"
"	      004b750c    mov ecx,[ebp-34h]"
"	      004b750f    mov [ecx],eax"
"	      004b7511    mov eax,[ebp-34h]"
"	      004b7514    mov ecx,[ebp-34h]"
"	      004b7517    mov [ecx+4],eax"
"	      004b751a    jmp near ptr 004B751Fh"
"	      004b751f    mov dword ptr [ebp-25Ch],40h"
"	      004b7529    lea eax,[ebp-234h]"
"	      004b752f    mov [ebp-260h],eax"
"	      004b7535    dec dword ptr [ebp-25Ch]"
"	      004b753b    js near ptr 004B7558h"
"	      004b7541    mov ecx,[ebp-260h]"
"	      004b7547    call 0043A490h"
"	      004b754c    add dword ptr [ebp-260h],8"
"	      004b7553    jmp near ptr 004B7535h"
"	      004b7558    jmp near ptr 004B755Dh"
"	      004b755d    mov dword ptr [ebp-2Ch],0"
"	      004b7564    mov eax,[ebp-27Ch]"
"	      004b756a    cmp dword ptr [eax+78h],0"
"	      004b756e    jne near ptr 004B757Eh"
"	      004b7574    jmp near ptr 004B7754h"
"	      004b7579    jmp near ptr 004B757Eh"
"	      004b757e    jmp near ptr 004B7590h"
"	      004b7583    cmp dword ptr [ebp-258h],0"
"	      004b758a    jne near ptr 004B7754h"
"	      004b7590    mov eax,[ebp-27Ch]"
"	      004b7596    mov eax,[eax+74h]"
"	      004b7599    mov eax,[eax]"
"	      004b759b    mov [ebp-250h],eax"
"	      004b75a1    mov eax,[ebp-250h]"
"	      004b75a7    mov [ebp-23Ch],eax"
"	      004b75ad    jmp near ptr 004B75B2h"
"	      004b75b2    jmp near ptr 004B75B7h"
"	      004b75b7    mov eax,[ebp-34h]"
"	      004b75ba    mov eax,[eax]"
"	      004b75bc    mov [ebp-254h],eax"
"	      004b75c2    mov eax,[ebp-254h]"
"	      004b75c8    mov [ebp-240h],eax"
"	      004b75ce    jmp near ptr 004B75D3h"
"	      004b75d3    jmp near ptr 004B75D8h"
"	      004b75d8    mov eax,[ebp-23Ch]"
"	      004b75de    push eax"
"	      004b75df    mov eax,[ebp-27Ch]"
"	      004b75e5    add eax,74h"
"	      004b75e8    push eax"
"	      004b75e9    mov eax,[ebp-240h]"
"	      004b75ef    push eax"
"	      004b75f0    lea ecx,[ebp-34h]"
"	      004b75f3    call 004B8860h"
"	      004b75f8    mov dword ptr [ebp-238h],0"
"	      004b7602    mov eax,[ebp-2Ch]"
"	      004b7605    cmp [ebp-238h],eax"
"	      004b760b    jge near ptr 004B76D6h"
"	      004b7611    mov eax,[ebp-238h]"
"	      004b7617    cmp dword ptr [ebp+eax*8-230h],0"
"	      004b761f    jne near ptr 004B762Fh"
"	      004b7625    jmp near ptr 004B76D6h"
"	      004b762a    jmp near ptr 004B762Fh"
"	      004b762f    jmp near ptr 004B7641h"
"	      004b7634    cmp dword ptr [ebp-24Ch],0"
"	      004b763b    jne near ptr 004B76D6h"
"	      004b7641    lea eax,[ebp-34h]"
"	      004b7644    push eax"
"	      004b7645    mov eax,[ebp-238h]"
"	      004b764b    lea ecx,[ebp+eax*8-234h]"
"	      004b7652    call 004B8C10h"
"	      004b7657    mov eax,[ebp-238h]"
"	      004b765d    mov [ebp-244h],eax"
"	      004b7663    add dword ptr [ebp-238h],1"
"	      004b766a    mov eax,[ebp-34h]"
"	      004b766d    mov [ebp-264h],eax"
"	      004b7673    mov eax,[ebp-244h]"
"	      004b7679    mov eax,[ebp+eax*8-234h]"
"	      004b7680    mov [ebp-34h],eax"
"	      004b7683    mov eax,[ebp-264h]"
"	      004b7689    mov ecx,[ebp-244h]"
"	      004b768f    mov [ebp+ecx*8-234h],eax"
"	      004b7696    jmp near ptr 004B769Bh"
"	      004b769b    mov eax,[ebp-30h]"
"	      004b769e    mov [ebp-268h],eax"
"	      004b76a4    mov eax,[ebp-244h]"
"	      004b76aa    mov eax,[ebp+eax*8-230h]"
"	      004b76b1    mov [ebp-30h],eax"
"	      004b76b4    mov eax,[ebp-268h]"
"	      004b76ba    mov ecx,[ebp-244h]"
"	      004b76c0    mov [ebp+ecx*8-230h],eax"
"	      004b76c7    jmp near ptr 004B76CCh"
"	      004b76cc    jmp near ptr 004B76D1h"
"	      004b76d1    jmp near ptr 004B7602h"
"	      004b76d6    mov eax,[ebp-34h]"
"	      004b76d9    mov [ebp-26Ch],eax"
"	      004b76df    mov eax,[ebp-238h]"
"	      004b76e5    mov eax,[ebp+eax*8-234h]"
"	      004b76ec    mov [ebp-34h],eax"
"	      004b76ef    mov eax,[ebp-26Ch]"
"	      004b76f5    mov ecx,[ebp-238h]"
"	      004b76fb    mov [ebp+ecx*8-234h],eax"
"	      004b7702    jmp near ptr 004B7707h"
"	      004b7707    mov eax,[ebp-30h]"
"	      004b770a    mov [ebp-270h],eax"
"	      004b7710    mov eax,[ebp-238h]"
"	      004b7716    mov eax,[ebp+eax*8-230h]"
"	      004b771d    mov [ebp-30h],eax"
"	      004b7720    mov eax,[ebp-270h]"
"	      004b7726    mov ecx,[ebp-238h]"
"	      004b772c    mov [ebp+ecx*8-230h],eax"
"	      004b7733    jmp near ptr 004B7738h"
"	      004b7738    jmp near ptr 004B773Dh"
"	      004b773d    mov eax,[ebp-2Ch]"
"	      004b7740    cmp [ebp-238h],eax"
"	      004b7746    jne near ptr 004B774Fh"
"	      004b774c    inc dword ptr [ebp-2Ch]"
"	      004b774f    jmp near ptr 004B7564h"
"	      004b7754    mov eax,[ebp-2Ch]"
"	      004b7757    mov [ebp-248h],eax"
"	      004b775d    dec dword ptr [ebp-2Ch]"
"	      004b7760    cmp dword ptr [ebp-248h],0"
"	      004b7767    je near ptr 004B778Bh"
"	      004b776d    mov eax,[ebp-2Ch]"
"	      004b7770    lea eax,[ebp+eax*8-234h]"
"	      004b7777    push eax"
"	      004b7778    mov ecx,[ebp-27Ch]"
"	      004b777e    add ecx,74h"
"	      004b7781    call 004B8C10h"
"	      004b7786    jmp near ptr 004B7754h"
"	      004b778b    mov dword ptr [ebp-274h],40h"
"	      004b7795    lea eax,[ebp-234h]"
"	      004b779b    mov [ebp-278h],eax"
"	      004b77a1    mov eax,[ebp-274h]"
"	      004b77a7    shl eax,3"
"	      004b77aa    add [ebp-278h],eax"
"	      004b77b0    dec dword ptr [ebp-274h]"
"	      004b77b6    js near ptr 004B77D3h"
"	      004b77bc    sub dword ptr [ebp-278h],8"
"	      004b77c3    mov ecx,[ebp-278h]"
"	      004b77c9    call 0043A0C0h"
"	      004b77ce    jmp near ptr 004B77B0h"
"	      004b77d3    jmp near ptr 004B77D8h"
"	      004b77d8    lea ecx,[ebp-34h]"
"	      004b77db    call 0043A0C0h"
"	      004b77e0    jmp near ptr 004B77E5h"
);
// LINE 2946:
	asm( 
"	      004b77e5    mov eax,[ebp-27Ch]"
"	      004b77eb    cmp dword ptr [eax+0ACh],0"
"	      004b77f2    jl near ptr 004B782Ch"
);
// LINE 2947:
	asm( 
"	      004b77f8    lea eax,[ebp-0Ch]"
"	      004b77fb    push eax"
"	      004b77fc    lea eax,[ebp-4]"
"	      004b77ff    push eax"
"	      004b7800    mov eax,[ebp-27Ch]"
"	      004b7806    mov eax,[eax]"
"	      004b7808    mov ecx,[ebp-27Ch]"
"	      004b780e    call dword ptr [eax+140h]"
);
// LINE 2948:
	asm( 
"	      004b7814    mov eax,[ebp-4]"
"	      004b7817    push eax"
"	      004b7818    mov eax,[ebp-27Ch]"
"	      004b781e    mov eax,[eax]"
"	      004b7820    mov ecx,[ebp-27Ch]"
"	      004b7826    call dword ptr [eax+0DCh]"
);
// LINE 2950:
	asm( 
"	      004b782c    mov eax,[ebp-8]"
"	      004b782f    dec dword ptr [eax+0Ch]"
"	      004b7832    mov eax,[ebp-8]"
"	      004b7835    cmp dword ptr [eax+0Ch],0"
"	      004b7839    jne near ptr 004B78AFh"
"	      004b783f    mov eax,[ebp-8]"
"	      004b7842    mov [ebp-20h],eax"
"	      004b7845    mov eax,[ebp-20h]"
"	      004b7848    mov [ebp-1Ch],eax"
"	      004b784b    cmp dword ptr [ebp-1Ch],0"
"	      004b784f    je near ptr 004B78AFh"
"	      004b7855    mov eax,[ebp-1Ch]"
"	      004b7858    cmp dword ptr [eax+8],0"
"	      004b785c    je near ptr 004B788Fh"
"	      004b7862    mov eax,[ebp-1Ch]"
"	      004b7865    mov eax,[eax]"
"	      004b7867    mov [ebp-24h],eax"
"	      004b786a    mov eax,[ebp-24h]"
"	      004b786d    mov [ebp-28h],eax"
"	      004b7870    mov eax,[ebp-28h]"
"	      004b7873    push eax"
"	      004b7874    call 0056A740h"
"	      004b7879    add esp,4"
"	      004b787c    mov eax,[ebp-1Ch]"
"	      004b787f    mov dword ptr [eax+8],0"
"	      004b7886    mov eax,[ebp-1Ch]"
"	      004b7889    mov dword ptr [eax],0"
"	      004b788f    jmp near ptr 004B7894h"
"	      004b7894    jmp near ptr 004B7899h"
"	      004b7899    mov eax,[ebp-1Ch]"
"	      004b789c    push eax"
"	      004b789d    call 0056A740h"
"	      004b78a2    add esp,4"
"	      004b78a5    jmp near ptr 004B78AAh"
"	      004b78aa    jmp near ptr 004B78AFh"
"	      004b78af    jmp near ptr 004B78B4h"
"	      004b78b4    cmp dword ptr [ebp-0Ch],0"
"	      004b78b8    je near ptr 004B78D6h"
"	      004b78be    mov eax,[ebp-0Ch]"
"	      004b78c1    mov [ebp-14h],eax"
"	      004b78c4    mov eax,[ebp-14h]"
"	      004b78c7    mov [ebp-18h],eax"
"	      004b78ca    mov eax,[ebp-18h]"
"	      004b78cd    push eax"
"	      004b78ce    call 0056A740h"
"	      004b78d3    add esp,4"
"	      004b78d6    jmp near ptr 004B78DBh"
);
// LINE 2951:
	asm( 
"	      004b78db    jmp near ptr 004B78E0h"
"	      004b78e0    pop edi"
"	      004b78e1    pop esi"
"	      004b78e2    pop ebx"
"	      004b78e3    leave"
"	      004b78e4    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b78e5
long ListBoxWindow::GetLineCount() {
// LINE 2957:
	asm( 
"	      004b78e5    push ebp"
"	      004b78e6    mov ebp,esp"
"	      004b78e8    sub esp,4"
"	      004b78eb    push ebx"
"	      004b78ec    push esi"
"	      004b78ed    push edi"
"	      004b78ee    mov [ebp-4],ecx"
);
// LINE 2958:
	asm( 
"	      004b78f1    jmp near ptr 004B78F6h"
"	      004b78f6    mov eax,[ebp-4]"
"	      004b78f9    mov eax,[eax+78h]"
"	      004b78fc    jmp near ptr 004B7901h"
);
// LINE 2959:
	asm( 
"	      004b7901    pop edi"
"	      004b7902    pop esi"
"	      004b7903    pop ebx"
"	      004b7904    leave"
"	      004b7905    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b7906
long ListBoxWindow::GetIndexOfTopLine() {
// LINE 2965:
	asm( 
"	      004b7906    push ebp"
"	      004b7907    mov ebp,esp"
"	      004b7909    sub esp,4"
"	      004b790c    push ebx"
"	      004b790d    push esi"
"	      004b790e    push edi"
"	      004b790f    mov [ebp-4],ecx"
);
// LINE 2966:
	asm( 
"	      004b7912    mov eax,[ebp-4]"
"	      004b7915    mov eax,[eax+0B4h]"
"	      004b791b    jmp near ptr 004B7920h"
);
// LINE 2967:
	asm( 
"	      004b7920    pop edi"
"	      004b7921    pop esi"
"	      004b7922    pop ebx"
"	      004b7923    leave"
"	      004b7924    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b7925
int32_t ListBoxWindow::AddScrollBar(int32_t, int32_t, char *) {
// LINE 2974:
	asm( 
"	      004b7925    push ebp"
"	      004b7926    mov ebp,esp"
"	      004b7928    sub esp,18h"
"	      004b792b    push ebx"
"	      004b792c    push esi"
"	      004b792d    push edi"
"	      004b792e    mov [ebp-18h],ecx"
);
// LINE 2978:
	asm( 
"	      004b7931    cmp dword ptr [ebp+8],0"
"	      004b7935    je near ptr 004B7A18h"
"	      004b793b    push 1"
"	      004b793d    mov eax,[ebp-18h]"
"	      004b7940    mov eax,[eax]"
"	      004b7942    mov ecx,[ebp-18h]"
"	      004b7945    call dword ptr [eax+74h]"
"	      004b7948    test eax,eax"
"	      004b794a    jne near ptr 004B7A18h"
);
// LINE 2979:
	asm( 
"	      004b7950    jmp near ptr 004B7955h"
"	      004b7955    jmp near ptr 004B795Ah"
);
// LINE 2980:
	asm( 
"	      004b795a    mov dword ptr [ebp-0Ch],0"
);
// LINE 2981:
	asm( 
"	      004b7961    jmp near ptr 004B7966h"
"	      004b7966    mov eax,[ebp-18h]"
"	      004b7969    mov eax,[eax+18h]"
"	      004b796c    mov ecx,[ebp-18h]"
"	      004b796f    sub eax,[ecx+10h]"
"	      004b7972    mov [ebp-8],eax"
);
// LINE 2982:
	asm( 
"	      004b7975    mov eax,[ebp-8]"
"	      004b7978    sub eax,10h"
"	      004b797b    mov [ebp-10h],eax"
);
// LINE 2983:
	asm( 
"	      004b797e    jmp near ptr 004B7983h"
"	      004b7983    mov eax,[ebp-18h]"
"	      004b7986    mov eax,[eax+1Ch]"
"	      004b7989    mov ecx,[ebp-18h]"
"	      004b798c    sub eax,[ecx+14h]"
"	      004b798f    mov [ebp-4],eax"
);
// LINE 2986:
	asm( 
"	      004b7992    push 0D4h"
"	      004b7997    call 0056A600h"
"	      004b799c    add esp,4"
"	      004b799f    mov [ebp-14h],eax"
"	      004b79a2    cmp dword ptr [ebp-14h],0"
"	      004b79a6    je near ptr 004B79D8h"
"	      004b79ac    mov eax,[ebp+10h]"
"	      004b79af    push eax"
"	      004b79b0    push 1"
"	      004b79b2    mov eax,[ebp-18h]"
"	      004b79b5    push eax"
"	      004b79b6    mov eax,[ebp-18h]"
"	      004b79b9    push eax"
"	      004b79ba    push 1"
"	      004b79bc    push 1"
"	      004b79be    lea eax,[ebp-10h]"
"	      004b79c1    push eax"
"	      004b79c2    mov ecx,[ebp-14h]"
"	      004b79c5    call 004B2C25h"
"	      004b79ca    mov ecx,[ebp-18h]"
"	      004b79cd    mov [ecx+0C0h],eax"
"	      004b79d3    jmp near ptr 004B79E5h"
"	      004b79d8    mov eax,[ebp-18h]"
"	      004b79db    mov dword ptr [eax+0C0h],0"
);
// LINE 2987:
	asm( 
"	      004b79e5    mov eax,[ebp-18h]"
"	      004b79e8    mov ecx,[ebp-18h]"
"	      004b79eb    mov ecx,[ecx+0C0h]"
"	      004b79f1    mov edx,[ecx]"
"	      004b79f3    mov ecx,[eax+0C0h]"
"	      004b79f9    call dword ptr [edx+4]"
);
// LINE 2988:
	asm( 
"	      004b79fc    mov eax,[ebp-18h]"
"	      004b79ff    mov eax,[eax]"
"	      004b7a01    mov ecx,[ebp-18h]"
"	      004b7a04    call dword ptr [eax+150h]"
);
// LINE 2989:
	asm( 
"	      004b7a0a    mov eax,[ebp-18h]"
"	      004b7a0d    mov eax,[eax]"
"	      004b7a0f    mov ecx,[ebp-18h]"
"	      004b7a12    call dword ptr [eax+154h]"
);
// LINE 2991:
	asm( 
"	      004b7a18    mov eax,1"
"	      004b7a1d    jmp near ptr 004B7A22h"
);
// LINE 2992:
	asm( 
"	      004b7a22    pop edi"
"	      004b7a23    pop esi"
"	      004b7a24    pop ebx"
"	      004b7a25    leave"
"	      004b7a26    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b7a29
void ListBoxWindow::RemoveScrollBar(int32_t, int32_t) {
// LINE 2999:
	asm( 
"	      004b7a29    push ebp"
"	      004b7a2a    mov ebp,esp"
"	      004b7a2c    sub esp,4"
"	      004b7a2f    push ebx"
"	      004b7a30    push esi"
"	      004b7a31    push edi"
"	      004b7a32    mov [ebp-4],ecx"
);
// LINE 3000:
	asm( 
"	      004b7a35    cmp dword ptr [ebp+8],0"
"	      004b7a39    je near ptr 004B7A61h"
);
// LINE 3001:
	asm( 
"	      004b7a3f    mov eax,[ebp-4]"
"	      004b7a42    mov eax,[eax+0C0h]"
"	      004b7a48    push eax"
"	      004b7a49    mov eax,[ebp-4]"
"	      004b7a4c    mov eax,[eax]"
"	      004b7a4e    mov ecx,[ebp-4]"
"	      004b7a51    call dword ptr [eax+5Ch]"
);
// LINE 3002:
	asm( 
"	      004b7a54    mov eax,[ebp-4]"
"	      004b7a57    mov dword ptr [eax+0C0h],0"
);
// LINE 3004:
	asm( 
"	      004b7a61    cmp dword ptr [ebp+0Ch],0"
"	      004b7a65    je near ptr 004B7A8Dh"
);
// LINE 3005:
	asm( 
"	      004b7a6b    mov eax,[ebp-4]"
"	      004b7a6e    mov eax,[eax+0C4h]"
"	      004b7a74    push eax"
"	      004b7a75    mov eax,[ebp-4]"
"	      004b7a78    mov eax,[eax]"
"	      004b7a7a    mov ecx,[ebp-4]"
"	      004b7a7d    call dword ptr [eax+5Ch]"
);
// LINE 3006:
	asm( 
"	      004b7a80    mov eax,[ebp-4]"
"	      004b7a83    mov dword ptr [eax+0C4h],0"
);
// LINE 3008:
	asm( 
"	      004b7a8d    jmp near ptr 004B7A92h"
"	      004b7a92    pop edi"
"	      004b7a93    pop esi"
"	      004b7a94    pop ebx"
"	      004b7a95    leave"
"	      004b7a96    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b7a99
void ListBoxWindow::SetScrollBarValue() {
// LINE 3015:
	asm( 
"	      004b7a99    push ebp"
"	      004b7a9a    mov ebp,esp"
"	      004b7a9c    sub esp,8"
"	      004b7a9f    push ebx"
"	      004b7aa0    push esi"
"	      004b7aa1    push edi"
"	      004b7aa2    mov [ebp-8],ecx"
);
// LINE 3016:
	asm( 
"	      004b7aa5    mov eax,[ebp-8]"
"	      004b7aa8    cmp dword ptr [eax+0C0h],0"
"	      004b7aaf    je near ptr 004B7B57h"
);
// LINE 3017:
	asm( 
"	      004b7ab5    mov eax,[ebp-8]"
"	      004b7ab8    mov eax,[eax]"
"	      004b7aba    mov ecx,[ebp-8]"
"	      004b7abd    call dword ptr [eax+114h]"
"	      004b7ac3    mov ecx,[ebp-8]"
"	      004b7ac6    sub eax,[ecx+0B0h]"
"	      004b7acc    mov [ebp-4],eax"
);
// LINE 3018:
	asm( 
"	      004b7acf    cmp dword ptr [ebp-4],0"
"	      004b7ad3    jge near ptr 004B7AE0h"
);
// LINE 3019:
	asm( 
"	      004b7ad9    mov dword ptr [ebp-4],0"
);
// LINE 3020:
	asm( 
"	      004b7ae0    push 0"
"	      004b7ae2    mov eax,[ebp-8]"
"	      004b7ae5    mov ecx,[eax+0C0h]"
"	      004b7aeb    call 004B2834h"
);
// LINE 3021:
	asm( 
"	      004b7af0    mov eax,[ebp-4]"
"	      004b7af3    push eax"
"	      004b7af4    mov eax,[ebp-8]"
"	      004b7af7    mov ecx,[eax+0C0h]"
"	      004b7afd    call 004B2872h"
);
// LINE 3022:
	asm( 
"	      004b7b02    mov eax,[ebp-8]"
"	      004b7b05    mov eax,[eax]"
"	      004b7b07    mov ecx,[ebp-8]"
"	      004b7b0a    call dword ptr [eax+114h]"
"	      004b7b10    mov ecx,[ebp-8]"
"	      004b7b13    cdq"
"	      004b7b14    idiv dword ptr [ecx+0B0h]"
"	      004b7b1a    inc eax"
"	      004b7b1b    push eax"
"	      004b7b1c    mov eax,[ebp-4]"
"	      004b7b1f    push eax"
"	      004b7b20    mov eax,[ebp-8]"
"	      004b7b23    mov ecx,[ebp-8]"
"	      004b7b26    mov ecx,[ecx+0C0h]"
"	      004b7b2c    mov edx,[ecx]"
"	      004b7b2e    mov ecx,[eax+0C0h]"
"	      004b7b34    call dword ptr [edx+0D8h]"
);
// LINE 3023:
	asm( 
"	      004b7b3a    mov eax,[ebp-8]"
"	      004b7b3d    mov eax,[eax]"
"	      004b7b3f    mov ecx,[ebp-8]"
"	      004b7b42    call dword ptr [eax+118h]"
"	      004b7b48    push eax"
"	      004b7b49    mov eax,[ebp-8]"
"	      004b7b4c    mov ecx,[eax+0C0h]"
"	      004b7b52    call 004B273Ah"
);
// LINE 3025:
	asm( 
"	      004b7b57    jmp near ptr 004B7B5Ch"
"	      004b7b5c    pop edi"
"	      004b7b5d    pop esi"
"	      004b7b5e    pop ebx"
"	      004b7b5f    leave"
"	      004b7b60    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b7b61
void ListBoxWindow::SetScrollBarSizes() {
// LINE 3031:
	asm( 
"	      004b7b61    push ebp"
"	      004b7b62    mov ebp,esp"
"	      004b7b64    sub esp,0Ch"
"	      004b7b67    push ebx"
"	      004b7b68    push esi"
"	      004b7b69    push edi"
"	      004b7b6a    mov [ebp-0Ch],ecx"
);
// LINE 3035:
	asm( 
"	      004b7b6d    mov eax,[ebp-0Ch]"
"	      004b7b70    cmp dword ptr [eax+0C0h],0"
"	      004b7b77    je near ptr 004B7C1Bh"
);
// LINE 3036:
	asm( 
"	      004b7b7d    jmp near ptr 004B7B82h"
"	      004b7b82    jmp near ptr 004B7B87h"
"	      004b7b87    mov eax,[ebp-0Ch]"
"	      004b7b8a    mov eax,[eax+18h]"
"	      004b7b8d    mov ecx,[ebp-0Ch]"
"	      004b7b90    sub eax,[ecx+10h]"
"	      004b7b93    mov ecx,[ebp-0Ch]"
"	      004b7b96    mov ecx,[ecx+0C0h]"
"	      004b7b9c    mov ecx,[ecx+18h]"
"	      004b7b9f    mov edx,[ebp-0Ch]"
"	      004b7ba2    mov edx,[edx+0C0h]"
"	      004b7ba8    sub ecx,[edx+10h]"
"	      004b7bab    sub eax,ecx"
"	      004b7bad    mov [ebp-4],eax"
);
// LINE 3037:
	asm( 
"	      004b7bb0    mov eax,[ebp-0Ch]"
"	      004b7bb3    cmp dword ptr [eax+6Ch],0"
"	      004b7bb7    je near ptr 004B7BC9h"
"	      004b7bbd    mov dword ptr [ebp-8],1"
"	      004b7bc4    jmp near ptr 004B7BD0h"
"	      004b7bc9    mov dword ptr [ebp-8],0"
);
// LINE 3038:
	asm( 
"	      004b7bd0    mov eax,[ebp-8]"
"	      004b7bd3    push eax"
"	      004b7bd4    mov eax,[ebp-4]"
"	      004b7bd7    push eax"
"	      004b7bd8    mov eax,[ebp-0Ch]"
"	      004b7bdb    mov ecx,[ebp-0Ch]"
"	      004b7bde    mov ecx,[ecx+0C0h]"
"	      004b7be4    mov edx,[ecx]"
"	      004b7be6    mov ecx,[eax+0C0h]"
"	      004b7bec    call dword ptr [edx+34h]"
);
// LINE 3039:
	asm( 
"	      004b7bef    jmp near ptr 004B7BF4h"
"	      004b7bf4    mov eax,[ebp-0Ch]"
"	      004b7bf7    mov eax,[eax+1Ch]"
"	      004b7bfa    mov ecx,[ebp-0Ch]"
"	      004b7bfd    sub eax,[ecx+14h]"
"	      004b7c00    dec eax"
"	      004b7c01    push eax"
"	      004b7c02    push 0FFFFFFFFh"
"	      004b7c04    mov eax,[ebp-0Ch]"
"	      004b7c07    mov ecx,[ebp-0Ch]"
"	      004b7c0a    mov ecx,[ecx+0C0h]"
"	      004b7c10    mov edx,[ecx]"
"	      004b7c12    mov ecx,[eax+0C0h]"
"	      004b7c18    call dword ptr [edx+38h]"
);
// LINE 3041:
	asm( 
"	      004b7c1b    jmp near ptr 004B7C20h"
"	      004b7c20    pop edi"
"	      004b7c21    pop esi"
"	      004b7c22    pop ebx"
"	      004b7c23    leave"
"	      004b7c24    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b7c25
void PopupMenuWindow::PopupMenuWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t) {
// LINE 3059:
	asm( 
"	      004b7c25    push ebp"
"	      004b7c26    mov ebp,esp"
"	      004b7c28    sub esp,4"
"	      004b7c2b    push ebx"
"	      004b7c2c    push esi"
"	      004b7c2d    push edi"
"	      004b7c2e    mov [ebp-4],ecx"
"	      004b7c31    mov eax,[ebp+18h]"
"	      004b7c34    push eax"
"	      004b7c35    mov eax,[ebp+14h]"
"	      004b7c38    push eax"
"	      004b7c39    mov eax,[ebp+10h]"
"	      004b7c3c    push eax"
"	      004b7c3d    mov eax,[ebp+0Ch]"
"	      004b7c40    push eax"
"	      004b7c41    mov eax,[ebp+8]"
"	      004b7c44    push eax"
"	      004b7c45    mov ecx,[ebp-4]"
"	      004b7c48    call 004B4462h"
"	      004b7c4d    mov eax,[ebp-4]"
"	      004b7c50    mov dword ptr [eax],592220h"
);
// LINE 3060:
	asm( 
"	      004b7c56    jmp near ptr 004B7C5Bh"
"	      004b7c5b    mov eax,[ebp-4]"
"	      004b7c5e    pop edi"
"	      004b7c5f    pop esi"
"	      004b7c60    pop ebx"
"	      004b7c61    leave"
"	      004b7c62    ret 14h"
);
}

// FUNCTION: SIMCOPTER 0x004b7c65
int32_t PopupMenuWindow::Initialize() {
// LINE 3066:
	asm( 
"	      004b7c65    push ebp"
"	      004b7c66    mov ebp,esp"
"	      004b7c68    sub esp,8"
"	      004b7c6b    push ebx"
"	      004b7c6c    push esi"
"	      004b7c6d    push edi"
"	      004b7c6e    mov [ebp-8],ecx"
);
// LINE 3067:
	asm( 
"	      004b7c71    mov ecx,[ebp-8]"
"	      004b7c74    call 004B47F7h"
"	      004b7c79    mov [ebp-4],eax"
);
// LINE 3068:
	asm( 
"	      004b7c7c    mov eax,[ebp-8]"
"	      004b7c7f    mov eax,[eax]"
"	      004b7c81    mov ecx,[ebp-8]"
"	      004b7c84    call dword ptr [eax+158h]"
);
// LINE 3069:
	asm( 
"	      004b7c8a    mov eax,[ebp-8]"
"	      004b7c8d    push eax"
"	      004b7c8e    call 004A7470h"
"	      004b7c93    add esp,4"
);
// LINE 3070:
	asm( 
"	      004b7c96    mov eax,[ebp-8]"
"	      004b7c99    push eax"
"	      004b7c9a    call 004A7075h"
"	      004b7c9f    add esp,4"
);
// LINE 3071:
	asm( 
"	      004b7ca2    mov eax,[ebp-8]"
"	      004b7ca5    push eax"
"	      004b7ca6    mov eax,[ebp-8]"
"	      004b7ca9    mov eax,[eax]"
"	      004b7cab    mov ecx,[ebp-8]"
"	      004b7cae    call dword ptr [eax+98h]"
);
// LINE 3072:
	asm( 
"	      004b7cb4    mov eax,[ebp-4]"
"	      004b7cb7    jmp near ptr 004B7CBCh"
);
// LINE 3073:
	asm( 
"	      004b7cbc    pop edi"
"	      004b7cbd    pop esi"
"	      004b7cbe    pop ebx"
"	      004b7cbf    leave"
"	      004b7cc0    ret"
);
}

// FUNCTION: SIMCOPTER 0x004b7cc1
long PopupMenuWindow::DoKeyDown(long, char) {
// LINE 3080:
	asm( 
"	      004b7cc1    push ebp"
"	      004b7cc2    mov ebp,esp"
"	      004b7cc4    sub esp,4"
"	      004b7cc7    push ebx"
"	      004b7cc8    push esi"
"	      004b7cc9    push edi"
"	      004b7cca    mov [ebp-4],ecx"
);
// LINE 3081:
	asm( 
"	      004b7ccd    cmp dword ptr [ebp+8],0Dh"
"	      004b7cd1    je near ptr 004B7CE1h"
"	      004b7cd7    cmp dword ptr [ebp+8],1Bh"
"	      004b7cdb    jne near ptr 004B7D76h"
);
// LINE 3082:
	asm( 
"	      004b7ce1    mov eax,[ebp-4]"
"	      004b7ce4    push eax"
"	      004b7ce5    mov eax,[ebp-4]"
"	      004b7ce8    mov eax,[eax]"
"	      004b7cea    mov ecx,[ebp-4]"
"	      004b7ced    call dword ptr [eax+9Ch]"
);
// LINE 3083:
	asm( 
"	      004b7cf3    mov eax,[ebp-4]"
"	      004b7cf6    cmp dword ptr [eax+38h],0"
"	      004b7cfa    je near ptr 004B7D61h"
);
// LINE 3084:
	asm( 
"	      004b7d00    cmp dword ptr [ebp+8],0Dh"
"	      004b7d04    jne near ptr 004B7D38h"
);
// LINE 3085:
	asm( 
"	      004b7d0a    mov eax,[ebp-4]"
"	      004b7d0d    add eax,0ACh"
"	      004b7d12    push eax"
"	      004b7d13    push 10003h"
"	      004b7d18    mov eax,[ebp-4]"
"	      004b7d1b    mov eax,[eax+4]"
"	      004b7d1e    push eax"
"	      004b7d1f    mov eax,[ebp-4]"
"	      004b7d22    push eax"
"	      004b7d23    mov eax,[ebp-4]"
"	      004b7d26    mov ecx,[ebp-4]"
"	      004b7d29    mov ecx,[ecx+38h]"
"	      004b7d2c    mov edx,[ecx]"
"	      004b7d2e    mov ecx,[eax+38h]"
"	      004b7d31    call dword ptr [edx]"
);
// LINE 3086:
	asm( 
"	      004b7d33    jmp near ptr 004B7D61h"
);
// LINE 3087:
	asm( 
"	      004b7d38    mov eax,[ebp-4]"
"	      004b7d3b    add eax,0ACh"
"	      004b7d40    push eax"
"	      004b7d41    push 10004h"
"	      004b7d46    mov eax,[ebp-4]"
"	      004b7d49    mov eax,[eax+4]"
"	      004b7d4c    push eax"
"	      004b7d4d    mov eax,[ebp-4]"
"	      004b7d50    push eax"
"	      004b7d51    mov eax,[ebp-4]"
"	      004b7d54    mov ecx,[ebp-4]"
"	      004b7d57    mov ecx,[ecx+38h]"
"	      004b7d5a    mov edx,[ecx]"
"	      004b7d5c    mov ecx,[eax+38h]"
"	      004b7d5f    call dword ptr [edx]"
);
// LINE 3089:
	asm( 
"	      004b7d61    mov eax,[ebp-4]"
"	      004b7d64    mov eax,[eax]"
"	      004b7d66    mov ecx,[ebp-4]"
"	      004b7d69    call dword ptr [eax+6Ch]"
);
// LINE 3090:
	asm( 
"	      004b7d6c    mov eax,1"
"	      004b7d71    jmp near ptr 004B7D8Bh"
);
// LINE 3092:
	asm( 
"	      004b7d76    mov eax,[ebp+0Ch]"
"	      004b7d79    push eax"
"	      004b7d7a    mov eax,[ebp+8]"
"	      004b7d7d    push eax"
"	      004b7d7e    mov ecx,[ebp-4]"
"	      004b7d81    call 004B6AC9h"
"	      004b7d86    jmp near ptr 004B7D8Bh"
);
// LINE 3093:
	asm( 
"	      004b7d8b    pop edi"
"	      004b7d8c    pop esi"
"	      004b7d8d    pop ebx"
"	      004b7d8e    leave"
"	      004b7d8f    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b7d92
long PopupMenuWindow::DoCursorDown(long, long, unsigned long) {
// LINE 3104:
	asm( 
"	      004b7d92    push ebp"
"	      004b7d93    mov ebp,esp"
"	      004b7d95    sub esp,4"
"	      004b7d98    push ebx"
"	      004b7d99    push esi"
"	      004b7d9a    push edi"
"	      004b7d9b    mov [ebp-4],ecx"
);
// LINE 3105:
	asm( 
"	      004b7d9e    cmp dword ptr [ebp+8],0"
"	      004b7da2    jl near ptr 004B7DE6h"
"	      004b7da8    cmp dword ptr [ebp+0Ch],0"
"	      004b7dac    jl near ptr 004B7DE6h"
"	      004b7db2    jmp near ptr 004B7DB7h"
"	      004b7db7    mov eax,[ebp-4]"
"	      004b7dba    mov eax,[eax+18h]"
"	      004b7dbd    mov ecx,[ebp-4]"
"	      004b7dc0    sub eax,[ecx+10h]"
"	      004b7dc3    cmp eax,[ebp+8]"
"	      004b7dc6    jl near ptr 004B7DE6h"
"	      004b7dcc    jmp near ptr 004B7DD1h"
"	      004b7dd1    mov eax,[ebp-4]"
"	      004b7dd4    mov eax,[eax+1Ch]"
"	      004b7dd7    mov ecx,[ebp-4]"
"	      004b7dda    sub eax,[ecx+14h]"
"	      004b7ddd    cmp eax,[ebp+0Ch]"
"	      004b7de0    jge near ptr 004B7E43h"
);
// LINE 3106:
	asm( 
"	      004b7de6    mov eax,[ebp-4]"
"	      004b7de9    push eax"
"	      004b7dea    mov eax,[ebp-4]"
"	      004b7ded    mov eax,[eax]"
"	      004b7def    mov ecx,[ebp-4]"
"	      004b7df2    call dword ptr [eax+9Ch]"
);
// LINE 3107:
	asm( 
"	      004b7df8    mov eax,[ebp-4]"
"	      004b7dfb    cmp dword ptr [eax+38h],0"
"	      004b7dff    je near ptr 004B7E2Eh"
);
// LINE 3108:
	asm( 
"	      004b7e05    mov eax,[ebp-4]"
"	      004b7e08    add eax,0ACh"
"	      004b7e0d    push eax"
"	      004b7e0e    push 10004h"
"	      004b7e13    mov eax,[ebp-4]"
"	      004b7e16    mov eax,[eax+4]"
"	      004b7e19    push eax"
"	      004b7e1a    mov eax,[ebp-4]"
"	      004b7e1d    push eax"
"	      004b7e1e    mov eax,[ebp-4]"
"	      004b7e21    mov ecx,[ebp-4]"
"	      004b7e24    mov ecx,[ecx+38h]"
"	      004b7e27    mov edx,[ecx]"
"	      004b7e29    mov ecx,[eax+38h]"
"	      004b7e2c    call dword ptr [edx]"
);
// LINE 3109:
	asm( 
"	      004b7e2e    mov eax,[ebp-4]"
"	      004b7e31    mov eax,[eax]"
"	      004b7e33    mov ecx,[ebp-4]"
"	      004b7e36    call dword ptr [eax+6Ch]"
);
// LINE 3110:
	asm( 
"	      004b7e39    mov eax,1"
"	      004b7e3e    jmp near ptr 004B7E5Ch"
);
// LINE 3112:
	asm( 
"	      004b7e43    mov eax,[ebp+10h]"
"	      004b7e46    push eax"
"	      004b7e47    mov eax,[ebp+0Ch]"
"	      004b7e4a    push eax"
"	      004b7e4b    mov eax,[ebp+8]"
"	      004b7e4e    push eax"
"	      004b7e4f    mov ecx,[ebp-4]"
"	      004b7e52    call 004B6B8Eh"
"	      004b7e57    jmp near ptr 004B7E5Ch"
);
// LINE 3113:
	asm( 
"	      004b7e5c    pop edi"
"	      004b7e5d    pop esi"
"	      004b7e5e    pop ebx"
"	      004b7e5f    leave"
"	      004b7e60    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b7e63
long PopupMenuWindow::DoCursorUp(long, long, unsigned long) {
// LINE 3120:
	asm( 
"	      004b7e63    push ebp"
"	      004b7e64    mov ebp,esp"
"	      004b7e66    sub esp,4"
"	      004b7e69    push ebx"
"	      004b7e6a    push esi"
"	      004b7e6b    push edi"
"	      004b7e6c    mov [ebp-4],ecx"
);
// LINE 3122:
	asm( 
"	      004b7e6f    mov eax,[ebp-4]"
"	      004b7e72    cmp dword ptr [eax+38h],0"
"	      004b7e76    je near ptr 004B7EC3h"
"	      004b7e7c    mov eax,[ebp+0Ch]"
"	      004b7e7f    push eax"
"	      004b7e80    mov eax,[ebp+8]"
"	      004b7e83    push eax"
"	      004b7e84    mov eax,[ebp-4]"
"	      004b7e87    mov eax,[eax]"
"	      004b7e89    mov ecx,[ebp-4]"
"	      004b7e8c    call dword ptr [eax+0A8h]"
"	      004b7e92    test eax,eax"
"	      004b7e94    je near ptr 004B7EC3h"
);
// LINE 3123:
	asm( 
"	      004b7e9a    mov eax,[ebp-4]"
"	      004b7e9d    add eax,0ACh"
"	      004b7ea2    push eax"
"	      004b7ea3    push 10003h"
"	      004b7ea8    mov eax,[ebp-4]"
"	      004b7eab    mov eax,[eax+4]"
"	      004b7eae    push eax"
"	      004b7eaf    mov eax,[ebp-4]"
"	      004b7eb2    push eax"
"	      004b7eb3    mov eax,[ebp-4]"
"	      004b7eb6    mov ecx,[ebp-4]"
"	      004b7eb9    mov ecx,[ecx+38h]"
"	      004b7ebc    mov edx,[ecx]"
"	      004b7ebe    mov ecx,[eax+38h]"
"	      004b7ec1    call dword ptr [edx]"
);
// LINE 3124:
	asm( 
"	      004b7ec3    mov eax,[ebp-4]"
"	      004b7ec6    mov eax,[eax]"
"	      004b7ec8    mov ecx,[ebp-4]"
"	      004b7ecb    call dword ptr [eax+6Ch]"
);
// LINE 3125:
	asm( 
"	      004b7ece    mov eax,1"
"	      004b7ed3    jmp near ptr 004B7ED8h"
);
// LINE 3126:
	asm( 
"	      004b7ed8    pop edi"
"	      004b7ed9    pop esi"
"	      004b7eda    pop ebx"
"	      004b7edb    leave"
"	      004b7edc    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x004b7edf
long PopupMenuWindow::DoCursorMove(long, long) {
// LINE 3138:
	asm( 
"	      004b7edf    push ebp"
"	      004b7ee0    mov ebp,esp"
"	      004b7ee2    sub esp,4"
"	      004b7ee5    push ebx"
"	      004b7ee6    push esi"
"	      004b7ee7    push edi"
"	      004b7ee8    mov [ebp-4],ecx"
);
// LINE 3139:
	asm( 
"	      004b7eeb    mov ecx,[ebp-4]"
"	      004b7eee    mov eax,[ebp+0Ch]"
"	      004b7ef1    cdq"
"	      004b7ef2    idiv dword ptr [ecx+0B8h]"
"	      004b7ef8    push eax"
"	      004b7ef9    mov eax,[ebp-4]"
"	      004b7efc    mov eax,[eax]"
"	      004b7efe    mov ecx,[ebp-4]"
"	      004b7f01    call dword ptr [eax+0DCh]"
);
// LINE 3140:
	asm( 
"	      004b7f07    mov eax,1"
"	      004b7f0c    jmp near ptr 004B7F11h"
);
// LINE 3141:
	asm( 
"	      004b7f11    pop edi"
"	      004b7f12    pop esi"
"	      004b7f13    pop ebx"
"	      004b7f14    leave"
"	      004b7f15    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b7f18
int32_t PopupMenuWindow::RemoveStringAtIndex(long) {
// LINE 3147:
	asm( 
"	      004b7f18    push ebp"
"	      004b7f19    mov ebp,esp"
"	      004b7f1b    sub esp,8"
"	      004b7f1e    push ebx"
"	      004b7f1f    push esi"
"	      004b7f20    push edi"
"	      004b7f21    mov [ebp-8],ecx"
);
// LINE 3150:
	asm( 
"	      004b7f24    mov eax,[ebp-8]"
"	      004b7f27    dec dword ptr [eax+0B0h]"
);
// LINE 3151:
	asm( 
"	      004b7f2d    mov eax,[ebp+8]"
"	      004b7f30    push eax"
"	      004b7f31    mov ecx,[ebp-8]"
"	      004b7f34    call 004B6266h"
"	      004b7f39    mov [ebp-4],eax"
);
// LINE 3152:
	asm( 
"	      004b7f3c    mov eax,[ebp-8]"
"	      004b7f3f    mov eax,[eax]"
"	      004b7f41    mov ecx,[ebp-8]"
"	      004b7f44    call dword ptr [eax+158h]"
);
// LINE 3153:
	asm( 
"	      004b7f4a    mov eax,[ebp-4]"
"	      004b7f4d    jmp near ptr 004B7F52h"
);
// LINE 3154:
	asm( 
"	      004b7f52    pop edi"
"	      004b7f53    pop esi"
"	      004b7f54    pop ebx"
"	      004b7f55    leave"
"	      004b7f56    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x004b7f59
int32_t PopupMenuWindow::InsertStringAtIndex(long, class basic_string<char>&) {
// LINE 3160:
	asm( 
"	      004b7f59    push ebp"
"	      004b7f5a    mov ebp,esp"
"	      004b7f5c    sub esp,8"
"	      004b7f5f    push ebx"
"	      004b7f60    push esi"
"	      004b7f61    push edi"
"	      004b7f62    mov [ebp-8],ecx"
);
// LINE 3163:
	asm( 
"	      004b7f65    mov eax,[ebp-8]"
"	      004b7f68    inc dword ptr [eax+0B0h]"
);
// LINE 3164:
	asm( 
"	      004b7f6e    mov eax,[ebp+0Ch]"
"	      004b7f71    push eax"
"	      004b7f72    mov eax,[ebp+8]"
"	      004b7f75    push eax"
"	      004b7f76    mov ecx,[ebp-8]"
"	      004b7f79    call 004B6585h"
"	      004b7f7e    mov [ebp-4],eax"
);
// LINE 3165:
	asm( 
"	      004b7f81    mov eax,[ebp-8]"
"	      004b7f84    mov eax,[eax]"
"	      004b7f86    mov ecx,[ebp-8]"
"	      004b7f89    call dword ptr [eax+158h]"
);
// LINE 3166:
	asm( 
"	      004b7f8f    mov eax,[ebp-4]"
"	      004b7f92    jmp near ptr 004B7F97h"
);
// LINE 3167:
	asm( 
"	      004b7f97    pop edi"
"	      004b7f98    pop esi"
"	      004b7f99    pop ebx"
"	      004b7f9a    leave"
"	      004b7f9b    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x004b7f9e
void PopupMenuWindow::ResizeWindowToFitMenuItems() {
// LINE 3173:
	asm( 
"	      004b7f9e    push ebp"
"	      004b7f9f    mov ebp,esp"
"	      004b7fa1    sub esp,74h"
"	      004b7fa4    push ebx"
"	      004b7fa5    push esi"
"	      004b7fa6    push edi"
"	      004b7fa7    mov [ebp-74h],ecx"
);
// LINE 3174:
	asm( 
"	      004b7faa    mov dword ptr [ebp-20h],1"
);
// LINE 3177:
	asm( 
"	      004b7fb1    mov eax,[ebp-74h]"
"	      004b7fb4    mov eax,[eax+74h]"
"	      004b7fb7    mov eax,[eax]"
"	      004b7fb9    mov [ebp-38h],eax"
"	      004b7fbc    mov eax,[ebp-38h]"
"	      004b7fbf    mov [ebp-1Ch],eax"
"	      004b7fc2    jmp near ptr 004B7FC7h"
"	      004b7fc7    jmp near ptr 004B7FCCh"
"	      004b7fcc    mov eax,[ebp-74h]"
"	      004b7fcf    mov eax,[eax+14h]"
"	      004b7fd2    inc eax"
"	      004b7fd3    mov [ebp-40h],eax"
"	      004b7fd6    mov eax,[ebp-74h]"
"	      004b7fd9    mov eax,[eax+10h]"
"	      004b7fdc    add eax,1"
"	      004b7fdf    mov [ebp-44h],eax"
"	      004b7fe2    mov eax,[ebp-74h]"
"	      004b7fe5    mov eax,[eax+14h]"
"	      004b7fe8    mov [ebp-48h],eax"
"	      004b7feb    mov eax,[ebp-74h]"
"	      004b7fee    mov eax,[eax+10h]"
"	      004b7ff1    mov [ebp-4Ch],eax"
);
// LINE 3178:
	asm( 
"	      004b7ff4    jmp near ptr 004B7FF9h"
"	      004b7ff9    mov eax,[ebp-4Ch]"
"	      004b7ffc    mov [ebp-10h],eax"
"	      004b7fff    mov eax,[ebp-48h]"
"	      004b8002    mov [ebp-0Ch],eax"
"	      004b8005    mov eax,[ebp-44h]"
"	      004b8008    mov [ebp-8],eax"
"	      004b800b    mov eax,[ebp-40h]"
"	      004b800e    mov [ebp-4],eax"
"	      004b8011    jmp near ptr 004B8016h"
);
// LINE 3180:
	asm( 
"	      004b8016    mov eax,[ebp-74h]"
"	      004b8019    mov eax,[eax+74h]"
"	      004b801c    mov [ebp-2Ch],eax"
"	      004b801f    mov eax,[ebp-2Ch]"
"	      004b8022    mov [ebp-24h],eax"
"	      004b8025    jmp near ptr 004B802Ah"
"	      004b802a    jmp near ptr 004B802Fh"
"	      004b802f    mov eax,[ebp-24h]"
"	      004b8032    cmp [ebp-1Ch],eax"
"	      004b8035    jne near ptr 004B8045h"
"	      004b803b    jmp near ptr 004B8059h"
"	      004b8040    jmp near ptr 004B8045h"
"	      004b8045    jmp near ptr 004B8054h"
"	      004b804a    cmp dword ptr [ebp-30h],0"
"	      004b804e    jne near ptr 004B8059h"
"	      004b8054    jmp near ptr 004B805Eh"
"	      004b8059    jmp near ptr 004B81CAh"
"	      004b805e    jmp near ptr 004B806Dh"
"	      004b8063    cmp dword ptr [ebp-34h],0"
"	      004b8067    je near ptr 004B81CAh"
);
// LINE 3181:
	asm( 
"	      004b806d    jmp near ptr 004B8072h"
"	      004b8072    mov eax,[ebp-1Ch]"
"	      004b8075    add eax,8"
"	      004b8078    mov [ebp-70h],eax"
"	      004b807b    mov eax,[ebp-70h]"
"	      004b807e    cmp dword ptr [eax],0"
"	      004b8081    je near ptr 004B80A1h"
"	      004b8087    mov eax,[ebp-70h]"
"	      004b808a    mov eax,[eax]"
"	      004b808c    mov [ebp-50h],eax"
"	      004b808f    mov eax,[ebp-50h]"
"	      004b8092    mov [ebp-58h],eax"
"	      004b8095    mov eax,[ebp-58h]"
"	      004b8098    push eax"
"	      004b8099    call 0056A740h"
"	      004b809e    add esp,4"
"	      004b80a1    jmp near ptr 004B80A6h"
"	      004b80a6    mov eax,[ebp-70h]"
"	      004b80a9    mov eax,[eax+4]"
"	      004b80ac    mov eax,[eax+4]"
"	      004b80af    inc eax"
"	      004b80b0    push eax"
"	      004b80b1    call 0056A600h"
"	      004b80b6    add esp,4"
"	      004b80b9    mov ecx,[ebp-70h]"
"	      004b80bc    mov [ecx],eax"
"	      004b80be    jmp near ptr 004B80C3h"
"	      004b80c3    mov eax,[ebp-70h]"
"	      004b80c6    mov eax,[eax+4]"
"	      004b80c9    cmp dword ptr [eax+4],0"
"	      004b80cd    je near ptr 004B813Bh"
"	      004b80d3    jmp near ptr 004B80D8h"
"	      004b80d8    jmp near ptr 004B80DDh"
"	      004b80dd    mov eax,[ebp-70h]"
"	      004b80e0    mov eax,[eax+4]"
"	      004b80e3    cmp dword ptr [eax+4],0"
"	      004b80e7    je near ptr 004B8102h"
"	      004b80ed    mov eax,[ebp-70h]"
"	      004b80f0    mov eax,[eax+4]"
"	      004b80f3    mov eax,[eax]"
"	      004b80f5    mov [ebp-64h],eax"
"	      004b80f8    jmp near ptr 004B810Eh"
"	      004b80fd    jmp near ptr 004B810Eh"
"	      004b8102    mov dword ptr [ebp-64h],0"
"	      004b8109    jmp near ptr 004B810Eh"
"	      004b810e    mov eax,[ebp-70h]"
"	      004b8111    mov eax,[eax+4]"
"	      004b8114    mov eax,[eax+4]"
"	      004b8117    mov [ebp-68h],eax"
"	      004b811a    mov eax,[ebp-70h]"
"	      004b811d    mov eax,[eax]"
"	      004b811f    mov [ebp-6Ch],eax"
"	      004b8122    mov eax,[ebp-68h]"
"	      004b8125    push eax"
"	      004b8126    mov eax,[ebp-64h]"
"	      004b8129    push eax"
"	      004b812a    mov eax,[ebp-6Ch]"
"	      004b812d    push eax"
"	      004b812e    call 0056A800h"
"	      004b8133    add esp,0Ch"
"	      004b8136    jmp near ptr 004B813Bh"
"	      004b813b    jmp near ptr 004B8140h"
"	      004b8140    mov byte ptr [ebp-54h],0"
"	      004b8144    jmp near ptr 004B8149h"
"	      004b8149    lea eax,[ebp-54h]"
"	      004b814c    mov [ebp-5Ch],eax"
"	      004b814f    jmp near ptr 004B8154h"
"	      004b8154    mov eax,[ebp-70h]"
"	      004b8157    mov eax,[eax+4]"
"	      004b815a    mov eax,[eax+4]"
"	      004b815d    mov ecx,[ebp-70h]"
"	      004b8160    add eax,[ecx]"
"	      004b8162    mov [ebp-60h],eax"
"	      004b8165    mov eax,[ebp-5Ch]"
"	      004b8168    mov al,[eax]"
"	      004b816a    mov ecx,[ebp-60h]"
"	      004b816d    mov [ecx],al"
"	      004b816f    jmp near ptr 004B8174h"
"	      004b8174    jmp near ptr 004B8179h"
"	      004b8179    lea eax,[ebp-14h]"
"	      004b817c    push eax"
"	      004b817d    lea eax,[ebp-18h]"
"	      004b8180    push eax"
"	      004b8181    mov eax,[ebp-70h]"
"	      004b8184    mov eax,[eax]"
"	      004b8186    push eax"
"	      004b8187    mov ecx,[ebp-74h]"
"	      004b818a    add ecx,8Ch"
"	      004b8190    call 004A02B1h"
);
// LINE 3182:
	asm( 
"	      004b8195    mov eax,[ebp-20h]"
"	      004b8198    cmp [ebp-18h],eax"
"	      004b819b    jle near ptr 004B81A7h"
);
// LINE 3183:
	asm( 
"	      004b81a1    mov eax,[ebp-18h]"
"	      004b81a4    mov [ebp-20h],eax"
);
// LINE 3184:
	asm( 
"	      004b81a7    mov eax,[ebp-1Ch]"
"	      004b81aa    mov [ebp-3Ch],eax"
"	      004b81ad    mov eax,[ebp-1Ch]"
"	      004b81b0    mov eax,[eax]"
"	      004b81b2    mov [ebp-1Ch],eax"
"	      004b81b5    jmp near ptr 004B81BAh"
"	      004b81ba    mov eax,[ebp-3Ch]"
"	      004b81bd    mov [ebp-28h],eax"
"	      004b81c0    jmp near ptr 004B81C5h"
);
// LINE 3185:
	asm( 
"	      004b81c5    jmp near ptr 004B8016h"
);
// LINE 3186:
	asm( 
"	      004b81ca    mov eax,[ebp-10h]"
"	      004b81cd    add eax,[ebp-20h]"
"	      004b81d0    add eax,0Ah"
"	      004b81d3    mov [ebp-8],eax"
);
// LINE 3187:
	asm( 
"	      004b81d6    jmp near ptr 004B81DBh"
"	      004b81db    mov eax,[ebp-74h]"
"	      004b81de    mov eax,[eax+78h]"
"	      004b81e1    mov ecx,[ebp-74h]"
"	      004b81e4    imul eax,[ecx+0B8h]"
"	      004b81eb    add eax,[ebp-0Ch]"
"	      004b81ee    mov [ebp-4],eax"
);
// LINE 3188:
	asm( 
"	      004b81f1    lea eax,[ebp-10h]"
"	      004b81f4    push eax"
"	      004b81f5    mov eax,[ebp-74h]"
"	      004b81f8    mov ecx,[eax+3Ch]"
"	      004b81fb    call 004A4F5Ch"
);
// LINE 3189:
	asm( 
"	      004b8200    lea eax,[ebp-10h]"
"	      004b8203    mov ecx,[ebp-74h]"
"	      004b8206    add ecx,10h"
"	      004b8209    mov edx,[eax]"
"	      004b820b    mov [ecx],edx"
"	      004b820d    mov edx,[eax+4]"
"	      004b8210    mov [ecx+4],edx"
"	      004b8213    mov edx,[eax+8]"
"	      004b8216    mov [ecx+8],edx"
"	      004b8219    mov eax,[eax+0Ch]"
"	      004b821c    mov [ecx+0Ch],eax"
"	      004b821f    mov eax,[ebp-74h]"
"	      004b8222    mov eax,[eax]"
"	      004b8224    mov ecx,[ebp-74h]"
"	      004b8227    call dword ptr [eax+20h]"
"	      004b822a    push 1"
"	      004b822c    push 1"
"	      004b822e    mov eax,[ebp-74h]"
"	      004b8231    mov eax,[eax]"
"	      004b8233    mov ecx,[ebp-74h]"
"	      004b8236    call dword ptr [eax+30h]"
"	      004b8239    jmp near ptr 004B823Eh"
);
// LINE 3190:
	asm( 
"	      004b823e    jmp near ptr 004B8243h"
"	      004b8243    pop edi"
"	      004b8244    pop esi"
"	      004b8245    pop ebx"
"	      004b8246    leave"
"	      004b8247    ret"
);
}



// Contribution: 1:000b7250-000b728d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8250
// BoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7290-000b72db Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8290
// TextWindow::`scalar deleting destructor'



// Contribution: 1:000b72e0-000b731d Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b82e0
// ButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b7320-000b7362 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8320
// CheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7370-000b73a8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8370
// RadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:000b73b0-000b758f Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b83b0
// ButtonGroup::`scalar deleting destructor'



// Contribution: 1:000b7590-000b75c8 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8590
// SliderWindow::`scalar deleting destructor'



// Contribution: 1:000b75d0-000b7612 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b85d0
// ScrollBarWindow::`scalar deleting destructor'



// Contribution: 1:000b7620-000b785e Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8620
// ListBoxWindow::`scalar deleting destructor'



// Contribution: 1:000b7860-000b7947 Module: 5, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000b7950-000b7b93 Module: 5, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x004b8950
// PopupMenuWindow::`scalar deleting destructor'



// Contribution: 1:000b7ba0-000b7c08 Module: 5, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000b7c10-000b803e Module: 5, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000029c0-00002a8b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000029c0
// ??_7BoxWindow@@6B@


// Contribution: 2:00002a90-00002b77 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002a90
// ??_7TextWindow@@6B@


// Contribution: 2:00002b78-00002c53 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002b78
// ??_7ButtonWindow@@6B@


// Contribution: 2:00002c58-00002d33 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002c58
// ??_7CheckBoxWindow@@6B@


// Contribution: 2:00002d38-00002e1b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002d38
// ??_7RadioButtonWindow@@6B@


// Contribution: 2:00002e20-00002ee3 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002e20
// ??_7ButtonGroup@@6B@


// Contribution: 2:00002ee8-00002fbf Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00002ee8
// ??_7SliderWindow@@6B@
// GLOBAL: SIMCOPTER 0x00002fc0
// ??_7ScrollBarWindow@@6B@


// Contribution: 2:00002fc0-000030c7 Module: 5, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000030c8-0000321f Module: 5, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000030c8
// ??_7ListBoxWindow@@6B@
// GLOBAL: SIMCOPTER 0x00003220
// ??_7PopupMenuWindow@@6B@


// Contribution: 2:00003220-0000337b Module: 5, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:00003ba0-00003c2e Module: 5, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x00003ba0
// SZ_DEFAULT_BUTTON_IMAGE_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003ba4
// SZ_DEFAULT_CHECKBOX_IMAGE_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003ba8
// SZ_DEFAULT_RADIO_IMAGE_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003bac
// SZ_SLIDER_THUMB_IMAGE_V_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003bb0
// SZ_SLIDER_THUMB_IMAGE_H_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003bb4
// SZ_SLIDER_BACKGROUND_IMAGE_V_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003bb8
// SZ_SLIDER_BACKGROUND_IMAGE_H_FILE_NAME
// GLOBAL: SIMCOPTER 0x00003bbc
// SZ_DEFAULT_SCROLLBAR_SLIDER_IMAGE_FILE_NAME


// Contribution: 3:00003c30-00003c33 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00003c30
// list<RadioButtonWindow *>::number_of_lists
// GLOBAL: SIMCOPTER 0x00003c34
// list<RadioButtonWindow *>::last


// Contribution: 3:00003c34-00003c37 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00003c38
// list<RadioButtonWindow *>::next_avail


// Contribution: 3:00003c38-00003c3b Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00003c3c
// list<RadioButtonWindow *>::free_list


// Contribution: 3:00003c3c-00003c3f Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 


// Contribution: 3:00003c40-00003c43 Module: 5, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00003c40
// list<RadioButtonWindow *>::buffer_list
// GLOBAL: SIMCOPTER 0x00003c44
// SZ_HOURGLASS_VIDEO_FILE_NAME
