// Module: Fileserv.obj
// Source: C:\Copter\source\sparkal\Fileserv.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class FileServices;
class FileServices{ // packed(0x74 bytes) TI: 0x1f25
public:
	void FileServices();
	int32_t Initialize();
	int32_t IsFileAvailable(char *);
	int32_t GetPathForFile(int32_t, int32_t, char *, char *);
	int32_t GetPathForFileString(int32_t, int32_t, /*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&);
	void FindLocalPath();
	int32_t FindRemotePath();
	int32_t ValidateRemotePath();
	void RefreshLocalPathCache();
	void RefreshLocalPathCache(/*packed*/ class basic_string<char>&);
	int32_t CopyFileFromRemoteToLocal(char *);
	int32_t IsFileAvailableLocally(char *);
	int32_t IsFileAvailableRemotely(char *);
	enum AppBaseType {
		nAppBaseTypeUnknown = 0,
		nAppBaseTypeLocal = 1,
		nAppBaseTypeRemote = 2,
	};
public:
	/*+0x0*/   enum FileServices::AppBaseType myAppBaseType;
	/*+0x4*/   /*packed*/ class basic_string<char> sLocalDirectoryBase; // 0x8 bytes
	/*+0xc*/   /*packed*/ class basic_string<char> sRemoteDirectoryBase; // 0x8 bytes
	/*+0x14*/  /*packed*/ class basic_string<char> sDirs[12]; // 0x60 bytes
};

// Type: void ();

// Type: void;

// Type: int32_t;

// Type: char *;

// Type: /*packed*/ class FileServices (forward reference);
class FileServices{ // packed(0x74 bytes) TI: 0x1f25
public:
	void FileServices();
	int32_t Initialize();
	int32_t IsFileAvailable(char *);
	int32_t GetPathForFile(int32_t, int32_t, char *, char *);
	int32_t GetPathForFileString(int32_t, int32_t, /*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&);
	void FindLocalPath();
	int32_t FindRemotePath();
	int32_t ValidateRemotePath();
	void RefreshLocalPathCache();
	void RefreshLocalPathCache(/*packed*/ class basic_string<char>&);
	int32_t CopyFileFromRemoteToLocal(char *);
	int32_t IsFileAvailableLocally(char *);
	int32_t IsFileAvailableRemotely(char *);
	enum AppBaseType {
		nAppBaseTypeUnknown = 0,
		nAppBaseTypeLocal = 1,
		nAppBaseTypeRemote = 2,
	};
public:
	/*+0x0*/   enum FileServices::AppBaseType myAppBaseType;
	/*+0x4*/   /*packed*/ class basic_string<char> sLocalDirectoryBase; // 0x8 bytes
	/*+0xc*/   /*packed*/ class basic_string<char> sRemoteDirectoryBase; // 0x8 bytes
	/*+0x14*/  /*packed*/ class basic_string<char> sDirs[12]; // 0x60 bytes
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: uint32_t;

// Type: /*packed*/ class PFile;
// VTABLE: COPTER_D 0x00590468
class PFile{ // packed(0x110 bytes) TI: 0x453c
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const /*packed*/ class PFile&);
	void PFile(int32_t);
	void PFile();
	virtual void ~PFile(); // vtable+0x0
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	/*+0x4*/   char szFilePath[260]; // 0x104 bytes
	/*+0x108*/ int32_t Handle;
private:
	/*+0x10c*/ int32_t ShouldClose;
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*unpacked*/ class Directory (forward reference);
// Directory Class implementation not found

// Type: /*packed*/ class list<basic_string<char>>;
class list<basic_string<char>>{ // packed(0x8 bytes) TI: 0x1cb1
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
	};
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static /*packed*/ class allocator<basic_string<char>> value_allocator;
	using value_type = /*packed*/ class basic_string<char>;
	using value_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using list_node_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node>;
	using link_type = /*packed*/ struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<basic_string<char>>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<basic_string<char>>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *free_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *next_avail;
	static /*packed*/ struct list<basic_string<char>>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<basic_string<char>>::list_node* get_node();
	void put_node(/*packed*/ struct list<basic_string<char>>::list_node*);
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cd3
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator++();
		/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cc6
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const /*packed*/ class list<basic_string<char>>&);
	void list<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>::const_iterator begin();
	/*packed*/ class list<basic_string<char>>::iterator begin();
	/*packed*/ class list<basic_string<char>>::const_iterator end();
	/*packed*/ class list<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void swap(/*packed*/ class list<basic_string<char>>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::const_iterator, /*packed*/ class list<basic_string<char>>::const_iterator);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class list<basic_string<char>>::iterator insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void erase(/*packed*/ class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>& operator=(const /*packed*/ class list<basic_string<char>>&);
protected:
	void transfer(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
public:
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&);
	void remove(const /*packed*/ class basic_string<char>&);
	void unique();
	void merge(/*packed*/ class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: char;

// Type: /*packed*/ struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x1847
};



// Contribution: 1:00090180-000943f1 Module: 21, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00491180
static void $E32() {

	__asm        call   $E29;
	__asm        call   $E31;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0049119a
static void $E29() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5b;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T4e;
_T4e:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    gFileServices.sLocalDirectoryBase.reference, eax;
	__asm        jmp    _T65;
_T5b:
	gFileServices.sLocalDirectoryBase.reference = 0x0;
_T65:
	gFileServices.sLocalDirectoryBase.c_str_ptr = 0x0;
	__asm        jmp    _T74;
_T74:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tc6;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb9;
_Tb9:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    gFileServices.sRemoteDirectoryBase.reference, eax;
	__asm        jmp    _Td0;
_Tc6:
	gFileServices.sRemoteDirectoryBase.reference = 0x0;
_Td0:
	gFileServices.sRemoteDirectoryBase.c_str_ptr = 0x0;
	__asm        jmp    _Tdf;
_Tdf:
	__asm        mov    dword ptr [ebp-0x18], 0xC;
	__asm        mov    eax, 0x604C00;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
_Tf1:
	__asm        dec    dword ptr [ebp-0x18];
	__asm        js     _T10b;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tf1;
_T10b:
	__asm        jmp    _T110;
_T110:
	gFileServices.myAppBaseType = 0x0;
	__asm        jmp    _T11f;
_T11f:
	__asm        push   0x59A118;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A118;
	__asm        lea    ecx, gFileServices.sDirs[1].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T142;
_T142:
	__asm        jmp    _T147;
_T147:
	__asm        push   0x59A110;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A110;
	__asm        lea    ecx, gFileServices.sDirs[2].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T16a;
_T16a:
	__asm        jmp    _T16f;
_T16f:
	__asm        push   0x59A100;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A100;
	__asm        lea    ecx, gFileServices.sDirs[3].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T192;
_T192:
	__asm        jmp    _T197;
_T197:
	__asm        push   0x59A0F8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0F8;
	__asm        lea    ecx, gFileServices.sDirs[4].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1ba;
_T1ba:
	__asm        jmp    _T1bf;
_T1bf:
	__asm        push   0x59A0E8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0E8;
	__asm        lea    ecx, gFileServices.sDirs[5].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1e2;
_T1e2:
	__asm        jmp    _T1e7;
_T1e7:
	__asm        push   0x59A0E0;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0E0;
	__asm        lea    ecx, gFileServices.sDirs[6].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T20a;
_T20a:
	__asm        jmp    _T20f;
_T20f:
	__asm        push   0x59A0D8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0D8;
	__asm        lea    ecx, gFileServices.sDirs[7].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T232;
_T232:
	__asm        jmp    _T237;
_T237:
	__asm        push   0x59A0D0;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0D0;
	__asm        lea    ecx, gFileServices.sDirs[8].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T25a;
_T25a:
	__asm        jmp    _T25f;
_T25f:
	__asm        push   0x59A0CC;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0CC;
	__asm        lea    ecx, gFileServices.sDirs[10].c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T282;
_T282:
	__asm        jmp    _T287;
_T287:
	__asm        push   0x59A0C4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    _T2d3;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2d3;
_T2d3:
	__asm        jmp    _T2d8;
_T2d8:
	__asm        mov    eax, gFileServices.sDirs[11].reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T307;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T356;

	__asm        jmp    _T2f6;
_T2f6:
	__asm        mov    eax, gFileServices.sDirs[11].reference;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T356;
_T307:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T337;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0x59A0C4;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T33e;
_T337:
	__asm        mov    dword ptr [ebp-4], 0;
_T33e:
	__asm        lea    ecx, gFileServices.sDirs[11].c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-4];
	__asm        mov    gFileServices.sDirs[11].reference, eax;
	__asm        jmp    _T389;
_T356:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T389;

	__asm        jmp    _T365;
_T365:
	__asm        mov    eax, gFileServices.sDirs[11].reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0x59A0C4;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T389;
_T389:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, gFileServices.sDirs[11].reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T39a;
_T39a:
	__asm        jmp    _T39f;
_T39f:
	__asm        jmp    _T3a4;
_T3a4:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00491548
static void $E31() {

	__asm        push   0x491565;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00491565
static void $E30() {

	__asm        jmp    _T0e;
_T0e:
	__asm        mov    dword ptr [ebp-0x34], 0xC;
	__asm        mov    eax, 0x604C00;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x38], eax;
_T29:
	__asm        dec    dword ptr [ebp-0x34];
	__asm        js     _T43;

	__asm        sub    dword ptr [ebp-0x38], 8;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T29;
_T43:
	__asm        jmp    _T48;
_T48:
	__asm        mov    eax, gFileServices.sRemoteDirectoryBase.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, gFileServices.sRemoteDirectoryBase.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Td1;

	__asm        mov    eax, gFileServices.sRemoteDirectoryBase.reference;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Td1;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tb1;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Tb1:
	__asm        jmp    _Tb6;
_Tb6:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tcc;
_Tcc:
	__asm        jmp    _Td1;
_Td1:
	__asm        jmp    _Td6;
_Td6:
	__asm        cmp    gFileServices.sRemoteDirectoryBase.c_str_ptr, 0;
	__asm        je     _Tfd;

	__asm        mov    eax, gFileServices.sRemoteDirectoryBase.c_str_ptr;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tfd:
	__asm        jmp    _T102;
_T102:
	__asm        mov    eax, gFileServices.sLocalDirectoryBase.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, gFileServices.sLocalDirectoryBase.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T18b;

	__asm        mov    eax, gFileServices.sLocalDirectoryBase.reference;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T18b;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T16b;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T16b:
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T186;
_T186:
	__asm        jmp    _T18b;
_T18b:
	__asm        jmp    _T190;
_T190:
	__asm        cmp    gFileServices.sLocalDirectoryBase.c_str_ptr, 0;
	__asm        je     _T1b7;

	__asm        mov    eax, gFileServices.sLocalDirectoryBase.c_str_ptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	return;
}

// FUNCTION: COPTER_D 0x0049172b
int32_t GetPathForFile(int32_t nType, int32_t nLanguage, char * szFile, char * szPath) {
// LINE 26:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, nType;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFile;
	__asm        jmp    __RETURN;
// LINE 27:
__RETURN:
}

// FUNCTION: COPTER_D 0x00491755
int32_t FileServices::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0x8*/   int32_t bRemotePathFound;
	/*bp-0x10*/  /*packed*/ class basic_string<char> sErrorTitle; // 0x8 bytes
	/*bp-0x18*/  /*packed*/ class basic_string<char> sErrorText; // 0x8 bytes
	/*bp-0x1c*/  int32_t nMessageBoxReturnValue;

// LINE 42:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    sErrorText.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sErrorText.reference = 0x0;
_T6d:
	sErrorText.c_str_ptr = 0x0;
	__asm        jmp    _T79;
// LINE 43:
_T79:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _Tc9;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tbe;
_Tbe:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sErrorTitle.reference, eax;
	__asm        jmp    _Td0;
_Tc9:
	sErrorTitle.reference = 0x0;
_Td0:
	sErrorTitle.c_str_ptr = 0x0;
	__asm        jmp    _Tdc;
// LINE 45:
_Tdc:
	__asm        mov    eax, gszAppDirectory;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T10d;
_T10d:
	__asm        jmp    _T112;
// LINE 46:
_T112:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        cmp    eax, ecx;
	__asm        je     _T1d6;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T13f;
_T13f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T175;

	this->sRemoteDirectoryBase.reference = this->sLocalDirectoryBase.reference;
	this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T1d6;
_T175:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        je     _T1c9;

	__asm        jmp    _T197;
_T197:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2078];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T1d6;
_T1c9:
	this->sRemoteDirectoryBase.reference = 0x0;
_T1d6:
	__asm        jmp    _T1db;
// LINE 47:
_T1db:
	__asm        mov    ecx, this;
	__asm        call   FileServices::ValidateRemotePath;
	__asm        test   eax, eax;
	__asm        je     _T267;
// LINE 48:
	this->myAppBaseType = 0x2;
// LINE 49:
	__asm        mov    dword ptr [ebp-0x20], 1;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T22b;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T22b:
	__asm        jmp    _T230;
_T230:
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T25a;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T25a:
	__asm        jmp    _T25f;
_T25f:
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    __RETURN;
// LINE 51:
_T267:
	this->myAppBaseType = 0x1;
// LINE 54:
	__asm        mov    ecx, this;
	__asm        call   FileServices::FindRemotePath;
	__asm        test   eax, eax;
	__asm        jne    _T520;
// LINE 56:
_T286:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x24);
// LINE 57:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    _T342;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    _T2f4;
_T2f4:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T318;
_T318:
	__asm        jmp    _T31d;
_T31d:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T33d;
_T33d:
	__asm        jmp    _T370;
_T342:
	__asm        jmp    _T347;
_T347:
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T36b;
_T36b:
	__asm        jmp    _T370;
// LINE 58:
_T370:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x4);
// LINE 59:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2074], eax;
	__asm        cmp    dword ptr [ebp-0x2074], 0;
	__asm        jne    _T42c;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2074], eax;
	__asm        jmp    _T3de;
_T3de:
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T402;
_T402:
	__asm        jmp    _T407;
_T407:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T427;
_T427:
	__asm        jmp    _T45a;
_T42c:
	__asm        jmp    _T431;
_T431:
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T455;
_T455:
	__asm        jmp    _T45a;
// LINE 60:
_T45a:
	__asm        push   0x11;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
	__asm        mov    nMessageBoxReturnValue, eax;
// LINE 61:
	__asm        cmp    nMessageBoxReturnValue, 2;
	__asm        jne    _T508;
// LINE 62:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   basic_string<char>::operator=;
// LINE 63:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T4cc;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4cc:
	__asm        jmp    _T4d1;
_T4d1:
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T4fb;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4fb:
	__asm        jmp    _T500;
_T500:
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    __RETURN;
// LINE 65:
_T508:
	bRemotePathFound = this->FileServices::FindRemotePath();
// LINE 66:
	__asm        cmp    bRemotePathFound, 0;
	__asm        je     _T286;
// LINE 68:
_T520:
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        mov    eax, sErrorTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sErrorTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T55f;

	__asm        mov    eax, sErrorTitle.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T55f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T55f;
_T55f:
	__asm        jmp    _T564;
_T564:
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     _T586;

	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T586:
	__asm        jmp    _T58b;
_T58b:
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     _T5b5;

	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5b5:
	__asm        jmp    _T5ba;
_T5ba:
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    __RETURN;
// LINE 69:
__RETURN:
}

// FUNCTION: COPTER_D 0x00491d1c
int32_t FileServices::FindRemotePath() {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   int32_t nReturnValue;
	/*bp-0x10*/  char * szDriveStrings;
	/*bp-0x14*/  uint32_t uiDriveType;
	/*bp-0x18*/  long lDriveStringLength;

// LINE 91:
	szDriveStrings = 0x0;
// LINE 93:
	nReturnValue = 0x0;
// LINE 96:
	__asm        mov    eax, szDriveStrings;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C35E8];
	__asm        mov    lDriveStringLength, eax;
// LINE 97:
	__asm        cmp    lDriveStringLength, 0;
	__asm        jle    _T696;
// LINE 98:
	szDriveStrings = operator new((lDriveStringLength + 0x2));
// LINE 99:
	__asm        cmp    szDriveStrings, 0;
	__asm        je     _T696;
// LINE 100:
	__asm        mov    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, lDriveStringLength;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E8];
// LINE 101:
	__asm        mov    i, 0;
	__asm        mov    eax, lDriveStringLength;
	__asm        dec    eax;
	__asm        mov    iEnd, eax;
_T72:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T67e;
// LINE 102:
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        cmp    eax, 0x61;
	__asm        jge    _Ta7;
// LINE 103:
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        add    eax, 0x20;
	__asm        mov    ecx, i;
	__asm        mov    edx, szDriveStrings;
	__asm        mov    [ecx+edx], al;
// LINE 104:
_Ta7:
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35EC];
	__asm        mov    uiDriveType, eax;
// LINE 105:
	__asm        cmp    uiDriveType, 5;
	__asm        je     _Tde;

	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        cmp    eax, 0x63;
	__asm        jl     _T650;

	__asm        cmp    uiDriveType, 2;
	__asm        jne    _T650;
// LINE 106:
_Tde:
	__asm        jmp    _Te3;
_Te3:
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0xFFFFFFFF;
	__asm        jne    _T131;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T122;
_T122:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T131;
_T131:
	__asm        jmp    _T136;
_T136:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T16d;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T2fd;

	__asm        jmp    _T158;
_T158:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-0x50];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2fd;
_T16d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T24b;

	__asm        cmp    dword ptr [ebp-0x50], 0xFFFFFFFF;
	__asm        jne    _T1c0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1b1;
_T1b1:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T228;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T223;
_T223:
	__asm        jmp    _T231;
_T228:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
_T231:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T240;
_T240:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T252;
_T24b:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T252:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2e7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2e7;

	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2c7;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
_T2c7:
	__asm        jmp    _T2cc;
_T2cc:
	__asm        jmp    _T2d1;
_T2d1:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2e2;
_T2e2:
	__asm        jmp    _T2e7;
_T2e7:
	__asm        jmp    _T2ec;
_T2ec:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T336;
_T2fd:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T336;

	__asm        jmp    _T30c;
_T30c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T336;
_T336:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T34a;
_T34a:
	__asm        jmp    _T34f;
// LINE 107:
_T34f:
	__asm        jmp    _T354;
_T354:
	__asm        push   0x59A0A4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T36c;
_T36c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x88];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T3bb;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3ac;
_T3ac:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3bb;
_T3bb:
	__asm        jmp    _T3c0;
_T3c0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T401;

	__asm        jmp    _T3d8;
_T3d8:
	__asm        jmp    _T3dd;
_T3dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x88];
	__asm        jae    _T5c7;
_T401:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T51a;

	__asm        jmp    _T41d;
_T41d:
	__asm        jmp    _T422;
_T422:
	__asm        jmp    _T427;
_T427:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T452;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T45e;

	__asm        jmp    _T45e;
_T452:
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    _T45e;
_T45e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T4f7;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4f2;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4f2;
_T4f2:
	__asm        jmp    _T500;
_T4f7:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax], 0;
_T500:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T50f;
_T50f:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T521;
_T51a:
	__asm        mov    dword ptr [ebp-0x54], 0;
_T521:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5b6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T5b6;

	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T596;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
_T596:
	__asm        jmp    _T59b;
_T59b:
	__asm        jmp    _T5a0;
_T5a0:
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T5b1;
_T5b1:
	__asm        jmp    _T5b6;
_T5b6:
	__asm        jmp    _T5bb;
_T5bb:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
_T5c7:
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T615;

	__asm        jmp    _T5d9;
_T5d9:
	__asm        jmp    _T5de;
_T5de:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        push   0x59A0A4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T615;
_T615:
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T62c;
_T62c:
	__asm        jmp    _T631;
// LINE 108:
_T631:
	__asm        mov    ecx, this;
	__asm        call   FileServices::ValidateRemotePath;
	__asm        test   eax, eax;
	__asm        je     _T650;
// LINE 109:
	nReturnValue = 0x1;
// LINE 110:
	__asm        jmp    _T67e;
// LINE 113:
_T650:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T676;

	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        test   eax, eax;
	__asm        je     _T676;
// LINE 114:
	i++;
	__asm        jmp    _T650;
// LINE 115:
_T676:
	i++;
// LINE 116:
	__asm        jmp    _T72;
// LINE 117:
_T67e:
	__asm        mov    eax, szDriveStrings;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 121:
_T696:
	nReturnValue = 0x1;
// LINE 123:
	return nReturnValue;
// LINE 127:
}

// FUNCTION: COPTER_D 0x004923c6
int32_t FileServices::ValidateRemotePath() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sTempValidationFilePath; // 0x8 bytes
	/*bp-0x118*/ /*packed*/ class PFile tempPFile; // 0x110 bytes

// LINE 139:
	__asm        jmp    _T17;
_T17:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T62;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T53;
_T53:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T62;
_T62:
	__asm        jmp    _T67;
_T67:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T96;

	__asm        jmp    _T7f;
_T7f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    _Ta0;
_T96:
	__asm        mov    dword ptr [ebp-0x188], 0xFFFFFFFF;
_Ta0:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-0x188];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Tec;

	__asm        jmp    _Tc2;
_Tc2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tec;

	sTempValidationFilePath.reference = this->sRemoteDirectoryBase.reference;
	sTempValidationFilePath.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T136;
_Tec:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     _T12f;

	__asm        mov    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sTempValidationFilePath.reference, eax;
	__asm        jmp    _T136;
_T12f:
	sTempValidationFilePath.reference = 0x0;
_T136:
	sTempValidationFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T142;
// LINE 140:
_T142:
	__asm        jmp    _T147;
_T147:
	__asm        push   0x59A0AC;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0AC;
	__asm        lea    ecx, sTempValidationFilePath.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T167;
// LINE 141:
_T167:
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     _T195;

	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T195:
	__asm        jmp    _T19a;
_T19a:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sTempValidationFilePath.c_str_ptr, eax;
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T231;

	__asm        jmp    _T1c4;
_T1c4:
	__asm        jmp    _T1c9;
_T1c9:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1eb;

	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    _T1fa;

	__asm        jmp    _T1fa;
_T1eb:
	__asm        mov    dword ptr [ebp-0x178], 0;
	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T231;
_T231:
	__asm        jmp    _T236;
_T236:
	__asm        mov    byte ptr [ebp-0x168], 0;
	__asm        jmp    _T242;
_T242:
	__asm        lea    eax, [ebp-0x168];
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    _T253;
_T253:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    [ecx], al;
	__asm        jmp    _T277;
_T277:
	__asm        jmp    _T27c;
_T27c:
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    tempPFile.Handle, 0xFFFFFFFF;
	__asm        mov    tempPFile.ShouldClose, 1;
	__asm        mov    tempPFile<vftable>, 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     _T2cf;

	__asm        mov    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        lea    eax, tempPFile.szFilePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    _T2d6;
_T2cf:
	tempPFile.szFilePath[0] = 0x0;
_T2d6:
	__asm        jmp    _T2db;
// LINE 143:
_T2db:
	__asm        push   0;
	__asm        lea    ecx, tempPFile<vftable>;
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    _T3cf;
// LINE 144:
	__asm        mov    dword ptr [ebp-0x11C], 0;
	__asm        mov    tempPFile<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    _T313;

	__asm        jmp    _T318;
_T313:
	__asm        jmp    _T340;
_T318:
	__asm        jmp    _T32a;

	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _T340;
_T32a:
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     _T340;

	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T340:
	__asm        jmp    _T345;
_T345:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38c;

	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _T38c;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T38c;
_T38c:
	__asm        jmp    _T391;
_T391:
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     _T3bf;

	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3bf:
	__asm        jmp    _T3c4;
_T3c4:
	__asm        mov    eax, [ebp-0x11C];
	__asm        jmp    __RETURN;
// LINE 145:
_T3cf:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    ecx, tempPFile<vftable>;
	__asm        call   PFile::Open;
// LINE 146:
	__asm        lea    ecx, tempPFile<vftable>;
	__asm        call   PFile::Length;
	__asm        cmp    eax, 0x4C4B40;
	__asm        jge    _T4e5;
// LINE 147:
	__asm        lea    ecx, tempPFile<vftable>;
	__asm        call   PFile::Close;
// LINE 148:
	__asm        mov    dword ptr [ebp-0x120], 0;
	__asm        mov    tempPFile<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    _T429;

	__asm        jmp    _T42e;
_T429:
	__asm        jmp    _T456;
_T42e:
	__asm        jmp    _T440;

	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     _T456;
_T440:
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     _T456;

	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T456:
	__asm        jmp    _T45b;
_T45b:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T4a2;

	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _T4a2;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x140];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T4a2;
_T4a2:
	__asm        jmp    _T4a7;
_T4a7:
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     _T4d5;

	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4d5:
	__asm        jmp    _T4da;
_T4da:
	__asm        mov    eax, [ebp-0x120];
	__asm        jmp    __RETURN;
// LINE 150:
_T4e5:
	__asm        lea    ecx, tempPFile<vftable>;
	__asm        call   PFile::Close;
// LINE 151:
	__asm        mov    dword ptr [ebp-0x124], 1;
	__asm        mov    tempPFile<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    _T513;

	__asm        jmp    _T518;
_T513:
	__asm        jmp    _T540;
_T518:
	__asm        jmp    _T52a;

	__asm        cmp    dword ptr [ebp-0x160], 0;
	__asm        je     _T540;
_T52a:
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     _T540;

	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T540:
	__asm        jmp    _T545;
_T545:
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T58c;

	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _T58c;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T58c;
_T58c:
	__asm        jmp    _T591;
_T591:
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     _T5bf;

	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5bf:
	__asm        jmp    _T5c4;
_T5c4:
	__asm        mov    eax, [ebp-0x124];
	__asm        jmp    __RETURN;
// LINE 152:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049299a
void FileServices::RefreshLocalPathCache(/*packed*/ class basic_string<char>& sDirectoryBase) {
	/*bp-0x8*/   /*packed*/ class list<basic_string<char>> tempStringListFiles; // 0x8 bytes
	/*bp-0xc*/   /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x14*/  /*packed*/ class basic_string<char> sTempDirectory; // 0x8 bytes
	/*bp-0x1c*/  /*packed*/ class list<basic_string<char>> tempStringListDirectories; // 0x8 bytes
	/*bp-0x3c*/  /*unpacked*/ class Directory tempDirectory;

// LINE 165:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, sDirectoryBase;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::Directory;
// LINE 166:
	tempStringListDirectories.length = 0x0;
	list<basic_string<char>>::number_of_lists++;
	tempStringListDirectories.node = tempStringListDirectories.node->list<basic_string<char>>::get_node();
	tempStringListDirectories.node->next = tempStringListDirectories.node;
	tempStringListDirectories.node->prev = tempStringListDirectories.node;
	__asm        jmp    _T52;
// LINE 167:
_T52:
	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   list<basic_string<char>>::list<basic_string<char>>;
// LINE 168:
	__asm        jmp    _T5f;
// LINE 169:
_T5f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC8], eax;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        je     _T8f;

	__asm        mov    ecx, [ebp-0xC8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sTempDirectory.reference, eax;
	__asm        jmp    _T96;
_T8f:
	sTempDirectory.reference = 0x0;
_T96:
	sTempDirectory.c_str_ptr = 0x0;
	__asm        jmp    _Ta2;
// LINE 171:
_Ta2:
	__asm        push   8;
	__asm        lea    eax, tempStringListFiles.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        mov    dword ptr [ebp-0xC0], 0;
// LINE 172:
	__asm        and    dword ptr [ebp-0xC0], 3;
	__asm        or     dword ptr [ebp-0xC0], 4;
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        lea    eax, tempStringListDirectories.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _Te5;
// LINE 173:
_Te5:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _Tfe;
_Tfe:
	__asm        jmp    _T103;
_T103:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    tempStringListIterator.node, eax;
// LINE 174:
_T109:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T11a;
_T11a:
	__asm        jmp    _T11f;
_T11f:
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    _T135;

	__asm        jmp    _T14c;

	__asm        jmp    _T135;
_T135:
	__asm        jmp    _T147;

	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        jne    _T14c;
_T147:
	__asm        jmp    _T151;
_T14c:
	__asm        jmp    _T30e;
_T151:
	__asm        jmp    _T163;

	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     _T30e;
// LINE 175:
_T163:
	__asm        jmp    _T168;
_T168:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    _T179;
_T179:
	__asm        jmp    _T17e;
_T17e:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sDirectoryBase;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryBase;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T1ae;
_T1ae:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T22c;

	__asm        jmp    _T1c6;
_T1c6:
	__asm        jmp    _T1cb;
_T1cb:
	__asm        jmp    _T1d0;
_T1d0:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, sDirectoryBase;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22c;
_T22c:
	__asm        mov    eax, [ebp-0x9C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T240;
_T240:
	__asm        jmp    _T245;
_T245:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T27c;
_T27c:
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T2b2;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2b2:
	__asm        jmp    _T2b7;
// LINE 176:
_T2b7:
	__asm        jmp    _T2bc;
_T2bc:
	__asm        push   0x59A0BC;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0BC;
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T2dc;
// LINE 177:
_T2dc:
	__asm        lea    eax, sTempDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FileServices::RefreshLocalPathCache;
// LINE 178:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T2fe;
_T2fe:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T309;
// LINE 179:
_T309:
	__asm        jmp    _T109;
// LINE 180:
_T30e:
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTempDirectory.c_str_ptr, 0;
	__asm        je     _T338;

	__asm        mov    eax, sTempDirectory.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T338:
	__asm        jmp    _T33d;
_T33d:
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T34e;
_T34e:
	__asm        jmp    _T353;
_T353:
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T36c;
_T36c:
	__asm        jmp    _T371;
_T371:
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   list<basic_string<char>>::erase;
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T39e;
_T39e:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _T3b2;

	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   list<basic_string<char>>::deallocate_buffers;
_T3b2:
	__asm        jmp    _T3b7;
_T3b7:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T3d1;
_T3d1:
	__asm        jmp    _T3d6;
_T3d6:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T3f2;
_T3f2:
	__asm        jmp    _T3f7;
_T3f7:
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        lea    ecx, tempStringListDirectories.node;
	__asm        call   list<basic_string<char>>::erase;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T433;
_T433:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _T447;

	__asm        lea    ecx, tempStringListDirectories.node;
	__asm        call   list<basic_string<char>>::deallocate_buffers;
_T447:
	__asm        jmp    _T44c;
_T44c:
	__asm        jmp    _T451;
_T451:
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T47b;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T47b:
	__asm        jmp    _T480;
_T480:
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        jmp    __RETURN;
__RETURN:
}

// FUNCTION: COPTER_D 0x00492e36
int32_t FileServices::CopyFileFromRemoteToLocal(char * szPartialPath) {
// LINE 196:
	return 0x0;
// LINE 197:
}

// FUNCTION: COPTER_D 0x00492e50
int32_t FileServices::GetPathForFile(int32_t nType, int32_t nLanguage, char * szFile, char * szPath) {
	/*bp-0x4*/   long lTotalStringLength;

// LINE 218:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T24;
// LINE 219:
	nLanguage = gDefaultLanguage;
// LINE 221:
_T24:
	__asm        cmp    nType, 2;
	__asm        jne    _T2e6;
// LINE 222:
	__asm        jmp    _T33;
_T33:
	__asm        jmp    _T38;
_T38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T63;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T6f;

	__asm        jmp    _T6f;
_T63:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T6f;
_T6f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 223:
	__asm        jmp    _T91;
_T91:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 224:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        jmp    _Taa;
_Taa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Te1;

	__asm        jmp    _Te1;
_Td5:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Te1;
_Te1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 225:
	__asm        jmp    _T106;
_T106:
	lTotalStringLength = (this->sDirs[2].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 226:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 227:
	__asm        mov    dword ptr [ebp-0xDC], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0xD8], 0;
	__asm        mov    dword ptr [ebp-0x1E4], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x1E0], 0;
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1E4];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    dword ptr [ebp-0x1E4], 0x590468;
	__asm        cmp    dword ptr [ebp-0xDC], 0xFFFFFFFF;
	__asm        jle    _T190;

	__asm        jmp    _T195;
_T190:
	__asm        jmp    _T1c3;
_T195:
	__asm        jmp    _T1a7;

	__asm        cmp    dword ptr [ebp-0x1E8], 0;
	__asm        je     _T1c3;
_T1a7:
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     _T1c3;

	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T1c3:
	__asm        jmp    _T1c8;
_T1c8:
	__asm        jmp    _T1cd;
_T1cd:
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        jne    _T2d7;
// LINE 228:
	__asm        jmp    _T1df;
_T1df:
	__asm        jmp    _T1e4;
_T1e4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T20f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T21b;

	__asm        jmp    _T21b;
_T20f:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T21b;
_T21b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 229:
	__asm        jmp    _T23d;
_T23d:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 230:
	__asm        jmp    _T251;
_T251:
	__asm        jmp    _T256;
_T256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T281;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T28d;

	__asm        jmp    _T28d;
_T281:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T28d;
_T28d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 231:
	__asm        jmp    _T2b2;
_T2b2:
	lTotalStringLength = (this->sDirs[2].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 232:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 234:
_T2d7:
	return 0x1;
// LINE 236:
	__asm        jmp    __RETURN;
_T2e6:
	__asm        cmp    nType, 0xA;
	__asm        jne    _T5a8;
// LINE 237:
	__asm        jmp    _T2f5;
_T2f5:
	__asm        jmp    _T2fa;
_T2fa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T325;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T325:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T331;
_T331:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 238:
	__asm        jmp    _T353;
_T353:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 239:
	__asm        jmp    _T367;
_T367:
	__asm        jmp    _T36c;
_T36c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T397;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T3a3;

	__asm        jmp    _T3a3;
_T397:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T3a3;
_T3a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 240:
	__asm        jmp    _T3c8;
_T3c8:
	lTotalStringLength = (this->sDirs[10].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 241:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 242:
	__asm        mov    dword ptr [ebp-0x1F4], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x1F0], 0;
	__asm        mov    dword ptr [ebp-0x2FC], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x2F8], 0;
	__asm        jmp    _T421;
_T421:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x2FC];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    dword ptr [ebp-0x2FC], 0x590468;
	__asm        cmp    dword ptr [ebp-0x1F4], 0xFFFFFFFF;
	__asm        jle    _T452;

	__asm        jmp    _T457;
_T452:
	__asm        jmp    _T485;
_T457:
	__asm        jmp    _T469;

	__asm        cmp    dword ptr [ebp-0x300], 0;
	__asm        je     _T485;
_T469:
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     _T485;

	__asm        mov    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T485:
	__asm        jmp    _T48a;
_T48a:
	__asm        jmp    _T48f;
_T48f:
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        jne    _T599;
// LINE 243:
	__asm        jmp    _T4a1;
_T4a1:
	__asm        jmp    _T4a6;
_T4a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4d1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T4dd;

	__asm        jmp    _T4dd;
_T4d1:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T4dd;
_T4dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 244:
	__asm        jmp    _T4ff;
_T4ff:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 245:
	__asm        jmp    _T513;
_T513:
	__asm        jmp    _T518;
_T518:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T543;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T54f;

	__asm        jmp    _T54f;
_T543:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T54f;
_T54f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 246:
	__asm        jmp    _T574;
_T574:
	lTotalStringLength = (this->sDirs[10].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 247:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 249:
_T599:
	return 0x1;
// LINE 251:
	__asm        jmp    __RETURN;
_T5a8:
	__asm        cmp    nType, 4;
	__asm        jne    _T86a;
// LINE 252:
	__asm        jmp    _T5b7;
_T5b7:
	__asm        jmp    _T5bc;
_T5bc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5e7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T5f3;

	__asm        jmp    _T5f3;
_T5e7:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T5f3;
_T5f3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 253:
	__asm        jmp    _T615;
_T615:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 254:
	__asm        jmp    _T629;
_T629:
	__asm        jmp    _T62e;
_T62e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T659;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T665;

	__asm        jmp    _T665;
_T659:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T665;
_T665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 255:
	__asm        jmp    _T68a;
_T68a:
	lTotalStringLength = (this->sDirs[4].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 256:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 257:
	__asm        mov    dword ptr [ebp-0x30C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x308], 0;
	__asm        mov    dword ptr [ebp-0x414], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x410], 0;
	__asm        jmp    _T6e3;
_T6e3:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x414];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x304], eax;
	__asm        mov    dword ptr [ebp-0x414], 0x590468;
	__asm        cmp    dword ptr [ebp-0x30C], 0xFFFFFFFF;
	__asm        jle    _T714;

	__asm        jmp    _T719;
_T714:
	__asm        jmp    _T747;
_T719:
	__asm        jmp    _T72b;

	__asm        cmp    dword ptr [ebp-0x418], 0;
	__asm        je     _T747;
_T72b:
	__asm        cmp    dword ptr [ebp-0x308], 0;
	__asm        je     _T747;

	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T747:
	__asm        jmp    _T74c;
_T74c:
	__asm        jmp    _T751;
_T751:
	__asm        cmp    dword ptr [ebp-0x304], 0;
	__asm        jne    _T85b;
// LINE 258:
	__asm        jmp    _T763;
_T763:
	__asm        jmp    _T768;
_T768:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T793;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T79f;

	__asm        jmp    _T79f;
_T793:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    _T79f;
_T79f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 259:
	__asm        jmp    _T7c1;
_T7c1:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 260:
	__asm        jmp    _T7d5;
_T7d5:
	__asm        jmp    _T7da;
_T7da:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T805;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T811;

	__asm        jmp    _T811;
_T805:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    _T811;
_T811:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 261:
	__asm        jmp    _T836;
_T836:
	lTotalStringLength = (this->sDirs[4].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 262:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 264:
_T85b:
	return 0x1;
// LINE 266:
	__asm        jmp    __RETURN;
_T86a:
	__asm        cmp    nType, 5;
	__asm        jne    _Tb2c;
// LINE 267:
	__asm        jmp    _T879;
_T879:
	__asm        jmp    _T87e;
_T87e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T8a9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T8b5;

	__asm        jmp    _T8b5;
_T8a9:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T8b5;
_T8b5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 268:
	__asm        jmp    _T8d7;
_T8d7:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 269:
	__asm        jmp    _T8eb;
_T8eb:
	__asm        jmp    _T8f0;
_T8f0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T91b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T927;

	__asm        jmp    _T927;
_T91b:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    _T927;
_T927:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 270:
	__asm        jmp    _T94c;
_T94c:
	lTotalStringLength = (this->sDirs[5].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 271:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 272:
	__asm        mov    dword ptr [ebp-0x424], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x420], 0;
	__asm        mov    dword ptr [ebp-0x52C], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x528], 0;
	__asm        jmp    _T9a5;
_T9a5:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x52C];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x41C], eax;
	__asm        mov    dword ptr [ebp-0x52C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x424], 0xFFFFFFFF;
	__asm        jle    _T9d6;

	__asm        jmp    _T9db;
_T9d6:
	__asm        jmp    _Ta09;
_T9db:
	__asm        jmp    _T9ed;

	__asm        cmp    dword ptr [ebp-0x530], 0;
	__asm        je     _Ta09;
_T9ed:
	__asm        cmp    dword ptr [ebp-0x420], 0;
	__asm        je     _Ta09;

	__asm        mov    eax, [ebp-0x424];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_Ta09:
	__asm        jmp    _Ta0e;
_Ta0e:
	__asm        jmp    _Ta13;
_Ta13:
	__asm        cmp    dword ptr [ebp-0x41C], 0;
	__asm        jne    _Tb1d;
// LINE 273:
	__asm        jmp    _Ta25;
_Ta25:
	__asm        jmp    _Ta2a;
_Ta2a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Ta55;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _Ta61;

	__asm        jmp    _Ta61;
_Ta55:
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    _Ta61;
_Ta61:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 274:
	__asm        jmp    _Ta83;
_Ta83:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 275:
	__asm        jmp    _Ta97;
_Ta97:
	__asm        jmp    _Ta9c;
_Ta9c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tac7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _Tad3;

	__asm        jmp    _Tad3;
_Tac7:
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    _Tad3;
_Tad3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 276:
	__asm        jmp    _Taf8;
_Taf8:
	lTotalStringLength = (this->sDirs[5].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 277:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 279:
_Tb1d:
	return 0x1;
// LINE 281:
	__asm        jmp    __RETURN;
_Tb2c:
	__asm        cmp    nType, 6;
	__asm        jne    _Tdee;
// LINE 282:
	__asm        jmp    _Tb3b;
_Tb3b:
	__asm        jmp    _Tb40;
_Tb40:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb6b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _Tb77;

	__asm        jmp    _Tb77;
_Tb6b:
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        jmp    _Tb77;
_Tb77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 283:
	__asm        jmp    _Tb99;
_Tb99:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 284:
	__asm        jmp    _Tbad;
_Tbad:
	__asm        jmp    _Tbb2;
_Tbb2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tbdd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Tbe9;

	__asm        jmp    _Tbe9;
_Tbdd:
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    _Tbe9;
_Tbe9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 285:
	__asm        jmp    _Tc0e;
_Tc0e:
	lTotalStringLength = (this->sDirs[6].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 286:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 287:
	__asm        mov    dword ptr [ebp-0x53C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x538], 0;
	__asm        mov    dword ptr [ebp-0x644], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x640], 0;
	__asm        jmp    _Tc67;
_Tc67:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x644];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x534], eax;
	__asm        mov    dword ptr [ebp-0x644], 0x590468;
	__asm        cmp    dword ptr [ebp-0x53C], 0xFFFFFFFF;
	__asm        jle    _Tc98;

	__asm        jmp    _Tc9d;
_Tc98:
	__asm        jmp    _Tccb;
_Tc9d:
	__asm        jmp    _Tcaf;

	__asm        cmp    dword ptr [ebp-0x648], 0;
	__asm        je     _Tccb;
_Tcaf:
	__asm        cmp    dword ptr [ebp-0x538], 0;
	__asm        je     _Tccb;

	__asm        mov    eax, [ebp-0x53C];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_Tccb:
	__asm        jmp    _Tcd0;
_Tcd0:
	__asm        jmp    _Tcd5;
_Tcd5:
	__asm        cmp    dword ptr [ebp-0x534], 0;
	__asm        jne    _Tddf;
// LINE 288:
	__asm        jmp    _Tce7;
_Tce7:
	__asm        jmp    _Tcec;
_Tcec:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td17;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _Td23;

	__asm        jmp    _Td23;
_Td17:
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    _Td23;
_Td23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 289:
	__asm        jmp    _Td45;
_Td45:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 290:
	__asm        jmp    _Td59;
_Td59:
	__asm        jmp    _Td5e;
_Td5e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td89;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _Td95;

	__asm        jmp    _Td95;
_Td89:
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    _Td95;
_Td95:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 291:
	__asm        jmp    _Tdba;
_Tdba:
	lTotalStringLength = (this->sDirs[6].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 292:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 294:
_Tddf:
	return 0x1;
// LINE 296:
	__asm        jmp    __RETURN;
_Tdee:
	__asm        cmp    nType, 7;
	__asm        jne    _T10b0;
// LINE 297:
	__asm        jmp    _Tdfd;
_Tdfd:
	__asm        jmp    _Te02;
_Te02:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Te2d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _Te39;

	__asm        jmp    _Te39;
_Te2d:
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    _Te39;
_Te39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 298:
	__asm        jmp    _Te5b;
_Te5b:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 299:
	__asm        jmp    _Te6f;
_Te6f:
	__asm        jmp    _Te74;
_Te74:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Te9f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _Teab;

	__asm        jmp    _Teab;
_Te9f:
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    _Teab;
_Teab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 300:
	__asm        jmp    _Ted0;
_Ted0:
	lTotalStringLength = (this->sDirs[7].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 301:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 302:
	__asm        mov    dword ptr [ebp-0x654], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x650], 0;
	__asm        mov    dword ptr [ebp-0x75C], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x758], 0;
	__asm        jmp    _Tf29;
_Tf29:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x75C];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x64C], eax;
	__asm        mov    dword ptr [ebp-0x75C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x654], 0xFFFFFFFF;
	__asm        jle    _Tf5a;

	__asm        jmp    _Tf5f;
_Tf5a:
	__asm        jmp    _Tf8d;
_Tf5f:
	__asm        jmp    _Tf71;

	__asm        cmp    dword ptr [ebp-0x760], 0;
	__asm        je     _Tf8d;
_Tf71:
	__asm        cmp    dword ptr [ebp-0x650], 0;
	__asm        je     _Tf8d;

	__asm        mov    eax, [ebp-0x654];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_Tf8d:
	__asm        jmp    _Tf92;
_Tf92:
	__asm        jmp    _Tf97;
_Tf97:
	__asm        cmp    dword ptr [ebp-0x64C], 0;
	__asm        jne    _T10a1;
// LINE 303:
	__asm        jmp    _Tfa9;
_Tfa9:
	__asm        jmp    _Tfae;
_Tfae:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tfd9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _Tfe5;

	__asm        jmp    _Tfe5;
_Tfd9:
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        jmp    _Tfe5;
_Tfe5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 304:
	__asm        jmp    _T1007;
_T1007:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 305:
	__asm        jmp    _T101b;
_T101b:
	__asm        jmp    _T1020;
_T1020:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T104b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T1057;

	__asm        jmp    _T1057;
_T104b:
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    _T1057;
_T1057:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 306:
	__asm        jmp    _T107c;
_T107c:
	lTotalStringLength = (this->sDirs[7].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 307:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 309:
_T10a1:
	return 0x1;
// LINE 311:
	__asm        jmp    __RETURN;
_T10b0:
	__asm        cmp    nType, 8;
	__asm        jne    _T1372;
// LINE 312:
	__asm        jmp    _T10bf;
_T10bf:
	__asm        jmp    _T10c4;
_T10c4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10ef;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T10fb;

	__asm        jmp    _T10fb;
_T10ef:
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    _T10fb;
_T10fb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 313:
	__asm        jmp    _T111d;
_T111d:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 314:
	__asm        jmp    _T1131;
_T1131:
	__asm        jmp    _T1136;
_T1136:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1161;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T116d;

	__asm        jmp    _T116d;
_T1161:
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    _T116d;
_T116d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 315:
	__asm        jmp    _T1192;
_T1192:
	lTotalStringLength = (this->sDirs[8].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 316:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 317:
	__asm        mov    dword ptr [ebp-0x76C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x768], 0;
	__asm        mov    dword ptr [ebp-0x874], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x870], 0;
	__asm        jmp    _T11eb;
_T11eb:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x874];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x764], eax;
	__asm        mov    dword ptr [ebp-0x874], 0x590468;
	__asm        cmp    dword ptr [ebp-0x76C], 0xFFFFFFFF;
	__asm        jle    _T121c;

	__asm        jmp    _T1221;
_T121c:
	__asm        jmp    _T124f;
_T1221:
	__asm        jmp    _T1233;

	__asm        cmp    dword ptr [ebp-0x878], 0;
	__asm        je     _T124f;
_T1233:
	__asm        cmp    dword ptr [ebp-0x768], 0;
	__asm        je     _T124f;

	__asm        mov    eax, [ebp-0x76C];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T124f:
	__asm        jmp    _T1254;
_T1254:
	__asm        jmp    _T1259;
_T1259:
	__asm        cmp    dword ptr [ebp-0x764], 0;
	__asm        jne    _T1363;
// LINE 318:
	__asm        jmp    _T126b;
_T126b:
	__asm        jmp    _T1270;
_T1270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T129b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T12a7;

	__asm        jmp    _T12a7;
_T129b:
	__asm        mov    dword ptr [ebp-0x7C], 0;
	__asm        jmp    _T12a7;
_T12a7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 319:
	__asm        jmp    _T12c9;
_T12c9:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 320:
	__asm        jmp    _T12dd;
_T12dd:
	__asm        jmp    _T12e2;
_T12e2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T130d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T1319;

	__asm        jmp    _T1319;
_T130d:
	__asm        mov    dword ptr [ebp-0x80], 0;
	__asm        jmp    _T1319;
_T1319:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 321:
	__asm        jmp    _T133e;
_T133e:
	lTotalStringLength = (this->sDirs[8].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 322:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 324:
_T1363:
	return 0x1;
// LINE 326:
	__asm        jmp    __RETURN;
_T1372:
	__asm        cmp    nType, 1;
	__asm        jne    _T1658;
// LINE 327:
	__asm        jmp    _T1381;
_T1381:
	__asm        jmp    _T1386;
_T1386:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13b4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    _T13c3;

	__asm        jmp    _T13c3;
_T13b4:
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    _T13c3;
_T13c3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 328:
	__asm        jmp    _T13e8;
_T13e8:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 329:
	__asm        jmp    _T13fc;
_T13fc:
	__asm        jmp    _T1401;
_T1401:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T142f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T143e;

	__asm        jmp    _T143e;
_T142f:
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    _T143e;
_T143e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 330:
	__asm        jmp    _T1466;
_T1466:
	lTotalStringLength = (this->sDirs[1].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 331:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 332:
	__asm        mov    dword ptr [ebp-0x884], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x880], 0;
	__asm        mov    dword ptr [ebp-0x98C], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0x988], 0;
	__asm        jmp    _T14bf;
_T14bf:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x98C];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x87C], eax;
	__asm        mov    dword ptr [ebp-0x98C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x884], 0xFFFFFFFF;
	__asm        jle    _T14f0;

	__asm        jmp    _T14f5;
_T14f0:
	__asm        jmp    _T1523;
_T14f5:
	__asm        jmp    _T1507;

	__asm        cmp    dword ptr [ebp-0x990], 0;
	__asm        je     _T1523;
_T1507:
	__asm        cmp    dword ptr [ebp-0x880], 0;
	__asm        je     _T1523;

	__asm        mov    eax, [ebp-0x884];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T1523:
	__asm        jmp    _T1528;
_T1528:
	__asm        jmp    _T152d;
_T152d:
	__asm        cmp    dword ptr [ebp-0x87C], 0;
	__asm        jne    _T1649;
// LINE 333:
	__asm        jmp    _T153f;
_T153f:
	__asm        jmp    _T1544;
_T1544:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1572;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T1581;

	__asm        jmp    _T1581;
_T1572:
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    _T1581;
_T1581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 334:
	__asm        jmp    _T15a6;
_T15a6:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 335:
	__asm        jmp    _T15ba;
_T15ba:
	__asm        jmp    _T15bf;
_T15bf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T15ed;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T15fc;

	__asm        jmp    _T15fc;
_T15ed:
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    _T15fc;
_T15fc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 336:
	__asm        jmp    _T1624;
_T1624:
	lTotalStringLength = (this->sDirs[1].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 337:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 339:
_T1649:
	return 0x1;
// LINE 341:
	__asm        jmp    __RETURN;
_T1658:
	__asm        cmp    nType, 0xB;
	__asm        jne    _T193e;
// LINE 342:
	__asm        jmp    _T1667;
_T1667:
	__asm        jmp    _T166c;
_T166c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T169a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _T16a9;

	__asm        jmp    _T16a9;
_T169a:
	__asm        mov    dword ptr [ebp-0x94], 0;
	__asm        jmp    _T16a9;
_T16a9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 343:
	__asm        jmp    _T16ce;
_T16ce:
	lTotalStringLength = this->sLocalDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 344:
	__asm        jmp    _T16e2;
_T16e2:
	__asm        jmp    _T16e7;
_T16e7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1715;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T1724;

	__asm        jmp    _T1724;
_T1715:
	__asm        mov    dword ptr [ebp-0x98], 0;
	__asm        jmp    _T1724;
_T1724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 345:
	__asm        jmp    _T174c;
_T174c:
	lTotalStringLength = (this->sDirs[11].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 346:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 347:
	__asm        mov    dword ptr [ebp-0x99C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x998], 0;
	__asm        mov    dword ptr [ebp-0xAA4], 0x590468;
	__asm        mov    _fmode, 0x8000;
	__asm        mov    byte ptr [ebp-0xAA0], 0;
	__asm        jmp    _T17a5;
_T17a5:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xAA4];
	__asm        call   PFile::FileExists;
	__asm        mov    [ebp-0x994], eax;
	__asm        mov    dword ptr [ebp-0xAA4], 0x590468;
	__asm        cmp    dword ptr [ebp-0x99C], 0xFFFFFFFF;
	__asm        jle    _T17d6;

	__asm        jmp    _T17db;
_T17d6:
	__asm        jmp    _T1809;
_T17db:
	__asm        jmp    _T17ed;

	__asm        cmp    dword ptr [ebp-0xAA8], 0;
	__asm        je     _T1809;
_T17ed:
	__asm        cmp    dword ptr [ebp-0x998], 0;
	__asm        je     _T1809;

	__asm        mov    eax, [ebp-0x99C];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
_T1809:
	__asm        jmp    _T180e;
_T180e:
	__asm        jmp    _T1813;
_T1813:
	__asm        cmp    dword ptr [ebp-0x994], 0;
	__asm        jne    _T192f;
// LINE 348:
	__asm        jmp    _T1825;
_T1825:
	__asm        jmp    _T182a;
_T182a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1858;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    _T1867;

	__asm        jmp    _T1867;
_T1858:
	__asm        mov    dword ptr [ebp-0x9C], 0;
	__asm        jmp    _T1867;
_T1867:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 349:
	__asm        jmp    _T188c;
_T188c:
	lTotalStringLength = this->sRemoteDirectoryBase.reference-><basic_string_ref<char>+0x04:4>;
// LINE 350:
	__asm        jmp    _T18a0;
_T18a0:
	__asm        jmp    _T18a5;
_T18a5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T18d3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    _T18e2;

	__asm        jmp    _T18e2;
_T18d3:
	__asm        mov    dword ptr [ebp-0xA0], 0;
	__asm        jmp    _T18e2;
_T18e2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 351:
	__asm        jmp    _T190a;
_T190a:
	lTotalStringLength = (this->sDirs[11].reference-><basic_string_ref<char>+0x04:4> + lTotalStringLength);
// LINE 352:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 354:
_T192f:
	return 0x1;
// LINE 356:
	__asm        jmp    __RETURN;
_T193e:
	__asm        cmp    nType, 3;
	__asm        jne    _T1ff8;
// LINE 360:
// Block start:
	/*bp-0xc*/   /*packed*/ class basic_string<char> sTemp; // 0x8 bytes
	__asm        jmp    _T194d;
_T194d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T1998;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xACC], eax;
	__asm        mov    eax, [ebp-0xACC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1989;
_T1989:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1998;
_T1998:
	__asm        jmp    _T199d;
_T199d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T19cc;

	__asm        jmp    _T19b5;
_T19b5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC4], eax;
	__asm        jmp    _T19d6;
_T19cc:
	__asm        mov    dword ptr [ebp-0xAC4], 0xFFFFFFFF;
_T19d6:
	__asm        jmp    _T19db;
_T19db:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xAC4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T1a23;

	__asm        jmp    _T19f8;
_T19f8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T1a23;

	sTemp.reference = this->sLocalDirectoryBase.reference;
	sTemp.reference-><basic_string_ref<char>+0x0c:4> += 0x1;
	__asm        jmp    _T1b44;
_T1a23:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC8], eax;
	__asm        cmp    dword ptr [ebp-0xAC8], 0;
	__asm        je     _T1b3d;

	__asm        mov    eax, [ebp-0xAC4];
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1b11;

	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1a90;
_T1a90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1abe;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAD0], eax;
	__asm        jmp    _T1acd;

	__asm        jmp    _T1acd;
_T1abe:
	__asm        mov    dword ptr [ebp-0xAD0], 0;
	__asm        jmp    _T1acd;
_T1acd:
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAD4], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAD8], eax;
	__asm        mov    eax, [ebp-0xAD4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAD8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1b0c;
_T1b0c:
	__asm        jmp    _T1b1d;
_T1b11:
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    dword ptr [eax], 0;
_T1b1d:
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b2f;
_T1b2f:
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    sTemp.reference, eax;
	__asm        jmp    _T1b44;
_T1b3d:
	sTemp.reference = 0x0;
_T1b44:
	sTemp.c_str_ptr = 0x0;
	__asm        jmp    _T1b50;
// LINE 361:
_T1b50:
	__asm        jmp    _T1b55;
_T1b55:
	__asm        jmp    _T1b5a;
_T1b5a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1b88;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    _T1b97;

	__asm        jmp    _T1b97;
_T1b88:
	__asm        mov    dword ptr [ebp-0xBC], 0;
	__asm        jmp    _T1b97;
_T1b97:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    _T1bae;
_T1bae:
	__asm        mov    eax, sTemp.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0xD0];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T1bfd;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1bee;
_T1bee:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1bfd;
_T1bfd:
	__asm        jmp    _T1c02;
_T1c02:
	__asm        mov    eax, sTemp.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1c31;

	__asm        jmp    _T1c14;
_T1c14:
	__asm        jmp    _T1c19;
_T1c19:
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sTemp.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0xD0];
	__asm        jae    _T1ca6;
_T1c31:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC4], eax;
	__asm        cmp    dword ptr [ebp-0xC4], 0;
	__asm        je     _T1c8b;

	__asm        jmp    _T1c53;
_T1c53:
	__asm        jmp    _T1c58;
_T1c58:
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    _T1c95;
_T1c8b:
	__asm        mov    dword ptr [ebp-0xC0], 0;
_T1c95:
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    sTemp.reference, eax;
_T1ca6:
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _T1cf0;

	__asm        jmp    _T1cb8;
_T1cb8:
	__asm        jmp    _T1cbd;
_T1cbd:
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sTemp.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1cf0;
_T1cf0:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    ecx, sTemp.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T1d01;
_T1d01:
	__asm        jmp    _T1d06;
// LINE 362:
_T1d06:
	__asm        jmp    _T1d0b;
_T1d0b:
	__asm        push   0x59A0C0;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0C0;
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1d2b;
// LINE 363:
_T1d2b:
	__asm        lea    eax, sTemp.c_str_ptr;
	__asm        push   eax;
	__asm        call   Directory::DoesAnyEntryExistThatMatchesPattern;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T1e23;
// LINE 364:
	__asm        jmp    _T1d44;
_T1d44:
	__asm        jmp    _T1d49;
_T1d49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1d77;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T1d86;

	__asm        jmp    _T1d86;
_T1d77:
	__asm        mov    dword ptr [ebp-0xA4], 0;
	__asm        jmp    _T1d86;
_T1d86:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 365:
	__asm        jmp    _T1dab;
_T1dab:
	__asm        jmp    _T1db0;
_T1db0:
	__asm        jmp    _T1db5;
_T1db5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1de3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T1df2;

	__asm        jmp    _T1df2;
_T1de3:
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    _T1df2;
_T1df2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 367:
	__asm        jmp    _T1f02;
// LINE 368:
_T1e23:
	__asm        jmp    _T1e28;
_T1e28:
	__asm        jmp    _T1e2d;
_T1e2d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1e5b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T1e6a;

	__asm        jmp    _T1e6a;
_T1e5b:
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    _T1e6a;
_T1e6a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 369:
	__asm        jmp    _T1e8f;
_T1e8f:
	__asm        jmp    _T1e94;
_T1e94:
	__asm        jmp    _T1e99;
_T1e99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ec7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T1ed6;

	__asm        jmp    _T1ed6;
_T1ec7:
	__asm        mov    dword ptr [ebp-0xB0], 0;
	__asm        jmp    _T1ed6;
_T1ed6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 371:
_T1f02:
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    eax, sTemp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTemp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1fb3;

	__asm        mov    eax, sTemp.reference;
	__asm        mov    [ebp-0xAB8], eax;
	__asm        mov    eax, [ebp-0xAB8];
	__asm        mov    [ebp-0xAB4], eax;
	__asm        cmp    dword ptr [ebp-0xAB4], 0;
	__asm        je     _T1fb3;

	__asm        mov    eax, [ebp-0xAB4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1f90;

	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xABC], eax;
	__asm        mov    eax, [ebp-0xABC];
	__asm        mov    [ebp-0xAC0], eax;
	__asm        mov    eax, [ebp-0xAC0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    dword ptr [eax], 0;
_T1f90:
	__asm        jmp    _T1f95;
_T1f95:
	__asm        jmp    _T1f9a;
_T1f9a:
	__asm        mov    eax, [ebp-0xAB4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1fae;
_T1fae:
	__asm        jmp    _T1fb3;
_T1fb3:
	__asm        jmp    _T1fb8;
_T1fb8:
	__asm        cmp    sTemp.c_str_ptr, 0;
	__asm        je     _T1fe6;

	__asm        mov    eax, sTemp.c_str_ptr;
	__asm        mov    [ebp-0xAAC], eax;
	__asm        mov    eax, [ebp-0xAAC];
	__asm        mov    [ebp-0xAB0], eax;
	__asm        mov    eax, [ebp-0xAB0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1fe6:
	__asm        jmp    _T1feb;
_T1feb:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 373:
// Block end:
	__asm        jmp    __RETURN;
_T1ff8:
	__asm        cmp    nType, 9;
	__asm        jne    _T2099;
// LINE 374:
	__asm        jmp    _T2007;
_T2007:
	__asm        jmp    _T200c;
_T200c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T203a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    _T2049;

	__asm        jmp    _T2049;
_T203a:
	__asm        mov    dword ptr [ebp-0xB4], 0;
	__asm        jmp    _T2049;
_T2049:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 375:
	__asm        jmp    _T206e;
_T206e:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 376:
	return 0x1;
// LINE 378:
	__asm        jmp    __RETURN;
// LINE 379:
_T2099:
	__asm        jmp    _T209e;
_T209e:
	__asm        jmp    _T20a3;
_T20a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T20d1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    _T20e0;

	__asm        jmp    _T20e0;
_T20d1:
	__asm        mov    dword ptr [ebp-0xB8], 0;
	__asm        jmp    _T20e0;
_T20e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 380:
	__asm        jmp    _T2105;
_T2105:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 381:
	return 0x1;
// LINE 383:
__RETURN:
}

// FUNCTION: COPTER_D 0x00494f82
int32_t FileServices::GetPathForFileString(int32_t nType, int32_t nLanguage, /*packed*/ class basic_string<char>& sFile, /*packed*/ class basic_string<char>& sPath) {
	/*bp-0x104*/ char szPath[260]; // 0x104 bytes
	/*bp-0x108*/ int32_t nReturnValue;
	/*bp-0x10c*/ char * szFile;

// LINE 396:
	__asm        mov    eax, sFile;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T44;

	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T44:
	__asm        jmp    _T49;
_T49:
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, sFile;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T66;
_T66:
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf3;

	__asm        jmp    _T7b;
_T7b:
	__asm        jmp    _T80;
_T80:
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Ta8;

	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    _Tb7;

	__asm        jmp    _Tb7;
_Ta8:
	__asm        mov    dword ptr [ebp-0x154], 0;
	__asm        jmp    _Tb7;
_Tb7:
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf3;
_Tf3:
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    byte ptr [ebp-0x144], 0;
	__asm        jmp    _T104;
_T104:
	__asm        lea    eax, [ebp-0x144];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    _T115;
_T115:
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFile;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x150];
	__asm        mov    [ecx], al;
	__asm        jmp    _T13e;
_T13e:
	__asm        jmp    _T143;
_T143:
	szFile = sFile.c_str_ptr;
// LINE 397:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, nType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FileServices::GetPathForFile;
	__asm        mov    nReturnValue, eax;
// LINE 398:
	__asm        jmp    _T17a;
_T17a:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0xFFFFFFFF;
	__asm        jne    _T1d4;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1c5;
_T1c5:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1d4;
_T1d4:
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T210;

	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _T403;

	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T403;
_T210:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _T330;

	__asm        cmp    dword ptr [ebp-0x13C], 0xFFFFFFFF;
	__asm        jne    _T272;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T263;
_T263:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T272;
_T272:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T301;

	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2fc;
_T2fc:
	__asm        jmp    _T30d;
_T301:
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax], 0;
_T30d:
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T31f;
_T31f:
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    _T33a;
_T330:
	__asm        mov    dword ptr [ebp-0x110], 0;
_T33a:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3ed;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T3ed;

	__asm        mov    eax, [ebp-0x120];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3ca;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax], 0;
_T3ca:
	__asm        jmp    _T3cf;
_T3cf:
	__asm        jmp    _T3d4;
_T3d4:
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3e8;
_T3e8:
	__asm        jmp    _T3ed;
_T3ed:
	__asm        jmp    _T3f2;
_T3f2:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, sPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T445;
_T403:
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _T445;

	__asm        jmp    _T415;
_T415:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T445;
_T445:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, sPath;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T459;
_T459:
	__asm        jmp    _T45e;
// LINE 399:
_T45e:
	return nReturnValue;
// LINE 400:
}



// Contribution: 3:00000088-0000008b Module: 21, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597088
static void (*$S33)() = { 0 /* todo */ };



// Contribution: 3:000030a4-000030c3 Module: 21, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:000030c4-000030ca Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "tweak\"


// Contribution: 3:000030cc-000030ce Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "X\"


// Contribution: 3:000030d0-000030d6 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "fonts\"


// Contribution: 3:000030d8-000030dc Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "geo\"


// Contribution: 3:000030e0-000030e4 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "bmp\"


// Contribution: 3:000030e8-000030f6 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "cities\career\"


// Contribution: 3:000030f8-000030ff Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "cities\"


// Contribution: 3:00003100-0000310c Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "sound\radio\"


// Contribution: 3:00003110-00003116 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "sound\"


// Contribution: 3:00003118-0000311c Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "smk\"


// Contribution: 3:0006dc00-0006dc73 Module: 21, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604c00
/*packed*/ class FileServices gFileServices;



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006bf1ac
int32_t cameraHeading; // Contrib missing


// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006bf1b0
int32_t cameraPitch; // Contrib missing


// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006c1210
/*packed*/ struct _VIEW_STATE ViewState; // Contrib missing


// WARNING: this global might actually belong to: C:\Copter\source\game\S3render.c
// GLOBAL: COPTER_D 0x0067ed20
int32_t G_terr_maxalt; // Contrib missing


// WARNING: this global might actually belong to: C:\Copter\source\game\S3render.c
// GLOBAL: COPTER_D 0x006c1210
/*packed*/ struct _VIEW_STATE ViewState; // Contrib missing

