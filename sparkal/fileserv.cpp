// Module: Fileserv.obj
// Source: C:\Copter\source\sparkal\Fileserv.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: int32_t;

// Type: char *;

// Type: class FileServices (forward reference);
class FileServices{
public:
	void FileServices();
	int32_t Initialize();
	int32_t IsFileAvailable(char *);
	int32_t GetPathForFile(int32_t, int32_t, char *, char *);
	int32_t GetPathForFileString(int32_t, int32_t, class basic_string<char>&, class basic_string<char>&);
	void FindLocalPath();
	int32_t FindRemotePath();
	int32_t ValidateRemotePath();
	void RefreshLocalPathCache();
	void RefreshLocalPathCache(class basic_string<char>&);
	int32_t CopyFileFromRemoteToLocal(char *);
	int32_t IsFileAvailableLocally(char *);
	int32_t IsFileAvailableRemotely(char *);
		enum AppBaseType {
			nAppBaseTypeUnknown = 0,
			nAppBaseTypeLocal = 1,
			nAppBaseTypeRemote = 2,
		};
public:
	enum FileServices::AppBaseType myAppBaseType;
	class basic_string<char> sLocalDirectoryBase;
	class basic_string<char> sRemoteDirectoryBase;
	class basic_string<char> sDirs[12];
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: uint32_t;

// Type: class PFile;
class PFile{
		enum __unnamed {
			FileNull = -1,
		};
		enum SeekTypes {
			N_SEEK_FROM_FILE_START = 0,
			N_SEEK_FROM_FILE_CURRENT = 1,
			N_SEEK_FROM_FILE_END = 2,
		};
		enum AccessTypes {
			ReadOnly = 0,
			ReadWrite = 2,
			WriteOnly = 1,
			Create = 768,
			CreateExcl = 1280,
			Append = 8,
			Binary = 32768,
			Compat = 0,
			DenyNone = 64,
			DenyRead = 48,
			DenyWrite = 32,
			DenyRdWr = 16,
			NoInherit = 128,
		};
		enum PermissionTypes {
			PermRead = 256,
			PermWrite = 128,
			PermRdWr = 384,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char szFilePath[260];
	int32_t Handle;
private:
	int32_t ShouldClose;
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class Directory (forward reference);

// Type: class list<basic_string<char>>;
class list<basic_string<char>>{
	using void_pointer = void * __ptr32;
	class list<basic_string<char>>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class basic_string<char> data;
	};
protected:
	static class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static class allocator<basic_string<char>> value_allocator;
	using value_type = class basic_string<char>;
	using value_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using list_node_allocator_type = class allocator<list<basic_string<char>>::list_node>;
	using link_type = struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<basic_string<char>>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<basic_string<char>>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = struct list<basic_string<char>>::list_node_buffer*;
protected:
	static class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static struct list<basic_string<char>>::list_node_buffer* buffer_list;
	static struct list<basic_string<char>>::list_node* free_list;
	static struct list<basic_string<char>>::list_node* next_avail;
	static struct list<basic_string<char>>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<basic_string<char>>::list_node* get_node();
	void put_node(struct list<basic_string<char>>::list_node*);
	struct list<basic_string<char>>::list_node* node;
	uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::iterator&);
		class basic_string<char>& operator*();
		class list<basic_string<char>>::iterator operator++(int32_t);
		class list<basic_string<char>>::iterator& operator++();
		class list<basic_string<char>>::iterator operator--(int32_t);
		class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void const_iterator(const class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::const_iterator&);
		const class basic_string<char>& operator*();
		class list<basic_string<char>>::const_iterator operator++(int32_t);
		class list<basic_string<char>>::const_iterator& operator++();
		class list<basic_string<char>>::const_iterator operator--(int32_t);
		class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const class list<basic_string<char>>&);
	void list<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator begin();
	class list<basic_string<char>>::iterator begin();
	class list<basic_string<char>>::const_iterator end();
	class list<basic_string<char>>::iterator end();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& front();
	class basic_string<char>& front();
	const class basic_string<char>& back();
	class basic_string<char>& back();
	void swap(class list<basic_string<char>>&);
	void insert(class list<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	void insert(class list<basic_string<char>>::iterator, class list<basic_string<char>>::const_iterator, class list<basic_string<char>>::const_iterator);
	void insert(class list<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	class list<basic_string<char>>::iterator insert(class list<basic_string<char>>::iterator, const class basic_string<char>&);
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void erase(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void erase(class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	class list<basic_string<char>>& operator=(const class list<basic_string<char>>&);
protected:
	void transfer(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
public:
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator);
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&);
	void remove(const class basic_string<char>&);
	void unique();
	void merge(class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator operator++(int32_t);
	class list<basic_string<char>>::iterator& operator++();
	class list<basic_string<char>>::iterator operator--(int32_t);
	class list<basic_string<char>>::iterator& operator--();
};

// Type: char[260];

// Type: struct bidirectional_iterator<basic_string<char>,int>;
class bidirectional_iterator<basic_string<char>,int>{
};



// Contribution: 1:00090180-000943f1 Module: 21, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00491180
void $E32() {
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0049119A;
	__asm        call   0x00491548;
	__asm        jmp    near ptr 0x00491195;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0049119a
void $E29() {
// LINE 19:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004911F5;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004911E8;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ds:[0x604C08], eax;
	__asm        jmp    near ptr 0x004911FF;
	__asm        mov    dword ptr ds:[0x604C08], 0;
	__asm        mov    dword ptr ds:[0x604C04], 0;
	__asm        jmp    near ptr 0x0049120E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00491260;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00491253;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x604C10], eax;
	__asm        jmp    near ptr 0x0049126A;
	__asm        mov    dword ptr ds:[0x604C10], 0;
	__asm        mov    dword ptr ds:[0x604C0C], 0;
	__asm        jmp    near ptr 0x00491279;
	__asm        mov    dword ptr [ebp-0x18], 0xC;
	__asm        mov    eax, 0x604C00;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    dword ptr [ebp-0x18];
	__asm        js     near ptr 0x004912A5;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x00411EE0;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0049128B;
	__asm        jmp    near ptr 0x004912AA;
	__asm        mov    dword ptr ds:[0x604C00], 0;
	__asm        jmp    near ptr 0x004912B9;
	__asm        push   0x59A118;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A118;
	__asm        lea    ecx, ds:[0x604C1C];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004912DC;
	__asm        jmp    near ptr 0x004912E1;
	__asm        push   0x59A110;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A110;
	__asm        lea    ecx, ds:[0x604C24];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491304;
	__asm        jmp    near ptr 0x00491309;
	__asm        push   0x59A100;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A100;
	__asm        lea    ecx, ds:[0x604C2C];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049132C;
	__asm        jmp    near ptr 0x00491331;
	__asm        push   0x59A0F8;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0F8;
	__asm        lea    ecx, ds:[0x604C34];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491354;
	__asm        jmp    near ptr 0x00491359;
	__asm        push   0x59A0E8;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0E8;
	__asm        lea    ecx, ds:[0x604C3C];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049137C;
	__asm        jmp    near ptr 0x00491381;
	__asm        push   0x59A0E0;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0E0;
	__asm        lea    ecx, ds:[0x604C44];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004913A4;
	__asm        jmp    near ptr 0x004913A9;
	__asm        push   0x59A0D8;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0D8;
	__asm        lea    ecx, ds:[0x604C4C];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004913CC;
	__asm        jmp    near ptr 0x004913D1;
	__asm        push   0x59A0D0;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0D0;
	__asm        lea    ecx, ds:[0x604C54];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004913F4;
	__asm        jmp    near ptr 0x004913F9;
	__asm        push   0x59A0CC;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0CC;
	__asm        lea    ecx, ds:[0x604C64];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049141C;
	__asm        jmp    near ptr 0x00491421;
	__asm        push   0x59A0C4;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0049146D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049145E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049146D;
	__asm        jmp    near ptr 0x00491472;
	__asm        mov    eax, ds:[0x604C70];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004914A1;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004914F0;
	__asm        jmp    near ptr 0x00491490;
	__asm        mov    eax, ds:[0x604C70];
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004914F0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004914D1;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0x59A0C4;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004914D8;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        lea    ecx, ds:[0x604C6C];
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ds:[0x604C70], eax;
	__asm        jmp    near ptr 0x00491523;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00491523;
	__asm        jmp    near ptr 0x004914FF;
	__asm        mov    eax, ds:[0x604C70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0x59A0C4;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00491523;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, ds:[0x604C70];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00491534;
	__asm        jmp    near ptr 0x00491539;
	__asm        jmp    near ptr 0x0049153E;
	__asm        jmp    near ptr 0x00491543;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00491548
void $E31() {
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        push   0x491565;
	__asm        call   0x0056D090;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491560;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00491565
void $E30() {
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        jmp    near ptr 0x00491573;
	__asm        mov    dword ptr [ebp-0x34], 0xC;
	__asm        mov    eax, 0x604C00;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x38], eax;
	__asm        dec    dword ptr [ebp-0x34];
	__asm        js     near ptr 0x004915A8;
	__asm        sub    dword ptr [ebp-0x38], 8;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x0049158E;
	__asm        jmp    near ptr 0x004915AD;
	__asm        mov    eax, ds:[0x604C10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, ds:[0x604C10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00491636;
	__asm        mov    eax, ds:[0x604C10];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00491636;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00491616;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049161B;
	__asm        jmp    near ptr 0x00491620;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491631;
	__asm        jmp    near ptr 0x00491636;
	__asm        jmp    near ptr 0x0049163B;
	__asm        cmp    dword ptr ds:[0x604C0C], 0;
	__asm        je     near ptr 0x00491662;
	__asm        mov    eax, ds:[0x604C0C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491667;
	__asm        mov    eax, ds:[0x604C08];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, ds:[0x604C08];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004916F0;
	__asm        mov    eax, ds:[0x604C08];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004916F0;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004916D0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004916D5;
	__asm        jmp    near ptr 0x004916DA;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004916EB;
	__asm        jmp    near ptr 0x004916F0;
	__asm        jmp    near ptr 0x004916F5;
	__asm        cmp    dword ptr ds:[0x604C04], 0;
	__asm        je     near ptr 0x0049171C;
	__asm        mov    eax, ds:[0x604C04];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491721;
	__asm        jmp    near ptr 0x00491726;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049172b
int32_t GetPathForFile(int32_t nType, int32_t nLanguage, char * szFile, char * szPath) {
// LINE 25:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 26:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, nType;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00492E50;
	__asm        jmp    near ptr 0x00491750;
// LINE 27:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00491755
int32_t FileServices::Initialize() {
	int32_t nMessageBoxReturnValue;
	class basic_string<char> sErrorText;
	class basic_string<char> sErrorTitle;
	int32_t bRemotePathFound;
	int32_t nFullStringID;

// LINE 38:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x207C;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 42:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004917BB;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004917B0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    sErrorText.reference, eax;
	__asm        jmp    near ptr 0x004917C2;
	__asm        mov    sErrorText.reference, 0;
	__asm        mov    sErrorText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004917CE;
// LINE 43:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0049181E;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00491813;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sErrorTitle.reference, eax;
	__asm        jmp    near ptr 0x00491825;
	__asm        mov    sErrorTitle.reference, 0;
	__asm        mov    sErrorTitle.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00491831;
// LINE 45:
	__asm        mov    eax, ds:[0x598F04];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0049183E;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491862;
	__asm        jmp    near ptr 0x00491867;
// LINE 46:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0049192B;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00491894;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004918CA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0049192B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2078], eax;
	__asm        cmp    dword ptr [ebp-0x2078], 0;
	__asm        je     near ptr 0x0049191E;
	__asm        jmp    near ptr 0x004918EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2078];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x0049192B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x00491930;
// LINE 47:
	__asm        mov    ecx, this;
	__asm        call   0x004923C6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004919BC;
// LINE 48:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 2;
// LINE 49:
	__asm        mov    dword ptr [ebp-0x20], 1;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00491980;
	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491985;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     near ptr 0x004919AF;
	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004919B4;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x00491D17;
// LINE 51:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 1;
// LINE 54:
	__asm        mov    ecx, this;
	__asm        call   0x00491D1C;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00491C75;
// LINE 56:
	__asm        push   0;
	__asm        push   0x24;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 57:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        cmp    dword ptr [ebp-0x1070], 0;
	__asm        jne    near ptr 0x00491A97;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1070], eax;
	__asm        jmp    near ptr 0x00491A49;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491A6D;
	__asm        jmp    near ptr 0x00491A72;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00491A92;
	__asm        jmp    near ptr 0x00491AC5;
	__asm        jmp    near ptr 0x00491A9C;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491AC0;
	__asm        jmp    near ptr 0x00491AC5;
// LINE 58:
	__asm        push   0;
	__asm        push   4;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 59:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2074], eax;
	__asm        cmp    dword ptr [ebp-0x2074], 0;
	__asm        jne    near ptr 0x00491B81;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2074], eax;
	__asm        jmp    near ptr 0x00491B33;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491B57;
	__asm        jmp    near ptr 0x00491B5C;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00491B7C;
	__asm        jmp    near ptr 0x00491BAF;
	__asm        jmp    near ptr 0x00491B86;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2070];
	__asm        push   eax;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00491BAA;
	__asm        jmp    near ptr 0x00491BAF;
// LINE 60:
	__asm        push   0x11;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
	__asm        mov    nMessageBoxReturnValue, eax;
// LINE 61:
	__asm        cmp    nMessageBoxReturnValue, 2;
	__asm        jne    near ptr 0x00491C5D;
// LINE 62:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   0x00412670;
// LINE 63:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        lea    ecx, sErrorTitle.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00491C21;
	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491C26;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     near ptr 0x00491C50;
	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491C55;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    near ptr 0x00491D17;
// LINE 65:
	__asm        mov    ecx, this;
	__asm        call   0x00491D1C;
	__asm        mov    bRemotePathFound, eax;
// LINE 66:
	__asm        cmp    bRemotePathFound, 0;
	__asm        je     near ptr 0x004919DB;
// LINE 68:
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        mov    eax, sErrorTitle.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sErrorTitle.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00491CB4;
	__asm        mov    eax, sErrorTitle.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00491CB4;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00491CB4;
	__asm        jmp    near ptr 0x00491CB9;
	__asm        cmp    sErrorTitle.c_str_ptr, 0;
	__asm        je     near ptr 0x00491CDB;
	__asm        mov    eax, sErrorTitle.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491CE0;
	__asm        lea    ecx, sErrorText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sErrorText.c_str_ptr, 0;
	__asm        je     near ptr 0x00491D0A;
	__asm        mov    eax, sErrorText.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491D0F;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    near ptr 0x00491D17;
// LINE 69:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00491d1c
int32_t FileServices::FindRemotePath() {
	long lDriveStringLength;
	uint32_t uiDriveType;
	char * szDriveStrings;
	int32_t nReturnValue;
	int32_t i;
	int32_t iEnd;

// LINE 88:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x8C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 91:
	__asm        mov    szDriveStrings, 0;
// LINE 93:
	__asm        mov    nReturnValue, 0;
// LINE 96:
	__asm        mov    eax, szDriveStrings;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C35E8];
	__asm        mov    lDriveStringLength, eax;
// LINE 97:
	__asm        cmp    lDriveStringLength, 0;
	__asm        jle    near ptr 0x004923B2;
// LINE 98:
	__asm        mov    eax, lDriveStringLength;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    szDriveStrings, eax;
// LINE 99:
	__asm        cmp    szDriveStrings, 0;
	__asm        je     near ptr 0x004923B2;
// LINE 100:
	__asm        mov    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, lDriveStringLength;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E8];
// LINE 101:
	__asm        mov    i, 0;
	__asm        mov    eax, lDriveStringLength;
	__asm        dec    eax;
	__asm        mov    iEnd, eax;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0049239A;
// LINE 102:
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        cmp    eax, 0x61;
	__asm        jge    near ptr 0x00491DC3;
// LINE 103:
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        add    eax, 0x20;
	__asm        mov    ecx, i;
	__asm        mov    edx, szDriveStrings;
	__asm        mov    [ecx+edx], al;
// LINE 104:
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35EC];
	__asm        mov    uiDriveType, eax;
// LINE 105:
	__asm        cmp    uiDriveType, 5;
	__asm        je     near ptr 0x00491DFA;
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        cmp    eax, 0x63;
	__asm        jl     near ptr 0x0049236C;
	__asm        cmp    uiDriveType, 2;
	__asm        jne    near ptr 0x0049236C;
// LINE 106:
	__asm        jmp    near ptr 0x00491DFF;
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00491E4D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491E3E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491E4D;
	__asm        jmp    near ptr 0x00491E52;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00491E89;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00492019;
	__asm        jmp    near ptr 0x00491E74;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-0x50];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00492019;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00491F67;
	__asm        cmp    dword ptr [ebp-0x50], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00491EDC;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491ECD;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491EDC;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00491F44;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00491F3F;
	__asm        jmp    near ptr 0x00491F4D;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00491F5C;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00491F6E;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00492003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00492003;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00491FE3;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00491FE8;
	__asm        jmp    near ptr 0x00491FED;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00491FFE;
	__asm        jmp    near ptr 0x00492003;
	__asm        jmp    near ptr 0x00492008;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x00492052;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00492052;
	__asm        jmp    near ptr 0x00492028;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        add    eax, szDriveStrings;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00492052;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00492066;
	__asm        jmp    near ptr 0x0049206B;
// LINE 107:
	__asm        jmp    near ptr 0x00492070;
	__asm        push   0x59A0A4;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x00492088;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x88];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004920D7;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004920C8;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004920D7;
	__asm        jmp    near ptr 0x004920DC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0049211D;
	__asm        jmp    near ptr 0x004920F4;
	__asm        jmp    near ptr 0x004920F9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x88];
	__asm        jae    near ptr 0x004922E3;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00492236;
	__asm        jmp    near ptr 0x00492139;
	__asm        jmp    near ptr 0x0049213E;
	__asm        jmp    near ptr 0x00492143;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049216E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0049217A;
	__asm        jmp    near ptr 0x0049217A;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x0049217A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00492213;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049220E;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049220E;
	__asm        jmp    near ptr 0x0049221C;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049222B;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0049223D;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004922D2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x004922D2;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004922B2;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004922B7;
	__asm        jmp    near ptr 0x004922BC;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004922CD;
	__asm        jmp    near ptr 0x004922D2;
	__asm        jmp    near ptr 0x004922D7;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x00492331;
	__asm        jmp    near ptr 0x004922F5;
	__asm        jmp    near ptr 0x004922FA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        push   0x59A0A4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00492331;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00492348;
	__asm        jmp    near ptr 0x0049234D;
// LINE 108:
	__asm        mov    ecx, this;
	__asm        call   0x004923C6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0049236C;
// LINE 109:
	__asm        mov    nReturnValue, 1;
// LINE 110:
	__asm        jmp    near ptr 0x0049239A;
// LINE 113:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x00492392;
	__asm        mov    eax, i;
	__asm        mov    ecx, szDriveStrings;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00492392;
// LINE 114:
	__asm        inc    i;
	__asm        jmp    near ptr 0x0049236C;
// LINE 115:
	__asm        inc    i;
// LINE 116:
	__asm        jmp    near ptr 0x00491D8E;
// LINE 117:
	__asm        mov    eax, szDriveStrings;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 121:
	__asm        mov    nReturnValue, 1;
// LINE 123:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004923C1;
// LINE 127:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004923c6
int32_t FileServices::ValidateRemotePath() {
	class PFile tempPFile;
	class basic_string<char> sTempValidationFilePath;

// LINE 138:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x194;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 139:
	__asm        jmp    near ptr 0x004923DD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00492428;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492419;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492428;
	__asm        jmp    near ptr 0x0049242D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0049245C;
	__asm        jmp    near ptr 0x00492445;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x00492466;
	__asm        mov    dword ptr [ebp-0x188], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0049246B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-0x188];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004924B2;
	__asm        jmp    near ptr 0x00492488;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004924B2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    sTempValidationFilePath.reference, eax;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004924FC;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     near ptr 0x004924F5;
	__asm        mov    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18C];
	__asm        call   0x0041E200;
	__asm        mov    sTempValidationFilePath.reference, eax;
	__asm        jmp    near ptr 0x004924FC;
	__asm        mov    sTempValidationFilePath.reference, 0;
	__asm        mov    sTempValidationFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00492508;
// LINE 140:
	__asm        jmp    near ptr 0x0049250D;
	__asm        push   0x59A0AC;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0AC;
	__asm        lea    ecx, sTempValidationFilePath.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0049252D;
// LINE 141:
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049255B;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492560;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sTempValidationFilePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00492578;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004925F7;
	__asm        jmp    near ptr 0x0049258A;
	__asm        jmp    near ptr 0x0049258F;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004925B1;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    near ptr 0x004925C0;
	__asm        jmp    near ptr 0x004925C0;
	__asm        mov    dword ptr [ebp-0x178], 0;
	__asm        jmp    near ptr 0x004925C0;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004925F7;
	__asm        jmp    near ptr 0x004925FC;
	__asm        mov    byte ptr [ebp-0x168], 0;
	__asm        jmp    near ptr 0x00492608;
	__asm        lea    eax, [ebp-0x168];
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    near ptr 0x00492619;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049263D;
	__asm        jmp    near ptr 0x00492642;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    tempPFile.Handle, 0xFFFFFFFF;
	__asm        mov    tempPFile.ShouldClose, 1;
	__asm        mov    tempPFile.<vftable>, 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     near ptr 0x00492695;
	__asm        mov    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        lea    eax, tempPFile.szFilePath[0];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0049269C;
	__asm        mov    tempPFile.szFilePath[0], 0;
	__asm        jmp    near ptr 0x004926A1;
// LINE 143:
	__asm        push   0;
	__asm        lea    ecx, tempPFile.<vftable>;
	__asm        call   0x004A06E6;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00492795;
// LINE 144:
	__asm        mov    dword ptr [ebp-0x11C], 0;
	__asm        mov    tempPFile.<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    near ptr 0x004926D9;
	__asm        jmp    near ptr 0x004926DE;
	__asm        jmp    near ptr 0x00492706;
	__asm        jmp    near ptr 0x004926F0;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     near ptr 0x00492706;
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     near ptr 0x00492706;
	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049270B;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00492752;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     near ptr 0x00492752;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00492752;
	__asm        jmp    near ptr 0x00492757;
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00492785;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049278A;
	__asm        mov    eax, [ebp-0x11C];
	__asm        jmp    near ptr 0x00492995;
// LINE 145:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    ecx, tempPFile.<vftable>;
	__asm        call   0x004A03A0;
// LINE 146:
	__asm        lea    ecx, tempPFile.<vftable>;
	__asm        call   0x004A0562;
	__asm        cmp    eax, 0x4C4B40;
	__asm        jge    near ptr 0x004928AB;
// LINE 147:
	__asm        lea    ecx, tempPFile.<vftable>;
	__asm        call   0x004A04F0;
// LINE 148:
	__asm        mov    dword ptr [ebp-0x120], 0;
	__asm        mov    tempPFile.<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    near ptr 0x004927EF;
	__asm        jmp    near ptr 0x004927F4;
	__asm        jmp    near ptr 0x0049281C;
	__asm        jmp    near ptr 0x00492806;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     near ptr 0x0049281C;
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     near ptr 0x0049281C;
	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492821;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00492868;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     near ptr 0x00492868;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x140];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00492868;
	__asm        jmp    near ptr 0x0049286D;
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049289B;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004928A0;
	__asm        mov    eax, [ebp-0x120];
	__asm        jmp    near ptr 0x00492995;
// LINE 150:
	__asm        lea    ecx, tempPFile.<vftable>;
	__asm        call   0x004A04F0;
// LINE 151:
	__asm        mov    dword ptr [ebp-0x124], 1;
	__asm        mov    tempPFile.<vftable>, 0x590468;
	__asm        cmp    tempPFile.Handle, 0xFFFFFFFF;
	__asm        jle    near ptr 0x004928D9;
	__asm        jmp    near ptr 0x004928DE;
	__asm        jmp    near ptr 0x00492906;
	__asm        jmp    near ptr 0x004928F0;
	__asm        cmp    dword ptr [ebp-0x160], 0;
	__asm        je     near ptr 0x00492906;
	__asm        cmp    tempPFile.ShouldClose, 0;
	__asm        je     near ptr 0x00492906;
	__asm        mov    eax, tempPFile.Handle;
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049290B;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00492952;
	__asm        mov    eax, sTempValidationFilePath.reference;
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     near ptr 0x00492952;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00492952;
	__asm        jmp    near ptr 0x00492957;
	__asm        cmp    sTempValidationFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00492985;
	__asm        mov    eax, sTempValidationFilePath.c_str_ptr;
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049298A;
	__asm        mov    eax, [ebp-0x124];
	__asm        jmp    near ptr 0x00492995;
// LINE 152:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049299a
void FileServices::RefreshLocalPathCache(class basic_string<char>& sDirectoryBase) {
	class Directory tempDirectory;
	class list<basic_string<char>> tempStringListDirectories;
	class basic_string<char> sTempDirectory;
	class list<basic_string<char>>::iterator tempStringListIterator;
	class list<basic_string<char>> tempStringListFiles;

// LINE 164:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xCC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 165:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, sDirectoryBase;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x004832A3;
// LINE 166:
	__asm        mov    tempStringListDirectories.length, 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        lea    ecx, tempStringListDirectories.node;
	__asm        call   0x004399C0;
	__asm        mov    tempStringListDirectories.node, eax;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    ecx, tempStringListDirectories.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    ecx, tempStringListDirectories.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004929EC;
// LINE 167:
	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   0x0043A490;
// LINE 168:
	__asm        jmp    near ptr 0x004929F9;
// LINE 169:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC8], eax;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        je     near ptr 0x00492A29;
	__asm        mov    ecx, [ebp-0xC8];
	__asm        call   0x0041E2D0;
	__asm        mov    sTempDirectory.reference, eax;
	__asm        jmp    near ptr 0x00492A30;
	__asm        mov    sTempDirectory.reference, 0;
	__asm        mov    sTempDirectory.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00492A3C;
// LINE 171:
	__asm        push   8;
	__asm        lea    eax, tempStringListFiles.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00492A4F;
	__asm        mov    dword ptr [ebp-0xC0], 0;
// LINE 172:
	__asm        and    dword ptr [ebp-0xC0], 3;
	__asm        or     dword ptr [ebp-0xC0], 4;
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        lea    eax, tempStringListDirectories.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00492A7F;
// LINE 173:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00492A98;
	__asm        jmp    near ptr 0x00492A9D;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    tempStringListIterator.node, eax;
// LINE 174:
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00492AB4;
	__asm        jmp    near ptr 0x00492AB9;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x00492ACF;
	__asm        jmp    near ptr 0x00492AE6;
	__asm        jmp    near ptr 0x00492ACF;
	__asm        jmp    near ptr 0x00492AE1;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        jne    near ptr 0x00492AE6;
	__asm        jmp    near ptr 0x00492AEB;
	__asm        jmp    near ptr 0x00492CA8;
	__asm        jmp    near ptr 0x00492AFD;
	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     near ptr 0x00492CA8;
// LINE 175:
	__asm        jmp    near ptr 0x00492B02;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x00492B13;
	__asm        jmp    near ptr 0x00492B18;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, sDirectoryBase;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryBase;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00492B48;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00492BC6;
	__asm        jmp    near ptr 0x00492B60;
	__asm        jmp    near ptr 0x00492B65;
	__asm        jmp    near ptr 0x00492B6A;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, sDirectoryBase;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00492BC6;
	__asm        mov    eax, [ebp-0x9C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x00492BDA;
	__asm        jmp    near ptr 0x00492BDF;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00492C16;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00492C4C;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492C51;
// LINE 176:
	__asm        jmp    near ptr 0x00492C56;
	__asm        push   0x59A0BC;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0BC;
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00492C76;
// LINE 177:
	__asm        lea    eax, sTempDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049299A;
// LINE 178:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x00492C98;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00492CA3;
// LINE 179:
	__asm        jmp    near ptr 0x00492AA3;
// LINE 180:
	__asm        lea    ecx, sTempDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sTempDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x00492CD2;
	__asm        mov    eax, sTempDirectory.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492CD7;
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00492CE8;
	__asm        jmp    near ptr 0x00492CED;
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x00492D06;
	__asm        jmp    near ptr 0x00492D0B;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   0x0043A940;
	__asm        mov    eax, tempStringListFiles.node;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x00492D38;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x00492D4C;
	__asm        lea    ecx, tempStringListFiles.node;
	__asm        call   0x0043A8B0;
	__asm        jmp    near ptr 0x00492D51;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x00492D6B;
	__asm        jmp    near ptr 0x00492D70;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00492D8C;
	__asm        jmp    near ptr 0x00492D91;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        lea    ecx, tempStringListDirectories.node;
	__asm        call   0x0043A940;
	__asm        mov    eax, tempStringListDirectories.node;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x00492DCD;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x00492DE1;
	__asm        lea    ecx, tempStringListDirectories.node;
	__asm        call   0x0043A8B0;
	__asm        jmp    near ptr 0x00492DE6;
	__asm        jmp    near ptr 0x00492DEB;
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00492E15;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00492E1A;
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   0x00412130;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00428C70;
	__asm        jmp    near ptr 0x00492E2F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00492e36
int32_t FileServices::CopyFileFromRemoteToLocal(char * szPartialPath) {
// LINE 195:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 196:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00492E49;
// LINE 197:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00492e50
int32_t FileServices::GetPathForFile(int32_t nType, int32_t nLanguage, char * szFile, char * szPath) {
	long lTotalStringLength;

// LINE 215:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xADC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 218:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x00492E74;
// LINE 219:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 221:
	__asm        cmp    nType, 2;
	__asm        jne    near ptr 0x00493136;
// LINE 222:
	__asm        jmp    near ptr 0x00492E83;
	__asm        jmp    near ptr 0x00492E88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00492EB3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00492EBF;
	__asm        jmp    near ptr 0x00492EBF;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00492EBF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 223:
	__asm        jmp    near ptr 0x00492EE1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 224:
	__asm        jmp    near ptr 0x00492EF5;
	__asm        jmp    near ptr 0x00492EFA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00492F25;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00492F31;
	__asm        jmp    near ptr 0x00492F31;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00492F31;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 225:
	__asm        jmp    near ptr 0x00492F56;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 226:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 227:
	__asm        mov    dword ptr [ebp-0xDC], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0xD8], 0;
	__asm        mov    dword ptr [ebp-0x1E4], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x1E0], 0;
	__asm        jmp    near ptr 0x00492FAF;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1E4];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    dword ptr [ebp-0x1E4], 0x590468;
	__asm        cmp    dword ptr [ebp-0xDC], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00492FE0;
	__asm        jmp    near ptr 0x00492FE5;
	__asm        jmp    near ptr 0x00493013;
	__asm        jmp    near ptr 0x00492FF7;
	__asm        cmp    dword ptr [ebp-0x1E8], 0;
	__asm        je     near ptr 0x00493013;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     near ptr 0x00493013;
	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00493018;
	__asm        jmp    near ptr 0x0049301D;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        jne    near ptr 0x00493127;
// LINE 228:
	__asm        jmp    near ptr 0x0049302F;
	__asm        jmp    near ptr 0x00493034;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049305F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0049306B;
	__asm        jmp    near ptr 0x0049306B;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0049306B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 229:
	__asm        jmp    near ptr 0x0049308D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 230:
	__asm        jmp    near ptr 0x004930A1;
	__asm        jmp    near ptr 0x004930A6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004930D1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004930DD;
	__asm        jmp    near ptr 0x004930DD;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x004930DD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 231:
	__asm        jmp    near ptr 0x00493102;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 232:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 234:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 236:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 0xA;
	__asm        jne    near ptr 0x004933F8;
// LINE 237:
	__asm        jmp    near ptr 0x00493145;
	__asm        jmp    near ptr 0x0049314A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493175;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00493181;
	__asm        jmp    near ptr 0x00493181;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00493181;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 238:
	__asm        jmp    near ptr 0x004931A3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 239:
	__asm        jmp    near ptr 0x004931B7;
	__asm        jmp    near ptr 0x004931BC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004931E7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004931F3;
	__asm        jmp    near ptr 0x004931F3;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x004931F3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 240:
	__asm        jmp    near ptr 0x00493218;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 241:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 242:
	__asm        mov    dword ptr [ebp-0x1F4], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x1F0], 0;
	__asm        mov    dword ptr [ebp-0x2FC], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x2F8], 0;
	__asm        jmp    near ptr 0x00493271;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x2FC];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    dword ptr [ebp-0x2FC], 0x590468;
	__asm        cmp    dword ptr [ebp-0x1F4], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004932A2;
	__asm        jmp    near ptr 0x004932A7;
	__asm        jmp    near ptr 0x004932D5;
	__asm        jmp    near ptr 0x004932B9;
	__asm        cmp    dword ptr [ebp-0x300], 0;
	__asm        je     near ptr 0x004932D5;
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     near ptr 0x004932D5;
	__asm        mov    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004932DA;
	__asm        jmp    near ptr 0x004932DF;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        jne    near ptr 0x004933E9;
// LINE 243:
	__asm        jmp    near ptr 0x004932F1;
	__asm        jmp    near ptr 0x004932F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493321;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0049332D;
	__asm        jmp    near ptr 0x0049332D;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0049332D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 244:
	__asm        jmp    near ptr 0x0049334F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 245:
	__asm        jmp    near ptr 0x00493363;
	__asm        jmp    near ptr 0x00493368;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493393;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0049339F;
	__asm        jmp    near ptr 0x0049339F;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x0049339F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 246:
	__asm        jmp    near ptr 0x004933C4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 247:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 249:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 251:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 4;
	__asm        jne    near ptr 0x004936BA;
// LINE 252:
	__asm        jmp    near ptr 0x00493407;
	__asm        jmp    near ptr 0x0049340C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493437;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00493443;
	__asm        jmp    near ptr 0x00493443;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00493443;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 253:
	__asm        jmp    near ptr 0x00493465;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 254:
	__asm        jmp    near ptr 0x00493479;
	__asm        jmp    near ptr 0x0049347E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004934A9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004934B5;
	__asm        jmp    near ptr 0x004934B5;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x004934B5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 255:
	__asm        jmp    near ptr 0x004934DA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 256:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 257:
	__asm        mov    dword ptr [ebp-0x30C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x308], 0;
	__asm        mov    dword ptr [ebp-0x414], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x410], 0;
	__asm        jmp    near ptr 0x00493533;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x414];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x304], eax;
	__asm        mov    dword ptr [ebp-0x414], 0x590468;
	__asm        cmp    dword ptr [ebp-0x30C], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00493564;
	__asm        jmp    near ptr 0x00493569;
	__asm        jmp    near ptr 0x00493597;
	__asm        jmp    near ptr 0x0049357B;
	__asm        cmp    dword ptr [ebp-0x418], 0;
	__asm        je     near ptr 0x00493597;
	__asm        cmp    dword ptr [ebp-0x308], 0;
	__asm        je     near ptr 0x00493597;
	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049359C;
	__asm        jmp    near ptr 0x004935A1;
	__asm        cmp    dword ptr [ebp-0x304], 0;
	__asm        jne    near ptr 0x004936AB;
// LINE 258:
	__asm        jmp    near ptr 0x004935B3;
	__asm        jmp    near ptr 0x004935B8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004935E3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004935EF;
	__asm        jmp    near ptr 0x004935EF;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x004935EF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 259:
	__asm        jmp    near ptr 0x00493611;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 260:
	__asm        jmp    near ptr 0x00493625;
	__asm        jmp    near ptr 0x0049362A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493655;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00493661;
	__asm        jmp    near ptr 0x00493661;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x00493661;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 261:
	__asm        jmp    near ptr 0x00493686;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 262:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 264:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 266:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 5;
	__asm        jne    near ptr 0x0049397C;
// LINE 267:
	__asm        jmp    near ptr 0x004936C9;
	__asm        jmp    near ptr 0x004936CE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004936F9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00493705;
	__asm        jmp    near ptr 0x00493705;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00493705;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 268:
	__asm        jmp    near ptr 0x00493727;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 269:
	__asm        jmp    near ptr 0x0049373B;
	__asm        jmp    near ptr 0x00493740;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049376B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00493777;
	__asm        jmp    near ptr 0x00493777;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x00493777;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 270:
	__asm        jmp    near ptr 0x0049379C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 271:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 272:
	__asm        mov    dword ptr [ebp-0x424], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x420], 0;
	__asm        mov    dword ptr [ebp-0x52C], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x528], 0;
	__asm        jmp    near ptr 0x004937F5;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x52C];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x41C], eax;
	__asm        mov    dword ptr [ebp-0x52C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x424], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00493826;
	__asm        jmp    near ptr 0x0049382B;
	__asm        jmp    near ptr 0x00493859;
	__asm        jmp    near ptr 0x0049383D;
	__asm        cmp    dword ptr [ebp-0x530], 0;
	__asm        je     near ptr 0x00493859;
	__asm        cmp    dword ptr [ebp-0x420], 0;
	__asm        je     near ptr 0x00493859;
	__asm        mov    eax, [ebp-0x424];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049385E;
	__asm        jmp    near ptr 0x00493863;
	__asm        cmp    dword ptr [ebp-0x41C], 0;
	__asm        jne    near ptr 0x0049396D;
// LINE 273:
	__asm        jmp    near ptr 0x00493875;
	__asm        jmp    near ptr 0x0049387A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004938A5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004938B1;
	__asm        jmp    near ptr 0x004938B1;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x004938B1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 274:
	__asm        jmp    near ptr 0x004938D3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 275:
	__asm        jmp    near ptr 0x004938E7;
	__asm        jmp    near ptr 0x004938EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493917;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00493923;
	__asm        jmp    near ptr 0x00493923;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x00493923;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 276:
	__asm        jmp    near ptr 0x00493948;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 277:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 279:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 281:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 6;
	__asm        jne    near ptr 0x00493C3E;
// LINE 282:
	__asm        jmp    near ptr 0x0049398B;
	__asm        jmp    near ptr 0x00493990;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004939BB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004939C7;
	__asm        jmp    near ptr 0x004939C7;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        jmp    near ptr 0x004939C7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 283:
	__asm        jmp    near ptr 0x004939E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 284:
	__asm        jmp    near ptr 0x004939FD;
	__asm        jmp    near ptr 0x00493A02;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493A2D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00493A39;
	__asm        jmp    near ptr 0x00493A39;
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x00493A39;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 285:
	__asm        jmp    near ptr 0x00493A5E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 286:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 287:
	__asm        mov    dword ptr [ebp-0x53C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x538], 0;
	__asm        mov    dword ptr [ebp-0x644], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x640], 0;
	__asm        jmp    near ptr 0x00493AB7;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x644];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x534], eax;
	__asm        mov    dword ptr [ebp-0x644], 0x590468;
	__asm        cmp    dword ptr [ebp-0x53C], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00493AE8;
	__asm        jmp    near ptr 0x00493AED;
	__asm        jmp    near ptr 0x00493B1B;
	__asm        jmp    near ptr 0x00493AFF;
	__asm        cmp    dword ptr [ebp-0x648], 0;
	__asm        je     near ptr 0x00493B1B;
	__asm        cmp    dword ptr [ebp-0x538], 0;
	__asm        je     near ptr 0x00493B1B;
	__asm        mov    eax, [ebp-0x53C];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00493B20;
	__asm        jmp    near ptr 0x00493B25;
	__asm        cmp    dword ptr [ebp-0x534], 0;
	__asm        jne    near ptr 0x00493C2F;
// LINE 288:
	__asm        jmp    near ptr 0x00493B37;
	__asm        jmp    near ptr 0x00493B3C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493B67;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00493B73;
	__asm        jmp    near ptr 0x00493B73;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    near ptr 0x00493B73;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 289:
	__asm        jmp    near ptr 0x00493B95;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 290:
	__asm        jmp    near ptr 0x00493BA9;
	__asm        jmp    near ptr 0x00493BAE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493BD9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x00493BE5;
	__asm        jmp    near ptr 0x00493BE5;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x00493BE5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 291:
	__asm        jmp    near ptr 0x00493C0A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 292:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 294:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 296:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 7;
	__asm        jne    near ptr 0x00493F00;
// LINE 297:
	__asm        jmp    near ptr 0x00493C4D;
	__asm        jmp    near ptr 0x00493C52;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493C7D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00493C89;
	__asm        jmp    near ptr 0x00493C89;
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x00493C89;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 298:
	__asm        jmp    near ptr 0x00493CAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 299:
	__asm        jmp    near ptr 0x00493CBF;
	__asm        jmp    near ptr 0x00493CC4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493CEF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00493CFB;
	__asm        jmp    near ptr 0x00493CFB;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x00493CFB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 300:
	__asm        jmp    near ptr 0x00493D20;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 301:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 302:
	__asm        mov    dword ptr [ebp-0x654], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x650], 0;
	__asm        mov    dword ptr [ebp-0x75C], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x758], 0;
	__asm        jmp    near ptr 0x00493D79;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x75C];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x64C], eax;
	__asm        mov    dword ptr [ebp-0x75C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x654], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00493DAA;
	__asm        jmp    near ptr 0x00493DAF;
	__asm        jmp    near ptr 0x00493DDD;
	__asm        jmp    near ptr 0x00493DC1;
	__asm        cmp    dword ptr [ebp-0x760], 0;
	__asm        je     near ptr 0x00493DDD;
	__asm        cmp    dword ptr [ebp-0x650], 0;
	__asm        je     near ptr 0x00493DDD;
	__asm        mov    eax, [ebp-0x654];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00493DE2;
	__asm        jmp    near ptr 0x00493DE7;
	__asm        cmp    dword ptr [ebp-0x64C], 0;
	__asm        jne    near ptr 0x00493EF1;
// LINE 303:
	__asm        jmp    near ptr 0x00493DF9;
	__asm        jmp    near ptr 0x00493DFE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493E29;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00493E35;
	__asm        jmp    near ptr 0x00493E35;
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        jmp    near ptr 0x00493E35;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 304:
	__asm        jmp    near ptr 0x00493E57;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 305:
	__asm        jmp    near ptr 0x00493E6B;
	__asm        jmp    near ptr 0x00493E70;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493E9B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x00493EA7;
	__asm        jmp    near ptr 0x00493EA7;
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    near ptr 0x00493EA7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 306:
	__asm        jmp    near ptr 0x00493ECC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 307:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 309:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 311:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 8;
	__asm        jne    near ptr 0x004941C2;
// LINE 312:
	__asm        jmp    near ptr 0x00493F0F;
	__asm        jmp    near ptr 0x00493F14;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493F3F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00493F4B;
	__asm        jmp    near ptr 0x00493F4B;
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    near ptr 0x00493F4B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 313:
	__asm        jmp    near ptr 0x00493F6D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 314:
	__asm        jmp    near ptr 0x00493F81;
	__asm        jmp    near ptr 0x00493F86;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00493FB1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x00493FBD;
	__asm        jmp    near ptr 0x00493FBD;
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    near ptr 0x00493FBD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 315:
	__asm        jmp    near ptr 0x00493FE2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 316:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 317:
	__asm        mov    dword ptr [ebp-0x76C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x768], 0;
	__asm        mov    dword ptr [ebp-0x874], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x870], 0;
	__asm        jmp    near ptr 0x0049403B;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x874];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x764], eax;
	__asm        mov    dword ptr [ebp-0x874], 0x590468;
	__asm        cmp    dword ptr [ebp-0x76C], 0xFFFFFFFF;
	__asm        jle    near ptr 0x0049406C;
	__asm        jmp    near ptr 0x00494071;
	__asm        jmp    near ptr 0x0049409F;
	__asm        jmp    near ptr 0x00494083;
	__asm        cmp    dword ptr [ebp-0x878], 0;
	__asm        je     near ptr 0x0049409F;
	__asm        cmp    dword ptr [ebp-0x768], 0;
	__asm        je     near ptr 0x0049409F;
	__asm        mov    eax, [ebp-0x76C];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004940A4;
	__asm        jmp    near ptr 0x004940A9;
	__asm        cmp    dword ptr [ebp-0x764], 0;
	__asm        jne    near ptr 0x004941B3;
// LINE 318:
	__asm        jmp    near ptr 0x004940BB;
	__asm        jmp    near ptr 0x004940C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004940EB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004940F7;
	__asm        jmp    near ptr 0x004940F7;
	__asm        mov    dword ptr [ebp-0x7C], 0;
	__asm        jmp    near ptr 0x004940F7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 319:
	__asm        jmp    near ptr 0x00494119;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 320:
	__asm        jmp    near ptr 0x0049412D;
	__asm        jmp    near ptr 0x00494132;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049415D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00494169;
	__asm        jmp    near ptr 0x00494169;
	__asm        mov    dword ptr [ebp-0x80], 0;
	__asm        jmp    near ptr 0x00494169;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 321:
	__asm        jmp    near ptr 0x0049418E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 322:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 324:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 326:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 1;
	__asm        jne    near ptr 0x004944A8;
// LINE 327:
	__asm        jmp    near ptr 0x004941D1;
	__asm        jmp    near ptr 0x004941D6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494204;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00494213;
	__asm        jmp    near ptr 0x00494213;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x00494213;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 328:
	__asm        jmp    near ptr 0x00494238;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 329:
	__asm        jmp    near ptr 0x0049424C;
	__asm        jmp    near ptr 0x00494251;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049427F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x0049428E;
	__asm        jmp    near ptr 0x0049428E;
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    near ptr 0x0049428E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 330:
	__asm        jmp    near ptr 0x004942B6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 331:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 332:
	__asm        mov    dword ptr [ebp-0x884], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x880], 0;
	__asm        mov    dword ptr [ebp-0x98C], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0x988], 0;
	__asm        jmp    near ptr 0x0049430F;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x98C];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x87C], eax;
	__asm        mov    dword ptr [ebp-0x98C], 0x590468;
	__asm        cmp    dword ptr [ebp-0x884], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00494340;
	__asm        jmp    near ptr 0x00494345;
	__asm        jmp    near ptr 0x00494373;
	__asm        jmp    near ptr 0x00494357;
	__asm        cmp    dword ptr [ebp-0x990], 0;
	__asm        je     near ptr 0x00494373;
	__asm        cmp    dword ptr [ebp-0x880], 0;
	__asm        je     near ptr 0x00494373;
	__asm        mov    eax, [ebp-0x884];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494378;
	__asm        jmp    near ptr 0x0049437D;
	__asm        cmp    dword ptr [ebp-0x87C], 0;
	__asm        jne    near ptr 0x00494499;
// LINE 333:
	__asm        jmp    near ptr 0x0049438F;
	__asm        jmp    near ptr 0x00494394;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004943C2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004943D1;
	__asm        jmp    near ptr 0x004943D1;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    near ptr 0x004943D1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 334:
	__asm        jmp    near ptr 0x004943F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 335:
	__asm        jmp    near ptr 0x0049440A;
	__asm        jmp    near ptr 0x0049440F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049443D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0049444C;
	__asm        jmp    near ptr 0x0049444C;
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x0049444C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 336:
	__asm        jmp    near ptr 0x00494474;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 337:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 339:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 341:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 0xB;
	__asm        jne    near ptr 0x0049478E;
// LINE 342:
	__asm        jmp    near ptr 0x004944B7;
	__asm        jmp    near ptr 0x004944BC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004944EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004944F9;
	__asm        jmp    near ptr 0x004944F9;
	__asm        mov    dword ptr [ebp-0x94], 0;
	__asm        jmp    near ptr 0x004944F9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 343:
	__asm        jmp    near ptr 0x0049451E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 344:
	__asm        jmp    near ptr 0x00494532;
	__asm        jmp    near ptr 0x00494537;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494565;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x00494574;
	__asm        jmp    near ptr 0x00494574;
	__asm        mov    dword ptr [ebp-0x98], 0;
	__asm        jmp    near ptr 0x00494574;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 345:
	__asm        jmp    near ptr 0x0049459C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 346:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 347:
	__asm        mov    dword ptr [ebp-0x99C], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x998], 0;
	__asm        mov    dword ptr [ebp-0xAA4], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    byte ptr [ebp-0xAA0], 0;
	__asm        jmp    near ptr 0x004945F5;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xAA4];
	__asm        call   0x004A06E6;
	__asm        mov    [ebp-0x994], eax;
	__asm        mov    dword ptr [ebp-0xAA4], 0x590468;
	__asm        cmp    dword ptr [ebp-0x99C], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00494626;
	__asm        jmp    near ptr 0x0049462B;
	__asm        jmp    near ptr 0x00494659;
	__asm        jmp    near ptr 0x0049463D;
	__asm        cmp    dword ptr [ebp-0xAA8], 0;
	__asm        je     near ptr 0x00494659;
	__asm        cmp    dword ptr [ebp-0x998], 0;
	__asm        je     near ptr 0x00494659;
	__asm        mov    eax, [ebp-0x99C];
	__asm        push   eax;
	__asm        call   0x00578E50;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049465E;
	__asm        jmp    near ptr 0x00494663;
	__asm        cmp    dword ptr [ebp-0x994], 0;
	__asm        jne    near ptr 0x0049477F;
// LINE 348:
	__asm        jmp    near ptr 0x00494675;
	__asm        jmp    near ptr 0x0049467A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004946A8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004946B7;
	__asm        jmp    near ptr 0x004946B7;
	__asm        mov    dword ptr [ebp-0x9C], 0;
	__asm        jmp    near ptr 0x004946B7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 349:
	__asm        jmp    near ptr 0x004946DC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    lTotalStringLength, eax;
// LINE 350:
	__asm        jmp    near ptr 0x004946F0;
	__asm        jmp    near ptr 0x004946F5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494723;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x00494732;
	__asm        jmp    near ptr 0x00494732;
	__asm        mov    dword ptr [ebp-0xA0], 0;
	__asm        jmp    near ptr 0x00494732;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 351:
	__asm        jmp    near ptr 0x0049475A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, lTotalStringLength;
	__asm        mov    lTotalStringLength, eax;
// LINE 352:
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, lTotalStringLength;
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 354:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 356:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 3;
	__asm        jne    near ptr 0x00494E48;
// LINE 360:
// Block start:
	class basic_string<char> sTemp;
	__asm        jmp    near ptr 0x0049479D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x004947E8;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xACC], eax;
	__asm        mov    eax, [ebp-0xACC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004947D9;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004947E8;
	__asm        jmp    near ptr 0x004947ED;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0049481C;
	__asm        jmp    near ptr 0x00494805;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC4], eax;
	__asm        jmp    near ptr 0x00494826;
	__asm        mov    dword ptr [ebp-0xAC4], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0049482B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xAC4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00494873;
	__asm        jmp    near ptr 0x00494848;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00494873;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    sTemp.reference, eax;
	__asm        mov    eax, sTemp.reference;
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00494994;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC8], eax;
	__asm        cmp    dword ptr [ebp-0xAC8], 0;
	__asm        je     near ptr 0x0049498D;
	__asm        mov    eax, [ebp-0xAC4];
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00494961;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004948E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049490E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAD0], eax;
	__asm        jmp    near ptr 0x0049491D;
	__asm        jmp    near ptr 0x0049491D;
	__asm        mov    dword ptr [ebp-0xAD0], 0;
	__asm        jmp    near ptr 0x0049491D;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAD4], eax;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAD8], eax;
	__asm        mov    eax, [ebp-0xAD4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAD8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049495C;
	__asm        jmp    near ptr 0x0049496D;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049497F;
	__asm        mov    eax, [ebp-0xAC8];
	__asm        mov    sTemp.reference, eax;
	__asm        jmp    near ptr 0x00494994;
	__asm        mov    sTemp.reference, 0;
	__asm        mov    sTemp.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004949A0;
// LINE 361:
	__asm        jmp    near ptr 0x004949A5;
	__asm        jmp    near ptr 0x004949AA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004949D8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x004949E7;
	__asm        jmp    near ptr 0x004949E7;
	__asm        mov    dword ptr [ebp-0xBC], 0;
	__asm        jmp    near ptr 0x004949E7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004949FE;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0xD0];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00494A4D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494A3E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494A4D;
	__asm        jmp    near ptr 0x00494A52;
	__asm        mov    eax, sTemp.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00494A81;
	__asm        jmp    near ptr 0x00494A64;
	__asm        jmp    near ptr 0x00494A69;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sTemp.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0xD0];
	__asm        jae    near ptr 0x00494AF6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC4], eax;
	__asm        cmp    dword ptr [ebp-0xC4], 0;
	__asm        je     near ptr 0x00494ADB;
	__asm        jmp    near ptr 0x00494AA3;
	__asm        jmp    near ptr 0x00494AA8;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC4];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x00494AE5;
	__asm        mov    dword ptr [ebp-0xC0], 0;
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    sTemp.reference, eax;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     near ptr 0x00494B40;
	__asm        jmp    near ptr 0x00494B08;
	__asm        jmp    near ptr 0x00494B0D;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sTemp.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00494B40;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    ecx, sTemp.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00494B51;
	__asm        jmp    near ptr 0x00494B56;
// LINE 362:
	__asm        jmp    near ptr 0x00494B5B;
	__asm        push   0x59A0C0;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59A0C0;
	__asm        lea    ecx, sTemp.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00494B7B;
// LINE 363:
	__asm        lea    eax, sTemp.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x00485735;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00494C73;
// LINE 364:
	__asm        jmp    near ptr 0x00494B94;
	__asm        jmp    near ptr 0x00494B99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494BC7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x00494BD6;
	__asm        jmp    near ptr 0x00494BD6;
	__asm        mov    dword ptr [ebp-0xA4], 0;
	__asm        jmp    near ptr 0x00494BD6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 365:
	__asm        jmp    near ptr 0x00494BFB;
	__asm        jmp    near ptr 0x00494C00;
	__asm        jmp    near ptr 0x00494C05;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494C33;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x00494C42;
	__asm        jmp    near ptr 0x00494C42;
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    near ptr 0x00494C42;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 367:
	__asm        jmp    near ptr 0x00494D52;
// LINE 368:
	__asm        jmp    near ptr 0x00494C78;
	__asm        jmp    near ptr 0x00494C7D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494CAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00494CBA;
	__asm        jmp    near ptr 0x00494CBA;
	__asm        mov    dword ptr [ebp-0xAC], 0;
	__asm        jmp    near ptr 0x00494CBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 369:
	__asm        jmp    near ptr 0x00494CDF;
	__asm        jmp    near ptr 0x00494CE4;
	__asm        jmp    near ptr 0x00494CE9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494D17;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00494D26;
	__asm        jmp    near ptr 0x00494D26;
	__asm        mov    dword ptr [ebp-0xB0], 0;
	__asm        jmp    near ptr 0x00494D26;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 371:
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    eax, sTemp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTemp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00494E03;
	__asm        mov    eax, sTemp.reference;
	__asm        mov    [ebp-0xAB8], eax;
	__asm        mov    eax, [ebp-0xAB8];
	__asm        mov    [ebp-0xAB4], eax;
	__asm        cmp    dword ptr [ebp-0xAB4], 0;
	__asm        je     near ptr 0x00494E03;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00494DE0;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xABC], eax;
	__asm        mov    eax, [ebp-0xABC];
	__asm        mov    [ebp-0xAC0], eax;
	__asm        mov    eax, [ebp-0xAC0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00494DE5;
	__asm        jmp    near ptr 0x00494DEA;
	__asm        mov    eax, [ebp-0xAB4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494DFE;
	__asm        jmp    near ptr 0x00494E03;
	__asm        jmp    near ptr 0x00494E08;
	__asm        cmp    sTemp.c_str_ptr, 0;
	__asm        je     near ptr 0x00494E36;
	__asm        mov    eax, sTemp.c_str_ptr;
	__asm        mov    [ebp-0xAAC], eax;
	__asm        mov    eax, [ebp-0xAAC];
	__asm        mov    [ebp-0xAB0], eax;
	__asm        mov    eax, [ebp-0xAB0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494E3B;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x00494F7B;
// LINE 373:
// Block end:
	__asm        jmp    near ptr 0x00494F7B;
	__asm        cmp    nType, 9;
	__asm        jne    near ptr 0x00494EE9;
// LINE 374:
	__asm        jmp    near ptr 0x00494E57;
	__asm        jmp    near ptr 0x00494E5C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494E8A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x00494E99;
	__asm        jmp    near ptr 0x00494E99;
	__asm        mov    dword ptr [ebp-0xB4], 0;
	__asm        jmp    near ptr 0x00494E99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 375:
	__asm        jmp    near ptr 0x00494EBE;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 376:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 378:
	__asm        jmp    near ptr 0x00494F7B;
// LINE 379:
	__asm        jmp    near ptr 0x00494EEE;
	__asm        jmp    near ptr 0x00494EF3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00494F21;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x00494F30;
	__asm        jmp    near ptr 0x00494F30;
	__asm        mov    dword ptr [ebp-0xB8], 0;
	__asm        jmp    near ptr 0x00494F30;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 380:
	__asm        jmp    near ptr 0x00494F55;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, szPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 381:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00494F7B;
// LINE 383:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00494f82
int32_t FileServices::GetPathForFileString(int32_t nType, int32_t nLanguage, class basic_string<char>& sFile, class basic_string<char>& sPath) {
	char * szFile;
	int32_t nReturnValue;
	char szPath[260];

// LINE 391:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x160;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 396:
	__asm        mov    eax, sFile;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00494FC6;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00494FCB;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, sFile;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00494FE8;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00495075;
	__asm        jmp    near ptr 0x00494FFD;
	__asm        jmp    near ptr 0x00495002;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049502A;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x00495039;
	__asm        jmp    near ptr 0x00495039;
	__asm        mov    dword ptr [ebp-0x154], 0;
	__asm        jmp    near ptr 0x00495039;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00495075;
	__asm        jmp    near ptr 0x0049507A;
	__asm        mov    byte ptr [ebp-0x144], 0;
	__asm        jmp    near ptr 0x00495086;
	__asm        lea    eax, [ebp-0x144];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x00495097;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFile;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x150];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004950C0;
	__asm        jmp    near ptr 0x004950C5;
	__asm        mov    eax, sFile;
	__asm        mov    eax, [eax];
	__asm        mov    szFile, eax;
// LINE 397:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, szFile;
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, nType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00492E50;
	__asm        mov    nReturnValue, eax;
// LINE 398:
	__asm        jmp    near ptr 0x004950FC;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00495156;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00495147;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00495156;
	__asm        jmp    near ptr 0x0049515B;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00495192;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     near ptr 0x00495385;
	__asm        jmp    near ptr 0x0049517D;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00495385;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     near ptr 0x004952B2;
	__asm        cmp    dword ptr [ebp-0x13C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004951F4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004951E5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004951F4;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00495283;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049527E;
	__asm        jmp    near ptr 0x0049528F;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004952A1;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x004952BC;
	__asm        mov    dword ptr [ebp-0x110], 0;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049536F;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     near ptr 0x0049536F;
	__asm        mov    eax, [ebp-0x120];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049534C;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00495351;
	__asm        jmp    near ptr 0x00495356;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049536A;
	__asm        jmp    near ptr 0x0049536F;
	__asm        jmp    near ptr 0x00495374;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, sPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004953C7;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     near ptr 0x004953C7;
	__asm        jmp    near ptr 0x00495397;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004953C7;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, sPath;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004953DB;
	__asm        jmp    near ptr 0x004953E0;
// LINE 399:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004953EB;
// LINE 400:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}



// Contribution: 3:00000088-0000008b Module: 21, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597088
// $S33


// Contribution: 3:000030a4-000030c3 Module: 21, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:000030c4-000030ca Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0c4
// ??_C@_06GHGC@tweak?2?$AA@


// Contribution: 3:000030cc-000030ce Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0cc
// ??_C@_02IHAM@X?2?$AA@


// Contribution: 3:000030d0-000030d6 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0d0
// ??_C@_06LEOC@fonts?2?$AA@


// Contribution: 3:000030d8-000030dc Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0d8
// ??_C@_04IAOI@geo?2?$AA@


// Contribution: 3:000030e0-000030e4 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0e0
// ??_C@_04BOOP@bmp?2?$AA@


// Contribution: 3:000030e8-000030f6 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0e8
// ??_C@_0P@CBA@cities?2career?2?$AA@


// Contribution: 3:000030f8-000030ff Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a0f8
// ??_C@_07JPDD@cities?2?$AA@


// Contribution: 3:00003100-0000310c Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a100
// ??_C@_0N@HBG@sound?2radio?2?$AA@


// Contribution: 3:00003110-00003116 Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a110
// ??_C@_06CDIJ@sound?2?$AA@


// Contribution: 3:00003118-0000311c Module: 21, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a118
// ??_C@_04IKJO@smk?2?$AA@


// Contribution: 3:0006dc00-0006dc73 Module: 21, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604c00
// gFileServices


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006bf1ac
// _cameraHeading

// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006bf1b0
// _cameraPitch

// WARNING: this global might actually belong to: FIXED.OBJ
// GLOBAL: COPTER_D 0x006c1210
// _ViewState

// WARNING: this global might actually belong to: C:\Copter\source\game\S3render.c
// GLOBAL: COPTER_D 0x0067ed20
// G_terr_maxalt

// WARNING: this global might actually belong to: C:\Copter\source\game\S3render.c
// GLOBAL: COPTER_D 0x006c1210
// ViewState
