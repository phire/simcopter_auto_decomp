// Module: Inputwin.obj
// Source: C:\Copter\source\sparkal\Inputwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class KeyboardWindow (forward reference);
class KeyboardWindow : public GraphicWindow
{
public:
	void KeyboardWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~KeyboardWindow();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual int32_t DoesWindowNeedUpdating();
	// vtable: 196
	intro int32_t DoesKeyExistOnKeyboard(long);
	virtual long DoKeyDown(long, char);
	virtual long DoKeyUp(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	class list<HotSpot> myHotSpotList;
	class list<HotSpot> myNumLockOnHotSpotList;
	class list<HotSpot> myNumLockOffHotSpotList;
	class list<HotSpot>* myCurrentlyUsedNumLockHotSpotList;
	class list<KeyColors> myKeyColorsList;
protected:
	// vtable: 200
	intro void DrawKeyColorsOnKeyboard();
	// vtable: 204
	intro void DrawCharactersOnKeyboard();
	// vtable: 208
	intro void DrawLightsOnKeyboard();
	// vtable: 212
	intro int32_t DoesKeyRequireTextDraw(long);
	// vtable: 216
	intro int32_t DoesPositionHitKey(long, long, long&);
	// vtable: 220
	intro int32_t ConvertKeyToString(int32_t, long, class basic_string<char>&);
	// vtable: 224
	intro int32_t GetRectOfNonTextImage(long, class MRect&);
	class CBackBuffer* myKeyLightImage;
	class CBackBuffer* myNonTextKeyImage;
	class MFont* mFontToUse;
	int32_t bNumLockLastSetting;
	int32_t bCapsLockLastSetting;
	int32_t bScrollLockLastSetting;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class list<HotSpot>::iterator;
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator operator++(int32_t);
	class list<HotSpot>::iterator& operator++();
	class list<HotSpot>::iterator operator--(int32_t);
	class list<HotSpot>::iterator& operator--();
};

// Type: class list<KeyColors>::iterator;
class list<KeyColors>::iterator : public bidirectional_iterator<KeyColors,int>
{
protected:
	struct list<KeyColors>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<KeyColors>::list_node*);
public:
	int32_t operator==(const class list<KeyColors>::iterator&);
	struct KeyColors& operator*();
	class list<KeyColors>::iterator operator++(int32_t);
	class list<KeyColors>::iterator& operator++();
	class list<KeyColors>::iterator operator--(int32_t);
	class list<KeyColors>::iterator& operator--();
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char[64];

// Type: char;

// Type: unsigned long;

// Type: struct KeyboardWindowMessage;
class KeyboardWindowMessage{
public:
	long lKey;
	long lCursorButton;
};

// Type: class JoystickWindow (forward reference);
class JoystickWindow : public GraphicWindow
{
public:
	void JoystickWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~JoystickWindow();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual int32_t DoesWindowNeedUpdating();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 196
	intro void SetCurrentJoystick(int32_t);
	int32_t nCurrentJoystick;
	long[14] lJoystickControlStates;
	char[14] lJoystickControlColors;
protected:
	// vtable: 200
	intro int32_t GetHandleImageToUse();
	// vtable: 204
	intro void DrawCurrentJoystick();
	// vtable: 208
	intro void DrawButton(int32_t);
	// vtable: 212
	intro void DrawSlider(int32_t);
	// vtable: 216
	intro void DrawHandle();
	// vtable: 220
	intro void GetNewJoystickControlStates(long *);
	// vtable: 224
	intro int32_t DoesPositionHitKey(long, long, long&);
	// vtable: 228
	intro void GetSourceHandleBaseRects(class MRect*);
	class MRect[8] rectButtons;
	class MRect[4] rectSliders;
	class MRect rectHandle;
	class MRect[4] rectHandleBaseGraphics;
	class CBackBuffer* myButtonImage;
	class CBackBuffer* mySliderImage;
	class CBackBuffer* myHandleImage;
	class CBackBuffer* myHandleBaseImage;
};

// Type: long[14];

// Type: class MRect[4];

// Type: long *;

// Type: class UserInputWindow (forward reference);
class UserInputWindow : public GraphicWindow
{
		enum KeyUsageType {
			nKeyUsageTypeFree = 0,
			nKeyUsageTypeReserved = 1,
			nKeyUsageTypeCurrentCommand = 2,
			nKeyUsageTypeOtherCommand = 3,
		};
public:
	void UserInputWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	// vtable: 196
	intro void SetupAllInputDevices();
	// vtable: 200
	intro void SetupAllCommands();
	// vtable: 204
	intro void ReadShortcuts(class list<Shortcut>&);
	// vtable: 208
	intro void WriteShortcutsToPreferenceFile();
	int32_t HaveCommandsChanged();
	long GetCurrentDevice();
	long GetCurrentCommand();
	enum UserInputWindow::KeyUsageType GetKeyUsageType(long, long);
	void RemoveShortcutFromList(long, long, long);
protected:
	void UpdateDisplay(int32_t);
	int32_t DoJoystickWindowMessage(long, void * __ptr32);
	int32_t DoKeyboardWindowMessage(long, void * __ptr32);
	int32_t DoInputDeviceListBoxWindowMessage(long, void * __ptr32);
	int32_t DoCommandListBoxWindowMessage(long, void * __ptr32);
	void DisplayError(int32_t);
	void ClearDeviceArea();
	void AddJoystickTwinCommand(long, long, long);
	void RemoveJoystickTwinCommand(long, long, long);
	int32_t DoesTwinCommandExistForShortcut(long, long, long);
	class JoystickWindow* myJoystickWindow;
	class KeyboardWindow* myKeyboardWindow;
	class ListBoxWindow* myInputDeviceListBoxWindow;
	class ListBoxWindow* myCommandListBoxWindow;
	class TextWindow* myStatusTextWindow;
	class list<StringIDAssociation> myInputDeviceStringIDAssociationList;
	class list<StringIDAssociation> myCommandStringIDAssociationList;
	class list<Shortcut> myShortcutListNonConfigurable;
	class list<Shortcut> myShortcutListConfigurable;
	int32_t bCommandsHaveChanged;
	int32_t bInitializing;
};

// Type: class ButtonWindow (forward reference);
class ButtonWindow : public GraphicWindow
{
		enum ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: void * __ptr32;

// Type: class ControlDisplayWindow (forward reference);
class ControlDisplayWindow : public GraphicWindow
{
public:
	void ControlDisplayWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void ReadShortcuts(class list<Shortcut>*);
protected:
	void GetCommandString(class basic_string<char>&, long);
	void AppendKeysString(class basic_string<char>&, long, long, int32_t);
	int32_t bInitializing;
	class ListBoxWindow* myCommandListBoxWindow;
	class ListBoxWindow* myKeysListBoxWindow;
};

// Type: enum UserInputWindow::KeyUsageType;

// Type: struct Shortcut;
class Shortcut{
public:
	long lDeviceID;
	long lCommand;
	long lKey;
	long lModifiers;
	long lPush;
	long lIgnoreModifiers;
};

// Type: class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{
protected:
	struct list<Shortcut>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};

// Type: class list<StringIDAssociation>::iterator;
class list<StringIDAssociation>::iterator : public bidirectional_iterator<StringIDAssociation,int>
{
protected:
	struct list<StringIDAssociation>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<StringIDAssociation>::list_node*);
public:
	int32_t operator==(const class list<StringIDAssociation>::iterator&);
	struct StringIDAssociation& operator*();
	class list<StringIDAssociation>::iterator operator++(int32_t);
	class list<StringIDAssociation>::iterator& operator++();
	class list<StringIDAssociation>::iterator operator--(int32_t);
	class list<StringIDAssociation>::iterator& operator--();
};

// Type: long[16];

// Type: struct KeyColors;
class KeyColors{
public:
	long lKey;
	long lColorIndex;
};

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class CBackBuffer (forward reference);

// Type: char[260];

// Type: uint32_t;

// Type: class list<Shortcut> (forward reference);
class list<Shortcut>{
	using void_pointer = void * __ptr32;
	class list<Shortcut>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		struct Shortcut data;
	};
protected:
	static class allocator<list<Shortcut>::list_node> list_node_allocator;
	static class allocator<Shortcut> value_allocator;
	using value_type = struct Shortcut;
	using value_allocator_type = class allocator<Shortcut>;
	using pointer = struct Shortcut*;
	using reference = struct Shortcut&;
	using const_reference = const struct Shortcut&;
	using list_node_allocator_type = class allocator<list<Shortcut>::list_node>;
	using link_type = struct list<Shortcut>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<Shortcut>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<Shortcut>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<Shortcut>::list_node_buffer>;
	using buffer_pointer = struct list<Shortcut>::list_node_buffer*;
protected:
	static class allocator<list<Shortcut>::list_node_buffer> buffer_allocator;
	static struct list<Shortcut>::list_node_buffer* buffer_list;
	static struct list<Shortcut>::list_node* free_list;
	static struct list<Shortcut>::list_node* next_avail;
	static struct list<Shortcut>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<Shortcut>::list_node* get_node();
	void put_node(struct list<Shortcut>::list_node*);
	struct list<Shortcut>::list_node* node;
	uint32_t length;
	class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
	{
	protected:
		struct list<Shortcut>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const class list<Shortcut>::iterator&);
		struct Shortcut& operator*();
		class list<Shortcut>::iterator operator++(int32_t);
		class list<Shortcut>::iterator& operator++();
		class list<Shortcut>::iterator operator--(int32_t);
		class list<Shortcut>::iterator& operator--();
	};
	class list<Shortcut>::const_iterator : public bidirectional_iterator<Shortcut,int>
	{
	protected:
		struct list<Shortcut>::list_node* node;
	public:
		void const_iterator(const class list<Shortcut>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const class list<Shortcut>::const_iterator&);
		const struct Shortcut& operator*();
		class list<Shortcut>::const_iterator operator++(int32_t);
		class list<Shortcut>::const_iterator& operator++();
		class list<Shortcut>::const_iterator operator--(int32_t);
		class list<Shortcut>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int>;
public:
	void list<Shortcut>(const class list<Shortcut>&);
	void list<Shortcut>(const struct Shortcut*, const struct Shortcut*);
	void list<Shortcut>(uint32_t, const struct Shortcut&);
	void list<Shortcut>();
	class list<Shortcut>::const_iterator begin();
	class list<Shortcut>::iterator begin();
	class list<Shortcut>::const_iterator end();
	class list<Shortcut>::iterator end();
	class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rbegin();
	class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rbegin();
	class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rend();
	class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const struct Shortcut& front();
	struct Shortcut& front();
	const struct Shortcut& back();
	struct Shortcut& back();
	void swap(class list<Shortcut>&);
	void insert(class list<Shortcut>::iterator, uint32_t, const struct Shortcut&);
	void insert(class list<Shortcut>::iterator, class list<Shortcut>::const_iterator, class list<Shortcut>::const_iterator);
	void insert(class list<Shortcut>::iterator, const struct Shortcut*, const struct Shortcut*);
	class list<Shortcut>::iterator insert(class list<Shortcut>::iterator, const struct Shortcut&);
	void push_front(const struct Shortcut&);
	void push_back(const struct Shortcut&);
	void erase(class list<Shortcut>::iterator, class list<Shortcut>::iterator);
	void erase(class list<Shortcut>::iterator);
	void pop_front();
	void pop_back();
	void ~list<Shortcut>();
	class list<Shortcut>& operator=(const class list<Shortcut>&);
protected:
	void transfer(class list<Shortcut>::iterator, class list<Shortcut>::iterator, class list<Shortcut>::iterator);
public:
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&, class list<Shortcut>::iterator, class list<Shortcut>::iterator);
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&, class list<Shortcut>::iterator);
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&);
	void remove(const struct Shortcut&);
	void unique();
	void merge(class list<Shortcut>&);
	void reverse();
	void sort();
};

// Type: class TextWindow (forward reference);
class TextWindow : public GraphicWindow
{
public:
	void TextWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro void SetWindowTitle(const class basic_string<char>&);
	// vtable: 200
	intro void SetWindowTitle(int32_t);
	// vtable: 204
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 208
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 212
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 216
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 220
	intro void LoadStrings();
	// vtable: 224
	intro void FitWindowToText();
	// vtable: 228
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
};

// Type: class set<long,less<long>>;
class set<long,less<long>>{
	using key_type = long;
	using value_type = long;
	using key_compare = struct less<long>;
	using value_compare = struct less<long>;
	using rep_type = class rb_tree<long,long,ident<long,long>,less<long>>;
private:
	class rb_tree<long,long,ident<long,long>,less<long>> t;
	using reference = const long&;
	using const_reference = const long&;
	using iterator = class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator;
	using const_iterator = class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator;
	using reverse_iterator = class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int>;
	using const_reverse_iterator = class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int>;
	using size_type = uint32_t;
	using difference_type = int32_t;
public:
	void set<long,less<long>>(const class set<long,less<long>>&);
	void set<long,less<long>>(long *, long *, const struct less<long>&);
	void set<long,less<long>>(const struct less<long>&);
	class set<long,less<long>>& operator=(const class set<long,less<long>>&);
	struct less<long> key_comp();
	struct less<long> value_comp();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator begin();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator end();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int> rbegin();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	void swap(class set<long,less<long>>&);
	using pair_iterator_bool = struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,int>;
public:
	void insert(long *, long *);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator insert(class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator, const long&);
	struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,int> insert(const long&);
	void erase(class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator, class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator);
	uint32_t erase(const long&);
	void erase(class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator find(const long&);
	uint32_t count(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator lower_bound(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator upper_bound(const long&);
	using pair_iterator_iterator = struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,rb_tree<long,long,ident<long,long>,less<long>>::const_iterator>;
public:
	struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,rb_tree<long,long,ident<long,long>,less<long>>::const_iterator> equal_range(const long&);
};

// Type: class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator;
class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator : public bidirectional_iterator<long,int>
{
protected:
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
public:
	void const_iterator(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
public:
	int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
	int32_t operator!=(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
	const long& operator*();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator++(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator++();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator--(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator--();
};

// Type: struct Shortcut (forward reference);

// Type: class vector<char> (forward reference);
class vector<char>{
	using vector_allocator = class allocator<char>;
	using value_type = char;
	using pointer = char *;
	using iterator = char *;
	using const_iterator = char *;
	using reference = char&;
	using const_reference = const char&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<char const *,char,char const &,int>;
	using reverse_iterator = class reverse_iterator<char *,char,char &,int>;
protected:
	static class allocator<char> static_allocator;
	char * start;
	char * finish;
	char * end_of_storage;
	void insert_aux(char *, const char&);
public:
	char * begin();
	char * begin();
	char * end();
	char * end();
	class reverse_iterator<char const *,char,char const &,int> rbegin();
	class reverse_iterator<char *,char,char &,int> rbegin();
	class reverse_iterator<char const *,char,char const &,int> rend();
	class reverse_iterator<char *,char,char &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const char& operator[](uint32_t);
	char& operator[](uint32_t);
	void vector<char>(char *, char *);
	void vector<char>(const class vector<char>&);
	void vector<char>(uint32_t, const char&);
	void vector<char>();
	void ~vector<char>();
	class vector<char>& operator=(const class vector<char>&);
	void reserve(uint32_t);
	const char& front();
	char& front();
	const char& back();
	char& back();
	void push_back(const char&);
	void swap(class vector<char>&);
	void insert(char *, uint32_t, const char&);
	void insert(char *, char *, char *);
	char * insert(char *, const char&);
	void pop_back();
	void erase(char *, char *);
	void erase(char *);
};

// Type: class ostream (forward reference);
class ostream : public virtual ios
{
public:
	int32_t[0]* ios;
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(LfPointer @ 0x75e80:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x40d6
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x756d4:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ios
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x4067
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ios&));
	class ostream& operator<<(LfPointer @ 0x26c0:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x10e3
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x25dc:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ostream
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x10d6
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: void (void * __ptr32, );

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class list<KeyColors> (forward reference);
class list<KeyColors>{
	using void_pointer = void * __ptr32;
	class list<KeyColors>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		struct KeyColors data;
	};
protected:
	static class allocator<list<KeyColors>::list_node> list_node_allocator;
	static class allocator<KeyColors> value_allocator;
	using value_type = struct KeyColors;
	using value_allocator_type = class allocator<KeyColors>;
	using pointer = struct KeyColors*;
	using reference = struct KeyColors&;
	using const_reference = const struct KeyColors&;
	using list_node_allocator_type = class allocator<list<KeyColors>::list_node>;
	using link_type = struct list<KeyColors>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<KeyColors>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<KeyColors>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<KeyColors>::list_node_buffer>;
	using buffer_pointer = struct list<KeyColors>::list_node_buffer*;
protected:
	static class allocator<list<KeyColors>::list_node_buffer> buffer_allocator;
	static struct list<KeyColors>::list_node_buffer* buffer_list;
	static struct list<KeyColors>::list_node* free_list;
	static struct list<KeyColors>::list_node* next_avail;
	static struct list<KeyColors>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<KeyColors>::list_node* get_node();
	void put_node(struct list<KeyColors>::list_node*);
	struct list<KeyColors>::list_node* node;
	uint32_t length;
	class list<KeyColors>::iterator : public bidirectional_iterator<KeyColors,int>
	{
	protected:
		struct list<KeyColors>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<KeyColors>::list_node*);
	public:
		int32_t operator==(const class list<KeyColors>::iterator&);
		struct KeyColors& operator*();
		class list<KeyColors>::iterator operator++(int32_t);
		class list<KeyColors>::iterator& operator++();
		class list<KeyColors>::iterator operator--(int32_t);
		class list<KeyColors>::iterator& operator--();
	};
	class list<KeyColors>::const_iterator : public bidirectional_iterator<KeyColors,int>
	{
	protected:
		struct list<KeyColors>::list_node* node;
	public:
		void const_iterator(const class list<KeyColors>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<KeyColors>::list_node*);
	public:
		int32_t operator==(const class list<KeyColors>::const_iterator&);
		const struct KeyColors& operator*();
		class list<KeyColors>::const_iterator operator++(int32_t);
		class list<KeyColors>::const_iterator& operator++();
		class list<KeyColors>::const_iterator operator--(int32_t);
		class list<KeyColors>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<KeyColors>::const_iterator,KeyColors,KeyColors const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<KeyColors>::iterator,KeyColors,KeyColors &,int>;
public:
	void list<KeyColors>(const class list<KeyColors>&);
	void list<KeyColors>(const struct KeyColors*, const struct KeyColors*);
	void list<KeyColors>(uint32_t, const struct KeyColors&);
	void list<KeyColors>();
	class list<KeyColors>::const_iterator begin();
	class list<KeyColors>::iterator begin();
	class list<KeyColors>::const_iterator end();
	class list<KeyColors>::iterator end();
	class reverse_bidirectional_iterator<list<KeyColors>::const_iterator,KeyColors,KeyColors const &,int> rbegin();
	class reverse_bidirectional_iterator<list<KeyColors>::iterator,KeyColors,KeyColors &,int> rbegin();
	class reverse_bidirectional_iterator<list<KeyColors>::const_iterator,KeyColors,KeyColors const &,int> rend();
	class reverse_bidirectional_iterator<list<KeyColors>::iterator,KeyColors,KeyColors &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const struct KeyColors& front();
	struct KeyColors& front();
	const struct KeyColors& back();
	struct KeyColors& back();
	void swap(class list<KeyColors>&);
	void insert(class list<KeyColors>::iterator, uint32_t, const struct KeyColors&);
	void insert(class list<KeyColors>::iterator, class list<KeyColors>::const_iterator, class list<KeyColors>::const_iterator);
	void insert(class list<KeyColors>::iterator, const struct KeyColors*, const struct KeyColors*);
	class list<KeyColors>::iterator insert(class list<KeyColors>::iterator, const struct KeyColors&);
	void push_front(const struct KeyColors&);
	void push_back(const struct KeyColors&);
	void erase(class list<KeyColors>::iterator, class list<KeyColors>::iterator);
	void erase(class list<KeyColors>::iterator);
	void pop_front();
	void pop_back();
	void ~list<KeyColors>();
	class list<KeyColors>& operator=(const class list<KeyColors>&);
protected:
	void transfer(class list<KeyColors>::iterator, class list<KeyColors>::iterator, class list<KeyColors>::iterator);
public:
	void splice(class list<KeyColors>::iterator, class list<KeyColors>&, class list<KeyColors>::iterator, class list<KeyColors>::iterator);
	void splice(class list<KeyColors>::iterator, class list<KeyColors>&, class list<KeyColors>::iterator);
	void splice(class list<KeyColors>::iterator, class list<KeyColors>&);
	void remove(const struct KeyColors&);
	void unique();
	void merge(class list<KeyColors>&);
	void reverse();
	void sort();
};

// Type: struct list<KeyColors>::list_node_buffer (forward reference);

// Type: class list<HotSpot>::iterator (forward reference);
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator operator++(int32_t);
	class list<HotSpot>::iterator& operator++();
	class list<HotSpot>::iterator operator--(int32_t);
	class list<HotSpot>::iterator& operator--();
};

// Type: class list<HotSpot> (forward reference);
class list<HotSpot>{
	using void_pointer = void * __ptr32;
	class list<HotSpot>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class HotSpot data;
	};
protected:
	static class allocator<list<HotSpot>::list_node> list_node_allocator;
	static class allocator<HotSpot> value_allocator;
	using value_type = class HotSpot;
	using value_allocator_type = class allocator<HotSpot>;
	using pointer = class HotSpot*;
	using reference = class HotSpot&;
	using const_reference = const class HotSpot&;
	using list_node_allocator_type = class allocator<list<HotSpot>::list_node>;
	using link_type = struct list<HotSpot>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<HotSpot>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<HotSpot>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<HotSpot>::list_node_buffer>;
	using buffer_pointer = struct list<HotSpot>::list_node_buffer*;
protected:
	static class allocator<list<HotSpot>::list_node_buffer> buffer_allocator;
	static struct list<HotSpot>::list_node_buffer* buffer_list;
	static struct list<HotSpot>::list_node* free_list;
	static struct list<HotSpot>::list_node* next_avail;
	static struct list<HotSpot>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<HotSpot>::list_node* get_node();
	void put_node(struct list<HotSpot>::list_node*);
	struct list<HotSpot>::list_node* node;
	uint32_t length;
	class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
	{
	protected:
		struct list<HotSpot>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const class list<HotSpot>::iterator&);
		class HotSpot& operator*();
		class list<HotSpot>::iterator operator++(int32_t);
		class list<HotSpot>::iterator& operator++();
		class list<HotSpot>::iterator operator--(int32_t);
		class list<HotSpot>::iterator& operator--();
	};
	class list<HotSpot>::const_iterator : public bidirectional_iterator<HotSpot,int>
	{
	protected:
		struct list<HotSpot>::list_node* node;
	public:
		void const_iterator(const class list<HotSpot>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const class list<HotSpot>::const_iterator&);
		const class HotSpot& operator*();
		class list<HotSpot>::const_iterator operator++(int32_t);
		class list<HotSpot>::const_iterator& operator++();
		class list<HotSpot>::const_iterator operator--(int32_t);
		class list<HotSpot>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int>;
public:
	void list<HotSpot>(const class list<HotSpot>&);
	void list<HotSpot>(const class HotSpot*, const class HotSpot*);
	void list<HotSpot>(uint32_t, const class HotSpot&);
	void list<HotSpot>();
	class list<HotSpot>::const_iterator begin();
	class list<HotSpot>::iterator begin();
	class list<HotSpot>::const_iterator end();
	class list<HotSpot>::iterator end();
	class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rbegin();
	class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rbegin();
	class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rend();
	class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class HotSpot& front();
	class HotSpot& front();
	const class HotSpot& back();
	class HotSpot& back();
	void swap(class list<HotSpot>&);
	void insert(class list<HotSpot>::iterator, uint32_t, const class HotSpot&);
	void insert(class list<HotSpot>::iterator, class list<HotSpot>::const_iterator, class list<HotSpot>::const_iterator);
	void insert(class list<HotSpot>::iterator, const class HotSpot*, const class HotSpot*);
	class list<HotSpot>::iterator insert(class list<HotSpot>::iterator, const class HotSpot&);
	void push_front(const class HotSpot&);
	void push_back(const class HotSpot&);
	void erase(class list<HotSpot>::iterator, class list<HotSpot>::iterator);
	void erase(class list<HotSpot>::iterator);
	void pop_front();
	void pop_back();
	void ~list<HotSpot>();
	class list<HotSpot>& operator=(const class list<HotSpot>&);
protected:
	void transfer(class list<HotSpot>::iterator, class list<HotSpot>::iterator, class list<HotSpot>::iterator);
public:
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&, class list<HotSpot>::iterator, class list<HotSpot>::iterator);
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&, class list<HotSpot>::iterator);
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&);
	void remove(const class HotSpot&);
	void unique();
	void merge(class list<HotSpot>&);
	void reverse();
	void sort();
};

// Type: struct list<Shortcut>::list_node_buffer (forward reference);

// Type: class list<Shortcut>::iterator (forward reference);
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{
protected:
	struct list<Shortcut>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};

// Type: class list<StringIDAssociation>::iterator (forward reference);
class list<StringIDAssociation>::iterator : public bidirectional_iterator<StringIDAssociation,int>
{
protected:
	struct list<StringIDAssociation>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<StringIDAssociation>::list_node*);
public:
	int32_t operator==(const class list<StringIDAssociation>::iterator&);
	struct StringIDAssociation& operator*();
	class list<StringIDAssociation>::iterator operator++(int32_t);
	class list<StringIDAssociation>::iterator& operator++();
	class list<StringIDAssociation>::iterator operator--(int32_t);
	class list<StringIDAssociation>::iterator& operator--();
};

// Type: class list<StringIDAssociation> (forward reference);
class list<StringIDAssociation>{
	using void_pointer = void * __ptr32;
	class list<StringIDAssociation>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		struct StringIDAssociation data;
	};
protected:
	static class allocator<list<StringIDAssociation>::list_node> list_node_allocator;
	static class allocator<StringIDAssociation> value_allocator;
	using value_type = struct StringIDAssociation;
	using value_allocator_type = class allocator<StringIDAssociation>;
	using pointer = struct StringIDAssociation*;
	using reference = struct StringIDAssociation&;
	using const_reference = const struct StringIDAssociation&;
	using list_node_allocator_type = class allocator<list<StringIDAssociation>::list_node>;
	using link_type = struct list<StringIDAssociation>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<StringIDAssociation>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<StringIDAssociation>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<StringIDAssociation>::list_node_buffer>;
	using buffer_pointer = struct list<StringIDAssociation>::list_node_buffer*;
protected:
	static class allocator<list<StringIDAssociation>::list_node_buffer> buffer_allocator;
	static struct list<StringIDAssociation>::list_node_buffer* buffer_list;
	static struct list<StringIDAssociation>::list_node* free_list;
	static struct list<StringIDAssociation>::list_node* next_avail;
	static struct list<StringIDAssociation>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<StringIDAssociation>::list_node* get_node();
	void put_node(struct list<StringIDAssociation>::list_node*);
	struct list<StringIDAssociation>::list_node* node;
	uint32_t length;
	class list<StringIDAssociation>::iterator : public bidirectional_iterator<StringIDAssociation,int>
	{
	protected:
		struct list<StringIDAssociation>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<StringIDAssociation>::list_node*);
	public:
		int32_t operator==(const class list<StringIDAssociation>::iterator&);
		struct StringIDAssociation& operator*();
		class list<StringIDAssociation>::iterator operator++(int32_t);
		class list<StringIDAssociation>::iterator& operator++();
		class list<StringIDAssociation>::iterator operator--(int32_t);
		class list<StringIDAssociation>::iterator& operator--();
	};
	class list<StringIDAssociation>::const_iterator : public bidirectional_iterator<StringIDAssociation,int>
	{
	protected:
		struct list<StringIDAssociation>::list_node* node;
	public:
		void const_iterator(const class list<StringIDAssociation>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<StringIDAssociation>::list_node*);
	public:
		int32_t operator==(const class list<StringIDAssociation>::const_iterator&);
		const struct StringIDAssociation& operator*();
		class list<StringIDAssociation>::const_iterator operator++(int32_t);
		class list<StringIDAssociation>::const_iterator& operator++();
		class list<StringIDAssociation>::const_iterator operator--(int32_t);
		class list<StringIDAssociation>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<StringIDAssociation>::const_iterator,StringIDAssociation,StringIDAssociation const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<StringIDAssociation>::iterator,StringIDAssociation,StringIDAssociation &,int>;
public:
	void list<StringIDAssociation>(const class list<StringIDAssociation>&);
	void list<StringIDAssociation>(const struct StringIDAssociation*, const struct StringIDAssociation*);
	void list<StringIDAssociation>(uint32_t, const struct StringIDAssociation&);
	void list<StringIDAssociation>();
	class list<StringIDAssociation>::const_iterator begin();
	class list<StringIDAssociation>::iterator begin();
	class list<StringIDAssociation>::const_iterator end();
	class list<StringIDAssociation>::iterator end();
	class reverse_bidirectional_iterator<list<StringIDAssociation>::const_iterator,StringIDAssociation,StringIDAssociation const &,int> rbegin();
	class reverse_bidirectional_iterator<list<StringIDAssociation>::iterator,StringIDAssociation,StringIDAssociation &,int> rbegin();
	class reverse_bidirectional_iterator<list<StringIDAssociation>::const_iterator,StringIDAssociation,StringIDAssociation const &,int> rend();
	class reverse_bidirectional_iterator<list<StringIDAssociation>::iterator,StringIDAssociation,StringIDAssociation &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const struct StringIDAssociation& front();
	struct StringIDAssociation& front();
	const struct StringIDAssociation& back();
	struct StringIDAssociation& back();
	void swap(class list<StringIDAssociation>&);
	void insert(class list<StringIDAssociation>::iterator, uint32_t, const struct StringIDAssociation&);
	void insert(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>::const_iterator, class list<StringIDAssociation>::const_iterator);
	void insert(class list<StringIDAssociation>::iterator, const struct StringIDAssociation*, const struct StringIDAssociation*);
	class list<StringIDAssociation>::iterator insert(class list<StringIDAssociation>::iterator, const struct StringIDAssociation&);
	void push_front(const struct StringIDAssociation&);
	void push_back(const struct StringIDAssociation&);
	void erase(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>::iterator);
	void erase(class list<StringIDAssociation>::iterator);
	void pop_front();
	void pop_back();
	void ~list<StringIDAssociation>();
	class list<StringIDAssociation>& operator=(const class list<StringIDAssociation>&);
protected:
	void transfer(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>::iterator, class list<StringIDAssociation>::iterator);
public:
	void splice(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>&, class list<StringIDAssociation>::iterator, class list<StringIDAssociation>::iterator);
	void splice(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>&, class list<StringIDAssociation>::iterator);
	void splice(class list<StringIDAssociation>::iterator, class list<StringIDAssociation>&);
	void remove(const struct StringIDAssociation&);
	void unique();
	void merge(class list<StringIDAssociation>&);
	void reverse();
	void sort();
};

// Type: struct StringIDAssociation (forward reference);
class StringIDAssociation{
public:
	class basic_string<char> sName;
	long lID;
	void StringIDAssociation(class basic_string<char>&, long);
	void StringIDAssociation();
};

// Type: struct list<StringIDAssociation>::list_node (forward reference);

// Type: class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator (forward reference);
class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator : public bidirectional_iterator<long,int>
{
protected:
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
public:
	void const_iterator(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
public:
	int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
	int32_t operator!=(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
	const long& operator*();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator++(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator++();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator--(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator--();
};

// Type: struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node (forward reference);

// Type: class rb_tree<long,long,ident<long,long>,less<long>> (forward reference);
class rb_tree<long,long,ident<long,long>,less<long>>{
		enum color_type {
			red = 0,
			black = 1,
		};
	using void_pointer = void * __ptr32;
	class rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node{
	public:
		enum rb_tree<long,long,ident<long,long>,less<long>>::color_type color_field;
		void * __ptr32 parent_link;
		void * __ptr32 left_link;
		void * __ptr32 right_link;
		long value_field;
	};
protected:
	static class allocator<rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node> rb_tree_node_allocator;
	static class allocator<long> value_allocator;
	using key_type = long;
	using value_type = long;
	using pointer = long *;
	using reference = long&;
	using const_reference = const long&;
	using rb_tree_node_allocator_type = class allocator<rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node>;
	using link_type = struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* buffer;
	};
	using buffer_allocator_type = class allocator<rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node_buffer>;
	using buffer_pointer = struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node_buffer*;
protected:
	static class allocator<rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node_buffer> buffer_allocator;
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node_buffer* buffer_list;
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* free_list;
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* next_avail;
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* last;
	void add_new_buffer();
	static uint32_t number_of_trees;
	void deallocate_buffers();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* get_node();
	void put_node(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* header;
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& root();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& root();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& leftmost();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& leftmost();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& rightmost();
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& rightmost();
	uint32_t node_count;
	int32_t insert_always;
	struct less<long> key_compare;
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* NIL;
	// calltype: NearC
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& left(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& right(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*& parent(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static long& value(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static const long& key(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static enum rb_tree<long,long,ident<long,long>,less<long>>::color_type& color(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* minimum(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	// calltype: NearC
	static struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* maximum(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator : public bidirectional_iterator<long,int>
	{
	protected:
		struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	public:
		int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
		long& operator*();
		class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator++(int32_t);
		class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator++();
		class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator--(int32_t);
		class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator--();
	};
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator : public bidirectional_iterator<long,int>
	{
	protected:
		struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
	public:
		void const_iterator(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	public:
		int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
		int32_t operator!=(const class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator&);
		const long& operator*();
		class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator++(int32_t);
		class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator++();
		class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator operator--(int32_t);
		class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator& operator--();
	};
	using reverse_iterator = class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::iterator,long,long &,int>;
	using const_reverse_iterator = class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int>;
private:
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator __insert(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*, struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*, const long&);
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* __copy(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*, struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	void __erase(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	void init();
public:
	void rb_tree<long,long,ident<long,long>,less<long>>(const class rb_tree<long,long,ident<long,long>,less<long>>&, int32_t);
	void rb_tree<long,long,ident<long,long>,less<long>>(long *, long *, const struct less<long>&, int32_t);
	void rb_tree<long,long,ident<long,long>,less<long>>(const struct less<long>&, int32_t);
	void ~rb_tree<long,long,ident<long,long>,less<long>>();
	class rb_tree<long,long,ident<long,long>,less<long>>& operator=(const class rb_tree<long,long,ident<long,long>,less<long>>&);
	struct less<long> key_comp();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator begin();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator begin();
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator end();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator end();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int> rbegin();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::iterator,long,long &,int> rbegin();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,long,long const &,int> rend();
	class reverse_bidirectional_iterator<rb_tree<long,long,ident<long,long>,less<long>>::iterator,long,long &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	void swap(class rb_tree<long,long,ident<long,long>,less<long>>&);
	using pair_iterator_bool = struct pair<rb_tree<long,long,ident<long,long>,less<long>>::iterator,int>;
public:
	void insert(long *, long *);
	void insert(class rb_tree<long,long,ident<long,long>,less<long>>::iterator, class rb_tree<long,long,ident<long,long>,less<long>>::iterator);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator insert(class rb_tree<long,long,ident<long,long>,less<long>>::iterator, const long&);
	struct pair<rb_tree<long,long,ident<long,long>,less<long>>::iterator,int> insert(const long&);
	void erase(long *, long *);
	void erase(class rb_tree<long,long,ident<long,long>,less<long>>::iterator, class rb_tree<long,long,ident<long,long>,less<long>>::iterator);
	uint32_t erase(const long&);
	void erase(class rb_tree<long,long,ident<long,long>,less<long>>::iterator);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator find(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator find(const long&);
	uint32_t count(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator lower_bound(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator lower_bound(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator upper_bound(const long&);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator upper_bound(const long&);
	using pair_iterator_iterator = struct pair<rb_tree<long,long,ident<long,long>,less<long>>::iterator,rb_tree<long,long,ident<long,long>,less<long>>::iterator>;
public:
	struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,rb_tree<long,long,ident<long,long>,less<long>>::const_iterator> equal_range(const long&);
	struct pair<rb_tree<long,long,ident<long,long>,less<long>>::iterator,rb_tree<long,long,ident<long,long>,less<long>>::iterator> equal_range(const long&);
	using pair_citerator_citerator = struct pair<rb_tree<long,long,ident<long,long>,less<long>>::const_iterator,rb_tree<long,long,ident<long,long>,less<long>>::const_iterator>;
public:
	void rotate_left(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
	void rotate_right(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
};

// Type: class rb_tree<long,long,ident<long,long>,less<long>>::iterator (forward reference);
class rb_tree<long,long,ident<long,long>,less<long>>::iterator : public bidirectional_iterator<long,int>
{
protected:
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
public:
	void iterator();
protected:
	void iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
public:
	int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
	long& operator*();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator++(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator++();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator--(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator--();
};

// Type: char[4096];

// Type: char *;

// Type: class basic_string_ref<char> (forward reference);

// Type: enum capacity;

// Type: struct list<StringIDAssociation>::list_node_buffer (forward reference);

// Type: struct list<Shortcut>::list_node (forward reference);

// Type: struct list<HotSpot>::list_node_buffer (forward reference);

// Type: struct list<HotSpot>::list_node (forward reference);

// Type: class rb_tree<long,long,ident<long,long>,less<long>>::iterator;
class rb_tree<long,long,ident<long,long>,less<long>>::iterator : public bidirectional_iterator<long,int>
{
protected:
	struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node* node;
public:
	void iterator();
protected:
	void iterator(struct rb_tree<long,long,ident<long,long>,less<long>>::rb_tree_node*);
public:
	int32_t operator==(const class rb_tree<long,long,ident<long,long>,less<long>>::iterator&);
	long& operator*();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator++(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator++();
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator operator--(int32_t);
	class rb_tree<long,long,ident<long,long>,less<long>>::iterator& operator--();
};

// Type: struct pair<rb_tree<long,long,ident<long,long>,less<long>>::iterator,int> (forward reference);



// Contribution: 1:00000000-000001ac Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00401000
// basic_string<char>::operator vector<char>



// Contribution: 1:000001b0-000001e8 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004011b0
// endl



// Contribution: 1:000001f0-00000207 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004011f0
// flush



// Contribution: 1:00000210-0000023b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00401210
// `vector constructor iterator'



// Contribution: 1:00000240-00000279 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00401240
// `vector destructor iterator'



// Contribution: 1:00000280-0000c7d4 Module: 75, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00401280
// $E97

// FUNCTION: COPTER_D 0x00401295
// $E96

// FUNCTION: COPTER_D 0x004012bf
// $E100

// FUNCTION: COPTER_D 0x004012d4
// $E99

// FUNCTION: COPTER_D 0x004012fe
void KeyboardWindow::KeyboardWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 68:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xDC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5970F0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x5971CC];
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x5971D8], 0;
	__asm        je     near ptr 0x00401376;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00401511;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        cmp    ds:[0x5971D0], eax;
	__asm        jne    near ptr 0x004014FC;
	__asm        jmp    near ptr 0x0040138C;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B900;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x92;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004013D0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004013D6;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004013DB;
	__asm        jmp    near ptr 0x004013E0;
	__asm        jmp    near ptr 0x004013E5;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x00401447;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040143D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040144C;
	__asm        jmp    near ptr 0x00401451;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5971D4], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x92;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004014AE;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004014B4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004014B9;
	__asm        jmp    near ptr 0x004014BE;
	__asm        jmp    near ptr 0x004014C3;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x5971D4];
	__asm        mov    ds:[0x5971D0], eax;
	__asm        jmp    near ptr 0x004014E2;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00401511;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00401516;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00401550;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        inc    dword ptr ds:[0x5971CC];
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr ds:[0x5971D8], 0;
	__asm        je     near ptr 0x00401595;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004016E8;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        cmp    ds:[0x5971D0], eax;
	__asm        jne    near ptr 0x004016D0;
	__asm        jmp    near ptr 0x004015AB;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B900;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x5C], 0x92;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004015EF;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004015F5;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004015FA;
	__asm        jmp    near ptr 0x004015FF;
	__asm        jmp    near ptr 0x00401604;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00401614;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x0041B970;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5971D4], eax;
	__asm        mov    dword ptr [ebp-0x70], 0x92;
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    dword ptr [ebp-0x74], 1;
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040167F;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00401685;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x0040168A;
	__asm        jmp    near ptr 0x0040168F;
	__asm        jmp    near ptr 0x00401694;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x5971D4];
	__asm        mov    ds:[0x5971D0], eax;
	__asm        jmp    near ptr 0x004016B3;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x50], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004016E8;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x54], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004016ED;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040172A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        inc    dword ptr ds:[0x5971CC];
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr ds:[0x5971D8], 0;
	__asm        je     near ptr 0x00401775;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040192E;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        cmp    ds:[0x5971D0], eax;
	__asm        jne    near ptr 0x00401910;
	__asm        jmp    near ptr 0x0040178B;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B900;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    dword ptr [ebp-0x9C], 0x92;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA0], 1;
	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004017F0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004017FC;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00401801;
	__asm        jmp    near ptr 0x00401806;
	__asm        jmp    near ptr 0x0040180B;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x0040181E;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        call   0x0041B970;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5971D4], eax;
	__asm        mov    dword ptr [ebp-0xB0], 0x92;
	__asm        lea    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    dword ptr [ebp-0xB4], 1;
	__asm        lea    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004018B0;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004018BC;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004018C1;
	__asm        jmp    near ptr 0x004018C6;
	__asm        jmp    near ptr 0x004018CB;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x5971D4];
	__asm        mov    ds:[0x5971D0], eax;
	__asm        jmp    near ptr 0x004018ED;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x90], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040192E;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x94], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x00401933;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040197F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        inc    dword ptr ds:[0x5971BC];
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr ds:[0x5971C8], 0;
	__asm        je     near ptr 0x004019CA;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x00401A2D;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        cmp    ds:[0x5971C0], eax;
	__asm        jne    near ptr 0x00401A0F;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x90;
	__asm        call   0x0040D920;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0xD0], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x00401A2D;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0xD4], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x00401A32;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00401A7E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F058;
// LINE 69:
	__asm        jmp    near ptr 0x00401ABF;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00401acc
void KeyboardWindow::~KeyboardWindow() {
// LINE 76:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xB8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F058;
// LINE 77:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     near ptr 0x00401B4A;
// LINE 78:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00401B3A;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0049FC4E;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00401B35;
	__asm        jmp    near ptr 0x00401B3A;
// LINE 79:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 81:
	__asm        mov    ecx, this;
	__asm        call   0x00402659;
// LINE 82:
	__asm        jmp    near ptr 0x00401B5A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00401B74;
	__asm        jmp    near ptr 0x00401B79;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00401B95;
	__asm        jmp    near ptr 0x00401B9A;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    near ptr 0x00401BBC;
	__asm        jmp    near ptr 0x00401BD0;
	__asm        jmp    near ptr 0x00401BBC;
	__asm        jmp    near ptr 0x00401BCB;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x00401BD0;
	__asm        jmp    near ptr 0x00401BD5;
	__asm        jmp    near ptr 0x00401C1C;
	__asm        jmp    near ptr 0x00401BE4;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00401C1C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00401BF7;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00401C02;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x90;
	__asm        call   0x0040DC20;
	__asm        jmp    near ptr 0x00401BA6;
	__asm        jmp    near ptr 0x00401C21;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        jmp    near ptr 0x00401C47;
	__asm        dec    dword ptr ds:[0x5971BC];
	__asm        jne    near ptr 0x00401C64;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x90;
	__asm        call   0x0041BCF0;
	__asm        jmp    near ptr 0x00401C69;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00401C83;
	__asm        jmp    near ptr 0x00401C88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00401CA4;
	__asm        jmp    near ptr 0x00401CA9;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jne    near ptr 0x00401CCB;
	__asm        jmp    near ptr 0x00401CDF;
	__asm        jmp    near ptr 0x00401CCB;
	__asm        jmp    near ptr 0x00401CDA;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x00401CDF;
	__asm        jmp    near ptr 0x00401CE4;
	__asm        jmp    near ptr 0x00401D1A;
	__asm        jmp    near ptr 0x00401CF3;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00401D1A;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x5C];
	__asm        call   0x0040DB10;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0040DB50;
	__asm        jmp    near ptr 0x00401CB5;
	__asm        jmp    near ptr 0x00401D1F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x00401D45;
	__asm        dec    dword ptr ds:[0x5971CC];
	__asm        jne    near ptr 0x00401DCF;
	__asm        cmp    dword ptr ds:[0x5971DC], 0;
	__asm        je     near ptr 0x00401DAC;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00401D8C;
	__asm        jmp    near ptr 0x00401D91;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00401DA2;
	__asm        jmp    near ptr 0x00401DA7;
	__asm        jmp    near ptr 0x00401D51;
	__asm        mov    dword ptr ds:[0x5971D8], 0;
	__asm        mov    dword ptr ds:[0x5971D4], 0;
	__asm        mov    dword ptr ds:[0x5971D0], 0;
	__asm        jmp    near ptr 0x00401DCF;
	__asm        jmp    near ptr 0x00401DD4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00401DEB;
	__asm        jmp    near ptr 0x00401DF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00401E09;
	__asm        jmp    near ptr 0x00401E0E;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        cmp    [ebp-0x88], eax;
	__asm        jne    near ptr 0x00401E3C;
	__asm        jmp    near ptr 0x00401E50;
	__asm        jmp    near ptr 0x00401E3C;
	__asm        jmp    near ptr 0x00401E4B;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x00401E50;
	__asm        jmp    near ptr 0x00401E55;
	__asm        jmp    near ptr 0x00401E8E;
	__asm        jmp    near ptr 0x00401E67;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x00401E8E;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x8C];
	__asm        call   0x0040DB10;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x7C;
	__asm        call   0x0040DB50;
	__asm        jmp    near ptr 0x00401E20;
	__asm        jmp    near ptr 0x00401E93;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x00401EB6;
	__asm        dec    dword ptr ds:[0x5971CC];
	__asm        jne    near ptr 0x00401ED0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x7C;
	__asm        call   0x0041BBD0;
	__asm        jmp    near ptr 0x00401ED5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x00401EF5;
	__asm        jmp    near ptr 0x00401EFA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x00401F1C;
	__asm        jmp    near ptr 0x00401F21;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        cmp    [ebp-0xB4], eax;
	__asm        jne    near ptr 0x00401F55;
	__asm        jmp    near ptr 0x00401F6C;
	__asm        jmp    near ptr 0x00401F55;
	__asm        jmp    near ptr 0x00401F67;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        jne    near ptr 0x00401F6C;
	__asm        jmp    near ptr 0x00401F71;
	__asm        jmp    near ptr 0x00401FAD;
	__asm        jmp    near ptr 0x00401F83;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x00401FAD;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xB4];
	__asm        call   0x0040DB10;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x0040DB50;
	__asm        jmp    near ptr 0x00401F39;
	__asm        jmp    near ptr 0x00401FB2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x00401FDE;
	__asm        dec    dword ptr ds:[0x5971CC];
	__asm        jne    near ptr 0x00401FF8;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x0041BBD0;
	__asm        jmp    near ptr 0x00401FFD;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040200d
int32_t KeyboardWindow::Initialize() {
// LINE 89:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 90:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 91:
	__asm        mov    eax, ds:[0x597664];
	__asm        add    eax, 0xC8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        push   eax;
	__asm        call   0x004BB49B;
	__asm        add    esp, 8;
// LINE 92:
	__asm        mov    eax, ds:[0x597664];
	__asm        add    eax, 0x12C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        call   0x004BB49B;
	__asm        add    esp, 8;
// LINE 93:
	__asm        mov    eax, ds:[0x597664];
	__asm        add    eax, 0x190;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        call   0x004BB49B;
	__asm        add    esp, 8;
// LINE 94:
	__asm        push   0x90;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
// LINE 95:
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
// LINE 96:
	__asm        push   0x91;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 97:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x004020D4;
// LINE 98:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 99:
	__asm        jmp    near ptr 0x004020E5;
// LINE 100:
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 101:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 103:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x00402103;
// LINE 104:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00402108
int32_t KeyboardWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sKeyLightPath;
	class basic_string<char> sNonTextKeyPath;

// LINE 111:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 112:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x0040216A;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040215F;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    sKeyLightPath.reference, eax;
	__asm        jmp    near ptr 0x00402171;
	__asm        mov    sKeyLightPath.reference, 0;
	__asm        mov    sKeyLightPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040217D;
// LINE 113:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x004021E5;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004021D7;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    sNonTextKeyPath.reference, eax;
	__asm        jmp    near ptr 0x004021EC;
	__asm        mov    sNonTextKeyPath.reference, 0;
	__asm        mov    sNonTextKeyPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004021F8;
// LINE 116:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 117:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x00402432;
	__asm        mov    eax, ds:[0x5970F4];
	__asm        mov    [ebp-0x7C], eax;
// LINE 120:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0040226C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00402273;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0040227F;
	__asm        lea    eax, sKeyLightPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0040229A;
	__asm        mov    eax, [ebp-0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004022D2;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x004022D2;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004022D2;
	__asm        jmp    near ptr 0x004022D7;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004022F9;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004022FE;
// LINE 121:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00402422;
	__asm        cmp    sKeyLightPath.c_str_ptr, 0;
	__asm        je     near ptr 0x00402346;
	__asm        mov    eax, sKeyLightPath.c_str_ptr;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040234B;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sKeyLightPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00402363;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004023BA;
	__asm        jmp    near ptr 0x00402375;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x9C], eax;
	__asm        lea    ecx, sKeyLightPath.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, sKeyLightPath.c_str_ptr;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004023BA;
	__asm        jmp    near ptr 0x004023BF;
	__asm        mov    byte ptr [ebp-0x8C], 0;
	__asm        jmp    near ptr 0x004023CB;
	__asm        lea    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004023DC;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sKeyLightPath.c_str_ptr;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00402400;
	__asm        jmp    near ptr 0x00402405;
	__asm        mov    eax, sKeyLightPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        jmp    near ptr 0x00402432;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
// LINE 123:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        jne    near ptr 0x0040257B;
	__asm        mov    eax, ds:[0x5970F8];
	__asm        mov    [ebp-0x64], eax;
// LINE 124:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00402478;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0040247F;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0040248B;
	__asm        lea    eax, sNonTextKeyPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004024A6;
	__asm        mov    eax, [ebp-0x20];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004024DE;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004024DE;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004024DE;
	__asm        jmp    near ptr 0x004024E3;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00402505;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040250A;
// LINE 125:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00402546;
	__asm        lea    ecx, sNonTextKeyPath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        jmp    near ptr 0x00402556;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 126:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+8];
// LINE 129:
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        mov    eax, sNonTextKeyPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sNonTextKeyPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004025BA;
	__asm        mov    eax, sNonTextKeyPath.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004025BA;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004025BA;
	__asm        jmp    near ptr 0x004025BF;
	__asm        cmp    sNonTextKeyPath.c_str_ptr, 0;
	__asm        je     near ptr 0x004025E1;
	__asm        mov    eax, sNonTextKeyPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004025E6;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040261E;
	__asm        mov    eax, sKeyLightPath.reference;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x0040261E;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040261E;
	__asm        jmp    near ptr 0x00402623;
	__asm        cmp    sKeyLightPath.c_str_ptr, 0;
	__asm        je     near ptr 0x00402645;
	__asm        mov    eax, sKeyLightPath.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040264A;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    near ptr 0x00402652;
// LINE 130:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00402659
void KeyboardWindow::DestroyImage() {
// LINE 137:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 139:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 141:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x004026C4;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004026B7;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004026B2;
	__asm        jmp    near ptr 0x004026B7;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        je     near ptr 0x0040271B;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0040270E;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402709;
	__asm        jmp    near ptr 0x0040270E;
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 149:
	__asm        jmp    near ptr 0x00402720;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00402725
int32_t KeyboardWindow::ConvertKeyToString(int32_t nLanguage, long lKey, class basic_string<char>& sKey) {
	int32_t nFullStringID;

// LINE 162:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1074;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 165:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        add    eax, 0x2BC;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 166:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        cmp    dword ptr [ebp-0x1008], 0;
	__asm        jne    near ptr 0x00402B77;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        jmp    near ptr 0x004027B2;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040280C;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1018], eax;
	__asm        mov    eax, [ebp-0x1018];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004027FD;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040280C;
	__asm        jmp    near ptr 0x00402811;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00402848;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x004028F9;
	__asm        jmp    near ptr 0x00402833;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004028F9;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        je     near ptr 0x00402889;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1010];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x100C], eax;
	__asm        jmp    near ptr 0x00402893;
	__asm        mov    dword ptr [ebp-0x100C], 0;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004028E3;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        mov    [ebp-0x101C], eax;
	__asm        cmp    dword ptr [ebp-0x101C], 0;
	__asm        je     near ptr 0x004028E3;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x101C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004028E3;
	__asm        jmp    near ptr 0x004028E8;
	__asm        mov    eax, [ebp-0x100C];
	__asm        mov    ecx, sKey;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040293B;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x0040293B;
	__asm        jmp    near ptr 0x0040290B;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1014], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1014];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040293B;
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, sKey;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040294F;
	__asm        jmp    near ptr 0x00402954;
	__asm        jmp    near ptr 0x00402959;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        jmp    near ptr 0x00402971;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1044];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004029C3;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1038], eax;
	__asm        mov    eax, [ebp-0x1038];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004029B4;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004029C3;
	__asm        jmp    near ptr 0x004029C8;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00402A00;
	__asm        jmp    near ptr 0x004029DD;
	__asm        jmp    near ptr 0x004029E2;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sKey;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1044];
	__asm        jae    near ptr 0x00402B05;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x102C], eax;
	__asm        cmp    dword ptr [ebp-0x102C], 0;
	__asm        je     near ptr 0x00402A9A;
	__asm        jmp    near ptr 0x00402A22;
	__asm        jmp    near ptr 0x00402A27;
	__asm        jmp    near ptr 0x00402A2C;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00402A54;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x00402A63;
	__asm        jmp    near ptr 0x00402A63;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        jmp    near ptr 0x00402A63;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x102C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1028], eax;
	__asm        jmp    near ptr 0x00402AA4;
	__asm        mov    dword ptr [ebp-0x1028], 0;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00402AF4;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        mov    [ebp-0x103C], eax;
	__asm        cmp    dword ptr [ebp-0x103C], 0;
	__asm        je     near ptr 0x00402AF4;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x103C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00402AF4;
	__asm        jmp    near ptr 0x00402AF9;
	__asm        mov    eax, [ebp-0x1028];
	__asm        mov    ecx, sKey;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x00402B53;
	__asm        jmp    near ptr 0x00402B17;
	__asm        jmp    near ptr 0x00402B1C;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sKey;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1030], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1030];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00402B53;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sKey;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00402B67;
	__asm        jmp    near ptr 0x00402B6C;
	__asm        mov    eax, [ebp-0x1008];
	__asm        jmp    near ptr 0x00402E25;
	__asm        jmp    near ptr 0x00402B7C;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00402BD6;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402BC7;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402BD6;
	__asm        jmp    near ptr 0x00402BDB;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00402C12;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x00402DB9;
	__asm        jmp    near ptr 0x00402BFD;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x106C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00402DB9;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x00402D32;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00402C74;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402C65;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402C74;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00402D03;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1060], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00402CFE;
	__asm        jmp    near ptr 0x00402D0F;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00402D21;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x00402D3C;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00402DA3;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    [ebp-0x1058], eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x00402DA3;
	__asm        mov    ecx, [ebp-0x1058];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00402D8A;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00402D9E;
	__asm        jmp    near ptr 0x00402DA3;
	__asm        jmp    near ptr 0x00402DA8;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    ecx, sKey;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00402DFB;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x00402DFB;
	__asm        jmp    near ptr 0x00402DCB;
	__asm        mov    eax, sKey;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00402DFB;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, sKey;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00402E0F;
	__asm        jmp    near ptr 0x00402E14;
	__asm        mov    eax, [ebp-0x1008];
	__asm        jmp    near ptr 0x00402E25;
	__asm        mov    eax, [ebp-0x1070];
	__asm        jmp    near ptr 0x00402E2A;
// LINE 167:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00402e31
int32_t KeyboardWindow::DoesKeyExistOnKeyboard(long lKey) {
	class list<HotSpot>::iterator tempHotSpotListIterator;

// LINE 174:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 175:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00402E53;
	__asm        jmp    near ptr 0x00402E58;
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00402E6C;
	__asm        jmp    near ptr 0x00402E71;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x00402E87;
	__asm        jmp    near ptr 0x00402E9B;
	__asm        jmp    near ptr 0x00402E87;
	__asm        jmp    near ptr 0x00402E96;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x00402E9B;
	__asm        jmp    near ptr 0x00402EA0;
	__asm        jmp    near ptr 0x00402EF0;
	__asm        jmp    near ptr 0x00402EAF;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00402EF0;
// LINE 179:
	__asm        jmp    near ptr 0x00402EB4;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    ecx, lKey;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x00402ECD;
// LINE 180:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00402FC6;
// LINE 181:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00402EE0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00402EEB;
// LINE 182:
	__asm        jmp    near ptr 0x00402E58;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x40], eax;
// LINE 185:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00402F11;
	__asm        jmp    near ptr 0x00402F16;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    tempHotSpotListIterator.node, eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x20], eax;
// LINE 186:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00402F3B;
	__asm        jmp    near ptr 0x00402F40;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    near ptr 0x00402F56;
	__asm        jmp    near ptr 0x00402F6A;
	__asm        jmp    near ptr 0x00402F56;
	__asm        jmp    near ptr 0x00402F65;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00402F6A;
	__asm        jmp    near ptr 0x00402F6F;
	__asm        jmp    near ptr 0x00402FBF;
	__asm        jmp    near ptr 0x00402F7E;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00402FBF;
// LINE 187:
	__asm        jmp    near ptr 0x00402F83;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    ecx, lKey;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x00402F9C;
// LINE 188:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00402FC6;
// LINE 189:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00402FAF;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00402FBA;
// LINE 190:
	__asm        jmp    near ptr 0x00402F1C;
// LINE 191:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00402FC6;
// LINE 192:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00402fcd
int32_t KeyboardWindow::DoesPositionHitKey(long lXPosition, long lYPosition, long& lKey) {
	class list<HotSpot>::iterator tempHotSpotListIterator;

// LINE 199:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00402FEF;
	__asm        jmp    near ptr 0x00402FF4;
// LINE 203:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00403008;
	__asm        jmp    near ptr 0x0040300D;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    tempHotSpotListIterator.node, eax;
	__asm        jne    near ptr 0x00403023;
	__asm        jmp    near ptr 0x00403037;
	__asm        jmp    near ptr 0x00403023;
	__asm        jmp    near ptr 0x00403032;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x00403037;
	__asm        jmp    near ptr 0x0040303C;
	__asm        jmp    near ptr 0x004030A8;
	__asm        jmp    near ptr 0x0040304B;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004030A8;
// LINE 204:
	__asm        jmp    near ptr 0x00403050;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BAD05;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00403085;
// LINE 205:
	__asm        jmp    near ptr 0x00403070;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lKey;
	__asm        mov    [ecx], eax;
// LINE 206:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040319A;
// LINE 208:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403098;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004030A3;
// LINE 209:
	__asm        jmp    near ptr 0x00402FF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x40], eax;
// LINE 212:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004030C9;
	__asm        jmp    near ptr 0x004030CE;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    tempHotSpotListIterator.node, eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x20], eax;
// LINE 213:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004030F3;
	__asm        jmp    near ptr 0x004030F8;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    near ptr 0x0040310E;
	__asm        jmp    near ptr 0x00403122;
	__asm        jmp    near ptr 0x0040310E;
	__asm        jmp    near ptr 0x0040311D;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00403122;
	__asm        jmp    near ptr 0x00403127;
	__asm        jmp    near ptr 0x00403193;
	__asm        jmp    near ptr 0x00403136;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00403193;
// LINE 214:
	__asm        jmp    near ptr 0x0040313B;
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BAD05;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00403170;
// LINE 215:
	__asm        jmp    near ptr 0x0040315B;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lKey;
	__asm        mov    [ecx], eax;
// LINE 216:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040319A;
// LINE 218:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403183;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0040318E;
// LINE 219:
	__asm        jmp    near ptr 0x004030D4;
// LINE 220:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040319A;
// LINE 221:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004031a1
int32_t KeyboardWindow::DoesKeyRequireTextDraw(long lKey) {
// LINE 228:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 243:
	__asm        cmp    lKey, 9;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x10;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x26;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x28;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x25;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x27;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0xD;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 8;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x6A;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x6F;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x6B;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x6D;
	__asm        je     near ptr 0x00403239;
	__asm        cmp    lKey, 0x20;
	__asm        je     near ptr 0x00403239;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040323B;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00403240;
// LINE 244:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00403247
int32_t KeyboardWindow::GetRectOfNonTextImage(long lKey, class MRect& rectImage) {
// LINE 252:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 253:
	__asm        cmp    lKey, 9;
	__asm        jne    near ptr 0x0040328E;
// LINE 254:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0xD;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x00403289;
// LINE 255:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x10;
	__asm        je     near ptr 0x004032A2;
	__asm        cmp    lKey, 0x26;
	__asm        jne    near ptr 0x004032D3;
// LINE 256:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0xD;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x1A;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x004032CE;
// LINE 257:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 8;
	__asm        je     near ptr 0x004032E7;
	__asm        cmp    lKey, 0x25;
	__asm        jne    near ptr 0x00403318;
// LINE 258:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x1A;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x27;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x00403313;
// LINE 259:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0xD;
	__asm        jne    near ptr 0x00403353;
// LINE 260:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x27;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x34;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x0040334E;
// LINE 261:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x28;
	__asm        jne    near ptr 0x0040338E;
// LINE 262:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x34;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x41;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x00403389;
// LINE 263:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x27;
	__asm        jne    near ptr 0x004033C9;
// LINE 264:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x41;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x4E;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x004033C4;
// LINE 265:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x6F;
	__asm        jne    near ptr 0x00403404;
// LINE 266:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x4E;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x5B;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x004033FF;
// LINE 267:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x6A;
	__asm        jne    near ptr 0x0040343F;
// LINE 268:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x5B;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x68;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x0040343A;
// LINE 269:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x6D;
	__asm        jne    near ptr 0x0040347A;
// LINE 270:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x68;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x75;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x00403475;
// LINE 271:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x6B;
	__asm        jne    near ptr 0x004034B5;
// LINE 272:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0x75;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 0x82;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 0xA;
	__asm        jmp    near ptr 0x004034B0;
// LINE 273:
	__asm        jmp    near ptr 0x004034F7;
	__asm        cmp    lKey, 0x20;
	__asm        jne    near ptr 0x004034F0;
// LINE 274:
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+8], 1;
	__asm        mov    eax, rectImage;
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004034EB;
// LINE 275:
	__asm        jmp    near ptr 0x004034F7;
// LINE 276:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00403501;
// LINE 277:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00403501;
// LINE 278:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00403508
int32_t KeyboardWindow::ComposeSelf() {
// LINE 286:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 288:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x0040352B;
// LINE 289:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040364A;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0040354B;
// LINE 291:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040364A;
// LINE 292:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 295:
	__asm        push   0x90;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
// LINE 296:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x00403594;
// LINE 297:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 298:
	__asm        jmp    near ptr 0x004035A5;
// LINE 299:
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 300:
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
// LINE 301:
	__asm        push   0x91;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
// LINE 304:
	__asm        jmp    near ptr 0x004035E1;
	__asm        jmp    near ptr 0x004035E6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 307:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 308:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040364A;
// LINE 309:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040364f
void KeyboardWindow::DrawKeyColorsOnKeyboard() {
	class list<HotSpot>::iterator tempHotSpotListIterator;
	long lCurrentHotSpotID;
	class list<KeyColors>::iterator tempKeyColorsListIterator;
	long lCurrentColorIndex;
	long lCurrentKeyColorID;
	class MRect rectCurrentKey;

// LINE 319:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xAC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 320:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403680;
	__asm        jmp    near ptr 0x00403685;
// LINE 321:
	__asm        jmp    near ptr 0x0040368A;
// LINE 325:
	__asm        jmp    near ptr 0x0040368F;
	__asm        jmp    near ptr 0x00403694;
// LINE 328:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004036AB;
	__asm        jmp    near ptr 0x004036B0;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-0x28], eax;
	__asm        jne    near ptr 0x004036C6;
	__asm        jmp    near ptr 0x004036DA;
	__asm        jmp    near ptr 0x004036C6;
	__asm        jmp    near ptr 0x004036D5;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x004036DA;
	__asm        jmp    near ptr 0x004036DF;
	__asm        jmp    near ptr 0x0040386B;
	__asm        jmp    near ptr 0x004036F1;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x0040386B;
// LINE 331:
	__asm        jmp    near ptr 0x004036F6;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentHotSpotID, eax;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00403721;
	__asm        jmp    near ptr 0x00403726;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempKeyColorsListIterator.node, eax;
// LINE 333:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00403746;
	__asm        jmp    near ptr 0x0040374B;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    near ptr 0x00403761;
	__asm        jmp    near ptr 0x00403775;
	__asm        jmp    near ptr 0x00403761;
	__asm        jmp    near ptr 0x00403770;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        jne    near ptr 0x00403775;
	__asm        jmp    near ptr 0x0040377A;
	__asm        jmp    near ptr 0x00403842;
	__asm        jmp    near ptr 0x00403789;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x00403842;
// LINE 334:
	__asm        jmp    near ptr 0x0040378E;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentKeyColorID, eax;
// LINE 335:
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        cmp    lCurrentKeyColorID, eax;
	__asm        jne    near ptr 0x00403819;
// LINE 337:
	__asm        jmp    near ptr 0x004037A8;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCurrentColorIndex, eax;
// LINE 339:
	__asm        jmp    near ptr 0x004037B6;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BB0D2;
// LINE 341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.left, eax;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.top, eax;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.right, eax;
// LINE 344:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.bottom, eax;
// LINE 345:
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    eax, lCurrentColorIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 346:
	__asm        jmp    near ptr 0x00403842;
// LINE 348:
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempKeyColorsListIterator.node, eax;
	__asm        jmp    near ptr 0x0040382F;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0040383D;
// LINE 349:
	__asm        jmp    near ptr 0x0040372C;
// LINE 350:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403858;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00403866;
// LINE 351:
	__asm        jmp    near ptr 0x00403694;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x94], eax;
// LINE 354:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0040389B;
	__asm        jmp    near ptr 0x004038A0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    tempHotSpotListIterator.node, eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x64], eax;
// LINE 355:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004038C8;
	__asm        jmp    near ptr 0x004038CD;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-0x40], eax;
	__asm        jne    near ptr 0x004038E3;
	__asm        jmp    near ptr 0x004038F7;
	__asm        jmp    near ptr 0x004038E3;
	__asm        jmp    near ptr 0x004038F2;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004038F7;
	__asm        jmp    near ptr 0x004038FC;
	__asm        jmp    near ptr 0x00403A85;
	__asm        jmp    near ptr 0x0040390B;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x00403A85;
// LINE 358:
	__asm        jmp    near ptr 0x00403910;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentHotSpotID, eax;
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0040393B;
	__asm        jmp    near ptr 0x00403940;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    tempKeyColorsListIterator.node, eax;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00403960;
	__asm        jmp    near ptr 0x00403965;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        cmp    [ebp-0x48], eax;
	__asm        jne    near ptr 0x0040397B;
	__asm        jmp    near ptr 0x0040398F;
	__asm        jmp    near ptr 0x0040397B;
	__asm        jmp    near ptr 0x0040398A;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x0040398F;
	__asm        jmp    near ptr 0x00403994;
	__asm        jmp    near ptr 0x00403A5C;
	__asm        jmp    near ptr 0x004039A3;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x00403A5C;
// LINE 361:
	__asm        jmp    near ptr 0x004039A8;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentKeyColorID, eax;
// LINE 362:
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        cmp    lCurrentKeyColorID, eax;
	__asm        jne    near ptr 0x00403A33;
// LINE 364:
	__asm        jmp    near ptr 0x004039C2;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCurrentColorIndex, eax;
// LINE 366:
	__asm        jmp    near ptr 0x004039D0;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BB0D2;
// LINE 368:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.left, eax;
// LINE 369:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.top, eax;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.right, eax;
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.bottom, eax;
// LINE 372:
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    eax, lCurrentColorIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 373:
	__asm        jmp    near ptr 0x00403A5C;
// LINE 375:
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, tempKeyColorsListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempKeyColorsListIterator.node, eax;
	__asm        jmp    near ptr 0x00403A49;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00403A57;
// LINE 376:
	__asm        jmp    near ptr 0x00403946;
// LINE 377:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403A72;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00403A80;
// LINE 378:
	__asm        jmp    near ptr 0x004038A6;
// LINE 379:
	__asm        jmp    near ptr 0x00403A8A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00403a8f
void KeyboardWindow::DrawCharactersOnKeyboard() {
	long lCurrentHotSpotID;
	class list<HotSpot>::iterator tempHotSpotListIterator;
	char[64] szTypeface;
	class MRect rectCurrentKey;
	class MRect rectCurrentImage;
	class basic_string<char> sKey;

// LINE 386:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x124;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 387:
	__asm        jmp    near ptr 0x00403AA6;
	__asm        jmp    near ptr 0x00403AAB;
// LINE 388:
	__asm        jmp    near ptr 0x00403AB0;
	__asm        jmp    near ptr 0x00403AB5;
// LINE 389:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC0], eax;
	__asm        cmp    dword ptr [ebp-0xC0], 0;
	__asm        je     near ptr 0x00403B1D;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00403B0F;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    sKey.reference, eax;
	__asm        jmp    near ptr 0x00403B24;
	__asm        mov    sKey.reference, 0;
	__asm        mov    sKey.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00403B30;
// LINE 391:
	__asm        jmp    near ptr 0x00403B35;
// LINE 395:
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        push   2;
	__asm        push   0;
	__asm        call   0x0042CE0E;
	__asm        add    esp, 0xC;
// LINE 396:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        jne    near ptr 0x00403BA4;
// LINE 397:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     near ptr 0x00403B94;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xA;
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   0x0049F937;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    near ptr 0x00403BA4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 398:
	__asm        mov    byte ptr [ebp-0x78], 0;
	__asm        mov    byte ptr [ebp-0x77], 0;
	__asm        mov    byte ptr [ebp-0x76], 0;
	__asm        jmp    near ptr 0x00403BB5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0xBC];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00403BD5;
// LINE 401:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x00403BF4;
	__asm        jmp    near ptr 0x00403BF9;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    tempHotSpotListIterator.node, eax;
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00403C1C;
	__asm        jmp    near ptr 0x00403C21;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        cmp    [ebp-0x80], eax;
	__asm        jne    near ptr 0x00403C37;
	__asm        jmp    near ptr 0x00403C4E;
	__asm        jmp    near ptr 0x00403C37;
	__asm        jmp    near ptr 0x00403C49;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        jne    near ptr 0x00403C4E;
	__asm        jmp    near ptr 0x00403C53;
	__asm        jmp    near ptr 0x00403ED0;
	__asm        jmp    near ptr 0x00403C65;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x00403ED0;
// LINE 403:
	__asm        jmp    near ptr 0x00403C6A;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentHotSpotID, eax;
// LINE 404:
	__asm        jmp    near ptr 0x00403C78;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BB0D2;
// LINE 405:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.left, eax;
// LINE 406:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.top, eax;
// LINE 409:
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00403E49;
// LINE 410:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.right, eax;
// LINE 411:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.bottom, eax;
// LINE 412:
	__asm        lea    eax, sKey.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 415:
	__asm        cmp    sKey.c_str_ptr, 0;
	__asm        je     near ptr 0x00403D23;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00403D28;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sKey.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00403D40;
	__asm        mov    eax, sKey.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00403DBF;
	__asm        jmp    near ptr 0x00403D52;
	__asm        jmp    near ptr 0x00403D57;
	__asm        mov    eax, sKey.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00403D79;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x00403D88;
	__asm        jmp    near ptr 0x00403D88;
	__asm        mov    dword ptr [ebp-0xF8], 0;
	__asm        jmp    near ptr 0x00403D88;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00403DBF;
	__asm        jmp    near ptr 0x00403DC4;
	__asm        mov    byte ptr [ebp-0xE8], 0;
	__asm        jmp    near ptr 0x00403DD0;
	__asm        lea    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    near ptr 0x00403DE1;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00403E05;
	__asm        jmp    near ptr 0x00403E0A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 417:
	__asm        jmp    near ptr 0x00403EA4;
// LINE 418:
	__asm        lea    eax, rectCurrentImage.left;
	__asm        push   eax;
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 420:
	__asm        mov    eax, rectCurrentImage.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.right;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.top;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.left;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentKey.top;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 422:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x00403EBA;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00403ECB;
// LINE 423:
	__asm        jmp    near ptr 0x00403BFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0xB8], eax;
// LINE 425:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x00403F03;
	__asm        jmp    near ptr 0x00403F08;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    tempHotSpotListIterator.node, eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x98], eax;
// LINE 426:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00403F42;
	__asm        jmp    near ptr 0x00403F47;
	__asm        mov    eax, [ebp-0x8C];
	__asm        cmp    tempHotSpotListIterator.node, eax;
	__asm        jne    near ptr 0x00403F60;
	__asm        jmp    near ptr 0x00403F77;
	__asm        jmp    near ptr 0x00403F60;
	__asm        jmp    near ptr 0x00403F72;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        jne    near ptr 0x00403F77;
	__asm        jmp    near ptr 0x00403F7C;
	__asm        jmp    near ptr 0x004041F9;
	__asm        jmp    near ptr 0x00403F8E;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     near ptr 0x004041F9;
// LINE 427:
	__asm        jmp    near ptr 0x00403F93;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    lCurrentHotSpotID, eax;
// LINE 428:
	__asm        jmp    near ptr 0x00403FA1;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    ecx, tempHotSpotListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BB0D2;
// LINE 429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.left, eax;
// LINE 430:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.top, eax;
// LINE 433:
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00404172;
// LINE 434:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    rectCurrentKey.right, eax;
// LINE 435:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    rectCurrentKey.bottom, eax;
// LINE 436:
	__asm        lea    eax, sKey.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 439:
	__asm        cmp    sKey.c_str_ptr, 0;
	__asm        je     near ptr 0x0040404C;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00404051;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sKey.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00404069;
	__asm        mov    eax, sKey.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004040E8;
	__asm        jmp    near ptr 0x0040407B;
	__asm        jmp    near ptr 0x00404080;
	__asm        mov    eax, sKey.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004040A2;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x004040B1;
	__asm        jmp    near ptr 0x004040B1;
	__asm        mov    dword ptr [ebp-0x118], 0;
	__asm        jmp    near ptr 0x004040B1;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004040E8;
	__asm        jmp    near ptr 0x004040ED;
	__asm        mov    byte ptr [ebp-0x108], 0;
	__asm        jmp    near ptr 0x004040F9;
	__asm        lea    eax, [ebp-0x108];
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x0040410A;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0040412E;
	__asm        jmp    near ptr 0x00404133;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 441:
	__asm        jmp    near ptr 0x004041CD;
// LINE 442:
	__asm        lea    eax, rectCurrentImage.left;
	__asm        push   eax;
	__asm        mov    eax, lCurrentHotSpotID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 444:
	__asm        mov    eax, rectCurrentImage.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.right;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.top;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentImage.left;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentKey.top;
	__asm        push   eax;
	__asm        mov    eax, rectCurrentKey.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 446:
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, tempHotSpotListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempHotSpotListIterator.node, eax;
	__asm        jmp    near ptr 0x004041E3;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004041F4;
// LINE 447:
	__asm        jmp    near ptr 0x00403F11;
// LINE 448:
	__asm        mov    eax, sKey.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sKey.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004042A3;
	__asm        mov    eax, sKey.reference;
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     near ptr 0x004042A3;
	__asm        mov    eax, [ebp-0xCC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00404280;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00404285;
	__asm        jmp    near ptr 0x0040428A;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040429E;
	__asm        jmp    near ptr 0x004042A3;
	__asm        jmp    near ptr 0x004042A8;
	__asm        cmp    sKey.c_str_ptr, 0;
	__asm        je     near ptr 0x004042D6;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004042DB;
	__asm        jmp    near ptr 0x004042E0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004042e5
void KeyboardWindow::DrawLightsOnKeyboard() {
	int32_t nCapsLockLightImageX;
	int32_t nScrollLockLightImageX;
	int32_t nNumLockLightImageX;

// LINE 458:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 463:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0040430D;
// LINE 464:
	__asm        mov    nNumLockLightImageX, 0;
// LINE 465:
	__asm        jmp    near ptr 0x00404314;
// LINE 466:
	__asm        mov    nNumLockLightImageX, 5;
// LINE 468:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x00404330;
// LINE 469:
	__asm        mov    nCapsLockLightImageX, 0;
// LINE 470:
	__asm        jmp    near ptr 0x00404337;
// LINE 471:
	__asm        mov    nCapsLockLightImageX, 5;
// LINE 473:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     near ptr 0x00404353;
// LINE 474:
	__asm        mov    nScrollLockLightImageX, 0;
// LINE 475:
	__asm        jmp    near ptr 0x0040435A;
// LINE 476:
	__asm        mov    nScrollLockLightImageX, 5;
// LINE 479:
	__asm        push   8;
	__asm        mov    eax, nNumLockLightImageX;
	__asm        add    eax, 5;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nNumLockLightImageX;
	__asm        push   eax;
	__asm        push   0x1E;
	__asm        push   0x1C4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x98];
	__asm        call   dword ptr [edx+0xC];
// LINE 481:
	__asm        push   8;
	__asm        mov    eax, nCapsLockLightImageX;
	__asm        add    eax, 5;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nCapsLockLightImageX;
	__asm        push   eax;
	__asm        push   0x1E;
	__asm        push   0x1D4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x98];
	__asm        call   dword ptr [edx+0xC];
// LINE 483:
	__asm        push   8;
	__asm        mov    eax, nScrollLockLightImageX;
	__asm        add    eax, 5;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nScrollLockLightImageX;
	__asm        push   eax;
	__asm        push   0x1E;
	__asm        push   0x1E4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x98];
	__asm        call   dword ptr [edx+0xC];
// LINE 484:
	__asm        jmp    near ptr 0x004043FB;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00404400
int32_t KeyboardWindow::DoesWindowNeedUpdating() {
// LINE 492:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 496:
	__asm        jmp    near ptr 0x00404411;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0040446F;
	__asm        push   0x90;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xA4];
	__asm        jne    near ptr 0x0040446F;
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xA8];
	__asm        jne    near ptr 0x0040446F;
	__asm        push   0x91;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xAC];
	__asm        je     near ptr 0x00404479;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040447B;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00404480;
// LINE 497:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00404485
long KeyboardWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 504:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 505:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004044A5;
// LINE 506:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004044E0;
// LINE 507:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004044D6;
// LINE 508:
	__asm        lea    eax, lKey;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 509:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004044E0;
// LINE 510:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004044e7
long KeyboardWindow::DoKeyUp(long lKey, char chModifiers) {
// LINE 517:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 518:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00404507;
// LINE 519:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00404542;
// LINE 520:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00404538;
// LINE 521:
	__asm        lea    eax, lKey;
	__asm        push   eax;
	__asm        push   0x10002;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 522:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00404542;
// LINE 523:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00404549
long KeyboardWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	struct KeyboardWindowMessage tempKeyboardWindowMessage;

// LINE 530:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 533:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 534:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004045BA;
// LINE 535:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004045BA;
// LINE 536:
	__asm        mov    eax, nButton;
	__asm        mov    tempKeyboardWindowMessage.lCursorButton, eax;
// LINE 538:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        push   0x10003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 541:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004045C4;
// LINE 542:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004045cb
long KeyboardWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
	struct KeyboardWindowMessage tempKeyboardWindowMessage;

// LINE 549:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 552:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00404630;
// LINE 553:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00404630;
// LINE 554:
	__asm        mov    eax, nButton;
	__asm        mov    tempKeyboardWindowMessage.lCursorButton, eax;
// LINE 556:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        push   0x10004;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 559:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040463A;
// LINE 560:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00404641
long KeyboardWindow::DoCursorMove(long nCursorX, long nCursorY) {
	struct KeyboardWindowMessage tempKeyboardWindowMessage;

// LINE 567:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 570:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004046A7;
// LINE 571:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004046A7;
// LINE 572:
	__asm        mov    tempKeyboardWindowMessage.lCursorButton, 0;
// LINE 574:
	__asm        lea    eax, tempKeyboardWindowMessage.lKey;
	__asm        push   eax;
	__asm        push   0x10005;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 577:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004046B1;
// LINE 578:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004046b8
void JoystickWindow::JoystickWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	int32_t i;

// LINE 612:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5970FC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBE;
	__asm        mov    [ebp-0xC], eax;
	__asm        dec    dword ptr [ebp-8];
	__asm        js     near ptr 0x0040471E;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0xC], 0x10;
	__asm        jmp    near ptr 0x00404704;
	__asm        jmp    near ptr 0x00404723;
	__asm        mov    dword ptr [ebp-0x10], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x13E;
	__asm        mov    [ebp-0x14], eax;
	__asm        dec    dword ptr [ebp-0x10];
	__asm        js     near ptr 0x0040474F;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x14], 0x10;
	__asm        jmp    near ptr 0x00404735;
	__asm        jmp    near ptr 0x00404754;
	__asm        jmp    near ptr 0x00404759;
	__asm        jmp    near ptr 0x0040475E;
	__asm        mov    dword ptr [ebp-0x18], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18E;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    dword ptr [ebp-0x18];
	__asm        js     near ptr 0x0040478A;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x1C], 0x10;
	__asm        jmp    near ptr 0x00404770;
	__asm        jmp    near ptr 0x0040478F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D2], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D6], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DA], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F140;
// LINE 615:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004047DB;
	__asm        inc    i;
	__asm        cmp    i, 0xE;
	__asm        jge    near ptr 0x00404806;
// LINE 616:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x78], 0;
// LINE 617:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0xB0], 0;
// LINE 618:
	__asm        jmp    near ptr 0x004047D8;
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBE], 0x16;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC2], 0x72;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC6], 0x30;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCA], 0x89;
	__asm        jmp    near ptr 0x0040483F;
// LINE 621:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 0x32;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD2], 0x7C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD6], 0x4C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDA], 0x93;
	__asm        jmp    near ptr 0x00404878;
// LINE 622:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDE], 0x4E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE2], 0x86;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0x68;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEA], 0x9D;
	__asm        jmp    near ptr 0x004048B1;
// LINE 623:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0x6A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 0x90;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0x84;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFA], 0xA7;
	__asm        jmp    near ptr 0x004048EA;
// LINE 624:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0x86;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 0x26;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0x9D;
	__asm        jmp    near ptr 0x00404923;
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0x28;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x112], 0x90;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x116], 0x42;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11A], 0xA7;
	__asm        jmp    near ptr 0x0040495C;
// LINE 626:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0x46;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x122], 0x9A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x126], 0x60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12A], 0xB1;
	__asm        jmp    near ptr 0x00404995;
// LINE 627:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12E], 0x60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x132], 0xA4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x136], 0x7A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x13A], 0xBB;
	__asm        jmp    near ptr 0x004049CE;
// LINE 629:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x13E], 0x22;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x142], 0x37;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x146], 0x3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14A], 0x6B;
	__asm        jmp    near ptr 0x00404A07;
// LINE 630:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14E], 0x2D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0x3A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0x4A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0x6E;
	__asm        jmp    near ptr 0x00404A40;
// LINE 631:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0x77;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x162], 0x54;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x166], 0x94;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16A], 0x88;
	__asm        jmp    near ptr 0x00404A79;
// LINE 632:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16E], 0x82;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x172], 0x56;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x176], 0x9F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17A], 0x8A;
	__asm        jmp    near ptr 0x00404AB2;
// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17E], 0x1D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x182], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x186], 0x1E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18A], 1;
	__asm        jmp    near ptr 0x00404AEB;
// LINE 636:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18E], 0x44;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x192], 0x58;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x196], 0x57;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x19A], 0x63;
	__asm        jmp    near ptr 0x00404B24;
// LINE 637:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x19E], 0x67;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A2], 0x5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A6], 0x7F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AA], 0x71;
	__asm        jmp    near ptr 0x00404B5D;
// LINE 638:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AE], 0x52;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B2], 0x63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B6], 0x67;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BA], 0x7D;
	__asm        jmp    near ptr 0x00404B96;
// LINE 639:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BE], 0x67;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C2], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C6], 0x73;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CA], 0x5C;
	__asm        jmp    near ptr 0x00404BCF;
// LINE 640:
	__asm        jmp    near ptr 0x00404BD4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00404bde
void JoystickWindow::~JoystickWindow() {
// LINE 646:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F140;
// LINE 647:
	__asm        mov    ecx, this;
	__asm        call   0x00405383;
// LINE 648:
	__asm        jmp    near ptr 0x00404C00;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00404c0d
int32_t JoystickWindow::Initialize() {
// LINE 654:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 655:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 656:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00404C30;
// LINE 657:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00404c35
int32_t JoystickWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sPath;

// LINE 663:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xD4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 664:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x00404CAF;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00404CA1;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    sPath.reference, eax;
	__asm        jmp    near ptr 0x00404CB6;
	__asm        mov    sPath.reference, 0;
	__asm        mov    sPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00404CC2;
// LINE 667:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 668:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1CE], 0;
	__asm        jne    near ptr 0x00404F3F;
	__asm        mov    eax, ds:[0x597100];
	__asm        mov    [ebp-0x8C], eax;
// LINE 669:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x00404D26;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00404D2D;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x00404D39;
	__asm        lea    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x00404D54;
	__asm        mov    eax, [ebp-0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00404D92;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00404D92;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00404D92;
	__asm        jmp    near ptr 0x00404D97;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00404DB9;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00404DBE;
// LINE 670:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00404F0A;
	__asm        cmp    sPath.c_str_ptr, 0;
	__asm        je     near ptr 0x00404E06;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00404E0B;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00404E23;
	__asm        mov    eax, sPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00404EA2;
	__asm        jmp    near ptr 0x00404E35;
	__asm        jmp    near ptr 0x00404E3A;
	__asm        mov    eax, sPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00404E5C;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x00404E6B;
	__asm        jmp    near ptr 0x00404E6B;
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    near ptr 0x00404E6B;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00404EA2;
	__asm        jmp    near ptr 0x00404EA7;
	__asm        mov    byte ptr [ebp-0x98], 0;
	__asm        jmp    near ptr 0x00404EB3;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x00404EC4;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00404EE8;
	__asm        jmp    near ptr 0x00404EED;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1CE], eax;
	__asm        jmp    near ptr 0x00404F1A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CE], 0;
// LINE 671:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CE];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CE];
	__asm        call   dword ptr [edx+8];
// LINE 673:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1D2], 0;
	__asm        jne    near ptr 0x0040513B;
	__asm        mov    eax, ds:[0x597104];
	__asm        mov    [ebp-0x74], eax;
// LINE 674:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x00404F85;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00404F8C;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00404F98;
	__asm        lea    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x00404FB3;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00404FDD;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00404FE2;
// LINE 675:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00405106;
	__asm        cmp    sPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0040502A;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040502F;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00405047;
	__asm        mov    eax, sPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0040509E;
	__asm        jmp    near ptr 0x00405059;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC8], eax;
	__asm        lea    ecx, sPath.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040509E;
	__asm        jmp    near ptr 0x004050A3;
	__asm        mov    byte ptr [ebp-0xB8], 0;
	__asm        jmp    near ptr 0x004050AF;
	__asm        lea    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004050C0;
	__asm        mov    eax, sPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004050E4;
	__asm        jmp    near ptr 0x004050E9;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1D2], eax;
	__asm        jmp    near ptr 0x00405116;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D2], 0;
// LINE 676:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1D2];
	__asm        call   dword ptr [edx+8];
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1D6], 0;
	__asm        jne    near ptr 0x0040524F;
	__asm        mov    eax, ds:[0x597108];
	__asm        mov    [ebp-0x64], eax;
// LINE 679:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00405181;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00405188;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x00405194;
	__asm        lea    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004051AF;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004051D9;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004051DE;
// LINE 680:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0040521A;
	__asm        lea    ecx, sPath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1D6], eax;
	__asm        jmp    near ptr 0x0040522A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D6], 0;
// LINE 681:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1D6];
	__asm        call   dword ptr [edx+8];
// LINE 683:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1DA], 0;
	__asm        jne    near ptr 0x0040533E;
	__asm        mov    eax, ds:[0x59710C];
	__asm        mov    [ebp-0x54], eax;
// LINE 684:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00405295;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0040529C;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x004052A8;
	__asm        lea    eax, sPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004052C3;
	__asm        lea    ecx, [ebp-0x34];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004052ED;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004052F2;
// LINE 685:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0040532E;
	__asm        lea    ecx, sPath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1DA], eax;
	__asm        jmp    near ptr 0x0040533E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DA], 0;
// LINE 690:
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    ecx, sPath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0040536F;
	__asm        mov    eax, sPath.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00405374;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    near ptr 0x0040537C;
// LINE 691:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405383
void JoystickWindow::DestroyImage() {
// LINE 697:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 699:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 701:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1CE], 0;
	__asm        je     near ptr 0x004053EE;
// LINE 702:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CE];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004053E1;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004053DC;
	__asm        jmp    near ptr 0x004053E1;
// LINE 703:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CE], 0;
// LINE 705:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1D2], 0;
	__asm        je     near ptr 0x00405445;
// LINE 706:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D2];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00405438;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00405433;
	__asm        jmp    near ptr 0x00405438;
// LINE 707:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D2], 0;
// LINE 709:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1D6], 0;
	__asm        je     near ptr 0x0040549C;
// LINE 710:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D6];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0040548F;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040548A;
	__asm        jmp    near ptr 0x0040548F;
// LINE 711:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D6], 0;
// LINE 713:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1DA], 0;
	__asm        je     near ptr 0x004054F3;
// LINE 714:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1DA];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004054E6;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004054E1;
	__asm        jmp    near ptr 0x004054E6;
// LINE 715:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DA], 0;
// LINE 717:
	__asm        jmp    near ptr 0x004054F8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004054fd
int32_t JoystickWindow::ComposeSelf() {
	int32_t j;
	int32_t i;
	long[14] lNewJoystickControlStates;

// LINE 724:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 733:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00405520;
// LINE 734:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004055E7;
// LINE 737:
	__asm        jmp    near ptr 0x00405525;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x00405554;
// LINE 738:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 739:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 741:
	__asm        jmp    near ptr 0x004055DD;
// LINE 742:
	__asm        lea    eax, lNewJoystickControlStates[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 744:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00405575;
	__asm        inc    i;
	__asm        cmp    i, 0xE;
	__asm        jge    near ptr 0x004055DD;
// LINE 745:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, i;
	__asm        mov    edx, [ebp+edx*4-0x38];
	__asm        cmp    [ecx+eax*4+0x78], edx;
	__asm        je     near ptr 0x004055D8;
// LINE 746:
	__asm        mov    j, 0;
	__asm        jmp    near ptr 0x004055A5;
	__asm        inc    j;
	__asm        cmp    j, 0xE;
	__asm        jge    near ptr 0x004055C5;
// LINE 747:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*4-0x38];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x78], eax;
	__asm        jmp    near ptr 0x004055A2;
// LINE 748:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 749:
	__asm        jmp    near ptr 0x004055DD;
// LINE 751:
	__asm        jmp    near ptr 0x00405572;
// LINE 754:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004055E7;
// LINE 755:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004055ec
void JoystickWindow::DrawCurrentJoystick() {
	int32_t i;

// LINE 761:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 765:
	__asm        jmp    near ptr 0x004055FD;
	__asm        jmp    near ptr 0x00405602;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 768:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0040564F;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x00405670;
// LINE 769:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        jmp    near ptr 0x0040564C;
// LINE 772:
	__asm        mov    i, 2;
	__asm        jmp    near ptr 0x0040567F;
	__asm        inc    i;
	__asm        cmp    i, 6;
	__asm        jge    near ptr 0x004056A0;
// LINE 773:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        jmp    near ptr 0x0040567C;
// LINE 776:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 777:
	__asm        jmp    near ptr 0x004056B3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004056b8
void JoystickWindow::DrawButton(int32_t nButton) {
	int32_t x2;
	int32_t x1;
	int32_t nImageWidth;

// LINE 787:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 791:
	__asm        jmp    near ptr 0x004056C9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CE];
	__asm        mov    ecx, 6;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nImageWidth, eax;
// LINE 793:
	__asm        mov    eax, nButton;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0xB6];
	__asm        add    eax, eax;
	__asm        mov    ecx, nButton;
	__asm        mov    edx, this;
	__asm        add    eax, [edx+ecx*4+0x90];
	__asm        imul   eax, nImageWidth;
	__asm        mov    x1, eax;
// LINE 794:
	__asm        mov    eax, x1;
	__asm        add    eax, nImageWidth;
	__asm        mov    x2, eax;
// LINE 798:
	__asm        jmp    near ptr 0x00405712;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CE];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, x2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, x1;
	__asm        push   eax;
	__asm        mov    eax, nButton;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0xC2];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, nButton;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0xBE];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CE];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CE];
	__asm        call   dword ptr [edx+0xC];
// LINE 799:
	__asm        jmp    near ptr 0x0040577A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405781
void JoystickWindow::DrawSlider(int32_t nSlider) {
	int32_t x2;
	int32_t x1;
	int32_t nImageWidth;

// LINE 810:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 814:
	__asm        cmp    nSlider, 1;
	__asm        jg     near ptr 0x004057A5;
// LINE 815:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 817:
	__asm        jmp    near ptr 0x004057AA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D2];
	__asm        mov    ecx, 9;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nImageWidth, eax;
// LINE 819:
	__asm        mov    eax, nSlider;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0xB0];
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, nSlider;
	__asm        mov    edx, this;
	__asm        add    eax, [edx+ecx*4+0x78];
	__asm        inc    eax;
	__asm        imul   eax, nImageWidth;
	__asm        mov    x1, eax;
// LINE 820:
	__asm        mov    eax, nImageWidth;
	__asm        add    eax, x1;
	__asm        mov    x2, eax;
// LINE 824:
	__asm        jmp    near ptr 0x004057F2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D2];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, x2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, x1;
	__asm        push   eax;
	__asm        mov    eax, nSlider;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x142];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, nSlider;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x13E];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1D2];
	__asm        call   dword ptr [edx+0xC];
// LINE 825:
	__asm        jmp    near ptr 0x00405860;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405867
void JoystickWindow::DrawHandle() {
	int32_t i;
	int32_t x2;
	class MRect[4] rectHandleBaseSources;
	int32_t x1;
	int32_t nImageWidth;
	int32_t nHandleImageToUse;

// LINE 833:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    dword ptr [ebp-0x58], 4;
	__asm        lea    eax, rectHandleBaseSources[0].left;
	__asm        mov    [ebp-0x5C], eax;
// LINE 838:
	__asm        dec    dword ptr [ebp-0x58];
	__asm        js     near ptr 0x0040589A;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x5C], 0x10;
	__asm        jmp    near ptr 0x00405880;
	__asm        jmp    near ptr 0x0040589F;
// LINE 842:
	__asm        lea    eax, rectHandleBaseSources[0].left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE4];
// LINE 843:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004058C0;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x00405947;
// LINE 848:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x40];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x44];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x48];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x4C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x192];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x18E];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1DA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1DA];
	__asm        call   dword ptr [edx+0xC];
// LINE 849:
	__asm        jmp    near ptr 0x004058BD;
// LINE 852:
	__asm        jmp    near ptr 0x0040594C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D6];
	__asm        mov    ecx, 9;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nImageWidth, eax;
// LINE 853:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
	__asm        mov    nHandleImageToUse, eax;
// LINE 854:
	__asm        mov    eax, nHandleImageToUse;
	__asm        imul   eax, nImageWidth;
	__asm        mov    x1, eax;
// LINE 855:
	__asm        mov    eax, nImageWidth;
	__asm        add    eax, x1;
	__asm        mov    x2, eax;
// LINE 859:
	__asm        jmp    near ptr 0x0040598C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D6];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, x2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, x1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17E];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1D6];
	__asm        call   dword ptr [edx+0xC];
// LINE 860:
	__asm        jmp    near ptr 0x004059E6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004059eb
void JoystickWindow::GetSourceHandleBaseRects(class MRect* rectHandleBaseSources) {
// LINE 870:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 872:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00405A67;
// LINE 873:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+8], 0x13;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0xC], 0xB;
	__asm        jmp    near ptr 0x00405A35;
// LINE 874:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x14], 0x31;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x18], 0x18;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x1C], 0x46;
	__asm        jmp    near ptr 0x00405A62;
// LINE 876:
	__asm        jmp    near ptr 0x00405B31;
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB0];
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00405AD8;
// LINE 877:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax], 0x18;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+8], 0x2B;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0xC], 0xB;
	__asm        jmp    near ptr 0x00405AA6;
// LINE 878:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x10], 0x18;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x14], 0x31;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x18], 0x30;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x1C], 0x46;
	__asm        jmp    near ptr 0x00405AD3;
// LINE 880:
	__asm        jmp    near ptr 0x00405B31;
// LINE 881:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax], 0x30;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+8], 0x43;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0xC], 0xB;
	__asm        jmp    near ptr 0x00405B04;
// LINE 882:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x10], 0x30;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x14], 0x31;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x18], 0x48;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x1C], 0x46;
	__asm        jmp    near ptr 0x00405B31;
// LINE 886:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB1];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00405BA2;
// LINE 887:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x24], 0xB;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x28], 0x15;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x2C], 0x25;
	__asm        jmp    near ptr 0x00405B70;
// LINE 888:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x30], 0;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x34], 0x25;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x38], 0xC;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x3C], 0x31;
	__asm        jmp    near ptr 0x00405B9D;
// LINE 890:
	__asm        jmp    near ptr 0x00405C6E;
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB1];
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00405C14;
// LINE 891:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x20], 0x18;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x24], 0xB;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x28], 0x2D;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x2C], 0x25;
	__asm        jmp    near ptr 0x00405BE2;
// LINE 892:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x30], 0x18;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x34], 0x25;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x38], 0x24;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x3C], 0x31;
	__asm        jmp    near ptr 0x00405C0F;
// LINE 894:
	__asm        jmp    near ptr 0x00405C6E;
// LINE 895:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x20], 0x30;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x24], 0xB;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x28], 0x45;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x2C], 0x25;
	__asm        jmp    near ptr 0x00405C41;
// LINE 896:
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x30], 0x30;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x34], 0x25;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x38], 0x3C;
	__asm        mov    eax, rectHandleBaseSources;
	__asm        mov    dword ptr [eax+0x3C], 0x31;
	__asm        jmp    near ptr 0x00405C6E;
// LINE 898:
	__asm        jmp    near ptr 0x00405C73;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405c7a
int32_t JoystickWindow::GetHandleImageToUse() {
// LINE 913:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 914:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        lea    eax, [eax+eax*2+3];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        lea    eax, [eax+ecx+1];
	__asm        jmp    near ptr 0x00405C9F;
// LINE 915:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00405ca4
void JoystickWindow::GetNewJoystickControlStates(long * lNewJoystickControlStates) {
	int32_t i;

// LINE 925:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 928:
	__asm        mov    i, 6;
	__asm        jmp    near ptr 0x00405CBF;
	__asm        inc    i;
	__asm        cmp    i, 0xE;
	__asm        jge    near ptr 0x00405D0E;
// LINE 929:
	__asm        push   1;
	__asm        mov    eax, i;
	__asm        sub    eax, 6;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A9DD;
	__asm        mov    ecx, i;
	__asm        mov    edx, lNewJoystickControlStates;
	__asm        mov    [edx+ecx*4], eax;
// LINE 930:
	__asm        mov    eax, i;
	__asm        mov    ecx, lNewJoystickControlStates;
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00405D09;
// LINE 931:
	__asm        mov    eax, i;
	__asm        mov    ecx, lNewJoystickControlStates;
	__asm        mov    dword ptr [ecx+eax*4], 1;
// LINE 932:
	__asm        jmp    near ptr 0x00405CBC;
// LINE 933:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00405D1D;
	__asm        inc    i;
	__asm        cmp    i, 6;
	__asm        jge    near ptr 0x00405D4C;
// LINE 934:
	__asm        push   1;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A7BB;
	__asm        mov    ecx, i;
	__asm        mov    edx, lNewJoystickControlStates;
	__asm        mov    [edx+ecx*4], eax;
// LINE 935:
	__asm        jmp    near ptr 0x00405D1A;
// LINE 936:
	__asm        jmp    near ptr 0x00405D51;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405d58
int32_t JoystickWindow::DoesWindowNeedUpdating() {
// LINE 942:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 943:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00405D6E;
// LINE 944:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00405d73
void JoystickWindow::SetCurrentJoystick(int32_t nNewCurrentJoystick) {
// LINE 954:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 955:
	__asm        mov    eax, nNewCurrentJoystick;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 956:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xDC];
// LINE 957:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 958:
	__asm        jmp    near ptr 0x00405DB1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00405db8
long JoystickWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lKey;

// LINE 964:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 967:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 968:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00405E23;
// LINE 969:
	__asm        lea    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00405E23;
// LINE 970:
	__asm        lea    eax, lKey;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 972:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00405E2D;
// LINE 973:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00405e34
long JoystickWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 979:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 980:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00405E4A;
// LINE 981:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00405e51
long JoystickWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 987:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 988:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00405E67;
// LINE 989:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00405e6e
int32_t JoystickWindow::DoesPositionHitKey(long lXPosition, long lYPosition, long& lKey) {
	int32_t i;

// LINE 995:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1000:
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x18E], ecx;
	__asm        jg     near ptr 0x00405ECC;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x192], ecx;
	__asm        jg     near ptr 0x00405ECC;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x196], ecx;
	__asm        jle    near ptr 0x00405ECC;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x19A], ecx;
	__asm        jle    near ptr 0x00405ECC;
	__asm        jmp    near ptr 0x00405F3C;
	__asm        jmp    near ptr 0x00405ECC;
	__asm        jmp    near ptr 0x00405EDB;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x00405F3C;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x19E], ecx;
	__asm        jg     near ptr 0x00405F28;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1A2], ecx;
	__asm        jg     near ptr 0x00405F28;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x1A6], ecx;
	__asm        jle    near ptr 0x00405F28;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1AA], ecx;
	__asm        jle    near ptr 0x00405F28;
	__asm        jmp    near ptr 0x00405F2D;
	__asm        jmp    near ptr 0x00405F4F;
	__asm        jmp    near ptr 0x00405F3C;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00405F4F;
// LINE 1002:
	__asm        mov    eax, lKey;
	__asm        mov    dword ptr [eax], 0;
// LINE 1003:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040619D;
// LINE 1008:
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x1AE], ecx;
	__asm        jg     near ptr 0x00405FA1;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1B2], ecx;
	__asm        jg     near ptr 0x00405FA1;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x1B6], ecx;
	__asm        jle    near ptr 0x00405FA1;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1BA], ecx;
	__asm        jle    near ptr 0x00405FA1;
	__asm        jmp    near ptr 0x00406011;
	__asm        jmp    near ptr 0x00405FA1;
	__asm        jmp    near ptr 0x00405FB0;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jne    near ptr 0x00406011;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x1BE], ecx;
	__asm        jg     near ptr 0x00405FFD;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1C2], ecx;
	__asm        jg     near ptr 0x00405FFD;
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x1C6], ecx;
	__asm        jle    near ptr 0x00405FFD;
	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x1CA], ecx;
	__asm        jle    near ptr 0x00405FFD;
	__asm        jmp    near ptr 0x00406002;
	__asm        jmp    near ptr 0x00406024;
	__asm        jmp    near ptr 0x00406011;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00406024;
// LINE 1010:
	__asm        mov    eax, lKey;
	__asm        mov    dword ptr [eax], 1;
// LINE 1011:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040619D;
// LINE 1015:
	__asm        mov    i, 2;
	__asm        jmp    near ptr 0x00406033;
	__asm        inc    i;
	__asm        cmp    i, 6;
	__asm        jge    near ptr 0x004060DD;
// LINE 1016:
	__asm        mov    eax, i;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lXPosition;
	__asm        cmp    [eax+ecx+0x13E], edx;
	__asm        jg     near ptr 0x004060B2;
	__asm        mov    eax, i;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx+0x142], edx;
	__asm        jg     near ptr 0x004060B2;
	__asm        mov    eax, i;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lXPosition;
	__asm        cmp    [eax+ecx+0x146], edx;
	__asm        jle    near ptr 0x004060B2;
	__asm        mov    eax, i;
	__asm        sub    eax, 2;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx+0x14A], edx;
	__asm        jle    near ptr 0x004060B2;
	__asm        jmp    near ptr 0x004060B7;
	__asm        jmp    near ptr 0x004060D8;
	__asm        jmp    near ptr 0x004060C6;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004060D8;
// LINE 1017:
	__asm        mov    eax, i;
	__asm        mov    ecx, lKey;
	__asm        mov    [ecx], eax;
// LINE 1018:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040619D;
// LINE 1020:
	__asm        jmp    near ptr 0x00406030;
// LINE 1023:
	__asm        mov    i, 6;
	__asm        jmp    near ptr 0x004060EC;
	__asm        inc    i;
	__asm        cmp    i, 0xE;
	__asm        jge    near ptr 0x00406196;
// LINE 1024:
	__asm        mov    eax, i;
	__asm        sub    eax, 6;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lXPosition;
	__asm        cmp    [eax+ecx+0xBE], edx;
	__asm        jg     near ptr 0x0040616B;
	__asm        mov    eax, i;
	__asm        sub    eax, 6;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx+0xC2], edx;
	__asm        jg     near ptr 0x0040616B;
	__asm        mov    eax, i;
	__asm        sub    eax, 6;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lXPosition;
	__asm        cmp    [eax+ecx+0xC6], edx;
	__asm        jle    near ptr 0x0040616B;
	__asm        mov    eax, i;
	__asm        sub    eax, 6;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx+0xCA], edx;
	__asm        jle    near ptr 0x0040616B;
	__asm        jmp    near ptr 0x00406170;
	__asm        jmp    near ptr 0x00406191;
	__asm        jmp    near ptr 0x0040617F;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00406191;
// LINE 1025:
	__asm        mov    eax, i;
	__asm        mov    ecx, lKey;
	__asm        mov    [ecx], eax;
// LINE 1026:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040619D;
// LINE 1028:
	__asm        jmp    near ptr 0x004060E9;
// LINE 1029:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040619D;
// LINE 1030:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004061a4
void UserInputWindow::UserInputWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 1078:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xDC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597110];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        inc    dword ptr ds:[0x597204];
	__asm        mov    eax, ds:[0x597210];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x597210], 0;
	__asm        je     near ptr 0x0040626A;
	__asm        mov    eax, ds:[0x597210];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597210], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004063FD;
	__asm        mov    eax, ds:[0x59720C];
	__asm        cmp    ds:[0x597208], eax;
	__asm        jne    near ptr 0x004063E8;
	__asm        jmp    near ptr 0x00406280;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B740;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0xCC;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004062C4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004062CA;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004062CF;
	__asm        jmp    near ptr 0x004062D4;
	__asm        jmp    near ptr 0x004062D9;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x44];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x00406337;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040632D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040633C;
	__asm        jmp    near ptr 0x00406341;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597214];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x597214], eax;
	__asm        mov    eax, ds:[0x597214];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59720C], eax;
	__asm        mov    dword ptr [ebp-0x28], 0xCC;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040639E;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004063A4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004063A9;
	__asm        jmp    near ptr 0x004063AE;
	__asm        jmp    near ptr 0x004063B3;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ds:[0x59720C];
	__asm        mov    ds:[0x597208], eax;
	__asm        jmp    near ptr 0x004063CE;
	__asm        mov    eax, ds:[0x59720C];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x59720C], 0x14;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004063FD;
	__asm        mov    eax, ds:[0x59720C];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x59720C], 0x14;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00406402;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040644B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        inc    dword ptr ds:[0x597204];
	__asm        mov    eax, ds:[0x597210];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr ds:[0x597210], 0;
	__asm        je     near ptr 0x00406490;
	__asm        mov    eax, ds:[0x597210];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597210], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004065DF;
	__asm        mov    eax, ds:[0x59720C];
	__asm        cmp    ds:[0x597208], eax;
	__asm        jne    near ptr 0x004065C7;
	__asm        jmp    near ptr 0x004064A6;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B740;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x5C], 0xCC;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004064EA;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004064F0;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004064F5;
	__asm        jmp    near ptr 0x004064FA;
	__asm        jmp    near ptr 0x004064FF;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x0040650F;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x0041B7B0;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597214];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ds:[0x597214], eax;
	__asm        mov    eax, ds:[0x597214];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59720C], eax;
	__asm        mov    dword ptr [ebp-0x70], 0xCC;
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    dword ptr [ebp-0x74], 1;
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040657A;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00406580;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00406585;
	__asm        jmp    near ptr 0x0040658A;
	__asm        jmp    near ptr 0x0040658F;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ds:[0x59720C];
	__asm        mov    ds:[0x597208], eax;
	__asm        jmp    near ptr 0x004065AA;
	__asm        mov    eax, ds:[0x59720C];
	__asm        mov    [ebp-0x50], eax;
	__asm        add    dword ptr ds:[0x59720C], 0x14;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004065DF;
	__asm        mov    eax, ds:[0x59720C];
	__asm        mov    [ebp-0x54], eax;
	__asm        add    dword ptr ds:[0x59720C], 0x14;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004065E4;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00406630;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        inc    dword ptr ds:[0x597218];
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0040667B;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040682D;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040680F;
	__asm        jmp    near ptr 0x00406691;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B820;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    dword ptr [ebp-0x9C], 0x80;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA0], 1;
	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004066F6;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00406702;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00406707;
	__asm        jmp    near ptr 0x0040670C;
	__asm        jmp    near ptr 0x00406711;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x00406724;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        call   0x0041B890;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xB0], 0x80;
	__asm        lea    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    dword ptr [ebp-0xB4], 1;
	__asm        lea    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004067B6;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004067C2;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004067C7;
	__asm        jmp    near ptr 0x004067CC;
	__asm        jmp    near ptr 0x004067D1;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004067EC;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x90], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040682D;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x94], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x00406832;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040687E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        inc    dword ptr ds:[0x597218];
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004068C9;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x0040692C;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040690E;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   0x0040DCE0;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xD0], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x0040692C;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xD4], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x00406931;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040697D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F228;
// LINE 1079:
	__asm        jmp    near ptr 0x004069AE;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004069bb
int32_t UserInputWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 1087:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x5164;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1089:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     near ptr 0x00406A39;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00406A2B;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00406A40;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00406A4C;
// LINE 1092:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1095:
	__asm        push   0xB0;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00406AC3;
	__asm        jmp    near ptr 0x00406A76;
	__asm        mov    dword ptr [ebp-0x24], 0x28;
	__asm        mov    dword ptr [ebp-0x20], 0x1A;
	__asm        mov    dword ptr [ebp-0x1C], 0x29;
	__asm        mov    dword ptr [ebp-0x18], 0x1B;
	__asm        jmp    near ptr 0x00406A97;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   5;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x004012FE;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x00406AD0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1096:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1099:
	__asm        push   0x1DE;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00406B53;
	__asm        jmp    near ptr 0x00406B06;
	__asm        mov    dword ptr [ebp-0x38], 0xD2;
	__asm        mov    dword ptr [ebp-0x34], 0xA;
	__asm        mov    dword ptr [ebp-0x30], 0xD3;
	__asm        mov    dword ptr [ebp-0x2C], 0xB;
	__asm        jmp    near ptr 0x00406B27;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   6;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x004046B8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x00406B60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1100:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 1101:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x14];
// LINE 1104:
	__asm        push   0xCC;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00406BFA;
	__asm        jmp    near ptr 0x00406BAD;
	__asm        mov    dword ptr [ebp-0x4C], 0x20;
	__asm        mov    dword ptr [ebp-0x48], 0xF0;
	__asm        mov    dword ptr [ebp-0x44], 0x126;
	__asm        mov    dword ptr [ebp-0x40], 0x14E;
	__asm        jmp    near ptr 0x00406BCE;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   0x004B4462;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x00406C07;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1105:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1106:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x128];
// LINE 1107:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x124];
// LINE 1108:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xD8];
// LINE 1109:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x33;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x120];
// LINE 1110:
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x12C];
// LINE 1113:
	__asm        push   0xCC;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00406D29;
	__asm        jmp    near ptr 0x00406CD9;
	__asm        mov    dword ptr [ebp-0x60], 0x12E;
	__asm        mov    dword ptr [ebp-0x5C], 0xF0;
	__asm        mov    dword ptr [ebp-0x58], 0x230;
	__asm        mov    dword ptr [ebp-0x54], 0x14E;
	__asm        jmp    near ptr 0x00406CFA;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x004B4462;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x00406D39;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 1114:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+4];
// LINE 1115:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0x128];
// LINE 1116:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0x124];
// LINE 1117:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xD8];
// LINE 1118:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x33;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0x120];
// LINE 1119:
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0x12C];
// LINE 1121:
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1122:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10E0], eax;
	__asm        cmp    dword ptr [ebp-0x10E0], 0;
	__asm        jne    near ptr 0x00406ECC;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10E0], eax;
	__asm        jmp    near ptr 0x00406E7E;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00406EA2;
	__asm        jmp    near ptr 0x00406EA7;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00406EC7;
	__asm        jmp    near ptr 0x00407060;
	__asm        jmp    near ptr 0x00406ED1;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10FC], eax;
	__asm        cmp    dword ptr [ebp-0x10FC], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00406F2B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10F0], eax;
	__asm        mov    eax, [ebp-0x10F0];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00406F1C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00406F2B;
	__asm        jmp    near ptr 0x00406F30;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00406F61;
	__asm        cmp    dword ptr [ebp-0x10FC], 0;
	__asm        je     near ptr 0x00407006;
	__asm        jmp    near ptr 0x00406F4F;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x10FC];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00407006;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10E8], eax;
	__asm        cmp    dword ptr [ebp-0x10E8], 0;
	__asm        je     near ptr 0x00406FA2;
	__asm        mov    eax, [ebp-0x10FC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10E8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x10E4], eax;
	__asm        jmp    near ptr 0x00406FAC;
	__asm        mov    dword ptr [ebp-0x10E4], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00406FF3;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x10F8], eax;
	__asm        mov    eax, [ebp-0x10F8];
	__asm        mov    [ebp-0x10F4], eax;
	__asm        cmp    dword ptr [ebp-0x10F4], 0;
	__asm        je     near ptr 0x00406FF3;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x10F4];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00406FF3;
	__asm        jmp    near ptr 0x00406FF8;
	__asm        mov    eax, [ebp-0x10E4];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00407045;
	__asm        cmp    dword ptr [ebp-0x10FC], 0;
	__asm        je     near ptr 0x00407045;
	__asm        jmp    near ptr 0x00407018;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10EC], eax;
	__asm        mov    eax, [ebp-0x10FC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10DC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10EC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00407045;
	__asm        mov    eax, [ebp-0x10FC];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00407056;
	__asm        jmp    near ptr 0x0040705B;
	__asm        jmp    near ptr 0x00407060;
// LINE 1124:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004070CE;
	__asm        jmp    near ptr 0x0040707F;
	__asm        mov    dword ptr [ebp-0x74], 0x20;
	__asm        mov    dword ptr [ebp-0x70], 0x148;
	__asm        mov    dword ptr [ebp-0x6C], 0x126;
	__asm        mov    dword ptr [ebp-0x68], 0x19E;
	__asm        jmp    near ptr 0x004070A0;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x004ACDA2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x004070DE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 1125:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+4];
// LINE 1126:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xCC];
// LINE 1127:
	__asm        push   0x5C2794;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
// LINE 1128:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xE4];
// LINE 1129:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0x28];
// LINE 1132:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x004071F6;
	__asm        jmp    near ptr 0x004071A4;
	__asm        mov    dword ptr [ebp-0x88], 0x146;
	__asm        mov    dword ptr [ebp-0x84], 0x17C;
	__asm        mov    dword ptr [ebp-0x80], 0x146;
	__asm        mov    dword ptr [ebp-0x7C], 0x17D;
	__asm        jmp    near ptr 0x004071CB;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x004071FD;
	__asm        mov    tempButtonWindow, 0;
// LINE 1133:
	__asm        push   0;
	__asm        push   0x14;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1134:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2100], eax;
	__asm        cmp    dword ptr [ebp-0x2100], 0;
	__asm        jne    near ptr 0x004072B9;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2100], eax;
	__asm        jmp    near ptr 0x0040726B;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040728F;
	__asm        jmp    near ptr 0x00407294;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004072B4;
	__asm        jmp    near ptr 0x0040744D;
	__asm        jmp    near ptr 0x004072BE;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x211C], eax;
	__asm        cmp    dword ptr [ebp-0x211C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00407318;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2110], eax;
	__asm        mov    eax, [ebp-0x2110];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407309;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407318;
	__asm        jmp    near ptr 0x0040731D;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040734E;
	__asm        cmp    dword ptr [ebp-0x211C], 0;
	__asm        je     near ptr 0x004073F3;
	__asm        jmp    near ptr 0x0040733C;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x211C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004073F3;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2108], eax;
	__asm        cmp    dword ptr [ebp-0x2108], 0;
	__asm        je     near ptr 0x0040738F;
	__asm        mov    eax, [ebp-0x211C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2108];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2104], eax;
	__asm        jmp    near ptr 0x00407399;
	__asm        mov    dword ptr [ebp-0x2104], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004073E0;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2118], eax;
	__asm        mov    eax, [ebp-0x2118];
	__asm        mov    [ebp-0x2114], eax;
	__asm        cmp    dword ptr [ebp-0x2114], 0;
	__asm        je     near ptr 0x004073E0;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x2114];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004073E0;
	__asm        jmp    near ptr 0x004073E5;
	__asm        mov    eax, [ebp-0x2104];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00407432;
	__asm        cmp    dword ptr [ebp-0x211C], 0;
	__asm        je     near ptr 0x00407432;
	__asm        jmp    near ptr 0x00407405;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x210C], eax;
	__asm        mov    eax, [ebp-0x211C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20FC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x210C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00407432;
	__asm        mov    eax, [ebp-0x211C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00407443;
	__asm        jmp    near ptr 0x00407448;
	__asm        jmp    near ptr 0x0040744D;
// LINE 1135:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1136:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1137:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1140:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x004074FF;
	__asm        jmp    near ptr 0x004074A4;
	__asm        mov    dword ptr [ebp-0x9C], 0x1BC;
	__asm        mov    dword ptr [ebp-0x98], 0x17C;
	__asm        mov    dword ptr [ebp-0x94], 0x1BD;
	__asm        mov    dword ptr [ebp-0x90], 0x17D;
	__asm        jmp    near ptr 0x004074D1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00407506;
	__asm        mov    tempButtonWindow, 0;
// LINE 1141:
	__asm        push   0;
	__asm        push   0x15;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1142:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3120], eax;
	__asm        cmp    dword ptr [ebp-0x3120], 0;
	__asm        jne    near ptr 0x004075C2;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3120], eax;
	__asm        jmp    near ptr 0x00407574;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00407598;
	__asm        jmp    near ptr 0x0040759D;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004075BD;
	__asm        jmp    near ptr 0x00407756;
	__asm        jmp    near ptr 0x004075C7;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x313C], eax;
	__asm        cmp    dword ptr [ebp-0x313C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00407621;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x3130], eax;
	__asm        mov    eax, [ebp-0x3130];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407612;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407621;
	__asm        jmp    near ptr 0x00407626;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00407657;
	__asm        cmp    dword ptr [ebp-0x313C], 0;
	__asm        je     near ptr 0x004076FC;
	__asm        jmp    near ptr 0x00407645;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x313C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004076FC;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3128], eax;
	__asm        cmp    dword ptr [ebp-0x3128], 0;
	__asm        je     near ptr 0x00407698;
	__asm        mov    eax, [ebp-0x313C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3128];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x3124], eax;
	__asm        jmp    near ptr 0x004076A2;
	__asm        mov    dword ptr [ebp-0x3124], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004076E9;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x3138], eax;
	__asm        mov    eax, [ebp-0x3138];
	__asm        mov    [ebp-0x3134], eax;
	__asm        cmp    dword ptr [ebp-0x3134], 0;
	__asm        je     near ptr 0x004076E9;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x3134];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004076E9;
	__asm        jmp    near ptr 0x004076EE;
	__asm        mov    eax, [ebp-0x3124];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0040773B;
	__asm        cmp    dword ptr [ebp-0x313C], 0;
	__asm        je     near ptr 0x0040773B;
	__asm        jmp    near ptr 0x0040770E;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x312C], eax;
	__asm        mov    eax, [ebp-0x313C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x311C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x312C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040773B;
	__asm        mov    eax, [ebp-0x313C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040774C;
	__asm        jmp    near ptr 0x00407751;
	__asm        jmp    near ptr 0x00407756;
// LINE 1143:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1144:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1145:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1148:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA0], eax;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     near ptr 0x00407808;
	__asm        jmp    near ptr 0x004077AD;
	__asm        mov    dword ptr [ebp-0xB0], 0x146;
	__asm        mov    dword ptr [ebp-0xAC], 0x15A;
	__asm        mov    dword ptr [ebp-0xA8], 0x147;
	__asm        mov    dword ptr [ebp-0xA4], 0x15B;
	__asm        jmp    near ptr 0x004077DA;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   9;
	__asm        lea    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0040780F;
	__asm        mov    tempButtonWindow, 0;
// LINE 1149:
	__asm        push   0;
	__asm        push   8;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1150:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4140], eax;
	__asm        cmp    dword ptr [ebp-0x4140], 0;
	__asm        jne    near ptr 0x004078CB;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4140], eax;
	__asm        jmp    near ptr 0x0040787D;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004078A1;
	__asm        jmp    near ptr 0x004078A6;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004078C6;
	__asm        jmp    near ptr 0x00407A5F;
	__asm        jmp    near ptr 0x004078D0;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x415C], eax;
	__asm        cmp    dword ptr [ebp-0x415C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040792A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x4150], eax;
	__asm        mov    eax, [ebp-0x4150];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040791B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040792A;
	__asm        jmp    near ptr 0x0040792F;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00407960;
	__asm        cmp    dword ptr [ebp-0x415C], 0;
	__asm        je     near ptr 0x00407A05;
	__asm        jmp    near ptr 0x0040794E;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x415C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00407A05;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4148], eax;
	__asm        cmp    dword ptr [ebp-0x4148], 0;
	__asm        je     near ptr 0x004079A1;
	__asm        mov    eax, [ebp-0x415C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4148];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x4144], eax;
	__asm        jmp    near ptr 0x004079AB;
	__asm        mov    dword ptr [ebp-0x4144], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004079F2;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x4158], eax;
	__asm        mov    eax, [ebp-0x4158];
	__asm        mov    [ebp-0x4154], eax;
	__asm        cmp    dword ptr [ebp-0x4154], 0;
	__asm        je     near ptr 0x004079F2;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x4154];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004079F2;
	__asm        jmp    near ptr 0x004079F7;
	__asm        mov    eax, [ebp-0x4144];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00407A44;
	__asm        cmp    dword ptr [ebp-0x415C], 0;
	__asm        je     near ptr 0x00407A44;
	__asm        jmp    near ptr 0x00407A17;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x414C], eax;
	__asm        mov    eax, [ebp-0x415C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x413C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x414C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00407A44;
	__asm        mov    eax, [ebp-0x415C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00407A55;
	__asm        jmp    near ptr 0x00407A5A;
	__asm        jmp    near ptr 0x00407A5F;
// LINE 1151:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1152:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1153:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1156:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB4], eax;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     near ptr 0x00407B11;
	__asm        jmp    near ptr 0x00407AB6;
	__asm        mov    dword ptr [ebp-0xC4], 0x1BC;
	__asm        mov    dword ptr [ebp-0xC0], 0x15A;
	__asm        mov    dword ptr [ebp-0xBC], 0x1BD;
	__asm        mov    dword ptr [ebp-0xB8], 0x15B;
	__asm        jmp    near ptr 0x00407AE3;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00407B18;
	__asm        mov    tempButtonWindow, 0;
// LINE 1157:
	__asm        push   0;
	__asm        push   5;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1158:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x5160], eax;
	__asm        cmp    dword ptr [ebp-0x5160], 0;
	__asm        jne    near ptr 0x00407BD4;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x5160], eax;
	__asm        jmp    near ptr 0x00407B86;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00407BAA;
	__asm        jmp    near ptr 0x00407BAF;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00407BCF;
	__asm        jmp    near ptr 0x00407C02;
	__asm        jmp    near ptr 0x00407BD9;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x515C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00407BFD;
	__asm        jmp    near ptr 0x00407C02;
// LINE 1159:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1160:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1161:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1164:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1165:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
// LINE 1166:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1168:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 1169:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1171:
	__asm        mov    dword ptr [ebp-0xC8], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00407CFF;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD8], eax;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     near ptr 0x00407CFF;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00407CE6;
	__asm        mov    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407CFA;
	__asm        jmp    near ptr 0x00407CFF;
	__asm        jmp    near ptr 0x00407D04;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x00407D32;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00407D37;
	__asm        mov    eax, [ebp-0xC8];
	__asm        jmp    near ptr 0x00407D42;
// LINE 1172:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00407d47
long UserInputWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1178:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1179:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00407D67;
// LINE 1180:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00407DAA;
// LINE 1182:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00407DA0;
// LINE 1183:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00407DA0;
// LINE 1184:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1186:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00407DAA;
// LINE 1187:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00407db1
int32_t UserInputWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	class ControlDisplayWindow* tempControlDisplayWindow;

// LINE 1195:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1198:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     near ptr 0x00407DD4;
// LINE 1199:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1201:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004080E1;
// LINE 1203:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00407E0E;
// LINE 1204:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1205:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1207:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00407E47;
// LINE 1208:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1209:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1212:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00407E68;
	__asm        jmp    near ptr 0x00407E6D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00407E86;
	__asm        jmp    near ptr 0x00407E8B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    [ebp-0x44], eax;
	__asm        jne    near ptr 0x00407EAD;
	__asm        jmp    near ptr 0x00407EC1;
	__asm        jmp    near ptr 0x00407EAD;
	__asm        jmp    near ptr 0x00407EBC;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    near ptr 0x00407EC1;
	__asm        jmp    near ptr 0x00407EC6;
	__asm        jmp    near ptr 0x00407F48;
	__asm        jmp    near ptr 0x00407ED5;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00407F48;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00407EE8;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00407EF3;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00407F19;
	__asm        jmp    near ptr 0x00407F1E;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x00407F35;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
	__asm        jmp    near ptr 0x00407F43;
	__asm        jmp    near ptr 0x00407E97;
	__asm        jmp    near ptr 0x00407F4D;
// LINE 1213:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        call   0x0048C8BD;
	__asm        add    esp, 4;
// LINE 1214:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1215:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1216:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1218:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00408D49;
// LINE 1219:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1221:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00408142;
// LINE 1222:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1224:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409609;
// LINE 1225:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1227:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, lMessage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409644;
// LINE 1228:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1230:
	__asm        push   0x80;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0040804C;
	__asm        jmp    near ptr 0x00408006;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    near ptr 0x00408027;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A968];
	__asm        push   eax;
	__asm        push   0x2711;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0040B4B0;
	__asm        mov    tempControlDisplayWindow, eax;
	__asm        jmp    near ptr 0x00408053;
	__asm        mov    tempControlDisplayWindow, 0;
// LINE 1231:
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1232:
	__asm        mov    eax, ds:[0x59A968];
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 1233:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1234:
	__asm        mov    eax, this;
	__asm        add    eax, 0x98;
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1235:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004080AC;
// LINE 1236:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1238:
	__asm        cmp    lMessage, 0x3E9;
	__asm        jne    near ptr 0x004080D2;
// LINE 1239:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004080D2;
// LINE 1240:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1241:
	__asm        jmp    near ptr 0x00408134;
	__asm        cmp    dword ptr [ebp-0x4C], 0x2711;
	__asm        jg     near ptr 0x00408134;
	__asm        je     near ptr 0x004080B6;
	__asm        dec    dword ptr [ebp-0x4C];
	__asm        cmp    dword ptr [ebp-0x4C], 8;
	__asm        ja     near ptr 0x00408134;
	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    dword ptr [eax*4+0x40810B];
	__asm        fistp  qword ptr [ebp+0x40];
	__asm        add    [eax], bl;
	__asm        jle    short 0x00408152;
	__asm        add    [ecx+0x7E], dl;
	__asm        inc    eax;
	__asm        add    [ecx+eax*4], dh;
	__asm        inc    eax;
	__asm        add    [edi+0x7F], bh;
	__asm        inc    eax;
	__asm        add    [ecx-0x4CFFBF81], bl;
	__asm        jg     short 0x00408166;
	__asm        add    ch, cl;
	__asm        jg     short 0x0040816A;
	__asm        add    bh, ah;
	__asm        jg     short 0x0040816E;
	__asm        add    cl, ch;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
// LINE 1243:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040813B;
// LINE 1244:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00408142
int32_t UserInputWindow::DoJoystickWindowMessage(long lMessage, void * __ptr32 pMessageData) {
	long lControl;
	long lDevice;
	long lCurrentCommand;
	enum UserInputWindow::KeyUsageType tempKeyUsageType;
	struct Shortcut tempShortcut;

// LINE 1251:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xFC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1259:
	__asm        cmp    lMessage, 0x10001;
	__asm        je     near ptr 0x0040816E;
	__asm        cmp    lMessage, 0x10002;
	__asm        jne    near ptr 0x004089D5;
// LINE 1261:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lControl, eax;
// LINE 1262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+0x74];
	__asm        inc    eax;
	__asm        mov    lDevice, eax;
// LINE 1263:
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1264:
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040920E;
	__asm        mov    tempKeyUsageType, eax;
// LINE 1266:
	__asm        cmp    lControl, 0;
	__asm        jl     near ptr 0x00408596;
	__asm        cmp    lControl, 5;
	__asm        jg     near ptr 0x00408596;
// LINE 1268:
	__asm        cmp    tempKeyUsageType, 0;
	__asm        jne    near ptr 0x00408516;
// LINE 1269:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00408D04;
// LINE 1270:
	__asm        mov    eax, lDevice;
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1271:
	__asm        mov    eax, lCurrentCommand;
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1272:
	__asm        mov    eax, lControl;
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1273:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1274:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1275:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00408220;
	__asm        jmp    near ptr 0x00408225;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0040825D;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00408446;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040842E;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        jne    near ptr 0x004082BC;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004082B2;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004082C1;
	__asm        jmp    near ptr 0x004082C6;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408301;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x00408307;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0040830C;
	__asm        jmp    near ptr 0x00408311;
	__asm        jmp    near ptr 0x00408316;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x88];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x0040837D;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408373;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408382;
	__asm        jmp    near ptr 0x00408387;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004083E4;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004083EA;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004083EF;
	__asm        jmp    near ptr 0x004083F4;
	__asm        jmp    near ptr 0x004083F9;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x00408411;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x44], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00408446;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0040844B;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00408459;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00408467;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00408483;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x00408483;
	__asm        jmp    near ptr 0x00408488;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004084D3;
	__asm        jmp    near ptr 0x004084D8;
	__asm        jmp    near ptr 0x004084DD;
// LINE 1277:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004089E6;
// LINE 1278:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1279:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1281:
	__asm        jmp    near ptr 0x00408591;
	__asm        cmp    tempKeyUsageType, 2;
	__asm        jne    near ptr 0x00408570;
// LINE 1282:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409494;
// LINE 1283:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00408D04;
// LINE 1284:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1285:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1287:
	__asm        jmp    near ptr 0x00408591;
	__asm        cmp    tempKeyUsageType, 3;
	__asm        jne    near ptr 0x00408591;
// LINE 1288:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0040B498;
// LINE 1289:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004089DF;
// LINE 1292:
	__asm        jmp    near ptr 0x004089D5;
// LINE 1293:
	__asm        cmp    tempKeyUsageType, 0;
	__asm        jne    near ptr 0x00408971;
// LINE 1294:
	__asm        mov    eax, lDevice;
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1295:
	__asm        mov    eax, lCurrentCommand;
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1296:
	__asm        mov    eax, lControl;
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1297:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1298:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1299:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1300:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004085EA;
	__asm        jmp    near ptr 0x004085EF;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0xF8], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x00408630;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x00408897;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x00408879;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE0], eax;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        jne    near ptr 0x0040869B;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408691;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004086A0;
	__asm        jmp    near ptr 0x004086A5;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    dword ptr [ebp-0xB8], 0x80;
	__asm        lea    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    dword ptr [ebp-0xBC], 1;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408704;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x00408710;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x00408715;
	__asm        jmp    near ptr 0x0040871A;
	__asm        jmp    near ptr 0x0040871F;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF0], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xF0];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        jne    near ptr 0x0040878F;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408785;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408794;
	__asm        jmp    near ptr 0x00408799;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xCC], 0x80;
	__asm        lea    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    dword ptr [ebp-0xD0], 1;
	__asm        lea    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408820;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x0040882C;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x00408831;
	__asm        jmp    near ptr 0x00408836;
	__asm        jmp    near ptr 0x0040883B;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x00408856;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xAC], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x00408897;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xB0], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x0040889C;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x004088AD;
	__asm        mov    eax, [ebp-0xA0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004088C1;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     near ptr 0x004088E3;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xA4];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004088E3;
	__asm        jmp    near ptr 0x004088E8;
	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ecx, [ebp-0xF8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ecx, [ebp-0xF8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x00408945;
	__asm        jmp    near ptr 0x0040894A;
	__asm        jmp    near ptr 0x0040894F;
// LINE 1301:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1302:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1304:
	__asm        jmp    near ptr 0x004089D5;
	__asm        cmp    tempKeyUsageType, 2;
	__asm        jne    near ptr 0x004089B4;
// LINE 1305:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409494;
// LINE 1306:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1307:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1309:
	__asm        jmp    near ptr 0x004089D5;
	__asm        cmp    tempKeyUsageType, 3;
	__asm        jne    near ptr 0x004089D5;
// LINE 1310:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0040B498;
// LINE 1311:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004089DF;
// LINE 1315:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004089DF;
// LINE 1316:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004089e6
void UserInputWindow::AddJoystickTwinCommand(long lCommand, long lDevice, long lControl) {
	long lTwinCommand;
	struct Shortcut tempShortcut;

// LINE 1342:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x88;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1344:
	__asm        mov    eax, lCommand;
	__asm        push   eax;
	__asm        call   0x0048E6C6;
	__asm        add    esp, 4;
	__asm        mov    lTwinCommand, eax;
// LINE 1346:
	__asm        cmp    lTwinCommand, 0;
	__asm        je     near ptr 0x00408CF8;
// LINE 1347:
	__asm        mov    eax, lDevice;
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1348:
	__asm        mov    eax, lTwinCommand;
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1349:
	__asm        mov    eax, lControl;
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1350:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1351:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1352:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1353:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00408A52;
	__asm        jmp    near ptr 0x00408A57;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x00408A8C;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00408C63;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x00408C4E;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    near ptr 0x00408AEB;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408AE1;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408AF0;
	__asm        jmp    near ptr 0x00408AF5;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x44], 0x80;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x48], 1;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408B30;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00408B36;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00408B3B;
	__asm        jmp    near ptr 0x00408B40;
	__asm        jmp    near ptr 0x00408B45;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x7C];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        jne    near ptr 0x00408BA0;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408B96;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408BA5;
	__asm        jmp    near ptr 0x00408BAA;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x58], 0x80;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    dword ptr [ebp-0x5C], 1;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408C07;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00408C0D;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00408C12;
	__asm        jmp    near ptr 0x00408C17;
	__asm        jmp    near ptr 0x00408C1C;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x00408C34;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x38], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00408C63;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x3C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00408C68;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00408C73;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00408C81;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00408C9D;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x30];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x00408C9D;
	__asm        jmp    near ptr 0x00408CA2;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00408CEE;
	__asm        jmp    near ptr 0x00408CF3;
	__asm        jmp    near ptr 0x00408CF8;
// LINE 1355:
	__asm        jmp    near ptr 0x00408CFD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00408d04
void UserInputWindow::RemoveJoystickTwinCommand(long lCommand, long lDevice, long lControl) {
	long lTwinCommand;

// LINE 1365:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1366:
	__asm        mov    eax, lCommand;
	__asm        push   eax;
	__asm        call   0x0048E6C6;
	__asm        add    esp, 4;
	__asm        mov    lTwinCommand, eax;
// LINE 1368:
	__asm        cmp    lTwinCommand, 0;
	__asm        je     near ptr 0x00408D3D;
// LINE 1369:
	__asm        mov    eax, lControl;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    eax, lTwinCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409494;
// LINE 1370:
	__asm        jmp    near ptr 0x00408D42;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00408d49
int32_t UserInputWindow::DoKeyboardWindowMessage(long lMessage, void * __ptr32 pMessageData) {
	long lCurrentCommand;
	long lPush;
	long lKey;
	enum UserInputWindow::KeyUsageType tempKeyUsageType;
	struct Shortcut tempShortcut;
	long lIgnoreModifiers;

// LINE 1378:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x98;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1386:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00409187;
// LINE 1387:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lKey, eax;
// LINE 1388:
	__asm        push   0;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040920E;
	__asm        mov    tempKeyUsageType, eax;
// LINE 1389:
	__asm        cmp    tempKeyUsageType, 1;
	__asm        jne    near ptr 0x00408DAA;
// LINE 1390:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0040B498;
// LINE 1391:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00409207;
// LINE 1393:
	__asm        jmp    near ptr 0x00409182;
	__asm        cmp    tempKeyUsageType, 0;
	__asm        jne    near ptr 0x00409108;
// LINE 1394:
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1395:
	__asm        lea    eax, lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, lPush;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 1396:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1397:
	__asm        mov    eax, lCurrentCommand;
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1398:
	__asm        mov    eax, lKey;
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1399:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1400:
	__asm        mov    eax, lPush;
	__asm        mov    tempShortcut.lPush, eax;
// LINE 1401:
	__asm        mov    eax, lIgnoreModifiers;
	__asm        mov    tempShortcut.lIgnoreModifiers, eax;
// LINE 1402:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00408E16;
	__asm        jmp    near ptr 0x00408E1B;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x00408E53;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x00409045;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040902D;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        jne    near ptr 0x00408EB2;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408EA8;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408EB7;
	__asm        jmp    near ptr 0x00408EBC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    dword ptr [ebp-0x54], 0x80;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408EF7;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00408EFD;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00408F02;
	__asm        jmp    near ptr 0x00408F07;
	__asm        jmp    near ptr 0x00408F0C;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x8C];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        jne    near ptr 0x00408F79;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408F6F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00408F7E;
	__asm        jmp    near ptr 0x00408F83;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x68], 0x80;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    dword ptr [ebp-0x6C], 1;
	__asm        lea    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00408FE3;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x00408FE9;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x00408FEE;
	__asm        jmp    near ptr 0x00408FF3;
	__asm        jmp    near ptr 0x00408FF8;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x00409010;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x00409045;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0040904A;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00409058;
	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00409066;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00409082;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x40];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x00409082;
	__asm        jmp    near ptr 0x00409087;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004090D2;
	__asm        jmp    near ptr 0x004090D7;
	__asm        jmp    near ptr 0x004090DC;
// LINE 1403:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1404:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1405:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00409207;
// LINE 1407:
	__asm        jmp    near ptr 0x00409182;
	__asm        cmp    tempKeyUsageType, 2;
	__asm        jne    near ptr 0x00409161;
// LINE 1408:
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1409:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00409494;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 1;
// LINE 1411:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1412:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00409207;
// LINE 1414:
	__asm        jmp    near ptr 0x00409182;
	__asm        cmp    tempKeyUsageType, 3;
	__asm        jne    near ptr 0x00409182;
// LINE 1415:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0040B498;
// LINE 1416:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00409207;
// LINE 1419:
	__asm        jmp    near ptr 0x00409200;
	__asm        cmp    lMessage, 0x10002;
	__asm        jne    near ptr 0x004091A0;
// LINE 1420:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00409207;
// LINE 1422:
	__asm        jmp    near ptr 0x00409200;
	__asm        cmp    lMessage, 0x10003;
	__asm        jne    near ptr 0x004091D3;
// LINE 1423:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lKey, eax;
// LINE 1424:
	__asm        lea    eax, lKey;
	__asm        push   eax;
	__asm        push   0x10001;
	__asm        mov    ecx, this;
	__asm        call   0x00408D49;
	__asm        jmp    near ptr 0x00409207;
// LINE 1426:
	__asm        jmp    near ptr 0x00409200;
	__asm        cmp    lMessage, 0x10004;
	__asm        jne    near ptr 0x004091EC;
// LINE 1427:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00409207;
// LINE 1429:
	__asm        jmp    near ptr 0x00409200;
	__asm        cmp    lMessage, 0x10005;
	__asm        jne    near ptr 0x00409200;
// LINE 1431:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00409207;
// LINE 1434:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00409207;
// LINE 1435:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0040920e
enum UserInputWindow::KeyUsageType UserInputWindow::GetKeyUsageType(long lKey, long lDevice) {
	long lCurrentCommand;

// LINE 1443:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1446:
	__asm        cmp    lDevice, 0;
	__asm        jne    near ptr 0x00409342;
// LINE 1447:
// Block start:
	class list<Shortcut>::iterator iterator;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        call   0x0048E5FA;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00409242;
// LINE 1448:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1449:
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1450:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00409266;
	__asm        jmp    near ptr 0x0040926B;
// LINE 1451:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00409282;
	__asm        jmp    near ptr 0x00409287;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    near ptr 0x0040929D;
	__asm        jmp    near ptr 0x004092B1;
	__asm        jmp    near ptr 0x0040929D;
	__asm        jmp    near ptr 0x004092AC;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    near ptr 0x004092B1;
	__asm        jmp    near ptr 0x004092B6;
	__asm        jmp    near ptr 0x0040933D;
	__asm        jmp    near ptr 0x004092C5;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0040933D;
// LINE 1453:
	__asm        jmp    near ptr 0x004092CA;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lDevice;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x0040931A;
	__asm        jmp    near ptr 0x004092DE;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lKey;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x0040931A;
// LINE 1454:
	__asm        jmp    near ptr 0x004092F2;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lCurrentCommand;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jne    near ptr 0x00409310;
// LINE 1455:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1456:
	__asm        jmp    near ptr 0x0040931A;
// LINE 1457:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1459:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0040932D;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00409338;
// LINE 1460:
	__asm        jmp    near ptr 0x0040926B;
// LINE 1463:
// Block end:
	__asm        jmp    near ptr 0x00409486;
	__asm        cmp    lDevice, 1;
	__asm        jge    near ptr 0x00409356;
	__asm        cmp    lDevice, 4;
	__asm        jg     near ptr 0x0040935B;
	__asm        jmp    near ptr 0x00409360;
	__asm        jmp    near ptr 0x00409486;
	__asm        jmp    near ptr 0x0040936F;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00409486;
// LINE 1464:
// Block start:
	class list<Shortcut>::iterator iterator;
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1465:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00409393;
	__asm        jmp    near ptr 0x00409398;
// LINE 1466:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004093AF;
	__asm        jmp    near ptr 0x004093B4;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x18], eax;
	__asm        jne    near ptr 0x004093CA;
	__asm        jmp    near ptr 0x004093DE;
	__asm        jmp    near ptr 0x004093CA;
	__asm        jmp    near ptr 0x004093D9;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x004093DE;
	__asm        jmp    near ptr 0x004093E3;
	__asm        jmp    near ptr 0x00409486;
	__asm        jmp    near ptr 0x004093F2;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00409486;
// LINE 1468:
	__asm        jmp    near ptr 0x004093F7;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lDevice;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x00409463;
	__asm        jmp    near ptr 0x0040940B;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lKey;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x00409463;
// LINE 1470:
	__asm        jmp    near ptr 0x0040941F;
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lCurrentCommand;
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     near ptr 0x0040944A;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    eax, lDevice;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040A345;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00409459;
// LINE 1472:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1474:
	__asm        jmp    near ptr 0x00409463;
// LINE 1475:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1477:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00409476;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00409481;
// LINE 1478:
	__asm        jmp    near ptr 0x00409398;
// LINE 1481:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040948D;
// LINE 1482:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00409494
void UserInputWindow::RemoveShortcutFromList(long lCommand, long lDevice, long lKey) {
	class list<Shortcut>::iterator tempShortcutListIterator;
	struct Shortcut tempShortcut;

// LINE 1489:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004094B9;
	__asm        jmp    near ptr 0x004094BE;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004094D5;
	__asm        jmp    near ptr 0x004094DA;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    [ebp-0x20], eax;
	__asm        jne    near ptr 0x004094F0;
	__asm        jmp    near ptr 0x00409504;
	__asm        jmp    near ptr 0x004094F0;
	__asm        jmp    near ptr 0x004094FF;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    near ptr 0x00409504;
	__asm        jmp    near ptr 0x00409509;
	__asm        jmp    near ptr 0x004095FD;
	__asm        jmp    near ptr 0x00409518;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004095FD;
// LINE 1494:
	__asm        jmp    near ptr 0x0040951D;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1495:
	__asm        jmp    near ptr 0x0040952B;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1496:
	__asm        jmp    near ptr 0x00409539;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1499:
	__asm        mov    eax, lDevice;
	__asm        cmp    tempShortcut.lDeviceID, eax;
	__asm        jne    near ptr 0x004095DA;
	__asm        mov    eax, lCommand;
	__asm        cmp    tempShortcut.lCommand, eax;
	__asm        jne    near ptr 0x004095DA;
	__asm        mov    eax, lKey;
	__asm        cmp    tempShortcut.lKey, eax;
	__asm        jne    near ptr 0x004095DA;
// LINE 1501:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x00409579;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00409584;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004095AA;
	__asm        jmp    near ptr 0x004095AF;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x004095C6;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xA4], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004095D5;
// LINE 1503:
	__asm        jmp    near ptr 0x004095F8;
// LINE 1504:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004095ED;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004095F8;
// LINE 1505:
	__asm        jmp    near ptr 0x004094BE;
// LINE 1506:
	__asm        jmp    near ptr 0x00409602;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00409609
int32_t UserInputWindow::DoInputDeviceListBoxWindowMessage(long lMessage, void * __ptr32 pMessageData) {
// LINE 1512:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1513:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00409636;
// LINE 1514:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1515:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040963D;
// LINE 1517:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040963D;
// LINE 1518:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00409644
int32_t UserInputWindow::DoCommandListBoxWindowMessage(long lMessage, void * __ptr32 pMessageData) {
// LINE 1524:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1525:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00409671;
// LINE 1526:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1527:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00409678;
// LINE 1529:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00409678;
// LINE 1530:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0040967f
long UserInputWindow::GetCurrentDevice() {
	int32_t nDeviceCount;
	class list<StringIDAssociation>::iterator tempIterator;
	int32_t i;
	long lCurrentInputDeviceIndex;

// LINE 1537:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1538:
	__asm        mov    i, 0;
// LINE 1539:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xE0];
	__asm        mov    lCurrentInputDeviceIndex, eax;
// LINE 1541:
	__asm        jmp    near ptr 0x004096AE;
// LINE 1543:
	__asm        jmp    near ptr 0x004096B3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    nDeviceCount, eax;
// LINE 1544:
	__asm        mov    eax, lCurrentInputDeviceIndex;
	__asm        cmp    nDeviceCount, eax;
	__asm        jg     near ptr 0x004096D5;
// LINE 1545:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0040973B;
// LINE 1546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004096EE;
	__asm        jmp    near ptr 0x004096F3;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    tempIterator.node, eax;
// LINE 1547:
	__asm        mov    eax, i;
	__asm        cmp    lCurrentInputDeviceIndex, eax;
	__asm        jle    near ptr 0x0040972B;
// LINE 1548:
	__asm        mov    eax, tempIterator.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, tempIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempIterator.node, eax;
	__asm        jmp    near ptr 0x00409718;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00409723;
// LINE 1549:
	__asm        inc    i;
// LINE 1550:
	__asm        jmp    near ptr 0x004096F9;
// LINE 1551:
	__asm        jmp    near ptr 0x00409730;
	__asm        mov    eax, tempIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        jmp    near ptr 0x0040973B;
// LINE 1552:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00409740
long UserInputWindow::GetCurrentCommand() {
	class list<StringIDAssociation>::iterator tempIterator;
	int32_t i;
	long lCurrentCommandIndex;
	int32_t nCommandCount;

// LINE 1559:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1560:
	__asm        mov    i, 0;
// LINE 1561:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xE0];
	__asm        mov    lCurrentCommandIndex, eax;
// LINE 1563:
	__asm        jmp    near ptr 0x00409775;
// LINE 1565:
	__asm        jmp    near ptr 0x0040977A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    nCommandCount, eax;
// LINE 1566:
	__asm        mov    eax, lCurrentCommandIndex;
	__asm        cmp    nCommandCount, eax;
	__asm        jg     near ptr 0x00409799;
// LINE 1567:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004097FF;
// LINE 1568:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004097B2;
	__asm        jmp    near ptr 0x004097B7;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    tempIterator.node, eax;
// LINE 1569:
	__asm        mov    eax, i;
	__asm        cmp    lCurrentCommandIndex, eax;
	__asm        jle    near ptr 0x004097EF;
// LINE 1570:
	__asm        mov    eax, tempIterator.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, tempIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempIterator.node, eax;
	__asm        jmp    near ptr 0x004097DC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004097E7;
// LINE 1571:
	__asm        inc    i;
// LINE 1572:
	__asm        jmp    near ptr 0x004097BD;
// LINE 1573:
	__asm        jmp    near ptr 0x004097F4;
	__asm        mov    eax, tempIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        jmp    near ptr 0x004097FF;
// LINE 1574:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00409804
void UserInputWindow::UpdateDisplay(int32_t bRedrawBackground) {
	long lCurrentCommand;
	int32_t i;
	long lCurrentDevice;
	long[16] lReservedKeys;
	struct Shortcut tempShortcut;
	struct KeyColors tempKeyColors;

// LINE 1585:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x17C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1593:
	__asm        mov    ecx, this;
	__asm        call   0x0040967F;
	__asm        mov    lCurrentDevice, eax;
// LINE 1594:
	__asm        cmp    lCurrentDevice, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00409833;
// LINE 1595:
	__asm        jmp    near ptr 0x0040A33E;
// LINE 1596:
	__asm        mov    ecx, this;
	__asm        call   0x00409740;
	__asm        mov    lCurrentCommand, eax;
// LINE 1597:
	__asm        cmp    lCurrentCommand, 0;
	__asm        jne    near ptr 0x00409850;
// LINE 1598:
	__asm        jmp    near ptr 0x0040A33E;
// LINE 1601:
	__asm        cmp    lCurrentDevice, 0;
	__asm        jne    near ptr 0x0040A09C;
// LINE 1602:
	__asm        cmp    bRedrawBackground, 0;
	__asm        je     near ptr 0x0040986F;
// LINE 1603:
	__asm        mov    ecx, this;
	__asm        call   0x0040A459;
// LINE 1604:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x004098B7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC0], eax;
// LINE 1605:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004098A0;
// LINE 1606:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x14];
// LINE 1608:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x0040A097;
// LINE 1609:
// Block start:
	class list<Shortcut>::iterator tempShortcutListIterator;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0xC4], eax;
// LINE 1610:
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x00409901;
// LINE 1611:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x30];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0xB4], eax;
// LINE 1613:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x0040994C;
	__asm        jmp    near ptr 0x00409951;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x00409983;
	__asm        jmp    near ptr 0x00409988;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        cmp    [ebp-0x16C], eax;
	__asm        jne    near ptr 0x004099CA;
	__asm        jmp    near ptr 0x004099E1;
	__asm        jmp    near ptr 0x004099CA;
	__asm        jmp    near ptr 0x004099DC;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        jne    near ptr 0x004099E1;
	__asm        jmp    near ptr 0x004099E6;
	__asm        jmp    near ptr 0x00409A95;
	__asm        jmp    near ptr 0x004099F8;
	__asm        cmp    dword ptr [ebp-0x160], 0;
	__asm        je     near ptr 0x00409A95;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x16C], eax;
	__asm        jmp    near ptr 0x00409A17;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x00409A28;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x164];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x164];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00409A60;
	__asm        jmp    near ptr 0x00409A65;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    ecx, [ebp-0x164];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        jmp    near ptr 0x00409A82;
	__asm        mov    eax, [ebp-0x170];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x00409A90;
	__asm        jmp    near ptr 0x004099AE;
	__asm        jmp    near ptr 0x00409A9A;
// LINE 1616:
	__asm        lea    eax, lReservedKeys[0];
	__asm        push   eax;
	__asm        call   0x0048E64B;
	__asm        add    esp, 4;
// LINE 1617:
	__asm        mov    i, 0;
// LINE 1618:
	__asm        mov    eax, i;
	__asm        cmp    dword ptr [ebp+eax*4-0x60], 0;
	__asm        je     near ptr 0x00409C60;
// LINE 1619:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*4-0x60];
	__asm        mov    tempKeyColors.lKey, eax;
// LINE 1620:
	__asm        mov    tempKeyColors.lColorIndex, 0x36;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0xF8], eax;
// LINE 1621:
	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x00409AFF;
	__asm        jmp    near ptr 0x00409B04;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    [ebp-0xE4], eax;
	__asm        cmp    dword ptr ds:[0x5971C8], 0;
	__asm        je     near ptr 0x00409B45;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    near ptr 0x00409BA2;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        cmp    ds:[0x5971C0], eax;
	__asm        jne    near ptr 0x00409B84;
	__asm        mov    ecx, [ebp-0xF8];
	__asm        call   0x0040D920;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0xE8], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    near ptr 0x00409BA2;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    near ptr 0x00409BA7;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x00409BB8;
	__asm        mov    eax, [ebp-0xDC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x00409BCC;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     near ptr 0x00409BEF;
	__asm        mov    eax, tempKeyColors.lKey;
	__asm        mov    ecx, tempKeyColors.lColorIndex;
	__asm        mov    edx, [ebp-0xE0];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    near ptr 0x00409BEF;
	__asm        jmp    near ptr 0x00409BF4;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x00409C4E;
	__asm        jmp    near ptr 0x00409C53;
	__asm        jmp    near ptr 0x00409C58;
// LINE 1622:
	__asm        inc    i;
// LINE 1623:
	__asm        jmp    near ptr 0x00409AAD;
// LINE 1626:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x00409C82;
	__asm        jmp    near ptr 0x00409C87;
// LINE 1627:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00409CA7;
	__asm        jmp    near ptr 0x00409CAC;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    [ebp-0x80], eax;
	__asm        jne    near ptr 0x00409CC2;
	__asm        jmp    near ptr 0x00409CD9;
	__asm        jmp    near ptr 0x00409CC2;
	__asm        jmp    near ptr 0x00409CD4;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        jne    near ptr 0x00409CD9;
	__asm        jmp    near ptr 0x00409CDE;
	__asm        jmp    near ptr 0x0040A097;
	__asm        jmp    near ptr 0x00409CF0;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x0040A097;
// LINE 1628:
	__asm        jmp    near ptr 0x00409CF5;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1629:
	__asm        jmp    near ptr 0x00409D03;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1630:
	__asm        jmp    near ptr 0x00409D11;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1631:
	__asm        mov    eax, lCurrentDevice;
	__asm        cmp    tempShortcut.lDeviceID, eax;
	__asm        jne    near ptr 0x0040A06B;
// LINE 1632:
	__asm        mov    eax, lCurrentCommand;
	__asm        cmp    tempShortcut.lCommand, eax;
	__asm        jne    near ptr 0x00409ED1;
// LINE 1635:
	__asm        mov    eax, tempShortcut.lKey;
	__asm        mov    tempKeyColors.lKey, eax;
// LINE 1636:
	__asm        mov    tempKeyColors.lColorIndex, 0x9D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0x124], eax;
// LINE 1637:
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    near ptr 0x00409D72;
	__asm        jmp    near ptr 0x00409D77;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr ds:[0x5971C8], 0;
	__asm        je     near ptr 0x00409DB8;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x00409E15;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        cmp    ds:[0x5971C0], eax;
	__asm        jne    near ptr 0x00409DF7;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   0x0040D920;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0x114], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x00409E15;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0x118], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x00409E1A;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    near ptr 0x00409E2B;
	__asm        mov    eax, [ebp-0x108];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    near ptr 0x00409E3F;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x00409E62;
	__asm        mov    eax, tempKeyColors.lKey;
	__asm        mov    ecx, tempKeyColors.lColorIndex;
	__asm        mov    edx, [ebp-0x10C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    near ptr 0x00409E62;
	__asm        jmp    near ptr 0x00409E67;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x108];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x108];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x100], eax;
	__asm        jmp    near ptr 0x00409EC2;
	__asm        jmp    near ptr 0x00409EC7;
	__asm        jmp    near ptr 0x00409ECC;
// LINE 1639:
	__asm        jmp    near ptr 0x0040A06B;
// LINE 1640:
	__asm        mov    eax, tempShortcut.lKey;
	__asm        mov    tempKeyColors.lKey, eax;
// LINE 1641:
	__asm        mov    tempKeyColors.lColorIndex, 0x64;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x90;
	__asm        mov    [ebp-0x150], eax;
// LINE 1642:
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x00409F11;
	__asm        jmp    near ptr 0x00409F16;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr ds:[0x5971C8], 0;
	__asm        je     near ptr 0x00409F57;
	__asm        mov    eax, ds:[0x5971C8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971C8], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x00409FB4;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        cmp    ds:[0x5971C0], eax;
	__asm        jne    near ptr 0x00409F96;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   0x0040D920;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0x140], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x00409FB4;
	__asm        mov    eax, ds:[0x5971C4];
	__asm        mov    [ebp-0x144], eax;
	__asm        add    dword ptr ds:[0x5971C4], 0x10;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x00409FB9;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x00409FCA;
	__asm        mov    eax, [ebp-0x134];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x138], eax;
	__asm        jmp    near ptr 0x00409FDE;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x0040A001;
	__asm        mov    eax, tempKeyColors.lKey;
	__asm        mov    ecx, tempKeyColors.lColorIndex;
	__asm        mov    edx, [ebp-0x138];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    near ptr 0x0040A001;
	__asm        jmp    near ptr 0x0040A006;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x12C], eax;
	__asm        jmp    near ptr 0x0040A061;
	__asm        jmp    near ptr 0x0040A066;
	__asm        jmp    near ptr 0x0040A06B;
// LINE 1645:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040A081;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x0040A092;
// LINE 1646:
	__asm        jmp    near ptr 0x00409C87;
// LINE 1649:
// Block end:
	__asm        jmp    near ptr 0x0040A339;
	__asm        cmp    lCurrentDevice, 1;
	__asm        jl     near ptr 0x0040A339;
	__asm        cmp    lCurrentDevice, 4;
	__asm        jg     near ptr 0x0040A339;
// LINE 1650:
	__asm        cmp    bRedrawBackground, 0;
	__asm        je     near ptr 0x0040A0C5;
// LINE 1651:
	__asm        mov    ecx, this;
	__asm        call   0x0040A459;
// LINE 1652:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x0040A10D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x94], eax;
// LINE 1653:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x0040A0F6;
// LINE 1654:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x14];
// LINE 1656:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0040A339;
// LINE 1657:
// Block start:
	class list<Shortcut>::iterator tempShortcutListIterator;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x10];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x98], eax;
// LINE 1658:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x0040A157;
// LINE 1659:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x30];
// LINE 1660:
	__asm        mov    eax, lCurrentDevice;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xC4];
// LINE 1663:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0040A1A0;
	__asm        inc    i;
	__asm        cmp    i, 0xE;
	__asm        jge    near ptr 0x0040A1C3;
// LINE 1664:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, i;
	__asm        mov    byte ptr [eax+ecx+0xB0], 0;
	__asm        jmp    near ptr 0x0040A19D;
// LINE 1667:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040A1E5;
	__asm        jmp    near ptr 0x0040A1EA;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x0040A20D;
	__asm        jmp    near ptr 0x0040A212;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    [ebp-0x88], eax;
	__asm        jne    near ptr 0x0040A22B;
	__asm        jmp    near ptr 0x0040A242;
	__asm        jmp    near ptr 0x0040A22B;
	__asm        jmp    near ptr 0x0040A23D;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        jne    near ptr 0x0040A242;
	__asm        jmp    near ptr 0x0040A247;
	__asm        jmp    near ptr 0x0040A339;
	__asm        jmp    near ptr 0x0040A259;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     near ptr 0x0040A339;
// LINE 1669:
	__asm        jmp    near ptr 0x0040A25E;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 1670:
	__asm        jmp    near ptr 0x0040A26C;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    tempShortcut.lCommand, eax;
// LINE 1671:
	__asm        jmp    near ptr 0x0040A27A;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    tempShortcut.lKey, eax;
// LINE 1672:
	__asm        mov    eax, lCurrentDevice;
	__asm        cmp    tempShortcut.lDeviceID, eax;
	__asm        jne    near ptr 0x0040A30D;
// LINE 1673:
	__asm        cmp    tempShortcut.lKey, 0xE;
	__asm        jge    near ptr 0x0040A30D;
// LINE 1675:
	__asm        mov    eax, lCurrentCommand;
	__asm        cmp    tempShortcut.lCommand, eax;
	__asm        je     near ptr 0x0040A2C4;
	__asm        mov    eax, tempShortcut.lKey;
	__asm        push   eax;
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        mov    eax, lCurrentDevice;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040A345;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0040A2DD;
// LINE 1677:
	__asm        mov    eax, tempShortcut.lKey;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    byte ptr [eax+ecx+0xB0], 2;
// LINE 1679:
	__asm        jmp    near ptr 0x0040A30D;
	__asm        mov    eax, tempShortcut.lKey;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        movsx  eax, byte ptr [eax+ecx+0xB0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0040A30D;
// LINE 1680:
	__asm        mov    eax, tempShortcut.lKey;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    byte ptr [eax+ecx+0xB0], 1;
// LINE 1683:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040A323;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0040A334;
// LINE 1684:
	__asm        jmp    near ptr 0x0040A1EA;
// LINE 1687:
// Block end:
	__asm        jmp    near ptr 0x0040A33E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0040a345
int32_t UserInputWindow::DoesTwinCommandExistForShortcut(long lDevice, long lCommand, long lKey) {
	long lTwinCommand;
	class list<Shortcut>::iterator tempShortcutListIterator;

// LINE 1694:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1695:
	__asm        mov    eax, lCommand;
	__asm        push   eax;
	__asm        call   0x0048E6C6;
	__asm        add    esp, 4;
	__asm        mov    lTwinCommand, eax;
// LINE 1697:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040A379;
	__asm        jmp    near ptr 0x0040A37E;
// LINE 1698:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0040A395;
	__asm        jmp    near ptr 0x0040A39A;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    near ptr 0x0040A3B0;
	__asm        jmp    near ptr 0x0040A3C4;
	__asm        jmp    near ptr 0x0040A3B0;
	__asm        jmp    near ptr 0x0040A3BF;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x0040A3C4;
	__asm        jmp    near ptr 0x0040A3C9;
	__asm        jmp    near ptr 0x0040A44B;
	__asm        jmp    near ptr 0x0040A3D8;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0040A44B;
// LINE 1702:
	__asm        jmp    near ptr 0x0040A3DD;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    ecx, lDevice;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x0040A428;
	__asm        jmp    near ptr 0x0040A3F1;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    ecx, lTwinCommand;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jne    near ptr 0x0040A428;
	__asm        jmp    near ptr 0x0040A405;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    ecx, lKey;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x0040A428;
	__asm        cmp    lCommand, 5;
	__asm        jg     near ptr 0x0040A428;
// LINE 1704:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040A452;
// LINE 1706:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040A43B;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0040A446;
// LINE 1707:
	__asm        jmp    near ptr 0x0040A37E;
// LINE 1708:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040A452;
// LINE 1709:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0040a459
void UserInputWindow::ClearDeviceArea() {
	class MPoint ptDeviceArea;
	class CBackBuffer tempImage;
	char[260] szFilePath;

// LINE 1716:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x244;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1717:
	__asm        jmp    near ptr 0x0040A470;
	__asm        mov    ptDeviceArea.x, 0x28;
	__asm        mov    ptDeviceArea.y, 9;
	__asm        jmp    near ptr 0x0040A489;
// LINE 1720:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597114];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1722:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempImage.<CBackBuffer+0x00>;
	__asm        call   0x0046E6DF;
// LINE 1724:
	__asm        jmp    near ptr 0x0040A4B9;
	__asm        jmp    near ptr 0x0040A4BE;
	__asm        mov    eax, tempImage.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempImage.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDeviceArea.y;
	__asm        push   eax;
	__asm        mov    eax, ptDeviceArea.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempImage.<CBackBuffer+0x00>;
	__asm        call   0x0046F948;
// LINE 1725:
	__asm        lea    ecx, tempImage.<CBackBuffer+0x00>;
	__asm        call   0x0046EC7A;
	__asm        jmp    near ptr 0x0040A503;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040a508
void UserInputWindow::SetupAllInputDevices() {
	class basic_string<char> sDeviceName;
	int32_t i;
	unsigned long nFullStringID;
	int32_t nJoystickCount;
	char[64] szJoystickName;

// LINE 1732:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x10DC;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1733:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x0040A586;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040A578;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    sDeviceName.reference, eax;
	__asm        jmp    near ptr 0x0040A58D;
	__asm        mov    sDeviceName.reference, 0;
	__asm        mov    sDeviceName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040A599;
// LINE 1741:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0040A5B9;
	__asm        jmp    near ptr 0x0040A5BE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0040A5E0;
	__asm        jmp    near ptr 0x0040A5E5;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        cmp    [ebp-0xD4], eax;
	__asm        jne    near ptr 0x0040A613;
	__asm        jmp    near ptr 0x0040A62A;
	__asm        jmp    near ptr 0x0040A613;
	__asm        jmp    near ptr 0x0040A625;
	__asm        cmp    dword ptr [ebp-0xC4], 0;
	__asm        jne    near ptr 0x0040A62A;
	__asm        jmp    near ptr 0x0040A62F;
	__asm        jmp    near ptr 0x0040A6F1;
	__asm        jmp    near ptr 0x0040A641;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        je     near ptr 0x0040A6F1;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x0040A660;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x0040A671;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040A6A9;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0xCC];
	__asm        add    ecx, 8;
	__asm        call   0x0041DDF0;
	__asm        jmp    near ptr 0x0040A6BE;
	__asm        mov    eax, ds:[0x597210];
	__asm        mov    ecx, [ebp-0xCC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ds:[0x597210], eax;
	__asm        jmp    near ptr 0x0040A6DB;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x8C];
	__asm        jmp    near ptr 0x0040A6EC;
	__asm        jmp    near ptr 0x0040A5F7;
	__asm        jmp    near ptr 0x0040A6F6;
// LINE 1744:
	__asm        push   0;
	__asm        push   9;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1745:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10D8], eax;
	__asm        cmp    dword ptr [ebp-0x10D8], 0;
	__asm        jne    near ptr 0x0040A7B2;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10D8], eax;
	__asm        jmp    near ptr 0x0040A764;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        lea    ecx, sDeviceName.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040A788;
	__asm        jmp    near ptr 0x0040A78D;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sDeviceName.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040A7AD;
	__asm        jmp    near ptr 0x0040A7E0;
	__asm        jmp    near ptr 0x0040A7B7;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        lea    ecx, sDeviceName.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040A7DB;
	__asm        jmp    near ptr 0x0040A7E0;
// LINE 1747:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, sDeviceName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x68];
	__asm        call   0x00411B80;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x0040A7FC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x0040A81F;
	__asm        jmp    near ptr 0x0040A824;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   0x0040E5A0;
	__asm        jmp    near ptr 0x0040A84C;
	__asm        jmp    near ptr 0x0040A851;
	__asm        lea    ecx, [ebp-0x68];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0040A887;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040A88C;
// LINE 1748:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sDeviceName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xD4];
// LINE 1751:
	__asm        mov    eax, ds:[0x604C78];
	__asm        mov    nJoystickCount, eax;
	__asm        jmp    near ptr 0x0040A8B9;
// LINE 1752:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0040A8C8;
	__asm        inc    i;
	__asm        mov    eax, nJoystickCount;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0040A9CE;
// LINE 1753:
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A696;
// LINE 1754:
	__asm        jmp    near ptr 0x0040A8EB;
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, szJoystickName[0];
	__asm        push   eax;
	__asm        lea    ecx, sDeviceName.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040A909;
// LINE 1756:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, sDeviceName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   0x00411B80;
	__asm        mov    eax, i;
	__asm        inc    eax;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0040A925;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x0040A948;
	__asm        jmp    near ptr 0x0040A94D;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   0x0040E5A0;
	__asm        jmp    near ptr 0x0040A975;
	__asm        jmp    near ptr 0x0040A97A;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     near ptr 0x0040A9A4;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040A9A9;
// LINE 1757:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sDeviceName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xD4];
// LINE 1758:
	__asm        jmp    near ptr 0x0040A8C5;
// LINE 1759:
	__asm        mov    eax, sDeviceName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sDeviceName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040AA15;
	__asm        mov    eax, sDeviceName.reference;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x0040AA15;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040AA15;
	__asm        jmp    near ptr 0x0040AA1A;
	__asm        cmp    sDeviceName.c_str_ptr, 0;
	__asm        je     near ptr 0x0040AA42;
	__asm        mov    eax, sDeviceName.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040AA47;
	__asm        jmp    near ptr 0x0040AA4C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040aa51
void UserInputWindow::SetupAllCommands() {
	class basic_string<char> sCommandName;
	int32_t i;
	uint32_t nFullStringID;

// LINE 1767:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1068;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1768:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x0040AAB7;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040AAAC;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    sCommandName.reference, eax;
	__asm        jmp    near ptr 0x0040AABE;
	__asm        mov    sCommandName.reference, 0;
	__asm        mov    sCommandName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040AACA;
// LINE 1772:
	__asm        mov    i, 2;
	__asm        jmp    near ptr 0x0040AAD9;
	__asm        inc    i;
	__asm        cmp    i, 0x21;
	__asm        jge    near ptr 0x0040ADFA;
// LINE 1773:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x96;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1774:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        cmp    dword ptr [ebp-0x1064], 0;
	__asm        jne    near ptr 0x0040ABA6;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        jmp    near ptr 0x0040AB58;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sCommandName.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040AB7C;
	__asm        jmp    near ptr 0x0040AB81;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sCommandName.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040ABA1;
	__asm        jmp    near ptr 0x0040ABD4;
	__asm        jmp    near ptr 0x0040ABAB;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sCommandName.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040ABCF;
	__asm        jmp    near ptr 0x0040ABD4;
// LINE 1775:
	__asm        jmp    near ptr 0x0040ABD9;
	__asm        mov    eax, sCommandName.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x0040AC18;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040AC09;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040AC18;
	__asm        jmp    near ptr 0x0040AC1D;
	__asm        mov    eax, sCommandName.reference;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0040AC3D;
	__asm        jmp    near ptr 0x0040AC2F;
	__asm        mov    eax, sCommandName.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0040AC44;
	__asm        mov    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0040AC49;
	__asm        mov    eax, sCommandName.reference;
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0040AC7C;
	__asm        jmp    near ptr 0x0040AC5D;
	__asm        mov    eax, sCommandName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0040AC7C;
	__asm        mov    eax, sCommandName.reference;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040ACB4;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0040ACAD;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, sCommandName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   0x0041E200;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0040ACB4;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0040ACC0;
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0040ACCB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0040ACE5;
	__asm        jmp    near ptr 0x0040ACEA;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x90;
	__asm        call   0x0040EA00;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0040AD09;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x0041B9E0;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x94], 1;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0040AD5C;
	__asm        jmp    near ptr 0x0040AD61;
	__asm        jmp    near ptr 0x0040AD66;
	__asm        jmp    near ptr 0x0040AD6B;
	__asm        mov    eax, [ebp-0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040ADA3;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0040ADA3;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040ADA3;
	__asm        jmp    near ptr 0x0040ADA8;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0040ADCA;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040ADCF;
// LINE 1776:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCommandName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xD4];
// LINE 1777:
	__asm        jmp    near ptr 0x0040AAD6;
// LINE 1778:
	__asm        mov    eax, sCommandName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCommandName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040AE46;
	__asm        mov    eax, sCommandName.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0040AE46;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0040AE30;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040AE41;
	__asm        jmp    near ptr 0x0040AE46;
	__asm        jmp    near ptr 0x0040AE4B;
	__asm        cmp    sCommandName.c_str_ptr, 0;
	__asm        je     near ptr 0x0040AE6D;
	__asm        mov    eax, sCommandName.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040AE72;
	__asm        jmp    near ptr 0x0040AE77;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040ae7c
void UserInputWindow::ReadShortcuts(class list<Shortcut>& shortCutList) {
	long lCurrentCommand;
	class list<Shortcut>::iterator tempShortcutListIterator;

// LINE 1785:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xE0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1786:
	__asm        mov    eax, shortCutList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040AEA3;
	__asm        jmp    near ptr 0x0040AEA8;
// LINE 1789:
	__asm        mov    eax, shortCutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0040AEBB;
	__asm        jmp    near ptr 0x0040AEC0;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    near ptr 0x0040AED6;
	__asm        jmp    near ptr 0x0040AEEA;
	__asm        jmp    near ptr 0x0040AED6;
	__asm        jmp    near ptr 0x0040AEE5;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x0040AEEA;
	__asm        jmp    near ptr 0x0040AEEF;
	__asm        jmp    near ptr 0x0040B458;
	__asm        jmp    near ptr 0x0040AEFE;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0040B458;
// LINE 1790:
	__asm        jmp    near ptr 0x0040AF03;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCurrentCommand, eax;
// LINE 1791:
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        call   0x0048E696;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0040B14D;
// LINE 1792:
	__asm        jmp    near ptr 0x0040AF25;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0040AF48;
	__asm        jmp    near ptr 0x0040AF4D;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0040AF7F;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0040B0BF;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040B0AA;
	__asm        jmp    near ptr 0x0040AF95;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B820;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x48], 0x80;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040AFD9;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0040AFDF;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0040AFE4;
	__asm        jmp    near ptr 0x0040AFE9;
	__asm        jmp    near ptr 0x0040AFEE;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0040AFFB;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0041B890;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x5C], 0x80;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040B063;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0040B069;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0040B06E;
	__asm        jmp    near ptr 0x0040B073;
	__asm        jmp    near ptr 0x0040B078;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x0040B090;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x3C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0040B0BF;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x40], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0040B0C4;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0040B0CF;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0040B0DD;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0040B0F9;
	__asm        mov    edi, [ebp-0x34];
	__asm        mov    esi, [ebp-0x7C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0040B0F9;
	__asm        jmp    near ptr 0x0040B0FE;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0040B13E;
	__asm        jmp    near ptr 0x0040B143;
	__asm        jmp    near ptr 0x0040B148;
// LINE 1793:
	__asm        jmp    near ptr 0x0040B42F;
// LINE 1794:
	__asm        jmp    near ptr 0x0040B152;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x0040B17E;
	__asm        jmp    near ptr 0x0040B183;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0040B1C1;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x0040B373;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0040B355;
	__asm        jmp    near ptr 0x0040B1D7;
	__asm        push   0;
	__asm        push   1;
	__asm        call   0x0041B820;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    dword ptr [ebp-0xA4], 0x80;
	__asm        lea    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    dword ptr [ebp-0xA8], 1;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040B23C;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x0040B248;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x0040B24D;
	__asm        jmp    near ptr 0x0040B252;
	__asm        jmp    near ptr 0x0040B257;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x0040B26A;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   0x0041B890;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xB8], 0x80;
	__asm        lea    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    dword ptr [ebp-0xBC], 1;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0040B2FC;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040B308;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0040B30D;
	__asm        jmp    near ptr 0x0040B312;
	__asm        jmp    near ptr 0x0040B317;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x0040B332;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x98], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x0040B373;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x0040B378;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0040B389;
	__asm        mov    eax, [ebp-0x8C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0040B39D;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x0040B3C2;
	__asm        mov    edi, [ebp-0x90];
	__asm        mov    esi, [ebp-0xD8];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0040B3C2;
	__asm        jmp    near ptr 0x0040B3C7;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x9C], 1;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x0040B425;
	__asm        jmp    near ptr 0x0040B42A;
	__asm        jmp    near ptr 0x0040B42F;
// LINE 1795:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0040B445;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0040B453;
// LINE 1796:
	__asm        jmp    near ptr 0x0040AEA8;
// LINE 1797:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00409804;
// LINE 1798:
	__asm        jmp    near ptr 0x0040B46A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0040b471
void UserInputWindow::WriteShortcutsToPreferenceFile() {
// LINE 1804:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1806:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        call   0x0048C6F1;
	__asm        add    esp, 4;
// LINE 1807:
	__asm        jmp    near ptr 0x0040B493;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040b498
void UserInputWindow::DisplayError(int32_t nErrorType) {
// LINE 1813:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1815:
	__asm        jmp    near ptr 0x0040B4A9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0040b4b0
void ControlDisplayWindow::ControlDisplayWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 1853:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597118];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F300;
// LINE 1854:
	__asm        jmp    near ptr 0x0040B510;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0040b51a
int32_t ControlDisplayWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class TextWindow* tempTextWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 1862:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x410C;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1864:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x0040B598;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040B58A;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0040B59F;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040B5AB;
// LINE 1868:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1871:
	__asm        push   0;
	__asm        push   0xDC;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1872:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10C0], eax;
	__asm        cmp    dword ptr [ebp-0x10C0], 0;
	__asm        jne    near ptr 0x0040B675;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x10C0], eax;
	__asm        jmp    near ptr 0x0040B627;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040B64B;
	__asm        jmp    near ptr 0x0040B650;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040B670;
	__asm        jmp    near ptr 0x0040B7C5;
	__asm        jmp    near ptr 0x0040B67A;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10D4], eax;
	__asm        cmp    dword ptr [ebp-0x10D4], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040B6D4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10D0], eax;
	__asm        mov    eax, [ebp-0x10D0];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040B6C5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040B6D4;
	__asm        jmp    near ptr 0x0040B6D9;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040B70A;
	__asm        cmp    dword ptr [ebp-0x10D4], 0;
	__asm        je     near ptr 0x0040B76B;
	__asm        jmp    near ptr 0x0040B6F8;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x10D4];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0040B76B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C8], eax;
	__asm        cmp    dword ptr [ebp-0x10C8], 0;
	__asm        je     near ptr 0x0040B74B;
	__asm        mov    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x10C4], eax;
	__asm        jmp    near ptr 0x0040B755;
	__asm        mov    dword ptr [ebp-0x10C4], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x10C4];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0040B7AA;
	__asm        cmp    dword ptr [ebp-0x10D4], 0;
	__asm        je     near ptr 0x0040B7AA;
	__asm        jmp    near ptr 0x0040B77D;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10CC], eax;
	__asm        mov    eax, [ebp-0x10D4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10BC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10CC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040B7AA;
	__asm        mov    eax, [ebp-0x10D4];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040B7BB;
	__asm        jmp    near ptr 0x0040B7C0;
	__asm        jmp    near ptr 0x0040B7C5;
// LINE 1873:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0040B82A;
	__asm        jmp    near ptr 0x0040B7E4;
	__asm        mov    dword ptr [ebp-0x28], 0x70;
	__asm        mov    dword ptr [ebp-0x24], 0x28;
	__asm        mov    dword ptr [ebp-0x20], 0x18E;
	__asm        mov    dword ptr [ebp-0x1C], 0x42;
	__asm        jmp    near ptr 0x0040B805;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x004ACDA2;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0040B831;
	__asm        mov    tempTextWindow, 0;
// LINE 1874:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1875:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1C;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1876:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1877:
	__asm        push   0x5C2794;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1878:
	__asm        jmp    near ptr 0x0040B878;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0x3C];
// LINE 1880:
	__asm        push   0;
	__asm        push   0xDF;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1881:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20D8], eax;
	__asm        cmp    dword ptr [ebp-0x20D8], 0;
	__asm        jne    near ptr 0x0040B95D;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20D8], eax;
	__asm        jmp    near ptr 0x0040B90F;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040B933;
	__asm        jmp    near ptr 0x0040B938;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040B958;
	__asm        jmp    near ptr 0x0040BAAD;
	__asm        jmp    near ptr 0x0040B962;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20EC], eax;
	__asm        cmp    dword ptr [ebp-0x20EC], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040B9BC;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x20E8], eax;
	__asm        mov    eax, [ebp-0x20E8];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040B9AD;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040B9BC;
	__asm        jmp    near ptr 0x0040B9C1;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040B9F2;
	__asm        cmp    dword ptr [ebp-0x20EC], 0;
	__asm        je     near ptr 0x0040BA53;
	__asm        jmp    near ptr 0x0040B9E0;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x20EC];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0040BA53;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20E0], eax;
	__asm        cmp    dword ptr [ebp-0x20E0], 0;
	__asm        je     near ptr 0x0040BA33;
	__asm        mov    eax, [ebp-0x20EC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20E0];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x20DC], eax;
	__asm        jmp    near ptr 0x0040BA3D;
	__asm        mov    dword ptr [ebp-0x20DC], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x20DC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0040BA92;
	__asm        cmp    dword ptr [ebp-0x20EC], 0;
	__asm        je     near ptr 0x0040BA92;
	__asm        jmp    near ptr 0x0040BA65;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20E4], eax;
	__asm        mov    eax, [ebp-0x20EC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20E4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040BA92;
	__asm        mov    eax, [ebp-0x20EC];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040BAA3;
	__asm        jmp    near ptr 0x0040BAA8;
	__asm        jmp    near ptr 0x0040BAAD;
// LINE 1882:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0040BB12;
	__asm        jmp    near ptr 0x0040BACC;
	__asm        mov    dword ptr [ebp-0x3C], 0x40;
	__asm        mov    dword ptr [ebp-0x38], 0x62;
	__asm        mov    dword ptr [ebp-0x34], 0xDC;
	__asm        mov    dword ptr [ebp-0x30], 0x74;
	__asm        jmp    near ptr 0x0040BAED;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x004ACDA2;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0040BB19;
	__asm        mov    tempTextWindow, 0;
// LINE 1883:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1884:
	__asm        mov    byte ptr [ebp-0x40], 0x40;
	__asm        mov    byte ptr [ebp-0x3F], 0;
	__asm        mov    byte ptr [ebp-0x3E], 0;
	__asm        jmp    near ptr 0x0040BB35;
	__asm        lea    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1885:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1886:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0x28];
// LINE 1888:
	__asm        push   0;
	__asm        push   0xE0;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1889:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30F0], eax;
	__asm        cmp    dword ptr [ebp-0x30F0], 0;
	__asm        jne    near ptr 0x0040BC27;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30F0], eax;
	__asm        jmp    near ptr 0x0040BBD9;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040BBFD;
	__asm        jmp    near ptr 0x0040BC02;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040BC22;
	__asm        jmp    near ptr 0x0040BD77;
	__asm        jmp    near ptr 0x0040BC2C;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3104], eax;
	__asm        cmp    dword ptr [ebp-0x3104], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040BC86;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x3100], eax;
	__asm        mov    eax, [ebp-0x3100];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040BC77;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040BC86;
	__asm        jmp    near ptr 0x0040BC8B;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040BCBC;
	__asm        cmp    dword ptr [ebp-0x3104], 0;
	__asm        je     near ptr 0x0040BD1D;
	__asm        jmp    near ptr 0x0040BCAA;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x3104];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0040BD1D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30F8], eax;
	__asm        cmp    dword ptr [ebp-0x30F8], 0;
	__asm        je     near ptr 0x0040BCFD;
	__asm        mov    eax, [ebp-0x3104];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30F8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x30F4], eax;
	__asm        jmp    near ptr 0x0040BD07;
	__asm        mov    dword ptr [ebp-0x30F4], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x30F4];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0040BD5C;
	__asm        cmp    dword ptr [ebp-0x3104], 0;
	__asm        je     near ptr 0x0040BD5C;
	__asm        jmp    near ptr 0x0040BD2F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30FC], eax;
	__asm        mov    eax, [ebp-0x3104];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30EC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30FC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040BD5C;
	__asm        mov    eax, [ebp-0x3104];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040BD6D;
	__asm        jmp    near ptr 0x0040BD72;
	__asm        jmp    near ptr 0x0040BD77;
// LINE 1890:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0040BDDC;
	__asm        jmp    near ptr 0x0040BD96;
	__asm        mov    dword ptr [ebp-0x54], 0xDC;
	__asm        mov    dword ptr [ebp-0x50], 0x62;
	__asm        mov    dword ptr [ebp-0x4C], 0x1BE;
	__asm        mov    dword ptr [ebp-0x48], 0x74;
	__asm        jmp    near ptr 0x0040BDB7;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   0x004ACDA2;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0040BDE3;
	__asm        mov    tempTextWindow, 0;
// LINE 1891:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1892:
	__asm        mov    byte ptr [ebp-0x58], 0x40;
	__asm        mov    byte ptr [ebp-0x57], 0;
	__asm        mov    byte ptr [ebp-0x56], 0;
	__asm        jmp    near ptr 0x0040BDFF;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1893:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1894:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0x28];
// LINE 1897:
	__asm        push   0xCC;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x0040BE9E;
	__asm        jmp    near ptr 0x0040BE51;
	__asm        mov    dword ptr [ebp-0x6C], 0x40;
	__asm        mov    dword ptr [ebp-0x68], 0x74;
	__asm        mov    dword ptr [ebp-0x64], 0xDC;
	__asm        mov    dword ptr [ebp-0x60], 0x146;
	__asm        jmp    near ptr 0x0040BE72;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x004B4462;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0040BEAB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1898:
	__asm        mov    byte ptr [ebp-0x70], 0xEF;
	__asm        mov    byte ptr [ebp-0x6F], 0xC5;
	__asm        mov    byte ptr [ebp-0x6E], 0xC5;
	__asm        jmp    near ptr 0x0040BEBC;
	__asm        mov    byte ptr [ebp-0x74], 0x40;
	__asm        mov    byte ptr [ebp-0x73], 0;
	__asm        mov    byte ptr [ebp-0x72], 0;
	__asm        jmp    near ptr 0x0040BECD;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x124];
// LINE 1899:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1900:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x128];
// LINE 1901:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xD8];
// LINE 1902:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xBD;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x120];
// LINE 1904:
	__asm        push   0xCC;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0040BFD6;
	__asm        jmp    near ptr 0x0040BF80;
	__asm        mov    dword ptr [ebp-0x88], 0xDC;
	__asm        mov    dword ptr [ebp-0x84], 0x74;
	__asm        mov    dword ptr [ebp-0x80], 0x1BE;
	__asm        mov    dword ptr [ebp-0x7C], 0x146;
	__asm        jmp    near ptr 0x0040BFA7;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   0x004B4462;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x0040BFE3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1905:
	__asm        mov    byte ptr [ebp-0x8C], 0xEF;
	__asm        mov    byte ptr [ebp-0x8B], 0xC5;
	__asm        mov    byte ptr [ebp-0x8A], 0xC5;
	__asm        jmp    near ptr 0x0040BFFD;
	__asm        mov    byte ptr [ebp-0x90], 0x40;
	__asm        mov    byte ptr [ebp-0x8F], 0;
	__asm        mov    byte ptr [ebp-0x8E], 0;
	__asm        jmp    near ptr 0x0040C017;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x124];
// LINE 1906:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1907:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x128];
// LINE 1908:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xD8];
// LINE 1909:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xBD;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x120];
// LINE 1910:
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x12C];
// LINE 1913:
	__asm        push   0;
	__asm        push   0xDD;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1914:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4108], eax;
	__asm        cmp    dword ptr [ebp-0x4108], 0;
	__asm        jne    near ptr 0x0040C190;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4108], eax;
	__asm        jmp    near ptr 0x0040C142;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040C166;
	__asm        jmp    near ptr 0x0040C16B;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040C18B;
	__asm        jmp    near ptr 0x0040C1BE;
	__asm        jmp    near ptr 0x0040C195;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4104];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040C1B9;
	__asm        jmp    near ptr 0x0040C1BE;
// LINE 1915:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x0040C23E;
	__asm        jmp    near ptr 0x0040C1E3;
	__asm        mov    dword ptr [ebp-0xA4], 0x162;
	__asm        mov    dword ptr [ebp-0xA0], 0x16C;
	__asm        mov    dword ptr [ebp-0x9C], 0x163;
	__asm        mov    dword ptr [ebp-0x98], 0x16D;
	__asm        jmp    near ptr 0x0040C210;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0040C245;
	__asm        mov    tempButtonWindow, 0;
// LINE 1916:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1917:
	__asm        push   0x5C2794;
	__asm        push   0x5C2790;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1918:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1920:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1921:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 1922:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1923:
	__asm        mov    dword ptr [ebp-0xA8], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040C30A;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x0040C30A;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0040C2F1;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040C305;
	__asm        jmp    near ptr 0x0040C30A;
	__asm        jmp    near ptr 0x0040C30F;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x0040C33D;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040C342;
	__asm        mov    eax, [ebp-0xA8];
	__asm        jmp    near ptr 0x0040C34D;
// LINE 1924:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0040c352
int32_t ControlDisplayWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1931:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1932:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0040C372;
// LINE 1933:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0040C5AA;
// LINE 1936:
	__asm        cmp    lWindowID, 3;
	__asm        je     near ptr 0x0040C386;
	__asm        cmp    lWindowID, 4;
	__asm        jne    near ptr 0x0040C55C;
// LINE 1940:
	__asm        cmp    lMessage, 0x10002;
	__asm        jne    near ptr 0x0040C471;
// LINE 1941:
	__asm        mov    eax, this;
	__asm        mov    ecx, gwSource;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jne    near ptr 0x0040C402;
// LINE 1943:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x118];
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x118];
	__asm        cmp    ebx, eax;
	__asm        je     near ptr 0x0040C3FD;
// LINE 1944:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x118];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x110];
// LINE 1946:
	__asm        jmp    near ptr 0x0040C46C;
	__asm        mov    eax, this;
	__asm        mov    ecx, gwSource;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jne    near ptr 0x0040C46C;
// LINE 1948:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x118];
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x118];
	__asm        cmp    ebx, eax;
	__asm        je     near ptr 0x0040C46C;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0x118];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x110];
// LINE 1952:
	__asm        jmp    near ptr 0x0040C557;
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x0040C557;
// LINE 1953:
	__asm        mov    eax, this;
	__asm        mov    ecx, gwSource;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jne    near ptr 0x0040C4ED;
// LINE 1955:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xE0];
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xE0];
	__asm        cmp    ebx, eax;
	__asm        je     near ptr 0x0040C4E8;
// LINE 1956:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xE0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xDC];
// LINE 1958:
	__asm        jmp    near ptr 0x0040C557;
	__asm        mov    eax, this;
	__asm        mov    ecx, gwSource;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jne    near ptr 0x0040C557;
// LINE 1960:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xE0];
	__asm        mov    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xE0];
	__asm        cmp    ebx, eax;
	__asm        je     near ptr 0x0040C557;
// LINE 1961:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xE0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xDC];
// LINE 1966:
	__asm        jmp    near ptr 0x0040C5A0;
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x0040C5A0;
// LINE 1967:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0040C595;
// LINE 1968:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1969:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 1972:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0040C5AA;
// LINE 1973:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0040c5b1
void ControlDisplayWindow::ReadShortcuts(class list<Shortcut>* addedShortcutList) {
	class list<Shortcut>::iterator shortcutIterator;
	class basic_string<char> sCurrentCommand;
	class set<long,less<long>> tempLongSet;
	int32_t nFirstShowableCommandIndex;
	class rb_tree<long,long,ident<long,long>,less<long>>::const_iterator tempLongSetIterator;
	class basic_string<char> sCurrentKeys;
	struct Shortcut* tempShortcut;
	int32_t nTempForDebugging;
	int32_t nKeyCountForCommand;
	int32_t nLastShowableCommandIndex;

// LINE 1982:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xDC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1983:
	__asm        jmp    near ptr 0x0040C5C8;
// LINE 1985:
	__asm        mov    tempLongSet.t.node_count, 0;
	__asm        mov    tempLongSet.t.insert_always, 0;
	__asm        mov    al, [ebp-0x40];
	__asm        mov    tempLongSet.t.key_compare.<less<long>+0x00>, al;
	__asm        lea    ecx, tempLongSet.t.header;
	__asm        call   0x0040ED40;
	__asm        jmp    near ptr 0x0040C5E9;
	__asm        jmp    near ptr 0x0040C5EE;
// LINE 1986:
	__asm        jmp    near ptr 0x0040C5F3;
// LINE 1988:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA0], eax;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     near ptr 0x0040C65B;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040C64D;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    sCurrentCommand.reference, eax;
	__asm        jmp    near ptr 0x0040C662;
	__asm        mov    sCurrentCommand.reference, 0;
	__asm        mov    sCurrentCommand.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040C66E;
// LINE 1989:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     near ptr 0x0040C6D6;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040C6C8;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    sCurrentKeys.reference, eax;
	__asm        jmp    near ptr 0x0040C6DD;
	__asm        mov    sCurrentKeys.reference, 0;
	__asm        mov    sCurrentKeys.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040C6E9;
// LINE 1993:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 1995:
	__asm        mov    nFirstShowableCommandIndex, 1;
// LINE 1996:
	__asm        mov    nLastShowableCommandIndex, 0x39;
// LINE 2000:
	__asm        jmp    near ptr 0x0040C709;
	__asm        mov    eax, addedShortcutList;
	__asm        mov    eax, [eax+4];
	__asm        mov    nTempForDebugging, eax;
// LINE 2001:
	__asm        mov    eax, addedShortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0040C72D;
	__asm        jmp    near ptr 0x0040C732;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    shortcutIterator.node, eax;
// LINE 2002:
	__asm        mov    eax, addedShortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0040C751;
	__asm        jmp    near ptr 0x0040C756;
	__asm        mov    eax, shortcutIterator.node;
	__asm        cmp    [ebp-0x48], eax;
	__asm        jne    near ptr 0x0040C76C;
	__asm        jmp    near ptr 0x0040C783;
	__asm        jmp    near ptr 0x0040C76C;
	__asm        jmp    near ptr 0x0040C77E;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        jne    near ptr 0x0040C783;
	__asm        jmp    near ptr 0x0040C788;
	__asm        jmp    near ptr 0x0040C83F;
	__asm        jmp    near ptr 0x0040C79A;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x0040C83F;
// LINE 2004:
	__asm        jmp    near ptr 0x0040C79F;
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    ecx, nFirstShowableCommandIndex;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jl     near ptr 0x0040C816;
	__asm        jmp    near ptr 0x0040C7B3;
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    ecx, nLastShowableCommandIndex;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jg     near ptr 0x0040C816;
// LINE 2009:
	__asm        jmp    near ptr 0x0040C7C7;
	__asm        mov    eax, shortcutIterator.node;
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        lea    ecx, tempLongSet.t.header;
	__asm        call   0x0041BE10;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x0040C7FA;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0040C811;
	__asm        jmp    near ptr 0x0040C816;
// LINE 2011:
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    shortcutIterator.node, eax;
	__asm        jmp    near ptr 0x0040C82C;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0040C83A;
// LINE 2012:
	__asm        jmp    near ptr 0x0040C738;
// LINE 2014:
	__asm        jmp    near ptr 0x0040C844;
	__asm        jmp    near ptr 0x0040C849;
	__asm        mov    eax, tempLongSet.t.header;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0040C863;
	__asm        jmp    near ptr 0x0040C868;
	__asm        jmp    near ptr 0x0040C86D;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    tempLongSetIterator.node, eax;
// LINE 2015:
	__asm        mov    eax, tempLongSet.t.header;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0040C884;
	__asm        jmp    near ptr 0x0040C889;
	__asm        jmp    near ptr 0x0040C88E;
	__asm        mov    eax, tempLongSetIterator.node;
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jne    near ptr 0x0040C8A4;
	__asm        jmp    near ptr 0x0040C8B8;
	__asm        jmp    near ptr 0x0040C8A4;
	__asm        jmp    near ptr 0x0040C8B3;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x0040C8B8;
	__asm        jmp    near ptr 0x0040C8BD;
	__asm        jmp    near ptr 0x0040CA72;
	__asm        jmp    near ptr 0x0040C8CF;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x0040CA72;
// LINE 2016:
	__asm        jmp    near ptr 0x0040C8D4;
	__asm        jmp    near ptr 0x0040C8D9;
	__asm        mov    eax, tempLongSetIterator.node;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        lea    eax, sCurrentCommand.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040CB52;
// LINE 2017:
	__asm        mov    eax, addedShortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0040C90A;
	__asm        jmp    near ptr 0x0040C90F;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    shortcutIterator.node, eax;
// LINE 2018:
	__asm        mov    nKeyCountForCommand, 0;
// LINE 2019:
	__asm        mov    eax, addedShortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x0040C92F;
	__asm        jmp    near ptr 0x0040C934;
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    shortcutIterator.node, eax;
	__asm        jne    near ptr 0x0040C94A;
	__asm        jmp    near ptr 0x0040C95E;
	__asm        jmp    near ptr 0x0040C94A;
	__asm        jmp    near ptr 0x0040C959;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        jne    near ptr 0x0040C95E;
	__asm        jmp    near ptr 0x0040C963;
	__asm        jmp    near ptr 0x0040C9F6;
	__asm        jmp    near ptr 0x0040C972;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0040C9F6;
// LINE 2020:
	__asm        jmp    near ptr 0x0040C977;
	__asm        mov    eax, shortcutIterator.node;
	__asm        add    eax, 8;
	__asm        mov    tempShortcut, eax;
// LINE 2022:
	__asm        jmp    near ptr 0x0040C985;
	__asm        jmp    near ptr 0x0040C98A;
	__asm        mov    eax, tempLongSetIterator.node;
	__asm        mov    ecx, tempShortcut;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x0040C9CD;
	__asm        mov    eax, tempShortcut;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x0040C9CD;
// LINE 2024:
	__asm        mov    eax, nKeyCountForCommand;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, tempShortcut;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, sCurrentKeys.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0040D24A;
// LINE 2025:
	__asm        add    nKeyCountForCommand, 1;
// LINE 2027:
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, shortcutIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    shortcutIterator.node, eax;
	__asm        jmp    near ptr 0x0040C9E3;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x0040C9F1;
// LINE 2028:
	__asm        jmp    near ptr 0x0040C91C;
// LINE 2029:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentCommand.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2030:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentKeys.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2031:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentCommand.c_str_ptr;
	__asm        call   0x004157D0;
// LINE 2032:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentKeys.c_str_ptr;
	__asm        call   0x004157D0;
// LINE 2033:
	__asm        mov    eax, tempLongSetIterator.node;
	__asm        mov    [ebp-0xC8], eax;
	__asm        lea    ecx, tempLongSetIterator.node;
	__asm        call   0x0040EC60;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0040CA6D;
// LINE 2034:
	__asm        jmp    near ptr 0x0040C873;
// LINE 2035:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 2036:
	__asm        lea    ecx, sCurrentKeys.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sCurrentKeys.c_str_ptr, 0;
	__asm        je     near ptr 0x0040CAB5;
	__asm        mov    eax, sCurrentKeys.c_str_ptr;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CABA;
	__asm        mov    eax, sCurrentCommand.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentCommand.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040CB01;
	__asm        mov    eax, sCurrentCommand.reference;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x0040CB01;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040CB01;
	__asm        jmp    near ptr 0x0040CB06;
	__asm        cmp    sCurrentCommand.c_str_ptr, 0;
	__asm        je     near ptr 0x0040CB34;
	__asm        mov    eax, sCurrentCommand.c_str_ptr;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CB39;
	__asm        jmp    near ptr 0x0040CB3E;
	__asm        lea    ecx, tempLongSet.t.header;
	__asm        call   0x0040F310;
	__asm        jmp    near ptr 0x0040CB4B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0040cb52
void ControlDisplayWindow::GetCommandString(class basic_string<char>& sCommand, long lCommand) {
	uint32_t nFullStringID;

// LINE 2043:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1070;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2046:
	__asm        push   0;
	__asm        mov    eax, lCommand;
	__asm        add    eax, 0x96;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2047:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        cmp    dword ptr [ebp-0x1008], 0;
	__asm        jne    near ptr 0x0040CF9C;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1008], eax;
	__asm        jmp    near ptr 0x0040CBDD;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040CC37;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1018], eax;
	__asm        mov    eax, [ebp-0x1018];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CC28;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CC37;
	__asm        jmp    near ptr 0x0040CC3C;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040CC73;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x0040CD24;
	__asm        jmp    near ptr 0x0040CC5E;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0040CD24;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        je     near ptr 0x0040CCB4;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1010];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x100C], eax;
	__asm        jmp    near ptr 0x0040CCBE;
	__asm        mov    dword ptr [ebp-0x100C], 0;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040CD0E;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        mov    [ebp-0x101C], eax;
	__asm        cmp    dword ptr [ebp-0x101C], 0;
	__asm        je     near ptr 0x0040CD0E;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x101C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040CD0E;
	__asm        jmp    near ptr 0x0040CD13;
	__asm        mov    eax, [ebp-0x100C];
	__asm        mov    ecx, sCommand;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040CD66;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x0040CD66;
	__asm        jmp    near ptr 0x0040CD36;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1014], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1014];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040CD66;
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, sCommand;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040CD7A;
	__asm        jmp    near ptr 0x0040CD7F;
	__asm        jmp    near ptr 0x0040CD84;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        jmp    near ptr 0x0040CD9C;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1044];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0040CDEE;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1038], eax;
	__asm        mov    eax, [ebp-0x1038];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CDDF;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CDEE;
	__asm        jmp    near ptr 0x0040CDF3;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040CE2B;
	__asm        jmp    near ptr 0x0040CE08;
	__asm        jmp    near ptr 0x0040CE0D;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sCommand;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1044];
	__asm        jae    near ptr 0x0040CF30;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x102C], eax;
	__asm        cmp    dword ptr [ebp-0x102C], 0;
	__asm        je     near ptr 0x0040CEC5;
	__asm        jmp    near ptr 0x0040CE4D;
	__asm        jmp    near ptr 0x0040CE52;
	__asm        jmp    near ptr 0x0040CE57;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0040CE7F;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x0040CE8E;
	__asm        jmp    near ptr 0x0040CE8E;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        jmp    near ptr 0x0040CE8E;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x102C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1028], eax;
	__asm        jmp    near ptr 0x0040CECF;
	__asm        mov    dword ptr [ebp-0x1028], 0;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040CF1F;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        mov    [ebp-0x103C], eax;
	__asm        cmp    dword ptr [ebp-0x103C], 0;
	__asm        je     near ptr 0x0040CF1F;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x103C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0040CF1F;
	__asm        jmp    near ptr 0x0040CF24;
	__asm        mov    eax, [ebp-0x1028];
	__asm        mov    ecx, sCommand;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x0040CF7E;
	__asm        jmp    near ptr 0x0040CF42;
	__asm        jmp    near ptr 0x0040CF47;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sCommand;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1030], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1030];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040CF7E;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sCommand;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040CF92;
	__asm        jmp    near ptr 0x0040CF97;
	__asm        jmp    near ptr 0x0040D23E;
	__asm        jmp    near ptr 0x0040CFA1;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040CFFB;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CFEC;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040CFFB;
	__asm        jmp    near ptr 0x0040D000;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0040D037;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0040D1DE;
	__asm        jmp    near ptr 0x0040D022;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x106C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0040D1DE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0040D157;
	__asm        cmp    dword ptr [ebp-0x106C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0040D099;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D08A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D099;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0040D128;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1060], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040D123;
	__asm        jmp    near ptr 0x0040D134;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0040D146;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x0040D161;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0040D1C8;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    [ebp-0x1058], eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x0040D1C8;
	__asm        mov    ecx, [ebp-0x1058];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0040D1AF;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D1C3;
	__asm        jmp    near ptr 0x0040D1C8;
	__asm        jmp    near ptr 0x0040D1CD;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    ecx, sCommand;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040D220;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0040D220;
	__asm        jmp    near ptr 0x0040D1F0;
	__asm        mov    eax, sCommand;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1004];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0040D220;
	__asm        mov    eax, [ebp-0x106C];
	__asm        mov    ecx, sCommand;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0040D234;
	__asm        jmp    near ptr 0x0040D239;
	__asm        jmp    near ptr 0x0040D23E;
// LINE 2048:
	__asm        jmp    near ptr 0x0040D243;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0040d24a
void ControlDisplayWindow::AppendKeysString(class basic_string<char>& sKeys, long lKey, long lModifiers, int32_t nKeyIndex) {
	class basic_string<char> sModifier;
	uint32_t nFullStringID;
	int32_t bAtLeastOneModifierFoundAlready;
	class basic_string<char> sSeparator;
	class basic_string<char> sKey;

// LINE 2054:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x2058;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2055:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0040D287;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x0041E2D0;
	__asm        mov    sSeparator.reference, eax;
	__asm        jmp    near ptr 0x0040D28E;
	__asm        mov    sSeparator.reference, 0;
	__asm        mov    sSeparator.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040D29A;
// LINE 2056:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0040D2C1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041E2D0;
	__asm        mov    sModifier.reference, eax;
	__asm        jmp    near ptr 0x0040D2C8;
	__asm        mov    sModifier.reference, 0;
	__asm        mov    sModifier.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040D2D4;
// LINE 2057:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0040D2FB;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x0041E2D0;
	__asm        mov    sKey.reference, eax;
	__asm        jmp    near ptr 0x0040D302;
	__asm        mov    sKey.reference, 0;
	__asm        mov    sKey.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0040D30E;
// LINE 2061:
	__asm        cmp    nKeyIndex, 0;
	__asm        je     near ptr 0x0040D452;
// LINE 2062:
	__asm        push   0;
	__asm        push   0xE1;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2063:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        cmp    dword ptr [ebp-0x1050], 0;
	__asm        jne    near ptr 0x0040D3D7;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0040D389;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040D3AD;
	__asm        jmp    near ptr 0x0040D3B2;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D3D2;
	__asm        jmp    near ptr 0x0040D405;
	__asm        jmp    near ptr 0x0040D3DC;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040D400;
	__asm        jmp    near ptr 0x0040D405;
// LINE 2064:
	__asm        jmp    near ptr 0x0040D40A;
	__asm        jmp    near ptr 0x0040D40F;
	__asm        mov    eax, sSeparator.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0040D42E;
	__asm        mov    eax, sSeparator.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0040D43A;
	__asm        jmp    near ptr 0x0040D43A;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0040D43A;
	__asm        mov    eax, sSeparator.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D452;
// LINE 2068:
	__asm        push   0;
	__asm        push   0xE2;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2069:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2054], eax;
	__asm        cmp    dword ptr [ebp-0x2054], 0;
	__asm        jne    near ptr 0x0040D511;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2054], eax;
	__asm        jmp    near ptr 0x0040D4C3;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040D4E7;
	__asm        jmp    near ptr 0x0040D4EC;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D50C;
	__asm        jmp    near ptr 0x0040D53F;
	__asm        jmp    near ptr 0x0040D516;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2050];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0040D53A;
	__asm        jmp    near ptr 0x0040D53F;
// LINE 2070:
	__asm        mov    bAtLeastOneModifierFoundAlready, 0;
// LINE 2072:
	__asm        test   reinterpret_cast<uint8_t>(lModifiers), 2;
	__asm        je     near ptr 0x0040D5C6;
// LINE 2073:
	__asm        mov    bAtLeastOneModifierFoundAlready, 1;
// LINE 2074:
	__asm        push   0;
	__asm        push   0xE3;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2075:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        lea    eax, sModifier.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0040F710;
	__asm        add    esp, 8;
// LINE 2076:
	__asm        jmp    near ptr 0x0040D57E;
	__asm        jmp    near ptr 0x0040D583;
	__asm        mov    eax, sModifier.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0040D5A2;
	__asm        mov    eax, sModifier.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0040D5AE;
	__asm        jmp    near ptr 0x0040D5AE;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0040D5AE;
	__asm        mov    eax, sModifier.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D5C6;
// LINE 2079:
	__asm        test   reinterpret_cast<uint8_t>(lModifiers), 4;
	__asm        je     near ptr 0x0040D647;
// LINE 2080:
	__asm        cmp    bAtLeastOneModifierFoundAlready, 0;
	__asm        je     near ptr 0x0040D5FC;
// LINE 2081:
	__asm        jmp    near ptr 0x0040D5DF;
	__asm        mov    eax, sSeparator.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D5FC;
// LINE 2082:
	__asm        mov    bAtLeastOneModifierFoundAlready, 1;
// LINE 2083:
	__asm        push   0;
	__asm        push   0xE4;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2084:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        lea    eax, sModifier.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0040F710;
	__asm        add    esp, 8;
// LINE 2085:
	__asm        jmp    near ptr 0x0040D62A;
	__asm        mov    eax, sModifier.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sModifier.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D647;
// LINE 2088:
	__asm        test   reinterpret_cast<uint8_t>(lModifiers), 1;
	__asm        je     near ptr 0x0040D6C8;
// LINE 2089:
	__asm        cmp    bAtLeastOneModifierFoundAlready, 0;
	__asm        je     near ptr 0x0040D67D;
// LINE 2090:
	__asm        jmp    near ptr 0x0040D660;
	__asm        mov    eax, sSeparator.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D67D;
// LINE 2091:
	__asm        mov    bAtLeastOneModifierFoundAlready, 1;
// LINE 2092:
	__asm        push   0;
	__asm        push   0xE5;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2093:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        lea    eax, sModifier.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0040F710;
	__asm        add    esp, 8;
// LINE 2094:
	__asm        jmp    near ptr 0x0040D6AB;
	__asm        mov    eax, sModifier.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sModifier.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D6C8;
// LINE 2097:
	__asm        cmp    bAtLeastOneModifierFoundAlready, 0;
	__asm        je     near ptr 0x0040D6F4;
// LINE 2098:
	__asm        jmp    near ptr 0x0040D6D7;
	__asm        mov    eax, sSeparator.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D6F4;
// LINE 2099:
	__asm        push   0;
	__asm        mov    eax, lKey;
	__asm        add    eax, 0x2BC;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2100:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        lea    eax, sKey.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0040F710;
	__asm        add    esp, 8;
// LINE 2101:
	__asm        jmp    near ptr 0x0040D71F;
	__asm        mov    eax, sKey.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sKey.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, sKeys;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0040D73C;
// LINE 2102:
	__asm        lea    ecx, sKey.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sKey.c_str_ptr, 0;
	__asm        je     near ptr 0x0040D766;
	__asm        mov    eax, sKey.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D76B;
	__asm        lea    ecx, sModifier.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sModifier.c_str_ptr, 0;
	__asm        je     near ptr 0x0040D795;
	__asm        mov    eax, sModifier.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D79A;
	__asm        lea    ecx, sSeparator.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sSeparator.c_str_ptr, 0;
	__asm        je     near ptr 0x0040D7C4;
	__asm        mov    eax, sSeparator.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0040D7C9;
	__asm        jmp    near ptr 0x0040D7CE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}



// Contribution: 1:0000c7e0-0000c800 Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000c810-0000c830 Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000c840-0000c8a6 Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000c8b0-0000c91b Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000c920-0000cac7 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040d920
// list<KeyColors>::add_new_buffer



// Contribution: 1:0000cad0-0000cb08 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0040dad0
// KeyboardWindow::`scalar deleting destructor'



// Contribution: 1:0000cb10-0000cb4b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040db10
// list<HotSpot>::iterator::operator++



// Contribution: 1:0000cb50-0000cc16 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040db50
// list<HotSpot>::erase



// Contribution: 1:0000cc20-0000cc79 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040dc20
// list<KeyColors>::erase



// Contribution: 1:0000cc80-0000cc9d Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000cca0-0000ccd8 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0040dca0
// JoystickWindow::`scalar deleting destructor'



// Contribution: 1:0000cce0-0000ce87 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040dce0
// list<Shortcut>::add_new_buffer



// Contribution: 1:0000ce90-0000d37a Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0040de90
// UserInputWindow::`scalar deleting destructor'



// Contribution: 1:0000d380-0000d3bb Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040e380
// list<Shortcut>::iterator::operator++



// Contribution: 1:0000d3c0-0000d419 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040e3c0
// list<Shortcut>::erase



// Contribution: 1:0000d420-0000d45b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040e420
// list<StringIDAssociation>::iterator::operator++



// Contribution: 1:0000d460-0000d595 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040e460
// list<StringIDAssociation>::erase



// Contribution: 1:0000d5a0-0000d9f1 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040e5a0
// list<StringIDAssociation>::insert



// Contribution: 1:0000da00-0000dc15 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040ea00
// list<StringIDAssociation>::get_node



// Contribution: 1:0000dc20-0000dc5d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0040ec20
// ControlDisplayWindow::`scalar deleting destructor'



// Contribution: 1:0000dc60-0000dd37 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040ec60
// rb_tree<long,long,ident<long,long>,less<long>>::const_iterator::operator++



// Contribution: 1:0000dd40-0000e303 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040ed40
// rb_tree<long,long,ident<long,long>,less<long>>::init



// Contribution: 1:0000e310-0000e62b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040f310
// rb_tree<long,long,ident<long,long>,less<long>>::~rb_tree<long,long,ident<long,long>,less<long>>



// Contribution: 1:0000e630-0000e707 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040f630
// rb_tree<long,long,ident<long,long>,less<long>>::iterator::operator++



// Contribution: 1:0000e710-0000ee53 Module: 75, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0000ee60-0000ee7d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040fe60
// basic_string<char>::point



// Contribution: 1:0000ee80-0000ee9e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040fe80
// basic_string<char>::len



// Contribution: 1:0000eea0-0000eebe Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040fea0
// basic_string<char>::ref_count



// Contribution: 1:0000eec0-0000eed6 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040fec0
// basic_string<char>::eos



// Contribution: 1:0000eee0-0000f129 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0040fee0
// basic_string<char>::assign_str



// Contribution: 1:0000f130-0000f3c1 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00410130
// basic_string<char>::append_str



// Contribution: 1:0000f3d0-0000f7ad Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004103d0
// basic_string<char>::insert_str



// Contribution: 1:0000f7b0-0000fc3a Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004107b0
// basic_string<char>::replace_str



// Contribution: 1:0000fc40-0000fd77 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00410c40
// basic_string<char>::compare_str



// Contribution: 1:0000fd80-0000ff88 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00410d80
// basic_string<char>::find_str



// Contribution: 1:0000ff90-00010267 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00410f90
// basic_string<char>::rfind_str



// Contribution: 1:00010270-00010383 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411270
// basic_string<char>::find_first_of_str



// Contribution: 1:00010390-000104ce Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411390
// basic_string<char>::find_last_of_str



// Contribution: 1:000104d0-000105cc Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004114d0
// basic_string<char>::find_first_not_of_str



// Contribution: 1:000105d0-00010715 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004115d0
// basic_string<char>::find_last_not_of_str



// Contribution: 1:00010720-00010855 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411720
// basic_string<char>::basic_string<char>



// Contribution: 1:00010860-00010982 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411860
// basic_string<char>::basic_string<char>



// Contribution: 1:00010990-00010a6d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411990
// basic_string<char>::basic_string<char>



// Contribution: 1:00010a70-00010b7b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411a70
// basic_string<char>::basic_string<char>



// Contribution: 1:00010b80-00010d50 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411b80
// basic_string<char>::basic_string<char>



// Contribution: 1:00010d60-00010ed7 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411d60
// basic_string<char>::basic_string<char>



// Contribution: 1:00010ee0-00010f5e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411ee0
// basic_string<char>::basic_string<char>



// Contribution: 1:00010f60-0001107f Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00411f60
// basic_string<char>::basic_string<char>



// Contribution: 1:00011080-00011121 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412080
// basic_string<char>::delete_ref



// Contribution: 1:00011130-000111fc Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412130
// basic_string<char>::~basic_string<char>



// Contribution: 1:00011200-000113ff Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412200
// basic_string<char>::operator=



// Contribution: 1:00011400-00011665 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412400
// basic_string<char>::operator=



// Contribution: 1:00011670-00011849 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412670
// basic_string<char>::operator=



// Contribution: 1:00011850-00011abf Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412850
// basic_string<char>::operator+=



// Contribution: 1:00011ac0-00011d6d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412ac0
// basic_string<char>::operator+=



// Contribution: 1:00011d70-00012050 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00412d70
// basic_string<char>::operator+=



// Contribution: 1:00012060-0001230b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00413060
// basic_string<char>::append



// Contribution: 1:00012310-000125bd Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00413310
// basic_string<char>::append



// Contribution: 1:000125c0-00012859 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004135c0
// basic_string<char>::append



// Contribution: 1:00012860-00012bb4 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00413860
// basic_string<char>::append



// Contribution: 1:00012bc0-00012e30 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00413bc0
// basic_string<char>::assign



// Contribution: 1:00012e40-000130a5 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00413e40
// basic_string<char>::assign



// Contribution: 1:000130b0-00013301 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004140b0
// basic_string<char>::assign



// Contribution: 1:00013310-000136f6 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00414310
// basic_string<char>::assign



// Contribution: 1:00013700-00013b2c Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00414700
// basic_string<char>::insert



// Contribution: 1:00013b30-00013f29 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00414b30
// basic_string<char>::insert



// Contribution: 1:00013f30-00014315 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00414f30
// basic_string<char>::insert



// Contribution: 1:00014320-000147c0 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00415320
// basic_string<char>::insert



// Contribution: 1:000147d0-00014b67 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004157d0
// basic_string<char>::remove



// Contribution: 1:00014b70-000155a3 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00415b70
// basic_string<char>::replace



// Contribution: 1:000155b0-00015a8f Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004165b0
// basic_string<char>::replace



// Contribution: 1:00015a90-00015f5b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00416a90
// basic_string<char>::replace



// Contribution: 1:00015f60-000164e6 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00416f60
// basic_string<char>::replace



// Contribution: 1:000164f0-00016590 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004174f0
// basic_string<char>::get_at



// Contribution: 1:000165a0-00016826 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004175a0
// basic_string<char>::put_at



// Contribution: 1:00016830-00016a57 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417830
// basic_string<char>::operator[]



// Contribution: 1:00016a60-00016ada Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417a60
// basic_string<char>::operator[]



// Contribution: 1:00016ae0-00016bf3 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417ae0
// basic_string<char>::c_str



// Contribution: 1:00016c00-00016c3e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417c00
// basic_string<char>::data



// Contribution: 1:00016c40-00016c5e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417c40
// basic_string<char>::length



// Contribution: 1:00016c60-00016ef7 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417c60
// basic_string<char>::resize



// Contribution: 1:00016f00-00017184 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00417f00
// basic_string<char>::resize



// Contribution: 1:00017190-0001738b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00418190
// basic_string<char>::reserve



// Contribution: 1:00017390-000173ae Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00418390
// basic_string<char>::reserve



// Contribution: 1:000173b0-000174b3 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004183b0
// basic_string<char>::copy



// Contribution: 1:000174c0-0001757f Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004184c0
// basic_string<char>::find



// Contribution: 1:00017580-000177ad Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00418580
// basic_string<char>::find



// Contribution: 1:000177b0-000179c9 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004187b0
// basic_string<char>::find



// Contribution: 1:000179d0-00017c30 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004189d0
// basic_string<char>::find



// Contribution: 1:00017c40-00017da0 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00418c40
// basic_string<char>::rfind



// Contribution: 1:00017db0-000180ac Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00418db0
// basic_string<char>::rfind



// Contribution: 1:000180b0-00018398 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004190b0
// basic_string<char>::rfind



// Contribution: 1:000183a0-000186cf Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004193a0
// basic_string<char>::rfind



// Contribution: 1:000186d0-000187a3 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004196d0
// basic_string<char>::find_first_of



// Contribution: 1:000187b0-000188dc Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004197b0
// basic_string<char>::find_first_of



// Contribution: 1:000188e0-000189f8 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004198e0
// basic_string<char>::find_first_of



// Contribution: 1:00018a00-00018b5f Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00419a00
// basic_string<char>::find_first_of



// Contribution: 1:00018b60-00018cd5 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00419b60
// basic_string<char>::find_last_of



// Contribution: 1:00018ce0-00018e3a Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00419ce0
// basic_string<char>::find_last_of



// Contribution: 1:00018e40-00018f86 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00419e40
// basic_string<char>::find_last_of



// Contribution: 1:00018f90-00019123 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00419f90
// basic_string<char>::find_last_of



// Contribution: 1:00019130-000191ef Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a130
// basic_string<char>::find_first_not_of



// Contribution: 1:000191f0-00019308 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a1f0
// basic_string<char>::find_first_not_of



// Contribution: 1:00019310-00019414 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a310
// basic_string<char>::find_first_not_of



// Contribution: 1:00019420-0001956b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a420
// basic_string<char>::find_first_not_of



// Contribution: 1:00019570-000196d0 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a570
// basic_string<char>::find_last_not_of



// Contribution: 1:000196e0-00019841 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a6e0
// basic_string<char>::find_last_not_of



// Contribution: 1:00019850-0001999d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a850
// basic_string<char>::find_last_not_of



// Contribution: 1:000199a0-00019b3a Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041a9a0
// basic_string<char>::find_last_not_of



// Contribution: 1:00019b40-0001a034 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041ab40
// basic_string<char>::substr



// Contribution: 1:0001a040-0001a241 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b040
// basic_string<char>::compare



// Contribution: 1:0001a250-0001a3c5 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b250
// basic_string<char>::compare



// Contribution: 1:0001a3d0-0001a56d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b3d0
// basic_string<char>::compare



// Contribution: 1:0001a570-0001a73d Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b570
// basic_string<char>::compare



// Contribution: 1:0001a740-0001a7a8 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b740
// allocate



// Contribution: 1:0001a7b0-0001a81b Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b7b0
// allocate



// Contribution: 1:0001a820-0001a888 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b820
// allocate



// Contribution: 1:0001a890-0001a8f8 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b890
// allocate



// Contribution: 1:0001a900-0001a968 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b900
// allocate



// Contribution: 1:0001a970-0001a9df Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b970
// allocate



// Contribution: 1:0001a9e0-0001abcd Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041b9e0
// construct



// Contribution: 1:0001abd0-0001ac5e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041bbd0
// list<HotSpot>::deallocate_buffers



// Contribution: 1:0001ac60-0001acee Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041bc60
// list<Shortcut>::deallocate_buffers



// Contribution: 1:0001acf0-0001ad7e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041bcf0
// list<KeyColors>::deallocate_buffers



// Contribution: 1:0001ad80-0001ae0e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041bd80
// list<StringIDAssociation>::deallocate_buffers



// Contribution: 1:0001ae10-0001b69f Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041be10
// rb_tree<long,long,ident<long,long>,less<long>>::insert



// Contribution: 1:0001b6a0-0001b8b6 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041c6a0
// rb_tree<long,long,ident<long,long>,less<long>>::get_node



// Contribution: 1:0001b8c0-0001b9cb Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041c8c0
// rb_tree<long,long,ident<long,long>,less<long>>::iterator::operator--



// Contribution: 1:0001b9d0-0001cd6c Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041c9d0
// rb_tree<long,long,ident<long,long>,less<long>>::erase



// Contribution: 1:0001cd70-0001cde4 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0041dd70
// basic_string_ref<char>::`scalar deleting destructor'



// Contribution: 1:0001cdf0-0001cee1 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0041ddf0
// StringIDAssociation::`scalar deleting destructor'



// Contribution: 1:0001cef0-0001cfdc Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0041def0
// basic_string<char>::`scalar deleting destructor'



// Contribution: 1:0001cfe0-0001d080 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041dfe0
// basic_string_ref<char>::basic_string_ref<char>



// Contribution: 1:0001d090-0001d15e Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041e090
// basic_string_ref<char>::basic_string_ref<char>



// Contribution: 1:0001d160-0001d1fc Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041e160
// basic_string_ref<char>::basic_string_ref<char>



// Contribution: 1:0001d200-0001d2cb Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041e200
// basic_string_ref<char>::basic_string_ref<char>



// Contribution: 1:0001d2d0-0001d311 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041e2d0
// basic_string_ref<char>::basic_string_ref<char>



// Contribution: 1:0001d320-0001e162 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041e320
// rb_tree<long,long,ident<long,long>,less<long>>::__insert



// Contribution: 1:0001e170-0001e1e9 Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041f170
// rb_tree<long,long,ident<long,long>,less<long>>::__erase



// Contribution: 1:0001e1f0-0001e34c Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041f1f0
// rb_tree<long,long,ident<long,long>,less<long>>::rotate_left



// Contribution: 1:0001e350-0001e4ac Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041f350
// rb_tree<long,long,ident<long,long>,less<long>>::rotate_right



// Contribution: 1:0001e4b0-0001e4ff Module: 75, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0041f4b0
// basic_string_ref<char>::delete_ptr



// Contribution: 2:00000058-0000013b Module: 75, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f058
// ??_7KeyboardWindow@@6B@


// Contribution: 2:00000140-00000227 Module: 75, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f140
// ??_7JoystickWindow@@6B@


// Contribution: 2:00000228-000002fb Module: 75, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f228
// ??_7UserInputWindow@@6B@


// Contribution: 2:00000300-000003c7 Module: 75, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f300
// ??_7ControlDisplayWindow@@6B@


// Contribution: 3:00000018-0000001f Module: 75, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597018
// $S98
// LOCAL: COPTER_D 0x0059701c
// $S101


// Contribution: 3:000000f0-000001a9 Module: 75, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970f0
// SZ_KEYBOARD_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x005970f4
// SZ_KEYBOARD_LIGHT_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x005970f8
// SZ_KEYBOARD_NON_TEXT_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x005970fc
// SZ_JOYSTICK_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00597100
// SZ_JOYSTICK_BUTTON_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00597104
// SZ_JOYSTICK_SLIDER_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00597108
// SZ_JOYSTICK_HANDLE_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059710c
// SZ_JOYSTICK_HANDLE_BASE_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00597110
// SZ_USER_INPUT_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00597114
// SZ_USER_INPUT_WINDOW_BACKGROUND_FILE_NAME
// GLOBAL: COPTER_D 0x00597118
// SZ_CONTROL_DISPLAY_WINDOW_IMAGE_FILE_NAME


// Contribution: 3:000001ac-000001b9 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971ac
// ??_C@_0O@OAFC@out?5of?5memory?$AA@


// Contribution: 3:000001bc-000001bf Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971bc
// list<KeyColors>::number_of_lists


// Contribution: 3:000001c0-000001c3 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971c0
// list<KeyColors>::last


// Contribution: 3:000001c4-000001c7 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971c4
// list<KeyColors>::next_avail


// Contribution: 3:000001c8-000001cb Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971c8
// list<KeyColors>::free_list


// Contribution: 3:000001cc-000001cf Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971cc
// list<HotSpot>::number_of_lists


// Contribution: 3:000001d0-000001d3 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971d0
// list<HotSpot>::last


// Contribution: 3:000001d4-000001d7 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971d4
// list<HotSpot>::next_avail


// Contribution: 3:000001d8-000001db Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971d8
// list<HotSpot>::free_list


// Contribution: 3:000001dc-000001df Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971dc
// list<HotSpot>::buffer_list


// Contribution: 3:000001e0-000001e3 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971e0
// list<KeyColors>::buffer_list


// Contribution: 3:000001e4-000001fd Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005971e4
// ??_C@_0BK@CLOL@Length?5exception?5occurred?$AA@


// Contribution: 3:00000200-00000203 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597200
// ??_C@_03LNFH@?$CI?$CB?$CJ?$AA@


// Contribution: 3:00000204-00000207 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597204
// list<StringIDAssociation>::number_of_lists


// Contribution: 3:00000208-0000020b Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597208
// list<StringIDAssociation>::last


// Contribution: 3:0000020c-0000020f Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059720c
// list<StringIDAssociation>::next_avail


// Contribution: 3:00000210-00000213 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597210
// list<StringIDAssociation>::free_list


// Contribution: 3:00000214-00000217 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597214
// list<StringIDAssociation>::buffer_list


// Contribution: 3:00000218-0000021b Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597218
// list<Shortcut>::number_of_lists


// Contribution: 3:0000021c-0000021f Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059721c
// list<Shortcut>::last


// Contribution: 3:00000220-00000223 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597220
// list<Shortcut>::next_avail


// Contribution: 3:00000224-00000227 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597224
// list<Shortcut>::free_list


// Contribution: 3:00000228-0000022b Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597228
// list<Shortcut>::buffer_list


// Contribution: 3:0000022c-0000024b Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059722c
// ??_C@_0CA@KCID@Out?5of?5range?5exception?5occurred?$AA@


// Contribution: 3:0000024c-0000024f Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059724c
// rb_tree<long,long,ident<long,long>,less<long>>::NIL


// Contribution: 3:00000250-00000253 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597250
// rb_tree<long,long,ident<long,long>,less<long>>::number_of_trees


// Contribution: 3:00000254-00000257 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597254
// rb_tree<long,long,ident<long,long>,less<long>>::last


// Contribution: 3:00000258-0000025b Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597258
// rb_tree<long,long,ident<long,long>,less<long>>::next_avail


// Contribution: 3:0000025c-0000025f Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059725c
// rb_tree<long,long,ident<long,long>,less<long>>::free_list


// Contribution: 3:00000260-00000263 Module: 75, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597260
// rb_tree<long,long,ident<long,long>,less<long>>::buffer_list


// Contribution: 3:0002b790-0002b797 Module: 75, 4 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2790
// colorTextGamePaletteNormal
// GLOBAL: COPTER_D 0x005c2794
// colorTextGamePaletteHighlighted
