// Module: Miff.obj
// Source: C:\Copter\source\sparkal\Miff.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void * __ptr32;

// Type: long;

// Type: char *;

// Type: int32_t;

// Type: class MIFF (forward reference);
class MIFF : public PFile
{
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF();
	// vtable: 4
	intro long OpenForReading();
	// vtable: 8
	intro long OpenForWriting(long, long, long);
	// vtable: 12
	intro long OpenForAppending();
	// vtable: 16
	intro long Close();
	// vtable: 20
	intro long GetPresentRecordType();
	// vtable: 24
	intro long GetPresentRecordSize();
	// vtable: 28
	intro long GetPresentRecordDataSize();
	// vtable: 32
	intro long GetPresentRecordIndex();
	// vtable: 36
	intro long VerifyFile();
	// vtable: 40
	intro long ReadMIFFHeader();
	// vtable: 44
	intro long ReadRecordHeader();
	// vtable: 48
	intro long ReadFileCreator();
	// vtable: 52
	intro long ReadFileType();
	// vtable: 56
	intro long ReadFileVersion();
	// vtable: 60
	intro long ReadPresentRecord(struct MIFFRecord*, long);
	// vtable: 64
	intro long ReadPresentRecordData(char *, long);
	// vtable: 68
	intro long GoToFirstRecord();
	// vtable: 72
	intro long GoToNextRecord();
	// vtable: 76
	intro long GoToPreviousRecord();
	// vtable: 80
	intro long GoToFirstRecordOfGivenType(long);
	// vtable: 84
	intro long GoToNextRecordOfGivenType(long);
	// vtable: 88
	intro long GoToNthRecord(long);
	// vtable: 92
	intro long CountRecords();
	// vtable: 96
	intro long WriteMIFFRecord(struct MIFFRecord*, long);
	// vtable: 100
	intro long WriteDataRecord(long, char *, long);
	// vtable: 104
	intro long WriteFileHeader(long, long, long);
	// vtable: 108
	intro long WriteEnd();
	long lPresentRecordStart;
	long lPresentRecordType;
	long lPresentRecordLength;
	long lPresentRecordIndex;
	long lReadWriteMode;
	long bFileEndWritten;
	long bFileAppearsCorrupt;
	struct MIFFHeader myMIFFHeader;
};

// Type: void;

// Type: struct MIFFRecord (forward reference);

// Type: uint32_t;

// Type: class PFile;
class PFile{
		enum __unnamed {
			FileNull = -1,
		};
		enum SeekTypes {
			N_SEEK_FROM_FILE_START = 0,
			N_SEEK_FROM_FILE_CURRENT = 1,
			N_SEEK_FROM_FILE_END = 2,
		};
		enum AccessTypes {
			ReadOnly = 0,
			ReadWrite = 2,
			WriteOnly = 1,
			Create = 768,
			CreateExcl = 1280,
			Append = 8,
			Binary = 32768,
			Compat = 0,
			DenyNone = 64,
			DenyRead = 48,
			DenyWrite = 32,
			DenyRdWr = 16,
			NoInherit = 128,
		};
		enum PermissionTypes {
			PermRead = 256,
			PermWrite = 128,
			PermRdWr = 384,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char szFilePath[260];
	int32_t Handle;
private:
	int32_t ShouldClose;
};



// Contribution: 1:000aa530-000ab9b5 Module: 6, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004ab530
int32_t ReadFirstMIFFChunk(void * __ptr32 miffReader, long lDataType, char * ptrData, long lDataLength) {
// LINE 18:
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x44];
// LINE 19:
	__asm        mov    eax, lDataType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x54];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AB55F;
// LINE 20:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AB577;
// LINE 21:
	__asm        mov    eax, lDataLength;
	__asm        push   eax;
	__asm        mov    eax, ptrData;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
	__asm        jmp    near ptr 0x004AB577;
// LINE 22:
}

// FUNCTION: COPTER_D 0x004ab57c
int32_t ReadNextMIFFChunk(void * __ptr32 miffReader, long lDataType, char * ptrData, long lDataLength) {
// LINE 30:
	__asm        mov    eax, lDataType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x54];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AB5A0;
// LINE 31:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AB5B8;
// LINE 32:
	__asm        mov    eax, lDataLength;
	__asm        push   eax;
	__asm        mov    eax, ptrData;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
	__asm        jmp    near ptr 0x004AB5B8;
// LINE 33:
}

// FUNCTION: COPTER_D 0x004ab5bd
int32_t WriteMIFFChunk(void * __ptr32 miffWriter, long lDataType, char * ptrData, long lDataLength) {
// LINE 41:
	__asm        mov    eax, lDataLength;
	__asm        push   eax;
	__asm        mov    eax, ptrData;
	__asm        push   eax;
	__asm        mov    eax, lDataType;
	__asm        push   eax;
	__asm        mov    eax, miffWriter;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffWriter;
	__asm        call   dword ptr [eax+0x64];
	__asm        jmp    near ptr 0x004AB5DF;
// LINE 42:
}

// FUNCTION: COPTER_D 0x004ab5e4
void MIFF::MIFF() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004AB629;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591950;
// LINE 57:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0;
// LINE 58:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
// LINE 59:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x118], 0;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11C], 0;
// LINE 61:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 0;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 0;
// LINE 63:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0;
// LINE 64:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12C], 0;
// LINE 65:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 0;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0;
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x138], 0;
// LINE 68:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x13C], 0;
// LINE 69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x144], 0;
// LINE 71:
	__asm        jmp    near ptr 0x004AB6ED;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ab6f5
void MIFF::MIFF(char * szFileOrPath) {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        cmp    szFileOrPath, 0;
	__asm        je     near ptr 0x004AB750;
	__asm        mov    eax, szFileOrPath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x004AB757;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004AB75C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591950;
// LINE 84:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0;
// LINE 85:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x118], 0;
// LINE 86:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
// LINE 87:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11C], 0;
// LINE 88:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 0;
// LINE 89:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0;
// LINE 90:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 0;
// LINE 91:
	__asm        jmp    near ptr 0x004AB7C5;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ab7cf
void MIFF::~MIFF() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591950;
// LINE 98:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB7F9;
	__asm        jmp    near ptr 0x004AB7FE;
	__asm        jmp    near ptr 0x004AB815;
	__asm        jmp    near ptr 0x004AB80D;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004AB815;
// LINE 99:
	__asm        mov    ecx, this;
	__asm        call   MIFF::Close;
// LINE 101:
	__asm        jmp    near ptr 0x004AB81A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB838;
	__asm        jmp    near ptr 0x004AB83D;
	__asm        jmp    near ptr 0x004AB86E;
	__asm        jmp    near ptr 0x004AB84C;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AB86E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        je     near ptr 0x004AB86E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _close;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004AB873;
}

// FUNCTION: COPTER_D 0x004ab878
long MIFF::OpenForReading() {
// LINE 114:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AB92B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB8B0;
	__asm        jmp    near ptr 0x004AB92B;
	__asm        jmp    near ptr 0x004AB8B0;
	__asm        jmp    near ptr 0x004AB8BF;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x004AB92B;
// LINE 115:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0x8020;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::Open;
// LINE 116:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB8EA;
	__asm        jmp    near ptr 0x004AB8EF;
	__asm        jmp    near ptr 0x004AB92B;
	__asm        jmp    near ptr 0x004AB8FE;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AB92B;
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 1;
// LINE 118:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 120:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AB932;
// LINE 123:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AB932;
// LINE 124:
}

// FUNCTION: COPTER_D 0x004ab937
long MIFF::OpenForWriting(long lFileCreator, long lFileType, long lFileVersion) {
// LINE 139:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AB97D;
// LINE 140:
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
// LINE 141:
	__asm        push   0x180;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::FileCreate;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AB97D;
// LINE 142:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABA25;
// LINE 144:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB997;
	__asm        jmp    near ptr 0x004AB9BC;
	__asm        jmp    near ptr 0x004AB997;
	__asm        jmp    near ptr 0x004AB9A6;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x004AB9BC;
// LINE 145:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0x8002;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::Open;
// LINE 147:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AB9D1;
	__asm        jmp    near ptr 0x004AB9D6;
	__asm        jmp    near ptr 0x004ABA1E;
	__asm        jmp    near ptr 0x004AB9E5;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004ABA1E;
// LINE 148:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 2;
// LINE 149:
	__asm        mov    eax, lFileVersion;
	__asm        push   eax;
	__asm        mov    eax, lFileType;
	__asm        push   eax;
	__asm        mov    eax, lFileCreator;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 151:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABA25;
// LINE 153:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABA25;
// LINE 154:
}

// FUNCTION: COPTER_D 0x004aba2c
long MIFF::OpenForAppending() {
// LINE 169:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::FileExists;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004ABA72;
// LINE 170:
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
// LINE 171:
	__asm        push   0x180;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::FileCreate;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004ABA72;
// LINE 172:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABB42;
// LINE 174:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABA8C;
	__asm        jmp    near ptr 0x004ABAB1;
	__asm        jmp    near ptr 0x004ABA8C;
	__asm        jmp    near ptr 0x004ABA9B;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x004ABAB1;
// LINE 175:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0x8002;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::Open;
// LINE 177:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABAC6;
	__asm        jmp    near ptr 0x004ABACB;
	__asm        jmp    near ptr 0x004ABB3B;
	__asm        jmp    near ptr 0x004ABADA;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004ABB3B;
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 179:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x12C], 0x4646494D;
	__asm        je     near ptr 0x004ABB09;
// LINE 180:
	__asm        push   1;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
// LINE 181:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 2;
// LINE 182:
	__asm        push   2;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABB31;
// LINE 183:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABB42;
// LINE 185:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABB42;
// LINE 186:
}

// FUNCTION: COPTER_D 0x004abb47
long MIFF::Close() {
// LINE 194:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x120], 2;
	__asm        jne    near ptr 0x004ABB7E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x124], 0;
	__asm        jne    near ptr 0x004ABB7E;
// LINE 195:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 196:
	__asm        mov    ecx, this;
	__asm        call   PFile::Close;
// LINE 197:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABB90;
// LINE 198:
}

// FUNCTION: COPTER_D 0x004abb95
long MIFF::VerifyFile() {
// LINE 206:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABBBB;
	__asm        jmp    near ptr 0x004ABC05;
	__asm        jmp    near ptr 0x004ABBBB;
	__asm        jmp    near ptr 0x004ABBCA;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x004ABC05;
// LINE 207:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 208:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABBEF;
	__asm        jmp    near ptr 0x004ABC05;
	__asm        jmp    near ptr 0x004ABBEF;
	__asm        jmp    near ptr 0x004ABBFE;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x004ABC05;
// LINE 209:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABC2D;
// LINE 211:
	__asm        mov    ecx, this;
	__asm        call   PFile::Length;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x140];
	__asm        jne    near ptr 0x004ABC26;
// LINE 212:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABC2D;
// LINE 213:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABC2D;
// LINE 214:
}

// FUNCTION: COPTER_D 0x004abc32
long MIFF::ReadMIFFHeader() {
// LINE 223:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABC53;
	__asm        jmp    near ptr 0x004ABC58;
	__asm        jmp    near ptr 0x004ABCAE;
	__asm        jmp    near ptr 0x004ABC67;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004ABCAE;
// LINE 224:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABC82;
// LINE 225:
	__asm        push   0x1C;
	__asm        mov    eax, this;
	__asm        add    eax, 0x12C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABCA4;
// LINE 226:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABCB5;
// LINE 228:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABCB5;
// LINE 229:
}

// FUNCTION: COPTER_D 0x004abcba
long MIFF::ReadFileCreator() {
	long lResult;
	long bWeOpenedFile;

// LINE 237:
	__asm        mov    bWeOpenedFile, 0;
// LINE 240:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABCE7;
	__asm        jmp    near ptr 0x004ABD17;
	__asm        jmp    near ptr 0x004ABCE7;
	__asm        jmp    near ptr 0x004ABCF6;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x004ABD17;
// LINE 241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004ABD10;
// LINE 242:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABD69;
// LINE 243:
	__asm        mov    bWeOpenedFile, 1;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    lResult, eax;
// LINE 246:
	__asm        cmp    bWeOpenedFile, 0;
	__asm        je     near ptr 0x004ABD38;
// LINE 247:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABD61;
// LINE 250:
	__asm        mov    eax, lResult;
	__asm        jmp    near ptr 0x004ABD69;
// LINE 251:
}

// FUNCTION: COPTER_D 0x004abd6e
long MIFF::ReadFileType() {
	long lResult;
	long bWeOpenedFile;

// LINE 259:
	__asm        mov    bWeOpenedFile, 0;
// LINE 262:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABD9B;
	__asm        jmp    near ptr 0x004ABDCB;
	__asm        jmp    near ptr 0x004ABD9B;
	__asm        jmp    near ptr 0x004ABDAA;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x004ABDCB;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004ABDC4;
// LINE 264:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABE1D;
// LINE 265:
	__asm        mov    bWeOpenedFile, 1;
// LINE 267:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    lResult, eax;
// LINE 268:
	__asm        cmp    bWeOpenedFile, 0;
	__asm        je     near ptr 0x004ABDEC;
// LINE 269:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 271:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABE15;
// LINE 272:
	__asm        mov    eax, lResult;
	__asm        jmp    near ptr 0x004ABE1D;
// LINE 273:
}

// FUNCTION: COPTER_D 0x004abe22
long MIFF::ReadFileVersion() {
	long lResult;
	long bWeOpenedFile;

// LINE 280:
	__asm        mov    bWeOpenedFile, 0;
// LINE 283:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004ABE4F;
	__asm        jmp    near ptr 0x004ABE7F;
	__asm        jmp    near ptr 0x004ABE4F;
	__asm        jmp    near ptr 0x004ABE5E;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x004ABE7F;
// LINE 284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004ABE78;
// LINE 285:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABED1;
// LINE 286:
	__asm        mov    bWeOpenedFile, 1;
// LINE 288:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x13C];
	__asm        mov    lResult, eax;
// LINE 289:
	__asm        cmp    bWeOpenedFile, 0;
	__asm        je     near ptr 0x004ABEA0;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABEC9;
// LINE 293:
	__asm        mov    eax, lResult;
	__asm        jmp    near ptr 0x004ABED1;
// LINE 294:
}

// FUNCTION: COPTER_D 0x004abed6
long MIFF::ReadRecordHeader() {
	long lBytesRead;

// LINE 314:
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x114;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABF04;
// LINE 315:
	__asm        jmp    near ptr 0x004ABF09;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x118;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        mov    lBytesRead, eax;
// LINE 316:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x118], 0;
	__asm        jge    near ptr 0x004ABF4D;
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 1;
// LINE 318:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABFC7;
// LINE 321:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-8], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004ABF76;
// LINE 322:
	__asm        cmp    lBytesRead, 0;
	__asm        jg     near ptr 0x004ABF87;
// LINE 323:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABFC7;
// LINE 324:
	__asm        mov    ecx, this;
	__asm        call   PFile::Length;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        mov    edx, this;
	__asm        add    ecx, [edx+0x110];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x004ABFBD;
// LINE 325:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 1;
// LINE 326:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004ABFC7;
// LINE 328:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ABFC7;
// LINE 329:
}

// FUNCTION: COPTER_D 0x004abfcc
long MIFF::CountRecords() {
	long lCount;
	long bWeOpenedFile;

// LINE 352:
	__asm        mov    bWeOpenedFile, 0;
// LINE 353:
	__asm        mov    lCount, 0;
// LINE 355:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC000;
	__asm        jmp    near ptr 0x004AC040;
	__asm        jmp    near ptr 0x004AC000;
	__asm        jmp    near ptr 0x004AC00F;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x004AC040;
// LINE 356:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0x8020;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   PFile::Open;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AC034;
// LINE 357:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC0AF;
// LINE 358:
	__asm        mov    bWeOpenedFile, 1;
// LINE 360:
	__asm        jmp    near ptr 0x004AC057;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x004AC057;
// LINE 361:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC0AF;
// LINE 363:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 365:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AC07F;
// LINE 366:
	__asm        jmp    near ptr 0x004AC087;
// LINE 367:
	__asm        jmp    near ptr 0x004AC082;
// LINE 368:
	__asm        inc    lCount;
// LINE 369:
	__asm        jmp    near ptr 0x004AC062;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 371:
	__asm        cmp    bWeOpenedFile, 0;
	__asm        je     near ptr 0x004AC0A7;
// LINE 372:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 373:
	__asm        mov    eax, lCount;
	__asm        jmp    near ptr 0x004AC0AF;
// LINE 374:
}

// FUNCTION: COPTER_D 0x004ac0b4
long MIFF::GoToFirstRecord() {
// LINE 391:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC0D5;
	__asm        jmp    near ptr 0x004AC0DA;
	__asm        jmp    near ptr 0x004AC0F9;
	__asm        jmp    near ptr 0x004AC0E9;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004AC0F9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x004AC100;
// LINE 392:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC14A;
// LINE 393:
	__asm        push   0;
	__asm        push   0x1C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC11B;
// LINE 394:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0x1C;
// LINE 395:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11C], 0;
// LINE 396:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 397:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC14A;
// LINE 398:
}

// FUNCTION: COPTER_D 0x004ac14f
long MIFF::GoToNextRecord() {
	long lResult;
	long lSavedPreviousStart;

// LINE 420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    lSavedPreviousStart, eax;
// LINE 422:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC17C;
	__asm        jmp    near ptr 0x004AC181;
	__asm        jmp    near ptr 0x004AC1A0;
	__asm        jmp    near ptr 0x004AC190;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004AC1A0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x004AC1A7;
// LINE 423:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 425:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x118], 0x8000;
	__asm        jg     near ptr 0x004AC1CA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x118], 0;
	__asm        jg     near ptr 0x004AC1FA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
// LINE 426:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC1F3;
// LINE 427:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 432:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        mov    lResult, eax;
	__asm        jmp    near ptr 0x004AC226;
// LINE 433:
	__asm        cmp    lResult, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AC260;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x18], eax;
// LINE 436:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC259;
// LINE 437:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 440:
	__asm        mov    eax, lResult;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
// LINE 441:
	__asm        mov    eax, this;
	__asm        mov    ecx, lSavedPreviousStart;
	__asm        cmp    [eax+0x110], ecx;
	__asm        jg     near ptr 0x004AC2A2;
// LINE 442:
	__asm        push   0;
	__asm        mov    eax, lSavedPreviousStart;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC29B;
// LINE 443:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 446:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AC2D9;
// LINE 447:
	__asm        push   0;
	__asm        mov    eax, lSavedPreviousStart;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC2D2;
// LINE 448:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 450:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x11C];
// LINE 451:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC2EC;
// LINE 452:
}

// FUNCTION: COPTER_D 0x004ac2f1
long MIFF::GoToPreviousRecord() {
	long lTempPresentRecord;

// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11C];
	__asm        mov    lTempPresentRecord, eax;
// LINE 474:
	__asm        cmp    lTempPresentRecord, 0;
	__asm        je     near ptr 0x004AC316;
// LINE 475:
	__asm        dec    lTempPresentRecord;
// LINE 476:
	__asm        mov    eax, lTempPresentRecord;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x58];
// LINE 477:
	__asm        mov    eax, lTempPresentRecord;
	__asm        jmp    near ptr 0x004AC32D;
// LINE 478:
}

// FUNCTION: COPTER_D 0x004ac332
long MIFF::GoToFirstRecordOfGivenType(long lRecordType) {
// LINE 492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 493:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        cmp    eax, lRecordType;
	__asm        jne    near ptr 0x004AC367;
// LINE 494:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC3A4;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AC39D;
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        cmp    eax, lRecordType;
	__asm        jne    near ptr 0x004AC398;
// LINE 498:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC3A4;
// LINE 499:
	__asm        jmp    near ptr 0x004AC367;
// LINE 500:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC3A4;
// LINE 501:
}

// FUNCTION: COPTER_D 0x004ac3ab
long MIFF::GoToNextRecordOfGivenType(long lRecordType) {
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AC3ED;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        cmp    eax, lRecordType;
	__asm        jne    near ptr 0x004AC3E8;
// LINE 517:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC3F4;
// LINE 518:
	__asm        jmp    near ptr 0x004AC3B7;
// LINE 519:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC3F4;
// LINE 520:
}

// FUNCTION: COPTER_D 0x004ac3fb
long MIFF::GoToNthRecord(long lRecordToGoTo) {
	long lTempPresentRecord;

// LINE 540:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 541:
	__asm        mov    lTempPresentRecord, 0;
	__asm        jmp    near ptr 0x004AC421;
	__asm        inc    lTempPresentRecord;
	__asm        mov    eax, lRecordToGoTo;
	__asm        cmp    lTempPresentRecord, eax;
	__asm        jge    near ptr 0x004AC43D;
// LINE 542:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        jmp    near ptr 0x004AC41E;
// LINE 543:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC447;
// LINE 544:
}

// FUNCTION: COPTER_D 0x004ac44e
long MIFF::ReadPresentRecord(struct MIFFRecord* miffRecordToRead, long lMaxBytesToRead) {
	long lReturnValue;
	long lActualDataBytesToRead;

// LINE 563:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC46F;
	__asm        jmp    near ptr 0x004AC474;
	__asm        jmp    near ptr 0x004AC493;
	__asm        jmp    near ptr 0x004AC483;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004AC493;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x004AC49A;
// LINE 564:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC53D;
// LINE 567:
	__asm        sub    lMaxBytesToRead, 8;
// LINE 568:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    ecx, lMaxBytesToRead;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x004AC4B4;
	__asm        mov    eax, ecx;
	__asm        mov    lActualDataBytesToRead, eax;
// LINE 569:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    ecx, miffRecordToRead;
	__asm        mov    [ecx], eax;
// LINE 570:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    ecx, miffRecordToRead;
	__asm        mov    [ecx+4], eax;
// LINE 572:
	__asm        jmp    near ptr 0x004AC4D9;
	__asm        mov    eax, lActualDataBytesToRead;
	__asm        push   eax;
	__asm        mov    eax, miffRecordToRead;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        mov    lReturnValue, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
// LINE 578:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC522;
// LINE 579:
	__asm        cmp    lReturnValue, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004AC533;
// LINE 580:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC53D;
// LINE 581:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC53D;
// LINE 582:
}

// FUNCTION: COPTER_D 0x004ac544
long MIFF::ReadPresentRecordData(char * chBuffer, long lMaxBytesToRead) {
	long lReturnValue;
	long lActualBytesToRead;

// LINE 601:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC565;
	__asm        jmp    near ptr 0x004AC56A;
	__asm        jmp    near ptr 0x004AC589;
	__asm        jmp    near ptr 0x004AC579;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004AC589;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x004AC590;
// LINE 602:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC634;
// LINE 605:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    ecx, lMaxBytesToRead;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x004AC5A6;
	__asm        mov    eax, ecx;
	__asm        mov    lActualBytesToRead, eax;
// LINE 607:
	__asm        push   1;
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC5C4;
// LINE 609:
	__asm        jmp    near ptr 0x004AC5C9;
	__asm        mov    eax, lActualBytesToRead;
	__asm        push   eax;
	__asm        mov    eax, chBuffer;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        mov    lReturnValue, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x10], eax;
// LINE 615:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC60F;
// LINE 616:
	__asm        cmp    lReturnValue, 0xFFFFFFFF;
	__asm        je     near ptr 0x004AC623;
	__asm        cmp    lReturnValue, 0;
	__asm        jne    near ptr 0x004AC62A;
// LINE 617:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC634;
// LINE 618:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC634;
// LINE 619:
}

// FUNCTION: COPTER_D 0x004ac63b
long MIFF::WriteFileHeader(long lCreatorType, long lFileType, long lFileVersion) {
	long lReturnValue;

// LINE 645:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC65C;
	__asm        jmp    near ptr 0x004AC661;
	__asm        jmp    near ptr 0x004AC680;
	__asm        jmp    near ptr 0x004AC670;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AC680;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x120], 2;
	__asm        je     near ptr 0x004AC687;
// LINE 646:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC751;
// LINE 648:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12C], 0x4646494D;
// LINE 649:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 2;
// LINE 650:
	__asm        mov    eax, lCreatorType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x134], eax;
// LINE 651:
	__asm        mov    eax, lFileType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x138], eax;
// LINE 652:
	__asm        mov    eax, lFileVersion;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13C], eax;
// LINE 653:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0x1C;
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x144], 1;
// LINE 656:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 0;
// LINE 657:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC707;
// LINE 658:
	__asm        jmp    near ptr 0x004AC70C;
	__asm        push   0x1C;
	__asm        mov    eax, this;
	__asm        add    eax, 0x12C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        mov    lReturnValue, eax;
// LINE 659:
	__asm        cmp    lReturnValue, 0xFFFFFFFF;
	__asm        je     near ptr 0x004AC740;
	__asm        cmp    lReturnValue, 0;
	__asm        jne    near ptr 0x004AC747;
// LINE 660:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC751;
// LINE 661:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC751;
// LINE 662:
}

// FUNCTION: COPTER_D 0x004ac758
long MIFF::WriteMIFFRecord(struct MIFFRecord* miffRecordToWrite, long lSizeOfMIFFRecordData) {
	long lReturnValue;
	long lAmountOfDataToWrite;

// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC779;
	__asm        jmp    near ptr 0x004AC77E;
	__asm        jmp    near ptr 0x004AC79D;
	__asm        jmp    near ptr 0x004AC78D;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004AC79D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x120], 2;
	__asm        je     near ptr 0x004AC7A4;
// LINE 679:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC80A;
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 0;
// LINE 681:
	__asm        mov    eax, lSizeOfMIFFRecordData;
	__asm        add    eax, 8;
	__asm        mov    lAmountOfDataToWrite, eax;
// LINE 682:
	__asm        mov    eax, lAmountOfDataToWrite;
	__asm        mov    ecx, miffRecordToWrite;
	__asm        mov    [ecx+4], eax;
// LINE 685:
	__asm        jmp    near ptr 0x004AC7C8;
	__asm        mov    eax, lAmountOfDataToWrite;
	__asm        push   eax;
	__asm        mov    eax, miffRecordToWrite;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        mov    lReturnValue, eax;
// LINE 690:
	__asm        cmp    lReturnValue, 0xFFFFFFFF;
	__asm        je     near ptr 0x004AC7F9;
	__asm        cmp    lReturnValue, 0;
	__asm        jne    near ptr 0x004AC800;
// LINE 691:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC80A;
// LINE 692:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC80A;
// LINE 693:
}

// FUNCTION: COPTER_D 0x004ac811
long MIFF::WriteDataRecord(long lRecordType, char * ptrData, long lDataLength) {
	long lReturnValue;
	long lRecordLength;

// LINE 704:
	__asm        mov    eax, lDataLength;
	__asm        add    eax, 8;
	__asm        mov    lRecordLength, eax;
// LINE 707:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x004AC83B;
	__asm        jmp    near ptr 0x004AC840;
	__asm        jmp    near ptr 0x004AC85F;
	__asm        jmp    near ptr 0x004AC84F;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004AC85F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x120], 2;
	__asm        je     near ptr 0x004AC866;
// LINE 708:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC8F4;
// LINE 709:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 0;
// LINE 711:
	__asm        push   4;
	__asm        lea    eax, lRecordType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC890;
// LINE 712:
	__asm        push   4;
	__asm        lea    eax, lRecordLength;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC8AD;
// LINE 715:
	__asm        jmp    near ptr 0x004AC8B2;
	__asm        mov    eax, lDataLength;
	__asm        push   eax;
	__asm        mov    eax, ptrData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        mov    lReturnValue, eax;
// LINE 721:
	__asm        cmp    lReturnValue, 0xFFFFFFFF;
	__asm        je     near ptr 0x004AC8E3;
	__asm        cmp    lReturnValue, 0;
	__asm        jne    near ptr 0x004AC8EA;
// LINE 722:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AC8F4;
// LINE 723:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC8F4;
// LINE 724:
}

// FUNCTION: COPTER_D 0x004ac8fb
long MIFF::WriteEnd() {
	long lPresentPosition;
	long lFileLength;

// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _tell;
	__asm        add    esp, 4;
	__asm        mov    lPresentPosition, eax;
	__asm        jmp    near ptr 0x004AC921;
// LINE 741:
	__asm        mov    eax, lPresentPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _chsize;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x004AC93C;
// LINE 742:
	__asm        mov    ecx, this;
	__asm        call   PFile::Length;
	__asm        mov    lFileLength, eax;
// LINE 743:
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC962;
// LINE 744:
	__asm        push   4;
	__asm        lea    eax, lFileLength;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC97F;
// LINE 745:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 1;
// LINE 746:
	__asm        push   2;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AC9A7;
// LINE 747:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AC9B1;
// LINE 748:
}



// Contribution: 1:000ab9c0-000ab9de Module: 6, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000ab9e0-000ab9fe Module: 6, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000aba00-000aba21 Module: 6, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000aba30-000aba4e Module: 6, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000aba50-000aba88 Module: 6, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004aca50
// MIFF::`scalar deleting destructor'



// Contribution: 2:00002950-000029bf Module: 6, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591950
// ??_7MIFF@@6B@
