// Module: Prefsmgr.obj
// Source: C:\Copter\source\sparkal\Prefsmgr.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ struct list<NotificationItem>::list_node_buffer (forward reference);
struct list<NotificationItem>::list_node_buffer{ // packed(0x8 bytes) TI: 0x26b1
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<NotificationItem>::list_node *buffer;
};

// Type: /*packed*/ struct list<NotificationItem>::list_node (forward reference);
struct list<NotificationItem>::list_node{ // packed(0x10 bytes) TI: 0x26b3
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class NotificationItem data; // 0x8 bytes
};

// Type: uint32_t;

// Type: /*packed*/ struct list<PreferenceItem>::list_node_buffer (forward reference);
struct list<PreferenceItem>::list_node_buffer{ // packed(0x8 bytes) TI: 0x264e
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<PreferenceItem>::list_node *buffer;
};

// Type: /*packed*/ struct list<PreferenceItem>::list_node (forward reference);
struct list<PreferenceItem>::list_node{ // packed(0x14 bytes) TI: 0x2650
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class PreferenceItem data; // 0xc bytes
};

// Type: /*packed*/ class PreferenceItem (forward reference);
class PreferenceItem{ // packed(0xc bytes) TI: 0x2577
public:
	void PreferenceItem(const /*packed*/ class PreferenceItem&);
	void PreferenceItem();
	void ~PreferenceItem();
	/*packed*/ class PreferenceItem& operator=(const /*packed*/ class PreferenceItem&);
	int32_t Compare(const /*packed*/ class PreferenceItem&);
	/*packed*/ class PreferenceItem* DuplicatePointer();
	/*+0x0*/   long lPreferenceType;
	/*+0x4*/   long lPreferenceDataLength;
	/*+0x8*/   char * chPreferenceData;
};

// Type: void;

// Type: int32_t;

// Type: /*packed*/ class PreferenceManager (forward reference);
// VTABLE: COPTER_D 0x00590db0
class PreferenceManager{ // packed(0x28 bytes) TI: 0x26c8
protected:
	/*+0x4*/   int32_t bSaveFileAtAllChanges;
	/*+0x8*/   /*packed*/ class list<PreferenceItem> myPreferences; // 0x8 bytes
	/*+0x10*/  /*packed*/ class MIFF *miffPrefsFile;
	/*+0x14*/  long lFileCreator;
	/*+0x18*/  long lFileType;
	/*+0x1c*/  long lFileVersion;
	/*+0x20*/  int32_t bPrefsDirty;
	/*+0x24*/  int32_t bPrefsLocked;
public:
	void PreferenceManager(long, long, long, int32_t);
	int32_t IPreferenceManager(char *);
	virtual void ~PreferenceManager(); // vtable+0x0
	virtual long SaveAllPrefs(); // vtable+0x4
	virtual long LoadAllPrefs(); // vtable+0x8
	virtual long ClearPrefsMemory(); // vtable+0xc
	virtual void EnumeratePrefs(); // vtable+0x10
	virtual /*packed*/ class PreferenceItem* GetPrefPointer(long); // vtable+0x14
	virtual /*packed*/ class PreferenceItem* GetPrefCopy(long); // vtable+0x18
	virtual char * GetPrefDataPointer(long); // vtable+0x1c
	virtual char * GetPrefDataCopy(long); // vtable+0x20
	virtual long GetPrefDataLength(long); // vtable+0x24
	virtual long SetPref(/*packed*/ class PreferenceItem*); // vtable+0x28
	virtual long SetPref(long, char *, long); // vtable+0x2c
	virtual long RemovePref(long); // vtable+0x30
};

// Type: long;

// Type: char *;

// Type: /*packed*/ class list<PreferenceItem>::iterator;
class list<PreferenceItem>::iterator : public bidirectional_iterator<PreferenceItem,int>
{ // packed(0x4 bytes) TI: 0x264c
protected:
	/*+0x0*/   /*packed*/ struct list<PreferenceItem>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<PreferenceItem>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<PreferenceItem>::iterator&);
	/*packed*/ class PreferenceItem& operator*();
	/*packed*/ class list<PreferenceItem>::iterator operator++(int32_t);
	/*packed*/ class list<PreferenceItem>::iterator& operator++();
	/*packed*/ class list<PreferenceItem>::iterator operator--(int32_t);
	/*packed*/ class list<PreferenceItem>::iterator& operator--();
};

// Type: char;

// Type: /*packed*/ class PreferenceItem;
class PreferenceItem{ // packed(0xc bytes) TI: 0x2577
public:
	void PreferenceItem(const /*packed*/ class PreferenceItem&);
	void PreferenceItem();
	void ~PreferenceItem();
	/*packed*/ class PreferenceItem& operator=(const /*packed*/ class PreferenceItem&);
	int32_t Compare(const /*packed*/ class PreferenceItem&);
	/*packed*/ class PreferenceItem* DuplicatePointer();
	/*+0x0*/   long lPreferenceType;
	/*+0x4*/   long lPreferenceDataLength;
	/*+0x8*/   char * chPreferenceData;
};

// Type: /*packed*/ class NotificationPreferenceManager (forward reference);
// VTABLE: COPTER_D 0x00590de8
class NotificationPreferenceManager : public PreferenceManager
{ // packed(0x30 bytes) TI: 0x2539
public:
	/*+0x28*/  /*packed*/ class list<NotificationItem> myNotifications; // 0x8 bytes
	void NotificationPreferenceManager(long, long, long, int32_t);
	virtual long SetPref(/*packed*/ class PreferenceItem*) /* override */;
	virtual long SetPref(long, char *, long) /* override */;
	virtual int32_t AddNotification(/*packed*/ class NotificationItem&); // vtable+0x34
	virtual int32_t AddNotification(long, /*packed*/ class NotificationSink*); // vtable+0x38
	virtual int32_t RemoveNotification(/*packed*/ class NotificationSink*, long); // vtable+0x3c
	virtual void DoNotification(long); // vtable+0x40
};

// Type: /*packed*/ class NotificationSink (forward reference);
// VTABLE: COPTER_D 0x0058f5c8
class NotificationSink{ // packed(0x4 bytes) TI: 0x2ae9
public:
	virtual void DoNotificationChange(long, /*unpacked*/ class PreferenceManager*); // vtable+0x0
};

// Type: /*packed*/ class NotificationItem;
class NotificationItem{ // packed(0x8 bytes) TI: 0x2557
public:
	/*+0x0*/   long lPreferenceType;
	/*+0x4*/   /*packed*/ class NotificationSink *myNotificationSink;
	void NotificationItem(long, /*packed*/ class NotificationSink*);
	void NotificationItem(const /*packed*/ class NotificationItem&);
	void NotificationItem();
	/*packed*/ class NotificationItem& operator=(const /*packed*/ class NotificationItem&);
};

// Type: /*packed*/ class NotificationItem (forward reference);
class NotificationItem{ // packed(0x8 bytes) TI: 0x2557
public:
	/*+0x0*/   long lPreferenceType;
	/*+0x4*/   /*packed*/ class NotificationSink *myNotificationSink;
	void NotificationItem(long, /*packed*/ class NotificationSink*);
	void NotificationItem(const /*packed*/ class NotificationItem&);
	void NotificationItem();
	/*packed*/ class NotificationItem& operator=(const /*packed*/ class NotificationItem&);
};

// Type: /*packed*/ class list<NotificationItem>::iterator;
class list<NotificationItem>::iterator : public bidirectional_iterator<NotificationItem,int>
{ // packed(0x4 bytes) TI: 0x26af
protected:
	/*+0x0*/   /*packed*/ struct list<NotificationItem>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<NotificationItem>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<NotificationItem>::iterator&);
	/*packed*/ class NotificationItem& operator*();
	/*packed*/ class list<NotificationItem>::iterator operator++(int32_t);
	/*packed*/ class list<NotificationItem>::iterator& operator++();
	/*packed*/ class list<NotificationItem>::iterator operator--(int32_t);
	/*packed*/ class list<NotificationItem>::iterator& operator--();
};

// Type: /*packed*/ class list<PreferenceItem> (forward reference);
class list<PreferenceItem>{ // packed(0x8 bytes) TI: 0x262a
	using void_pointer = void * __ptr32;
	struct list<PreferenceItem>::list_node{ // packed(0x14 bytes) TI: 0x2650
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class PreferenceItem data; // 0xc bytes
	};
protected:
	static /*packed*/ class allocator<list<PreferenceItem>::list_node> list_node_allocator;
	static /*packed*/ class allocator<PreferenceItem> value_allocator;
	using value_type = /*packed*/ class PreferenceItem;
	using value_allocator_type = /*packed*/ class allocator<PreferenceItem>;
	using pointer = /*packed*/ class PreferenceItem*;
	using reference = /*packed*/ class PreferenceItem&;
	using const_reference = const /*packed*/ class PreferenceItem&;
	using list_node_allocator_type = /*packed*/ class allocator<list<PreferenceItem>::list_node>;
	using link_type = /*packed*/ struct list<PreferenceItem>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<PreferenceItem>::list_node_buffer{ // packed(0x8 bytes) TI: 0x264e
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<PreferenceItem>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<PreferenceItem>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<PreferenceItem>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<PreferenceItem>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<PreferenceItem>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<PreferenceItem>::list_node *free_list;
	static /*packed*/ struct list<PreferenceItem>::list_node *next_avail;
	static /*packed*/ struct list<PreferenceItem>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<PreferenceItem>::list_node* get_node();
	void put_node(/*packed*/ struct list<PreferenceItem>::list_node*);
	/*+0x0*/   /*packed*/ struct list<PreferenceItem>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<PreferenceItem>::iterator : public bidirectional_iterator<PreferenceItem,int>
	{ // packed(0x4 bytes) TI: 0x264c
	protected:
		/*+0x0*/   /*packed*/ struct list<PreferenceItem>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<PreferenceItem>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<PreferenceItem>::iterator&);
		/*packed*/ class PreferenceItem& operator*();
		/*packed*/ class list<PreferenceItem>::iterator operator++(int32_t);
		/*packed*/ class list<PreferenceItem>::iterator& operator++();
		/*packed*/ class list<PreferenceItem>::iterator operator--(int32_t);
		/*packed*/ class list<PreferenceItem>::iterator& operator--();
	};
	class list<PreferenceItem>::const_iterator : public bidirectional_iterator<PreferenceItem,int>
	{ // packed(0x4 bytes) TI: 0x263f
	protected:
		/*+0x0*/   /*packed*/ struct list<PreferenceItem>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<PreferenceItem>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<PreferenceItem>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<PreferenceItem>::const_iterator&);
		const /*packed*/ class PreferenceItem& operator*();
		/*packed*/ class list<PreferenceItem>::const_iterator operator++(int32_t);
		/*packed*/ class list<PreferenceItem>::const_iterator& operator++();
		/*packed*/ class list<PreferenceItem>::const_iterator operator--(int32_t);
		/*packed*/ class list<PreferenceItem>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int>;
public:
	void list<PreferenceItem>(const /*packed*/ class list<PreferenceItem>&);
	void list<PreferenceItem>(const /*packed*/ class PreferenceItem*, const /*packed*/ class PreferenceItem*);
	void list<PreferenceItem>(uint32_t, const /*packed*/ class PreferenceItem&);
	void list<PreferenceItem>();
	/*packed*/ class list<PreferenceItem>::const_iterator begin();
	/*packed*/ class list<PreferenceItem>::iterator begin();
	/*packed*/ class list<PreferenceItem>::const_iterator end();
	/*packed*/ class list<PreferenceItem>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class PreferenceItem& front();
	/*packed*/ class PreferenceItem& front();
	const /*packed*/ class PreferenceItem& back();
	/*packed*/ class PreferenceItem& back();
	void swap(/*packed*/ class list<PreferenceItem>&);
	void insert(/*packed*/ class list<PreferenceItem>::iterator, uint32_t, const /*packed*/ class PreferenceItem&);
	void insert(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>::const_iterator, /*packed*/ class list<PreferenceItem>::const_iterator);
	void insert(/*packed*/ class list<PreferenceItem>::iterator, const /*packed*/ class PreferenceItem*, const /*packed*/ class PreferenceItem*);
	/*packed*/ class list<PreferenceItem>::iterator insert(/*packed*/ class list<PreferenceItem>::iterator, const /*packed*/ class PreferenceItem&);
	void push_front(const /*packed*/ class PreferenceItem&);
	void push_back(const /*packed*/ class PreferenceItem&);
	void erase(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>::iterator);
	void erase(/*packed*/ class list<PreferenceItem>::iterator);
	void pop_front();
	void pop_back();
	void ~list<PreferenceItem>();
	/*packed*/ class list<PreferenceItem>& operator=(const /*packed*/ class list<PreferenceItem>&);
protected:
	void transfer(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>::iterator);
public:
	void splice(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>&, /*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>::iterator);
	void splice(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>&, /*packed*/ class list<PreferenceItem>::iterator);
	void splice(/*packed*/ class list<PreferenceItem>::iterator, /*packed*/ class list<PreferenceItem>&);
	void remove(const /*packed*/ class PreferenceItem&);
	void unique();
	void merge(/*packed*/ class list<PreferenceItem>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class PreferenceManager;
// VTABLE: COPTER_D 0x00590db0
class PreferenceManager{ // packed(0x28 bytes) TI: 0x26c8
protected:
	/*+0x4*/   int32_t bSaveFileAtAllChanges;
	/*+0x8*/   /*packed*/ class list<PreferenceItem> myPreferences; // 0x8 bytes
	/*+0x10*/  /*packed*/ class MIFF *miffPrefsFile;
	/*+0x14*/  long lFileCreator;
	/*+0x18*/  long lFileType;
	/*+0x1c*/  long lFileVersion;
	/*+0x20*/  int32_t bPrefsDirty;
	/*+0x24*/  int32_t bPrefsLocked;
public:
	void PreferenceManager(long, long, long, int32_t);
	int32_t IPreferenceManager(char *);
	virtual void ~PreferenceManager(); // vtable+0x0
	virtual long SaveAllPrefs(); // vtable+0x4
	virtual long LoadAllPrefs(); // vtable+0x8
	virtual long ClearPrefsMemory(); // vtable+0xc
	virtual void EnumeratePrefs(); // vtable+0x10
	virtual /*packed*/ class PreferenceItem* GetPrefPointer(long); // vtable+0x14
	virtual /*packed*/ class PreferenceItem* GetPrefCopy(long); // vtable+0x18
	virtual char * GetPrefDataPointer(long); // vtable+0x1c
	virtual char * GetPrefDataCopy(long); // vtable+0x20
	virtual long GetPrefDataLength(long); // vtable+0x24
	virtual long SetPref(/*packed*/ class PreferenceItem*); // vtable+0x28
	virtual long SetPref(long, char *, long); // vtable+0x2c
	virtual long RemovePref(long); // vtable+0x30
};

// Type: /*packed*/ struct bidirectional_iterator<NotificationItem,int>;
struct bidirectional_iterator<NotificationItem,int>{ // packed(0x1 bytes) TI: 0x24b4
};

// Type: /*packed*/ struct bidirectional_iterator<PreferenceItem,int>;
struct bidirectional_iterator<PreferenceItem,int>{ // packed(0x1 bytes) TI: 0x253a
};



// Contribution: 1:0007ab70-0007caa5 Module: 32, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0047bb70
void PreferenceItem::PreferenceItem() {
// LINE 18:
	this->lPreferenceType = 0x0;
// LINE 19:
	this->lPreferenceDataLength = 0x0;
// LINE 20:
	this->chPreferenceData = 0x0;
// LINE 21:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047bba6
void PreferenceItem::PreferenceItem(const /*packed*/ class PreferenceItem& P1) {
// LINE 32:
	this->lPreferenceType = P1.lPreferenceType;
// LINE 33:
	this->lPreferenceDataLength = P1.lPreferenceDataLength;
// LINE 35:
	__asm        mov    eax, P1;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T88;
// LINE 36:
	this->chPreferenceData = operator new(this->lPreferenceDataLength);
// LINE 37:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T66;
// LINE 38:
	this->lPreferenceDataLength = 0x0;
	this->lPreferenceType = this->lPreferenceDataLength;
// LINE 41:
_T66:
	memcpy(this->lPreferenceDataLength, P1.chPreferenceData, this->chPreferenceData);
// LINE 43:
	__asm        jmp    _T92;
// LINE 44:
_T88:
	this->chPreferenceData = 0x0;
// LINE 45:
_T92:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047bc47
void PreferenceItem::~PreferenceItem() {
// LINE 53:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T34;
// LINE 54:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 55:
_T34:
	return;
}

// FUNCTION: COPTER_D 0x0047bc85
/*packed*/ class PreferenceItem& PreferenceItem::operator=(const /*packed*/ class PreferenceItem& P2) {
// LINE 65:
	this->lPreferenceType = P2.lPreferenceType;
// LINE 66:
	this->lPreferenceDataLength = P2.lPreferenceDataLength;
// LINE 67:
	__asm        mov    eax, P2;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T88;
// LINE 68:
	this->chPreferenceData = operator new(this->lPreferenceDataLength);
// LINE 69:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T66;
// LINE 70:
	this->lPreferenceDataLength = 0x0;
	this->lPreferenceType = this->lPreferenceDataLength;
// LINE 73:
_T66:
	memcpy(this->lPreferenceDataLength, P2.chPreferenceData, this->chPreferenceData);
// LINE 75:
	__asm        jmp    _T92;
// LINE 76:
_T88:
	this->chPreferenceData = 0x0;
// LINE 77:
_T92:
	return this;
// LINE 78:
}

// FUNCTION: COPTER_D 0x0047bd26
int32_t operator==(const /*packed*/ class PreferenceItem& P1, const /*packed*/ class PreferenceItem& P2) {
// LINE 86:
_T1c:
_T1e:
	return (P2 != P1);
// LINE 87:
}

// FUNCTION: COPTER_D 0x0047bd4e
int32_t PreferenceItem::Compare(const /*packed*/ class PreferenceItem& P2) {
// LINE 95:
	__asm        mov    eax, P2;
	__asm        cmp    this, eax;
	__asm        jne    _T22;
// LINE 96:
	return 0x1;
// LINE 97:
_T22:
	return 0x0;
// LINE 113:
}

// FUNCTION: COPTER_D 0x0047bd7e
int32_t operator<(const /*packed*/ class PreferenceItem& P1, const /*packed*/ class PreferenceItem& P2) {
// LINE 120:
_T20:
_T22:
	return (P1.lPreferenceType >= P2.lPreferenceType);
// LINE 121:
}

// FUNCTION: COPTER_D 0x0047bdaa
/*packed*/ class PreferenceItem* PreferenceItem::DuplicatePointer() {
	/*bp-0x4*/   /*packed*/ class PreferenceItem *prefItemReturn;

// LINE 132:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-8];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        mov    prefItemReturn, eax;
	__asm        jmp    _T3a;
_T33:
	prefItemReturn = 0x0;
// LINE 133:
_T3a:
	prefItemReturn->lPreferenceType = this->lPreferenceType;
// LINE 134:
	prefItemReturn->lPreferenceDataLength = this->lPreferenceDataLength;
// LINE 135:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Te1;
// LINE 136:
	prefItemReturn->chPreferenceData = operator new(this->lPreferenceDataLength);
// LINE 137:
	__asm        mov    eax, prefItemReturn;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta1;
// LINE 139:
	memcpy(this->lPreferenceDataLength, this->chPreferenceData, prefItemReturn->chPreferenceData);
// LINE 141:
	__asm        jmp    _Tdc;
// LINE 142:
_Ta1:
	__asm        mov    eax, prefItemReturn;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Td5;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
// LINE 143:
_Td5:
	prefItemReturn = 0x0;
// LINE 146:
_Tdc:
	__asm        jmp    _Teb;
// LINE 147:
_Te1:
	prefItemReturn->chPreferenceData = 0x0;
// LINE 148:
_Teb:
	return prefItemReturn;
// LINE 149:
}

// FUNCTION: COPTER_D 0x0047bea2
void PreferenceManager::PreferenceManager(long lTheFileCreator, long lTheFileType, long lTheFileVersion, int32_t bSaveTheFileAtAllChanges) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        inc    list<PreferenceItem>::number_of_lists;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T48;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T48:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T210;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9d;
_T9d:
	exit(0x1);
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0xCC;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tec;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tf2;
_Tec:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        jmp    _Tfc;
_Tfc:
	__asm        jmp    _T101;
_T101:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T155;
_T155:
	exit(0x1);
_T15f:
	__asm        jmp    _T164;
_T164:
	__asm        jmp    _T169;
_T169:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<PreferenceItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0xCC;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1cc;
_T1c6:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1cc:
	__asm        jmp    _T1d1;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        jmp    _T1db;
_T1db:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, list<PreferenceItem>::next_avail;
	__asm        mov    list<PreferenceItem>::last, eax;
	__asm        jmp    _T1f6;
_T1f6:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T210:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T225:
	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T255;
_T255:
	this-><vftable> = 0x590db0;
// LINE 166:
	this->bSaveFileAtAllChanges = bSaveTheFileAtAllChanges;
// LINE 167:
	this->bPrefsDirty = 0x0;
// LINE 168:
	this->bPrefsLocked = 0x0;
// LINE 169:
	this->lFileCreator = lTheFileCreator;
// LINE 170:
	this->lFileType = lTheFileType;
// LINE 171:
	this->lFileVersion = lTheFileVersion;
// LINE 172:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047c147
int32_t PreferenceManager::IPreferenceManager(char * szFilePath) {
// LINE 179:
	__asm        push   0x148;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3d;

	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   MIFF::MIFF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T47;
_T3d:
	this->miffPrefsFile = 0x0;
// LINE 180:
_T47:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T5b;
// LINE 181:
	return 0x0;
// LINE 182:
_T5b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 183:
	return 0x1;
// LINE 184:
}

// FUNCTION: COPTER_D 0x0047c1be
void PreferenceManager::~PreferenceManager() {

	this-><vftable> = 0x590db0;
// LINE 192:
	this->PreferenceManager::SaveAllPrefs();
// LINE 193:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T54;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T54;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T54;
// LINE 195:
_T54:
	__asm        jmp    _T59;
_T59:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        jmp    _T72;
_T72:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T88;
_T88:
	__asm        jmp    _T8d;
_T8d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
_LOOP_99:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x38], eax;
	__asm        jne    _Taf;

	__asm        jmp    _Tc3;

	__asm        jmp    _Taf;
_Taf:
	__asm        jmp    _Tbe;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _Tc3;
_Tbe:
	__asm        jmp    _Tc8;
_Tc3:
	__asm        jmp    _T16b;
_Tc8:
	__asm        jmp    _Td7;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T16b;
_Td7:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Tea;
_Tea:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    ecx, [ebp-0x30];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _T13a;

	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T13a:
	__asm        jmp    _T13f;
_T13f:
	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    _T15b;
_T15b:
	this->myPreferences.length--;
	__asm        jmp    _T166;
_T166:
	__asm        jmp    _LOOP_99;
_T16b:
	__asm        jmp    _T170;
_T170:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    _T190;
_T190:
	__asm        dec    list<PreferenceItem>::number_of_lists;
	__asm        jne    _T21a;
__WHILE_19c:
	__asm        cmp    list<PreferenceItem>::buffer_list, 0;
	__asm        je     _T1f7;

	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        jmp    _T1dc;
_T1dc:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1ed;
_T1ed:
	__asm        jmp    _T1f2;
_T1f2:
	__asm        jmp    __WHILE_19c;
_T1f7:
	list<PreferenceItem>::free_list = 0x0;
	list<PreferenceItem>::next_avail = 0x0;
	list<PreferenceItem>::last = 0x0;
	__asm        jmp    _T21a;
_T21a:
	return;
}

// FUNCTION: COPTER_D 0x0047c3e2
void PreferenceManager::EnumeratePrefs() {
	/*bp-0x4*/   /*packed*/ class list<PreferenceItem>::iterator i;
	/*bp-0x8*/   long j;

// LINE 204:
	__asm        jmp    _T11;
// LINE 207:
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T27;
_T27:
	__asm        jmp    _T2c;
_T2c:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 207:
_LOOP_37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _T4a;
_T4a:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T69;
_T69:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _Tc1;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tc1;
// LINE 208:
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, i.node;
	__asm        add    eax, 8;
	__asm        mov    eax, [eax];
	__asm        mov    j, eax;
	__asm        jmp    _LOOP_37;
// LINE 209:
_Tc1:
	return;
}

// FUNCTION: COPTER_D 0x0047c4ad
long PreferenceManager::SaveAllPrefs() {
	/*bp-0x2c*/  char szStringRudelyEmbeddedDirectly[41]; // 0x29 bytes
	/*bp-0x30*/  /*packed*/ class list<PreferenceItem>::iterator i;

// LINE 227:
	__asm        jmp    _T11;
// LINE 228:
_T11:
	__asm        mov    esi, 0x599A30;
	__asm        lea    edi, szStringRudelyEmbeddedDirectly[0];
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsb;
// LINE 230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T35;
// LINE 231:
	return 0x0;
// LINE 232:
_T35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T49;
// LINE 233:
	return 0x0;
// LINE 235:
_T49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+8];
	__asm        test   eax, eax;
	__asm        je     _T1a3;
// LINE 239:
	__asm        lea    eax, szStringRudelyEmbeddedDirectly[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        lea    eax, szStringRudelyEmbeddedDirectly[0];
	__asm        push   eax;
	__asm        push   0xFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x64];
// LINE 241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Tbd;
_Tbd:
	__asm        jmp    _Tc2;
_Tc2:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _Teb;
// LINE 241:
_LOOP_cd:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Teb;
_Teb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Tff;
_Tff:
	__asm        jmp    _T104;
_T104:
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    i.node, eax;
	__asm        jne    _T11a;

	__asm        jmp    _T12e;

	__asm        jmp    _T11a;
_T11a:
	__asm        jmp    _T129;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T12e;
_T129:
	__asm        jmp    _T133;
_T12e:
	__asm        jmp    _T17c;
_T133:
	__asm        jmp    _T142;

	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T17c;
// LINE 243:
_T142:
	__asm        jmp    _T147;
_T147:
	__asm        jmp    _T14c;
_T14c:
	__asm        jmp    _T151;
_T151:
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x64];
	__asm        jmp    _LOOP_cd;
// LINE 245:
_T17c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x6C];
// LINE 246:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 248:
	__asm        jmp    _T1aa;
// LINE 249:
_T1a3:
	return 0x0;
// LINE 251:
_T1aa:
	this->bPrefsDirty = 0x0;
// LINE 252:
	return 0x1;
// LINE 253:
}

// FUNCTION: COPTER_D 0x0047c670
long PreferenceManager::LoadAllPrefs() {
	/*bp-0x4*/   long lRecordDataSize;
	/*bp-0x10*/  /*packed*/ class PreferenceItem tempPrefItem; // 0xc bytes
	/*bp-0x14*/  int32_t bFileOK;
	/*bp-0x18*/  int32_t bStillMoreRecords;

// LINE 274:
	tempPrefItem.lPreferenceType->PreferenceItem::PreferenceItem();
// LINE 276:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T38;
// LINE 277:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 278:
_T38:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+4];
	__asm        mov    bFileOK, eax;
// LINE 279:
	__asm        cmp    bFileOK, 0;
	__asm        jne    _T6d;
// LINE 280:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    __RETURN;
// LINE 281:
_T6d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x34];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x18];
	__asm        je     _Tb2;
// LINE 282:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 283:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    __RETURN;
// LINE 286:
_Tb2:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x44];
	__asm        mov    bStillMoreRecords, eax;
// LINE 288:
_FOR_cb:
	__asm        jmp    _FOR_COND_cb;
_FOR_NEXT_cb:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x48];
	__asm        mov    bStillMoreRecords, eax;
_FOR_COND_cb:
	__asm        cmp    bStillMoreRecords, 0;
	__asm        je     _T18d;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0x114], 0xFFFFFF;
	__asm        jne    _T104;
// LINE 291:
	__asm        jmp    _FOR_NEXT_cb;
// LINE 292:
_T104:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x1C];
	__asm        mov    lRecordDataSize, eax;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x14];
	__asm        mov    tempPrefItem.lPreferenceType, eax;
// LINE 294:
	tempPrefItem.lPreferenceDataLength = lRecordDataSize;
// LINE 295:
	tempPrefItem.chPreferenceData = operator new(lRecordDataSize);
// LINE 296:
	__asm        mov    eax, lRecordDataSize;
	__asm        push   eax;
	__asm        mov    eax, tempPrefItem.chPreferenceData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x40];
// LINE 297:
	__asm        lea    eax, tempPrefItem.lPreferenceType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 298:
	__asm        mov    eax, tempPrefItem.chPreferenceData;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 299:
	tempPrefItem.chPreferenceData = 0x0;
// LINE 300:
	__asm        jmp    _FOR_NEXT_cb;
// LINE 301:
_T18d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 302:
	this->bPrefsDirty = 0x0;
// LINE 303:
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    __RETURN;
// LINE 304:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047c834
long PreferenceManager::ClearPrefsMemory() {
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T3b;
_T3b:
	__asm        jmp    _T40;
_T40:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x2C], eax;
_LOOP_4c:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        jne    _T62;

	__asm        jmp    _T76;

	__asm        jmp    _T62;
_T62:
	__asm        jmp    _T71;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T76;
_T71:
	__asm        jmp    _T7b;
_T76:
	__asm        jmp    _T11e;
_T7b:
	__asm        jmp    _T8a;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T11e;
_T8a:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T9d;
_T9d:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Ta8;
_Ta8:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tce;
_Tce:
	__asm        mov    ecx, [ebp-0x24];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _Ted;

	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Ted:
	__asm        jmp    _Tf2;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    _T10e;
_T10e:
	this->myPreferences.length--;
	__asm        jmp    _T119;
_T119:
	__asm        jmp    _LOOP_4c;
_T11e:
	__asm        jmp    _T123;
// LINE 314:
_T123:
	this->bPrefsDirty = 0x1;
// LINE 315:
	return 0x1;
// LINE 316:
}

// FUNCTION: COPTER_D 0x0047c970
long PreferenceManager::RemovePref(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class list<PreferenceItem>::iterator i;

// LINE 327:
	__asm        jmp    _T11;
// LINE 329:
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T27;
_T27:
	__asm        jmp    _T2c;
_T2c:
	__asm        mov    eax, [ebp-8];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 329:
_LOOP_37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _T4a;
_T4a:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T69;
_T69:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    i.node, eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _T162;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T162;
// LINE 330:
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, i.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T15d;

	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
// LINE 331:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Te6;
_Te6:
	__asm        mov    ecx, [ebp-0x28];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _T105;

	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T105:
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    _T126;
_T126:
	this->myPreferences.length--;
	__asm        jmp    _T131;
// LINE 332:
_T131:
	this->bPrefsDirty = 0x1;
// LINE 333:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T153;
// LINE 334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 335:
_T153:
	return 0x1;
// LINE 337:
_T15d:
	__asm        jmp    _LOOP_37;
// LINE 338:
_T162:
	return 0x0;
// LINE 339:
}

// FUNCTION: COPTER_D 0x0047cae0
/*packed*/ class PreferenceItem* PreferenceManager::GetPrefPointer(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class list<PreferenceItem>::iterator i;

// LINE 355:
	__asm        jmp    _T11;
// LINE 357:
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T27;
_T27:
	__asm        jmp    _T2c;
_T2c:
	__asm        mov    eax, [ebp-8];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 357:
_LOOP_37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    _T4a;
_T4a:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T69;
_T69:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _Td5;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Td5;
// LINE 358:
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, i.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Td0;
// LINE 359:
	__asm        jmp    _Tc5;
_Tc5:
	return (i.node + 0x8);
// LINE 360:
_Td0:
	__asm        jmp    _LOOP_37;
// LINE 361:
_Td5:
	return 0x0;
// LINE 362:
}

// FUNCTION: COPTER_D 0x0047cbc3
/*packed*/ class PreferenceItem* PreferenceManager::GetPrefCopy(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class PreferenceItem *prefItemTemp;
	/*bp-0x8*/   /*packed*/ class PreferenceItem *prefItemReturn;

// LINE 379:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 380:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T3b;
// LINE 381:
	prefItemReturn = prefItemTemp->PreferenceItem::DuplicatePointer();
// LINE 382:
	return prefItemReturn;
// LINE 384:
_T3b:
	return 0x0;
// LINE 385:
}

// FUNCTION: COPTER_D 0x0047cc0c
char * PreferenceManager::GetPrefDataPointer(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class PreferenceItem *prefItemTemp;

// LINE 404:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 405:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T33;
// LINE 406:
	return prefItemTemp->chPreferenceData;
// LINE 408:
_T33:
	return 0x0;
// LINE 409:
}

// FUNCTION: COPTER_D 0x0047cc4d
char * PreferenceManager::GetPrefDataCopy(long lPrefType) {
	/*bp-0x4*/   char * chDataCopy;
	/*bp-0x8*/   /*packed*/ class PreferenceItem *prefItemTemp;

// LINE 426:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 427:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T5c;
// LINE 428:
	chDataCopy = operator new(prefItemTemp->lPreferenceDataLength);
// LINE 430:
	memcpy(prefItemTemp->lPreferenceDataLength, prefItemTemp->chPreferenceData, chDataCopy);
// LINE 433:
	return chDataCopy;
// LINE 435:
_T5c:
	return 0x0;
// LINE 436:
}

// FUNCTION: COPTER_D 0x0047ccb7
long PreferenceManager::GetPrefDataLength(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class PreferenceItem *prefItemTemp;

// LINE 453:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 454:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T33;
// LINE 455:
	return prefItemTemp->lPreferenceDataLength;
// LINE 456:
_T33:
	return 0x0;
// LINE 457:
}

// FUNCTION: COPTER_D 0x0047ccf8
long PreferenceManager::SetPref(long lPrefType, char * chPref, long lSizeofPref) {
	/*bp-0x4*/   /*packed*/ class PreferenceItem *prefItemToSet;

// LINE 472:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 474:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3e;

	__asm        mov    ecx, [ebp-8];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        mov    prefItemToSet, eax;
	__asm        jmp    _T45;
_T3e:
	prefItemToSet = 0x0;
// LINE 475:
_T45:
	prefItemToSet->lPreferenceType = lPrefType;
// LINE 476:
	prefItemToSet->lPreferenceDataLength = lSizeofPref;
// LINE 477:
	prefItemToSet->chPreferenceData = operator new(lSizeofPref);
// LINE 478:
	__asm        mov    eax, prefItemToSet;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Tb0;
// LINE 479:
	__asm        mov    eax, prefItemToSet;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta9;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta4;
_Ta4:
	__asm        jmp    _Ta9;
// LINE 480:
_Ta9:
	return 0x0;
// LINE 484:
_Tb0:
	memcpy(lSizeofPref, chPref, prefItemToSet->chPreferenceData);
// LINE 488:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 489:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tea;
_Tea:
	__asm        jmp    _Tef;
_Tef:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T121;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T16c;
_T121:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T157;

	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   list<PreferenceItem>::add_new_buffer;
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T16c;
_T157:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
_T16c:
	__asm        jmp    _T171;
_T171:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T18a;
_T18a:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1a5;

	__asm        mov    eax, prefItemToSet;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        jmp    _T1a5;
_T1a5:
	__asm        jmp    _T1aa;
_T1aa:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T1e3;
_T1e3:
	__asm        jmp    _T1e8;
_T1e8:
	__asm        jmp    _T1ed;
// LINE 492:
_T1ed:
	__asm        mov    eax, prefItemToSet;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T221;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T21c;
_T21c:
	__asm        jmp    _T221;
// LINE 494:
_T221:
	this->bPrefsDirty = 0x1;
// LINE 495:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T243;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 497:
_T243:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 498:
	return 0x1;
// LINE 499:
}

// FUNCTION: COPTER_D 0x0047cf57
long PreferenceManager::SetPref(/*packed*/ class PreferenceItem *prefItemToUse) {
// LINE 511:
	__asm        mov    eax, prefItemToUse;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 512:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T31;
_T31:
	__asm        jmp    _T36;
_T36:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T245;
_T68:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T230;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tbd;
_Tbd:
	exit(0x1);
_Tc7:
	__asm        jmp    _Tcc;
_Tcc:
	__asm        jmp    _Td1;
_Td1:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0xCC;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T10c;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T112;
_T10c:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        jmp    _T11c;
_T11c:
	__asm        jmp    _T121;
_T121:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T17f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T175;
_T175:
	exit(0x1);
_T17f:
	__asm        jmp    _T184;
_T184:
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<PreferenceItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0xCC;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1e6;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1ec;
_T1e6:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1ec:
	__asm        jmp    _T1f1;
_T1f1:
	__asm        jmp    _T1f6;
_T1f6:
	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, list<PreferenceItem>::next_avail;
	__asm        mov    list<PreferenceItem>::last, eax;
	__asm        jmp    _T216;
_T216:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T245;
_T230:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T245:
	__asm        jmp    _T24a;
_T24a:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T263;
_T263:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T27e;

	__asm        mov    eax, prefItemToUse;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        jmp    _T27e;
_T27e:
	__asm        jmp    _T283;
_T283:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2bc;
_T2bc:
	__asm        jmp    _T2c1;
_T2c1:
	__asm        jmp    _T2c6;
// LINE 514:
_T2c6:
	this->bPrefsDirty = 0x1;
// LINE 515:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2e8;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 517:
_T2e8:
	return 0x1;
// LINE 518:
}

// FUNCTION: COPTER_D 0x0047d250
void NotificationPreferenceManager::NotificationPreferenceManager(long lTheFileCreator, long lTheFileType, long lTheFileVersion, int32_t bSaveTheFileAtAllChanges) {

	__asm        mov    eax, bSaveTheFileAtAllChanges;
	__asm        push   eax;
	__asm        mov    eax, lTheFileVersion;
	__asm        push   eax;
	__asm        mov    eax, lTheFileType;
	__asm        push   eax;
	__asm        mov    eax, lTheFileCreator;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::PreferenceManager;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        inc    list<NotificationItem>::number_of_lists;
	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<NotificationItem>::free_list, 0;
	__asm        je     _T60;

	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T237;
_T60:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        cmp    list<NotificationItem>::last, eax;
	__asm        jne    _T222;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tbf;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb5;
_Tb5:
	exit(0x1);
_Tbf:
	__asm        jmp    _Tc4;
_Tc4:
	__asm        jmp    _Tc9;
_Tc9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T104;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T10a;
_T104:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        jmp    _T114;
_T114:
	__asm        jmp    _T119;
_T119:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T174;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16a;
_T16a:
	exit(0x1);
_T174:
	__asm        jmp    _T179;
_T179:
	__asm        jmp    _T17e;
_T17e:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<NotificationItem>::buffer_list, eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<NotificationItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1db;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1e1;
_T1db:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1e1:
	__asm        jmp    _T1e6;
_T1e6:
	__asm        jmp    _T1eb;
_T1eb:
	__asm        jmp    _T1f0;
_T1f0:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<NotificationItem>::next_avail;
	__asm        mov    list<NotificationItem>::last, eax;
	__asm        jmp    _T208;
_T208:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T237;
_T222:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T237:
	__asm        jmp    _T23c;
_T23c:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x28];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T267;
_T267:
	this-><NotificationPreferenceManager+0x00> = 0x590de8;
// LINE 535:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047d4cf
int32_t NotificationPreferenceManager::AddNotification(long lPreferenceType, /*packed*/ class NotificationSink *newNotificationSink) {
	/*bp-0x8*/   /*packed*/ class NotificationItem tempNewNotificationItem; // 0x8 bytes

// LINE 547:
	__asm        mov    eax, newNotificationSink;
	__asm        push   eax;
	__asm        mov    eax, lPreferenceType;
	__asm        push   eax;
	__asm        lea    ecx, tempNewNotificationItem.lPreferenceType;
	__asm        call   NotificationItem::NotificationItem;
// LINE 548:
	__asm        lea    eax, tempNewNotificationItem.lPreferenceType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    __RETURN;
// LINE 549:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047d506
int32_t NotificationPreferenceManager::AddNotification(/*packed*/ class NotificationItem& newNotificationItem) {
// LINE 556:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<NotificationItem>::free_list, 0;
	__asm        je     _T57;

	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T22e;
_T57:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        cmp    list<NotificationItem>::last, eax;
	__asm        jne    _T219;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tb6;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tac;
_Tac:
	exit(0x1);
_Tb6:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tfb;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T101;
_Tfb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T101:
	__asm        jmp    _T106;
_T106:
	__asm        jmp    _T10b;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T16b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T161;
_T161:
	exit(0x1);
_T16b:
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<NotificationItem>::buffer_list, eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<NotificationItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x100;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d2;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1d8;
_T1d2:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1d8:
	__asm        jmp    _T1dd;
_T1dd:
	__asm        jmp    _T1e2;
_T1e2:
	__asm        jmp    _T1e7;
_T1e7:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<NotificationItem>::next_avail;
	__asm        mov    list<NotificationItem>::last, eax;
	__asm        jmp    _T1ff;
_T1ff:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T22e;
_T219:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T22e:
	__asm        jmp    _T233;
_T233:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T23e;
_T23e:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T24c;
_T24c:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T267;

	__asm        mov    eax, newNotificationItem;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   NotificationItem::NotificationItem;
	__asm        jmp    _T267;
_T267:
	__asm        jmp    _T26c;
_T26c:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x2C], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2a6;
_T2a6:
	__asm        jmp    _T2ab;
_T2ab:
	__asm        jmp    _T2b0;
// LINE 557:
_T2b0:
	return 0x1;
// LINE 558:
}

// FUNCTION: COPTER_D 0x0047d7c7
int32_t NotificationPreferenceManager::RemoveNotification(/*packed*/ class NotificationSink *theNotificationSink, long lPreferenceType) {
	/*bp-0x4*/   int32_t nFound;
	/*bp-0x8*/   /*packed*/ class list<NotificationItem>::iterator iterator;

// LINE 571:
	__asm        jmp    _T11;
// LINE 572:
_T11:
	nFound = 0x0;
// LINE 574:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T2e;
_T2e:
	__asm        jmp    _T33;
_T33:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    iterator.node, eax;
// LINE 575:
_LOOP_39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T4d;
_T4d:
	__asm        jmp    _T52;
_T52:
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T68;

	__asm        jmp    _T7c;

	__asm        jmp    _T68;
_T68:
	__asm        jmp    _T77;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T7c;
_T77:
	__asm        jmp    _T81;
_T7c:
	__asm        jmp    _T159;
_T81:
	__asm        jmp    _T90;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T159;
// LINE 577:
_T90:
	__asm        jmp    _T95;
_T95:
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, theNotificationSink;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jne    _T136;

	__asm        jmp    _Ta9;
_Ta9:
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lPreferenceType;
	__asm        cmp    [eax+8], ecx;
	__asm        je     _Tc2;

	__asm        cmp    lPreferenceType, 0;
	__asm        jne    _T136;
// LINE 579:
_Tc2:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T106;
_T106:
	__asm        jmp    _T10b;
_T10b:
	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        jmp    _T122;
_T122:
	this->myNotifications.length--;
	__asm        jmp    _T12d;
// LINE 580:
_T12d:
	nFound += 0x1;
// LINE 582:
	__asm        jmp    _T154;
// LINE 583:
_T136:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T149;
_T149:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T154;
// LINE 584:
_T154:
	__asm        jmp    _LOOP_39;
// LINE 585:
_T159:
	return nFound;
// LINE 586:
}

// FUNCTION: COPTER_D 0x0047d92f
long NotificationPreferenceManager::SetPref(long lPrefType, char * chPref, long lSizeofPref) {
	/*bp-0x4*/   long lReturnValue;

// LINE 594:
	__asm        mov    eax, lSizeofPref;
	__asm        push   eax;
	__asm        mov    eax, chPref;
	__asm        push   eax;
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::SetPref;
	__asm        mov    lReturnValue, eax;
// LINE 595:
	__asm        cmp    lReturnValue, 0;
	__asm        je     _T3c;
// LINE 596:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 597:
_T3c:
	return lReturnValue;
// LINE 598:
}

// FUNCTION: COPTER_D 0x0047d97a
long NotificationPreferenceManager::SetPref(/*packed*/ class PreferenceItem *prefItemToUse) {
	/*bp-0x4*/   long lReturnValue;

// LINE 605:
	__asm        mov    eax, prefItemToUse;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::SetPref;
	__asm        mov    lReturnValue, eax;
// LINE 606:
	__asm        cmp    lReturnValue, 0;
	__asm        je     _T36;
// LINE 607:
	__asm        mov    eax, prefItemToUse;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 608:
_T36:
	return lReturnValue;
// LINE 609:
}

// FUNCTION: COPTER_D 0x0047d9bf
void NotificationPreferenceManager::DoNotification(long lPrefType) {
	/*bp-0x4*/   /*packed*/ class list<NotificationItem>::iterator iterator;

// LINE 618:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 620:
_LOOP_27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T3b;
_T3b:
	__asm        jmp    _T40;
_T40:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tdb;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tdb;
// LINE 621:
_T7e:
	__asm        jmp    _T83;
_T83:
	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tb8;
// LINE 622:
	__asm        jmp    _T97;
_T97:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax];
// LINE 623:
_Tb8:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _Tcb;
_Tcb:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Td6;
// LINE 624:
_Td6:
	__asm        jmp    _LOOP_27;
// LINE 625:
_Tdb:
	return;
}



// Contribution: 1:0007cab0-0007cae8 Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047dab0
// PreferenceManager::`scalar deleting destructor'



// Contribution: 1:0007caf0-0007cc9d Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0047daf0
// list<PreferenceItem>::add_new_buffer



// Contribution: 1:0007cca0-0007ce7f Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047dca0
// NotificationPreferenceManager::`scalar deleting destructor'



// Contribution: 2:00001db0-00001de3 Module: 32, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for PreferenceManager @ 0x00590db0
//   00: PreferenceManager::`scalar deleting destructor' @ 0x0047dab0
//   01: PreferenceManager::SaveAllPrefs @ 0x0047c4ad
//   02: PreferenceManager::LoadAllPrefs @ 0x0047c670
//   03: PreferenceManager::ClearPrefsMemory @ 0x0047c834
//   04: PreferenceManager::EnumeratePrefs @ 0x0047c3e2
//   05: PreferenceManager::GetPrefPointer @ 0x0047cae0
//   06: PreferenceManager::GetPrefCopy @ 0x0047cbc3
//   07: PreferenceManager::GetPrefDataPointer @ 0x0047cc0c
//   08: PreferenceManager::GetPrefDataCopy @ 0x0047cc4d
//   09: PreferenceManager::GetPrefDataLength @ 0x0047ccb7
//   10: PreferenceManager::SetPref @ 0x0047cf57
//   11: PreferenceManager::SetPref @ 0x0047ccf8
//   12: PreferenceManager::RemovePref @ 0x0047c970
//   13 entries



// Contribution: 2:00001de8-00001e2b Module: 32, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for NotificationPreferenceManager @ 0x00590de8
//   00: NotificationPreferenceManager::`scalar deleting destructor' @ 0x0047dca0
//   01: PreferenceManager::SaveAllPrefs @ 0x0047c4ad
//   02: PreferenceManager::LoadAllPrefs @ 0x0047c670
//   03: PreferenceManager::ClearPrefsMemory @ 0x0047c834
//   04: PreferenceManager::EnumeratePrefs @ 0x0047c3e2
//   05: PreferenceManager::GetPrefPointer @ 0x0047cae0
//   06: PreferenceManager::GetPrefCopy @ 0x0047cbc3
//   07: PreferenceManager::GetPrefDataPointer @ 0x0047cc0c
//   08: PreferenceManager::GetPrefDataCopy @ 0x0047cc4d
//   09: PreferenceManager::GetPrefDataLength @ 0x0047ccb7
//   10: NotificationPreferenceManager::SetPref @ 0x0047d97a
//   11: NotificationPreferenceManager::SetPref @ 0x0047d92f
//   12: PreferenceManager::RemovePref @ 0x0047c970
//   13: NotificationPreferenceManager::AddNotification @ 0x0047d506
//   14: NotificationPreferenceManager::AddNotification @ 0x0047d4cf
//   15: NotificationPreferenceManager::RemoveNotification @ 0x0047d7c7
//   16: NotificationPreferenceManager::DoNotification @ 0x0047d9bf
//   17 entries



// Contribution: 3:00002a30-00002a58 Module: 32, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00002a5c-00002a5f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a5c
uint32_t list<PreferenceItem>::number_of_lists = 0;



// Contribution: 3:00002a60-00002a63 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a60
/*packed*/ struct list<PreferenceItem>::list_node *list<PreferenceItem>::last = { 0 /* todo */ };



// Contribution: 3:00002a64-00002a67 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a64
/*packed*/ struct list<PreferenceItem>::list_node *list<PreferenceItem>::next_avail = { 0 /* todo */ };



// Contribution: 3:00002a68-00002a6b Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a68
/*packed*/ struct list<PreferenceItem>::list_node *list<PreferenceItem>::free_list = { 0 /* todo */ };



// Contribution: 3:00002a6c-00002a6f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a6c
/*packed*/ struct list<PreferenceItem>::list_node_buffer *list<PreferenceItem>::buffer_list = { 0 /* todo */ };



// Contribution: 3:00002a70-00002a73 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a70
uint32_t list<NotificationItem>::number_of_lists = 0;



// Contribution: 3:00002a74-00002a77 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a74
/*packed*/ struct list<NotificationItem>::list_node *list<NotificationItem>::last = { 0 /* todo */ };



// Contribution: 3:00002a78-00002a7b Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a78
/*packed*/ struct list<NotificationItem>::list_node *list<NotificationItem>::next_avail = { 0 /* todo */ };



// Contribution: 3:00002a7c-00002a7f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a7c
/*packed*/ struct list<NotificationItem>::list_node *list<NotificationItem>::free_list = { 0 /* todo */ };



// Contribution: 3:00002a80-00002a83 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a80
/*packed*/ struct list<NotificationItem>::list_node_buffer *list<NotificationItem>::buffer_list = { 0 /* todo */ };

