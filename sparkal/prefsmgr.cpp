// Module: Prefsmgr.obj
// Source: C:\Copter\source\sparkal\Prefsmgr.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct list<NotificationItem>::list_node_buffer (forward reference);
// list<NotificationItem>::list_node_buffer Class implementation not found

// Type: struct list<NotificationItem>::list_node (forward reference);
// list<NotificationItem>::list_node Class implementation not found

// Type: uint32_t;

// Type: struct list<PreferenceItem>::list_node_buffer (forward reference);
// list<PreferenceItem>::list_node_buffer Class implementation not found

// Type: struct list<PreferenceItem>::list_node (forward reference);
// list<PreferenceItem>::list_node Class implementation not found

// Type: class PreferenceItem (forward reference);
class PreferenceItem{
public:
	void PreferenceItem(const class PreferenceItem&);
	void PreferenceItem();
	void ~PreferenceItem();
	class PreferenceItem& operator=(const class PreferenceItem&);
	int32_t Compare(const class PreferenceItem&);
	class PreferenceItem* DuplicatePointer();
	long lPreferenceType;
	long lPreferenceDataLength;
	char * chPreferenceData;
};

// Type: void;

// Type: int32_t;

// Type: class PreferenceManager (forward reference);
class PreferenceManager{
protected:
	int32_t bSaveFileAtAllChanges;
	class list<PreferenceItem> myPreferences;
	class MIFF* miffPrefsFile;
	long lFileCreator;
	long lFileType;
	long lFileVersion;
	int32_t bPrefsDirty;
	int32_t bPrefsLocked;
public:
	void PreferenceManager(long, long, long, int32_t);
	int32_t IPreferenceManager(char *);
	// vtable: 0
	intro void ~PreferenceManager();
	// vtable: 4
	intro long SaveAllPrefs();
	// vtable: 8
	intro long LoadAllPrefs();
	// vtable: 12
	intro long ClearPrefsMemory();
	// vtable: 16
	intro void EnumeratePrefs();
	// vtable: 20
	intro class PreferenceItem* GetPrefPointer(long);
	// vtable: 24
	intro class PreferenceItem* GetPrefCopy(long);
	// vtable: 28
	intro char * GetPrefDataPointer(long);
	// vtable: 32
	intro char * GetPrefDataCopy(long);
	// vtable: 36
	intro long GetPrefDataLength(long);
	// vtable: 40
	intro long SetPref(class PreferenceItem*);
	// vtable: 44
	intro long SetPref(long, char *, long);
	// vtable: 48
	intro long RemovePref(long);
};

// Type: long;

// Type: char *;

// Type: class list<PreferenceItem>::iterator;
class list<PreferenceItem>::iterator : public bidirectional_iterator<PreferenceItem,int>
{
protected:
	struct list<PreferenceItem>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<PreferenceItem>::list_node*);
public:
	int32_t operator==(const class list<PreferenceItem>::iterator&);
	class PreferenceItem& operator*();
	class list<PreferenceItem>::iterator operator++(int32_t);
	class list<PreferenceItem>::iterator& operator++();
	class list<PreferenceItem>::iterator operator--(int32_t);
	class list<PreferenceItem>::iterator& operator--();
};

// Type: char[41];

// Type: class PreferenceItem;
class PreferenceItem{
public:
	void PreferenceItem(const class PreferenceItem&);
	void PreferenceItem();
	void ~PreferenceItem();
	class PreferenceItem& operator=(const class PreferenceItem&);
	int32_t Compare(const class PreferenceItem&);
	class PreferenceItem* DuplicatePointer();
	long lPreferenceType;
	long lPreferenceDataLength;
	char * chPreferenceData;
};

// Type: class NotificationPreferenceManager (forward reference);
class NotificationPreferenceManager : public PreferenceManager
{
public:
	class list<NotificationItem> myNotifications;
	void NotificationPreferenceManager(long, long, long, int32_t);
	virtual long SetPref(class PreferenceItem*);
	virtual long SetPref(long, char *, long);
	// vtable: 52
	intro int32_t AddNotification(class NotificationItem&);
	// vtable: 56
	intro int32_t AddNotification(long, class NotificationSink*);
	// vtable: 60
	intro int32_t RemoveNotification(class NotificationSink*, long);
	// vtable: 64
	intro void DoNotification(long);
};

// Type: class NotificationSink (forward reference);
class NotificationSink{
public:
	// vtable: 0
	intro void DoNotificationChange(long, class PreferenceManager*);
};

// Type: class NotificationItem;
class NotificationItem{
public:
	long lPreferenceType;
	class NotificationSink* myNotificationSink;
	void NotificationItem(long, class NotificationSink*);
	void NotificationItem(const class NotificationItem&);
	void NotificationItem();
	class NotificationItem& operator=(const class NotificationItem&);
};

// Type: class NotificationItem (forward reference);
class NotificationItem{
public:
	long lPreferenceType;
	class NotificationSink* myNotificationSink;
	void NotificationItem(long, class NotificationSink*);
	void NotificationItem(const class NotificationItem&);
	void NotificationItem();
	class NotificationItem& operator=(const class NotificationItem&);
};

// Type: class list<NotificationItem>::iterator;
class list<NotificationItem>::iterator : public bidirectional_iterator<NotificationItem,int>
{
protected:
	struct list<NotificationItem>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<NotificationItem>::list_node*);
public:
	int32_t operator==(const class list<NotificationItem>::iterator&);
	class NotificationItem& operator*();
	class list<NotificationItem>::iterator operator++(int32_t);
	class list<NotificationItem>::iterator& operator++();
	class list<NotificationItem>::iterator operator--(int32_t);
	class list<NotificationItem>::iterator& operator--();
};

// Type: class list<PreferenceItem> (forward reference);
class list<PreferenceItem>{
	using void_pointer = void * __ptr32;
	struct list<PreferenceItem>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class PreferenceItem data;
	};
protected:
	static class allocator<list<PreferenceItem>::list_node> list_node_allocator;
	static class allocator<PreferenceItem> value_allocator;
	using value_type = class PreferenceItem;
	using value_allocator_type = class allocator<PreferenceItem>;
	using pointer = class PreferenceItem*;
	using reference = class PreferenceItem&;
	using const_reference = const class PreferenceItem&;
	using list_node_allocator_type = class allocator<list<PreferenceItem>::list_node>;
	using link_type = struct list<PreferenceItem>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<PreferenceItem>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<PreferenceItem>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<PreferenceItem>::list_node_buffer>;
	using buffer_pointer = struct list<PreferenceItem>::list_node_buffer*;
protected:
	static class allocator<list<PreferenceItem>::list_node_buffer> buffer_allocator;
	static struct list<PreferenceItem>::list_node_buffer* buffer_list;
	static struct list<PreferenceItem>::list_node* free_list;
	static struct list<PreferenceItem>::list_node* next_avail;
	static struct list<PreferenceItem>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<PreferenceItem>::list_node* get_node();
	void put_node(struct list<PreferenceItem>::list_node*);
	struct list<PreferenceItem>::list_node* node;
	uint32_t length;
	class list<PreferenceItem>::iterator : public bidirectional_iterator<PreferenceItem,int>
	{
	protected:
		struct list<PreferenceItem>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<PreferenceItem>::list_node*);
	public:
		int32_t operator==(const class list<PreferenceItem>::iterator&);
		class PreferenceItem& operator*();
		class list<PreferenceItem>::iterator operator++(int32_t);
		class list<PreferenceItem>::iterator& operator++();
		class list<PreferenceItem>::iterator operator--(int32_t);
		class list<PreferenceItem>::iterator& operator--();
	};
	class list<PreferenceItem>::const_iterator : public bidirectional_iterator<PreferenceItem,int>
	{
	protected:
		struct list<PreferenceItem>::list_node* node;
	public:
		void const_iterator(const class list<PreferenceItem>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<PreferenceItem>::list_node*);
	public:
		int32_t operator==(const class list<PreferenceItem>::const_iterator&);
		const class PreferenceItem& operator*();
		class list<PreferenceItem>::const_iterator operator++(int32_t);
		class list<PreferenceItem>::const_iterator& operator++();
		class list<PreferenceItem>::const_iterator operator--(int32_t);
		class list<PreferenceItem>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int>;
public:
	void list<PreferenceItem>(const class list<PreferenceItem>&);
	void list<PreferenceItem>(const class PreferenceItem*, const class PreferenceItem*);
	void list<PreferenceItem>(uint32_t, const class PreferenceItem&);
	void list<PreferenceItem>();
	class list<PreferenceItem>::const_iterator begin();
	class list<PreferenceItem>::iterator begin();
	class list<PreferenceItem>::const_iterator end();
	class list<PreferenceItem>::iterator end();
	class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int> rbegin();
	class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int> rbegin();
	class reverse_bidirectional_iterator<list<PreferenceItem>::const_iterator,PreferenceItem,PreferenceItem const &,int> rend();
	class reverse_bidirectional_iterator<list<PreferenceItem>::iterator,PreferenceItem,PreferenceItem &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class PreferenceItem& front();
	class PreferenceItem& front();
	const class PreferenceItem& back();
	class PreferenceItem& back();
	void swap(class list<PreferenceItem>&);
	void insert(class list<PreferenceItem>::iterator, uint32_t, const class PreferenceItem&);
	void insert(class list<PreferenceItem>::iterator, class list<PreferenceItem>::const_iterator, class list<PreferenceItem>::const_iterator);
	void insert(class list<PreferenceItem>::iterator, const class PreferenceItem*, const class PreferenceItem*);
	class list<PreferenceItem>::iterator insert(class list<PreferenceItem>::iterator, const class PreferenceItem&);
	void push_front(const class PreferenceItem&);
	void push_back(const class PreferenceItem&);
	void erase(class list<PreferenceItem>::iterator, class list<PreferenceItem>::iterator);
	void erase(class list<PreferenceItem>::iterator);
	void pop_front();
	void pop_back();
	void ~list<PreferenceItem>();
	class list<PreferenceItem>& operator=(const class list<PreferenceItem>&);
protected:
	void transfer(class list<PreferenceItem>::iterator, class list<PreferenceItem>::iterator, class list<PreferenceItem>::iterator);
public:
	void splice(class list<PreferenceItem>::iterator, class list<PreferenceItem>&, class list<PreferenceItem>::iterator, class list<PreferenceItem>::iterator);
	void splice(class list<PreferenceItem>::iterator, class list<PreferenceItem>&, class list<PreferenceItem>::iterator);
	void splice(class list<PreferenceItem>::iterator, class list<PreferenceItem>&);
	void remove(const class PreferenceItem&);
	void unique();
	void merge(class list<PreferenceItem>&);
	void reverse();
	void sort();
};

// Type: class PreferenceManager;
class PreferenceManager{
protected:
	int32_t bSaveFileAtAllChanges;
	class list<PreferenceItem> myPreferences;
	class MIFF* miffPrefsFile;
	long lFileCreator;
	long lFileType;
	long lFileVersion;
	int32_t bPrefsDirty;
	int32_t bPrefsLocked;
public:
	void PreferenceManager(long, long, long, int32_t);
	int32_t IPreferenceManager(char *);
	// vtable: 0
	intro void ~PreferenceManager();
	// vtable: 4
	intro long SaveAllPrefs();
	// vtable: 8
	intro long LoadAllPrefs();
	// vtable: 12
	intro long ClearPrefsMemory();
	// vtable: 16
	intro void EnumeratePrefs();
	// vtable: 20
	intro class PreferenceItem* GetPrefPointer(long);
	// vtable: 24
	intro class PreferenceItem* GetPrefCopy(long);
	// vtable: 28
	intro char * GetPrefDataPointer(long);
	// vtable: 32
	intro char * GetPrefDataCopy(long);
	// vtable: 36
	intro long GetPrefDataLength(long);
	// vtable: 40
	intro long SetPref(class PreferenceItem*);
	// vtable: 44
	intro long SetPref(long, char *, long);
	// vtable: 48
	intro long RemovePref(long);
};

// Type: struct bidirectional_iterator<NotificationItem,int>;
struct bidirectional_iterator<NotificationItem,int>{
};

// Type: struct bidirectional_iterator<PreferenceItem,int>;
struct bidirectional_iterator<PreferenceItem,int>{
};



// Contribution: 1:0007ab70-0007caa5 Module: 32, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0047bb70
void PreferenceItem::PreferenceItem() {
// LINE 18:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 19:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 20:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 21:
	__asm        jmp    near ptr 0x0047BB9E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047bba6
void PreferenceItem::PreferenceItem(const class PreferenceItem& P1) {
// LINE 32:
	__asm        mov    eax, P1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 33:
	__asm        mov    eax, P1;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 35:
	__asm        mov    eax, P1;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T88;
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 37:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T66;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 41:
_T66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, P1;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 43:
	__asm        jmp    _T92;
// LINE 44:
_T88:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 45:
_T92:
	__asm        jmp    near ptr 0x0047BC3D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047bc47
void PreferenceItem::~PreferenceItem() {
// LINE 53:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T34;
// LINE 54:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 55:
_T34:
	__asm        jmp    near ptr 0x0047BC80;
}

// FUNCTION: COPTER_D 0x0047bc85
class PreferenceItem& PreferenceItem::operator=(const class PreferenceItem& P2) {
// LINE 65:
	__asm        mov    eax, P2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 66:
	__asm        mov    eax, P2;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 67:
	__asm        mov    eax, P2;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T88;
// LINE 68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 69:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T66;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 73:
_T66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, P2;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 75:
	__asm        jmp    _T92;
// LINE 76:
_T88:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 77:
_T92:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0047BD1F;
// LINE 78:
}

// FUNCTION: COPTER_D 0x0047bd26
int32_t operator==(const class PreferenceItem& P1, const class PreferenceItem& P2) {
// LINE 86:
	__asm        mov    eax, P1;
	__asm        cmp    P2, eax;
	__asm        jne    _T1c;

	__asm        mov    eax, 1;
	__asm        jmp    _T1e;
_T1c:
	__asm        xor    eax, eax;
_T1e:
	__asm        jmp    near ptr 0x0047BD49;
// LINE 87:
}

// FUNCTION: COPTER_D 0x0047bd4e
int32_t PreferenceItem::Compare(const class PreferenceItem& P2) {
// LINE 95:
	__asm        mov    eax, P2;
	__asm        cmp    this, eax;
	__asm        jne    _T22;
// LINE 96:
	__asm        mov    eax, 1;
	__asm        jmp    _T29;
// LINE 97:
_T22:
	__asm        xor    eax, eax;
	__asm        jmp    _T29;
// LINE 113:
_T29:
}

// FUNCTION: COPTER_D 0x0047bd7e
int32_t operator<(const class PreferenceItem& P1, const class PreferenceItem& P2) {
// LINE 120:
	__asm        mov    eax, P1;
	__asm        mov    ecx, P2;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jge    _T20;

	__asm        mov    eax, 1;
	__asm        jmp    _T22;
_T20:
	__asm        xor    eax, eax;
_T22:
	__asm        jmp    near ptr 0x0047BDA5;
// LINE 121:
}

// FUNCTION: COPTER_D 0x0047bdaa
class PreferenceItem* PreferenceItem::DuplicatePointer() {
	class PreferenceItem* prefItemReturn;

// LINE 132:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-8];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        mov    prefItemReturn, eax;
	__asm        jmp    _T3a;
_T33:
	__asm        mov    prefItemReturn, 0;
// LINE 133:
_T3a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, prefItemReturn;
	__asm        mov    [ecx], eax;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, prefItemReturn;
	__asm        mov    [ecx+4], eax;
// LINE 135:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Te1;
// LINE 136:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, prefItemReturn;
	__asm        mov    [ecx+8], eax;
// LINE 137:
	__asm        mov    eax, prefItemReturn;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta1;
// LINE 139:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, prefItemReturn;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 141:
	__asm        jmp    _Tdc;
// LINE 142:
_Ta1:
	__asm        mov    eax, prefItemReturn;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Td5;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047BE7A;

	__asm        jmp    _Td5;
// LINE 143:
_Td5:
	__asm        mov    prefItemReturn, 0;
// LINE 146:
_Tdc:
	__asm        jmp    _Teb;
// LINE 147:
_Te1:
	__asm        mov    eax, prefItemReturn;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 148:
_Teb:
	__asm        mov    eax, prefItemReturn;
	__asm        jmp    near ptr 0x0047BE9D;
// LINE 149:
}

// FUNCTION: COPTER_D 0x0047bea2
void PreferenceManager::PreferenceManager(long lTheFileCreator, long lTheFileType, long lTheFileVersion, int32_t bSaveTheFileAtAllChanges) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        inc    list<PreferenceItem>::number_of_lists;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T48;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T48:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T210;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047BF3F;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta7:
	__asm        jmp    near ptr 0x0047BF4E;

	__asm        jmp    near ptr 0x0047BF53;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0xCC;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tec;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tf2;
_Tec:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tf2:
	__asm        jmp    near ptr 0x0047BF99;

	__asm        jmp    near ptr 0x0047BF9E;

	__asm        jmp    near ptr 0x0047BFA3;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047BFF7;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15f:
	__asm        jmp    near ptr 0x0047C006;

	__asm        jmp    near ptr 0x0047C00B;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<PreferenceItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0xCC;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1cc;
_T1c6:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1cc:
	__asm        jmp    near ptr 0x0047C073;

	__asm        jmp    near ptr 0x0047C078;

	__asm        jmp    near ptr 0x0047C07D;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, list<PreferenceItem>::next_avail;
	__asm        mov    list<PreferenceItem>::last, eax;
	__asm        jmp    near ptr 0x0047C098;

	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T210:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T225:
	__asm        jmp    near ptr 0x0047C0CC;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047C0F7;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590DB0;
// LINE 166:
	__asm        mov    eax, bSaveTheFileAtAllChanges;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 167:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 168:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 169:
	__asm        mov    eax, lTheFileCreator;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 170:
	__asm        mov    eax, lTheFileType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 171:
	__asm        mov    eax, lTheFileVersion;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 172:
	__asm        jmp    near ptr 0x0047C13D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047c147
int32_t PreferenceManager::IPreferenceManager(char * szFilePath) {
// LINE 179:
	__asm        push   0x148;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3d;

	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   MIFF::MIFF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T47;
_T3d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 180:
_T47:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T5b;
// LINE 181:
	__asm        xor    eax, eax;
	__asm        jmp    _T70;
// LINE 182:
_T5b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 183:
	__asm        mov    eax, 1;
	__asm        jmp    _T70;
// LINE 184:
_T70:
}

// FUNCTION: COPTER_D 0x0047c1be
void PreferenceManager::~PreferenceManager() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590DB0;
// LINE 192:
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::SaveAllPrefs;
// LINE 193:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T54;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T54;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T54;
// LINE 195:
_T54:
	__asm        jmp    near ptr 0x0047C217;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0047C22B;

	__asm        jmp    near ptr 0x0047C230;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047C246;

	__asm        jmp    near ptr 0x0047C24B;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
_T99:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x38], eax;
	__asm        jne    _Taf;

	__asm        jmp    _Tc3;

	__asm        jmp    _Taf;
_Taf:
	__asm        jmp    _Tbe;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _Tc3;
_Tbe:
	__asm        jmp    _Tc8;
_Tc3:
	__asm        jmp    _T16b;
_Tc8:
	__asm        jmp    _Td7;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T16b;
_Td7:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0047C2A8;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0047C2B3;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047C2D9;

	__asm        mov    ecx, [ebp-0x30];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _T13a;

	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T13a:
	__asm        jmp    near ptr 0x0047C2FD;

	__asm        jmp    near ptr 0x0047C302;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    near ptr 0x0047C319;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0047C324;

	__asm        jmp    _T99;
_T16b:
	__asm        jmp    near ptr 0x0047C32E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    near ptr 0x0047C34E;

	__asm        dec    list<PreferenceItem>::number_of_lists;
	__asm        jne    _T21a;
_T19c:
	__asm        cmp    list<PreferenceItem>::buffer_list, 0;
	__asm        je     _T1f7;

	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047C395;

	__asm        jmp    near ptr 0x0047C39A;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047C3AB;

	__asm        jmp    near ptr 0x0047C3B0;

	__asm        jmp    _T19c;
_T1f7:
	__asm        mov    list<PreferenceItem>::free_list, 0;
	__asm        mov    list<PreferenceItem>::next_avail, 0;
	__asm        mov    list<PreferenceItem>::last, 0;
	__asm        jmp    _T21a;
_T21a:
	__asm        jmp    near ptr 0x0047C3DD;
}

// FUNCTION: COPTER_D 0x0047c3e2
void PreferenceManager::EnumeratePrefs() {
	long j;
	class list<PreferenceItem>::iterator i;

// LINE 204:
	__asm        jmp    near ptr 0x0047C3F3;
// LINE 207:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0047C409;

	__asm        jmp    near ptr 0x0047C40E;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 207:
_T37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x0047C42C;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0047C44B;

	__asm        jmp    near ptr 0x0047C450;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _Tc1;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tc1;
// LINE 208:
_Tac:
	__asm        jmp    near ptr 0x0047C493;

	__asm        mov    eax, i.node;
	__asm        add    eax, 8;
	__asm        mov    eax, [eax];
	__asm        mov    j, eax;
	__asm        jmp    _T37;
// LINE 209:
_Tc1:
	__asm        jmp    near ptr 0x0047C4A8;
}

// FUNCTION: COPTER_D 0x0047c4ad
long PreferenceManager::SaveAllPrefs() {
	class list<PreferenceItem>::iterator i;
	char szStringRudelyEmbeddedDirectly[41];

// LINE 227:
	__asm        jmp    near ptr 0x0047C4BE;
// LINE 228:
	__asm        mov    esi, 0x599A30;
	__asm        lea    edi, szStringRudelyEmbeddedDirectly[0];
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsb;
// LINE 230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T35;
// LINE 231:
	__asm        xor    eax, eax;
	__asm        jmp    _T1be;
// LINE 232:
_T35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T49;
// LINE 233:
	__asm        xor    eax, eax;
	__asm        jmp    _T1be;
// LINE 235:
_T49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+8];
	__asm        test   eax, eax;
	__asm        je     _T1a3;
// LINE 239:
	__asm        lea    eax, szStringRudelyEmbeddedDirectly[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        lea    eax, szStringRudelyEmbeddedDirectly[0];
	__asm        push   eax;
	__asm        push   0xFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x64];
// LINE 241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0047C56A;

	__asm        jmp    near ptr 0x0047C56F;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _Teb;
// LINE 241:
_Tcd:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x0047C58D;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Teb;
_Teb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0047C5AC;

	__asm        jmp    near ptr 0x0047C5B1;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    i.node, eax;
	__asm        jne    _T11a;

	__asm        jmp    _T12e;

	__asm        jmp    _T11a;
_T11a:
	__asm        jmp    _T129;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T12e;
_T129:
	__asm        jmp    _T133;
_T12e:
	__asm        jmp    _T17c;
_T133:
	__asm        jmp    _T142;

	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T17c;
// LINE 243:
_T142:
	__asm        jmp    near ptr 0x0047C5F4;

	__asm        jmp    near ptr 0x0047C5F9;

	__asm        jmp    near ptr 0x0047C5FE;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x64];
	__asm        jmp    _Tcd;
// LINE 245:
_T17c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x6C];
// LINE 246:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 248:
	__asm        jmp    _T1aa;
// LINE 249:
_T1a3:
	__asm        xor    eax, eax;
	__asm        jmp    _T1be;
// LINE 251:
_T1aa:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 252:
	__asm        mov    eax, 1;
	__asm        jmp    _T1be;
// LINE 253:
_T1be:
}

// FUNCTION: COPTER_D 0x0047c670
long PreferenceManager::LoadAllPrefs() {
	int32_t bStillMoreRecords;
	int32_t bFileOK;
	class PreferenceItem tempPrefItem;
	long lRecordDataSize;

// LINE 274:
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::PreferenceItem;
// LINE 276:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T38;
// LINE 277:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    _T1bf;
// LINE 278:
_T38:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+4];
	__asm        mov    bFileOK, eax;
// LINE 279:
	__asm        cmp    bFileOK, 0;
	__asm        jne    _T6d;
// LINE 280:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    _T1bf;
// LINE 281:
_T6d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x34];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x18];
	__asm        je     _Tb2;
// LINE 282:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 283:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    _T1bf;
// LINE 286:
_Tb2:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x44];
	__asm        mov    bStillMoreRecords, eax;
// LINE 288:
	__asm        jmp    _Tdf;
_Tcb:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x48];
	__asm        mov    bStillMoreRecords, eax;
_Tdf:
	__asm        cmp    bStillMoreRecords, 0;
	__asm        je     _T18d;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0x114], 0xFFFFFF;
	__asm        jne    _T104;
// LINE 291:
	__asm        jmp    _Tcb;
// LINE 292:
_T104:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x1C];
	__asm        mov    lRecordDataSize, eax;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x14];
	__asm        mov    tempPrefItem.lPreferenceType, eax;
// LINE 294:
	__asm        mov    eax, lRecordDataSize;
	__asm        mov    tempPrefItem.lPreferenceDataLength, eax;
// LINE 295:
	__asm        mov    eax, lRecordDataSize;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    tempPrefItem.chPreferenceData, eax;
// LINE 296:
	__asm        mov    eax, lRecordDataSize;
	__asm        push   eax;
	__asm        mov    eax, tempPrefItem.chPreferenceData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x40];
// LINE 297:
	__asm        lea    eax, tempPrefItem.lPreferenceType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 298:
	__asm        mov    eax, tempPrefItem.chPreferenceData;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 299:
	__asm        mov    tempPrefItem.chPreferenceData, 0;
// LINE 300:
	__asm        jmp    _Tcb;
// LINE 301:
_T18d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x10];
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 303:
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    ecx, tempPrefItem.lPreferenceType;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _T1bf;
// LINE 304:
_T1bf:
}

// FUNCTION: COPTER_D 0x0047c834
long PreferenceManager::ClearPrefsMemory() {
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0047C854;

	__asm        jmp    near ptr 0x0047C859;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047C86F;

	__asm        jmp    near ptr 0x0047C874;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x2C], eax;
_T4c:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        jne    _T62;

	__asm        jmp    _T76;

	__asm        jmp    _T62;
_T62:
	__asm        jmp    _T71;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T76;
_T71:
	__asm        jmp    _T7b;
_T76:
	__asm        jmp    _T11e;
_T7b:
	__asm        jmp    _T8a;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T11e;
_T8a:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0047C8D1;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0047C8DC;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047C902;

	__asm        mov    ecx, [ebp-0x24];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _Ted;

	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Ted:
	__asm        jmp    near ptr 0x0047C926;

	__asm        jmp    near ptr 0x0047C92B;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    near ptr 0x0047C942;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0047C94D;

	__asm        jmp    _T4c;
_T11e:
	__asm        jmp    near ptr 0x0047C957;
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 315:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047C96B;
// LINE 316:
}

// FUNCTION: COPTER_D 0x0047c970
long PreferenceManager::RemovePref(long lPrefType) {
	class list<PreferenceItem>::iterator i;

// LINE 327:
	__asm        jmp    near ptr 0x0047C981;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047C997;

	__asm        jmp    near ptr 0x0047C99C;

	__asm        mov    eax, [ebp-8];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 329:
_T37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x0047C9BA;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047C9D9;

	__asm        jmp    near ptr 0x0047C9DE;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    i.node, eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _T162;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T162;
// LINE 330:
_Tac:
	__asm        jmp    near ptr 0x0047CA21;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T15d;

	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
// LINE 331:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047CA56;

	__asm        mov    ecx, [ebp-0x28];
	__asm        add    ecx, 8;
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        jmp    _T105;

	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T105:
	__asm        jmp    near ptr 0x0047CA7A;

	__asm        jmp    near ptr 0x0047CA7F;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        jmp    near ptr 0x0047CA96;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0047CAA1;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 333:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T153;
// LINE 334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 335:
_T153:
	__asm        mov    eax, 1;
	__asm        jmp    _T169;
// LINE 337:
_T15d:
	__asm        jmp    _T37;
// LINE 338:
_T162:
	__asm        xor    eax, eax;
	__asm        jmp    _T169;
// LINE 339:
_T169:
}

// FUNCTION: COPTER_D 0x0047cae0
class PreferenceItem* PreferenceManager::GetPrefPointer(long lPrefType) {
	class list<PreferenceItem>::iterator i;

// LINE 355:
	__asm        jmp    near ptr 0x0047CAF1;
// LINE 357:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047CB07;

	__asm        jmp    near ptr 0x0047CB0C;

	__asm        mov    eax, [ebp-8];
	__asm        mov    i.node, eax;
// LINE 23:
	__asm        jmp    _T55;
// LINE 357:
_T37:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x0047CB2A;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047CB49;

	__asm        jmp    near ptr 0x0047CB4E;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    _T84;

	__asm        jmp    _T98;

	__asm        jmp    _T84;
_T84:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _Td5;
_T9d:
	__asm        jmp    _Tac;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Td5;
// LINE 358:
_Tac:
	__asm        jmp    near ptr 0x0047CB91;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Td0;
// LINE 359:
	__asm        jmp    near ptr 0x0047CBA5;

	__asm        mov    eax, i.node;
	__asm        add    eax, 8;
	__asm        jmp    _Tdc;
// LINE 360:
_Td0:
	__asm        jmp    _T37;
// LINE 361:
_Td5:
	__asm        xor    eax, eax;
	__asm        jmp    _Tdc;
// LINE 362:
_Tdc:
}

// FUNCTION: COPTER_D 0x0047cbc3
class PreferenceItem* PreferenceManager::GetPrefCopy(long lPrefType) {
	class PreferenceItem* prefItemReturn;
	class PreferenceItem* prefItemTemp;

// LINE 379:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 380:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T3b;
// LINE 381:
	__asm        mov    ecx, prefItemTemp;
	__asm        call   PreferenceItem::DuplicatePointer;
	__asm        mov    prefItemReturn, eax;
// LINE 382:
	__asm        mov    eax, prefItemReturn;
	__asm        jmp    _T42;
// LINE 384:
_T3b:
	__asm        xor    eax, eax;
	__asm        jmp    _T42;
// LINE 385:
_T42:
}

// FUNCTION: COPTER_D 0x0047cc0c
char * PreferenceManager::GetPrefDataPointer(long lPrefType) {
	class PreferenceItem* prefItemTemp;

// LINE 404:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 405:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T33;
// LINE 406:
	__asm        mov    eax, prefItemTemp;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _T3a;
// LINE 408:
_T33:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a;
// LINE 409:
_T3a:
}

// FUNCTION: COPTER_D 0x0047cc4d
char * PreferenceManager::GetPrefDataCopy(long lPrefType) {
	class PreferenceItem* prefItemTemp;
	char * chDataCopy;

// LINE 426:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 427:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T5c;
// LINE 428:
	__asm        mov    eax, prefItemTemp;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    chDataCopy, eax;
// LINE 430:
	__asm        mov    eax, prefItemTemp;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, prefItemTemp;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, chDataCopy;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 433:
	__asm        mov    eax, chDataCopy;
	__asm        jmp    _T63;
// LINE 435:
_T5c:
	__asm        xor    eax, eax;
	__asm        jmp    _T63;
// LINE 436:
_T63:
}

// FUNCTION: COPTER_D 0x0047ccb7
long PreferenceManager::GetPrefDataLength(long lPrefType) {
	class PreferenceItem* prefItemTemp;

// LINE 453:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    prefItemTemp, eax;
// LINE 454:
	__asm        cmp    prefItemTemp, 0;
	__asm        je     _T33;
// LINE 455:
	__asm        mov    eax, prefItemTemp;
	__asm        mov    eax, [eax+4];
	__asm        jmp    _T3a;
// LINE 456:
_T33:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a;
// LINE 457:
_T3a:
}

// FUNCTION: COPTER_D 0x0047ccf8
long PreferenceManager::SetPref(long lPrefType, char * chPref, long lSizeofPref) {
	class PreferenceItem* prefItemToSet;

// LINE 472:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 474:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3e;

	__asm        mov    ecx, [ebp-8];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        mov    prefItemToSet, eax;
	__asm        jmp    _T45;
_T3e:
	__asm        mov    prefItemToSet, 0;
// LINE 475:
_T45:
	__asm        mov    eax, lPrefType;
	__asm        mov    ecx, prefItemToSet;
	__asm        mov    [ecx], eax;
// LINE 476:
	__asm        mov    eax, lSizeofPref;
	__asm        mov    ecx, prefItemToSet;
	__asm        mov    [ecx+4], eax;
// LINE 477:
	__asm        mov    eax, lSizeofPref;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, prefItemToSet;
	__asm        mov    [ecx+8], eax;
// LINE 478:
	__asm        mov    eax, prefItemToSet;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Tb0;
// LINE 479:
	__asm        mov    eax, prefItemToSet;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta9;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047CD9C;

	__asm        jmp    _Ta9;
// LINE 480:
_Ta9:
	__asm        xor    eax, eax;
	__asm        jmp    _T258;
// LINE 484:
_Tb0:
	__asm        mov    eax, lSizeofPref;
	__asm        push   eax;
	__asm        mov    eax, chPref;
	__asm        push   eax;
	__asm        mov    eax, prefItemToSet;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 488:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 489:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0047CDE2;

	__asm        jmp    near ptr 0x0047CDE7;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T121;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T16c;
_T121:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T157;

	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   list<PreferenceItem>::add_new_buffer;
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T16c;
_T157:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
_T16c:
	__asm        jmp    near ptr 0x0047CE69;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0047CE74;

	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0047CE82;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1a5;

	__asm        mov    eax, prefItemToSet;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        jmp    _T1a5;
_T1a5:
	__asm        jmp    near ptr 0x0047CEA2;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0047CEDB;

	__asm        jmp    near ptr 0x0047CEE0;

	__asm        jmp    near ptr 0x0047CEE5;
// LINE 492:
	__asm        mov    eax, prefItemToSet;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T221;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PreferenceItem::~PreferenceItem;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047CF14;

	__asm        jmp    _T221;
// LINE 494:
_T221:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 495:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T243;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 497:
_T243:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 498:
	__asm        mov    eax, 1;
	__asm        jmp    _T258;
// LINE 499:
_T258:
}

// FUNCTION: COPTER_D 0x0047cf57
long PreferenceManager::SetPref(class PreferenceItem* prefItemToUse) {
// LINE 511:
	__asm        mov    eax, prefItemToUse;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 512:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0047CF88;

	__asm        jmp    near ptr 0x0047CF8D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<PreferenceItem>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<PreferenceItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<PreferenceItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T245;
_T68:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        cmp    list<PreferenceItem>::last, eax;
	__asm        jne    _T230;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D014;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tc7:
	__asm        jmp    near ptr 0x0047D023;

	__asm        jmp    near ptr 0x0047D028;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0xCC;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T10c;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T112;
_T10c:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T112:
	__asm        jmp    near ptr 0x0047D06E;

	__asm        jmp    near ptr 0x0047D073;

	__asm        jmp    near ptr 0x0047D078;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T17f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D0CC;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T17f:
	__asm        jmp    near ptr 0x0047D0DB;

	__asm        jmp    near ptr 0x0047D0E0;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<PreferenceItem>::buffer_list, eax;
	__asm        mov    eax, list<PreferenceItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<PreferenceItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0xCC;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1e6;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1ec;
_T1e6:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1ec:
	__asm        jmp    near ptr 0x0047D148;

	__asm        jmp    near ptr 0x0047D14D;

	__asm        jmp    near ptr 0x0047D152;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, list<PreferenceItem>::next_avail;
	__asm        mov    list<PreferenceItem>::last, eax;
	__asm        jmp    near ptr 0x0047D16D;

	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T245;
_T230:
	__asm        mov    eax, list<PreferenceItem>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<PreferenceItem>::next_avail, 0x14;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T245:
	__asm        jmp    near ptr 0x0047D1A1;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047D1AC;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0047D1BA;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T27e;

	__asm        mov    eax, prefItemToUse;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PreferenceItem::PreferenceItem;
	__asm        jmp    _T27e;
_T27e:
	__asm        jmp    near ptr 0x0047D1DA;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047D213;

	__asm        jmp    near ptr 0x0047D218;

	__asm        jmp    near ptr 0x0047D21D;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 515:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2e8;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 517:
_T2e8:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047D249;
// LINE 518:
}

// FUNCTION: COPTER_D 0x0047d250
void NotificationPreferenceManager::NotificationPreferenceManager(long lTheFileCreator, long lTheFileType, long lTheFileVersion, int32_t bSaveTheFileAtAllChanges) {

	__asm        mov    eax, bSaveTheFileAtAllChanges;
	__asm        push   eax;
	__asm        mov    eax, lTheFileVersion;
	__asm        push   eax;
	__asm        mov    eax, lTheFileType;
	__asm        push   eax;
	__asm        mov    eax, lTheFileCreator;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::PreferenceManager;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        inc    list<NotificationItem>::number_of_lists;
	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<NotificationItem>::free_list, 0;
	__asm        je     _T60;

	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T237;
_T60:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        cmp    list<NotificationItem>::last, eax;
	__asm        jne    _T222;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tbf;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D305;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tbf:
	__asm        jmp    near ptr 0x0047D314;

	__asm        jmp    near ptr 0x0047D319;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x100;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T104;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T10a;
_T104:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T10a:
	__asm        jmp    near ptr 0x0047D35F;

	__asm        jmp    near ptr 0x0047D364;

	__asm        jmp    near ptr 0x0047D369;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T174;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D3BA;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T174:
	__asm        jmp    near ptr 0x0047D3C9;

	__asm        jmp    near ptr 0x0047D3CE;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<NotificationItem>::buffer_list, eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<NotificationItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1db;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1e1;
_T1db:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1e1:
	__asm        jmp    near ptr 0x0047D436;

	__asm        jmp    near ptr 0x0047D43B;

	__asm        jmp    near ptr 0x0047D440;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<NotificationItem>::next_avail;
	__asm        mov    list<NotificationItem>::last, eax;
	__asm        jmp    near ptr 0x0047D458;

	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T237;
_T222:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T237:
	__asm        jmp    near ptr 0x0047D48C;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x28];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047D4B7;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590DE8;
// LINE 535:
	__asm        jmp    near ptr 0x0047D4C5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047d4cf
int32_t NotificationPreferenceManager::AddNotification(long lPreferenceType, class NotificationSink* newNotificationSink) {
	class NotificationItem tempNewNotificationItem;

// LINE 547:
	__asm        mov    eax, newNotificationSink;
	__asm        push   eax;
	__asm        mov    eax, lPreferenceType;
	__asm        push   eax;
	__asm        lea    ecx, tempNewNotificationItem.lPreferenceType;
	__asm        call   NotificationItem::NotificationItem;
// LINE 548:
	__asm        lea    eax, tempNewNotificationItem.lPreferenceType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x0047D4FF;
// LINE 549:
}

// FUNCTION: COPTER_D 0x0047d506
int32_t NotificationPreferenceManager::AddNotification(class NotificationItem& newNotificationItem) {
// LINE 556:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0047D526;

	__asm        jmp    near ptr 0x0047D52B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<NotificationItem>::free_list, 0;
	__asm        je     _T57;

	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T22e;
_T57:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        cmp    list<NotificationItem>::last, eax;
	__asm        jne    _T219;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tb6;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D5B2;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tb6:
	__asm        jmp    near ptr 0x0047D5C1;

	__asm        jmp    near ptr 0x0047D5C6;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x100;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tfb;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T101;
_Tfb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T101:
	__asm        jmp    near ptr 0x0047D60C;

	__asm        jmp    near ptr 0x0047D611;

	__asm        jmp    near ptr 0x0047D616;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        shl    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T16b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047D667;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T16b:
	__asm        jmp    near ptr 0x0047D676;

	__asm        jmp    near ptr 0x0047D67B;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<NotificationItem>::buffer_list, eax;
	__asm        mov    eax, list<NotificationItem>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<NotificationItem>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x100;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d2;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1d8;
_T1d2:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1d8:
	__asm        jmp    near ptr 0x0047D6E3;

	__asm        jmp    near ptr 0x0047D6E8;

	__asm        jmp    near ptr 0x0047D6ED;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 4;
	__asm        add    eax, list<NotificationItem>::next_avail;
	__asm        mov    list<NotificationItem>::last, eax;
	__asm        jmp    near ptr 0x0047D705;

	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T22e;
_T219:
	__asm        mov    eax, list<NotificationItem>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<NotificationItem>::next_avail, 0x10;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T22e:
	__asm        jmp    near ptr 0x0047D739;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047D744;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0047D752;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T267;

	__asm        mov    eax, newNotificationItem;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   NotificationItem::NotificationItem;
	__asm        jmp    _T267;
_T267:
	__asm        jmp    near ptr 0x0047D772;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x2C], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047D7AC;

	__asm        jmp    near ptr 0x0047D7B1;

	__asm        jmp    near ptr 0x0047D7B6;
// LINE 557:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047D7C0;
// LINE 558:
}

// FUNCTION: COPTER_D 0x0047d7c7
int32_t NotificationPreferenceManager::RemoveNotification(class NotificationSink* theNotificationSink, long lPreferenceType) {
	class list<NotificationItem>::iterator iterator;
	int32_t nFound;

// LINE 571:
	__asm        jmp    near ptr 0x0047D7D8;
// LINE 572:
	__asm        mov    nFound, 0;
// LINE 574:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0047D7F5;

	__asm        jmp    near ptr 0x0047D7FA;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    iterator.node, eax;
// LINE 575:
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047D814;

	__asm        jmp    near ptr 0x0047D819;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T68;

	__asm        jmp    _T7c;

	__asm        jmp    _T68;
_T68:
	__asm        jmp    _T77;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T7c;
_T77:
	__asm        jmp    _T81;
_T7c:
	__asm        jmp    _T159;
_T81:
	__asm        jmp    _T90;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T159;
// LINE 577:
_T90:
	__asm        jmp    near ptr 0x0047D85C;

	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, theNotificationSink;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jne    _T136;

	__asm        jmp    near ptr 0x0047D870;

	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lPreferenceType;
	__asm        cmp    [eax+8], ecx;
	__asm        je     _Tc2;

	__asm        cmp    lPreferenceType, 0;
	__asm        jne    _T136;
// LINE 579:
_Tc2:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0047D89C;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0047D8A7;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047D8CD;

	__asm        jmp    near ptr 0x0047D8D2;

	__asm        mov    eax, list<NotificationItem>::free_list;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    list<NotificationItem>::free_list, eax;
	__asm        jmp    near ptr 0x0047D8E9;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x2C];
	__asm        jmp    near ptr 0x0047D8F4;
// LINE 580:
	__asm        add    nFound, 1;
// LINE 582:
	__asm        jmp    _T154;
// LINE 583:
_T136:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0047D910;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T154;
// LINE 584:
_T154:
	__asm        jmp    _T39;
// LINE 585:
_T159:
	__asm        mov    eax, nFound;
	__asm        jmp    near ptr 0x0047D928;
// LINE 586:
}

// FUNCTION: COPTER_D 0x0047d92f
long NotificationPreferenceManager::SetPref(long lPrefType, char * chPref, long lSizeofPref) {
	long lReturnValue;

// LINE 594:
	__asm        mov    eax, lSizeofPref;
	__asm        push   eax;
	__asm        mov    eax, chPref;
	__asm        push   eax;
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::SetPref;
	__asm        mov    lReturnValue, eax;
// LINE 595:
	__asm        cmp    lReturnValue, 0;
	__asm        je     _T3c;
// LINE 596:
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 597:
_T3c:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    near ptr 0x0047D973;
// LINE 598:
}

// FUNCTION: COPTER_D 0x0047d97a
long NotificationPreferenceManager::SetPref(class PreferenceItem* prefItemToUse) {
	long lReturnValue;

// LINE 605:
	__asm        mov    eax, prefItemToUse;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PreferenceManager::SetPref;
	__asm        mov    lReturnValue, eax;
// LINE 606:
	__asm        cmp    lReturnValue, 0;
	__asm        je     _T36;
// LINE 607:
	__asm        mov    eax, prefItemToUse;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 608:
_T36:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    near ptr 0x0047D9B8;
// LINE 609:
}

// FUNCTION: COPTER_D 0x0047d9bf
void NotificationPreferenceManager::DoNotification(long lPrefType) {
	class list<NotificationItem>::iterator iterator;

// LINE 618:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0047D9E1;

	__asm        jmp    _T27;
// LINE 620:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047D9FA;

	__asm        jmp    near ptr 0x0047D9FF;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tdb;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tdb;
// LINE 621:
_T7e:
	__asm        jmp    near ptr 0x0047DA42;

	__asm        mov    eax, iterator.node;
	__asm        mov    ecx, lPrefType;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tb8;
// LINE 622:
	__asm        jmp    near ptr 0x0047DA56;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, lPrefType;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax];
// LINE 623:
_Tb8:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0047DA8A;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0047DA95;
// LINE 624:
	__asm        jmp    _T27;
// LINE 625:
_Tdb:
	__asm        jmp    near ptr 0x0047DA9F;
}



// Contribution: 1:0007cab0-0007cae8 Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047dab0
// PreferenceManager::`scalar deleting destructor'



// Contribution: 1:0007caf0-0007cc9d Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0047daf0
// list<PreferenceItem>::add_new_buffer



// Contribution: 1:0007cca0-0007ce7f Module: 32, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047dca0
// NotificationPreferenceManager::`scalar deleting destructor'



// Contribution: 2:00001db0-00001de3 Module: 32, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590db0
// GLOBAL: COPTER_D 0x00590db0
// ??_7PreferenceManager@@6B@


// Contribution: 2:00001de8-00001e2b Module: 32, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590de8
// GLOBAL: COPTER_D 0x00590de8
// ??_7NotificationPreferenceManager@@6B@


// Contribution: 3:00002a30-00002a58 Module: 32, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00002a5c-00002a5f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a5c
uint32_t list<PreferenceItem>::number_of_lists = 0;



// Contribution: 3:00002a60-00002a63 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a60
struct list<PreferenceItem>::list_node* list<PreferenceItem>::last = { 0 /* todo */ };



// Contribution: 3:00002a64-00002a67 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a64
struct list<PreferenceItem>::list_node* list<PreferenceItem>::next_avail = { 0 /* todo */ };



// Contribution: 3:00002a68-00002a6b Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a68
struct list<PreferenceItem>::list_node* list<PreferenceItem>::free_list = { 0 /* todo */ };



// Contribution: 3:00002a6c-00002a6f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a6c
struct list<PreferenceItem>::list_node_buffer* list<PreferenceItem>::buffer_list = { 0 /* todo */ };



// Contribution: 3:00002a70-00002a73 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a70
uint32_t list<NotificationItem>::number_of_lists = 0;



// Contribution: 3:00002a74-00002a77 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a74
struct list<NotificationItem>::list_node* list<NotificationItem>::last = { 0 /* todo */ };



// Contribution: 3:00002a78-00002a7b Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a78
struct list<NotificationItem>::list_node* list<NotificationItem>::next_avail = { 0 /* todo */ };



// Contribution: 3:00002a7c-00002a7f Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a7c
struct list<NotificationItem>::list_node* list<NotificationItem>::free_list = { 0 /* todo */ };



// Contribution: 3:00002a80-00002a83 Module: 32, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00599a80
struct list<NotificationItem>::list_node_buffer* list<NotificationItem>::buffer_list = { 0 /* todo */ };

