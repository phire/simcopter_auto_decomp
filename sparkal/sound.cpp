// Module: sound.obj
// Source: C:\Copter\source\sparkal\sound.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0002cf60-00030abe Module: 64, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0042df60
void SoundSystem::SoundSystem() {
// LINE 87:
	asm( 
"	      0042df60    push ebp"
"	      0042df61    mov ebp,esp"
"	      0042df63    sub esp,4"
"	      0042df66    push ebx"
"	      0042df67    push esi"
"	      0042df68    push edi"
"	      0042df69    mov [ebp-4],ecx"
"	      0042df6c    mov eax,[ebp-4]"
"	      0042df6f    mov dword ptr [eax],58F440h"
);
// LINE 89:
	asm( 
"	      0042df75    cmp dword ptr ds:[597E58h],0"
"	      0042df7c    jne near ptr 0042DF90h"
);
// LINE 91:
	asm( 
"	      0042df82    push 597E58h"
"	      0042df87    push 32h"
"	      0042df89    push 0"
"	      0042df8b    call 004C4678h"
);
// LINE 93:
	asm( 
"	      0042df90    mov eax,[ebp-4]"
"	      0042df93    mov dword ptr [eax+8],0"
);
// LINE 94:
	asm( 
"	      0042df9a    mov eax,[ebp-4]"
"	      0042df9d    mov dword ptr [eax+0Ch],0"
);
// LINE 95:
	asm( 
"	      0042dfa4    mov eax,[ebp-4]"
"	      0042dfa7    mov dword ptr [eax+10h],0"
);
// LINE 96:
	asm( 
"	      0042dfae    mov eax,[ebp-4]"
"	      0042dfb1    mov dword ptr [eax+4],0"
);
// LINE 99:
	asm( 
"	      0042dfb8    push 60h"
"	      0042dfba    push 0"
"	      0042dfbc    mov eax,[ebp-4]"
"	      0042dfbf    add eax,14h"
"	      0042dfc2    push eax"
"	      0042dfc3    call 0056EB90h"
"	      0042dfc8    add esp,0Ch"
);
// LINE 100:
	asm( 
"	      0042dfcb    mov eax,[ebp-4]"
"	      0042dfce    mov dword ptr [eax+14h],60h"
);
// LINE 104:
	asm( 
"	      0042dfd5    jmp near ptr 0042DFDAh"
"	      0042dfda    mov eax,[ebp-4]"
"	      0042dfdd    pop edi"
"	      0042dfde    pop esi"
"	      0042dfdf    pop ebx"
"	      0042dfe0    leave"
"	      0042dfe1    ret"
);
}

// FUNCTION: COPTER_D 0x0042dfe2
void SoundSystem::~SoundSystem() {
// LINE 107:
	asm( 
"	      0042dfe2    push ebp"
"	      0042dfe3    mov ebp,esp"
"	      0042dfe5    sub esp,4"
"	      0042dfe8    push ebx"
"	      0042dfe9    push esi"
"	      0042dfea    push edi"
"	      0042dfeb    mov [ebp-4],ecx"
"	      0042dfee    mov eax,[ebp-4]"
"	      0042dff1    mov dword ptr [eax],58F440h"
);
// LINE 108:
	asm( 
"	      0042dff7    mov ecx,[ebp-4]"
"	      0042dffa    call 0042E2CDh"
);
// LINE 109:
	asm( 
"	      0042dfff    jmp near ptr 0042E004h"
"	      0042e004    pop edi"
"	      0042e005    pop esi"
"	      0042e006    pop ebx"
"	      0042e007    leave"
"	      0042e008    ret"
);
}

// FUNCTION: COPTER_D 0x0042e009
int32_t SoundSystem::Initialize(void * __ptr32 hWindow) {
// LINE 119:
	asm( 
"	      0042e009    push ebp"
"	      0042e00a    mov ebp,esp"
"	      0042e00c    sub esp,20h"
"	      0042e00f    push ebx"
"	      0042e010    push esi"
"	      0042e011    push edi"
"	      0042e012    mov [ebp-20h],ecx"
);
// LINE 122:
	asm( 
"	      0042e015    mov dword ptr [ebp-4],1"
);
// LINE 126:
	asm( 
"	      0042e01c    push 7Ah"
"	      0042e01e    call 0056A600h"
"	      0042e023    add esp,4"
"	      0042e026    mov [ebp-0Ch],eax"
"	      0042e029    cmp dword ptr [ebp-0Ch],0"
"	      0042e02d    je near ptr 0042E046h"
"	      0042e033    mov ecx,[ebp-0Ch]"
"	      0042e036    call 0042EF87h"
"	      0042e03b    mov ecx,[ebp-20h]"
"	      0042e03e    mov [ecx+8],eax"
"	      0042e041    jmp near ptr 0042E050h"
"	      0042e046    mov eax,[ebp-20h]"
"	      0042e049    mov dword ptr [eax+8],0"
);
// LINE 134:
	asm( 
"	      0042e050    mov eax,[ebp-20h]"
"	      0042e053    mov eax,[eax+8]"
"	      0042e056    mov word ptr [eax+40h],1"
);
// LINE 135:
	asm( 
"	      0042e05c    mov eax,[ebp-20h]"
"	      0042e05f    mov eax,[eax+8]"
"	      0042e062    mov word ptr [eax+42h],2"
);
// LINE 136:
	asm( 
"	      0042e068    mov eax,[ebp-20h]"
"	      0042e06b    mov eax,[eax+8]"
"	      0042e06e    mov dword ptr [eax+44h],5622h"
);
// LINE 137:
	asm( 
"	      0042e075    mov eax,[ebp-20h]"
"	      0042e078    mov eax,[eax+8]"
"	      0042e07b    mov dword ptr [eax+48h],0AC44h"
);
// LINE 138:
	asm( 
"	      0042e082    mov eax,[ebp-20h]"
"	      0042e085    mov eax,[eax+8]"
"	      0042e088    mov word ptr [eax+4Ch],2"
);
// LINE 139:
	asm( 
"	      0042e08e    mov eax,[ebp-20h]"
"	      0042e091    mov eax,[eax+8]"
"	      0042e094    mov word ptr [eax+4Eh],8"
);
// LINE 140:
	asm( 
"	      0042e09a    mov eax,[ebp-20h]"
"	      0042e09d    mov eax,[eax+8]"
"	      0042e0a0    mov word ptr [eax+50h],0"
);
// LINE 145:
	asm( 
"	      0042e0a6    push 0"
"	      0042e0a8    mov eax,[ebp-20h]"
"	      0042e0ab    add eax,10h"
"	      0042e0ae    push eax"
"	      0042e0af    push 0"
"	      0042e0b1    call 004C4672h"
"	      0042e0b6    mov [ebp-8],eax"
);
// LINE 146:
	asm( 
"	      0042e0b9    cmp dword ptr [ebp-8],0"
"	      0042e0bd    je near ptr 0042E0F6h"
);
// LINE 147:
	asm( 
"	      0042e0c3    mov eax,[ebp-8]"
"	      0042e0c6    mov [ebp-10h],eax"
"	      0042e0c9    jmp near ptr 0042E0CEh"
"	      0042e0ce    push 597E64h"
"	      0042e0d3    lea ecx,[ebp-10h]"
"	      0042e0d6    call 0042DC69h"
);
// LINE 148:
	asm( 
"	      0042e0db    mov eax,[ebp-20h]"
"	      0042e0de    mov dword ptr [eax+10h],0"
);
// LINE 149:
	asm( 
"	      0042e0e5    mov dword ptr [ebp-4],0"
);
// LINE 150:
	asm( 
"	      0042e0ec    jmp near ptr 0042E2C1h"
"	      0042e0f1    jmp near ptr 0042E232h"
);
// LINE 155:
	asm( 
"	      0042e0f6    mov eax,[ebp-20h]"
"	      0042e0f9    mov eax,[eax+10h]"
"	      0042e0fc    mov ds:[597E60h],eax"
);
// LINE 158:
	asm( 
"	      0042e101    mov eax,[ebp-20h]"
"	      0042e104    add eax,14h"
"	      0042e107    push eax"
"	      0042e108    mov eax,[ebp-20h]"
"	      0042e10b    mov eax,[eax+10h]"
"	      0042e10e    push eax"
"	      0042e10f    mov eax,[ebp-20h]"
"	      0042e112    mov eax,[eax+10h]"
"	      0042e115    mov eax,[eax]"
"	      0042e117    call dword ptr [eax+10h]"
"	      0042e11a    mov [ebp-8],eax"
);
// LINE 159:
	asm( 
"	      0042e11d    cmp dword ptr [ebp-8],0"
"	      0042e121    je near ptr 0042E150h"
);
// LINE 160:
	asm( 
"	      0042e127    mov eax,[ebp-8]"
"	      0042e12a    mov [ebp-14h],eax"
"	      0042e12d    jmp near ptr 0042E132h"
"	      0042e132    push 597EA4h"
"	      0042e137    lea ecx,[ebp-14h]"
"	      0042e13a    call 0042DC69h"
);
// LINE 161:
	asm( 
"	      0042e13f    mov dword ptr [ebp-4],0"
);
// LINE 162:
	asm( 
"	      0042e146    jmp near ptr 0042E2BCh"
"	      0042e14b    jmp near ptr 0042E232h"
);
// LINE 168:
	asm( 
"	      0042e150    push 1"
"	      0042e152    mov eax,[ebp+8]"
"	      0042e155    push eax"
"	      0042e156    mov eax,[ebp-20h]"
"	      0042e159    mov eax,[eax+10h]"
"	      0042e15c    push eax"
"	      0042e15d    mov eax,[ebp-20h]"
"	      0042e160    mov eax,[eax+10h]"
"	      0042e163    mov eax,[eax]"
"	      0042e165    call dword ptr [eax+18h]"
"	      0042e168    mov [ebp-8],eax"
);
// LINE 169:
	asm( 
"	      0042e16b    cmp dword ptr [ebp-8],0"
"	      0042e16f    je near ptr 0042E197h"
);
// LINE 170:
	asm( 
"	      0042e175    mov eax,[ebp-8]"
"	      0042e178    mov [ebp-18h],eax"
"	      0042e17b    jmp near ptr 0042E180h"
"	      0042e180    push 597EDCh"
"	      0042e185    lea ecx,[ebp-18h]"
"	      0042e188    call 0042DC69h"
);
// LINE 171:
	asm( 
"	      0042e18d    jmp near ptr 0042E2B7h"
"	      0042e192    jmp near ptr 0042E232h"
);
// LINE 175:
	asm( 
"	      0042e197    mov eax,[ebp-20h]"
"	      0042e19a    mov ecx,[ebp-20h]"
"	      0042e19d    mov ecx,[ecx+8]"
"	      0042e1a0    mov edx,[ecx]"
"	      0042e1a2    mov ecx,[eax+8]"
"	      0042e1a5    call dword ptr [edx+70h]"
"	      0042e1a8    test eax,eax"
"	      0042e1aa    jne near ptr 0042E1C1h"
);
// LINE 176:
	asm( 
"	      0042e1b0    mov dword ptr [ebp-4],0"
);
// LINE 177:
	asm( 
"	      0042e1b7    jmp near ptr 0042E2B2h"
"	      0042e1bc    jmp near ptr 0042E232h"
);
// LINE 179:
	asm( 
"	      0042e1c1    mov eax,[ebp-20h]"
"	      0042e1c4    mov eax,[eax+8]"
"	      0042e1c7    mov eax,[eax+52h]"
"	      0042e1ca    mov ecx,[ebp-20h]"
"	      0042e1cd    mov [ecx+0Ch],eax"
);
// LINE 191:
	asm( 
"	      0042e1d0    push 1"
"	      0042e1d2    push 0"
"	      0042e1d4    push 0"
"	      0042e1d6    mov eax,[ebp-20h]"
"	      0042e1d9    mov eax,[eax+0Ch]"
"	      0042e1dc    push eax"
"	      0042e1dd    mov eax,[ebp-20h]"
"	      0042e1e0    mov eax,[eax+0Ch]"
"	      0042e1e3    mov eax,[eax]"
"	      0042e1e5    call dword ptr [eax+30h]"
"	      0042e1e8    mov [ebp-8],eax"
);
// LINE 192:
	asm( 
"	      0042e1eb    cmp dword ptr [ebp-8],0"
"	      0042e1ef    je near ptr 0042E21Eh"
);
// LINE 193:
	asm( 
"	      0042e1f5    mov eax,[ebp-8]"
"	      0042e1f8    mov [ebp-1Ch],eax"
"	      0042e1fb    jmp near ptr 0042E200h"
"	      0042e200    push 597F20h"
"	      0042e205    lea ecx,[ebp-1Ch]"
"	      0042e208    call 0042DC69h"
);
// LINE 194:
	asm( 
"	      0042e20d    mov dword ptr [ebp-4],0"
);
// LINE 195:
	asm( 
"	      0042e214    jmp near ptr 0042E2ADh"
"	      0042e219    jmp near ptr 0042E232h"
);
// LINE 197:
	asm( 
"	      0042e21e    mov eax,[ebp-20h]"
"	      0042e221    mov dword ptr [eax+4],1"
);
// LINE 198:
	asm( 
"	      0042e228    jmp near ptr 0042E2A8h"
"	      0042e22d    jmp near ptr 0042E2A0h"
);
// LINE 201:
	asm( 
"	      0042e232    mov eax,[ebp-20h]"
"	      0042e235    mov eax,[eax+8]"
"	      0042e238    cmp dword ptr [eax+52h],0"
"	      0042e23c    je near ptr 0042E26Ch"
);
// LINE 202:
	asm( 
"	      0042e242    mov eax,[ebp-20h]"
"	      0042e245    mov ecx,[ebp-20h]"
"	      0042e248    mov ecx,[ecx+8]"
"	      0042e24b    mov edx,[ecx]"
"	      0042e24d    mov ecx,[eax+8]"
"	      0042e250    call dword ptr [edx+74h]"
);
// LINE 203:
	asm( 
"	      0042e253    mov eax,[ebp-20h]"
"	      0042e256    mov dword ptr [eax+0Ch],0"
"	      0042e25d    mov eax,[ebp-20h]"
"	      0042e260    mov eax,[eax+0Ch]"
"	      0042e263    mov ecx,[ebp-20h]"
"	      0042e266    mov ecx,[ecx+8]"
"	      0042e269    mov [ecx+52h],eax"
);
// LINE 205:
	asm( 
"	      0042e26c    mov eax,[ebp-20h]"
"	      0042e26f    cmp dword ptr [eax+10h],0"
"	      0042e273    je near ptr 0042E2A0h"
);
// LINE 206:
	asm( 
"	      0042e279    mov eax,[ebp-20h]"
"	      0042e27c    mov eax,[eax+10h]"
"	      0042e27f    push eax"
"	      0042e280    mov eax,[ebp-20h]"
"	      0042e283    mov eax,[eax+10h]"
"	      0042e286    mov eax,[eax]"
"	      0042e288    call dword ptr [eax+8]"
);
// LINE 207:
	asm( 
"	      0042e28b    mov dword ptr ds:[597E60h],0"
"	      0042e295    mov eax,ds:[597E60h]"
"	      0042e29a    mov ecx,[ebp-20h]"
"	      0042e29d    mov [ecx+10h],eax"
);
// LINE 216:
	asm( 
"	      0042e2a0    mov eax,[ebp-4]"
"	      0042e2a3    jmp near ptr 0042E2C6h"
);
// LINE 218:
	asm( 
"	      0042e2a8    jmp near ptr 0042E2A0h"
"	      0042e2ad    jmp near ptr 0042E232h"
"	      0042e2b2    jmp near ptr 0042E232h"
"	      0042e2b7    jmp near ptr 0042E232h"
"	      0042e2bc    jmp near ptr 0042E232h"
"	      0042e2c1    jmp near ptr 0042E232h"
"	      0042e2c6    pop edi"
"	      0042e2c7    pop esi"
"	      0042e2c8    pop ebx"
"	      0042e2c9    leave"
"	      0042e2ca    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042e2cd
void SoundSystem::DeInitialize() {
// LINE 230:
	asm( 
"	      0042e2cd    push ebp"
"	      0042e2ce    mov ebp,esp"
"	      0042e2d0    sub esp,0Ch"
"	      0042e2d3    push ebx"
"	      0042e2d4    push esi"
"	      0042e2d5    push edi"
"	      0042e2d6    mov [ebp-0Ch],ecx"
);
// LINE 232:
	asm( 
"	      0042e2d9    mov eax,[ebp-0Ch]"
"	      0042e2dc    cmp dword ptr [eax+8],0"
"	      0042e2e0    je near ptr 0042E31Ah"
);
// LINE 233:
	asm( 
"	      0042e2e6    mov eax,[ebp-0Ch]"
"	      0042e2e9    mov eax,[eax+8]"
"	      0042e2ec    mov [ebp-8],eax"
"	      0042e2ef    mov eax,[ebp-8]"
"	      0042e2f2    mov [ebp-4],eax"
"	      0042e2f5    cmp dword ptr [ebp-4],0"
"	      0042e2f9    je near ptr 0042E310h"
"	      0042e2ff    push 1"
"	      0042e301    mov eax,[ebp-4]"
"	      0042e304    mov eax,[eax]"
"	      0042e306    mov ecx,[ebp-4]"
"	      0042e309    call dword ptr [eax]"
"	      0042e30b    jmp near ptr 0042E310h"
);
// LINE 234:
	asm( 
"	      0042e310    mov eax,[ebp-0Ch]"
"	      0042e313    mov dword ptr [eax+8],0"
);
// LINE 237:
	asm( 
"	      0042e31a    mov eax,[ebp-0Ch]"
"	      0042e31d    mov dword ptr [eax+10h],0"
);
// LINE 239:
	asm( 
"	      0042e324    jmp near ptr 0042E329h"
"	      0042e329    pop edi"
"	      0042e32a    pop esi"
"	      0042e32b    pop ebx"
"	      0042e32c    leave"
"	      0042e32d    ret"
);
}

// FUNCTION: COPTER_D 0x0042e32e
int32_t SoundSystem::GetVolume(long * lVolume) {
// LINE 252:
	asm( 
"	      0042e32e    push ebp"
"	      0042e32f    mov ebp,esp"
"	      0042e331    sub esp,4"
"	      0042e334    push ebx"
"	      0042e335    push esi"
"	      0042e336    push edi"
"	      0042e337    mov [ebp-4],ecx"
);
// LINE 253:
	asm( 
"	      0042e33a    mov eax,[ebp-4]"
"	      0042e33d    cmp dword ptr [eax+8],0"
"	      0042e341    je near ptr 0042E366h"
);
// LINE 254:
	asm( 
"	      0042e347    mov eax,[ebp+8]"
"	      0042e34a    push eax"
"	      0042e34b    mov eax,[ebp-4]"
"	      0042e34e    mov ecx,[ebp-4]"
"	      0042e351    mov ecx,[ecx+8]"
"	      0042e354    mov edx,[ecx]"
"	      0042e356    mov ecx,[eax+8]"
"	      0042e359    call dword ptr [edx+20h]"
);
// LINE 255:
	asm( 
"	      0042e35c    mov eax,1"
"	      0042e361    jmp near ptr 0042E36Dh"
);
// LINE 257:
	asm( 
"	      0042e366    xor eax,eax"
"	      0042e368    jmp near ptr 0042E36Dh"
);
// LINE 258:
	asm( 
"	      0042e36d    pop edi"
"	      0042e36e    pop esi"
"	      0042e36f    pop ebx"
"	      0042e370    leave"
"	      0042e371    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042e374
int32_t SoundSystem::SetVolume(long lNewVolume) {
// LINE 271:
	asm( 
"	      0042e374    push ebp"
"	      0042e375    mov ebp,esp"
"	      0042e377    sub esp,4"
"	      0042e37a    push ebx"
"	      0042e37b    push esi"
"	      0042e37c    push edi"
"	      0042e37d    mov [ebp-4],ecx"
);
// LINE 272:
	asm( 
"	      0042e380    mov eax,[ebp+8]"
"	      0042e383    push eax"
"	      0042e384    mov eax,[ebp-4]"
"	      0042e387    mov ecx,[ebp-4]"
"	      0042e38a    mov ecx,[ecx+8]"
"	      0042e38d    mov edx,[ecx]"
"	      0042e38f    mov ecx,[eax+8]"
"	      0042e392    call dword ptr [edx+24h]"
"	      0042e395    jmp near ptr 0042E39Ah"
);
// LINE 273:
	asm( 
"	      0042e39a    pop edi"
"	      0042e39b    pop esi"
"	      0042e39c    pop ebx"
"	      0042e39d    leave"
"	      0042e39e    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042e3a1
void SoundManager::SoundManager() {
// LINE 283:
	asm( 
"	      0042e3a1    push ebp"
"	      0042e3a2    mov ebp,esp"
"	      0042e3a4    sub esp,8"
"	      0042e3a7    push ebx"
"	      0042e3a8    push esi"
"	      0042e3a9    push edi"
"	      0042e3aa    mov [ebp-8],ecx"
"	      0042e3ad    mov eax,[ebp-8]"
"	      0042e3b0    mov dword ptr [eax],58F448h"
);
// LINE 285:
	asm( 
"	      0042e3b6    mov dword ptr [ebp-4],0"
"	      0042e3bd    jmp near ptr 0042E3C5h"
"	      0042e3c2    inc dword ptr [ebp-4]"
"	      0042e3c5    cmp dword ptr [ebp-4],80h"
"	      0042e3cc    jge near ptr 0042E3E5h"
);
// LINE 286:
	asm( 
"	      0042e3d2    mov eax,[ebp-4]"
"	      0042e3d5    mov ecx,[ebp-8]"
"	      0042e3d8    mov dword ptr [ecx+eax*4+4],0"
"	      0042e3e0    jmp near ptr 0042E3C2h"
);
// LINE 287:
	asm( 
"	      0042e3e5    jmp near ptr 0042E3EAh"
"	      0042e3ea    mov eax,[ebp-8]"
"	      0042e3ed    pop edi"
"	      0042e3ee    pop esi"
"	      0042e3ef    pop ebx"
"	      0042e3f0    leave"
"	      0042e3f1    ret"
);
}

// FUNCTION: COPTER_D 0x0042e3f2
void SoundManager::~SoundManager() {
// LINE 290:
	asm( 
"	      0042e3f2    push ebp"
"	      0042e3f3    mov ebp,esp"
"	      0042e3f5    sub esp,4"
"	      0042e3f8    push ebx"
"	      0042e3f9    push esi"
"	      0042e3fa    push edi"
"	      0042e3fb    mov [ebp-4],ecx"
"	      0042e3fe    mov eax,[ebp-4]"
"	      0042e401    mov dword ptr [eax],58F448h"
);
// LINE 291:
	asm( 
"	      0042e407    mov ecx,[ebp-4]"
"	      0042e40a    call 0042E419h"
);
// LINE 292:
	asm( 
"	      0042e40f    jmp near ptr 0042E414h"
"	      0042e414    pop edi"
"	      0042e415    pop esi"
"	      0042e416    pop ebx"
"	      0042e417    leave"
"	      0042e418    ret"
);
}

// FUNCTION: COPTER_D 0x0042e419
void SoundManager::DeleteAllSounds() {
// LINE 295:
	asm( 
"	      0042e419    push ebp"
"	      0042e41a    mov ebp,esp"
"	      0042e41c    sub esp,10h"
"	      0042e41f    push ebx"
"	      0042e420    push esi"
"	      0042e421    push edi"
"	      0042e422    mov [ebp-10h],ecx"
);
// LINE 297:
	asm( 
"	      0042e425    mov dword ptr [ebp-4],0"
"	      0042e42c    jmp near ptr 0042E434h"
"	      0042e431    inc dword ptr [ebp-4]"
"	      0042e434    cmp dword ptr [ebp-4],80h"
"	      0042e43b    jge near ptr 0042E474h"
);
// LINE 298:
	asm( 
"	      0042e441    mov eax,[ebp-4]"
"	      0042e444    mov ecx,[ebp-10h]"
"	      0042e447    mov eax,[ecx+eax*4+4]"
"	      0042e44b    mov [ebp-0Ch],eax"
"	      0042e44e    mov eax,[ebp-0Ch]"
"	      0042e451    mov [ebp-8],eax"
"	      0042e454    cmp dword ptr [ebp-8],0"
"	      0042e458    je near ptr 0042E46Fh"
"	      0042e45e    push 1"
"	      0042e460    mov eax,[ebp-8]"
"	      0042e463    mov eax,[eax]"
"	      0042e465    mov ecx,[ebp-8]"
"	      0042e468    call dword ptr [eax]"
"	      0042e46a    jmp near ptr 0042E46Fh"
"	      0042e46f    jmp near ptr 0042E431h"
);
// LINE 299:
	asm( 
"	      0042e474    jmp near ptr 0042E479h"
"	      0042e479    pop edi"
"	      0042e47a    pop esi"
"	      0042e47b    pop ebx"
"	      0042e47c    leave"
"	      0042e47d    ret"
);
}

// FUNCTION: COPTER_D 0x0042e47e
void SoundManager::AddSound(class Sound* soundToAdd, int32_t nIndex) {
// LINE 315:
	asm( 
"	      0042e47e    push ebp"
"	      0042e47f    mov ebp,esp"
"	      0042e481    sub esp,0Ch"
"	      0042e484    push ebx"
"	      0042e485    push esi"
"	      0042e486    push edi"
"	      0042e487    mov [ebp-0Ch],ecx"
);
// LINE 316:
	asm( 
"	      0042e48a    mov eax,[ebp+0Ch]"
"	      0042e48d    mov ecx,[ebp-0Ch]"
"	      0042e490    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e495    je near ptr 0042E4C9h"
);
// LINE 317:
	asm( 
"	      0042e49b    mov eax,[ebp+0Ch]"
"	      0042e49e    mov ecx,[ebp-0Ch]"
"	      0042e4a1    mov eax,[ecx+eax*4+4]"
"	      0042e4a5    mov [ebp-8],eax"
"	      0042e4a8    mov eax,[ebp-8]"
"	      0042e4ab    mov [ebp-4],eax"
"	      0042e4ae    cmp dword ptr [ebp-4],0"
"	      0042e4b2    je near ptr 0042E4C9h"
"	      0042e4b8    push 1"
"	      0042e4ba    mov eax,[ebp-4]"
"	      0042e4bd    mov eax,[eax]"
"	      0042e4bf    mov ecx,[ebp-4]"
"	      0042e4c2    call dword ptr [eax]"
"	      0042e4c4    jmp near ptr 0042E4C9h"
);
// LINE 318:
	asm( 
"	      0042e4c9    mov eax,[ebp+8]"
"	      0042e4cc    mov ecx,[ebp+0Ch]"
"	      0042e4cf    mov edx,[ebp-0Ch]"
"	      0042e4d2    mov [edx+ecx*4+4],eax"
);
// LINE 319:
	asm( 
"	      0042e4d6    jmp near ptr 0042E4DBh"
"	      0042e4db    pop edi"
"	      0042e4dc    pop esi"
"	      0042e4dd    pop ebx"
"	      0042e4de    leave"
"	      0042e4df    ret 8"
);
}

// FUNCTION: COPTER_D 0x0042e4e2
void SoundManager::AddDigitalSound(long lResID, int32_t nIndex) {
// LINE 340:
	asm( 
"	      0042e4e2    push ebp"
"	      0042e4e3    mov ebp,esp"
"	      0042e4e5    sub esp,14h"
"	      0042e4e8    push ebx"
"	      0042e4e9    push esi"
"	      0042e4ea    push edi"
"	      0042e4eb    mov [ebp-14h],ecx"
);
// LINE 341:
	asm( 
"	      0042e4ee    push 7Ah"
"	      0042e4f0    call 0056A600h"
"	      0042e4f5    add esp,4"
"	      0042e4f8    mov [ebp-8],eax"
"	      0042e4fb    cmp dword ptr [ebp-8],0"
"	      0042e4ff    je near ptr 0042E519h"
"	      0042e505    mov eax,[ebp+8]"
"	      0042e508    push eax"
"	      0042e509    mov ecx,[ebp-8]"
"	      0042e50c    call 0042F296h"
"	      0042e511    mov [ebp-4],eax"
"	      0042e514    jmp near ptr 0042E520h"
"	      0042e519    mov dword ptr [ebp-4],0"
);
// LINE 342:
	asm( 
"	      0042e520    mov eax,[ebp+0Ch]"
"	      0042e523    mov ecx,[ebp-14h]"
"	      0042e526    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e52b    je near ptr 0042E55Fh"
);
// LINE 343:
	asm( 
"	      0042e531    mov eax,[ebp+0Ch]"
"	      0042e534    mov ecx,[ebp-14h]"
"	      0042e537    mov eax,[ecx+eax*4+4]"
"	      0042e53b    mov [ebp-10h],eax"
"	      0042e53e    mov eax,[ebp-10h]"
"	      0042e541    mov [ebp-0Ch],eax"
"	      0042e544    cmp dword ptr [ebp-0Ch],0"
"	      0042e548    je near ptr 0042E55Fh"
"	      0042e54e    push 1"
"	      0042e550    mov eax,[ebp-0Ch]"
"	      0042e553    mov eax,[eax]"
"	      0042e555    mov ecx,[ebp-0Ch]"
"	      0042e558    call dword ptr [eax]"
"	      0042e55a    jmp near ptr 0042E55Fh"
);
// LINE 344:
	asm( 
"	      0042e55f    mov eax,[ebp-4]"
"	      0042e562    mov ecx,[ebp+0Ch]"
"	      0042e565    mov edx,[ebp-14h]"
"	      0042e568    mov [edx+ecx*4+4],eax"
);
// LINE 345:
	asm( 
"	      0042e56c    jmp near ptr 0042E571h"
"	      0042e571    pop edi"
"	      0042e572    pop esi"
"	      0042e573    pop ebx"
"	      0042e574    leave"
"	      0042e575    ret 8"
);
}

// FUNCTION: COPTER_D 0x0042e578
void SoundManager::AddDigitalSound(const class basic_string<char>& sNewSoundFile, int32_t nIndex, int32_t nStreamingType) {
// LINE 347:
	asm( 
"	      0042e578    push ebp"
"	      0042e579    mov ebp,esp"
"	      0042e57b    sub esp,14h"
"	      0042e57e    push ebx"
"	      0042e57f    push esi"
"	      0042e580    push edi"
"	      0042e581    mov [ebp-14h],ecx"
);
// LINE 348:
	asm( 
"	      0042e584    push 7Ah"
"	      0042e586    call 0056A600h"
"	      0042e58b    add esp,4"
"	      0042e58e    mov [ebp-8],eax"
"	      0042e591    cmp dword ptr [ebp-8],0"
"	      0042e595    je near ptr 0042E5B3h"
"	      0042e59b    mov eax,[ebp+10h]"
"	      0042e59e    push eax"
"	      0042e59f    mov eax,[ebp+8]"
"	      0042e5a2    push eax"
"	      0042e5a3    mov ecx,[ebp-8]"
"	      0042e5a6    call 0042F00Fh"
"	      0042e5ab    mov [ebp-4],eax"
"	      0042e5ae    jmp near ptr 0042E5BAh"
"	      0042e5b3    mov dword ptr [ebp-4],0"
);
// LINE 349:
	asm( 
"	      0042e5ba    mov eax,[ebp+0Ch]"
"	      0042e5bd    mov ecx,[ebp-14h]"
"	      0042e5c0    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e5c5    je near ptr 0042E5F9h"
);
// LINE 350:
	asm( 
"	      0042e5cb    mov eax,[ebp+0Ch]"
"	      0042e5ce    mov ecx,[ebp-14h]"
"	      0042e5d1    mov eax,[ecx+eax*4+4]"
"	      0042e5d5    mov [ebp-10h],eax"
"	      0042e5d8    mov eax,[ebp-10h]"
"	      0042e5db    mov [ebp-0Ch],eax"
"	      0042e5de    cmp dword ptr [ebp-0Ch],0"
"	      0042e5e2    je near ptr 0042E5F9h"
"	      0042e5e8    push 1"
"	      0042e5ea    mov eax,[ebp-0Ch]"
"	      0042e5ed    mov eax,[eax]"
"	      0042e5ef    mov ecx,[ebp-0Ch]"
"	      0042e5f2    call dword ptr [eax]"
"	      0042e5f4    jmp near ptr 0042E5F9h"
);
// LINE 351:
	asm( 
"	      0042e5f9    mov eax,[ebp-4]"
"	      0042e5fc    mov ecx,[ebp+0Ch]"
"	      0042e5ff    mov edx,[ebp-14h]"
"	      0042e602    mov [edx+ecx*4+4],eax"
);
// LINE 352:
	asm( 
"	      0042e606    jmp near ptr 0042E60Bh"
"	      0042e60b    pop edi"
"	      0042e60c    pop esi"
"	      0042e60d    pop ebx"
"	      0042e60e    leave"
"	      0042e60f    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0042e612
long SoundManager::PlaySoundA(int32_t nIndex, long bPlayLooping, int32_t nDuplicateType) {
// LINE 363:
	asm( 
"	      0042e612    push ebp"
"	      0042e613    mov ebp,esp"
"	      0042e615    sub esp,4"
"	      0042e618    push ebx"
"	      0042e619    push esi"
"	      0042e61a    push edi"
"	      0042e61b    mov [ebp-4],ecx"
);
// LINE 364:
	asm( 
"	      0042e61e    mov eax,[ebp+8]"
"	      0042e621    mov ecx,[ebp-4]"
"	      0042e624    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e629    je near ptr 0042E655h"
);
// LINE 365:
	asm( 
"	      0042e62f    mov eax,[ebp+10h]"
"	      0042e632    push eax"
"	      0042e633    mov eax,[ebp+0Ch]"
"	      0042e636    push eax"
"	      0042e637    mov eax,[ebp+8]"
"	      0042e63a    mov ecx,[ebp-4]"
"	      0042e63d    mov edx,[ebp+8]"
"	      0042e640    mov ebx,[ebp-4]"
"	      0042e643    mov edx,[ebx+edx*4+4]"
"	      0042e647    mov edx,[edx]"
"	      0042e649    mov ecx,[ecx+eax*4+4]"
"	      0042e64d    call dword ptr [edx+8]"
"	      0042e650    jmp near ptr 0042E65Ch"
);
// LINE 366:
	asm( 
"	      0042e655    xor eax,eax"
"	      0042e657    jmp near ptr 0042E65Ch"
);
// LINE 367:
	asm( 
"	      0042e65c    pop edi"
"	      0042e65d    pop esi"
"	      0042e65e    pop ebx"
"	      0042e65f    leave"
"	      0042e660    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0042e663
void SoundManager::StopSound(int32_t nIndex) {
// LINE 378:
	asm( 
"	      0042e663    push ebp"
"	      0042e664    mov ebp,esp"
"	      0042e666    sub esp,4"
"	      0042e669    push ebx"
"	      0042e66a    push esi"
"	      0042e66b    push edi"
"	      0042e66c    mov [ebp-4],ecx"
);
// LINE 379:
	asm( 
"	      0042e66f    mov eax,[ebp+8]"
"	      0042e672    mov ecx,[ebp-4]"
"	      0042e675    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e67a    je near ptr 0042E699h"
);
// LINE 380:
	asm( 
"	      0042e680    mov eax,[ebp+8]"
"	      0042e683    mov ecx,[ebp-4]"
"	      0042e686    mov edx,[ebp+8]"
"	      0042e689    mov ebx,[ebp-4]"
"	      0042e68c    mov edx,[ebx+edx*4+4]"
"	      0042e690    mov edx,[edx]"
"	      0042e692    mov ecx,[ecx+eax*4+4]"
"	      0042e696    call dword ptr [edx+0Ch]"
);
// LINE 381:
	asm( 
"	      0042e699    jmp near ptr 0042E69Eh"
"	      0042e69e    pop edi"
"	      0042e69f    pop esi"
"	      0042e6a0    pop ebx"
"	      0042e6a1    leave"
"	      0042e6a2    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042e6a5
void SoundManager::StopAllSounds() {
// LINE 392:
	asm( 
"	      0042e6a5    push ebp"
"	      0042e6a6    mov ebp,esp"
"	      0042e6a8    sub esp,8"
"	      0042e6ab    push ebx"
"	      0042e6ac    push esi"
"	      0042e6ad    push edi"
"	      0042e6ae    mov [ebp-8],ecx"
);
// LINE 394:
	asm( 
"	      0042e6b1    mov dword ptr [ebp-4],0"
"	      0042e6b8    jmp near ptr 0042E6C0h"
"	      0042e6bd    inc dword ptr [ebp-4]"
"	      0042e6c0    cmp dword ptr [ebp-4],80h"
"	      0042e6c7    jge near ptr 0042E6FCh"
);
// LINE 395:
	asm( 
"	      0042e6cd    mov eax,[ebp-4]"
"	      0042e6d0    mov ecx,[ebp-8]"
"	      0042e6d3    cmp dword ptr [ecx+eax*4+4],0"
"	      0042e6d8    je near ptr 0042E6F7h"
);
// LINE 396:
	asm( 
"	      0042e6de    mov eax,[ebp-4]"
"	      0042e6e1    mov ecx,[ebp-8]"
"	      0042e6e4    mov edx,[ebp-4]"
"	      0042e6e7    mov ebx,[ebp-8]"
"	      0042e6ea    mov edx,[ebx+edx*4+4]"
"	      0042e6ee    mov edx,[edx]"
"	      0042e6f0    mov ecx,[ecx+eax*4+4]"
"	      0042e6f4    call dword ptr [edx+0Ch]"
);
// LINE 397:
	asm( 
"	      0042e6f7    jmp near ptr 0042E6BDh"
);
// LINE 398:
	asm( 
"	      0042e6fc    jmp near ptr 0042E701h"
"	      0042e701    pop edi"
"	      0042e702    pop esi"
"	      0042e703    pop ebx"
"	      0042e704    leave"
"	      0042e705    ret"
);
}

// FUNCTION: COPTER_D 0x0042e706
void Sound::Sound() {
// LINE 413:
	asm( 
"	      0042e706    push ebp"
"	      0042e707    mov ebp,esp"
"	      0042e709    sub esp,8"
"	      0042e70c    push ebx"
"	      0042e70d    push esi"
"	      0042e70e    push edi"
"	      0042e70f    mov [ebp-8],ecx"
"	      0042e712    push 10h"
"	      0042e714    call 0056A600h"
"	      0042e719    add esp,4"
"	      0042e71c    mov [ebp-4],eax"
"	      0042e71f    cmp dword ptr [ebp-4],0"
"	      0042e723    je near ptr 0042E765h"
"	      0042e729    mov eax,[ebp-4]"
"	      0042e72c    mov dword ptr [eax+4],0"
"	      0042e733    mov eax,[ebp-4]"
"	      0042e736    mov eax,[eax+4]"
"	      0042e739    mov ecx,[ebp-4]"
"	      0042e73c    mov [ecx+8],eax"
"	      0042e73f    mov eax,[ebp-4]"
"	      0042e742    mov dword ptr [eax],0"
"	      0042e748    mov eax,[ebp-4]"
"	      0042e74b    mov dword ptr [eax+0Ch],1"
"	      0042e752    jmp near ptr 0042E757h"
"	      0042e757    mov eax,[ebp-4]"
"	      0042e75a    mov ecx,[ebp-8]"
"	      0042e75d    mov [ecx+18h],eax"
"	      0042e760    jmp near ptr 0042E76Fh"
"	      0042e765    mov eax,[ebp-8]"
"	      0042e768    mov dword ptr [eax+18h],0"
"	      0042e76f    mov eax,[ebp-8]"
"	      0042e772    mov dword ptr [eax+14h],0"
"	      0042e779    jmp near ptr 0042E77Eh"
"	      0042e77e    mov eax,[ebp-8]"
"	      0042e781    mov dword ptr [eax],58F458h"
);
// LINE 414:
	asm( 
"	      0042e787    mov eax,[ebp-8]"
"	      0042e78a    mov dword ptr [eax+4],1"
);
// LINE 415:
	asm( 
"	      0042e791    mov eax,[ebp-8]"
"	      0042e794    mov dword ptr [eax+8],3"
);
// LINE 416:
	asm( 
"	      0042e79b    mov eax,[ebp-8]"
"	      0042e79e    mov dword ptr [eax+0Ch],0"
);
// LINE 417:
	asm( 
"	      0042e7a5    mov eax,[ebp-8]"
"	      0042e7a8    mov dword ptr [eax+10h],0"
);
// LINE 418:
	asm( 
"	      0042e7af    mov eax,[ebp-8]"
"	      0042e7b2    mov dword ptr [eax+1Ch],0"
);
// LINE 419:
	asm( 
"	      0042e7b9    mov eax,[ebp-8]"
"	      0042e7bc    mov dword ptr [eax+20h],0"
);
// LINE 420:
	asm( 
"	      0042e7c3    mov eax,[ebp-8]"
"	      0042e7c6    mov dword ptr [eax+24h],2710h"
);
// LINE 421:
	asm( 
"	      0042e7cd    mov eax,[ebp-8]"
"	      0042e7d0    mov dword ptr [eax+28h],0"
);
// LINE 422:
	asm( 
"	      0042e7d7    mov eax,[ebp-8]"
"	      0042e7da    mov dword ptr [eax+30h],0"
);
// LINE 423:
	asm( 
"	      0042e7e1    jmp near ptr 0042E7E6h"
"	      0042e7e6    mov eax,[ebp-8]"
"	      0042e7e9    pop edi"
"	      0042e7ea    pop esi"
"	      0042e7eb    pop ebx"
"	      0042e7ec    leave"
"	      0042e7ed    ret"
);
}

// FUNCTION: COPTER_D 0x0042e7ee
void Sound::~Sound() {
// LINE 432:
	asm( 
"	      0042e7ee    push ebp"
"	      0042e7ef    mov ebp,esp"
"	      0042e7f1    sub esp,1Ch"
"	      0042e7f4    push ebx"
"	      0042e7f5    push esi"
"	      0042e7f6    push edi"
"	      0042e7f7    mov [ebp-1Ch],ecx"
"	      0042e7fa    mov eax,[ebp-1Ch]"
"	      0042e7fd    mov dword ptr [eax],58F458h"
);
// LINE 434:
	asm( 
"	      0042e803    jmp near ptr 0042E808h"
"	      0042e808    mov eax,[ebp-1Ch]"
"	      0042e80b    mov eax,[eax+18h]"
"	      0042e80e    dec dword ptr [eax+0Ch]"
"	      0042e811    mov eax,[ebp-1Ch]"
"	      0042e814    mov eax,[eax+18h]"
"	      0042e817    cmp dword ptr [eax+0Ch],0"
"	      0042e81b    jne near ptr 0042E894h"
"	      0042e821    mov eax,[ebp-1Ch]"
"	      0042e824    mov eax,[eax+18h]"
"	      0042e827    mov [ebp-10h],eax"
"	      0042e82a    mov eax,[ebp-10h]"
"	      0042e82d    mov [ebp-0Ch],eax"
"	      0042e830    cmp dword ptr [ebp-0Ch],0"
"	      0042e834    je near ptr 0042E894h"
"	      0042e83a    mov eax,[ebp-0Ch]"
"	      0042e83d    cmp dword ptr [eax+8],0"
"	      0042e841    je near ptr 0042E874h"
"	      0042e847    mov eax,[ebp-0Ch]"
"	      0042e84a    mov eax,[eax]"
"	      0042e84c    mov [ebp-14h],eax"
"	      0042e84f    mov eax,[ebp-14h]"
"	      0042e852    mov [ebp-18h],eax"
"	      0042e855    mov eax,[ebp-18h]"
"	      0042e858    push eax"
"	      0042e859    call 0056A740h"
"	      0042e85e    add esp,4"
"	      0042e861    mov eax,[ebp-0Ch]"
"	      0042e864    mov dword ptr [eax+8],0"
"	      0042e86b    mov eax,[ebp-0Ch]"
"	      0042e86e    mov dword ptr [eax],0"
"	      0042e874    jmp near ptr 0042E879h"
"	      0042e879    jmp near ptr 0042E87Eh"
"	      0042e87e    mov eax,[ebp-0Ch]"
"	      0042e881    push eax"
"	      0042e882    call 0056A740h"
"	      0042e887    add esp,4"
"	      0042e88a    jmp near ptr 0042E88Fh"
"	      0042e88f    jmp near ptr 0042E894h"
"	      0042e894    jmp near ptr 0042E899h"
"	      0042e899    mov eax,[ebp-1Ch]"
"	      0042e89c    cmp dword ptr [eax+14h],0"
"	      0042e8a0    je near ptr 0042E8C1h"
"	      0042e8a6    mov eax,[ebp-1Ch]"
"	      0042e8a9    mov eax,[eax+14h]"
"	      0042e8ac    mov [ebp-4],eax"
"	      0042e8af    mov eax,[ebp-4]"
"	      0042e8b2    mov [ebp-8],eax"
"	      0042e8b5    mov eax,[ebp-8]"
"	      0042e8b8    push eax"
"	      0042e8b9    call 0056A740h"
"	      0042e8be    add esp,4"
"	      0042e8c1    jmp near ptr 0042E8C6h"
"	      0042e8c6    pop edi"
"	      0042e8c7    pop esi"
"	      0042e8c8    pop ebx"
"	      0042e8c9    leave"
"	      0042e8ca    ret"
);
}

// FUNCTION: COPTER_D 0x0042e8cb
class Sound& Sound::operator=(const class Sound& newSound) {
// LINE 443:
	asm( 
"	      0042e8cb    push ebp"
"	      0042e8cc    mov ebp,esp"
"	      0042e8ce    sub esp,28h"
"	      0042e8d1    push ebx"
"	      0042e8d2    push esi"
"	      0042e8d3    push edi"
"	      0042e8d4    mov [ebp-28h],ecx"
);
// LINE 444:
	asm( 
"	      0042e8d7    mov eax,[ebp+8]"
"	      0042e8da    mov eax,[eax+4]"
"	      0042e8dd    mov ecx,[ebp-28h]"
"	      0042e8e0    mov [ecx+4],eax"
);
// LINE 445:
	asm( 
"	      0042e8e3    mov eax,[ebp+8]"
"	      0042e8e6    mov eax,[eax+8]"
"	      0042e8e9    mov ecx,[ebp-28h]"
"	      0042e8ec    mov [ecx+8],eax"
);
// LINE 446:
	asm( 
"	      0042e8ef    mov eax,[ebp+8]"
"	      0042e8f2    mov eax,[eax+0Ch]"
"	      0042e8f5    mov ecx,[ebp-28h]"
"	      0042e8f8    mov [ecx+0Ch],eax"
);
// LINE 447:
	asm( 
"	      0042e8fb    mov eax,[ebp+8]"
"	      0042e8fe    mov eax,[eax+1Ch]"
"	      0042e901    mov ecx,[ebp-28h]"
"	      0042e904    mov [ecx+1Ch],eax"
);
// LINE 448:
	asm( 
"	      0042e907    mov eax,[ebp+8]"
"	      0042e90a    mov eax,[eax+20h]"
"	      0042e90d    mov ecx,[ebp-28h]"
"	      0042e910    mov [ecx+20h],eax"
);
// LINE 449:
	asm( 
"	      0042e913    mov eax,[ebp-28h]"
"	      0042e916    add eax,14h"
"	      0042e919    mov ecx,[ebp+8]"
"	      0042e91c    add ecx,14h"
"	      0042e91f    cmp eax,ecx"
"	      0042e921    je near ptr 0042EADAh"
"	      0042e927    mov eax,[ebp-28h]"
"	      0042e92a    mov eax,[eax+18h]"
"	      0042e92d    dec dword ptr [eax+0Ch]"
"	      0042e930    mov eax,[ebp-28h]"
"	      0042e933    mov eax,[eax+18h]"
"	      0042e936    cmp dword ptr [eax+0Ch],0"
"	      0042e93a    jne near ptr 0042E9B3h"
"	      0042e940    mov eax,[ebp-28h]"
"	      0042e943    mov eax,[eax+18h]"
"	      0042e946    mov [ebp-0Ch],eax"
"	      0042e949    mov eax,[ebp-0Ch]"
"	      0042e94c    mov [ebp-8],eax"
"	      0042e94f    cmp dword ptr [ebp-8],0"
"	      0042e953    je near ptr 0042E9B3h"
"	      0042e959    mov eax,[ebp-8]"
"	      0042e95c    cmp dword ptr [eax+8],0"
"	      0042e960    je near ptr 0042E993h"
"	      0042e966    mov eax,[ebp-8]"
"	      0042e969    mov eax,[eax]"
"	      0042e96b    mov [ebp-10h],eax"
"	      0042e96e    mov eax,[ebp-10h]"
"	      0042e971    mov [ebp-14h],eax"
"	      0042e974    mov eax,[ebp-14h]"
"	      0042e977    push eax"
"	      0042e978    call 0056A740h"
"	      0042e97d    add esp,4"
"	      0042e980    mov eax,[ebp-8]"
"	      0042e983    mov dword ptr [eax+8],0"
"	      0042e98a    mov eax,[ebp-8]"
"	      0042e98d    mov dword ptr [eax],0"
"	      0042e993    jmp near ptr 0042E998h"
"	      0042e998    jmp near ptr 0042E99Dh"
"	      0042e99d    mov eax,[ebp-8]"
"	      0042e9a0    push eax"
"	      0042e9a1    call 0056A740h"
"	      0042e9a6    add esp,4"
"	      0042e9a9    jmp near ptr 0042E9AEh"
"	      0042e9ae    jmp near ptr 0042E9B3h"
"	      0042e9b3    jmp near ptr 0042E9B8h"
"	      0042e9b8    jmp near ptr 0042E9BDh"
"	      0042e9bd    mov eax,[ebp+8]"
"	      0042e9c0    mov eax,[eax+18h]"
"	      0042e9c3    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      0042e9c7    je near ptr 0042E9E7h"
"	      0042e9cd    mov eax,[ebp+8]"
"	      0042e9d0    mov eax,[eax+18h]"
"	      0042e9d3    mov ecx,[ebp-28h]"
"	      0042e9d6    mov [ecx+18h],eax"
"	      0042e9d9    mov eax,[ebp-28h]"
"	      0042e9dc    mov eax,[eax+18h]"
"	      0042e9df    inc dword ptr [eax+0Ch]"
"	      0042e9e2    jmp near ptr 0042EADAh"
"	      0042e9e7    push 10h"
"	      0042e9e9    call 0056A600h"
"	      0042e9ee    add esp,4"
"	      0042e9f1    mov [ebp-4],eax"
"	      0042e9f4    cmp dword ptr [ebp-4],0"
"	      0042e9f8    je near ptr 0042EAD0h"
"	      0042e9fe    jmp near ptr 0042EA03h"
"	      0042ea03    mov eax,[ebp+8]"
"	      0042ea06    mov eax,[eax+18h]"
"	      0042ea09    mov eax,[eax+4]"
"	      0042ea0c    mov [ebp-24h],eax"
"	      0042ea0f    mov eax,[ebp-24h]"
"	      0042ea12    mov ecx,[ebp-4]"
"	      0042ea15    mov [ecx+4],eax"
"	      0042ea18    mov eax,[ebp-4]"
"	      0042ea1b    mov eax,[eax+4]"
"	      0042ea1e    mov ecx,[ebp-4]"
"	      0042ea21    mov [ecx+8],eax"
"	      0042ea24    mov eax,[ebp-4]"
"	      0042ea27    cmp dword ptr [eax+8],0"
"	      0042ea2b    je near ptr 0042EAAAh"
"	      0042ea31    mov eax,[ebp-4]"
"	      0042ea34    mov eax,[eax+8]"
"	      0042ea37    push eax"
"	      0042ea38    call 0056A600h"
"	      0042ea3d    add esp,4"
"	      0042ea40    mov ecx,[ebp-4]"
"	      0042ea43    mov [ecx],eax"
"	      0042ea45    jmp near ptr 0042EA4Ah"
"	      0042ea4a    mov eax,[ebp+8]"
"	      0042ea4d    mov eax,[eax+18h]"
"	      0042ea50    cmp dword ptr [eax+4],0"
"	      0042ea54    je near ptr 0042EA6Fh"
"	      0042ea5a    mov eax,[ebp+8]"
"	      0042ea5d    mov eax,[eax+18h]"
"	      0042ea60    mov eax,[eax]"
"	      0042ea62    mov [ebp-18h],eax"
"	      0042ea65    jmp near ptr 0042EA7Bh"
"	      0042ea6a    jmp near ptr 0042EA7Bh"
"	      0042ea6f    mov dword ptr [ebp-18h],0"
"	      0042ea76    jmp near ptr 0042EA7Bh"
"	      0042ea7b    mov eax,[ebp-4]"
"	      0042ea7e    mov eax,[eax+4]"
"	      0042ea81    mov [ebp-1Ch],eax"
"	      0042ea84    mov eax,[ebp-4]"
"	      0042ea87    mov eax,[eax]"
"	      0042ea89    mov [ebp-20h],eax"
"	      0042ea8c    mov eax,[ebp-1Ch]"
"	      0042ea8f    push eax"
"	      0042ea90    mov eax,[ebp-18h]"
"	      0042ea93    push eax"
"	      0042ea94    mov eax,[ebp-20h]"
"	      0042ea97    push eax"
"	      0042ea98    call 0056A800h"
"	      0042ea9d    add esp,0Ch"
"	      0042eaa0    jmp near ptr 0042EAA5h"
"	      0042eaa5    jmp near ptr 0042EAB3h"
"	      0042eaaa    mov eax,[ebp-4]"
"	      0042eaad    mov dword ptr [eax],0"
"	      0042eab3    mov eax,[ebp-4]"
"	      0042eab6    mov dword ptr [eax+0Ch],1"
"	      0042eabd    jmp near ptr 0042EAC2h"
"	      0042eac2    mov eax,[ebp-4]"
"	      0042eac5    mov ecx,[ebp-28h]"
"	      0042eac8    mov [ecx+18h],eax"
"	      0042eacb    jmp near ptr 0042EADAh"
"	      0042ead0    mov eax,[ebp-28h]"
"	      0042ead3    mov dword ptr [eax+18h],0"
"	      0042eada    jmp near ptr 0042EADFh"
);
// LINE 450:
	asm( 
"	      0042eadf    mov eax,[ebp+8]"
"	      0042eae2    mov eax,[eax+10h]"
"	      0042eae5    mov ecx,[ebp-28h]"
"	      0042eae8    mov [ecx+10h],eax"
);
// LINE 451:
	asm( 
"	      0042eaeb    mov eax,[ebp-28h]"
"	      0042eaee    jmp near ptr 0042EAF3h"
);
// LINE 452:
	asm( 
"	      0042eaf3    pop edi"
"	      0042eaf4    pop esi"
"	      0042eaf5    pop ebx"
"	      0042eaf6    leave"
"	      0042eaf7    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042eafa
int32_t operator<(const class Sound& compareSound1, const class Sound& compareSound2) {
// LINE 467:
	asm( 
"	      0042eafa    push ebp"
"	      0042eafb    mov ebp,esp"
"	      0042eafd    push ebx"
"	      0042eafe    push esi"
"	      0042eaff    push edi"
);
// LINE 468:
	asm( 
"	      0042eb00    mov eax,[ebp+0Ch]"
"	      0042eb03    mov ecx,[ebp+8]"
"	      0042eb06    mov ecx,[ecx+0Ch]"
"	      0042eb09    cmp [eax+0Ch],ecx"
"	      0042eb0c    jle near ptr 0042EB1Ch"
"	      0042eb12    mov eax,1"
"	      0042eb17    jmp near ptr 0042EB1Eh"
"	      0042eb1c    xor eax,eax"
"	      0042eb1e    jmp near ptr 0042EB23h"
);
// LINE 469:
	asm( 
"	      0042eb23    pop edi"
"	      0042eb24    pop esi"
"	      0042eb25    pop ebx"
"	      0042eb26    leave"
"	      0042eb27    ret"
);
}

// FUNCTION: COPTER_D 0x0042eb28
int32_t operator==(const class Sound& compareSound1, const class Sound& compareSound2) {
// LINE 484:
	asm( 
"	      0042eb28    push ebp"
"	      0042eb29    mov ebp,esp"
"	      0042eb2b    sub esp,24h"
"	      0042eb2e    push ebx"
"	      0042eb2f    push esi"
"	      0042eb30    push edi"
);
// LINE 485:
	asm( 
"	      0042eb31    mov eax,[ebp+8]"
"	      0042eb34    mov ecx,[ebp+0Ch]"
"	      0042eb37    mov ecx,[ecx+0Ch]"
"	      0042eb3a    cmp [eax+0Ch],ecx"
"	      0042eb3d    je near ptr 0042EB4Ah"
);
// LINE 486:
	asm( 
"	      0042eb43    xor eax,eax"
"	      0042eb45    jmp near ptr 0042ED62h"
);
// LINE 487:
	asm( 
"	      0042eb4a    mov eax,[ebp+8]"
"	      0042eb4d    cmp dword ptr [eax+4],1"
"	      0042eb51    jne near ptr 0042ED28h"
);
// LINE 488:
	asm( 
"	      0042eb57    jmp near ptr 0042EB5Ch"
"	      0042eb5c    mov eax,[ebp+8]"
"	      0042eb5f    mov eax,[eax+18h]"
"	      0042eb62    cmp dword ptr [eax+4],0FFFFFFFFh"
"	      0042eb66    jae near ptr 0042EB82h"
"	      0042eb6c    jmp near ptr 0042EB71h"
"	      0042eb71    mov eax,[ebp+8]"
"	      0042eb74    mov eax,[eax+18h]"
"	      0042eb77    mov eax,[eax+4]"
"	      0042eb7a    mov [ebp-4],eax"
"	      0042eb7d    jmp near ptr 0042EB89h"
"	      0042eb82    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      0042eb89    jmp near ptr 0042EB8Eh"
"	      0042eb8e    jmp near ptr 0042EB93h"
"	      0042eb93    mov eax,[ebp+0Ch]"
"	      0042eb96    mov eax,[eax+18h]"
"	      0042eb99    cmp dword ptr [eax+4],0"
"	      0042eb9d    je near ptr 0042EBB8h"
"	      0042eba3    mov eax,[ebp+0Ch]"
"	      0042eba6    mov eax,[eax+18h]"
"	      0042eba9    mov eax,[eax]"
"	      0042ebab    mov [ebp-8],eax"
"	      0042ebae    jmp near ptr 0042EBC4h"
"	      0042ebb3    jmp near ptr 0042EBC4h"
"	      0042ebb8    mov dword ptr [ebp-8],0"
"	      0042ebbf    jmp near ptr 0042EBC4h"
"	      0042ebc4    mov eax,[ebp+0Ch]"
"	      0042ebc7    mov eax,[eax+18h]"
"	      0042ebca    mov eax,[eax+4]"
"	      0042ebcd    mov [ebp-20h],eax"
"	      0042ebd0    jmp near ptr 0042EBD5h"
"	      0042ebd5    mov eax,[ebp+8]"
"	      0042ebd8    mov eax,[eax+18h]"
"	      0042ebdb    cmp dword ptr [eax+4],0"
"	      0042ebdf    jae near ptr 0042EC17h"
"	      0042ebe5    push 59722Ch"
"	      0042ebea    mov ecx,638C00h"
"	      0042ebef    call 00569960h"
"	      0042ebf4    mov [ebp-18h],eax"
"	      0042ebf7    mov eax,[ebp-18h]"
"	      0042ebfa    push eax"
"	      0042ebfb    call 004011B0h"
"	      0042ec00    add esp,4"
"	      0042ec03    jmp near ptr 0042EC08h"
"	      0042ec08    push 1"
"	      0042ec0a    call 00569430h"
"	      0042ec0f    add esp,4"
"	      0042ec12    jmp near ptr 0042EC17h"
"	      0042ec17    mov eax,[ebp-20h]"
"	      0042ec1a    mov ecx,[ebp-4]"
"	      0042ec1d    cmp eax,ecx"
"	      0042ec1f    jb near ptr 0042EC27h"
"	      0042ec25    mov eax,ecx"
"	      0042ec27    mov [ebp-10h],eax"
"	      0042ec2a    jmp near ptr 0042EC2Fh"
"	      0042ec2f    mov eax,[ebp+8]"
"	      0042ec32    mov eax,[eax+18h]"
"	      0042ec35    cmp dword ptr [eax+4],0"
"	      0042ec39    jne near ptr 0042EC7Bh"
"	      0042ec3f    cmp dword ptr [ebp-8],0"
"	      0042ec43    je near ptr 0042EC65h"
"	      0042ec49    jmp near ptr 0042EC4Eh"
"	      0042ec4e    jmp near ptr 0042EC53h"
"	      0042ec53    xor eax,eax"
"	      0042ec55    mov ecx,[ebp-8]"
"	      0042ec58    movsx ecx,byte ptr [ecx]"
"	      0042ec5b    sub eax,ecx"
"	      0042ec5d    mov [ebp-1Ch],eax"
"	      0042ec60    jmp near ptr 0042EC76h"
"	      0042ec65    jmp near ptr 0042EC6Ah"
"	      0042ec6a    jmp near ptr 0042EC6Fh"
"	      0042ec6f    mov dword ptr [ebp-1Ch],0"
"	      0042ec76    jmp near ptr 0042ECFBh"
"	      0042ec7b    jmp near ptr 0042EC80h"
"	      0042ec80    mov eax,[ebp+8]"
"	      0042ec83    mov eax,[eax+18h]"
"	      0042ec86    cmp dword ptr [eax+4],0"
"	      0042ec8a    je near ptr 0042ECA5h"
"	      0042ec90    mov eax,[ebp+8]"
"	      0042ec93    mov eax,[eax+18h]"
"	      0042ec96    mov eax,[eax]"
"	      0042ec98    mov [ebp-14h],eax"
"	      0042ec9b    jmp near ptr 0042ECB1h"
"	      0042eca0    jmp near ptr 0042ECB1h"
"	      0042eca5    mov dword ptr [ebp-14h],0"
"	      0042ecac    jmp near ptr 0042ECB1h"
"	      0042ecb1    mov eax,[ebp-10h]"
"	      0042ecb4    push eax"
"	      0042ecb5    mov eax,[ebp-8]"
"	      0042ecb8    push eax"
"	      0042ecb9    mov eax,[ebp-14h]"
"	      0042ecbc    push eax"
"	      0042ecbd    call 0056AC90h"
"	      0042ecc2    add esp,0Ch"
"	      0042ecc5    mov [ebp-0Ch],eax"
"	      0042ecc8    jmp near ptr 0042ECCDh"
"	      0042eccd    cmp dword ptr [ebp-0Ch],0"
"	      0042ecd1    je near ptr 0042ECE2h"
"	      0042ecd7    mov eax,[ebp-0Ch]"
"	      0042ecda    mov [ebp-1Ch],eax"
"	      0042ecdd    jmp near ptr 0042ECF6h"
"	      0042ece2    jmp near ptr 0042ECE7h"
"	      0042ece7    mov eax,[ebp+8]"
"	      0042ecea    mov eax,[eax+18h]"
"	      0042eced    mov eax,[eax+4]"
"	      0042ecf0    sub eax,[ebp-20h]"
"	      0042ecf3    mov [ebp-1Ch],eax"
"	      0042ecf6    jmp near ptr 0042ECFBh"
"	      0042ecfb    jmp near ptr 0042ED00h"
"	      0042ed00    cmp dword ptr [ebp-1Ch],0"
"	      0042ed04    jne near ptr 0042ED14h"
"	      0042ed0a    mov eax,1"
"	      0042ed0f    jmp near ptr 0042ED16h"
"	      0042ed14    xor eax,eax"
"	      0042ed16    jmp near ptr 0042ED1Eh"
"	      0042ed1b    mov eax,[ebp-24h]"
"	      0042ed1e    jmp near ptr 0042ED62h"
);
// LINE 489:
	asm( 
"	      0042ed23    jmp near ptr 0042ED58h"
"	      0042ed28    mov eax,[ebp+8]"
"	      0042ed2b    cmp dword ptr [eax+4],0"
"	      0042ed2f    jne near ptr 0042ED58h"
);
// LINE 490:
	asm( 
"	      0042ed35    mov eax,[ebp+8]"
"	      0042ed38    mov ecx,[ebp+0Ch]"
"	      0042ed3b    mov ecx,[ecx+10h]"
"	      0042ed3e    cmp [eax+10h],ecx"
"	      0042ed41    jne near ptr 0042ED51h"
"	      0042ed47    mov eax,1"
"	      0042ed4c    jmp near ptr 0042ED53h"
"	      0042ed51    xor eax,eax"
"	      0042ed53    jmp near ptr 0042ED62h"
);
// LINE 491:
	asm( 
"	      0042ed58    mov eax,1"
"	      0042ed5d    jmp near ptr 0042ED62h"
);
// LINE 492:
	asm( 
"	      0042ed62    pop edi"
"	      0042ed63    pop esi"
"	      0042ed64    pop ebx"
"	      0042ed65    leave"
"	      0042ed66    ret"
);
}

// FUNCTION: COPTER_D 0x0042ed67
void Sound::SetSoundFile(const class basic_string<char>& sNewSoundFile) {
// LINE 501:
	asm( 
"	      0042ed67    push ebp"
"	      0042ed68    mov ebp,esp"
"	      0042ed6a    sub esp,28h"
"	      0042ed6d    push ebx"
"	      0042ed6e    push esi"
"	      0042ed6f    push edi"
"	      0042ed70    mov [ebp-28h],ecx"
);
// LINE 502:
	asm( 
"	      0042ed73    mov eax,[ebp-28h]"
"	      0042ed76    add eax,14h"
"	      0042ed79    cmp eax,[ebp+8]"
"	      0042ed7c    je near ptr 0042EF35h"
"	      0042ed82    mov eax,[ebp-28h]"
"	      0042ed85    mov eax,[eax+18h]"
"	      0042ed88    dec dword ptr [eax+0Ch]"
"	      0042ed8b    mov eax,[ebp-28h]"
"	      0042ed8e    mov eax,[eax+18h]"
"	      0042ed91    cmp dword ptr [eax+0Ch],0"
"	      0042ed95    jne near ptr 0042EE0Eh"
"	      0042ed9b    mov eax,[ebp-28h]"
"	      0042ed9e    mov eax,[eax+18h]"
"	      0042eda1    mov [ebp-0Ch],eax"
"	      0042eda4    mov eax,[ebp-0Ch]"
"	      0042eda7    mov [ebp-8],eax"
"	      0042edaa    cmp dword ptr [ebp-8],0"
"	      0042edae    je near ptr 0042EE0Eh"
"	      0042edb4    mov eax,[ebp-8]"
"	      0042edb7    cmp dword ptr [eax+8],0"
"	      0042edbb    je near ptr 0042EDEEh"
"	      0042edc1    mov eax,[ebp-8]"
"	      0042edc4    mov eax,[eax]"
"	      0042edc6    mov [ebp-10h],eax"
"	      0042edc9    mov eax,[ebp-10h]"
"	      0042edcc    mov [ebp-14h],eax"
"	      0042edcf    mov eax,[ebp-14h]"
"	      0042edd2    push eax"
"	      0042edd3    call 0056A740h"
"	      0042edd8    add esp,4"
"	      0042eddb    mov eax,[ebp-8]"
"	      0042edde    mov dword ptr [eax+8],0"
"	      0042ede5    mov eax,[ebp-8]"
"	      0042ede8    mov dword ptr [eax],0"
"	      0042edee    jmp near ptr 0042EDF3h"
"	      0042edf3    jmp near ptr 0042EDF8h"
"	      0042edf8    mov eax,[ebp-8]"
"	      0042edfb    push eax"
"	      0042edfc    call 0056A740h"
"	      0042ee01    add esp,4"
"	      0042ee04    jmp near ptr 0042EE09h"
"	      0042ee09    jmp near ptr 0042EE0Eh"
"	      0042ee0e    jmp near ptr 0042EE13h"
"	      0042ee13    jmp near ptr 0042EE18h"
"	      0042ee18    mov eax,[ebp+8]"
"	      0042ee1b    mov eax,[eax+4]"
"	      0042ee1e    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      0042ee22    je near ptr 0042EE42h"
"	      0042ee28    mov eax,[ebp+8]"
"	      0042ee2b    mov eax,[eax+4]"
"	      0042ee2e    mov ecx,[ebp-28h]"
"	      0042ee31    mov [ecx+18h],eax"
"	      0042ee34    mov eax,[ebp-28h]"
"	      0042ee37    mov eax,[eax+18h]"
"	      0042ee3a    inc dword ptr [eax+0Ch]"
"	      0042ee3d    jmp near ptr 0042EF35h"
"	      0042ee42    push 10h"
"	      0042ee44    call 0056A600h"
"	      0042ee49    add esp,4"
"	      0042ee4c    mov [ebp-4],eax"
"	      0042ee4f    cmp dword ptr [ebp-4],0"
"	      0042ee53    je near ptr 0042EF2Bh"
"	      0042ee59    jmp near ptr 0042EE5Eh"
"	      0042ee5e    mov eax,[ebp+8]"
"	      0042ee61    mov eax,[eax+4]"
"	      0042ee64    mov eax,[eax+4]"
"	      0042ee67    mov [ebp-24h],eax"
"	      0042ee6a    mov eax,[ebp-24h]"
"	      0042ee6d    mov ecx,[ebp-4]"
"	      0042ee70    mov [ecx+4],eax"
"	      0042ee73    mov eax,[ebp-4]"
"	      0042ee76    mov eax,[eax+4]"
"	      0042ee79    mov ecx,[ebp-4]"
"	      0042ee7c    mov [ecx+8],eax"
"	      0042ee7f    mov eax,[ebp-4]"
"	      0042ee82    cmp dword ptr [eax+8],0"
"	      0042ee86    je near ptr 0042EF05h"
"	      0042ee8c    mov eax,[ebp-4]"
"	      0042ee8f    mov eax,[eax+8]"
"	      0042ee92    push eax"
"	      0042ee93    call 0056A600h"
"	      0042ee98    add esp,4"
"	      0042ee9b    mov ecx,[ebp-4]"
"	      0042ee9e    mov [ecx],eax"
"	      0042eea0    jmp near ptr 0042EEA5h"
"	      0042eea5    mov eax,[ebp+8]"
"	      0042eea8    mov eax,[eax+4]"
"	      0042eeab    cmp dword ptr [eax+4],0"
"	      0042eeaf    je near ptr 0042EECAh"
"	      0042eeb5    mov eax,[ebp+8]"
"	      0042eeb8    mov eax,[eax+4]"
"	      0042eebb    mov eax,[eax]"
"	      0042eebd    mov [ebp-18h],eax"
"	      0042eec0    jmp near ptr 0042EED6h"
"	      0042eec5    jmp near ptr 0042EED6h"
"	      0042eeca    mov dword ptr [ebp-18h],0"
"	      0042eed1    jmp near ptr 0042EED6h"
"	      0042eed6    mov eax,[ebp-4]"
"	      0042eed9    mov eax,[eax+4]"
"	      0042eedc    mov [ebp-1Ch],eax"
"	      0042eedf    mov eax,[ebp-4]"
"	      0042eee2    mov eax,[eax]"
"	      0042eee4    mov [ebp-20h],eax"
"	      0042eee7    mov eax,[ebp-1Ch]"
"	      0042eeea    push eax"
"	      0042eeeb    mov eax,[ebp-18h]"
"	      0042eeee    push eax"
"	      0042eeef    mov eax,[ebp-20h]"
"	      0042eef2    push eax"
"	      0042eef3    call 0056A800h"
"	      0042eef8    add esp,0Ch"
"	      0042eefb    jmp near ptr 0042EF00h"
"	      0042ef00    jmp near ptr 0042EF0Eh"
"	      0042ef05    mov eax,[ebp-4]"
"	      0042ef08    mov dword ptr [eax],0"
"	      0042ef0e    mov eax,[ebp-4]"
"	      0042ef11    mov dword ptr [eax+0Ch],1"
"	      0042ef18    jmp near ptr 0042EF1Dh"
"	      0042ef1d    mov eax,[ebp-4]"
"	      0042ef20    mov ecx,[ebp-28h]"
"	      0042ef23    mov [ecx+18h],eax"
"	      0042ef26    jmp near ptr 0042EF35h"
"	      0042ef2b    mov eax,[ebp-28h]"
"	      0042ef2e    mov dword ptr [eax+18h],0"
"	      0042ef35    jmp near ptr 0042EF3Ah"
);
// LINE 503:
	asm( 
"	      0042ef3a    mov eax,[ebp-28h]"
"	      0042ef3d    mov dword ptr [eax+1Ch],0"
);
// LINE 504:
	asm( 
"	      0042ef44    mov eax,[ebp-28h]"
"	      0042ef47    mov dword ptr [eax+30h],1"
);
// LINE 505:
	asm( 
"	      0042ef4e    jmp near ptr 0042EF53h"
"	      0042ef53    pop edi"
"	      0042ef54    pop esi"
"	      0042ef55    pop ebx"
"	      0042ef56    leave"
"	      0042ef57    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042ef5a
int32_t Sound::GetSoundType() {
// LINE 511:
	asm( 
"	      0042ef5a    push ebp"
"	      0042ef5b    mov ebp,esp"
"	      0042ef5d    sub esp,4"
"	      0042ef60    push ebx"
"	      0042ef61    push esi"
"	      0042ef62    push edi"
"	      0042ef63    mov [ebp-4],ecx"
);
// LINE 512:
	asm( 
"	      0042ef66    xor eax,eax"
"	      0042ef68    jmp near ptr 0042EF6Dh"
);
// LINE 513:
	asm( 
"	      0042ef6d    pop edi"
"	      0042ef6e    pop esi"
"	      0042ef6f    pop ebx"
"	      0042ef70    leave"
"	      0042ef71    ret"
);
}

// FUNCTION: COPTER_D 0x0042ef72
unsigned long Sound::GetTotalMemoryUsage() {
// LINE 519:
	asm( 
"	      0042ef72    push ebp"
"	      0042ef73    mov ebp,esp"
"	      0042ef75    push ebx"
"	      0042ef76    push esi"
"	      0042ef77    push edi"
);
// LINE 520:
	asm( 
"	      0042ef78    mov eax,ds:[597E5Ch]"
"	      0042ef7d    jmp near ptr 0042EF82h"
);
// LINE 521:
	asm( 
"	      0042ef82    pop edi"
"	      0042ef83    pop esi"
"	      0042ef84    pop ebx"
"	      0042ef85    leave"
"	      0042ef86    ret"
);
}

// FUNCTION: COPTER_D 0x0042ef87
void DigitalSound::DigitalSound() {
// LINE 538:
	asm( 
"	      0042ef87    push ebp"
"	      0042ef88    mov ebp,esp"
"	      0042ef8a    sub esp,8"
"	      0042ef8d    push ebx"
"	      0042ef8e    push esi"
"	      0042ef8f    push edi"
"	      0042ef90    mov [ebp-8],ecx"
"	      0042ef93    mov ecx,[ebp-8]"
"	      0042ef96    call 0042E706h"
"	      0042ef9b    mov eax,[ebp-8]"
"	      0042ef9e    mov dword ptr [eax],58F488h"
);
// LINE 539:
	asm( 
"	      0042efa4    mov eax,[ebp-8]"
"	      0042efa7    mov dword ptr [eax+34h],0"
);
// LINE 544:
	asm( 
"	      0042efae    mov eax,[ebp-8]"
"	      0042efb1    mov dword ptr [eax+3Ch],0"
);
// LINE 546:
	asm( 
"	      0042efb8    mov eax,[ebp-8]"
"	      0042efbb    mov dword ptr [eax+72h],0"
);
// LINE 547:
	asm( 
"	      0042efc2    mov eax,[ebp-8]"
"	      0042efc5    mov dword ptr [eax+76h],0E0h"
);
// LINE 548:
	asm( 
"	      0042efcc    mov eax,[ebp-8]"
"	      0042efcf    mov dword ptr [eax+38h],0"
);
// LINE 549:
	asm( 
"	      0042efd6    mov dword ptr [ebp-4],0"
"	      0042efdd    jmp near ptr 0042EFE5h"
"	      0042efe2    inc dword ptr [ebp-4]"
"	      0042efe5    cmp dword ptr [ebp-4],8"
"	      0042efe9    jge near ptr 0042F002h"
);
// LINE 550:
	asm( 
"	      0042efef    mov eax,[ebp-4]"
"	      0042eff2    mov ecx,[ebp-8]"
"	      0042eff5    mov dword ptr [ecx+eax*4+52h],0"
"	      0042effd    jmp near ptr 0042EFE2h"
);
// LINE 556:
	asm( 
"	      0042f002    jmp near ptr 0042F007h"
"	      0042f007    mov eax,[ebp-8]"
"	      0042f00a    pop edi"
"	      0042f00b    pop esi"
"	      0042f00c    pop ebx"
"	      0042f00d    leave"
"	      0042f00e    ret"
);
}

// FUNCTION: COPTER_D 0x0042f00f
void DigitalSound::DigitalSound(const class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
// LINE 566:
	asm( 
"	      0042f00f    push ebp"
"	      0042f010    mov ebp,esp"
"	      0042f012    sub esp,2Ch"
"	      0042f015    push ebx"
"	      0042f016    push esi"
"	      0042f017    push edi"
"	      0042f018    mov [ebp-2Ch],ecx"
"	      0042f01b    mov ecx,[ebp-2Ch]"
"	      0042f01e    call 0042E706h"
"	      0042f023    mov eax,[ebp+0Ch]"
"	      0042f026    mov ecx,[ebp-2Ch]"
"	      0042f029    mov [ecx+34h],eax"
"	      0042f02c    mov eax,[ebp-2Ch]"
"	      0042f02f    mov dword ptr [eax],58F488h"
);
// LINE 570:
	asm( 
"	      0042f035    mov eax,[ebp-2Ch]"
"	      0042f038    mov dword ptr [eax+3Ch],0"
);
// LINE 572:
	asm( 
"	      0042f03f    mov eax,[ebp-2Ch]"
"	      0042f042    mov dword ptr [eax+72h],0"
);
// LINE 573:
	asm( 
"	      0042f049    mov eax,[ebp-2Ch]"
"	      0042f04c    mov dword ptr [eax+76h],0E0h"
);
// LINE 574:
	asm( 
"	      0042f053    mov eax,[ebp-2Ch]"
"	      0042f056    add eax,14h"
"	      0042f059    cmp eax,[ebp+8]"
"	      0042f05c    je near ptr 0042F215h"
"	      0042f062    mov eax,[ebp-2Ch]"
"	      0042f065    mov eax,[eax+18h]"
"	      0042f068    dec dword ptr [eax+0Ch]"
"	      0042f06b    mov eax,[ebp-2Ch]"
"	      0042f06e    mov eax,[eax+18h]"
"	      0042f071    cmp dword ptr [eax+0Ch],0"
"	      0042f075    jne near ptr 0042F0EEh"
"	      0042f07b    mov eax,[ebp-2Ch]"
"	      0042f07e    mov eax,[eax+18h]"
"	      0042f081    mov [ebp-10h],eax"
"	      0042f084    mov eax,[ebp-10h]"
"	      0042f087    mov [ebp-0Ch],eax"
"	      0042f08a    cmp dword ptr [ebp-0Ch],0"
"	      0042f08e    je near ptr 0042F0EEh"
"	      0042f094    mov eax,[ebp-0Ch]"
"	      0042f097    cmp dword ptr [eax+8],0"
"	      0042f09b    je near ptr 0042F0CEh"
"	      0042f0a1    mov eax,[ebp-0Ch]"
"	      0042f0a4    mov eax,[eax]"
"	      0042f0a6    mov [ebp-14h],eax"
"	      0042f0a9    mov eax,[ebp-14h]"
"	      0042f0ac    mov [ebp-18h],eax"
"	      0042f0af    mov eax,[ebp-18h]"
"	      0042f0b2    push eax"
"	      0042f0b3    call 0056A740h"
"	      0042f0b8    add esp,4"
"	      0042f0bb    mov eax,[ebp-0Ch]"
"	      0042f0be    mov dword ptr [eax+8],0"
"	      0042f0c5    mov eax,[ebp-0Ch]"
"	      0042f0c8    mov dword ptr [eax],0"
"	      0042f0ce    jmp near ptr 0042F0D3h"
"	      0042f0d3    jmp near ptr 0042F0D8h"
"	      0042f0d8    mov eax,[ebp-0Ch]"
"	      0042f0db    push eax"
"	      0042f0dc    call 0056A740h"
"	      0042f0e1    add esp,4"
"	      0042f0e4    jmp near ptr 0042F0E9h"
"	      0042f0e9    jmp near ptr 0042F0EEh"
"	      0042f0ee    jmp near ptr 0042F0F3h"
"	      0042f0f3    jmp near ptr 0042F0F8h"
"	      0042f0f8    mov eax,[ebp+8]"
"	      0042f0fb    mov eax,[eax+4]"
"	      0042f0fe    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      0042f102    je near ptr 0042F122h"
"	      0042f108    mov eax,[ebp+8]"
"	      0042f10b    mov eax,[eax+4]"
"	      0042f10e    mov ecx,[ebp-2Ch]"
"	      0042f111    mov [ecx+18h],eax"
"	      0042f114    mov eax,[ebp-2Ch]"
"	      0042f117    mov eax,[eax+18h]"
"	      0042f11a    inc dword ptr [eax+0Ch]"
"	      0042f11d    jmp near ptr 0042F215h"
"	      0042f122    push 10h"
"	      0042f124    call 0056A600h"
"	      0042f129    add esp,4"
"	      0042f12c    mov [ebp-8],eax"
"	      0042f12f    cmp dword ptr [ebp-8],0"
"	      0042f133    je near ptr 0042F20Bh"
"	      0042f139    jmp near ptr 0042F13Eh"
"	      0042f13e    mov eax,[ebp+8]"
"	      0042f141    mov eax,[eax+4]"
"	      0042f144    mov eax,[eax+4]"
"	      0042f147    mov [ebp-28h],eax"
"	      0042f14a    mov eax,[ebp-28h]"
"	      0042f14d    mov ecx,[ebp-8]"
"	      0042f150    mov [ecx+4],eax"
"	      0042f153    mov eax,[ebp-8]"
"	      0042f156    mov eax,[eax+4]"
"	      0042f159    mov ecx,[ebp-8]"
"	      0042f15c    mov [ecx+8],eax"
"	      0042f15f    mov eax,[ebp-8]"
"	      0042f162    cmp dword ptr [eax+8],0"
"	      0042f166    je near ptr 0042F1E5h"
"	      0042f16c    mov eax,[ebp-8]"
"	      0042f16f    mov eax,[eax+8]"
"	      0042f172    push eax"
"	      0042f173    call 0056A600h"
"	      0042f178    add esp,4"
"	      0042f17b    mov ecx,[ebp-8]"
"	      0042f17e    mov [ecx],eax"
"	      0042f180    jmp near ptr 0042F185h"
"	      0042f185    mov eax,[ebp+8]"
"	      0042f188    mov eax,[eax+4]"
"	      0042f18b    cmp dword ptr [eax+4],0"
"	      0042f18f    je near ptr 0042F1AAh"
"	      0042f195    mov eax,[ebp+8]"
"	      0042f198    mov eax,[eax+4]"
"	      0042f19b    mov eax,[eax]"
"	      0042f19d    mov [ebp-1Ch],eax"
"	      0042f1a0    jmp near ptr 0042F1B6h"
"	      0042f1a5    jmp near ptr 0042F1B6h"
"	      0042f1aa    mov dword ptr [ebp-1Ch],0"
"	      0042f1b1    jmp near ptr 0042F1B6h"
"	      0042f1b6    mov eax,[ebp-8]"
"	      0042f1b9    mov eax,[eax+4]"
"	      0042f1bc    mov [ebp-20h],eax"
"	      0042f1bf    mov eax,[ebp-8]"
"	      0042f1c2    mov eax,[eax]"
"	      0042f1c4    mov [ebp-24h],eax"
"	      0042f1c7    mov eax,[ebp-20h]"
"	      0042f1ca    push eax"
"	      0042f1cb    mov eax,[ebp-1Ch]"
"	      0042f1ce    push eax"
"	      0042f1cf    mov eax,[ebp-24h]"
"	      0042f1d2    push eax"
"	      0042f1d3    call 0056A800h"
"	      0042f1d8    add esp,0Ch"
"	      0042f1db    jmp near ptr 0042F1E0h"
"	      0042f1e0    jmp near ptr 0042F1EEh"
"	      0042f1e5    mov eax,[ebp-8]"
"	      0042f1e8    mov dword ptr [eax],0"
"	      0042f1ee    mov eax,[ebp-8]"
"	      0042f1f1    mov dword ptr [eax+0Ch],1"
"	      0042f1f8    jmp near ptr 0042F1FDh"
"	      0042f1fd    mov eax,[ebp-8]"
"	      0042f200    mov ecx,[ebp-2Ch]"
"	      0042f203    mov [ecx+18h],eax"
"	      0042f206    jmp near ptr 0042F215h"
"	      0042f20b    mov eax,[ebp-2Ch]"
"	      0042f20e    mov dword ptr [eax+18h],0"
"	      0042f215    jmp near ptr 0042F21Ah"
);
// LINE 575:
	asm( 
"	      0042f21a    mov eax,[ebp-2Ch]"
"	      0042f21d    mov dword ptr [eax+38h],0"
);
// LINE 576:
	asm( 
"	      0042f224    mov eax,[ebp-2Ch]"
"	      0042f227    cmp dword ptr [eax+34h],1"
"	      0042f22b    jne near ptr 0042F240h"
);
// LINE 577:
	asm( 
"	      0042f231    mov eax,[ebp-2Ch]"
"	      0042f234    mov dword ptr [eax+20h],1"
);
// LINE 578:
	asm( 
"	      0042f23b    jmp near ptr 0042F25Bh"
"	      0042f240    mov eax,[ebp-2Ch]"
"	      0042f243    cmp dword ptr [eax+34h],2"
"	      0042f247    jne near ptr 0042F25Bh"
);
// LINE 579:
	asm( 
"	      0042f24d    mov ecx,[ebp-2Ch]"
"	      0042f250    call 004304ECh"
"	      0042f255    mov ecx,[ebp-2Ch]"
"	      0042f258    mov [ecx+20h],eax"
);
// LINE 580:
	asm( 
"	      0042f25b    mov dword ptr [ebp-4],0"
"	      0042f262    jmp near ptr 0042F26Ah"
"	      0042f267    inc dword ptr [ebp-4]"
"	      0042f26a    cmp dword ptr [ebp-4],8"
"	      0042f26e    jge near ptr 0042F287h"
);
// LINE 581:
	asm( 
"	      0042f274    mov eax,[ebp-4]"
"	      0042f277    mov ecx,[ebp-2Ch]"
"	      0042f27a    mov dword ptr [ecx+eax*4+52h],0"
"	      0042f282    jmp near ptr 0042F267h"
);
// LINE 587:
	asm( 
"	      0042f287    jmp near ptr 0042F28Ch"
"	      0042f28c    mov eax,[ebp-2Ch]"
"	      0042f28f    pop edi"
"	      0042f290    pop esi"
"	      0042f291    pop ebx"
"	      0042f292    leave"
"	      0042f293    ret 8"
);
}

// FUNCTION: COPTER_D 0x0042f296
void DigitalSound::DigitalSound(long lNewResID) {
// LINE 595:
	asm( 
"	      0042f296    push ebp"
"	      0042f297    mov ebp,esp"
"	      0042f299    sub esp,4"
"	      0042f29c    push ebx"
"	      0042f29d    push esi"
"	      0042f29e    push edi"
"	      0042f29f    mov [ebp-4],ecx"
"	      0042f2a2    mov ecx,[ebp-4]"
"	      0042f2a5    call 0042E706h"
"	      0042f2aa    mov eax,[ebp-4]"
"	      0042f2ad    mov dword ptr [eax],58F488h"
);
// LINE 596:
	asm( 
"	      0042f2b3    mov eax,[ebp-4]"
"	      0042f2b6    mov dword ptr [eax+34h],0"
);
// LINE 599:
	asm( 
"	      0042f2bd    mov eax,[ebp-4]"
"	      0042f2c0    mov dword ptr [eax+72h],0"
);
// LINE 601:
	asm( 
"	      0042f2c7    mov eax,[ebp+8]"
"	      0042f2ca    mov ecx,[ebp-4]"
"	      0042f2cd    mov [ecx+10h],eax"
);
// LINE 602:
	asm( 
"	      0042f2d0    mov eax,[ebp-4]"
"	      0042f2d3    mov dword ptr [eax+38h],0"
);
// LINE 608:
	asm( 
"	      0042f2da    jmp near ptr 0042F2DFh"
"	      0042f2df    mov eax,[ebp-4]"
"	      0042f2e2    pop edi"
"	      0042f2e3    pop esi"
"	      0042f2e4    pop ebx"
"	      0042f2e5    leave"
"	      0042f2e6    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042f2e9
void DigitalSound::~DigitalSound() {
// LINE 615:
	asm( 
"	      0042f2e9    push ebp"
"	      0042f2ea    mov ebp,esp"
"	      0042f2ec    sub esp,4"
"	      0042f2ef    push ebx"
"	      0042f2f0    push esi"
"	      0042f2f1    push edi"
"	      0042f2f2    mov [ebp-4],ecx"
"	      0042f2f5    mov eax,[ebp-4]"
"	      0042f2f8    mov dword ptr [eax],58F488h"
);
// LINE 616:
	asm( 
"	      0042f2fe    mov ecx,[ebp-4]"
"	      0042f301    call 0042F549h"
);
// LINE 624:
	asm( 
"	      0042f306    jmp near ptr 0042F30Bh"
"	      0042f30b    mov ecx,[ebp-4]"
"	      0042f30e    call 0042E7EEh"
"	      0042f313    pop edi"
"	      0042f314    pop esi"
"	      0042f315    pop ebx"
"	      0042f316    leave"
"	      0042f317    ret"
);
}

// FUNCTION: COPTER_D 0x0042f318
void DigitalSound::SetSoundFile(const class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
// LINE 638:
	asm( 
"	      0042f318    push ebp"
"	      0042f319    mov ebp,esp"
"	      0042f31b    sub esp,28h"
"	      0042f31e    push ebx"
"	      0042f31f    push esi"
"	      0042f320    push edi"
"	      0042f321    mov [ebp-28h],ecx"
);
// LINE 639:
	asm( 
"	      0042f324    mov eax,[ebp-28h]"
"	      0042f327    add eax,14h"
"	      0042f32a    cmp eax,[ebp+8]"
"	      0042f32d    je near ptr 0042F4E6h"
"	      0042f333    mov eax,[ebp-28h]"
"	      0042f336    mov eax,[eax+18h]"
"	      0042f339    dec dword ptr [eax+0Ch]"
"	      0042f33c    mov eax,[ebp-28h]"
"	      0042f33f    mov eax,[eax+18h]"
"	      0042f342    cmp dword ptr [eax+0Ch],0"
"	      0042f346    jne near ptr 0042F3BFh"
"	      0042f34c    mov eax,[ebp-28h]"
"	      0042f34f    mov eax,[eax+18h]"
"	      0042f352    mov [ebp-0Ch],eax"
"	      0042f355    mov eax,[ebp-0Ch]"
"	      0042f358    mov [ebp-8],eax"
"	      0042f35b    cmp dword ptr [ebp-8],0"
"	      0042f35f    je near ptr 0042F3BFh"
"	      0042f365    mov eax,[ebp-8]"
"	      0042f368    cmp dword ptr [eax+8],0"
"	      0042f36c    je near ptr 0042F39Fh"
"	      0042f372    mov eax,[ebp-8]"
"	      0042f375    mov eax,[eax]"
"	      0042f377    mov [ebp-10h],eax"
"	      0042f37a    mov eax,[ebp-10h]"
"	      0042f37d    mov [ebp-14h],eax"
"	      0042f380    mov eax,[ebp-14h]"
"	      0042f383    push eax"
"	      0042f384    call 0056A740h"
"	      0042f389    add esp,4"
"	      0042f38c    mov eax,[ebp-8]"
"	      0042f38f    mov dword ptr [eax+8],0"
"	      0042f396    mov eax,[ebp-8]"
"	      0042f399    mov dword ptr [eax],0"
"	      0042f39f    jmp near ptr 0042F3A4h"
"	      0042f3a4    jmp near ptr 0042F3A9h"
"	      0042f3a9    mov eax,[ebp-8]"
"	      0042f3ac    push eax"
"	      0042f3ad    call 0056A740h"
"	      0042f3b2    add esp,4"
"	      0042f3b5    jmp near ptr 0042F3BAh"
"	      0042f3ba    jmp near ptr 0042F3BFh"
"	      0042f3bf    jmp near ptr 0042F3C4h"
"	      0042f3c4    jmp near ptr 0042F3C9h"
"	      0042f3c9    mov eax,[ebp+8]"
"	      0042f3cc    mov eax,[eax+4]"
"	      0042f3cf    cmp dword ptr [eax+0Ch],0FFFFFFFFh"
"	      0042f3d3    je near ptr 0042F3F3h"
"	      0042f3d9    mov eax,[ebp+8]"
"	      0042f3dc    mov eax,[eax+4]"
"	      0042f3df    mov ecx,[ebp-28h]"
"	      0042f3e2    mov [ecx+18h],eax"
"	      0042f3e5    mov eax,[ebp-28h]"
"	      0042f3e8    mov eax,[eax+18h]"
"	      0042f3eb    inc dword ptr [eax+0Ch]"
"	      0042f3ee    jmp near ptr 0042F4E6h"
"	      0042f3f3    push 10h"
"	      0042f3f5    call 0056A600h"
"	      0042f3fa    add esp,4"
"	      0042f3fd    mov [ebp-4],eax"
"	      0042f400    cmp dword ptr [ebp-4],0"
"	      0042f404    je near ptr 0042F4DCh"
"	      0042f40a    jmp near ptr 0042F40Fh"
"	      0042f40f    mov eax,[ebp+8]"
"	      0042f412    mov eax,[eax+4]"
"	      0042f415    mov eax,[eax+4]"
"	      0042f418    mov [ebp-24h],eax"
"	      0042f41b    mov eax,[ebp-24h]"
"	      0042f41e    mov ecx,[ebp-4]"
"	      0042f421    mov [ecx+4],eax"
"	      0042f424    mov eax,[ebp-4]"
"	      0042f427    mov eax,[eax+4]"
"	      0042f42a    mov ecx,[ebp-4]"
"	      0042f42d    mov [ecx+8],eax"
"	      0042f430    mov eax,[ebp-4]"
"	      0042f433    cmp dword ptr [eax+8],0"
"	      0042f437    je near ptr 0042F4B6h"
"	      0042f43d    mov eax,[ebp-4]"
"	      0042f440    mov eax,[eax+8]"
"	      0042f443    push eax"
"	      0042f444    call 0056A600h"
"	      0042f449    add esp,4"
"	      0042f44c    mov ecx,[ebp-4]"
"	      0042f44f    mov [ecx],eax"
"	      0042f451    jmp near ptr 0042F456h"
"	      0042f456    mov eax,[ebp+8]"
"	      0042f459    mov eax,[eax+4]"
"	      0042f45c    cmp dword ptr [eax+4],0"
"	      0042f460    je near ptr 0042F47Bh"
"	      0042f466    mov eax,[ebp+8]"
"	      0042f469    mov eax,[eax+4]"
"	      0042f46c    mov eax,[eax]"
"	      0042f46e    mov [ebp-18h],eax"
"	      0042f471    jmp near ptr 0042F487h"
"	      0042f476    jmp near ptr 0042F487h"
"	      0042f47b    mov dword ptr [ebp-18h],0"
"	      0042f482    jmp near ptr 0042F487h"
"	      0042f487    mov eax,[ebp-4]"
"	      0042f48a    mov eax,[eax+4]"
"	      0042f48d    mov [ebp-1Ch],eax"
"	      0042f490    mov eax,[ebp-4]"
"	      0042f493    mov eax,[eax]"
"	      0042f495    mov [ebp-20h],eax"
"	      0042f498    mov eax,[ebp-1Ch]"
"	      0042f49b    push eax"
"	      0042f49c    mov eax,[ebp-18h]"
"	      0042f49f    push eax"
"	      0042f4a0    mov eax,[ebp-20h]"
"	      0042f4a3    push eax"
"	      0042f4a4    call 0056A800h"
"	      0042f4a9    add esp,0Ch"
"	      0042f4ac    jmp near ptr 0042F4B1h"
"	      0042f4b1    jmp near ptr 0042F4BFh"
"	      0042f4b6    mov eax,[ebp-4]"
"	      0042f4b9    mov dword ptr [eax],0"
"	      0042f4bf    mov eax,[ebp-4]"
"	      0042f4c2    mov dword ptr [eax+0Ch],1"
"	      0042f4c9    jmp near ptr 0042F4CEh"
"	      0042f4ce    mov eax,[ebp-4]"
"	      0042f4d1    mov ecx,[ebp-28h]"
"	      0042f4d4    mov [ecx+18h],eax"
"	      0042f4d7    jmp near ptr 0042F4E6h"
"	      0042f4dc    mov eax,[ebp-28h]"
"	      0042f4df    mov dword ptr [eax+18h],0"
"	      0042f4e6    jmp near ptr 0042F4EBh"
);
// LINE 640:
	asm( 
"	      0042f4eb    mov eax,[ebp+0Ch]"
"	      0042f4ee    mov ecx,[ebp-28h]"
"	      0042f4f1    mov [ecx+34h],eax"
);
// LINE 641:
	asm( 
"	      0042f4f4    mov eax,[ebp-28h]"
"	      0042f4f7    mov dword ptr [eax+1Ch],0"
);
// LINE 642:
	asm( 
"	      0042f4fe    mov eax,[ebp-28h]"
"	      0042f501    mov dword ptr [eax+30h],1"
);
// LINE 644:
	asm( 
"	      0042f508    mov eax,[ebp-28h]"
"	      0042f50b    cmp dword ptr [eax+34h],1"
"	      0042f50f    jne near ptr 0042F51Fh"
);
// LINE 645:
	asm( 
"	      0042f515    mov eax,[ebp-28h]"
"	      0042f518    mov dword ptr [eax+20h],1"
);
// LINE 646:
	asm( 
"	      0042f51f    mov eax,[ebp-28h]"
"	      0042f522    cmp dword ptr [eax+34h],2"
"	      0042f526    jne near ptr 0042F53Dh"
);
// LINE 647:
	asm( 
"	      0042f52c    mov eax,[ebp-28h]"
"	      0042f52f    mov eax,[eax]"
"	      0042f531    mov ecx,[ebp-28h]"
"	      0042f534    call dword ptr [eax+40h]"
"	      0042f537    mov ecx,[ebp-28h]"
"	      0042f53a    mov [ecx+20h],eax"
);
// LINE 648:
	asm( 
"	      0042f53d    jmp near ptr 0042F542h"
"	      0042f542    pop edi"
"	      0042f543    pop esi"
"	      0042f544    pop ebx"
"	      0042f545    leave"
"	      0042f546    ret 8"
);
}

// FUNCTION: COPTER_D 0x0042f549
void DigitalSound::Unload() {
// LINE 654:
	asm( 
"	      0042f549    push ebp"
"	      0042f54a    mov ebp,esp"
"	      0042f54c    sub esp,0Ch"
"	      0042f54f    push ebx"
"	      0042f550    push esi"
"	      0042f551    push edi"
"	      0042f552    mov [ebp-0Ch],ecx"
);
// LINE 655:
	asm( 
"	      0042f555    mov eax,[ebp-0Ch]"
"	      0042f558    cmp dword ptr [eax+38h],0"
"	      0042f55c    je near ptr 0042F570h"
);
// LINE 656:
	asm( 
"	      0042f562    mov eax,[ebp-0Ch]"
"	      0042f565    mov eax,[eax]"
"	      0042f567    mov ecx,[ebp-0Ch]"
"	      0042f56a    call dword ptr [eax+84h]"
);
// LINE 658:
	asm( 
"	      0042f570    mov eax,[ebp-0Ch]"
"	      0042f573    mov eax,[eax]"
"	      0042f575    mov ecx,[ebp-0Ch]"
"	      0042f578    call dword ptr [eax+10h]"
"	      0042f57b    test eax,eax"
"	      0042f57d    je near ptr 0042F58Eh"
);
// LINE 659:
	asm( 
"	      0042f583    mov eax,[ebp-0Ch]"
"	      0042f586    mov eax,[eax]"
"	      0042f588    mov ecx,[ebp-0Ch]"
"	      0042f58b    call dword ptr [eax+0Ch]"
);
// LINE 662:
	asm( 
"	      0042f58e    mov eax,[ebp-0Ch]"
"	      0042f591    cmp dword ptr [eax+72h],0"
"	      0042f595    je near ptr 0042F5C0h"
);
// LINE 665:
	asm( 
"	      0042f59b    mov eax,[ebp-0Ch]"
"	      0042f59e    mov eax,[eax+72h]"
"	      0042f5a1    mov [ebp-4],eax"
"	      0042f5a4    mov eax,[ebp-4]"
"	      0042f5a7    mov [ebp-8],eax"
"	      0042f5aa    mov eax,[ebp-8]"
"	      0042f5ad    push eax"
"	      0042f5ae    call 0056A740h"
"	      0042f5b3    add esp,4"
);
// LINE 666:
	asm( 
"	      0042f5b6    mov eax,[ebp-0Ch]"
"	      0042f5b9    mov dword ptr [eax+72h],0"
);
// LINE 670:
	asm( 
"	      0042f5c0    mov eax,[ebp-0Ch]"
"	      0042f5c3    mov eax,[eax]"
"	      0042f5c5    mov ecx,[ebp-0Ch]"
"	      0042f5c8    call dword ptr [eax+74h]"
);
// LINE 671:
	asm( 
"	      0042f5cb    jmp near ptr 0042F5D0h"
"	      0042f5d0    pop edi"
"	      0042f5d1    pop esi"
"	      0042f5d2    pop ebx"
"	      0042f5d3    leave"
"	      0042f5d4    ret"
);
}

// FUNCTION: COPTER_D 0x0042f5d5
class DigitalSound& DigitalSound::operator=(class DigitalSound& newSound) {
// LINE 682:
	asm( 
"	      0042f5d5    push ebp"
"	      0042f5d6    mov ebp,esp"
"	      0042f5d8    sub esp,4"
"	      0042f5db    push ebx"
"	      0042f5dc    push esi"
"	      0042f5dd    push edi"
"	      0042f5de    mov [ebp-4],ecx"
);
// LINE 683:
	asm( 
"	      0042f5e1    mov eax,[ebp+8]"
"	      0042f5e4    push eax"
"	      0042f5e5    mov ecx,[ebp-4]"
"	      0042f5e8    call 0042E8CBh"
);
// LINE 684:
	asm( 
"	      0042f5ed    mov eax,[ebp-4]"
"	      0042f5f0    jmp near ptr 0042F5F5h"
);
// LINE 685:
	asm( 
"	      0042f5f5    pop edi"
"	      0042f5f6    pop esi"
"	      0042f5f7    pop ebx"
"	      0042f5f8    leave"
"	      0042f5f9    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042f5fc
int32_t DigitalSound::Load() {
// LINE 702:
	asm( 
"	      0042f5fc    push ebp"
"	      0042f5fd    mov ebp,esp"
"	      0042f5ff    sub esp,4"
"	      0042f602    push ebx"
"	      0042f603    push esi"
"	      0042f604    push edi"
"	      0042f605    mov [ebp-4],ecx"
);
// LINE 703:
	asm( 
"	      0042f608    mov eax,[ebp-4]"
"	      0042f60b    cmp dword ptr [eax+20h],0"
"	      0042f60f    je near ptr 0042F61Fh"
);
// LINE 704:
	asm( 
"	      0042f615    mov eax,1"
"	      0042f61a    jmp near ptr 0042F665h"
);
// LINE 705:
	asm( 
"	      0042f61f    mov eax,[ebp-4]"
"	      0042f622    cmp dword ptr [eax+4],1"
"	      0042f626    jne near ptr 0042F641h"
);
// LINE 706:
	asm( 
"	      0042f62c    mov eax,[ebp-4]"
"	      0042f62f    mov eax,[eax]"
"	      0042f631    mov ecx,[ebp-4]"
"	      0042f634    call dword ptr [eax+38h]"
"	      0042f637    jmp near ptr 0042F665h"
);
// LINE 707:
	asm( 
"	      0042f63c    jmp near ptr 0042F65Eh"
"	      0042f641    mov eax,[ebp-4]"
"	      0042f644    cmp dword ptr [eax+4],0"
"	      0042f648    jne near ptr 0042F65Eh"
);
// LINE 708:
	asm( 
"	      0042f64e    mov eax,[ebp-4]"
"	      0042f651    mov eax,[eax]"
"	      0042f653    mov ecx,[ebp-4]"
"	      0042f656    call dword ptr [eax+34h]"
"	      0042f659    jmp near ptr 0042F665h"
);
// LINE 709:
	asm( 
"	      0042f65e    xor eax,eax"
"	      0042f660    jmp near ptr 0042F665h"
);
// LINE 710:
	asm( 
"	      0042f665    pop edi"
"	      0042f666    pop esi"
"	      0042f667    pop ebx"
"	      0042f668    leave"
"	      0042f669    ret"
);
}

// FUNCTION: COPTER_D 0x0042f66a
int32_t DigitalSound::LoadFromResource() {
// LINE 716:
	asm( 
"	      0042f66a    push ebp"
"	      0042f66b    mov ebp,esp"
"	      0042f66d    sub esp,4"
"	      0042f670    push ebx"
"	      0042f671    push esi"
"	      0042f672    push edi"
"	      0042f673    mov [ebp-4],ecx"
);
// LINE 717:
	asm( 
"	      0042f676    xor eax,eax"
"	      0042f678    jmp near ptr 0042F67Dh"
);
// LINE 718:
	asm( 
"	      0042f67d    pop edi"
"	      0042f67e    pop esi"
"	      0042f67f    pop ebx"
"	      0042f680    leave"
"	      0042f681    ret"
);
}

// FUNCTION: COPTER_D 0x0042f682
int32_t DigitalSound::LoadFromFile() {
// LINE 733:
	asm( 
"	      0042f682    push ebp"
"	      0042f683    mov ebp,esp"
"	      0042f685    sub esp,74h"
"	      0042f688    push ebx"
"	      0042f689    push esi"
"	      0042f68a    push edi"
"	      0042f68b    mov [ebp-74h],ecx"
);
// LINE 735:
	asm( 
"	      0042f68e    mov dword ptr [ebp-34h],1"
);
// LINE 737:
	asm( 
"	      0042f695    mov dword ptr [ebp-40h],0"
);
// LINE 738:
	asm( 
"	      0042f69c    mov dword ptr [ebp-38h],0"
);
// LINE 758:
	asm( 
"	      0042f6a3    mov eax,[ebp-74h]"
"	      0042f6a6    cmp dword ptr [eax+14h],0"
"	      0042f6aa    je near ptr 0042F6CBh"
"	      0042f6b0    mov eax,[ebp-74h]"
"	      0042f6b3    mov eax,[eax+14h]"
"	      0042f6b6    mov [ebp-54h],eax"
"	      0042f6b9    mov eax,[ebp-54h]"
"	      0042f6bc    mov [ebp-5Ch],eax"
"	      0042f6bf    mov eax,[ebp-5Ch]"
"	      0042f6c2    push eax"
"	      0042f6c3    call 0056A740h"
"	      0042f6c8    add esp,4"
"	      0042f6cb    jmp near ptr 0042F6D0h"
"	      0042f6d0    mov eax,[ebp-74h]"
"	      0042f6d3    mov eax,[eax+18h]"
"	      0042f6d6    mov eax,[eax+4]"
"	      0042f6d9    inc eax"
"	      0042f6da    push eax"
"	      0042f6db    call 0056A600h"
"	      0042f6e0    add esp,4"
"	      0042f6e3    mov ecx,[ebp-74h]"
"	      0042f6e6    mov [ecx+14h],eax"
"	      0042f6e9    jmp near ptr 0042F6EEh"
"	      0042f6ee    mov eax,[ebp-74h]"
"	      0042f6f1    mov eax,[eax+18h]"
"	      0042f6f4    cmp dword ptr [eax+4],0"
"	      0042f6f8    je near ptr 0042F767h"
"	      0042f6fe    jmp near ptr 0042F703h"
"	      0042f703    jmp near ptr 0042F708h"
"	      0042f708    mov eax,[ebp-74h]"
"	      0042f70b    mov eax,[eax+18h]"
"	      0042f70e    cmp dword ptr [eax+4],0"
"	      0042f712    je near ptr 0042F72Dh"
"	      0042f718    mov eax,[ebp-74h]"
"	      0042f71b    mov eax,[eax+18h]"
"	      0042f71e    mov eax,[eax]"
"	      0042f720    mov [ebp-68h],eax"
"	      0042f723    jmp near ptr 0042F739h"
"	      0042f728    jmp near ptr 0042F739h"
"	      0042f72d    mov dword ptr [ebp-68h],0"
"	      0042f734    jmp near ptr 0042F739h"
"	      0042f739    mov eax,[ebp-74h]"
"	      0042f73c    mov eax,[eax+18h]"
"	      0042f73f    mov eax,[eax+4]"
"	      0042f742    mov [ebp-6Ch],eax"
"	      0042f745    mov eax,[ebp-74h]"
"	      0042f748    mov eax,[eax+14h]"
"	      0042f74b    mov [ebp-70h],eax"
"	      0042f74e    mov eax,[ebp-6Ch]"
"	      0042f751    push eax"
"	      0042f752    mov eax,[ebp-68h]"
"	      0042f755    push eax"
"	      0042f756    mov eax,[ebp-70h]"
"	      0042f759    push eax"
"	      0042f75a    call 0056A800h"
"	      0042f75f    add esp,0Ch"
"	      0042f762    jmp near ptr 0042F767h"
"	      0042f767    jmp near ptr 0042F76Ch"
"	      0042f76c    mov byte ptr [ebp-58h],0"
"	      0042f770    jmp near ptr 0042F775h"
"	      0042f775    lea eax,[ebp-58h]"
"	      0042f778    mov [ebp-60h],eax"
"	      0042f77b    jmp near ptr 0042F780h"
"	      0042f780    mov eax,[ebp-74h]"
"	      0042f783    mov eax,[eax+18h]"
"	      0042f786    mov eax,[eax+4]"
"	      0042f789    mov ecx,[ebp-74h]"
"	      0042f78c    add eax,[ecx+14h]"
"	      0042f78f    mov [ebp-64h],eax"
"	      0042f792    mov eax,[ebp-60h]"
"	      0042f795    mov al,[eax]"
"	      0042f797    mov ecx,[ebp-64h]"
"	      0042f79a    mov [ecx],al"
"	      0042f79c    jmp near ptr 0042F7A1h"
"	      0042f7a1    jmp near ptr 0042F7A6h"
"	      0042f7a6    lea eax,[ebp-2Ch]"
"	      0042f7a9    push eax"
"	      0042f7aa    mov eax,[ebp-74h]"
"	      0042f7ad    add eax,40h"
"	      0042f7b0    push eax"
"	      0042f7b1    lea eax,[ebp-30h]"
"	      0042f7b4    push eax"
"	      0042f7b5    mov eax,[ebp-74h]"
"	      0042f7b8    mov eax,[eax+14h]"
"	      0042f7bb    push eax"
"	      0042f7bc    call 0048EBB0h"
"	      0042f7c1    add esp,10h"
"	      0042f7c4    test eax,eax"
"	      0042f7c6    je near ptr 0042F7D3h"
);
// LINE 759:
	asm( 
"	      0042f7cc    xor eax,eax"
"	      0042f7ce    jmp near ptr 0042F984h"
);
// LINE 764:
	asm( 
"	      0042f7d3    push 0"
"	      0042f7d5    mov eax,[ebp-20h]"
"	      0042f7d8    add eax,4"
"	      0042f7db    push eax"
"	      0042f7dc    mov eax,[ebp-30h]"
"	      0042f7df    push eax"
"	      0042f7e0    call dword ptr ds:[6C3900h]"
"	      0042f7e6    cmp eax,0FFFFFFFFh"
"	      0042f7e9    jne near ptr 0042F802h"
);
// LINE 765:
	asm( 
"	      0042f7ef    push 0"
"	      0042f7f1    mov eax,[ebp-30h]"
"	      0042f7f4    push eax"
"	      0042f7f5    call dword ptr ds:[6C391Ch]"
);
// LINE 766:
	asm( 
"	      0042f7fb    xor eax,eax"
"	      0042f7fd    jmp near ptr 0042F984h"
);
// LINE 770:
	asm( 
"	      0042f802    mov dword ptr [ebp-18h],61746164h"
);
// LINE 771:
	asm( 
"	      0042f809    push 10h"
"	      0042f80b    lea eax,[ebp-2Ch]"
"	      0042f80e    push eax"
"	      0042f80f    lea eax,[ebp-18h]"
"	      0042f812    push eax"
"	      0042f813    mov eax,[ebp-30h]"
"	      0042f816    push eax"
"	      0042f817    call dword ptr ds:[6C3904h]"
"	      0042f81d    test eax,eax"
"	      0042f81f    je near ptr 0042F838h"
);
// LINE 772:
	asm( 
"	      0042f825    push 0"
"	      0042f827    mov eax,[ebp-30h]"
"	      0042f82a    push eax"
"	      0042f82b    call dword ptr ds:[6C391Ch]"
);
// LINE 773:
	asm( 
"	      0042f831    xor eax,eax"
"	      0042f833    jmp near ptr 0042F984h"
);
// LINE 775:
	asm( 
"	      0042f838    mov eax,[ebp-14h]"
"	      0042f83b    mov ecx,[ebp-74h]"
"	      0042f83e    mov [ecx+3Ch],eax"
);
// LINE 778:
	asm( 
"	      0042f841    push 0"
"	      0042f843    mov eax,[ebp-74h]"
"	      0042f846    mov eax,[eax]"
"	      0042f848    mov ecx,[ebp-74h]"
"	      0042f84b    call dword ptr [eax+6Ch]"
"	      0042f84e    test eax,eax"
"	      0042f850    jne near ptr 0042F867h"
);
// LINE 779:
	asm( 
"	      0042f856    mov dword ptr [ebp-34h],0"
);
// LINE 780:
	asm( 
"	      0042f85d    jmp near ptr 0042F97Fh"
"	      0042f862    jmp near ptr 0042F962h"
);
// LINE 785:
	asm( 
"	      0042f867    push 0"
"	      0042f869    lea eax,[ebp-3Ch]"
"	      0042f86c    push eax"
"	      0042f86d    lea eax,[ebp-38h]"
"	      0042f870    push eax"
"	      0042f871    lea eax,[ebp-4]"
"	      0042f874    push eax"
"	      0042f875    lea eax,[ebp-40h]"
"	      0042f878    push eax"
"	      0042f879    mov eax,[ebp-74h]"
"	      0042f87c    mov eax,[eax+3Ch]"
"	      0042f87f    push eax"
"	      0042f880    push 0"
"	      0042f882    mov eax,[ebp-74h]"
"	      0042f885    mov eax,[eax+52h]"
"	      0042f888    push eax"
"	      0042f889    mov eax,[ebp-74h]"
"	      0042f88c    mov eax,[eax+52h]"
"	      0042f88f    mov eax,[eax]"
"	      0042f891    call dword ptr [eax+2Ch]"
"	      0042f894    mov [ebp-48h],eax"
);
// LINE 786:
	asm( 
"	      0042f897    cmp dword ptr [ebp-48h],0"
"	      0042f89b    je near ptr 0042F8C3h"
);
// LINE 787:
	asm( 
"	      0042f8a1    mov eax,[ebp-48h]"
"	      0042f8a4    mov [ebp-4Ch],eax"
"	      0042f8a7    jmp near ptr 0042F8ACh"
"	      0042f8ac    push 597F54h"
"	      0042f8b1    lea ecx,[ebp-4Ch]"
"	      0042f8b4    call 0042DC69h"
);
// LINE 788:
	asm( 
"	      0042f8b9    jmp near ptr 0042F97Ah"
"	      0042f8be    jmp near ptr 0042F962h"
);
// LINE 797:
	asm( 
"	      0042f8c3    lea eax,[ebp-44h]"
"	      0042f8c6    push eax"
"	      0042f8c7    lea eax,[ebp-18h]"
"	      0042f8ca    push eax"
"	      0042f8cb    mov eax,[ebp-40h]"
"	      0042f8ce    push eax"
"	      0042f8cf    mov eax,[ebp-74h]"
"	      0042f8d2    mov eax,[eax+3Ch]"
"	      0042f8d5    push eax"
"	      0042f8d6    mov eax,[ebp-30h]"
"	      0042f8d9    push eax"
"	      0042f8da    call 0048EE25h"
"	      0042f8df    add esp,14h"
"	      0042f8e2    test eax,eax"
"	      0042f8e4    je near ptr 0042F8FDh"
);
// LINE 798:
	asm( 
"	      0042f8ea    push 0"
"	      0042f8ec    mov eax,[ebp-30h]"
"	      0042f8ef    push eax"
"	      0042f8f0    call dword ptr ds:[6C391Ch]"
);
// LINE 799:
	asm( 
"	      0042f8f6    xor eax,eax"
"	      0042f8f8    jmp near ptr 0042F984h"
);
// LINE 802:
	asm( 
"	      0042f8fd    push 0"
"	      0042f8ff    mov eax,[ebp-30h]"
"	      0042f902    push eax"
"	      0042f903    call dword ptr ds:[6C391Ch]"
);
// LINE 806:
	asm( 
"	      0042f909    mov eax,[ebp-3Ch]"
"	      0042f90c    push eax"
"	      0042f90d    mov eax,[ebp-38h]"
"	      0042f910    push eax"
"	      0042f911    mov eax,[ebp-4]"
"	      0042f914    push eax"
"	      0042f915    mov eax,[ebp-40h]"
"	      0042f918    push eax"
"	      0042f919    mov eax,[ebp-74h]"
"	      0042f91c    mov eax,[eax+52h]"
"	      0042f91f    push eax"
"	      0042f920    mov eax,[ebp-74h]"
"	      0042f923    mov eax,[eax+52h]"
"	      0042f926    mov eax,[eax]"
"	      0042f928    call dword ptr [eax+4Ch]"
"	      0042f92b    mov [ebp-48h],eax"
);
// LINE 807:
	asm( 
"	      0042f92e    cmp dword ptr [ebp-48h],0"
"	      0042f932    je near ptr 0042F95Ah"
);
// LINE 808:
	asm( 
"	      0042f938    mov eax,[ebp-48h]"
"	      0042f93b    mov [ebp-50h],eax"
"	      0042f93e    jmp near ptr 0042F943h"
"	      0042f943    push 597F88h"
"	      0042f948    lea ecx,[ebp-50h]"
"	      0042f94b    call 0042DC69h"
);
// LINE 809:
	asm( 
"	      0042f950    jmp near ptr 0042F975h"
"	      0042f955    jmp near ptr 0042F962h"
);
// LINE 819:
	asm( 
"	      0042f95a    mov eax,[ebp-34h]"
"	      0042f95d    jmp near ptr 0042F984h"
);
// LINE 822:
	asm( 
"	      0042f962    mov eax,[ebp-74h]"
"	      0042f965    mov eax,[eax]"
"	      0042f967    mov ecx,[ebp-74h]"
"	      0042f96a    call dword ptr [eax+74h]"
);
// LINE 823:
	asm( 
"	      0042f96d    mov eax,[ebp-34h]"
"	      0042f970    jmp near ptr 0042F984h"
);
// LINE 825:
	asm( 
"	      0042f975    jmp near ptr 0042F962h"
"	      0042f97a    jmp near ptr 0042F962h"
"	      0042f97f    jmp near ptr 0042F962h"
"	      0042f984    pop edi"
"	      0042f985    pop esi"
"	      0042f986    pop ebx"
"	      0042f987    leave"
"	      0042f988    ret"
);
}

// FUNCTION: COPTER_D 0x0042f989
int32_t DigitalSound::CreatePrimarySoundBuffer() {
// LINE 839:
	asm( 
"	      0042f989    push ebp"
"	      0042f98a    mov ebp,esp"
"	      0042f98c    sub esp,18h"
"	      0042f98f    push ebx"
"	      0042f990    push esi"
"	      0042f991    push edi"
"	      0042f992    mov [ebp-18h],ecx"
);
// LINE 843:
	asm( 
"	      0042f995    push 14h"
"	      0042f997    push 0"
"	      0042f999    lea eax,[ebp-14h]"
"	      0042f99c    push eax"
"	      0042f99d    call 0056EB90h"
"	      0042f9a2    add esp,0Ch"
);
// LINE 844:
	asm( 
"	      0042f9a5    mov dword ptr [ebp-14h],14h"
);
// LINE 845:
	asm( 
"	      0042f9ac    mov dword ptr [ebp-0Ch],0"
);
// LINE 846:
	asm( 
"	      0042f9b3    mov dword ptr [ebp-4],0"
);
// LINE 847:
	asm( 
"	      0042f9ba    mov dword ptr [ebp-10h],1"
);
// LINE 851:
	asm( 
"	      0042f9c1    lea eax,[ebp-14h]"
"	      0042f9c4    push eax"
"	      0042f9c5    mov eax,[ebp-18h]"
"	      0042f9c8    mov eax,[eax]"
"	      0042f9ca    mov ecx,[ebp-18h]"
"	      0042f9cd    call dword ptr [eax+6Ch]"
"	      0042f9d0    jmp near ptr 0042F9D5h"
);
// LINE 853:
	asm( 
"	      0042f9d5    pop edi"
"	      0042f9d6    pop esi"
"	      0042f9d7    pop ebx"
"	      0042f9d8    leave"
"	      0042f9d9    ret"
);
}

// FUNCTION: COPTER_D 0x0042f9da
int32_t DigitalSound::CreateSoundBuffer(struct _DSBUFFERDESC* dsNewBufferDescription) {
// LINE 876:
	asm( 
"	      0042f9da    push ebp"
"	      0042f9db    mov ebp,esp"
"	      0042f9dd    sub esp,24h"
"	      0042f9e0    push ebx"
"	      0042f9e1    push esi"
"	      0042f9e2    push edi"
"	      0042f9e3    mov [ebp-24h],ecx"
);
// LINE 881:
	asm( 
"	      0042f9e6    cmp dword ptr ds:[597E60h],0"
"	      0042f9ed    jne near ptr 0042F9FAh"
);
// LINE 882:
	asm( 
"	      0042f9f3    xor eax,eax"
"	      0042f9f5    jmp near ptr 0042FB23h"
);
// LINE 884:
	asm( 
"	      0042f9fa    cmp dword ptr [ebp+8],0"
"	      0042f9fe    je near ptr 0042FA61h"
);
// LINE 885:
	asm( 
"	      0042fa04    push 0"
"	      0042fa06    mov eax,[ebp-24h]"
"	      0042fa09    add eax,52h"
"	      0042fa0c    push eax"
"	      0042fa0d    mov eax,[ebp+8]"
"	      0042fa10    push eax"
"	      0042fa11    mov eax,ds:[597E60h]"
"	      0042fa16    push eax"
"	      0042fa17    mov eax,ds:[597E60h]"
"	      0042fa1c    mov eax,[eax]"
"	      0042fa1e    call dword ptr [eax+0Ch]"
"	      0042fa21    mov [ebp-18h],eax"
);
// LINE 886:
	asm( 
"	      0042fa24    cmp dword ptr [ebp-18h],0"
"	      0042fa28    je near ptr 0042FA50h"
);
// LINE 887:
	asm( 
"	      0042fa2e    mov eax,[ebp-18h]"
"	      0042fa31    mov [ebp-1Ch],eax"
"	      0042fa34    jmp near ptr 0042FA39h"
"	      0042fa39    push 597FC0h"
"	      0042fa3e    lea ecx,[ebp-1Ch]"
"	      0042fa41    call 0042DC69h"
);
// LINE 888:
	asm( 
"	      0042fa46    jmp near ptr 0042FB1Eh"
"	      0042fa4b    jmp near ptr 0042FAE9h"
);
// LINE 893:
	asm( 
"	      0042fa50    mov eax,[ebp+8]"
"	      0042fa53    mov eax,[eax+8]"
"	      0042fa56    add ds:[597E5Ch],eax"
);
// LINE 896:
	asm( 
"	      0042fa5c    jmp near ptr 0042FADFh"
);
// LINE 899:
	asm( 
"	      0042fa61    mov dword ptr [ebp-14h],14h"
);
// LINE 900:
	asm( 
"	      0042fa68    mov eax,[ebp-24h]"
"	      0042fa6b    mov eax,[eax+76h]"
"	      0042fa6e    mov [ebp-10h],eax"
);
// LINE 901:
	asm( 
"	      0042fa71    mov eax,[ebp-24h]"
"	      0042fa74    mov eax,[eax+3Ch]"
"	      0042fa77    mov [ebp-0Ch],eax"
);
// LINE 902:
	asm( 
"	      0042fa7a    mov dword ptr [ebp-8],0"
);
// LINE 903:
	asm( 
"	      0042fa81    mov eax,[ebp-24h]"
"	      0042fa84    add eax,40h"
"	      0042fa87    mov [ebp-4],eax"
);
// LINE 905:
	asm( 
"	      0042fa8a    push 0"
"	      0042fa8c    mov eax,[ebp-24h]"
"	      0042fa8f    add eax,52h"
"	      0042fa92    push eax"
"	      0042fa93    lea eax,[ebp-14h]"
"	      0042fa96    push eax"
"	      0042fa97    mov eax,ds:[597E60h]"
"	      0042fa9c    push eax"
"	      0042fa9d    mov eax,ds:[597E60h]"
"	      0042faa2    mov eax,[eax]"
"	      0042faa4    call dword ptr [eax+0Ch]"
"	      0042faa7    mov [ebp-18h],eax"
);
// LINE 906:
	asm( 
"	      0042faaa    cmp dword ptr [ebp-18h],0"
"	      0042faae    je near ptr 0042FAD6h"
);
// LINE 907:
	asm( 
"	      0042fab4    mov eax,[ebp-18h]"
"	      0042fab7    mov [ebp-20h],eax"
"	      0042faba    jmp near ptr 0042FABFh"
"	      0042fabf    push 598008h"
"	      0042fac4    lea ecx,[ebp-20h]"
"	      0042fac7    call 0042DC69h"
);
// LINE 908:
	asm( 
"	      0042facc    jmp near ptr 0042FB19h"
"	      0042fad1    jmp near ptr 0042FAE9h"
);
// LINE 913:
	asm( 
"	      0042fad6    mov eax,[ebp-0Ch]"
"	      0042fad9    add ds:[597E5Ch],eax"
);
// LINE 916:
	asm( 
"	      0042fadf    mov eax,1"
"	      0042fae4    jmp near ptr 0042FB23h"
);
// LINE 919:
	asm( 
"	      0042fae9    mov eax,[ebp-24h]"
"	      0042faec    cmp dword ptr [eax+52h],0"
"	      0042faf0    je near ptr 0042FB12h"
);
// LINE 920:
	asm( 
"	      0042faf6    mov eax,[ebp-24h]"
"	      0042faf9    mov eax,[eax+52h]"
"	      0042fafc    push eax"
"	      0042fafd    mov eax,[ebp-24h]"
"	      0042fb00    mov eax,[eax+52h]"
"	      0042fb03    mov eax,[eax]"
"	      0042fb05    call dword ptr [eax+8]"
);
// LINE 921:
	asm( 
"	      0042fb08    mov eax,[ebp-24h]"
"	      0042fb0b    mov dword ptr [eax+52h],0"
);
// LINE 924:
	asm( 
"	      0042fb12    xor eax,eax"
"	      0042fb14    jmp near ptr 0042FB23h"
);
// LINE 925:
	asm( 
"	      0042fb19    jmp near ptr 0042FAE9h"
"	      0042fb1e    jmp near ptr 0042FAE9h"
"	      0042fb23    pop edi"
"	      0042fb24    pop esi"
"	      0042fb25    pop ebx"
"	      0042fb26    leave"
"	      0042fb27    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fb2a
int32_t DigitalSound::ReleaseSoundBuffer() {
// LINE 938:
	asm( 
"	      0042fb2a    push ebp"
"	      0042fb2b    mov ebp,esp"
"	      0042fb2d    sub esp,8"
"	      0042fb30    push ebx"
"	      0042fb31    push esi"
"	      0042fb32    push edi"
"	      0042fb33    mov [ebp-8],ecx"
);
// LINE 939:
	asm( 
"	      0042fb36    mov dword ptr [ebp-4],0"
);
// LINE 943:
	asm( 
"	      0042fb3d    mov eax,[ebp-4]"
"	      0042fb40    mov ecx,[ebp-8]"
"	      0042fb43    cmp dword ptr [ecx+eax*4+52h],0"
"	      0042fb48    je near ptr 0042FB5Eh"
);
// LINE 948:
	asm( 
"	      0042fb4e    xor eax,eax"
"	      0042fb50    mov ecx,[ebp-8]"
"	      0042fb53    sub eax,[ecx+3Ch]"
"	      0042fb56    neg eax"
"	      0042fb58    sub ds:[597E5Ch],eax"
);
// LINE 953:
	asm( 
"	      0042fb5e    mov eax,[ebp-4]"
"	      0042fb61    mov ecx,[ebp-8]"
"	      0042fb64    cmp dword ptr [ecx+eax*4+52h],0"
"	      0042fb69    je near ptr 0042FBA6h"
"	      0042fb6f    cmp dword ptr [ebp-4],8"
"	      0042fb73    jge near ptr 0042FBA6h"
);
// LINE 954:
	asm( 
"	      0042fb79    mov eax,[ebp-4]"
"	      0042fb7c    mov ecx,[ebp-8]"
"	      0042fb7f    mov eax,[ecx+eax*4+52h]"
"	      0042fb83    push eax"
"	      0042fb84    mov eax,[ebp-4]"
"	      0042fb87    mov ecx,[ebp-8]"
"	      0042fb8a    mov eax,[ecx+eax*4+52h]"
"	      0042fb8e    mov eax,[eax]"
"	      0042fb90    call dword ptr [eax+8]"
);
// LINE 955:
	asm( 
"	      0042fb93    mov eax,[ebp-4]"
"	      0042fb96    mov ecx,[ebp-8]"
"	      0042fb99    mov dword ptr [ecx+eax*4+52h],0"
);
// LINE 956:
	asm( 
"	      0042fba1    jmp near ptr 0042FB5Eh"
);
// LINE 957:
	asm( 
"	      0042fba6    mov eax,1"
"	      0042fbab    jmp near ptr 0042FBB0h"
);
// LINE 958:
	asm( 
"	      0042fbb0    pop edi"
"	      0042fbb1    pop esi"
"	      0042fbb2    pop ebx"
"	      0042fbb3    leave"
"	      0042fbb4    ret"
);
}

// FUNCTION: COPTER_D 0x0042fbb5
int32_t DigitalSound::GetPan(long * lPan) {
// LINE 976:
	asm( 
"	      0042fbb5    push ebp"
"	      0042fbb6    mov ebp,esp"
"	      0042fbb8    sub esp,0Ch"
"	      0042fbbb    push ebx"
"	      0042fbbc    push esi"
"	      0042fbbd    push edi"
"	      0042fbbe    mov [ebp-0Ch],ecx"
);
// LINE 980:
	asm( 
"	      0042fbc1    mov eax,[ebp-0Ch]"
"	      0042fbc4    cmp dword ptr [eax+52h],0"
"	      0042fbc8    je near ptr 0042FC10h"
);
// LINE 981:
	asm( 
"	      0042fbce    mov eax,[ebp+8]"
"	      0042fbd1    push eax"
"	      0042fbd2    mov eax,[ebp-0Ch]"
"	      0042fbd5    mov eax,[eax+52h]"
"	      0042fbd8    push eax"
"	      0042fbd9    mov eax,[ebp-0Ch]"
"	      0042fbdc    mov eax,[eax+52h]"
"	      0042fbdf    mov eax,[eax]"
"	      0042fbe1    call dword ptr [eax+1Ch]"
"	      0042fbe4    mov [ebp-4],eax"
);
// LINE 982:
	asm( 
"	      0042fbe7    cmp dword ptr [ebp-4],0"
"	      0042fbeb    je near ptr 0042FC10h"
);
// LINE 983:
	asm( 
"	      0042fbf1    mov eax,[ebp-4]"
"	      0042fbf4    mov [ebp-8],eax"
"	      0042fbf7    jmp near ptr 0042FBFCh"
"	      0042fbfc    push 598050h"
"	      0042fc01    lea ecx,[ebp-8]"
"	      0042fc04    call 0042DC69h"
);
// LINE 984:
	asm( 
"	      0042fc09    xor eax,eax"
"	      0042fc0b    jmp near ptr 0042FC1Ah"
);
// LINE 987:
	asm( 
"	      0042fc10    mov eax,1"
"	      0042fc15    jmp near ptr 0042FC1Ah"
);
// LINE 989:
	asm( 
"	      0042fc1a    pop edi"
"	      0042fc1b    pop esi"
"	      0042fc1c    pop ebx"
"	      0042fc1d    leave"
"	      0042fc1e    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fc21
int32_t DigitalSound::SetPan(long lNewPan) {
// LINE 1005:
	asm( 
"	      0042fc21    push ebp"
"	      0042fc22    mov ebp,esp"
"	      0042fc24    sub esp,0Ch"
"	      0042fc27    push ebx"
"	      0042fc28    push esi"
"	      0042fc29    push edi"
"	      0042fc2a    mov [ebp-0Ch],ecx"
);
// LINE 1009:
	asm( 
"	      0042fc2d    mov eax,[ebp-0Ch]"
"	      0042fc30    cmp dword ptr [eax+52h],0"
"	      0042fc34    je near ptr 0042FCA4h"
);
// LINE 1010:
	asm( 
"	      0042fc3a    cmp dword ptr [ebp+8],0FFFFD8F0h"
"	      0042fc41    jge near ptr 0042FC4Eh"
);
// LINE 1011:
	asm( 
"	      0042fc47    mov dword ptr [ebp+8],0FFFFD8F0h"
);
// LINE 1012:
	asm( 
"	      0042fc4e    cmp dword ptr [ebp+8],2710h"
"	      0042fc55    jle near ptr 0042FC62h"
);
// LINE 1013:
	asm( 
"	      0042fc5b    mov dword ptr [ebp+8],2710h"
);
// LINE 1014:
	asm( 
"	      0042fc62    mov eax,[ebp+8]"
"	      0042fc65    push eax"
"	      0042fc66    mov eax,[ebp-0Ch]"
"	      0042fc69    mov eax,[eax+52h]"
"	      0042fc6c    push eax"
"	      0042fc6d    mov eax,[ebp-0Ch]"
"	      0042fc70    mov eax,[eax+52h]"
"	      0042fc73    mov eax,[eax]"
"	      0042fc75    call dword ptr [eax+40h]"
"	      0042fc78    mov [ebp-4],eax"
);
// LINE 1015:
	asm( 
"	      0042fc7b    cmp dword ptr [ebp-4],0"
"	      0042fc7f    je near ptr 0042FCA4h"
);
// LINE 1016:
	asm( 
"	      0042fc85    mov eax,[ebp-4]"
"	      0042fc88    mov [ebp-8],eax"
"	      0042fc8b    jmp near ptr 0042FC90h"
"	      0042fc90    push 598084h"
"	      0042fc95    lea ecx,[ebp-8]"
"	      0042fc98    call 0042DC69h"
);
// LINE 1017:
	asm( 
"	      0042fc9d    xor eax,eax"
"	      0042fc9f    jmp near ptr 0042FCAEh"
);
// LINE 1020:
	asm( 
"	      0042fca4    mov eax,1"
"	      0042fca9    jmp near ptr 0042FCAEh"
);
// LINE 1022:
	asm( 
"	      0042fcae    pop edi"
"	      0042fcaf    pop esi"
"	      0042fcb0    pop ebx"
"	      0042fcb1    leave"
"	      0042fcb2    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fcb5
int32_t DigitalSound::GetFrequency(long * lFrequency) {
// LINE 1038:
	asm( 
"	      0042fcb5    push ebp"
"	      0042fcb6    mov ebp,esp"
"	      0042fcb8    sub esp,0Ch"
"	      0042fcbb    push ebx"
"	      0042fcbc    push esi"
"	      0042fcbd    push edi"
"	      0042fcbe    mov [ebp-0Ch],ecx"
);
// LINE 1041:
	asm( 
"	      0042fcc1    mov eax,[ebp-0Ch]"
"	      0042fcc4    cmp dword ptr [eax+52h],0"
"	      0042fcc8    je near ptr 0042FD10h"
);
// LINE 1042:
	asm( 
"	      0042fcce    mov eax,[ebp+8]"
"	      0042fcd1    push eax"
"	      0042fcd2    mov eax,[ebp-0Ch]"
"	      0042fcd5    mov eax,[eax+52h]"
"	      0042fcd8    push eax"
"	      0042fcd9    mov eax,[ebp-0Ch]"
"	      0042fcdc    mov eax,[eax+52h]"
"	      0042fcdf    mov eax,[eax]"
"	      0042fce1    call dword ptr [eax+20h]"
"	      0042fce4    mov [ebp-4],eax"
);
// LINE 1043:
	asm( 
"	      0042fce7    cmp dword ptr [ebp-4],0"
"	      0042fceb    je near ptr 0042FD10h"
);
// LINE 1044:
	asm( 
"	      0042fcf1    mov eax,[ebp-4]"
"	      0042fcf4    mov [ebp-8],eax"
"	      0042fcf7    jmp near ptr 0042FCFCh"
"	      0042fcfc    push 5980B8h"
"	      0042fd01    lea ecx,[ebp-8]"
"	      0042fd04    call 0042DC69h"
);
// LINE 1045:
	asm( 
"	      0042fd09    xor eax,eax"
"	      0042fd0b    jmp near ptr 0042FD1Ah"
);
// LINE 1048:
	asm( 
"	      0042fd10    mov eax,1"
"	      0042fd15    jmp near ptr 0042FD1Ah"
);
// LINE 1050:
	asm( 
"	      0042fd1a    pop edi"
"	      0042fd1b    pop esi"
"	      0042fd1c    pop ebx"
"	      0042fd1d    leave"
"	      0042fd1e    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fd21
int32_t DigitalSound::SetFrequency(long lNewFrequency) {
// LINE 1064:
	asm( 
"	      0042fd21    push ebp"
"	      0042fd22    mov ebp,esp"
"	      0042fd24    sub esp,0Ch"
"	      0042fd27    push ebx"
"	      0042fd28    push esi"
"	      0042fd29    push edi"
"	      0042fd2a    mov [ebp-0Ch],ecx"
);
// LINE 1067:
	asm( 
"	      0042fd2d    mov eax,[ebp-0Ch]"
"	      0042fd30    cmp dword ptr [eax+52h],0"
"	      0042fd34    je near ptr 0042FDA1h"
);
// LINE 1068:
	asm( 
"	      0042fd3a    cmp dword ptr [ebp+8],64h"
"	      0042fd3e    jge near ptr 0042FD4Bh"
);
// LINE 1069:
	asm( 
"	      0042fd44    mov dword ptr [ebp+8],64h"
);
// LINE 1070:
	asm( 
"	      0042fd4b    cmp dword ptr [ebp+8],186A0h"
"	      0042fd52    jle near ptr 0042FD5Fh"
);
// LINE 1071:
	asm( 
"	      0042fd58    mov dword ptr [ebp+8],186A0h"
);
// LINE 1072:
	asm( 
"	      0042fd5f    mov eax,[ebp+8]"
"	      0042fd62    push eax"
"	      0042fd63    mov eax,[ebp-0Ch]"
"	      0042fd66    mov eax,[eax+52h]"
"	      0042fd69    push eax"
"	      0042fd6a    mov eax,[ebp-0Ch]"
"	      0042fd6d    mov eax,[eax+52h]"
"	      0042fd70    mov eax,[eax]"
"	      0042fd72    call dword ptr [eax+44h]"
"	      0042fd75    mov [ebp-4],eax"
);
// LINE 1073:
	asm( 
"	      0042fd78    cmp dword ptr [ebp-4],0"
"	      0042fd7c    je near ptr 0042FDA1h"
);
// LINE 1074:
	asm( 
"	      0042fd82    mov eax,[ebp-4]"
"	      0042fd85    mov [ebp-8],eax"
"	      0042fd88    jmp near ptr 0042FD8Dh"
"	      0042fd8d    push 5980F8h"
"	      0042fd92    lea ecx,[ebp-8]"
"	      0042fd95    call 0042DC69h"
);
// LINE 1075:
	asm( 
"	      0042fd9a    xor eax,eax"
"	      0042fd9c    jmp near ptr 0042FDABh"
);
// LINE 1078:
	asm( 
"	      0042fda1    mov eax,1"
"	      0042fda6    jmp near ptr 0042FDABh"
);
// LINE 1080:
	asm( 
"	      0042fdab    pop edi"
"	      0042fdac    pop esi"
"	      0042fdad    pop ebx"
"	      0042fdae    leave"
"	      0042fdaf    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fdb2
int32_t DigitalSound::GetVolume(long * lVolume) {
// LINE 1096:
	asm( 
"	      0042fdb2    push ebp"
"	      0042fdb3    mov ebp,esp"
"	      0042fdb5    sub esp,0Ch"
"	      0042fdb8    push ebx"
"	      0042fdb9    push esi"
"	      0042fdba    push edi"
"	      0042fdbb    mov [ebp-0Ch],ecx"
);
// LINE 1099:
	asm( 
"	      0042fdbe    mov eax,[ebp-0Ch]"
"	      0042fdc1    cmp dword ptr [eax+52h],0"
"	      0042fdc5    je near ptr 0042FE20h"
);
// LINE 1100:
	asm( 
"	      0042fdcb    mov eax,[ebp+8]"
"	      0042fdce    push eax"
"	      0042fdcf    mov eax,[ebp-0Ch]"
"	      0042fdd2    mov eax,[eax+52h]"
"	      0042fdd5    push eax"
"	      0042fdd6    mov eax,[ebp-0Ch]"
"	      0042fdd9    mov eax,[eax+52h]"
"	      0042fddc    mov eax,[eax]"
"	      0042fdde    call dword ptr [eax+18h]"
"	      0042fde1    mov [ebp-4],eax"
);
// LINE 1101:
	asm( 
"	      0042fde4    cmp dword ptr [ebp-4],0"
"	      0042fde8    je near ptr 0042FE0Dh"
);
// LINE 1102:
	asm( 
"	      0042fdee    mov eax,[ebp-4]"
"	      0042fdf1    mov [ebp-8],eax"
"	      0042fdf4    jmp near ptr 0042FDF9h"
"	      0042fdf9    push 598138h"
"	      0042fdfe    lea ecx,[ebp-8]"
"	      0042fe01    call 0042DC69h"
);
// LINE 1103:
	asm( 
"	      0042fe06    xor eax,eax"
"	      0042fe08    jmp near ptr 0042FE27h"
);
// LINE 1105:
	asm( 
"	      0042fe0d    mov eax,[ebp+8]"
"	      0042fe10    add dword ptr [eax],2710h"
);
// LINE 1106:
	asm( 
"	      0042fe16    mov eax,1"
"	      0042fe1b    jmp near ptr 0042FE27h"
);
// LINE 1108:
	asm( 
"	      0042fe20    xor eax,eax"
"	      0042fe22    jmp near ptr 0042FE27h"
);
// LINE 1110:
	asm( 
"	      0042fe27    pop edi"
"	      0042fe28    pop esi"
"	      0042fe29    pop ebx"
"	      0042fe2a    leave"
"	      0042fe2b    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042fe2e
int32_t DigitalSound::SetVolume(long lNewVolume) {
// LINE 1124:
	asm( 
"	      0042fe2e    push ebp"
"	      0042fe2f    mov ebp,esp"
"	      0042fe31    sub esp,0Ch"
"	      0042fe34    push ebx"
"	      0042fe35    push esi"
"	      0042fe36    push edi"
"	      0042fe37    mov [ebp-0Ch],ecx"
);
// LINE 1128:
	asm( 
"	      0042fe3a    mov eax,[ebp+8]"
"	      0042fe3d    mov ecx,[ebp-0Ch]"
"	      0042fe40    mov [ecx+24h],eax"
);
// LINE 1129:
	asm( 
"	      0042fe43    mov eax,[ebp-0Ch]"
"	      0042fe46    cmp dword ptr [eax+52h],0"
"	      0042fe4a    je near ptr 0042FEA3h"
);
// LINE 1130:
	asm( 
"	      0042fe50    sub dword ptr [ebp+8],2710h"
);
// LINE 1131:
	asm( 
"	      0042fe57    mov eax,[ebp+8]"
"	      0042fe5a    push eax"
"	      0042fe5b    mov eax,[ebp-0Ch]"
"	      0042fe5e    mov eax,[eax+52h]"
"	      0042fe61    push eax"
"	      0042fe62    mov eax,[ebp-0Ch]"
"	      0042fe65    mov eax,[eax+52h]"
"	      0042fe68    mov eax,[eax]"
"	      0042fe6a    call dword ptr [eax+3Ch]"
"	      0042fe6d    mov [ebp-4],eax"
);
// LINE 1132:
	asm( 
"	      0042fe70    cmp dword ptr [ebp-4],0"
"	      0042fe74    je near ptr 0042FE99h"
);
// LINE 1133:
	asm( 
"	      0042fe7a    mov eax,[ebp-4]"
"	      0042fe7d    mov [ebp-8],eax"
"	      0042fe80    jmp near ptr 0042FE85h"
"	      0042fe85    push 598174h"
"	      0042fe8a    lea ecx,[ebp-8]"
"	      0042fe8d    call 0042DC69h"
);
// LINE 1134:
	asm( 
"	      0042fe92    xor eax,eax"
"	      0042fe94    jmp near ptr 0042FEAAh"
);
// LINE 1136:
	asm( 
"	      0042fe99    mov eax,1"
"	      0042fe9e    jmp near ptr 0042FEAAh"
);
// LINE 1138:
	asm( 
"	      0042fea3    xor eax,eax"
"	      0042fea5    jmp near ptr 0042FEAAh"
);
// LINE 1140:
	asm( 
"	      0042feaa    pop edi"
"	      0042feab    pop esi"
"	      0042feac    pop ebx"
"	      0042fead    leave"
"	      0042feae    ret 4"
);
}

// FUNCTION: COPTER_D 0x0042feb1
int32_t DigitalSound::SetPosition(long lX, long lY, long lZ) {
// LINE 1165:
	asm( 
"	      0042feb1    push ebp"
"	      0042feb2    mov ebp,esp"
"	      0042feb4    sub esp,10h"
"	      0042feb7    push ebx"
"	      0042feb8    push esi"
"	      0042feb9    push edi"
"	      0042feba    mov [ebp-0Ch],ecx"
);
// LINE 1171:
	asm( 
"	      0042febd    mov eax,[ebp+10h]"
"	      0042fec0    imul eax,[ebp+10h]"
"	      0042fec4    mov ecx,[ebp+0Ch]"
"	      0042fec7    imul ecx,[ebp+0Ch]"
"	      0042fecb    add eax,ecx"
"	      0042fecd    mov ecx,[ebp+8]"
"	      0042fed0    imul ecx,[ebp+8]"
"	      0042fed4    add eax,ecx"
"	      0042fed6    mov [ebp-4],eax"
);
// LINE 1172:
	asm( 
"	      0042fed9    cmp dword ptr [ebp-4],2FFFE4h"
"	      0042fee0    jl near ptr 0042FEF8h"
);
// LINE 1173:
	asm( 
"	      0042fee6    push 0"
"	      0042fee8    mov eax,[ebp-0Ch]"
"	      0042feeb    mov eax,[eax]"
"	      0042feed    mov ecx,[ebp-0Ch]"
"	      0042fef0    call dword ptr [eax+24h]"
"	      0042fef3    jmp near ptr 0042FF4Ah"
);
// LINE 1177:
	asm( 
"	      0042fef8    mov eax,[ebp-4]"
"	      0042fefb    mov [ebp-10h],eax"
"	      0042fefe    fild dword ptr [ebp-10h]"
"	      0042ff01    sub esp,8"
"	      0042ff04    fstp qword ptr [esp]"
"	      0042ff07    call 0056EC10h"
"	      0042ff0c    add esp,8"
"	      0042ff0f    call 0056EBE8h"
"	      0042ff14    mov [ebp-4],eax"
);
// LINE 1182:
	asm( 
"	      0042ff17    mov eax,[ebp-4]"
"	      0042ff1a    lea eax,[eax+eax*4]"
"	      0042ff1d    lea eax,[eax+eax*4]"
"	      0042ff20    lea eax,[eax+eax*4]"
"	      0042ff23    lea eax,[eax+eax*4]"
"	      0042ff26    shl eax,4"
"	      0042ff29    mov ecx,6EDh"
"	      0042ff2e    cdq"
"	      0042ff2f    idiv ecx"
"	      0042ff31    neg eax"
"	      0042ff33    mov [ebp-8],eax"
);
// LINE 1184:
	asm( 
"	      0042ff36    mov eax,[ebp-8]"
"	      0042ff39    push eax"
"	      0042ff3a    mov eax,[ebp-0Ch]"
"	      0042ff3d    mov eax,[eax]"
"	      0042ff3f    mov ecx,[ebp-0Ch]"
"	      0042ff42    call dword ptr [eax+24h]"
"	      0042ff45    jmp near ptr 0042FF4Ah"
);
// LINE 1185:
	asm( 
"	      0042ff4a    pop edi"
"	      0042ff4b    pop esi"
"	      0042ff4c    pop ebx"
"	      0042ff4d    leave"
"	      0042ff4e    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0042ff51
long DigitalSound::GetOriginalFrequency() {
// LINE 1192:
	asm( 
"	      0042ff51    push ebp"
"	      0042ff52    mov ebp,esp"
"	      0042ff54    sub esp,4"
"	      0042ff57    push ebx"
"	      0042ff58    push esi"
"	      0042ff59    push edi"
"	      0042ff5a    mov [ebp-4],ecx"
);
// LINE 1194:
	asm( 
"	      0042ff5d    mov eax,[ebp-4]"
"	      0042ff60    mov eax,[eax+44h]"
"	      0042ff63    jmp near ptr 0042FF68h"
);
// LINE 1196:
	asm( 
"	      0042ff68    pop edi"
"	      0042ff69    pop esi"
"	      0042ff6a    pop ebx"
"	      0042ff6b    leave"
"	      0042ff6c    ret"
);
}

// FUNCTION: COPTER_D 0x0042ff6d
long DigitalSound::IsPlaying() {
// LINE 1219:
	asm( 
"	      0042ff6d    push ebp"
"	      0042ff6e    mov ebp,esp"
"	      0042ff70    sub esp,4"
"	      0042ff73    push ebx"
"	      0042ff74    push esi"
"	      0042ff75    push edi"
"	      0042ff76    mov [ebp-4],ecx"
);
// LINE 1221:
	asm( 
"	      0042ff79    push 0"
"	      0042ff7b    mov eax,[ebp-4]"
"	      0042ff7e    mov eax,[eax]"
"	      0042ff80    mov ecx,[ebp-4]"
"	      0042ff83    call dword ptr [eax+4Ch]"
"	      0042ff86    jmp near ptr 0042FF8Bh"
);
// LINE 1223:
	asm( 
"	      0042ff8b    pop edi"
"	      0042ff8c    pop esi"
"	      0042ff8d    pop ebx"
"	      0042ff8e    leave"
"	      0042ff8f    ret"
);
}

// FUNCTION: COPTER_D 0x0042ff90
long DigitalSound::IsPlaying(struct IDirectSoundBuffer** lplpSoundPlaying) {
// LINE 1226:
	asm( 
"	      0042ff90    push ebp"
"	      0042ff91    mov ebp,esp"
"	      0042ff93    sub esp,14h"
"	      0042ff96    push ebx"
"	      0042ff97    push esi"
"	      0042ff98    push edi"
"	      0042ff99    mov [ebp-14h],ecx"
);
// LINE 1230:
	asm( 
"	      0042ff9c    mov dword ptr [ebp-8],0"
"	      0042ffa3    jmp near ptr 0042FFABh"
"	      0042ffa8    inc dword ptr [ebp-8]"
"	      0042ffab    cmp dword ptr [ebp-8],8"
"	      0042ffaf    jge near ptr 0043004Ch"
);
// LINE 1231:
	asm( 
"	      0042ffb5    mov eax,[ebp-8]"
"	      0042ffb8    mov ecx,[ebp-14h]"
"	      0042ffbb    cmp dword ptr [ecx+eax*4+52h],0"
"	      0042ffc0    je near ptr 00430040h"
);
// LINE 1232:
	asm( 
"	      0042ffc6    lea eax,[ebp-4]"
"	      0042ffc9    push eax"
"	      0042ffca    mov eax,[ebp-8]"
"	      0042ffcd    mov ecx,[ebp-14h]"
"	      0042ffd0    mov eax,[ecx+eax*4+52h]"
"	      0042ffd4    push eax"
"	      0042ffd5    mov eax,[ebp-8]"
"	      0042ffd8    mov ecx,[ebp-14h]"
"	      0042ffdb    mov eax,[ecx+eax*4+52h]"
"	      0042ffdf    mov eax,[eax]"
"	      0042ffe1    call dword ptr [eax+24h]"
"	      0042ffe4    mov [ebp-0Ch],eax"
);
// LINE 1233:
	asm( 
"	      0042ffe7    cmp dword ptr [ebp-0Ch],0"
"	      0042ffeb    je near ptr 0043000Eh"
);
// LINE 1234:
	asm( 
"	      0042fff1    mov eax,[ebp-0Ch]"
"	      0042fff4    mov [ebp-10h],eax"
"	      0042fff7    jmp near ptr 0042FFFCh"
"	      0042fffc    push 5981B0h"
"	      00430001    lea ecx,[ebp-10h]"
"	      00430004    call 0042DC69h"
);
// LINE 1235:
	asm( 
"	      00430009    jmp near ptr 0042FFA8h"
);
// LINE 1241:
	asm( 
"	      0043000e    test byte ptr [ebp-4],1"
"	      00430012    je near ptr 0043003Bh"
);
// LINE 1242:
	asm( 
"	      00430018    cmp dword ptr [ebp+8],0"
"	      0043001c    je near ptr 00430031h"
);
// LINE 1243:
	asm( 
"	      00430022    mov eax,[ebp-8]"
"	      00430025    mov ecx,[ebp-14h]"
"	      00430028    mov eax,[ecx+eax*4+52h]"
"	      0043002c    mov ecx,[ebp+8]"
"	      0043002f    mov [ecx],eax"
);
// LINE 1244:
	asm( 
"	      00430031    mov eax,1"
"	      00430036    jmp near ptr 00430053h"
);
// LINE 1247:
	asm( 
"	      0043003b    jmp near ptr 00430047h"
);
// LINE 1248:
	asm( 
"	      00430040    xor eax,eax"
"	      00430042    jmp near ptr 00430053h"
);
// LINE 1249:
	asm( 
"	      00430047    jmp near ptr 0042FFA8h"
);
// LINE 1250:
	asm( 
"	      0043004c    xor eax,eax"
"	      0043004e    jmp near ptr 00430053h"
);
// LINE 1251:
	asm( 
"	      00430053    pop edi"
"	      00430054    pop esi"
"	      00430055    pop ebx"
"	      00430056    leave"
"	      00430057    ret 4"
);
}

// FUNCTION: COPTER_D 0x0043005a
long DigitalSound::Play(long bPlayLooping, int32_t nDuplicateType) {
// LINE 1268:
	asm( 
"	      0043005a    push ebp"
"	      0043005b    mov ebp,esp"
"	      0043005d    sub esp,14h"
"	      00430060    push ebx"
"	      00430061    push esi"
"	      00430062    push edi"
"	      00430063    mov [ebp-14h],ecx"
);
// LINE 1271:
	asm( 
"	      00430066    mov dword ptr [ebp-8],0"
);
// LINE 1274:
	asm( 
"	      0043006d    mov eax,[ebp-14h]"
"	      00430070    cmp dword ptr [eax+30h],0"
"	      00430074    je near ptr 0043008Fh"
);
// LINE 1275:
	asm( 
"	      0043007a    mov eax,[ebp-14h]"
"	      0043007d    mov dword ptr [eax+30h],0"
);
// LINE 1276:
	asm( 
"	      00430084    mov eax,[ebp-14h]"
"	      00430087    mov eax,[eax]"
"	      00430089    mov ecx,[ebp-14h]"
"	      0043008c    call dword ptr [eax+3Ch]"
);
// LINE 1280:
	asm( 
"	      0043008f    mov eax,[ebp-14h]"
"	      00430092    cmp dword ptr [eax+20h],0"
"	      00430096    je near ptr 004300ACh"
);
// LINE 1281:
	asm( 
"	      0043009c    mov eax,[ebp-14h]"
"	      0043009f    mov eax,[eax]"
"	      004300a1    mov ecx,[ebp-14h]"
"	      004300a4    call dword ptr [eax+44h]"
"	      004300a7    jmp near ptr 004302F2h"
);
// LINE 1285:
	asm( 
"	      004300ac    mov eax,[ebp-14h]"
"	      004300af    cmp dword ptr [eax+52h],0"
"	      004300b3    jne near ptr 004300D3h"
);
// LINE 1286:
	asm( 
"	      004300b9    mov eax,[ebp-14h]"
"	      004300bc    mov eax,[eax]"
"	      004300be    mov ecx,[ebp-14h]"
"	      004300c1    call dword ptr [eax+30h]"
"	      004300c4    test eax,eax"
"	      004300c6    jne near ptr 004300D3h"
);
// LINE 1287:
	asm( 
"	      004300cc    xor eax,eax"
"	      004300ce    jmp near ptr 004302F2h"
);
// LINE 1290:
	asm( 
"	      004300d3    cmp dword ptr [ebp+0Ch],0"
"	      004300d7    jne near ptr 004300E6h"
);
// LINE 1291:
	asm( 
"	      004300dd    mov eax,[ebp-14h]"
"	      004300e0    mov eax,[eax+8]"
"	      004300e3    mov [ebp+0Ch],eax"
);
// LINE 1292:
	asm( 
"	      004300e6    cmp dword ptr [ebp+8],0"
"	      004300ea    je near ptr 004300FAh"
);
// LINE 1293:
	asm( 
"	      004300f0    mov eax,[ebp-14h]"
"	      004300f3    mov dword ptr [eax+1Ch],1"
);
// LINE 1294:
	asm( 
"	      004300fa    mov eax,[ebp-14h]"
"	      004300fd    cmp dword ptr [eax+1Ch],0"
"	      00430101    je near ptr 0043010Eh"
);
// LINE 1295:
	asm( 
"	      00430107    mov dword ptr [ebp-8],1"
);
// LINE 1298:
	asm( 
"	      0043010e    lea eax,[ebp-4]"
"	      00430111    push eax"
"	      00430112    mov eax,[ebp-14h]"
"	      00430115    mov eax,[eax]"
"	      00430117    mov ecx,[ebp-14h]"
"	      0043011a    call dword ptr [eax+4Ch]"
"	      0043011d    test eax,eax"
"	      0043011f    je near ptr 004301C7h"
);
// LINE 1299:
	asm( 
"	      00430125    cmp dword ptr [ebp+0Ch],1"
"	      00430129    jne near ptr 00430181h"
);
// LINE 1300:
	asm( 
"	      0043012f    push 0"
"	      00430131    mov eax,[ebp-4]"
"	      00430134    push eax"
"	      00430135    mov eax,[ebp-4]"
"	      00430138    mov eax,[eax]"
"	      0043013a    call dword ptr [eax+34h]"
);
// LINE 1303:
	asm( 
"	      0043013d    mov eax,[ebp-14h]"
"	      00430140    cmp dword ptr [eax+38h],0"
"	      00430144    jne near ptr 00430172h"
"	      0043014a    mov eax,[ebp-14h]"
"	      0043014d    cmp dword ptr [eax+28h],0"
"	      00430151    je near ptr 00430172h"
"	      00430157    mov eax,[ebp-14h]"
"	      0043015a    cmp dword ptr [eax+1Ch],0"
"	      0043015e    jne near ptr 00430172h"
);
// LINE 1304:
	asm( 
"	      00430164    mov eax,[ebp-14h]"
"	      00430167    mov eax,[eax]"
"	      00430169    mov ecx,[ebp-14h]"
"	      0043016c    call dword ptr [eax+88h]"
);
// LINE 1305:
	asm( 
"	      00430172    mov eax,1"
"	      00430177    jmp near ptr 004302F2h"
);
// LINE 1307:
	asm( 
"	      0043017c    jmp near ptr 004301C2h"
"	      00430181    cmp dword ptr [ebp+0Ch],2"
"	      00430185    jne near ptr 0043019Ah"
);
// LINE 1308:
	asm( 
"	      0043018b    mov eax,1"
"	      00430190    jmp near ptr 004302F2h"
);
// LINE 1310:
	asm( 
"	      00430195    jmp near ptr 004301C2h"
"	      0043019a    cmp dword ptr [ebp+0Ch],3"
"	      0043019e    jne near ptr 004301C2h"
);
// LINE 1314:
	asm( 
"	      004301a4    lea eax,[ebp-4]"
"	      004301a7    push eax"
"	      004301a8    mov eax,[ebp-14h]"
"	      004301ab    mov eax,[eax]"
"	      004301ad    mov ecx,[ebp-14h]"
"	      004301b0    call dword ptr [eax+68h]"
"	      004301b3    test eax,eax"
"	      004301b5    jne near ptr 004301C2h"
);
// LINE 1315:
	asm( 
"	      004301bb    xor eax,eax"
"	      004301bd    jmp near ptr 004302F2h"
);
// LINE 1318:
	asm( 
"	      004301c2    jmp near ptr 004301D0h"
);
// LINE 1319:
	asm( 
"	      004301c7    mov eax,[ebp-14h]"
"	      004301ca    mov eax,[eax+52h]"
"	      004301cd    mov [ebp-4],eax"
);
// LINE 1321:
	asm( 
"	      004301d0    mov eax,[ebp-14h]"
"	      004301d3    cmp dword ptr [eax+24h],2710h"
"	      004301da    je near ptr 004301F2h"
);
// LINE 1322:
	asm( 
"	      004301e0    mov eax,[ebp-14h]"
"	      004301e3    mov eax,[eax+24h]"
"	      004301e6    push eax"
"	      004301e7    mov eax,[ebp-14h]"
"	      004301ea    mov eax,[eax]"
"	      004301ec    mov ecx,[ebp-14h]"
"	      004301ef    call dword ptr [eax+24h]"
);
// LINE 1324:
	asm( 
"	      004301f2    mov eax,[ebp-8]"
"	      004301f5    push eax"
"	      004301f6    push 0"
"	      004301f8    push 0"
"	      004301fa    mov eax,[ebp-4]"
"	      004301fd    push eax"
"	      004301fe    mov eax,[ebp-4]"
"	      00430201    mov eax,[eax]"
"	      00430203    call dword ptr [eax+30h]"
"	      00430206    mov [ebp-0Ch],eax"
"	      00430209    cmp dword ptr [ebp-0Ch],0"
"	      0043020d    je near ptr 004302B3h"
);
// LINE 1325:
	asm( 
"	      00430213    cmp dword ptr [ebp-0Ch],88780096h"
"	      0043021a    jne near ptr 004302ACh"
);
// LINE 1326:
	asm( 
"	      00430220    mov eax,[ebp-4]"
"	      00430223    push eax"
"	      00430224    mov eax,[ebp-4]"
"	      00430227    mov eax,[eax]"
"	      00430229    call dword ptr [eax+50h]"
"	      0043022c    mov [ebp-0Ch],eax"
"	      0043022f    cmp dword ptr [ebp-0Ch],0"
"	      00430233    jne near ptr 004302ACh"
);
// LINE 1327:
	asm( 
"	      00430239    mov eax,[ebp-0Ch]"
"	      0043023c    mov [ebp-10h],eax"
"	      0043023f    jmp near ptr 00430244h"
"	      00430244    push 5981E8h"
"	      00430249    lea ecx,[ebp-10h]"
"	      0043024c    call 0042DC69h"
);
// LINE 1328:
	asm( 
"	      00430251    mov eax,[ebp-8]"
"	      00430254    push eax"
"	      00430255    push 0"
"	      00430257    push 0"
"	      00430259    mov eax,[ebp-4]"
"	      0043025c    push eax"
"	      0043025d    mov eax,[ebp-4]"
"	      00430260    mov eax,[eax]"
"	      00430262    call dword ptr [eax+30h]"
"	      00430265    test eax,eax"
"	      00430267    jne near ptr 004302ACh"
);
// LINE 1331:
	asm( 
"	      0043026d    mov eax,[ebp-14h]"
"	      00430270    cmp dword ptr [eax+38h],0"
"	      00430274    jne near ptr 004302A2h"
"	      0043027a    mov eax,[ebp-14h]"
"	      0043027d    cmp dword ptr [eax+28h],0"
"	      00430281    je near ptr 004302A2h"
"	      00430287    mov eax,[ebp-14h]"
"	      0043028a    cmp dword ptr [eax+1Ch],0"
"	      0043028e    jne near ptr 004302A2h"
);
// LINE 1332:
	asm( 
"	      00430294    mov eax,[ebp-14h]"
"	      00430297    mov eax,[eax]"
"	      00430299    mov ecx,[ebp-14h]"
"	      0043029c    call dword ptr [eax+88h]"
);
// LINE 1333:
	asm( 
"	      004302a2    mov eax,1"
"	      004302a7    jmp near ptr 004302F2h"
);
// LINE 1338:
	asm( 
"	      004302ac    xor eax,eax"
"	      004302ae    jmp near ptr 004302F2h"
);
// LINE 1342:
	asm( 
"	      004302b3    mov eax,[ebp-14h]"
"	      004302b6    cmp dword ptr [eax+38h],0"
"	      004302ba    jne near ptr 004302E8h"
"	      004302c0    mov eax,[ebp-14h]"
"	      004302c3    cmp dword ptr [eax+28h],0"
"	      004302c7    je near ptr 004302E8h"
"	      004302cd    mov eax,[ebp-14h]"
"	      004302d0    cmp dword ptr [eax+1Ch],0"
"	      004302d4    jne near ptr 004302E8h"
);
// LINE 1343:
	asm( 
"	      004302da    mov eax,[ebp-14h]"
"	      004302dd    mov eax,[eax]"
"	      004302df    mov ecx,[ebp-14h]"
"	      004302e2    call dword ptr [eax+88h]"
);
// LINE 1344:
	asm( 
"	      004302e8    mov eax,1"
"	      004302ed    jmp near ptr 004302F2h"
);
// LINE 1346:
	asm( 
"	      004302f2    pop edi"
"	      004302f3    pop esi"
"	      004302f4    pop ebx"
"	      004302f5    leave"
"	      004302f6    ret 8"
);
}

// FUNCTION: COPTER_D 0x004302f9
int32_t DigitalSound::GetSoundAliasToPlay(struct IDirectSoundBuffer** lplpSoundBufferToPlay) {
// LINE 1364:
	asm( 
"	      004302f9    push ebp"
"	      004302fa    mov ebp,esp"
"	      004302fc    sub esp,18h"
"	      004302ff    push ebx"
"	      00430300    push esi"
"	      00430301    push edi"
"	      00430302    mov [ebp-18h],ecx"
);
// LINE 1373:
	asm( 
"	      00430305    mov dword ptr [ebp-8],0"
"	      0043030c    jmp near ptr 00430314h"
"	      00430311    inc dword ptr [ebp-8]"
"	      00430314    cmp dword ptr [ebp-8],8"
"	      00430318    jge near ptr 0043040Dh"
);
// LINE 1374:
	asm( 
"	      0043031e    mov eax,[ebp-8]"
"	      00430321    mov ecx,[ebp-18h]"
"	      00430324    cmp dword ptr [ecx+eax*4+52h],0"
"	      00430329    je near ptr 0043039Fh"
);
// LINE 1375:
	asm( 
"	      0043032f    lea eax,[ebp-4]"
"	      00430332    push eax"
"	      00430333    mov eax,[ebp-8]"
"	      00430336    mov ecx,[ebp-18h]"
"	      00430339    mov eax,[ecx+eax*4+52h]"
"	      0043033d    push eax"
"	      0043033e    mov eax,[ebp-8]"
"	      00430341    mov ecx,[ebp-18h]"
"	      00430344    mov eax,[ecx+eax*4+52h]"
"	      00430348    mov eax,[eax]"
"	      0043034a    call dword ptr [eax+24h]"
"	      0043034d    mov [ebp-0Ch],eax"
"	      00430350    cmp dword ptr [ebp-0Ch],0"
"	      00430354    je near ptr 00430377h"
);
// LINE 1376:
	asm( 
"	      0043035a    mov eax,[ebp-0Ch]"
"	      0043035d    mov [ebp-10h],eax"
"	      00430360    jmp near ptr 00430365h"
"	      00430365    push 598218h"
"	      0043036a    lea ecx,[ebp-10h]"
"	      0043036d    call 0042DC69h"
);
// LINE 1377:
	asm( 
"	      00430372    jmp near ptr 00430311h"
);
// LINE 1379:
	asm( 
"	      00430377    cmp dword ptr [ebp-4],0"
"	      0043037b    jne near ptr 0043039Ah"
);
// LINE 1380:
	asm( 
"	      00430381    mov eax,[ebp-8]"
"	      00430384    mov ecx,[ebp-18h]"
"	      00430387    mov eax,[ecx+eax*4+52h]"
"	      0043038b    mov ecx,[ebp+8]"
"	      0043038e    mov [ecx],eax"
);
// LINE 1381:
	asm( 
"	      00430390    mov eax,1"
"	      00430395    jmp near ptr 00430414h"
);
// LINE 1384:
	asm( 
"	      0043039a    jmp near ptr 00430408h"
);
// LINE 1385:
	asm( 
"	      0043039f    cmp dword ptr ds:[597E60h],0"
"	      004303a6    jne near ptr 004303B3h"
);
// LINE 1386:
	asm( 
"	      004303ac    xor eax,eax"
"	      004303ae    jmp near ptr 00430414h"
);
// LINE 1387:
	asm( 
"	      004303b3    mov eax,[ebp+8]"
"	      004303b6    push eax"
"	      004303b7    mov eax,[ebp-8]"
"	      004303ba    mov ecx,[ebp-18h]"
"	      004303bd    mov eax,[ecx+eax*4+52h]"
"	      004303c1    push eax"
"	      004303c2    mov eax,ds:[597E60h]"
"	      004303c7    push eax"
"	      004303c8    mov eax,ds:[597E60h]"
"	      004303cd    mov eax,[eax]"
"	      004303cf    call dword ptr [eax+14h]"
"	      004303d2    mov [ebp-0Ch],eax"
"	      004303d5    cmp dword ptr [ebp-0Ch],0"
"	      004303d9    je near ptr 004303FEh"
);
// LINE 1388:
	asm( 
"	      004303df    mov eax,[ebp-0Ch]"
"	      004303e2    mov [ebp-14h],eax"
"	      004303e5    jmp near ptr 004303EAh"
"	      004303ea    push 59824Ch"
"	      004303ef    lea ecx,[ebp-14h]"
"	      004303f2    call 0042DC69h"
);
// LINE 1389:
	asm( 
"	      004303f7    xor eax,eax"
"	      004303f9    jmp near ptr 00430414h"
);
// LINE 1391:
	asm( 
"	      004303fe    mov eax,1"
"	      00430403    jmp near ptr 00430414h"
);
// LINE 1393:
	asm( 
"	      00430408    jmp near ptr 00430311h"
);
// LINE 1394:
	asm( 
"	      0043040d    xor eax,eax"
"	      0043040f    jmp near ptr 00430414h"
);
// LINE 1396:
	asm( 
"	      00430414    pop edi"
"	      00430415    pop esi"
"	      00430416    pop ebx"
"	      00430417    leave"
"	      00430418    ret 4"
);
}

// FUNCTION: COPTER_D 0x0043041b
long DigitalSound::Stop() {
// LINE 1409:
	asm( 
"	      0043041b    push ebp"
"	      0043041c    mov ebp,esp"
"	      0043041e    sub esp,0Ch"
"	      00430421    push ebx"
"	      00430422    push esi"
"	      00430423    push edi"
"	      00430424    mov [ebp-0Ch],ecx"
);
// LINE 1414:
	asm( 
"	      00430427    mov eax,[ebp-0Ch]"
"	      0043042a    mov eax,[eax]"
"	      0043042c    mov ecx,[ebp-0Ch]"
"	      0043042f    call dword ptr [eax+10h]"
"	      00430432    mov [ebp-4],eax"
);
// LINE 1416:
	asm( 
"	      00430435    mov eax,[ebp-0Ch]"
"	      00430438    cmp dword ptr [eax+20h],0"
"	      0043043c    je near ptr 00430452h"
);
// LINE 1417:
	asm( 
"	      00430442    mov eax,[ebp-0Ch]"
"	      00430445    mov eax,[eax]"
"	      00430447    mov ecx,[ebp-0Ch]"
"	      0043044a    call dword ptr [eax+48h]"
"	      0043044d    jmp near ptr 004304E7h"
);
// LINE 1419:
	asm( 
"	      00430452    mov dword ptr [ebp-8],0"
"	      00430459    jmp near ptr 00430461h"
"	      0043045e    inc dword ptr [ebp-8]"
"	      00430461    mov eax,[ebp-8]"
"	      00430464    mov ecx,[ebp-0Ch]"
"	      00430467    cmp dword ptr [ecx+eax*4+52h],0"
"	      0043046c    je near ptr 0043049Bh"
"	      00430472    cmp dword ptr [ebp-8],8"
"	      00430476    jge near ptr 0043049Bh"
);
// LINE 1424:
	asm( 
"	      0043047c    mov eax,[ebp-8]"
"	      0043047f    mov ecx,[ebp-0Ch]"
"	      00430482    mov eax,[ecx+eax*4+52h]"
"	      00430486    push eax"
"	      00430487    mov eax,[ebp-8]"
"	      0043048a    mov ecx,[ebp-0Ch]"
"	      0043048d    mov eax,[ecx+eax*4+52h]"
"	      00430491    mov eax,[eax]"
"	      00430493    call dword ptr [eax+48h]"
);
// LINE 1425:
	asm( 
"	      00430496    jmp near ptr 0043045Eh"
);
// LINE 1426:
	asm( 
"	      0043049b    mov eax,[ebp-0Ch]"
"	      0043049e    cmp dword ptr [eax+38h],0"
"	      004304a2    je near ptr 004304B6h"
);
// LINE 1427:
	asm( 
"	      004304a8    mov eax,[ebp-0Ch]"
"	      004304ab    mov eax,[eax]"
"	      004304ad    mov ecx,[ebp-0Ch]"
"	      004304b0    call dword ptr [eax+84h]"
);
// LINE 1428:
	asm( 
"	      004304b6    cmp dword ptr [ebp-4],0"
"	      004304ba    je near ptr 004304DDh"
"	      004304c0    mov eax,[ebp-0Ch]"
"	      004304c3    cmp dword ptr [eax+28h],0"
"	      004304c7    je near ptr 004304DDh"
);
// LINE 1429:
	asm( 
"	      004304cd    mov eax,[ebp-0Ch]"
"	      004304d0    mov eax,[eax+2Ch]"
"	      004304d3    push eax"
"	      004304d4    mov eax,[ebp-0Ch]"
"	      004304d7    call dword ptr [eax+28h]"
"	      004304da    add esp,4"
);
// LINE 1430:
	asm( 
"	      004304dd    mov eax,1"
"	      004304e2    jmp near ptr 004304E7h"
);
// LINE 1432:
	asm( 
"	      004304e7    pop edi"
"	      004304e8    pop esi"
"	      004304e9    pop ebx"
"	      004304ea    leave"
"	      004304eb    ret"
);
}

// FUNCTION: COPTER_D 0x004304ec
long DigitalSound::ShouldWeStream() {
// LINE 1446:
	asm( 
"	      004304ec    push ebp"
"	      004304ed    mov ebp,esp"
"	      004304ef    sub esp,0B4h"
"	      004304f5    push ebx"
"	      004304f6    push esi"
"	      004304f7    push edi"
"	      004304f8    mov [ebp-0B4h],ecx"
);
// LINE 1452:
	asm( 
"	      004304fe    mov eax,[ebp-0B4h]"
"	      00430504    cmp dword ptr [eax+14h],0"
"	      00430508    je near ptr 00430538h"
"	      0043050e    mov eax,[ebp-0B4h]"
"	      00430514    mov eax,[eax+14h]"
"	      00430517    mov [ebp-94h],eax"
"	      0043051d    mov eax,[ebp-94h]"
"	      00430523    mov [ebp-9Ch],eax"
"	      00430529    mov eax,[ebp-9Ch]"
"	      0043052f    push eax"
"	      00430530    call 0056A740h"
"	      00430535    add esp,4"
"	      00430538    jmp near ptr 0043053Dh"
"	      0043053d    mov eax,[ebp-0B4h]"
"	      00430543    mov eax,[eax+18h]"
"	      00430546    mov eax,[eax+4]"
"	      00430549    inc eax"
"	      0043054a    push eax"
"	      0043054b    call 0056A600h"
"	      00430550    add esp,4"
"	      00430553    mov ecx,[ebp-0B4h]"
"	      00430559    mov [ecx+14h],eax"
"	      0043055c    jmp near ptr 00430561h"
"	      00430561    mov eax,[ebp-0B4h]"
"	      00430567    mov eax,[eax+18h]"
"	      0043056a    cmp dword ptr [eax+4],0"
"	      0043056e    je near ptr 004305FEh"
"	      00430574    jmp near ptr 00430579h"
"	      00430579    jmp near ptr 0043057Eh"
"	      0043057e    mov eax,[ebp-0B4h]"
"	      00430584    mov eax,[eax+18h]"
"	      00430587    cmp dword ptr [eax+4],0"
"	      0043058b    je near ptr 004305ACh"
"	      00430591    mov eax,[ebp-0B4h]"
"	      00430597    mov eax,[eax+18h]"
"	      0043059a    mov eax,[eax]"
"	      0043059c    mov [ebp-0A8h],eax"
"	      004305a2    jmp near ptr 004305BBh"
"	      004305a7    jmp near ptr 004305BBh"
"	      004305ac    mov dword ptr [ebp-0A8h],0"
"	      004305b6    jmp near ptr 004305BBh"
"	      004305bb    mov eax,[ebp-0B4h]"
"	      004305c1    mov eax,[eax+18h]"
"	      004305c4    mov eax,[eax+4]"
"	      004305c7    mov [ebp-0ACh],eax"
"	      004305cd    mov eax,[ebp-0B4h]"
"	      004305d3    mov eax,[eax+14h]"
"	      004305d6    mov [ebp-0B0h],eax"
"	      004305dc    mov eax,[ebp-0ACh]"
"	      004305e2    push eax"
"	      004305e3    mov eax,[ebp-0A8h]"
"	      004305e9    push eax"
"	      004305ea    mov eax,[ebp-0B0h]"
"	      004305f0    push eax"
"	      004305f1    call 0056A800h"
"	      004305f6    add esp,0Ch"
"	      004305f9    jmp near ptr 004305FEh"
"	      004305fe    jmp near ptr 00430603h"
"	      00430603    mov byte ptr [ebp-98h],0"
"	      0043060a    jmp near ptr 0043060Fh"
"	      0043060f    lea eax,[ebp-98h]"
"	      00430615    mov [ebp-0A0h],eax"
"	      0043061b    jmp near ptr 00430620h"
"	      00430620    mov eax,[ebp-0B4h]"
"	      00430626    mov eax,[eax+18h]"
"	      00430629    mov eax,[eax+4]"
"	      0043062c    mov ecx,[ebp-0B4h]"
"	      00430632    add eax,[ecx+14h]"
"	      00430635    mov [ebp-0A4h],eax"
"	      0043063b    mov eax,[ebp-0A0h]"
"	      00430641    mov al,[eax]"
"	      00430643    mov ecx,[ebp-0A4h]"
"	      00430649    mov [ecx],al"
"	      0043064b    jmp near ptr 00430650h"
"	      00430650    jmp near ptr 00430655h"
"	      00430655    push 0"
"	      00430657    lea eax,[ebp-8Ch]"
"	      0043065d    push eax"
"	      0043065e    mov eax,[ebp-0B4h]"
"	      00430664    mov eax,[eax+14h]"
"	      00430667    push eax"
"	      00430668    call dword ptr ds:[6C3638h]"
"	      0043066e    mov [ebp-90h],eax"
);
// LINE 1453:
	asm( 
"	      00430674    cmp dword ptr [ebp-90h],0FFFFFFFFh"
"	      0043067b    jne near ptr 00430688h"
);
// LINE 1454:
	asm( 
"	      00430681    xor eax,eax"
"	      00430683    jmp near ptr 004306C5h"
);
// LINE 1455:
	asm( 
"	      00430688    push 0"
"	      0043068a    mov eax,[ebp-90h]"
"	      00430690    push eax"
"	      00430691    call dword ptr ds:[6C3648h]"
"	      00430697    mov [ebp-4],eax"
);
// LINE 1457:
	asm( 
"	      0043069a    mov eax,[ebp-90h]"
"	      004306a0    push eax"
"	      004306a1    call dword ptr ds:[6C374Ch]"
);
// LINE 1459:
	asm( 
"	      004306a7    cmp dword ptr [ebp-4],30D40h"
"	      004306ae    jb near ptr 004306BEh"
);
// LINE 1460:
	asm( 
"	      004306b4    mov eax,1"
"	      004306b9    jmp near ptr 004306C5h"
);
// LINE 1461:
	asm( 
"	      004306be    xor eax,eax"
"	      004306c0    jmp near ptr 004306C5h"
);
// LINE 1463:
	asm( 
"	      004306c5    pop edi"
"	      004306c6    pop esi"
"	      004306c7    pop ebx"
"	      004306c8    leave"
"	      004306c9    ret"
);
}

// FUNCTION: COPTER_D 0x004306ca
long DigitalSound::InitializeStreamBuffer(long bStopIfCurrentlyPlaying) {
// LINE 1485:
	asm( 
"	      004306ca    push ebp"
"	      004306cb    mov ebp,esp"
"	      004306cd    sub esp,40h"
"	      004306d0    push ebx"
"	      004306d1    push esi"
"	      004306d2    push edi"
"	      004306d3    mov [ebp-40h],ecx"
);
// LINE 1491:
	asm( 
"	      004306d6    mov eax,[ebp-40h]"
"	      004306d9    mov eax,[eax]"
"	      004306db    mov ecx,[ebp-40h]"
"	      004306de    call dword ptr [eax+10h]"
"	      004306e1    test eax,eax"
"	      004306e3    je near ptr 0043070Ah"
);
// LINE 1492:
	asm( 
"	      004306e9    cmp dword ptr [ebp+8],0"
"	      004306ed    je near ptr 00430703h"
);
// LINE 1493:
	asm( 
"	      004306f3    mov eax,[ebp-40h]"
"	      004306f6    mov eax,[eax]"
"	      004306f8    mov ecx,[ebp-40h]"
"	      004306fb    call dword ptr [eax+0Ch]"
);
// LINE 1494:
	asm( 
"	      004306fe    jmp near ptr 0043070Ah"
);
// LINE 1495:
	asm( 
"	      00430703    xor eax,eax"
"	      00430705    jmp near ptr 00430A6Dh"
);
// LINE 1498:
	asm( 
"	      0043070a    cmp dword ptr ds:[597E60h],0"
"	      00430711    jne near ptr 0043071Eh"
);
// LINE 1499:
	asm( 
"	      00430717    xor eax,eax"
"	      00430719    jmp near ptr 00430A6Dh"
);
// LINE 1500:
	asm( 
"	      0043071e    mov eax,[ebp-40h]"
"	      00430721    cmp dword ptr [eax+72h],0"
"	      00430725    jne near ptr 0043073Bh"
);
// LINE 1501:
	asm( 
"	      0043072b    push 5Ch"
"	      0043072d    call 0056A600h"
"	      00430732    add esp,4"
"	      00430735    mov ecx,[ebp-40h]"
"	      00430738    mov [ecx+72h],eax"
);
// LINE 1502:
	asm( 
"	      0043073b    mov eax,[ebp-40h]"
"	      0043073e    cmp dword ptr [eax+72h],0"
"	      00430742    jne near ptr 0043074Fh"
);
// LINE 1503:
	asm( 
"	      00430748    xor eax,eax"
"	      0043074a    jmp near ptr 00430A6Dh"
);
// LINE 1512:
	asm( 
"	      0043074f    mov eax,[ebp-40h]"
"	      00430752    mov eax,[eax+72h]"
"	      00430755    mov dword ptr [eax],0"
);
// LINE 1513:
	asm( 
"	      0043075b    mov eax,[ebp-40h]"
"	      0043075e    mov eax,[eax+72h]"
"	      00430761    mov dword ptr [eax+2Ch],0"
);
// LINE 1514:
	asm( 
"	      00430768    mov eax,[ebp-40h]"
"	      0043076b    mov eax,[eax+72h]"
"	      0043076e    mov dword ptr [eax+30h],0"
);
// LINE 1515:
	asm( 
"	      00430775    mov eax,[ebp-40h]"
"	      00430778    mov eax,[eax+72h]"
"	      0043077b    mov dword ptr [eax+34h],0"
);
// LINE 1516:
	asm( 
"	      00430782    mov eax,[ebp-40h]"
"	      00430785    mov eax,[eax+72h]"
"	      00430788    mov dword ptr [eax+38h],0"
);
// LINE 1517:
	asm( 
"	      0043078f    mov eax,[ebp-40h]"
"	      00430792    mov eax,[eax+72h]"
"	      00430795    mov dword ptr [eax+3Ch],0"
);
// LINE 1518:
	asm( 
"	      0043079c    mov eax,[ebp-40h]"
"	      0043079f    mov eax,[eax+72h]"
"	      004307a2    mov dword ptr [eax+40h],1"
);
// LINE 1519:
	asm( 
"	      004307a9    mov eax,[ebp-40h]"
"	      004307ac    mov eax,[eax+72h]"
"	      004307af    mov dword ptr [eax+44h],0"
);
// LINE 1520:
	asm( 
"	      004307b6    mov eax,[ebp-40h]"
"	      004307b9    mov eax,[eax+72h]"
"	      004307bc    mov dword ptr [eax+48h],0"
);
// LINE 1521:
	asm( 
"	      004307c3    mov eax,[ebp-40h]"
"	      004307c6    mov eax,[eax+72h]"
"	      004307c9    mov dword ptr [eax+4Ch],0"
);
// LINE 1522:
	asm( 
"	      004307d0    mov eax,[ebp-40h]"
"	      004307d3    mov eax,[eax+72h]"
"	      004307d6    mov dword ptr [eax+58h],0"
);
// LINE 1523:
	asm( 
"	      004307dd    mov eax,[ebp-40h]"
"	      004307e0    mov eax,[eax+72h]"
"	      004307e3    mov dword ptr [eax+54h],0"
);
// LINE 1524:
	asm( 
"	      004307ea    mov eax,[ebp-40h]"
"	      004307ed    mov eax,[eax+72h]"
"	      004307f0    mov dword ptr [eax+50h],0"
);
// LINE 1528:
	asm( 
"	      004307f7    mov eax,[ebp-40h]"
"	      004307fa    cmp dword ptr [eax+14h],0"
"	      004307fe    je near ptr 0043081Fh"
"	      00430804    mov eax,[ebp-40h]"
"	      00430807    mov eax,[eax+14h]"
"	      0043080a    mov [ebp-20h],eax"
"	      0043080d    mov eax,[ebp-20h]"
"	      00430810    mov [ebp-28h],eax"
"	      00430813    mov eax,[ebp-28h]"
"	      00430816    push eax"
"	      00430817    call 0056A740h"
"	      0043081c    add esp,4"
"	      0043081f    jmp near ptr 00430824h"
"	      00430824    mov eax,[ebp-40h]"
"	      00430827    mov eax,[eax+18h]"
"	      0043082a    mov eax,[eax+4]"
"	      0043082d    inc eax"
"	      0043082e    push eax"
"	      0043082f    call 0056A600h"
"	      00430834    add esp,4"
"	      00430837    mov ecx,[ebp-40h]"
"	      0043083a    mov [ecx+14h],eax"
"	      0043083d    jmp near ptr 00430842h"
"	      00430842    mov eax,[ebp-40h]"
"	      00430845    mov eax,[eax+18h]"
"	      00430848    cmp dword ptr [eax+4],0"
"	      0043084c    je near ptr 004308BBh"
"	      00430852    jmp near ptr 00430857h"
"	      00430857    jmp near ptr 0043085Ch"
"	      0043085c    mov eax,[ebp-40h]"
"	      0043085f    mov eax,[eax+18h]"
"	      00430862    cmp dword ptr [eax+4],0"
"	      00430866    je near ptr 00430881h"
"	      0043086c    mov eax,[ebp-40h]"
"	      0043086f    mov eax,[eax+18h]"
"	      00430872    mov eax,[eax]"
"	      00430874    mov [ebp-34h],eax"
"	      00430877    jmp near ptr 0043088Dh"
"	      0043087c    jmp near ptr 0043088Dh"
"	      00430881    mov dword ptr [ebp-34h],0"
"	      00430888    jmp near ptr 0043088Dh"
"	      0043088d    mov eax,[ebp-40h]"
"	      00430890    mov eax,[eax+18h]"
"	      00430893    mov eax,[eax+4]"
"	      00430896    mov [ebp-38h],eax"
"	      00430899    mov eax,[ebp-40h]"
"	      0043089c    mov eax,[eax+14h]"
"	      0043089f    mov [ebp-3Ch],eax"
"	      004308a2    mov eax,[ebp-38h]"
"	      004308a5    push eax"
"	      004308a6    mov eax,[ebp-34h]"
"	      004308a9    push eax"
"	      004308aa    mov eax,[ebp-3Ch]"
"	      004308ad    push eax"
"	      004308ae    call 0056A800h"
"	      004308b3    add esp,0Ch"
"	      004308b6    jmp near ptr 004308BBh"
"	      004308bb    jmp near ptr 004308C0h"
"	      004308c0    mov byte ptr [ebp-24h],0"
"	      004308c4    jmp near ptr 004308C9h"
"	      004308c9    lea eax,[ebp-24h]"
"	      004308cc    mov [ebp-2Ch],eax"
"	      004308cf    jmp near ptr 004308D4h"
"	      004308d4    mov eax,[ebp-40h]"
"	      004308d7    mov eax,[eax+18h]"
"	      004308da    mov eax,[eax+4]"
"	      004308dd    mov ecx,[ebp-40h]"
"	      004308e0    add eax,[ecx+14h]"
"	      004308e3    mov [ebp-30h],eax"
"	      004308e6    mov eax,[ebp-2Ch]"
"	      004308e9    mov al,[eax]"
"	      004308eb    mov ecx,[ebp-30h]"
"	      004308ee    mov [ecx],al"
"	      004308f0    jmp near ptr 004308F5h"
"	      004308f5    jmp near ptr 004308FAh"
"	      004308fa    mov eax,[ebp-40h]"
"	      004308fd    mov eax,[eax+72h]"
"	      00430900    add eax,18h"
"	      00430903    push eax"
"	      00430904    mov eax,[ebp-40h]"
"	      00430907    add eax,40h"
"	      0043090a    push eax"
"	      0043090b    mov eax,[ebp-40h]"
"	      0043090e    mov eax,[eax+72h]"
"	      00430911    push eax"
"	      00430912    mov eax,[ebp-40h]"
"	      00430915    mov eax,[eax+14h]"
"	      00430918    push eax"
"	      00430919    call 0048EBB0h"
"	      0043091e    add esp,10h"
"	      00430921    test eax,eax"
"	      00430923    je near ptr 00430930h"
);
// LINE 1529:
	asm( 
"	      00430929    xor eax,eax"
"	      0043092b    jmp near ptr 00430A6Dh"
);
// LINE 1533:
	asm( 
"	      00430930    mov eax,[ebp-40h]"
"	      00430933    xor ecx,ecx"
"	      00430935    mov cx,[eax+40h]"
"	      00430939    cmp ecx,1"
"	      0043093c    je near ptr 00430958h"
);
// LINE 1534:
	asm( 
"	      00430942    mov eax,[ebp-40h]"
"	      00430945    mov eax,[eax+72h]"
"	      00430948    push eax"
"	      00430949    call 0048EF6Fh"
"	      0043094e    add esp,4"
);
// LINE 1535:
	asm( 
"	      00430951    xor eax,eax"
"	      00430953    jmp near ptr 00430A6Dh"
);
// LINE 1538:
	asm( 
"	      00430958    mov eax,[ebp-40h]"
"	      0043095b    cmp dword ptr [eax+52h],0"
"	      0043095f    je near ptr 00430970h"
);
// LINE 1539:
	asm( 
"	      00430965    mov eax,[ebp-40h]"
"	      00430968    mov eax,[eax]"
"	      0043096a    mov ecx,[ebp-40h]"
"	      0043096d    call dword ptr [eax+74h]"
);
// LINE 1545:
	asm( 
"	      00430970    mov eax,[ebp-40h]"
"	      00430973    mov eax,[eax+48h]"
"	      00430976    shl eax,3"
"	      00430979    lea eax,[eax+eax*2]"
"	      0043097c    lea eax,[eax+eax*4]"
"	      0043097f    mov ecx,64h"
"	      00430984    sub edx,edx"
"	      00430986    div ecx"
"	      00430988    mov ecx,[ebp-40h]"
"	      0043098b    mov ecx,[ecx+72h]"
"	      0043098e    mov [ecx+2Ch],eax"
);
// LINE 1546:
	asm( 
"	      00430991    mov eax,[ebp-40h]"
"	      00430994    mov eax,[eax+72h]"
"	      00430997    mov ecx,6"
"	      0043099c    mov eax,[eax+2Ch]"
"	      0043099f    sub edx,edx"
"	      004309a1    div ecx"
"	      004309a3    mov ecx,[ebp-40h]"
"	      004309a6    mov ecx,[ecx+72h]"
"	      004309a9    mov [ecx+30h],eax"
);
// LINE 1547:
	asm( 
"	      004309ac    mov eax,[ebp-40h]"
"	      004309af    mov eax,[eax+72h]"
"	      004309b2    mov eax,[eax+30h]"
"	      004309b5    lea eax,[eax+eax*2]"
"	      004309b8    add eax,eax"
"	      004309ba    mov ecx,[ebp-40h]"
"	      004309bd    mov ecx,[ecx+72h]"
"	      004309c0    mov [ecx+2Ch],eax"
);
// LINE 1550:
	asm( 
"	      004309c3    push 14h"
"	      004309c5    push 0"
"	      004309c7    lea eax,[ebp-14h]"
"	      004309ca    push eax"
"	      004309cb    call 0056EB90h"
"	      004309d0    add esp,0Ch"
);
// LINE 1551:
	asm( 
"	      004309d3    mov dword ptr [ebp-14h],14h"
);
// LINE 1552:
	asm( 
"	      004309da    mov dword ptr [ebp-10h],0E0h"
);
// LINE 1553:
	asm( 
"	      004309e1    mov eax,[ebp-40h]"
"	      004309e4    mov eax,[eax+72h]"
"	      004309e7    mov eax,[eax+2Ch]"
"	      004309ea    mov [ebp-0Ch],eax"
);
// LINE 1556:
	asm( 
"	      004309ed    mov eax,[ebp-40h]"
"	      004309f0    add eax,40h"
"	      004309f3    mov [ebp-4],eax"
);
// LINE 1557:
	asm( 
"	      004309f6    push 0"
"	      004309f8    mov eax,[ebp-40h]"
"	      004309fb    add eax,52h"
"	      004309fe    push eax"
"	      004309ff    lea eax,[ebp-14h]"
"	      00430a02    push eax"
"	      00430a03    mov eax,ds:[597E60h]"
"	      00430a08    push eax"
"	      00430a09    mov eax,ds:[597E60h]"
"	      00430a0e    mov eax,[eax]"
"	      00430a10    call dword ptr [eax+0Ch]"
"	      00430a13    mov [ebp-18h],eax"
);
// LINE 1558:
	asm( 
"	      00430a16    mov eax,[ebp-40h]"
"	      00430a19    mov eax,[eax+72h]"
"	      00430a1c    push eax"
"	      00430a1d    call 0048EF6Fh"
"	      00430a22    add esp,4"
);
// LINE 1559:
	asm( 
"	      00430a25    cmp dword ptr [ebp-18h],0"
"	      00430a29    je near ptr 00430A4Eh"
);
// LINE 1560:
	asm( 
"	      00430a2f    mov eax,[ebp-18h]"
"	      00430a32    mov [ebp-1Ch],eax"
"	      00430a35    jmp near ptr 00430A3Ah"
"	      00430a3a    push 598288h"
"	      00430a3f    lea ecx,[ebp-1Ch]"
"	      00430a42    call 0042DC69h"
);
// LINE 1561:
	asm( 
"	      00430a47    xor eax,eax"
"	      00430a49    jmp near ptr 00430A6Dh"
);
// LINE 1564:
	asm( 
"	      00430a4e    mov eax,[ebp-0Ch]"
"	      00430a51    mov ecx,[ebp-40h]"
"	      00430a54    mov [ecx+3Ch],eax"
);
// LINE 1565:
	asm( 
"	      00430a57    mov eax,[ebp-40h]"
"	      00430a5a    mov eax,[eax+3Ch]"
"	      00430a5d    add ds:[597E5Ch],eax"
);
// LINE 1568:
	asm( 
"	      00430a63    mov eax,1"
"	      00430a68    jmp near ptr 00430A6Dh"
);
// LINE 1570:
	asm( 
"	      00430a6d    pop edi"
"	      00430a6e    pop esi"
"	      00430a6f    pop ebx"
"	      00430a70    leave"
"	      00430a71    ret 4"
);
}

// FUNCTION: COPTER_D 0x00430a74
long DigitalSound::PlayStream() {
// LINE 1582:
	asm( 
"	      00430a74    push ebp"
"	      00430a75    mov ebp,esp"
"	      00430a77    sub esp,4Ch"
"	      00430a7a    push ebx"
"	      00430a7b    push esi"
"	      00430a7c    push edi"
"	      00430a7d    mov [ebp-4Ch],ecx"
);
// LINE 1589:
	asm( 
"	      00430a80    mov dword ptr [ebp-8],0"
);
// LINE 1593:
	asm( 
"	      00430a87    mov eax,[ebp-4Ch]"
"	      00430a8a    cmp dword ptr [eax+8],1"
"	      00430a8e    jne near ptr 00430A9Bh"
);
// LINE 1594:
	asm( 
"	      00430a94    mov dword ptr [ebp-8],1"
);
// LINE 1598:
	asm( 
"	      00430a9b    mov eax,[ebp-8]"
"	      00430a9e    push eax"
"	      00430a9f    mov eax,[ebp-4Ch]"
"	      00430aa2    mov eax,[eax]"
"	      00430aa4    mov ecx,[ebp-4Ch]"
"	      00430aa7    call dword ptr [eax+78h]"
"	      00430aaa    test eax,eax"
"	      00430aac    jne near ptr 00430AB9h"
);
// LINE 1599:
	asm( 
"	      00430ab2    xor eax,eax"
"	      00430ab4    jmp near ptr 00430FB1h"
);
// LINE 1606:
	asm( 
"	      00430ab9    mov eax,[ebp-4Ch]"
"	      00430abc    cmp dword ptr [eax+14h],0"
"	      00430ac0    je near ptr 00430AE1h"
"	      00430ac6    mov eax,[ebp-4Ch]"
"	      00430ac9    mov eax,[eax+14h]"
"	      00430acc    mov [ebp-2Ch],eax"
"	      00430acf    mov eax,[ebp-2Ch]"
"	      00430ad2    mov [ebp-34h],eax"
"	      00430ad5    mov eax,[ebp-34h]"
"	      00430ad8    push eax"
"	      00430ad9    call 0056A740h"
"	      00430ade    add esp,4"
"	      00430ae1    jmp near ptr 00430AE6h"
"	      00430ae6    mov eax,[ebp-4Ch]"
"	      00430ae9    mov eax,[eax+18h]"
"	      00430aec    mov eax,[eax+4]"
"	      00430aef    inc eax"
"	      00430af0    push eax"
"	      00430af1    call 0056A600h"
"	      00430af6    add esp,4"
"	      00430af9    mov ecx,[ebp-4Ch]"
"	      00430afc    mov [ecx+14h],eax"
"	      00430aff    jmp near ptr 00430B04h"
"	      00430b04    mov eax,[ebp-4Ch]"
"	      00430b07    mov eax,[eax+18h]"
"	      00430b0a    cmp dword ptr [eax+4],0"
"	      00430b0e    je near ptr 00430B7Dh"
"	      00430b14    jmp near ptr 00430B19h"
"	      00430b19    jmp near ptr 00430B1Eh"
"	      00430b1e    mov eax,[ebp-4Ch]"
"	      00430b21    mov eax,[eax+18h]"
"	      00430b24    cmp dword ptr [eax+4],0"
"	      00430b28    je near ptr 00430B43h"
"	      00430b2e    mov eax,[ebp-4Ch]"
"	      00430b31    mov eax,[eax+18h]"
"	      00430b34    mov eax,[eax]"
"	      00430b36    mov [ebp-40h],eax"
"	      00430b39    jmp near ptr 00430B4Fh"
"	      00430b3e    jmp near ptr 00430B4Fh"
"	      00430b43    mov dword ptr [ebp-40h],0"
"	      00430b4a    jmp near ptr 00430B4Fh"
"	      00430b4f    mov eax,[ebp-4Ch]"
"	      00430b52    mov eax,[eax+18h]"
"	      00430b55    mov eax,[eax+4]"
"	      00430b58    mov [ebp-44h],eax"
"	      00430b5b    mov eax,[ebp-4Ch]"
"	      00430b5e    mov eax,[eax+14h]"
"	      00430b61    mov [ebp-48h],eax"
"	      00430b64    mov eax,[ebp-44h]"
"	      00430b67    push eax"
"	      00430b68    mov eax,[ebp-40h]"
"	      00430b6b    push eax"
"	      00430b6c    mov eax,[ebp-48h]"
"	      00430b6f    push eax"
"	      00430b70    call 0056A800h"
"	      00430b75    add esp,0Ch"
"	      00430b78    jmp near ptr 00430B7Dh"
"	      00430b7d    jmp near ptr 00430B82h"
"	      00430b82    mov byte ptr [ebp-30h],0"
"	      00430b86    jmp near ptr 00430B8Bh"
"	      00430b8b    lea eax,[ebp-30h]"
"	      00430b8e    mov [ebp-38h],eax"
"	      00430b91    jmp near ptr 00430B96h"
"	      00430b96    mov eax,[ebp-4Ch]"
"	      00430b99    mov eax,[eax+18h]"
"	      00430b9c    mov eax,[eax+4]"
"	      00430b9f    mov ecx,[ebp-4Ch]"
"	      00430ba2    add eax,[ecx+14h]"
"	      00430ba5    mov [ebp-3Ch],eax"
"	      00430ba8    mov eax,[ebp-38h]"
"	      00430bab    mov al,[eax]"
"	      00430bad    mov ecx,[ebp-3Ch]"
"	      00430bb0    mov [ecx],al"
"	      00430bb2    jmp near ptr 00430BB7h"
"	      00430bb7    jmp near ptr 00430BBCh"
"	      00430bbc    mov eax,[ebp-4Ch]"
"	      00430bbf    mov eax,[eax+72h]"
"	      00430bc2    add eax,18h"
"	      00430bc5    push eax"
"	      00430bc6    mov eax,[ebp-4Ch]"
"	      00430bc9    add eax,40h"
"	      00430bcc    push eax"
"	      00430bcd    mov eax,[ebp-4Ch]"
"	      00430bd0    mov eax,[eax+72h]"
"	      00430bd3    push eax"
"	      00430bd4    mov eax,[ebp-4Ch]"
"	      00430bd7    mov eax,[eax+14h]"
"	      00430bda    push eax"
"	      00430bdb    call 0048EBB0h"
"	      00430be0    add esp,10h"
"	      00430be3    mov [ebp-4],eax"
);
// LINE 1607:
	asm( 
"	      00430be6    cmp dword ptr [ebp-4],0"
"	      00430bea    je near ptr 00430BF7h"
);
// LINE 1608:
	asm( 
"	      00430bf0    xor eax,eax"
"	      00430bf2    jmp near ptr 00430FB1h"
);
// LINE 1612:
	asm( 
"	      00430bf7    mov eax,[ebp-4Ch]"
"	      00430bfa    mov eax,[eax+72h]"
"	      00430bfd    add eax,18h"
"	      00430c00    push eax"
"	      00430c01    mov eax,[ebp-4Ch]"
"	      00430c04    mov eax,[eax+72h]"
"	      00430c07    add eax,4"
"	      00430c0a    push eax"
"	      00430c0b    mov eax,[ebp-4Ch]"
"	      00430c0e    mov eax,[eax+72h]"
"	      00430c11    push eax"
"	      00430c12    call 0048EDB9h"
"	      00430c17    add esp,0Ch"
"	      00430c1a    mov [ebp-4],eax"
);
// LINE 1613:
	asm( 
"	      00430c1d    cmp dword ptr [ebp-4],0"
"	      00430c21    je near ptr 00430C3Dh"
);
// LINE 1615:
	asm( 
"	      00430c27    mov eax,[ebp-4Ch]"
"	      00430c2a    mov eax,[eax+72h]"
"	      00430c2d    push eax"
"	      00430c2e    call 0048EF6Fh"
"	      00430c33    add esp,4"
);
// LINE 1616:
	asm( 
"	      00430c36    xor eax,eax"
"	      00430c38    jmp near ptr 00430FB1h"
);
// LINE 1621:
	asm( 
"	      00430c3d    mov eax,[ebp-4Ch]"
"	      00430c40    mov eax,[eax+72h]"
"	      00430c43    mov dword ptr [eax+44h],0"
);
// LINE 1622:
	asm( 
"	      00430c4a    mov eax,[ebp-4Ch]"
"	      00430c4d    mov eax,[eax+72h]"
"	      00430c50    mov dword ptr [eax+48h],0"
);
// LINE 1627:
	asm( 
"	      00430c57    push 0"
"	      00430c59    lea eax,[ebp-1Ch]"
"	      00430c5c    push eax"
"	      00430c5d    lea eax,[ebp-14h]"
"	      00430c60    push eax"
"	      00430c61    lea eax,[ebp-10h]"
"	      00430c64    push eax"
"	      00430c65    lea eax,[ebp-18h]"
"	      00430c68    push eax"
"	      00430c69    mov eax,[ebp-4Ch]"
"	      00430c6c    mov eax,[eax+72h]"
"	      00430c6f    mov eax,[eax+2Ch]"
"	      00430c72    push eax"
"	      00430c73    push 0"
"	      00430c75    mov eax,[ebp-4Ch]"
"	      00430c78    mov eax,[eax+52h]"
"	      00430c7b    push eax"
"	      00430c7c    mov eax,[ebp-4Ch]"
"	      00430c7f    mov eax,[eax+52h]"
"	      00430c82    mov eax,[eax]"
"	      00430c84    call dword ptr [eax+2Ch]"
"	      00430c87    mov [ebp-20h],eax"
);
// LINE 1628:
	asm( 
"	      00430c8a    cmp dword ptr [ebp-20h],0"
"	      00430c8e    je near ptr 00430CC2h"
);
// LINE 1629:
	asm( 
"	      00430c94    mov eax,[ebp-20h]"
"	      00430c97    mov [ebp-28h],eax"
"	      00430c9a    jmp near ptr 00430C9Fh"
"	      00430c9f    push 5982D4h"
"	      00430ca4    lea ecx,[ebp-28h]"
"	      00430ca7    call 0042DC69h"
);
// LINE 1630:
	asm( 
"	      00430cac    mov eax,[ebp-4Ch]"
"	      00430caf    mov eax,[eax+72h]"
"	      00430cb2    push eax"
"	      00430cb3    call 0048EF6Fh"
"	      00430cb8    add esp,4"
);
// LINE 1631:
	asm( 
"	      00430cbb    xor eax,eax"
"	      00430cbd    jmp near ptr 00430FB1h"
);
// LINE 1634:
	asm( 
"	      00430cc2    cmp dword ptr [ebp-10h],0"
"	      00430cc6    je near ptr 00430E11h"
);
// LINE 1636:
	asm( 
"	      00430ccc    lea eax,[ebp-0Ch]"
"	      00430ccf    push eax"
"	      00430cd0    mov eax,[ebp-4Ch]"
"	      00430cd3    mov eax,[eax+72h]"
"	      00430cd6    add eax,4"
"	      00430cd9    push eax"
"	      00430cda    mov eax,[ebp-18h]"
"	      00430cdd    push eax"
"	      00430cde    mov eax,[ebp-10h]"
"	      00430ce1    push eax"
"	      00430ce2    mov eax,[ebp-4Ch]"
"	      00430ce5    mov eax,[eax+72h]"
"	      00430ce8    mov eax,[eax]"
"	      00430cea    push eax"
"	      00430ceb    call 0048EE25h"
"	      00430cf0    add esp,14h"
"	      00430cf3    mov [ebp-4],eax"
);
// LINE 1637:
	asm( 
"	      00430cf6    cmp dword ptr [ebp-4],0"
"	      00430cfa    je near ptr 00430D36h"
);
// LINE 1638:
	asm( 
"	      00430d00    push 0"
"	      00430d02    mov eax,[ebp-14h]"
"	      00430d05    push eax"
"	      00430d06    mov eax,[ebp-10h]"
"	      00430d09    push eax"
"	      00430d0a    mov eax,[ebp-18h]"
"	      00430d0d    push eax"
"	      00430d0e    mov eax,[ebp-4Ch]"
"	      00430d11    mov eax,[eax+52h]"
"	      00430d14    push eax"
"	      00430d15    mov eax,[ebp-4Ch]"
"	      00430d18    mov eax,[eax+52h]"
"	      00430d1b    mov eax,[eax]"
"	      00430d1d    call dword ptr [eax+4Ch]"
);
// LINE 1639:
	asm( 
"	      00430d20    mov eax,[ebp-4Ch]"
"	      00430d23    mov eax,[eax+72h]"
"	      00430d26    push eax"
"	      00430d27    call 0048EF6Fh"
"	      00430d2c    add esp,4"
);
// LINE 1640:
	asm( 
"	      00430d2f    xor eax,eax"
"	      00430d31    jmp near ptr 00430FB1h"
);
// LINE 1642:
	asm( 
"	      00430d36    mov eax,[ebp-10h]"
"	      00430d39    cmp [ebp-0Ch],eax"
"	      00430d3c    jae near ptr 00430E11h"
);
// LINE 1646:
	asm( 
"	      00430d42    mov eax,[ebp-4Ch]"
"	      00430d45    cmp dword ptr [eax+1Ch],0"
"	      00430d49    je near ptr 00430DC0h"
);
// LINE 1647:
	asm( 
"	      00430d4f    mov eax,[ebp-18h]"
"	      00430d52    mov [ebp-24h],eax"
);
// LINE 1655:
	asm( 
"	      00430d55    mov eax,[ebp-0Ch]"
"	      00430d58    add [ebp-24h],eax"
);
// LINE 1656:
	asm( 
"	      00430d5b    xor eax,eax"
"	      00430d5d    sub eax,[ebp-0Ch]"
"	      00430d60    neg eax"
"	      00430d62    sub [ebp-10h],eax"
);
// LINE 1659:
	asm( 
"	      00430d65    mov eax,[ebp-4Ch]"
"	      00430d68    mov eax,[eax+72h]"
"	      00430d6b    add eax,18h"
"	      00430d6e    push eax"
"	      00430d6f    mov eax,[ebp-4Ch]"
"	      00430d72    mov eax,[eax+72h]"
"	      00430d75    add eax,4"
"	      00430d78    push eax"
"	      00430d79    mov eax,[ebp-4Ch]"
"	      00430d7c    mov eax,[eax+72h]"
"	      00430d7f    push eax"
"	      00430d80    call 0048EDB9h"
"	      00430d85    add esp,0Ch"
);
// LINE 1661:
	asm( 
"	      00430d88    lea eax,[ebp-0Ch]"
"	      00430d8b    push eax"
"	      00430d8c    mov eax,[ebp-4Ch]"
"	      00430d8f    mov eax,[eax+72h]"
"	      00430d92    add eax,4"
"	      00430d95    push eax"
"	      00430d96    mov eax,[ebp-24h]"
"	      00430d99    push eax"
"	      00430d9a    mov eax,[ebp-10h]"
"	      00430d9d    push eax"
"	      00430d9e    mov eax,[ebp-4Ch]"
"	      00430da1    mov eax,[eax+72h]"
"	      00430da4    mov eax,[eax]"
"	      00430da6    push eax"
"	      00430da7    call 0048EE25h"
"	      00430dac    add esp,14h"
);
// LINE 1662:
	asm( 
"	      00430daf    mov eax,[ebp-10h]"
"	      00430db2    cmp [ebp-0Ch],eax"
"	      00430db5    jb near ptr 00430D55h"
);
// LINE 1664:
	asm( 
"	      00430dbb    jmp near ptr 00430E11h"
);
// LINE 1667:
	asm( 
"	      00430dc0    mov eax,[ebp-4Ch]"
"	      00430dc3    mov eax,[eax+72h]"
"	      00430dc6    mov dword ptr [eax+44h],1"
);
// LINE 1669:
	asm( 
"	      00430dcd    mov eax,[ebp-4Ch]"
"	      00430dd0    mov ecx,[eax+72h]"
"	      00430dd3    mov eax,[ebp-0Ch]"
"	      00430dd6    sub edx,edx"
"	      00430dd8    div dword ptr [ecx+30h]"
"	      00430ddb    mov ecx,[ebp-4Ch]"
"	      00430dde    mov ecx,[ecx+72h]"
"	      00430de1    mov [ecx+48h],eax"
);
// LINE 1672:
	asm( 
"	      00430de4    mov eax,[ebp-10h]"
"	      00430de7    sub eax,[ebp-0Ch]"
"	      00430dea    push eax"
"	      00430deb    mov eax,[ebp-4Ch]"
"	      00430dee    xor ecx,ecx"
"	      00430df0    mov cx,[eax+4Eh]"
"	      00430df4    sub ecx,8"
"	      00430df7    cmp ecx,1"
"	      00430dfa    sbb eax,eax"
"	      00430dfc    and eax,80h"
"	      00430e01    push eax"
"	      00430e02    mov eax,[ebp-0Ch]"
"	      00430e05    add eax,[ebp-18h]"
"	      00430e08    push eax"
"	      00430e09    call 0056EB90h"
"	      00430e0e    add esp,0Ch"
);
// LINE 1677:
	asm( 
"	      00430e11    push 0"
"	      00430e13    mov eax,[ebp-14h]"
"	      00430e16    push eax"
"	      00430e17    mov eax,[ebp-10h]"
"	      00430e1a    push eax"
"	      00430e1b    mov eax,[ebp-18h]"
"	      00430e1e    push eax"
"	      00430e1f    mov eax,[ebp-4Ch]"
"	      00430e22    mov eax,[eax+52h]"
"	      00430e25    push eax"
"	      00430e26    mov eax,[ebp-4Ch]"
"	      00430e29    mov eax,[eax+52h]"
"	      00430e2c    mov eax,[eax]"
"	      00430e2e    call dword ptr [eax+4Ch]"
"	      00430e31    mov [ebp-20h],eax"
);
// LINE 1678:
	asm( 
"	      00430e34    cmp dword ptr [ebp-20h],0"
"	      00430e38    je near ptr 00430E54h"
);
// LINE 1679:
	asm( 
"	      00430e3e    mov eax,[ebp-4Ch]"
"	      00430e41    mov eax,[eax+72h]"
"	      00430e44    push eax"
"	      00430e45    call 0048EF6Fh"
"	      00430e4a    add esp,4"
);
// LINE 1680:
	asm( 
"	      00430e4d    xor eax,eax"
"	      00430e4f    jmp near ptr 00430FB1h"
);
// LINE 1685:
	asm( 
"	      00430e54    mov eax,[ebp-4Ch]"
"	      00430e57    mov eax,[eax+72h]"
"	      00430e5a    mov dword ptr [eax+3Ch],0"
"	      00430e61    mov eax,[ebp-4Ch]"
"	      00430e64    mov eax,[eax+72h]"
"	      00430e67    mov eax,[eax+3Ch]"
"	      00430e6a    mov ecx,[ebp-4Ch]"
"	      00430e6d    mov ecx,[ecx+72h]"
"	      00430e70    mov [ecx+38h],eax"
"	      00430e73    mov eax,[ebp-4Ch]"
"	      00430e76    mov eax,[eax+72h]"
"	      00430e79    mov eax,[eax+38h]"
"	      00430e7c    mov ecx,[ebp-4Ch]"
"	      00430e7f    mov ecx,[ecx+72h]"
"	      00430e82    mov [ecx+34h],eax"
);
// LINE 1686:
	asm( 
"	      00430e85    mov eax,[ebp-4Ch]"
"	      00430e88    mov eax,[eax+72h]"
"	      00430e8b    mov dword ptr [eax+40h],0"
);
// LINE 1690:
	asm( 
"	      00430e92    mov eax,[ebp-4Ch]"
"	      00430e95    mov eax,[eax+72h]"
"	      00430e98    mov dword ptr [eax+54h],1"
);
// LINE 1693:
	asm( 
"	      00430e9f    push 0"
"	      00430ea1    mov eax,[ebp-4Ch]"
"	      00430ea4    mov eax,[eax+52h]"
"	      00430ea7    push eax"
"	      00430ea8    mov eax,[ebp-4Ch]"
"	      00430eab    mov eax,[eax+52h]"
"	      00430eae    mov eax,[eax]"
"	      00430eb0    call dword ptr [eax+34h]"
"	      00430eb3    mov [ebp-20h],eax"
);
// LINE 1694:
	asm( 
"	      00430eb6    cmp dword ptr [ebp-20h],0"
"	      00430eba    je near ptr 00430ED6h"
);
// LINE 1695:
	asm( 
"	      00430ec0    mov eax,[ebp-4Ch]"
"	      00430ec3    mov eax,[eax+72h]"
"	      00430ec6    push eax"
"	      00430ec7    call 0048EF6Fh"
"	      00430ecc    add esp,4"
);
// LINE 1696:
	asm( 
"	      00430ecf    xor eax,eax"
"	      00430ed1    jmp near ptr 00430FB1h"
);
// LINE 1699:
	asm( 
"	      00430ed6    mov eax,[ebp-4Ch]"
"	      00430ed9    cmp dword ptr [eax+24h],2710h"
"	      00430ee0    je near ptr 00430EF8h"
);
// LINE 1700:
	asm( 
"	      00430ee6    mov eax,[ebp-4Ch]"
"	      00430ee9    mov eax,[eax+24h]"
"	      00430eec    push eax"
"	      00430eed    mov eax,[ebp-4Ch]"
"	      00430ef0    mov eax,[eax]"
"	      00430ef2    mov ecx,[ebp-4Ch]"
"	      00430ef5    call dword ptr [eax+24h]"
);
// LINE 1703:
	asm( 
"	      00430ef8    push 1"
"	      00430efa    push 0"
"	      00430efc    push 0"
"	      00430efe    mov eax,[ebp-4Ch]"
"	      00430f01    mov eax,[eax+52h]"
"	      00430f04    push eax"
"	      00430f05    mov eax,[ebp-4Ch]"
"	      00430f08    mov eax,[eax+52h]"
"	      00430f0b    mov eax,[eax]"
"	      00430f0d    call dword ptr [eax+30h]"
);
// LINE 1706:
	asm( 
"	      00430f10    push 32h"
"	      00430f12    call dword ptr ds:[6C3918h]"
"	      00430f18    test eax,eax"
"	      00430f1a    je near ptr 00430F6Ch"
);
// LINE 1708:
	asm( 
"	      00430f20    mov eax,[ebp-4Ch]"
"	      00430f23    mov eax,[eax+72h]"
"	      00430f26    push eax"
"	      00430f27    call 0048EF6Fh"
"	      00430f2c    add esp,4"
);
// LINE 1709:
	asm( 
"	      00430f2f    mov eax,[ebp-4Ch]"
"	      00430f32    mov eax,[eax+52h]"
"	      00430f35    push eax"
"	      00430f36    mov eax,[ebp-4Ch]"
"	      00430f39    mov eax,[eax+52h]"
"	      00430f3c    mov eax,[eax]"
"	      00430f3e    call dword ptr [eax+48h]"
);
// LINE 1711:
	asm( 
"	      00430f41    mov eax,[ebp-4Ch]"
"	      00430f44    mov eax,[eax+72h]"
"	      00430f47    mov dword ptr [eax+50h],0"
"	      00430f4e    mov eax,[ebp-4Ch]"
"	      00430f51    mov eax,[eax+72h]"
"	      00430f54    mov eax,[eax+50h]"
"	      00430f57    mov ecx,[ebp-4Ch]"
"	      00430f5a    mov ecx,[ecx+72h]"
"	      00430f5d    mov [ecx+54h],eax"
);
// LINE 1712:
	asm( 
"	      00430f60    xor eax,eax"
"	      00430f62    jmp near ptr 00430FB1h"
);
// LINE 1714:
	asm( 
"	      00430f67    jmp near ptr 00430FA7h"
);
// LINE 1720:
	asm( 
"	      00430f6c    push 1"
"	      00430f6e    mov eax,[ebp-4Ch]"
"	      00430f71    push eax"
"	      00430f72    push 4310A5h"
"	      00430f77    push 0Ah"
"	      00430f79    push 32h"
"	      00430f7b    call dword ptr ds:[6C3910h]"
"	      00430f81    mov ecx,[ebp-4Ch]"
"	      00430f84    mov ecx,[ecx+72h]"
"	      00430f87    mov [ecx+4Ch],eax"
);
// LINE 1721:
	asm( 
"	      00430f8a    mov eax,[ebp-4Ch]"
"	      00430f8d    mov eax,[eax+72h]"
"	      00430f90    cmp dword ptr [eax+4Ch],0"
"	      00430f94    je near ptr 00430FA7h"
);
// LINE 1722:
	asm( 
"	      00430f9a    mov eax,[ebp-4Ch]"
"	      00430f9d    mov eax,[eax+72h]"
"	      00430fa0    mov dword ptr [eax+50h],1"
);
// LINE 1728:
	asm( 
"	      00430fa7    mov eax,1"
"	      00430fac    jmp near ptr 00430FB1h"
);
// LINE 1729:
	asm( 
"	      00430fb1    pop edi"
"	      00430fb2    pop esi"
"	      00430fb3    pop ebx"
"	      00430fb4    leave"
"	      00430fb5    ret"
);
}

// FUNCTION: COPTER_D 0x00430fb6
long DigitalSound::StopStream() {
// LINE 1743:
	asm( 
"	      00430fb6    push ebp"
"	      00430fb7    mov ebp,esp"
"	      00430fb9    sub esp,8"
"	      00430fbc    push ebx"
"	      00430fbd    push esi"
"	      00430fbe    push edi"
"	      00430fbf    mov [ebp-8],ecx"
);
// LINE 1750:
	asm( 
"	      00430fc2    mov eax,[ebp-8]"
"	      00430fc5    cmp dword ptr [eax+52h],0"
"	      00430fc9    jne near ptr 00430FD9h"
);
// LINE 1751:
	asm( 
"	      00430fcf    mov eax,1"
"	      00430fd4    jmp near ptr 004310A0h"
);
// LINE 1753:
	asm( 
"	      00430fd9    mov eax,[ebp-8]"
"	      00430fdc    cmp dword ptr [eax+72h],0"
"	      00430fe0    je near ptr 00431096h"
);
// LINE 1754:
	asm( 
"	      00430fe6    mov eax,[ebp-8]"
"	      00430fe9    mov eax,[eax+72h]"
"	      00430fec    cmp dword ptr [eax+50h],0"
"	      00430ff0    je near ptr 0043104Bh"
);
// LINE 1755:
	asm( 
"	      00430ff6    mov eax,[ebp-8]"
"	      00430ff9    mov eax,[eax+72h]"
"	      00430ffc    mov dword ptr [eax+50h],0"
);
// LINE 1757:
	asm( 
"	      00431003    mov eax,[ebp-8]"
"	      00431006    mov eax,[eax+72h]"
"	      00431009    mov eax,[eax+4Ch]"
"	      0043100c    push eax"
"	      0043100d    call dword ptr ds:[6C390Ch]"
"	      00431013    mov [ebp-4],eax"
);
// LINE 1758:
	asm( 
"	      00431016    cmp dword ptr [ebp-4],0"
"	      0043101a    je near ptr 0043102Bh"
);
// LINE 1759:
	asm( 
"	      00431020    push 598308h"
"	      00431025    call dword ptr ds:[6C378Ch]"
);
// LINE 1760:
	asm( 
"	      0043102b    push 32h"
"	      0043102d    call dword ptr ds:[6C3914h]"
"	      00431033    mov [ebp-4],eax"
);
// LINE 1761:
	asm( 
"	      00431036    cmp dword ptr [ebp-4],0"
"	      0043103a    je near ptr 0043104Bh"
);
// LINE 1762:
	asm( 
"	      00431040    push 59832Ch"
"	      00431045    call dword ptr ds:[6C378Ch]"
);
// LINE 1770:
	asm( 
"	      0043104b    mov eax,[ebp-8]"
"	      0043104e    mov eax,[eax+72h]"
"	      00431051    mov dword ptr [eax+40h],1"
);
// LINE 1772:
	asm( 
"	      00431058    mov eax,[ebp-8]"
"	      0043105b    mov eax,[eax+72h]"
"	      0043105e    cmp dword ptr [eax+54h],0"
"	      00431062    je near ptr 00431087h"
);
// LINE 1773:
	asm( 
"	      00431068    mov eax,[ebp-8]"
"	      0043106b    mov eax,[eax+72h]"
"	      0043106e    mov dword ptr [eax+54h],0"
);
// LINE 1774:
	asm( 
"	      00431075    mov eax,[ebp-8]"
"	      00431078    mov eax,[eax+52h]"
"	      0043107b    push eax"
"	      0043107c    mov eax,[ebp-8]"
"	      0043107f    mov eax,[eax+52h]"
"	      00431082    mov eax,[eax]"
"	      00431084    call dword ptr [eax+48h]"
);
// LINE 1777:
	asm( 
"	      00431087    mov eax,[ebp-8]"
"	      0043108a    mov eax,[eax+72h]"
"	      0043108d    push eax"
"	      0043108e    call 0048EF6Fh"
"	      00431093    add esp,4"
);
// LINE 1780:
	asm( 
"	      00431096    mov eax,1"
"	      0043109b    jmp near ptr 004310A0h"
);
// LINE 1781:
	asm( 
"	      004310a0    pop edi"
"	      004310a1    pop esi"
"	      004310a2    pop ebx"
"	      004310a3    leave"
"	      004310a4    ret"
);
}

// FUNCTION: COPTER_D 0x004310a5
void StreamingBufferTimerCallback(uint32_t __formal, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 1797:
	asm( 
"	      004310a5    push ebp"
"	      004310a6    mov ebp,esp"
"	      004310a8    sub esp,4"
"	      004310ab    push ebx"
"	      004310ac    push esi"
"	      004310ad    push edi"
);
// LINE 1798:
	asm( 
"	      004310ae    mov eax,[ebp+10h]"
"	      004310b1    mov [ebp-4],eax"
);
// LINE 1799:
	asm( 
"	      004310b4    mov eax,[ebp-4]"
"	      004310b7    mov eax,[eax]"
"	      004310b9    mov ecx,[ebp-4]"
"	      004310bc    call dword ptr [eax+7Ch]"
);
// LINE 1800:
	asm( 
"	      004310bf    jmp near ptr 004310C4h"
"	      004310c4    pop edi"
"	      004310c5    pop esi"
"	      004310c6    pop ebx"
"	      004310c7    leave"
"	      004310c8    ret 14h"
);
}

// FUNCTION: COPTER_D 0x004310cb
void DigitalSound::ProcessStreamingBufferTimerCallback() {
// LINE 1806:
	asm( 
"	      004310cb    push ebp"
"	      004310cc    mov ebp,esp"
"	      004310ce    sub esp,28h"
"	      004310d1    push ebx"
"	      004310d2    push esi"
"	      004310d3    push edi"
"	      004310d4    mov [ebp-28h],ecx"
);
// LINE 1813:
	asm( 
"	      004310d7    mov eax,[ebp-28h]"
"	      004310da    mov eax,[eax+72h]"
"	      004310dd    cmp dword ptr [eax+58h],0"
"	      004310e1    je near ptr 004310ECh"
);
// LINE 1814:
	asm( 
"	      004310e7    jmp near ptr 0043181Ch"
);
// LINE 1815:
	asm( 
"	      004310ec    mov eax,[ebp-28h]"
"	      004310ef    mov eax,[eax+72h]"
"	      004310f2    mov dword ptr [eax+58h],1"
);
// LINE 1818:
	asm( 
"	      004310f9    lea eax,[ebp-0Ch]"
"	      004310fc    push eax"
"	      004310fd    lea eax,[ebp-1Ch]"
"	      00431100    push eax"
"	      00431101    mov eax,[ebp-28h]"
"	      00431104    mov eax,[eax+52h]"
"	      00431107    push eax"
"	      00431108    mov eax,[ebp-28h]"
"	      0043110b    mov eax,[eax+52h]"
"	      0043110e    mov eax,[eax]"
"	      00431110    call dword ptr [eax+10h]"
);
// LINE 1824:
	asm( 
"	      00431113    mov eax,[ebp-28h]"
"	      00431116    mov eax,[eax+72h]"
"	      00431119    mov ecx,[ebp-1Ch]"
"	      0043111c    cmp [eax+34h],ecx"
"	      0043111f    jae near ptr 0043114Ah"
"	      00431125    mov eax,[ebp-28h]"
"	      00431128    mov eax,[eax+72h]"
"	      0043112b    mov eax,[eax+30h]"
"	      0043112e    mov ecx,[ebp-28h]"
"	      00431131    mov ecx,[ecx+72h]"
"	      00431134    add eax,[ecx+34h]"
"	      00431137    cmp eax,[ebp-1Ch]"
"	      0043113a    jbe near ptr 0043114Ah"
);
// LINE 1826:
	asm( 
"	      00431140    jmp near ptr 00431817h"
"	      00431145    jmp near ptr 004317E7h"
);
// LINE 1830:
	asm( 
"	      0043114a    mov eax,[ebp-28h]"
"	      0043114d    mov eax,[eax+72h]"
"	      00431150    cmp dword ptr [eax+44h],0"
"	      00431154    je near ptr 0043119Ch"
"	      0043115a    mov eax,[ebp-28h]"
"	      0043115d    mov eax,[eax+72h]"
"	      00431160    cmp dword ptr [eax+48h],0"
"	      00431164    jne near ptr 0043119Ch"
);
// LINE 1831:
	asm( 
"	      0043116a    mov eax,[ebp-28h]"
"	      0043116d    mov eax,[eax+72h]"
"	      00431170    cmp dword ptr [eax+40h],0"
"	      00431174    jne near ptr 00431192h"
);
// LINE 1832:
	asm( 
"	      0043117a    mov eax,[ebp-28h]"
"	      0043117d    mov eax,[eax+72h]"
"	      00431180    mov dword ptr [eax+40h],1"
);
// LINE 1833:
	asm( 
"	      00431187    mov eax,[ebp-28h]"
"	      0043118a    mov eax,[eax]"
"	      0043118c    mov ecx,[ebp-28h]"
"	      0043118f    call dword ptr [eax+48h]"
);
// LINE 1835:
	asm( 
"	      00431192    jmp near ptr 00431812h"
"	      00431197    jmp near ptr 004317E7h"
);
// LINE 1841:
	asm( 
"	      0043119c    mov eax,[ebp-28h]"
"	      0043119f    mov eax,[eax+72h]"
"	      004311a2    mov ecx,[ebp-1Ch]"
"	      004311a5    cmp [eax+38h],ecx"
"	      004311a8    jbe near ptr 004311D1h"
);
// LINE 1843:
	asm( 
"	      004311ae    mov eax,[ebp-28h]"
"	      004311b1    mov eax,[eax+72h]"
"	      004311b4    mov eax,[eax+2Ch]"
"	      004311b7    add eax,[ebp-1Ch]"
"	      004311ba    mov ecx,[ebp-28h]"
"	      004311bd    mov ecx,[ecx+72h]"
"	      004311c0    sub eax,[ecx+38h]"
"	      004311c3    mov ecx,[ebp-28h]"
"	      004311c6    mov ecx,[ecx+72h]"
"	      004311c9    add [ecx+3Ch],eax"
);
// LINE 1845:
	asm( 
"	      004311cc    jmp near ptr 004311E6h"
);
// LINE 1847:
	asm( 
"	      004311d1    mov eax,[ebp-1Ch]"
"	      004311d4    mov ecx,[ebp-28h]"
"	      004311d7    mov ecx,[ecx+72h]"
"	      004311da    sub eax,[ecx+38h]"
"	      004311dd    mov ecx,[ebp-28h]"
"	      004311e0    mov ecx,[ecx+72h]"
"	      004311e3    add [ecx+3Ch],eax"
);
// LINE 1849:
	asm( 
"	      004311e6    mov eax,[ebp-1Ch]"
"	      004311e9    mov ecx,[ebp-28h]"
"	      004311ec    mov ecx,[ecx+72h]"
"	      004311ef    mov [ecx+38h],eax"
);
// LINE 1854:
	asm( 
"	      004311f2    mov eax,[ebp-28h]"
"	      004311f5    mov eax,[eax+72h]"
"	      004311f8    cmp dword ptr [eax+44h],0"
"	      004311fc    je near ptr 00431308h"
"	      00431202    mov eax,[ebp-28h]"
"	      00431205    mov eax,[eax+72h]"
"	      00431208    cmp dword ptr [eax+48h],0"
"	      0043120c    je near ptr 00431308h"
);
// LINE 1855:
	asm( 
"	      00431212    mov eax,[ebp-28h]"
"	      00431215    mov eax,[eax+72h]"
"	      00431218    dec dword ptr [eax+48h]"
);
// LINE 1857:
	asm( 
"	      0043121b    mov eax,[ebp-28h]"
"	      0043121e    mov eax,[eax+72h]"
"	      00431221    cmp dword ptr [eax+48h],1"
"	      00431225    jle near ptr 004312FEh"
);
// LINE 1861:
	asm( 
"	      0043122b    push 0"
"	      0043122d    lea eax,[ebp-24h]"
"	      00431230    push eax"
"	      00431231    lea eax,[ebp-18h]"
"	      00431234    push eax"
"	      00431235    lea eax,[ebp-14h]"
"	      00431238    push eax"
"	      00431239    lea eax,[ebp-20h]"
"	      0043123c    push eax"
"	      0043123d    mov eax,[ebp-28h]"
"	      00431240    mov eax,[eax+72h]"
"	      00431243    mov eax,[eax+30h]"
"	      00431246    push eax"
"	      00431247    mov eax,[ebp-28h]"
"	      0043124a    mov eax,[eax+72h]"
"	      0043124d    mov eax,[eax+34h]"
"	      00431250    push eax"
"	      00431251    mov eax,[ebp-28h]"
"	      00431254    mov eax,[eax+52h]"
"	      00431257    push eax"
"	      00431258    mov eax,[ebp-28h]"
"	      0043125b    mov eax,[eax+52h]"
"	      0043125e    mov eax,[eax]"
"	      00431260    call dword ptr [eax+2Ch]"
"	      00431263    test eax,eax"
"	      00431265    je near ptr 00431275h"
);
// LINE 1863:
	asm( 
"	      0043126b    jmp near ptr 0043180Dh"
"	      00431270    jmp near ptr 004317E7h"
);
// LINE 1880:
	asm( 
"	      00431275    mov eax,[ebp-14h]"
"	      00431278    push eax"
"	      00431279    mov eax,[ebp-28h]"
"	      0043127c    xor ecx,ecx"
"	      0043127e    mov cx,[eax+4Eh]"
"	      00431282    sub ecx,8"
"	      00431285    cmp ecx,1"
"	      00431288    sbb eax,eax"
"	      0043128a    and eax,80h"
"	      0043128f    push eax"
"	      00431290    mov eax,[ebp-20h]"
"	      00431293    push eax"
"	      00431294    call 0056EB90h"
"	      00431299    add esp,0Ch"
);
// LINE 1883:
	asm( 
"	      0043129c    mov eax,[ebp-24h]"
"	      0043129f    push eax"
"	      004312a0    mov eax,[ebp-18h]"
"	      004312a3    push eax"
"	      004312a4    mov eax,[ebp-14h]"
"	      004312a7    push eax"
"	      004312a8    mov eax,[ebp-20h]"
"	      004312ab    push eax"
"	      004312ac    mov eax,[ebp-28h]"
"	      004312af    mov eax,[eax+52h]"
"	      004312b2    push eax"
"	      004312b3    mov eax,[ebp-28h]"
"	      004312b6    mov eax,[eax+52h]"
"	      004312b9    mov eax,[eax]"
"	      004312bb    call dword ptr [eax+4Ch]"
);
// LINE 1891:
	asm( 
"	      004312be    mov eax,[ebp-28h]"
"	      004312c1    mov eax,[eax+72h]"
"	      004312c4    mov eax,[eax+30h]"
"	      004312c7    mov ecx,[ebp-28h]"
"	      004312ca    mov ecx,[ecx+72h]"
"	      004312cd    add [ecx+34h],eax"
);
// LINE 1892:
	asm( 
"	      004312d0    mov eax,[ebp-28h]"
"	      004312d3    mov eax,[eax+72h]"
"	      004312d6    mov ecx,[ebp-28h]"
"	      004312d9    mov ecx,[ecx+72h]"
"	      004312dc    mov ecx,[ecx+34h]"
"	      004312df    cmp [eax+2Ch],ecx"
"	      004312e2    ja near ptr 004312FEh"
);
// LINE 1893:
	asm( 
"	      004312e8    xor eax,eax"
"	      004312ea    mov ecx,[ebp-28h]"
"	      004312ed    mov ecx,[ecx+72h]"
"	      004312f0    sub eax,[ecx+2Ch]"
"	      004312f3    neg eax"
"	      004312f5    mov ecx,[ebp-28h]"
"	      004312f8    mov ecx,[ecx+72h]"
"	      004312fb    sub [ecx+34h],eax"
);
// LINE 1895:
	asm( 
"	      004312fe    jmp near ptr 00431808h"
"	      00431303    jmp near ptr 004317E7h"
);
// LINE 1902:
	asm( 
"	      00431308    push 0"
"	      0043130a    lea eax,[ebp-24h]"
"	      0043130d    push eax"
"	      0043130e    lea eax,[ebp-18h]"
"	      00431311    push eax"
"	      00431312    lea eax,[ebp-14h]"
"	      00431315    push eax"
"	      00431316    lea eax,[ebp-20h]"
"	      00431319    push eax"
"	      0043131a    mov eax,[ebp-28h]"
"	      0043131d    mov eax,[eax+72h]"
"	      00431320    mov eax,[eax+30h]"
"	      00431323    push eax"
"	      00431324    mov eax,[ebp-28h]"
"	      00431327    mov eax,[eax+72h]"
"	      0043132a    mov eax,[eax+34h]"
"	      0043132d    push eax"
"	      0043132e    mov eax,[ebp-28h]"
"	      00431331    mov eax,[eax+52h]"
"	      00431334    push eax"
"	      00431335    mov eax,[ebp-28h]"
"	      00431338    mov eax,[eax+52h]"
"	      0043133b    mov eax,[eax]"
"	      0043133d    call dword ptr [eax+2Ch]"
"	      00431340    test eax,eax"
"	      00431342    je near ptr 00431352h"
);
// LINE 1904:
	asm( 
"	      00431348    jmp near ptr 00431803h"
"	      0043134d    jmp near ptr 004317E7h"
);
// LINE 1907:
	asm( 
"	      00431352    cmp dword ptr [ebp-14h],0"
"	      00431356    je near ptr 00431513h"
"	      0043135c    mov eax,[ebp-28h]"
"	      0043135f    mov eax,[eax+72h]"
"	      00431362    cmp dword ptr [eax+40h],0"
"	      00431366    jne near ptr 00431513h"
);
// LINE 1909:
	asm( 
"	      0043136c    lea eax,[ebp-10h]"
"	      0043136f    push eax"
"	      00431370    mov eax,[ebp-28h]"
"	      00431373    mov eax,[eax+72h]"
"	      00431376    add eax,4"
"	      00431379    push eax"
"	      0043137a    mov eax,[ebp-20h]"
"	      0043137d    push eax"
"	      0043137e    mov eax,[ebp-14h]"
"	      00431381    push eax"
"	      00431382    mov eax,[ebp-28h]"
"	      00431385    mov eax,[eax+72h]"
"	      00431388    mov eax,[eax]"
"	      0043138a    push eax"
"	      0043138b    call 0048EE25h"
"	      00431390    add esp,14h"
"	      00431393    mov [ebp-8],eax"
);
// LINE 1910:
	asm( 
"	      00431396    cmp dword ptr [ebp-8],0"
"	      0043139a    je near ptr 004313E4h"
);
// LINE 1911:
	asm( 
"	      004313a0    mov eax,[ebp-24h]"
"	      004313a3    push eax"
"	      004313a4    mov eax,[ebp-18h]"
"	      004313a7    push eax"
"	      004313a8    mov eax,[ebp-14h]"
"	      004313ab    push eax"
"	      004313ac    mov eax,[ebp-20h]"
"	      004313af    push eax"
"	      004313b0    mov eax,[ebp-28h]"
"	      004313b3    mov eax,[eax+52h]"
"	      004313b6    push eax"
"	      004313b7    mov eax,[ebp-28h]"
"	      004313ba    mov eax,[eax+52h]"
"	      004313bd    mov eax,[eax]"
"	      004313bf    call dword ptr [eax+4Ch]"
);
// LINE 1912:
	asm( 
"	      004313c2    mov eax,[ebp-28h]"
"	      004313c5    mov eax,[eax+72h]"
"	      004313c8    mov dword ptr [eax+40h],1"
);
// LINE 1913:
	asm( 
"	      004313cf    mov eax,[ebp-28h]"
"	      004313d2    mov eax,[eax]"
"	      004313d4    mov ecx,[ebp-28h]"
"	      004313d7    call dword ptr [eax+48h]"
);
// LINE 1914:
	asm( 
"	      004313da    jmp near ptr 004317FEh"
"	      004313df    jmp near ptr 004317E7h"
);
// LINE 1916:
	asm( 
"	      004313e4    mov eax,[ebp-10h]"
"	      004313e7    cmp [ebp-14h],eax"
"	      004313ea    jbe near ptr 0043150Eh"
);
// LINE 1917:
	asm( 
"	      004313f0    mov eax,[ebp-28h]"
"	      004313f3    cmp dword ptr [eax+1Ch],0"
"	      004313f7    jne near ptr 0043149Ch"
);
// LINE 1919:
	asm( 
"	      004313fd    mov eax,[ebp-28h]"
"	      00431400    mov eax,[eax+72h]"
"	      00431403    mov dword ptr [eax+44h],1"
);
// LINE 1924:
	asm( 
"	      0043140a    mov eax,[ebp-14h]"
"	      0043140d    sub eax,[ebp-10h]"
"	      00431410    push eax"
"	      00431411    mov eax,[ebp-28h]"
"	      00431414    xor ecx,ecx"
"	      00431416    mov cx,[eax+4Eh]"
"	      0043141a    sub ecx,8"
"	      0043141d    cmp ecx,1"
"	      00431420    sbb eax,eax"
"	      00431422    and eax,80h"
"	      00431427    push eax"
"	      00431428    mov eax,[ebp-10h]"
"	      0043142b    add eax,[ebp-20h]"
"	      0043142e    push eax"
"	      0043142f    call 0056EB90h"
"	      00431434    add esp,0Ch"
);
// LINE 1927:
	asm( 
"	      00431437    mov eax,[ebp-28h]"
"	      0043143a    mov eax,[eax+72h]"
"	      0043143d    mov ecx,[ebp-1Ch]"
"	      00431440    cmp [eax+34h],ecx"
"	      00431443    jae near ptr 00431477h"
);
// LINE 1931:
	asm( 
"	      00431449    mov eax,[ebp-28h]"
"	      0043144c    mov eax,[eax+72h]"
"	      0043144f    mov eax,[eax+2Ch]"
"	      00431452    mov ecx,[ebp-28h]"
"	      00431455    mov ecx,[ecx+72h]"
"	      00431458    add eax,[ecx+34h]"
"	      0043145b    sub eax,[ebp-1Ch]"
"	      0043145e    mov ecx,[ebp-28h]"
"	      00431461    mov ecx,[ecx+72h]"
"	      00431464    sub edx,edx"
"	      00431466    div dword ptr [ecx+30h]"
"	      00431469    mov ecx,[ebp-28h]"
"	      0043146c    mov ecx,[ecx+72h]"
"	      0043146f    mov [ecx+48h],eax"
);
// LINE 1932:
	asm( 
"	      00431472    jmp near ptr 00431497h"
);
// LINE 1935:
	asm( 
"	      00431477    mov eax,[ebp-28h]"
"	      0043147a    mov eax,[eax+72h]"
"	      0043147d    mov eax,[eax+34h]"
"	      00431480    sub eax,[ebp-1Ch]"
"	      00431483    mov ecx,[ebp-28h]"
"	      00431486    mov ecx,[ecx+72h]"
"	      00431489    sub edx,edx"
"	      0043148b    div dword ptr [ecx+30h]"
"	      0043148e    mov ecx,[ebp-28h]"
"	      00431491    mov ecx,[ecx+72h]"
"	      00431494    mov [ecx+48h],eax"
);
// LINE 1937:
	asm( 
"	      00431497    jmp near ptr 0043150Eh"
);
// LINE 1938:
	asm( 
"	      0043149c    mov eax,[ebp-20h]"
"	      0043149f    mov [ebp-4],eax"
);
// LINE 1945:
	asm( 
"	      004314a2    mov eax,[ebp-10h]"
"	      004314a5    add [ebp-4],eax"
);
// LINE 1946:
	asm( 
"	      004314a8    xor eax,eax"
"	      004314aa    sub eax,[ebp-10h]"
"	      004314ad    neg eax"
"	      004314af    sub [ebp-14h],eax"
);
// LINE 1949:
	asm( 
"	      004314b2    mov eax,[ebp-28h]"
"	      004314b5    mov eax,[eax+72h]"
"	      004314b8    add eax,18h"
"	      004314bb    push eax"
"	      004314bc    mov eax,[ebp-28h]"
"	      004314bf    mov eax,[eax+72h]"
"	      004314c2    add eax,4"
"	      004314c5    push eax"
"	      004314c6    mov eax,[ebp-28h]"
"	      004314c9    mov eax,[eax+72h]"
"	      004314cc    push eax"
"	      004314cd    call 0048EDB9h"
"	      004314d2    add esp,0Ch"
"	      004314d5    mov [ebp-8],eax"
);
// LINE 1951:
	asm( 
"	      004314d8    lea eax,[ebp-10h]"
"	      004314db    push eax"
"	      004314dc    mov eax,[ebp-28h]"
"	      004314df    mov eax,[eax+72h]"
"	      004314e2    add eax,4"
"	      004314e5    push eax"
"	      004314e6    mov eax,[ebp-4]"
"	      004314e9    push eax"
"	      004314ea    mov eax,[ebp-14h]"
"	      004314ed    push eax"
"	      004314ee    mov eax,[ebp-28h]"
"	      004314f1    mov eax,[eax+72h]"
"	      004314f4    mov eax,[eax]"
"	      004314f6    push eax"
"	      004314f7    call 0048EE25h"
"	      004314fc    add esp,14h"
"	      004314ff    mov [ebp-8],eax"
);
// LINE 1952:
	asm( 
"	      00431502    mov eax,[ebp-10h]"
"	      00431505    cmp [ebp-14h],eax"
"	      00431508    ja near ptr 004314A2h"
);
// LINE 1961:
	asm( 
"	      0043150e    jmp near ptr 00431554h"
"	      00431513    cmp dword ptr [ebp-14h],0"
"	      00431517    je near ptr 00431554h"
"	      0043151d    mov eax,[ebp-28h]"
"	      00431520    mov eax,[eax+72h]"
"	      00431523    cmp dword ptr [eax+40h],0"
"	      00431527    je near ptr 00431554h"
);
// LINE 1963:
	asm( 
"	      0043152d    mov eax,[ebp-14h]"
"	      00431530    push eax"
"	      00431531    mov eax,[ebp-28h]"
"	      00431534    xor ecx,ecx"
"	      00431536    mov cx,[eax+4Eh]"
"	      0043153a    sub ecx,8"
"	      0043153d    cmp ecx,1"
"	      00431540    sbb eax,eax"
"	      00431542    and eax,80h"
"	      00431547    push eax"
"	      00431548    mov eax,[ebp-20h]"
"	      0043154b    push eax"
"	      0043154c    call 0056EB90h"
"	      00431551    add esp,0Ch"
);
// LINE 1966:
	asm( 
"	      00431554    cmp dword ptr [ebp-24h],0"
"	      00431558    je near ptr 00431744h"
"	      0043155e    mov eax,[ebp-28h]"
"	      00431561    mov eax,[eax+72h]"
"	      00431564    cmp dword ptr [eax+40h],0"
"	      00431568    jne near ptr 00431744h"
);
// LINE 1968:
	asm( 
"	      0043156e    lea eax,[ebp-10h]"
"	      00431571    push eax"
"	      00431572    mov eax,[ebp-28h]"
"	      00431575    mov eax,[eax+72h]"
"	      00431578    add eax,4"
"	      0043157b    push eax"
"	      0043157c    mov eax,[ebp-18h]"
"	      0043157f    push eax"
"	      00431580    mov eax,[ebp-24h]"
"	      00431583    push eax"
"	      00431584    mov eax,[ebp-28h]"
"	      00431587    mov eax,[eax+72h]"
"	      0043158a    mov eax,[eax]"
"	      0043158c    push eax"
"	      0043158d    call 0048EE25h"
"	      00431592    add esp,14h"
"	      00431595    mov [ebp-8],eax"
);
// LINE 1969:
	asm( 
"	      00431598    cmp dword ptr [ebp-8],0"
"	      0043159c    je near ptr 004315E6h"
);
// LINE 1970:
	asm( 
"	      004315a2    mov eax,[ebp-24h]"
"	      004315a5    push eax"
"	      004315a6    mov eax,[ebp-18h]"
"	      004315a9    push eax"
"	      004315aa    mov eax,[ebp-14h]"
"	      004315ad    push eax"
"	      004315ae    mov eax,[ebp-20h]"
"	      004315b1    push eax"
"	      004315b2    mov eax,[ebp-28h]"
"	      004315b5    mov eax,[eax+52h]"
"	      004315b8    push eax"
"	      004315b9    mov eax,[ebp-28h]"
"	      004315bc    mov eax,[eax+52h]"
"	      004315bf    mov eax,[eax]"
"	      004315c1    call dword ptr [eax+4Ch]"
);
// LINE 1971:
	asm( 
"	      004315c4    mov eax,[ebp-28h]"
"	      004315c7    mov eax,[eax+72h]"
"	      004315ca    mov dword ptr [eax+40h],1"
);
// LINE 1972:
	asm( 
"	      004315d1    mov eax,[ebp-28h]"
"	      004315d4    mov eax,[eax]"
"	      004315d6    mov ecx,[ebp-28h]"
"	      004315d9    call dword ptr [eax+48h]"
);
// LINE 1973:
	asm( 
"	      004315dc    jmp near ptr 004317F9h"
"	      004315e1    jmp near ptr 004317E7h"
);
// LINE 1975:
	asm( 
"	      004315e6    mov eax,[ebp-10h]"
"	      004315e9    cmp [ebp-24h],eax"
"	      004315ec    jbe near ptr 0043173Fh"
);
// LINE 1976:
	asm( 
"	      004315f2    mov eax,[ebp-28h]"
"	      004315f5    cmp dword ptr [eax+1Ch],0"
"	      004315f9    jne near ptr 004316CDh"
);
// LINE 1978:
	asm( 
"	      004315ff    mov eax,[ebp-28h]"
"	      00431602    xor ecx,ecx"
"	      00431604    mov cx,[eax+4Eh]"
"	      00431608    cmp ecx,8"
"	      0043160b    jne near ptr 00431631h"
);
// LINE 1979:
	asm( 
"	      00431611    mov eax,[ebp-24h]"
"	      00431614    sub eax,[ebp-10h]"
"	      00431617    push eax"
"	      00431618    push 80h"
"	      0043161d    mov eax,[ebp-10h]"
"	      00431620    add eax,[ebp-18h]"
"	      00431623    push eax"
"	      00431624    call 0056EB90h"
"	      00431629    add esp,0Ch"
);
// LINE 1980:
	asm( 
"	      0043162c    jmp near ptr 0043165Bh"
"	      00431631    mov eax,[ebp-28h]"
"	      00431634    xor ecx,ecx"
"	      00431636    mov cx,[eax+4Eh]"
"	      0043163a    cmp ecx,10h"
"	      0043163d    jne near ptr 0043165Bh"
);
// LINE 1981:
	asm( 
"	      00431643    mov eax,[ebp-24h]"
"	      00431646    sub eax,[ebp-10h]"
"	      00431649    push eax"
"	      0043164a    push 0"
"	      0043164c    mov eax,[ebp-10h]"
"	      0043164f    add eax,[ebp-18h]"
"	      00431652    push eax"
"	      00431653    call 0056EB90h"
"	      00431658    add esp,0Ch"
);
// LINE 1985:
	asm( 
"	      0043165b    mov eax,[ebp-28h]"
"	      0043165e    mov eax,[eax+72h]"
"	      00431661    mov dword ptr [eax+44h],1"
);
// LINE 1986:
	asm( 
"	      00431668    mov eax,[ebp-28h]"
"	      0043166b    mov eax,[eax+72h]"
"	      0043166e    mov ecx,[ebp-1Ch]"
"	      00431671    cmp [eax+34h],ecx"
"	      00431674    jae near ptr 004316A8h"
);
// LINE 1990:
	asm( 
"	      0043167a    mov eax,[ebp-28h]"
"	      0043167d    mov eax,[eax+72h]"
"	      00431680    mov eax,[eax+2Ch]"
"	      00431683    mov ecx,[ebp-28h]"
"	      00431686    mov ecx,[ecx+72h]"
"	      00431689    add eax,[ecx+34h]"
"	      0043168c    sub eax,[ebp-1Ch]"
"	      0043168f    mov ecx,[ebp-28h]"
"	      00431692    mov ecx,[ecx+72h]"
"	      00431695    sub edx,edx"
"	      00431697    div dword ptr [ecx+30h]"
"	      0043169a    mov ecx,[ebp-28h]"
"	      0043169d    mov ecx,[ecx+72h]"
"	      004316a0    mov [ecx+48h],eax"
);
// LINE 1991:
	asm( 
"	      004316a3    jmp near ptr 004316C8h"
);
// LINE 1994:
	asm( 
"	      004316a8    mov eax,[ebp-28h]"
"	      004316ab    mov eax,[eax+72h]"
"	      004316ae    mov eax,[eax+34h]"
"	      004316b1    sub eax,[ebp-1Ch]"
"	      004316b4    mov ecx,[ebp-28h]"
"	      004316b7    mov ecx,[ecx+72h]"
"	      004316ba    sub edx,edx"
"	      004316bc    div dword ptr [ecx+30h]"
"	      004316bf    mov ecx,[ebp-28h]"
"	      004316c2    mov ecx,[ecx+72h]"
"	      004316c5    mov [ecx+48h],eax"
);
// LINE 1996:
	asm( 
"	      004316c8    jmp near ptr 0043173Fh"
);
// LINE 1997:
	asm( 
"	      004316cd    mov eax,[ebp-18h]"
"	      004316d0    mov [ebp-4],eax"
);
// LINE 2004:
	asm( 
"	      004316d3    mov eax,[ebp-10h]"
"	      004316d6    add [ebp-4],eax"
);
// LINE 2005:
	asm( 
"	      004316d9    xor eax,eax"
"	      004316db    sub eax,[ebp-10h]"
"	      004316de    neg eax"
"	      004316e0    sub [ebp-24h],eax"
);
// LINE 2008:
	asm( 
"	      004316e3    mov eax,[ebp-28h]"
"	      004316e6    mov eax,[eax+72h]"
"	      004316e9    add eax,18h"
"	      004316ec    push eax"
"	      004316ed    mov eax,[ebp-28h]"
"	      004316f0    mov eax,[eax+72h]"
"	      004316f3    add eax,4"
"	      004316f6    push eax"
"	      004316f7    mov eax,[ebp-28h]"
"	      004316fa    mov eax,[eax+72h]"
"	      004316fd    push eax"
"	      004316fe    call 0048EDB9h"
"	      00431703    add esp,0Ch"
"	      00431706    mov [ebp-8],eax"
);
// LINE 2011:
	asm( 
"	      00431709    lea eax,[ebp-10h]"
"	      0043170c    push eax"
"	      0043170d    mov eax,[ebp-28h]"
"	      00431710    mov eax,[eax+72h]"
"	      00431713    add eax,4"
"	      00431716    push eax"
"	      00431717    mov eax,[ebp-4]"
"	      0043171a    push eax"
"	      0043171b    mov eax,[ebp-24h]"
"	      0043171e    push eax"
"	      0043171f    mov eax,[ebp-28h]"
"	      00431722    mov eax,[eax+72h]"
"	      00431725    mov eax,[eax]"
"	      00431727    push eax"
"	      00431728    call 0048EE25h"
"	      0043172d    add esp,14h"
"	      00431730    mov [ebp-8],eax"
);
// LINE 2012:
	asm( 
"	      00431733    mov eax,[ebp-10h]"
"	      00431736    cmp [ebp-24h],eax"
"	      00431739    ja near ptr 004316D3h"
);
// LINE 2016:
	asm( 
"	      0043173f    jmp near ptr 00431785h"
"	      00431744    cmp dword ptr [ebp-24h],0"
"	      00431748    je near ptr 00431785h"
"	      0043174e    mov eax,[ebp-28h]"
"	      00431751    mov eax,[eax+72h]"
"	      00431754    cmp dword ptr [eax+40h],0"
"	      00431758    je near ptr 00431785h"
);
// LINE 2018:
	asm( 
"	      0043175e    mov eax,[ebp-24h]"
"	      00431761    push eax"
"	      00431762    mov eax,[ebp-28h]"
"	      00431765    xor ecx,ecx"
"	      00431767    mov cx,[eax+4Eh]"
"	      0043176b    sub ecx,8"
"	      0043176e    cmp ecx,1"
"	      00431771    sbb eax,eax"
"	      00431773    and eax,80h"
"	      00431778    push eax"
"	      00431779    mov eax,[ebp-18h]"
"	      0043177c    push eax"
"	      0043177d    call 0056EB90h"
"	      00431782    add esp,0Ch"
);
// LINE 2021:
	asm( 
"	      00431785    mov eax,[ebp-24h]"
"	      00431788    push eax"
"	      00431789    mov eax,[ebp-18h]"
"	      0043178c    push eax"
"	      0043178d    mov eax,[ebp-14h]"
"	      00431790    push eax"
"	      00431791    mov eax,[ebp-20h]"
"	      00431794    push eax"
"	      00431795    mov eax,[ebp-28h]"
"	      00431798    mov eax,[eax+52h]"
"	      0043179b    push eax"
"	      0043179c    mov eax,[ebp-28h]"
"	      0043179f    mov eax,[eax+52h]"
"	      004317a2    mov eax,[eax]"
"	      004317a4    call dword ptr [eax+4Ch]"
);
// LINE 2024:
	asm( 
"	      004317a7    mov eax,[ebp-28h]"
"	      004317aa    mov eax,[eax+72h]"
"	      004317ad    mov eax,[eax+30h]"
"	      004317b0    mov ecx,[ebp-28h]"
"	      004317b3    mov ecx,[ecx+72h]"
"	      004317b6    add [ecx+34h],eax"
);
// LINE 2025:
	asm( 
"	      004317b9    mov eax,[ebp-28h]"
"	      004317bc    mov eax,[eax+72h]"
"	      004317bf    mov ecx,[ebp-28h]"
"	      004317c2    mov ecx,[ecx+72h]"
"	      004317c5    mov ecx,[ecx+34h]"
"	      004317c8    cmp [eax+2Ch],ecx"
"	      004317cb    ja near ptr 004317E7h"
);
// LINE 2026:
	asm( 
"	      004317d1    xor eax,eax"
"	      004317d3    mov ecx,[ebp-28h]"
"	      004317d6    mov ecx,[ecx+72h]"
"	      004317d9    sub eax,[ecx+2Ch]"
"	      004317dc    neg eax"
"	      004317de    mov ecx,[ebp-28h]"
"	      004317e1    mov ecx,[ecx+72h]"
"	      004317e4    sub [ecx+34h],eax"
);
// LINE 2030:
	asm( 
"	      004317e7    mov eax,[ebp-28h]"
"	      004317ea    mov eax,[eax+72h]"
"	      004317ed    mov dword ptr [eax+58h],0"
);
// LINE 2032:
	asm( 
"	      004317f4    jmp near ptr 0043181Ch"
"	      004317f9    jmp near ptr 004317E7h"
"	      004317fe    jmp near ptr 004317E7h"
"	      00431803    jmp near ptr 004317E7h"
"	      00431808    jmp near ptr 004317E7h"
"	      0043180d    jmp near ptr 004317E7h"
"	      00431812    jmp near ptr 004317E7h"
"	      00431817    jmp near ptr 004317E7h"
"	      0043181c    pop edi"
"	      0043181d    pop esi"
"	      0043181e    pop ebx"
"	      0043181f    leave"
"	      00431820    ret"
);
}

// FUNCTION: COPTER_D 0x00431821
int32_t DigitalSound::SetCompletionNotification(void (*)(long) newSoundCompletionFunction, long lNewSoundCompletionData) {
// LINE 2043:
	asm( 
"	      00431821    push ebp"
"	      00431822    mov ebp,esp"
"	      00431824    sub esp,4"
"	      00431827    push ebx"
"	      00431828    push esi"
"	      00431829    push edi"
"	      0043182a    mov [ebp-4],ecx"
);
// LINE 2044:
	asm( 
"	      0043182d    mov eax,[ebp+8]"
"	      00431830    mov ecx,[ebp-4]"
"	      00431833    mov [ecx+28h],eax"
);
// LINE 2045:
	asm( 
"	      00431836    mov eax,[ebp+0Ch]"
"	      00431839    mov ecx,[ebp-4]"
"	      0043183c    mov [ecx+2Ch],eax"
);
// LINE 2046:
	asm( 
"	      0043183f    mov eax,1"
"	      00431844    jmp near ptr 00431849h"
);
// LINE 2047:
	asm( 
"	      00431849    pop edi"
"	      0043184a    pop esi"
"	      0043184b    pop ebx"
"	      0043184c    leave"
"	      0043184d    ret 8"
);
}

// FUNCTION: COPTER_D 0x00431850
void DigitalSound::StopCompletionNotification() {
// LINE 2054:
	asm( 
"	      00431850    push ebp"
"	      00431851    mov ebp,esp"
"	      00431853    sub esp,4"
"	      00431856    push ebx"
"	      00431857    push esi"
"	      00431858    push edi"
"	      00431859    mov [ebp-4],ecx"
);
// LINE 2055:
	asm( 
"	      0043185c    mov eax,[ebp-4]"
"	      0043185f    mov dword ptr [eax+28h],0"
);
// LINE 2056:
	asm( 
"	      00431866    mov eax,[ebp-4]"
"	      00431869    cmp dword ptr [eax+38h],0"
"	      0043186d    je near ptr 00431881h"
);
// LINE 2057:
	asm( 
"	      00431873    mov eax,[ebp-4]"
"	      00431876    mov eax,[eax]"
"	      00431878    mov ecx,[ebp-4]"
"	      0043187b    call dword ptr [eax+84h]"
);
// LINE 2058:
	asm( 
"	      00431881    jmp near ptr 00431886h"
"	      00431886    pop edi"
"	      00431887    pop esi"
"	      00431888    pop ebx"
"	      00431889    leave"
"	      0043188a    ret"
);
}

// FUNCTION: COPTER_D 0x0043188b
long DigitalSound::EstimateRemainingPlayTime() {
// LINE 2071:
	asm( 
"	      0043188b    push ebp"
"	      0043188c    mov ebp,esp"
"	      0043188e    sub esp,0Ch"
"	      00431891    push ebx"
"	      00431892    push esi"
"	      00431893    push edi"
"	      00431894    mov [ebp-0Ch],ecx"
);
// LINE 2075:
	asm( 
"	      00431897    mov eax,[ebp-0Ch]"
"	      0043189a    mov eax,[eax]"
"	      0043189c    mov ecx,[ebp-0Ch]"
"	      0043189f    call dword ptr [eax+10h]"
"	      004318a2    test eax,eax"
"	      004318a4    jne near ptr 004318E2h"
);
// LINE 2079:
	asm( 
"	      004318aa    mov eax,[ebp-0Ch]"
"	      004318ad    mov ecx,[ebp-0Ch]"
"	      004318b0    xor ebx,ebx"
"	      004318b2    mov bx,[ecx+4Eh]"
"	      004318b6    mov eax,[eax+3Ch]"
"	      004318b9    sub edx,edx"
"	      004318bb    div ebx"
"	      004318bd    lea eax,[eax+eax*4]"
"	      004318c0    lea eax,[eax+eax*4]"
"	      004318c3    lea eax,[eax+eax*4]"
"	      004318c6    shl eax,6"
"	      004318c9    mov ecx,[ebp-0Ch]"
"	      004318cc    sub edx,edx"
"	      004318ce    div dword ptr [ecx+44h]"
"	      004318d1    lea eax,[eax+eax*4]"
"	      004318d4    lea eax,[eax+eax*4]"
"	      004318d7    lea eax,[eax+eax*4]"
"	      004318da    shl eax,3"
"	      004318dd    jmp near ptr 00431942h"
);
// LINE 2081:
	asm( 
"	      004318e2    mov eax,[ebp-0Ch]"
"	      004318e5    cmp dword ptr [eax+1Ch],0"
"	      004318e9    je near ptr 004318F9h"
);
// LINE 2082:
	asm( 
"	      004318ef    mov eax,7FFFFFFFh"
"	      004318f4    jmp near ptr 00431942h"
);
// LINE 2092:
	asm( 
"	      004318f9    lea eax,[ebp-4]"
"	      004318fc    push eax"
"	      004318fd    lea eax,[ebp-8]"
"	      00431900    push eax"
"	      00431901    mov eax,[ebp-0Ch]"
"	      00431904    mov eax,[eax+52h]"
"	      00431907    push eax"
"	      00431908    mov eax,[ebp-0Ch]"
"	      0043190b    mov eax,[eax+52h]"
"	      0043190e    mov eax,[eax]"
"	      00431910    call dword ptr [eax+10h]"
);
// LINE 2093:
	asm( 
"	      00431913    mov eax,[ebp-0Ch]"
"	      00431916    mov eax,[eax+3Ch]"
"	      00431919    sub eax,[ebp-8]"
"	      0043191c    mov ecx,[ebp-0Ch]"
"	      0043191f    xor ebx,ebx"
"	      00431921    mov bx,[ecx+4Eh]"
"	      00431925    sub edx,edx"
"	      00431927    div ebx"
"	      00431929    lea eax,[eax+eax*4]"
"	      0043192c    lea eax,[eax+eax*4]"
"	      0043192f    lea eax,[eax+eax*4]"
"	      00431932    shl eax,6"
"	      00431935    mov ecx,[ebp-0Ch]"
"	      00431938    sub edx,edx"
"	      0043193a    div dword ptr [ecx+44h]"
"	      0043193d    jmp near ptr 00431942h"
);
// LINE 2096:
	asm( 
"	      00431942    pop edi"
"	      00431943    pop esi"
"	      00431944    pop ebx"
"	      00431945    leave"
"	      00431946    ret"
);
}

// FUNCTION: COPTER_D 0x00431947
void CompletionEstimationTimerCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 2106:
	asm( 
"	      00431947    push ebp"
"	      00431948    mov ebp,esp"
"	      0043194a    sub esp,4"
"	      0043194d    push ebx"
"	      0043194e    push esi"
"	      0043194f    push edi"
);
// LINE 2107:
	asm( 
"	      00431950    mov eax,[ebp+10h]"
"	      00431953    mov [ebp-4],eax"
);
// LINE 2108:
	asm( 
"	      00431956    mov eax,[ebp-4]"
"	      00431959    mov eax,[eax]"
"	      0043195b    mov ecx,[ebp-4]"
"	      0043195e    call dword ptr [eax+80h]"
);
// LINE 2109:
	asm( 
"	      00431964    jmp near ptr 00431969h"
"	      00431969    pop edi"
"	      0043196a    pop esi"
"	      0043196b    pop ebx"
"	      0043196c    leave"
"	      0043196d    ret 14h"
);
}

// FUNCTION: COPTER_D 0x00431970
void DigitalSound::ProcessCompletionEstimationTimerCallback() {
// LINE 2115:
	asm( 
"	      00431970    push ebp"
"	      00431971    mov ebp,esp"
"	      00431973    sub esp,4"
"	      00431976    push ebx"
"	      00431977    push esi"
"	      00431978    push edi"
"	      00431979    mov [ebp-4],ecx"
);
// LINE 2116:
	asm( 
"	      0043197c    mov eax,[ebp-4]"
"	      0043197f    mov eax,[eax]"
"	      00431981    mov ecx,[ebp-4]"
"	      00431984    call dword ptr [eax+10h]"
"	      00431987    test eax,eax"
"	      00431989    jne near ptr 004319BBh"
);
// LINE 2117:
	asm( 
"	      0043198f    mov eax,[ebp-4]"
"	      00431992    mov dword ptr [eax+38h],0"
);
// LINE 2118:
	asm( 
"	      00431999    mov eax,[ebp-4]"
"	      0043199c    cmp dword ptr [eax+28h],0"
"	      004319a0    je near ptr 004319B6h"
);
// LINE 2119:
	asm( 
"	      004319a6    mov eax,[ebp-4]"
"	      004319a9    mov eax,[eax+2Ch]"
"	      004319ac    push eax"
"	      004319ad    mov eax,[ebp-4]"
"	      004319b0    call dword ptr [eax+28h]"
"	      004319b3    add esp,4"
);
// LINE 2120:
	asm( 
"	      004319b6    jmp near ptr 004319E0h"
);
// LINE 2126:
	asm( 
"	      004319bb    push 14h"
"	      004319bd    call dword ptr ds:[6C3914h]"
);
// LINE 2127:
	asm( 
"	      004319c3    mov eax,[ebp-4]"
"	      004319c6    mov dword ptr [eax+38h],0"
);
// LINE 2128:
	asm( 
"	      004319cd    mov eax,[ebp-4]"
"	      004319d0    mov eax,[eax]"
"	      004319d2    mov ecx,[ebp-4]"
"	      004319d5    call dword ptr [eax+88h]"
);
// LINE 2129:
	asm( 
"	      004319db    jmp near ptr 004319E0h"
"	      004319e0    pop edi"
"	      004319e1    pop esi"
"	      004319e2    pop ebx"
"	      004319e3    leave"
"	      004319e4    ret"
);
}

// FUNCTION: COPTER_D 0x004319e5
int32_t DigitalSound::StartCompletionNotificationEstimationTimer() {
// LINE 2135:
	asm( 
"	      004319e5    push ebp"
"	      004319e6    mov ebp,esp"
"	      004319e8    sub esp,8"
"	      004319eb    push ebx"
"	      004319ec    push esi"
"	      004319ed    push edi"
"	      004319ee    mov [ebp-8],ecx"
);
// LINE 2138:
	asm( 
"	      004319f1    mov eax,[ebp-8]"
"	      004319f4    cmp dword ptr [eax+38h],0"
"	      004319f8    jne near ptr 00431A0Bh"
"	      004319fe    mov eax,[ebp-8]"
"	      00431a01    cmp dword ptr [eax+28h],0"
"	      00431a05    jne near ptr 00431A12h"
);
// LINE 2139:
	asm( 
"	      00431a0b    xor eax,eax"
"	      00431a0d    jmp near ptr 00431A78h"
);
// LINE 2146:
	asm( 
"	      00431a12    mov eax,[ebp-8]"
"	      00431a15    mov eax,[eax]"
"	      00431a17    mov ecx,[ebp-8]"
"	      00431a1a    call dword ptr [eax+1Ch]"
"	      00431a1d    mov [ebp-4],eax"
);
// LINE 2147:
	asm( 
"	      00431a20    cmp dword ptr [ebp-4],3E8h"
"	      00431a27    jge near ptr 00431A34h"
);
// LINE 2154:
	asm( 
"	      00431a2d    mov dword ptr [ebp-4],0Ah"
);
// LINE 2158:
	asm( 
"	      00431a34    push 14h"
"	      00431a36    call dword ptr ds:[6C3918h]"
"	      00431a3c    test eax,eax"
"	      00431a3e    je near ptr 00431A50h"
);
// LINE 2159:
	asm( 
"	      00431a44    xor eax,eax"
"	      00431a46    jmp near ptr 00431A78h"
);
// LINE 2160:
	asm( 
"	      00431a4b    jmp near ptr 00431A6Dh"
);
// LINE 2166:
	asm( 
"	      00431a50    push 0"
"	      00431a52    mov eax,[ebp-8]"
"	      00431a55    push eax"
"	      00431a56    push 431947h"
"	      00431a5b    push 5"
"	      00431a5d    mov eax,[ebp-4]"
"	      00431a60    push eax"
"	      00431a61    call dword ptr ds:[6C3910h]"
"	      00431a67    mov ecx,[ebp-8]"
"	      00431a6a    mov [ecx+38h],eax"
);
// LINE 2169:
	asm( 
"	      00431a6d    mov eax,[ebp-8]"
"	      00431a70    mov eax,[eax+38h]"
"	      00431a73    jmp near ptr 00431A78h"
);
// LINE 2170:
	asm( 
"	      00431a78    pop edi"
"	      00431a79    pop esi"
"	      00431a7a    pop ebx"
"	      00431a7b    leave"
"	      00431a7c    ret"
);
}

// FUNCTION: COPTER_D 0x00431a7d
void DigitalSound::StopCompletionNotificationEstimationTimer() {
// LINE 2176:
	asm( 
"	      00431a7d    push ebp"
"	      00431a7e    mov ebp,esp"
"	      00431a80    sub esp,4"
"	      00431a83    push ebx"
"	      00431a84    push esi"
"	      00431a85    push edi"
"	      00431a86    mov [ebp-4],ecx"
);
// LINE 2177:
	asm( 
"	      00431a89    mov eax,[ebp-4]"
"	      00431a8c    cmp dword ptr [eax+38h],0"
"	      00431a90    je near ptr 00431AB5h"
);
// LINE 2178:
	asm( 
"	      00431a96    mov eax,[ebp-4]"
"	      00431a99    mov eax,[eax+38h]"
"	      00431a9c    push eax"
"	      00431a9d    call dword ptr ds:[6C390Ch]"
);
// LINE 2179:
	asm( 
"	      00431aa3    push 14h"
"	      00431aa5    call dword ptr ds:[6C3914h]"
);
// LINE 2180:
	asm( 
"	      00431aab    mov eax,[ebp-4]"
"	      00431aae    mov dword ptr [eax+38h],0"
);
// LINE 2182:
	asm( 
"	      00431ab5    jmp near ptr 00431ABAh"
"	      00431aba    pop edi"
"	      00431abb    pop esi"
"	      00431abc    pop ebx"
"	      00431abd    leave"
"	      00431abe    ret"
);
}



// Contribution: 1:00030ac0-00030af8 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431ac0
// Sound::`scalar deleting destructor'



// Contribution: 1:00030b00-00030b1a Module: 64, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00030b20-00030b58 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431b20
// DigitalSound::`scalar deleting destructor'



// Contribution: 2:00000440-00000447 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f440
// ??_7SoundSystem@@6B@


// Contribution: 2:00000448-00000457 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f448
// ??_7SoundManager@@6B@


// Contribution: 2:00000458-00000483 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f458
// ??_7Sound@@6B@


// Contribution: 2:00000488-00000513 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f488
// ??_7DigitalSound@@6B@


// Contribution: 3:00000e58-0000134d Module: 64, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597e58
// SoundSystem::dwMaxWaveFormatExSize
// GLOBAL: COPTER_D 0x00597e5c
// Sound::lTotalMemoryUsage
// GLOBAL: COPTER_D 0x00597e60
// DigitalSound::lpDirectSound
