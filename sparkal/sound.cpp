// Module: sound.obj
// Source: C:\Copter\source\sparkal\sound.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned long;

// Type: /*packed*/ struct IDirectSound (forward reference);
struct IDirectSound : public IUnknown
{ // packed(0x4 bytes) TI: 0x192f
	// calltype: NearStd
	virtual long QueryInterface(const /*unpacked*/ struct _GUID&, void * __ptr32*) /* override */;
	// calltype: NearStd
	virtual unsigned long AddRef() /* override */;
	// calltype: NearStd
	virtual unsigned long Release() /* override */;
	// calltype: NearStd
	virtual long CreateSoundBuffer(/*packed*/ struct _DSBUFFERDESC*, /*packed*/ struct IDirectSoundBuffer**, /*packed*/ struct IUnknown*); // vtable+0xc
	// calltype: NearStd
	virtual long GetCaps(/*packed*/ struct _DSCAPS*); // vtable+0x10
	// calltype: NearStd
	virtual long DuplicateSoundBuffer(/*packed*/ struct IDirectSoundBuffer*, /*packed*/ struct IDirectSoundBuffer**); // vtable+0x14
	// calltype: NearStd
	virtual long SetCooperativeLevel(void * __ptr32, unsigned long); // vtable+0x18
	// calltype: NearStd
	virtual long Compact(); // vtable+0x1c
	// calltype: NearStd
	virtual long GetSpeakerConfig(unsigned long *); // vtable+0x20
	// calltype: NearStd
	virtual long SetSpeakerConfig(unsigned long); // vtable+0x24
	// calltype: NearStd
	virtual long Initialize(/*unpacked*/ struct _GUID*); // vtable+0x28
};

// Type: /*packed*/ class SoundSystem (forward reference);
// VTABLE: COPTER_D 0x0058f440
class SoundSystem{ // packed(0x74 bytes) TI: 0x1a78
public:
	void SoundSystem();
	void ~SoundSystem();
	int32_t Initialize(void * __ptr32);
	void DeInitialize();
	virtual int32_t GetVolume(long *); // vtable+0x0
	virtual int32_t SetVolume(long); // vtable+0x4
	void EnableSound();
	void DisableSound();
	long IsSoundEnabled();
	long bSoundEnabled;
	static unsigned long dwMaxWaveFormatExSize;
protected:
	/*packed*/ class DigitalSound *primarySound;
	/*packed*/ struct IDirectSoundBuffer *lpPrimarySound;
	/*packed*/ struct IDirectSound *lpDirectSound;
	/*packed*/ struct _DSCAPS dsCapabilities;
};

// Type: void;

// Type: void * __ptr32;

// Type: long;

// Type: int32_t;

// Type: long *;

// Type: /*packed*/ class SoundManager (forward reference);
// VTABLE: COPTER_D 0x0058f448
class SoundManager{ // packed(0x204 bytes) TI: 0x1997
public:
	/*packed*/ class Sound *sound[128];
	void AddSound(/*packed*/ class Sound*, int32_t);
	void AddDigitalSound(const /*packed*/ class basic_string<char>&, int32_t, int32_t);
	void AddDigitalSound(long, int32_t);
	virtual long PlaySoundA(int32_t, long, int32_t); // vtable+0x0
	virtual void StopSound(int32_t); // vtable+0x4
	virtual void StopAllSounds(); // vtable+0x8
	/*packed*/ class Sound* GetSound(int32_t);
	void SoundManager();
	void ~SoundManager();
	virtual void DeleteAllSounds(); // vtable+0xc
};

// Type: /*packed*/ class Sound (forward reference);
// VTABLE: COPTER_D 0x0058f458
class Sound{ // packed(0x34 bytes) TI: 0x4335
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	/*packed*/ class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	int32_t bUnloadBeforeNextPlay;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	/*packed*/ class Sound& operator=(const /*packed*/ class Sound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: /*packed*/ class DigitalSound (forward reference);
// VTABLE: COPTER_D 0x0058f488
class DigitalSound : public Sound
{ // packed(0x7a bytes) TI: 0x45d4
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static /*packed*/ struct IDirectSound *lpDirectSound;
	uint32_t cbSize;
	/*packed*/ struct tWAVEFORMATEX waveFormatEx;
	/*packed*/ struct IDirectSoundBuffer *lpSound[8];
	/*packed*/ struct _STREAMBUFINFO *lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const /*packed*/ class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound() /* override */;
	/*packed*/ class DigitalSound& operator=(/*packed*/ class DigitalSound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&, int32_t); // vtable+0x2c
	virtual int32_t Load(); // vtable+0x30
	virtual int32_t LoadFromResource(); // vtable+0x34
	virtual int32_t LoadFromFile(); // vtable+0x38
	virtual void Unload(); // vtable+0x3c
	virtual long Play(long, int32_t) /* override */;
	virtual long Stop() /* override */;
	virtual long ShouldWeStream(); // vtable+0x40
	virtual long PlayStream(); // vtable+0x44
	virtual long StopStream(); // vtable+0x48
protected:
	virtual long IsPlaying(/*packed*/ struct IDirectSoundBuffer**); // vtable+0x4c
public:
	virtual long IsPlaying() /* override */;
	virtual int32_t GetVolume(long *) /* override */;
	virtual int32_t SetVolume(long) /* override */;
	virtual int32_t GetPan(long *); // vtable+0x50
	virtual int32_t SetPan(long); // vtable+0x54
	virtual int32_t SetPosition(long, long, long); // vtable+0x58
	virtual long GetOriginalFrequency(); // vtable+0x5c
	virtual int32_t GetFrequency(long *); // vtable+0x60
	virtual int32_t SetFrequency(long); // vtable+0x64
	virtual int32_t GetSoundType() /* override */;
	virtual int32_t SetCompletionNotification(void (*)(long), long) /* override */;
	virtual void StopCompletionNotification() /* override */;
	virtual long EstimateRemainingPlayTime() /* override */;
protected:
	virtual int32_t GetSoundAliasToPlay(/*packed*/ struct IDirectSoundBuffer**); // vtable+0x68
	virtual int32_t CreateSoundBuffer(/*packed*/ struct _DSBUFFERDESC*); // vtable+0x6c
	virtual int32_t CreatePrimarySoundBuffer(); // vtable+0x70
	virtual int32_t ReleaseSoundBuffer(); // vtable+0x74
	virtual long InitializeStreamBuffer(long); // vtable+0x78
	virtual void ProcessStreamingBufferTimerCallback(); // vtable+0x7c
	virtual void ProcessCompletionEstimationTimerCallback(); // vtable+0x80
	virtual void StopCompletionNotificationEstimationTimer(); // vtable+0x84
	virtual int32_t StartCompletionNotificationEstimationTimer(); // vtable+0x88
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	/*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: uint32_t;

// Type: unsigned char *;

// Type: /*packed*/ struct _MMCKINFO;
struct _MMCKINFO{ // packed(0x14 bytes) TI: 0x1da7
	unsigned long ckid;
	unsigned long cksize;
	unsigned long fccType;
	unsigned long dwDataOffset;
	unsigned long dwFlags;
};

// Type: /*packed*/ struct _DSBUFFERDESC;
struct _DSBUFFERDESC{ // packed(0x14 bytes) TI: 0x1315
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwBufferBytes;
	unsigned long dwReserved;
	/*packed*/ struct tWAVEFORMATEX *lpwfxFormat;
};

// Type: /*packed*/ struct _DSBUFFERDESC (forward reference);
struct _DSBUFFERDESC{ // packed(0x14 bytes) TI: 0x1315
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwBufferBytes;
	unsigned long dwReserved;
	/*packed*/ struct tWAVEFORMATEX *lpwfxFormat;
};

// Type: /*packed*/ struct IDirectSoundBuffer (forward reference);
struct IDirectSoundBuffer : public IUnknown
{ // packed(0x4 bytes) TI: 0x1bbe
	// calltype: NearStd
	virtual long QueryInterface(const /*unpacked*/ struct _GUID&, void * __ptr32*) /* override */;
	// calltype: NearStd
	virtual unsigned long AddRef() /* override */;
	// calltype: NearStd
	virtual unsigned long Release() /* override */;
	// calltype: NearStd
	virtual long GetCaps(/*packed*/ struct _DSBCAPS*); // vtable+0xc
	// calltype: NearStd
	virtual long GetCurrentPosition(unsigned long *, unsigned long *); // vtable+0x10
	// calltype: NearStd
	virtual long GetFormat(/*packed*/ struct tWAVEFORMATEX*, unsigned long, unsigned long *); // vtable+0x14
	// calltype: NearStd
	virtual long GetVolume(long *); // vtable+0x18
	// calltype: NearStd
	virtual long GetPan(long *); // vtable+0x1c
	// calltype: NearStd
	virtual long GetFrequency(unsigned long *); // vtable+0x20
	// calltype: NearStd
	virtual long GetStatus(unsigned long *); // vtable+0x24
	// calltype: NearStd
	virtual long Initialize(/*packed*/ struct IDirectSound*, /*packed*/ struct _DSBUFFERDESC*); // vtable+0x28
	// calltype: NearStd
	virtual long Lock(unsigned long, unsigned long, void * __ptr32, unsigned long *, void * __ptr32, unsigned long *, unsigned long); // vtable+0x2c
	// calltype: NearStd
	virtual long Play(unsigned long, unsigned long, unsigned long); // vtable+0x30
	// calltype: NearStd
	virtual long SetCurrentPosition(unsigned long); // vtable+0x34
	// calltype: NearStd
	virtual long SetFormat(/*packed*/ struct tWAVEFORMATEX*); // vtable+0x38
	// calltype: NearStd
	virtual long SetVolume(long); // vtable+0x3c
	// calltype: NearStd
	virtual long SetPan(long); // vtable+0x40
	// calltype: NearStd
	virtual long SetFrequency(unsigned long); // vtable+0x44
	// calltype: NearStd
	virtual long Stop(); // vtable+0x48
	// calltype: NearStd
	virtual long Unlock(void * __ptr32, unsigned long, void * __ptr32, unsigned long); // vtable+0x4c
	// calltype: NearStd
	virtual long Restore(); // vtable+0x50
};

// Type: /*packed*/ struct _OFSTRUCT;
struct _OFSTRUCT{ // packed(0x88 bytes) TI: 0x21e5
	unsigned char cBytes;
	unsigned char fFixedDisk;
	unsigned short nErrCode;
	unsigned short Reserved1;
	unsigned short Reserved2;
	char szPathName[128];
};

// Type: void (long);

// Type: /*packed*/ struct IUnknown;
struct IUnknown{ // packed(0x4 bytes) TI: 0x27c0
	/*packed*/ struct IUnknownVtbl *lpVtbl;
};

// Type: /*packed*/ class Sound;
// VTABLE: COPTER_D 0x0058f458
class Sound{ // packed(0x34 bytes) TI: 0x4335
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	/*packed*/ class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	int32_t bUnloadBeforeNextPlay;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	/*packed*/ class Sound& operator=(const /*packed*/ class Sound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};



// Contribution: 1:0002cf60-00030abe Module: 64, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0042df60
void SoundSystem::SoundSystem() {

	this-><vftable> = 0x58f440;
// LINE 89:
	__asm        cmp    SoundSystem::dwMaxWaveFormatExSize, 0;
	__asm        jne    _T30;
// LINE 91:
	__asm        push   0x597E58;
	__asm        push   0x32;
	__asm        push   0;
	__asm        call   0x004C4678;
// LINE 93:
_T30:
	this->primarySound = 0x0;
// LINE 94:
	this->lpPrimarySound = 0x0;
// LINE 95:
	this->lpDirectSound = 0x0;
// LINE 96:
	this->bSoundEnabled = 0x0;
// LINE 99:
	__asm        push   0x60;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 100:
	this->dsCapabilities.dwSize = 0x60;
// LINE 104:
	__asm        jmp    near ptr 0x0042DFDA;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042dfe2
void SoundSystem::~SoundSystem() {

	this-><vftable> = 0x58f440;
// LINE 108:
	__asm        mov    ecx, this;
	__asm        call   SoundSystem::DeInitialize;
// LINE 109:
	__asm        jmp    near ptr 0x0042E004;
}

// FUNCTION: COPTER_D 0x0042e009
int32_t SoundSystem::Initialize(void * __ptr32 hWindow) {
	/*bp-0x4*/   int32_t bReturnValue;
	/*bp-0x8*/   long hResult;

// LINE 122:
	bReturnValue = 0x1;
// LINE 126:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T3d;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T47;
_T3d:
	this->primarySound = 0x0;
// LINE 134:
_T47:
	this->primarySound->waveFormatEx.wFormatTag = 0x1;
// LINE 135:
	this->primarySound->waveFormatEx.nChannels = 0x2;
// LINE 136:
	this->primarySound->waveFormatEx.nSamplesPerSec = 0x5622;
// LINE 137:
	this->primarySound->waveFormatEx.nAvgBytesPerSec = 0xac44;
// LINE 138:
	this->primarySound->waveFormatEx.nBlockAlign = 0x2;
// LINE 139:
	this->primarySound->waveFormatEx.wBitsPerSample = 0x8;
// LINE 140:
	this->primarySound->waveFormatEx.cbSize = 0x0;
// LINE 145:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x004C4672;
	__asm        mov    hResult, eax;
// LINE 146:
	__asm        cmp    hResult, 0;
	__asm        je     _Ted;
// LINE 147:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042E0CE;

	__asm        push   0x597E64;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   DirectSoundError::DisplayError;
// LINE 148:
	this->lpDirectSound = 0x0;
// LINE 149:
	bReturnValue = 0x0;
// LINE 150:
	__asm        jmp    _T2b8;

	__asm        jmp    _T229;
// LINE 155:
_Ted:
	DigitalSound::lpDirectSound = this->lpDirectSound;
// LINE 158:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    hResult, eax;
// LINE 159:
	__asm        cmp    hResult, 0;
	__asm        je     _T147;
// LINE 160:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042E132;

	__asm        push   0x597EA4;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   DirectSoundError::DisplayError;
// LINE 161:
	bReturnValue = 0x0;
// LINE 162:
	__asm        jmp    _T2b3;

	__asm        jmp    _T229;
// LINE 168:
_T147:
	__asm        push   1;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    hResult, eax;
// LINE 169:
	__asm        cmp    hResult, 0;
	__asm        je     _T18e;
// LINE 170:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0042E180;

	__asm        push   0x597EDC;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   DirectSoundError::DisplayError;
// LINE 171:
	__asm        jmp    _T2ae;

	__asm        jmp    _T229;
// LINE 175:
_T18e:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x70];
	__asm        test   eax, eax;
	__asm        jne    _T1b8;
// LINE 176:
	bReturnValue = 0x0;
// LINE 177:
	__asm        jmp    _T2a9;

	__asm        jmp    _T229;
// LINE 179:
_T1b8:
	this->lpPrimarySound = this->primarySound->lpSound[0];
// LINE 191:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        mov    hResult, eax;
// LINE 192:
	__asm        cmp    hResult, 0;
	__asm        je     _T215;
// LINE 193:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042E200;

	__asm        push   0x597F20;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   DirectSoundError::DisplayError;
// LINE 194:
	bReturnValue = 0x0;
// LINE 195:
	__asm        jmp    _T2a4;

	__asm        jmp    _T229;
// LINE 197:
_T215:
	this->bSoundEnabled = 0x1;
// LINE 198:
	__asm        jmp    _T29f;

	__asm        jmp    _T297;
// LINE 201:
ERROR_CLEANUP:
_T229:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T263;
// LINE 202:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x74];
// LINE 203:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+0x52], eax;
// LINE 205:
_T263:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T297;
// LINE 206:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 207:
	__asm        mov    DigitalSound::lpDirectSound, 0;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 216:
END_OF_ROUTINE:
_T297:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    _T2bd;
// LINE 218:
_T29f:
	__asm        jmp    _T297;
_T2a4:
	__asm        jmp    _T229;
_T2a9:
	__asm        jmp    _T229;
_T2ae:
	__asm        jmp    _T229;
_T2b3:
	__asm        jmp    _T229;
_T2b8:
	__asm        jmp    _T229;
_T2bd:
}

// FUNCTION: COPTER_D 0x0042e2cd
void SoundSystem::DeInitialize() {
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T4d;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T43;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T43;
// LINE 234:
_T43:
	this->primarySound = 0x0;
// LINE 237:
_T4d:
	this->lpDirectSound = 0x0;
// LINE 239:
	__asm        jmp    near ptr 0x0042E329;
}

// FUNCTION: COPTER_D 0x0042e32e
int32_t SoundSystem::GetVolume(long * lVolume) {
// LINE 253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T38;
// LINE 254:
	__asm        mov    eax, lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x20];
// LINE 255:
	__asm        mov    eax, 1;
	__asm        jmp    _T3f;
// LINE 257:
_T38:
	__asm        xor    eax, eax;
	__asm        jmp    _T3f;
// LINE 258:
_T3f:
}

// FUNCTION: COPTER_D 0x0042e374
int32_t SoundSystem::SetVolume(long lNewVolume) {
// LINE 272:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x24];
	__asm        jmp    near ptr 0x0042E39A;
// LINE 273:
}

// FUNCTION: COPTER_D 0x0042e3a1
void SoundManager::SoundManager() {
	/*bp-0x4*/   int32_t i;


	this-><vftable> = 0x58f448;
// LINE 285:
	__asm        mov    i, 0;
	__asm        jmp    _T24;
_T21:
	__asm        inc    i;
_T24:
	__asm        cmp    i, 0x80;
	__asm        jge    _T44;
// LINE 286:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+4], 0;
	__asm        jmp    _T21;
// LINE 287:
_T44:
	__asm        jmp    near ptr 0x0042E3EA;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042e3f2
void SoundManager::~SoundManager() {

	this-><vftable> = 0x58f448;
// LINE 291:
	__asm        mov    ecx, this;
	__asm        call   SoundManager::DeleteAllSounds;
// LINE 292:
	__asm        jmp    near ptr 0x0042E414;
}

// FUNCTION: COPTER_D 0x0042e419
void SoundManager::DeleteAllSounds() {
	/*bp-0x4*/   int32_t i;

// LINE 297:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 0x80;
	__asm        jge    _T5b;
// LINE 298:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T56;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T18;
// LINE 299:
_T5b:
	__asm        jmp    near ptr 0x0042E479;
}

// FUNCTION: COPTER_D 0x0042e47e
void SoundManager::AddSound(/*packed*/ class Sound *soundToAdd, int32_t nIndex) {
// LINE 316:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T4b;
// LINE 317:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T4b;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T4b;
// LINE 318:
_T4b:
	__asm        mov    eax, soundToAdd;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 319:
	__asm        jmp    near ptr 0x0042E4DB;
}

// FUNCTION: COPTER_D 0x0042e4e2
void SoundManager::AddDigitalSound(long lResID, int32_t nIndex) {
	/*bp-0x4*/   /*packed*/ class DigitalSound *newDigitalSound;

// LINE 341:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T37;

	__asm        mov    eax, lResID;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    newDigitalSound, eax;
	__asm        jmp    _T3e;
_T37:
	newDigitalSound = 0x0;
// LINE 342:
_T3e:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T7d;
// LINE 343:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T7d;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T7d;
// LINE 344:
_T7d:
	__asm        mov    eax, newDigitalSound;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 345:
	__asm        jmp    near ptr 0x0042E571;
}

// FUNCTION: COPTER_D 0x0042e578
void SoundManager::AddDigitalSound(const /*packed*/ class basic_string<char>& sNewSoundFile, int32_t nIndex, int32_t nStreamingType) {
	/*bp-0x4*/   /*packed*/ class DigitalSound *newDigitalSound;

// LINE 348:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3b;

	__asm        mov    eax, nStreamingType;
	__asm        push   eax;
	__asm        mov    eax, sNewSoundFile;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    newDigitalSound, eax;
	__asm        jmp    _T42;
_T3b:
	newDigitalSound = 0x0;
// LINE 349:
_T42:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T81;
// LINE 350:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T81;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T81;
// LINE 351:
_T81:
	__asm        mov    eax, newDigitalSound;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 352:
	__asm        jmp    near ptr 0x0042E60B;
}

// FUNCTION: COPTER_D 0x0042e612
long SoundManager::PlaySoundA(int32_t nIndex, long bPlayLooping, int32_t nDuplicateType) {
// LINE 364:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T43;
// LINE 365:
	__asm        mov    eax, nDuplicateType;
	__asm        push   eax;
	__asm        mov    eax, bPlayLooping;
	__asm        push   eax;
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    edx, nIndex;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+8];
	__asm        jmp    _T4a;
// LINE 366:
_T43:
	__asm        xor    eax, eax;
	__asm        jmp    _T4a;
// LINE 367:
_T4a:
}

// FUNCTION: COPTER_D 0x0042e663
void SoundManager::StopSound(int32_t nIndex) {
// LINE 379:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T36;
// LINE 380:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    edx, nIndex;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+0xC];
// LINE 381:
_T36:
	__asm        jmp    near ptr 0x0042E69E;
}

// FUNCTION: COPTER_D 0x0042e6a5
void SoundManager::StopAllSounds() {
	/*bp-0x4*/   int32_t i;

// LINE 394:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 0x80;
	__asm        jge    _T57;
// LINE 395:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     _T52;
// LINE 396:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, i;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+0xC];
// LINE 397:
_T52:
	__asm        jmp    _T18;
// LINE 398:
_T57:
	__asm        jmp    near ptr 0x0042E701;
}

// FUNCTION: COPTER_D 0x0042e706
void Sound::Sound() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042E757;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        jmp    near ptr 0x0042E77E;

	this-><vftable> = 0x58f458;
// LINE 414:
	this->nSoundSourceType = 0x1;
// LINE 415:
	this->nSoundDuplicateType = 0x3;
// LINE 416:
	this->lID = 0x0;
// LINE 417:
	this->lResID = 0x0;
// LINE 418:
	this->bLooping = 0x0;
// LINE 419:
	this->bStreaming = 0x0;
// LINE 420:
	this->lVolume = 0x2710;
// LINE 421:
	this->soundCompletionFunction = 0x0;
// LINE 422:
	this->bUnloadBeforeNextPlay = 0x0;
// LINE 423:
	__asm        jmp    near ptr 0x0042E7E6;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042e7ee
void Sound::~Sound() {

	this-><vftable> = 0x58f458;
// LINE 434:
	__asm        jmp    near ptr 0x0042E808;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta6;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T86;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T86:
	__asm        jmp    near ptr 0x0042E879;

	__asm        jmp    near ptr 0x0042E87E;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042E88F;

	__asm        jmp    _Ta6;
_Ta6:
	__asm        jmp    near ptr 0x0042E899;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _Td3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Td3:
	__asm        jmp    near ptr 0x0042E8C6;
}

// FUNCTION: COPTER_D 0x0042e8cb
/*packed*/ class Sound& Sound::operator=(const /*packed*/ class Sound& newSound) {
// LINE 444:
	this->nSoundSourceType = newSound.nSoundSourceType;
// LINE 445:
	this->nSoundDuplicateType = newSound.nSoundDuplicateType;
// LINE 446:
	this->lID = newSound.lID;
// LINE 447:
	this->bLooping = newSound.bLooping;
// LINE 448:
	this->bStreaming = newSound.bStreaming;
// LINE 449:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    ecx, newSound;
	__asm        add    ecx, 0x14;
	__asm        cmp    eax, ecx;
	__asm        je     _T20f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Te8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Te8;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tc8;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_Tc8:
	__asm        jmp    near ptr 0x0042E998;

	__asm        jmp    near ptr 0x0042E99D;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042E9AE;

	__asm        jmp    _Te8;
_Te8:
	__asm        jmp    near ptr 0x0042E9B8;

	__asm        jmp    near ptr 0x0042E9BD;

	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T11c;

	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T20f;
_T11c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T205;

	__asm        jmp    near ptr 0x0042EA03;

	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1df;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042EA4A;

	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1a4;

	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T1b0;

	__asm        jmp    _T1b0;
_T1a4:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T1b0;
_T1b0:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042EAA5;

	__asm        jmp    _T1e8;
_T1df:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1e8:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042EAC2;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T20f;
_T205:
	this->sSoundFile.reference = 0x0;
_T20f:
	__asm        jmp    near ptr 0x0042EADF;
// LINE 450:
	this->lResID = newSound.lResID;
// LINE 451:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0042EAF3;
// LINE 452:
}

// FUNCTION: COPTER_D 0x0042eafa
int32_t operator<(const /*packed*/ class Sound& compareSound1, const /*packed*/ class Sound& compareSound2) {
// LINE 468:
	__asm        mov    eax, compareSound2;
	__asm        mov    ecx, compareSound1;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    _T22;

	__asm        mov    eax, 1;
	__asm        jmp    _T24;
_T22:
	__asm        xor    eax, eax;
_T24:
	__asm        jmp    near ptr 0x0042EB23;
// LINE 469:
}

// FUNCTION: COPTER_D 0x0042eb28
int32_t operator==(const /*packed*/ class Sound& compareSound1, const /*packed*/ class Sound& compareSound2) {
// LINE 485:
	__asm        mov    eax, compareSound1;
	__asm        mov    ecx, compareSound2;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T22;
// LINE 486:
	__asm        xor    eax, eax;
	__asm        jmp    _T23a;
// LINE 487:
_T22:
	__asm        mov    eax, compareSound1;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T200;
// LINE 488:
	__asm        jmp    near ptr 0x0042EB5C;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T5a;

	__asm        jmp    near ptr 0x0042EB71;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T61;
_T5a:
	None = 0xffffffff;
_T61:
	__asm        jmp    near ptr 0x0042EB8E;

	__asm        jmp    near ptr 0x0042EB93;

	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T90;

	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T9c;

	__asm        jmp    _T9c;
_T90:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T9c;
_T9c:
	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0042EBD5;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _Tef;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042EC08;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tef;
_Tef:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    eax, ecx;
	__asm        jb     _Tff;

	__asm        mov    eax, ecx;
_Tff:
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042EC2F;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T153;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T13d;

	__asm        jmp    near ptr 0x0042EC4E;

	__asm        jmp    near ptr 0x0042EC53;

	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-8];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T14e;
_T13d:
	__asm        jmp    near ptr 0x0042EC6A;

	__asm        jmp    near ptr 0x0042EC6F;

	None = 0x0;
_T14e:
	__asm        jmp    _T1d3;
_T153:
	__asm        jmp    near ptr 0x0042EC80;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17d;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T189;

	__asm        jmp    _T189;
_T17d:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   memcmp;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0042ECCD;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1ba;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1ce;
_T1ba:
	__asm        jmp    near ptr 0x0042ECE7;

	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    near ptr 0x0042ED00;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T1ec;

	__asm        mov    eax, 1;
	__asm        jmp    _T1ee;
_T1ec:
	__asm        xor    eax, eax;
_T1ee:
	__asm        jmp    _T1f6;

	__asm        mov    eax, [ebp-0x24];
_T1f6:
	__asm        jmp    _T23a;
// LINE 489:
	__asm        jmp    _T230;
_T200:
	__asm        mov    eax, compareSound1;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T230;
// LINE 490:
	__asm        mov    eax, compareSound1;
	__asm        mov    ecx, compareSound2;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    _T229;

	__asm        mov    eax, 1;
	__asm        jmp    _T22b;
_T229:
	__asm        xor    eax, eax;
_T22b:
	__asm        jmp    _T23a;
// LINE 491:
_T230:
	__asm        mov    eax, 1;
	__asm        jmp    _T23a;
// LINE 492:
_T23a:
}

// FUNCTION: COPTER_D 0x0042ed67
void Sound::SetSoundFile(const /*packed*/ class basic_string<char>& sNewSoundFile) {
// LINE 502:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    near ptr 0x0042EDF3;

	__asm        jmp    near ptr 0x0042EDF8;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042EE09;

	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    near ptr 0x0042EE13;

	__asm        jmp    near ptr 0x0042EE18;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    near ptr 0x0042EE5E;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042EEA5;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042EF00;

	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042EF1D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this->sSoundFile.reference = 0x0;
_T1ce:
	__asm        jmp    near ptr 0x0042EF3A;
// LINE 503:
	this->bLooping = 0x0;
// LINE 504:
	this->bUnloadBeforeNextPlay = 0x1;
// LINE 505:
	__asm        jmp    near ptr 0x0042EF53;
}

// FUNCTION: COPTER_D 0x0042ef5a
int32_t Sound::GetSoundType() {
// LINE 512:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042EF6D;
// LINE 513:
}

// FUNCTION: COPTER_D 0x0042ef72
unsigned long Sound::GetTotalMemoryUsage() {
// LINE 520:
	__asm        mov    eax, Sound::lTotalMemoryUsage;
	__asm        jmp    near ptr 0x0042EF82;
// LINE 521:
}

// FUNCTION: COPTER_D 0x0042ef87
void DigitalSound::DigitalSound() {
	/*bp-0x4*/   int32_t i;


	__asm        mov    ecx, this;
	__asm        call   Sound::Sound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 539:
	this->nStreamingType = 0x0;
// LINE 544:
	this->cbSize = 0x0;
// LINE 546:
	this->lpStreamBufferInfo = 0x0;
// LINE 547:
	this->dwDesiredBufferDescFlags = 0xe0;
// LINE 548:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 549:
	__asm        mov    i, 0;
	__asm        jmp    _T5e;
_T5b:
	__asm        inc    i;
_T5e:
	__asm        cmp    i, 8;
	__asm        jge    _T7b;
// LINE 550:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
	__asm        jmp    _T5b;
// LINE 556:
_T7b:
	__asm        jmp    near ptr 0x0042F007;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042f00f
void DigitalSound::DigitalSound(const /*packed*/ class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
	/*bp-0x4*/   int32_t i;


	__asm        mov    ecx, this;
	__asm        call   Sound::Sound;
	__asm        mov    eax, nNewStreamingType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 570:
	this->cbSize = 0x0;
// LINE 572:
	this->lpStreamBufferInfo = 0x0;
// LINE 573:
	this->dwDesiredBufferDescFlags = 0xe0;
// LINE 574:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     _T206;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tdf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tdf;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tbf;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Tbf:
	__asm        jmp    near ptr 0x0042F0D3;

	__asm        jmp    near ptr 0x0042F0D8;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042F0E9;

	__asm        jmp    _Tdf;
_Tdf:
	__asm        jmp    near ptr 0x0042F0F3;

	__asm        jmp    near ptr 0x0042F0F8;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T113;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T206;
_T113:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1fc;

	__asm        jmp    near ptr 0x0042F13E;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1d6;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042F185;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T19b;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1a7;

	__asm        jmp    _T1a7;
_T19b:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T1a7;
_T1a7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042F1E0;

	__asm        jmp    _T1df;
_T1d6:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1df:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042F1FD;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T206;
_T1fc:
	this->sSoundFile.reference = 0x0;
_T206:
	__asm        jmp    near ptr 0x0042F21A;
// LINE 575:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 576:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 1;
	__asm        jne    _T231;
// LINE 577:
	this->bStreaming = 0x1;
// LINE 578:
	__asm        jmp    _T24c;
_T231:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 2;
	__asm        jne    _T24c;
// LINE 579:
	__asm        mov    ecx, this;
	__asm        call   DigitalSound::ShouldWeStream;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 580:
_T24c:
	__asm        mov    i, 0;
	__asm        jmp    _T25b;
_T258:
	__asm        inc    i;
_T25b:
	__asm        cmp    i, 8;
	__asm        jge    _T278;
// LINE 581:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
	__asm        jmp    _T258;
// LINE 587:
_T278:
	__asm        jmp    near ptr 0x0042F28C;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042f296
void DigitalSound::DigitalSound(long lNewResID) {

	__asm        mov    ecx, this;
	__asm        call   Sound::Sound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 596:
	this->nStreamingType = 0x0;
// LINE 599:
	this->lpStreamBufferInfo = 0x0;
// LINE 601:
	this->lResID = lNewResID;
// LINE 602:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 608:
	__asm        jmp    near ptr 0x0042F2DF;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0042f2e9
void DigitalSound::~DigitalSound() {

	this-><DigitalSound+0x00> = 0x58f488;
// LINE 616:
	__asm        mov    ecx, this;
	__asm        call   DigitalSound::Unload;
// LINE 624:
	__asm        jmp    near ptr 0x0042F30B;

	__asm        mov    ecx, this;
	__asm        call   Sound::~Sound;
}

// FUNCTION: COPTER_D 0x0042f318
void DigitalSound::SetSoundFile(const /*packed*/ class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
// LINE 639:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    near ptr 0x0042F3A4;

	__asm        jmp    near ptr 0x0042F3A9;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042F3BA;

	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    near ptr 0x0042F3C4;

	__asm        jmp    near ptr 0x0042F3C9;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    near ptr 0x0042F40F;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042F456;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042F4B1;

	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042F4CE;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this->sSoundFile.reference = 0x0;
_T1ce:
	__asm        jmp    near ptr 0x0042F4EB;
// LINE 640:
	this->nStreamingType = nNewStreamingType;
// LINE 641:
	this->bLooping = 0x0;
// LINE 642:
	this->bUnloadBeforeNextPlay = 0x1;
// LINE 644:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 1;
	__asm        jne    _T207;
// LINE 645:
	this->bStreaming = 0x1;
// LINE 646:
_T207:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 2;
	__asm        jne    _T225;
// LINE 647:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 648:
_T225:
	__asm        jmp    near ptr 0x0042F542;
}

// FUNCTION: COPTER_D 0x0042f549
void DigitalSound::Unload() {
// LINE 655:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T27;
// LINE 656:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 658:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T45;
// LINE 659:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 662:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        je     _T77;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 666:
	this->lpStreamBufferInfo = 0x0;
// LINE 670:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 671:
	__asm        jmp    near ptr 0x0042F5D0;
}

// FUNCTION: COPTER_D 0x0042f5d5
/*packed*/ class DigitalSound& DigitalSound::operator=(/*packed*/ class DigitalSound& newSound) {
// LINE 683:
	__asm        mov    eax, newSound;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Sound::operator=;
// LINE 684:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0042F5F5;
// LINE 685:
}

// FUNCTION: COPTER_D 0x0042f5fc
int32_t DigitalSound::Load() {
// LINE 703:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     _T23;
// LINE 704:
	__asm        mov    eax, 1;
	__asm        jmp    _T69;
// LINE 705:
_T23:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T45;
// LINE 706:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
	__asm        jmp    _T69;
// LINE 707:
	__asm        jmp    _T62;
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T62;
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    _T69;
// LINE 709:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 710:
_T69:
}

// FUNCTION: COPTER_D 0x0042f66a
int32_t DigitalSound::LoadFromResource() {
// LINE 717:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F67D;
// LINE 718:
}

// FUNCTION: COPTER_D 0x0042f682
int32_t DigitalSound::LoadFromFile() {
	/*bp-0x4*/   unsigned long dwBufferLength;
	/*bp-0x18*/  /*packed*/ struct _MMCKINFO ckIn; // 0x14 bytes
	/*bp-0x2c*/  /*packed*/ struct _MMCKINFO ckInRiff; // 0x14 bytes
	/*bp-0x30*/  void * __ptr32 hmmioIn;
	/*bp-0x34*/  int32_t bReturnValue;
	/*bp-0x38*/  unsigned char * pbBufferData2;
	/*bp-0x3c*/  unsigned long dwBufferLength2;
	/*bp-0x40*/  unsigned char * pbBufferData;
	/*bp-0x44*/  uint32_t cbActualRead;
	/*bp-0x48*/  long hResult;

// LINE 735:
	bReturnValue = 0x1;
// LINE 737:
	pbBufferData = 0x0;
// LINE 738:
	pbBufferData2 = 0x0;
// LINE 758:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T49;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49:
	__asm        jmp    near ptr 0x0042F6D0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x0042F6EE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Te5;

	__asm        jmp    near ptr 0x0042F703;

	__asm        jmp    near ptr 0x0042F708;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tab;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _Tb7;

	__asm        jmp    _Tb7;
_Tab:
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    _Tb7;
_Tb7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Te5;
_Te5:
	__asm        jmp    near ptr 0x0042F76C;

	__asm        mov    byte ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x0042F775;

	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0042F780;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042F7A1;

	__asm        jmp    near ptr 0x0042F7A6;

	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    eax, hmmioIn;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   WaveOpenFile;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T151;
// LINE 759:
	__asm        xor    eax, eax;
	__asm        jmp    _T302;
// LINE 764:
_T151:
	__asm        push   0;
	__asm        mov    eax, ckInRiff.dwDataOffset;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T180;
// LINE 765:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 766:
	__asm        xor    eax, eax;
	__asm        jmp    _T302;
// LINE 770:
_T180:
	ckIn.ckid = 0x61746164;
// LINE 771:
	__asm        push   0x10;
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        test   eax, eax;
	__asm        je     _T1b6;
// LINE 772:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 773:
	__asm        xor    eax, eax;
	__asm        jmp    _T302;
// LINE 775:
_T1b6:
	this->cbSize = ckIn.cksize;
// LINE 778:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
	__asm        test   eax, eax;
	__asm        jne    _T1e5;
// LINE 779:
	bReturnValue = 0x0;
// LINE 780:
	__asm        jmp    _T2fd;

	__asm        jmp    _T2e0;
// LINE 785:
_T1e5:
	__asm        push   0;
	__asm        lea    eax, dwBufferLength2;
	__asm        push   eax;
	__asm        lea    eax, pbBufferData2;
	__asm        push   eax;
	__asm        lea    eax, dwBufferLength;
	__asm        push   eax;
	__asm        lea    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 786:
	__asm        cmp    hResult, 0;
	__asm        je     _T241;
// LINE 787:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0042F8AC;

	__asm        push   0x597F54;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   DirectSoundError::DisplayError;
// LINE 788:
	__asm        jmp    _T2f8;

	__asm        jmp    _T2e0;
// LINE 797:
_T241:
	__asm        lea    eax, cbActualRead;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        test   eax, eax;
	__asm        je     _T27b;
// LINE 798:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 799:
	__asm        xor    eax, eax;
	__asm        jmp    _T302;
// LINE 802:
_T27b:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 806:
	__asm        mov    eax, dwBufferLength2;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData2;
	__asm        push   eax;
	__asm        mov    eax, dwBufferLength;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 807:
	__asm        cmp    hResult, 0;
	__asm        je     _T2d8;
// LINE 808:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0042F943;

	__asm        push   0x597F88;
	__asm        lea    ecx, [ebp-0x50];
	__asm        call   DirectSoundError::DisplayError;
// LINE 809:
	__asm        jmp    _T2f3;

	__asm        jmp    _T2e0;
// LINE 819:
_T2d8:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    _T302;
// LINE 822:
ERROR_DONE_ROUTINE:
_T2e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 823:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    _T302;
// LINE 825:
_T2f3:
	__asm        jmp    _T2e0;
_T2f8:
	__asm        jmp    _T2e0;
_T2fd:
	__asm        jmp    _T2e0;
_T302:
}

// FUNCTION: COPTER_D 0x0042f989
int32_t DigitalSound::CreatePrimarySoundBuffer() {
	/*bp-0x14*/  /*packed*/ struct _DSBUFFERDESC dsBufferDescription; // 0x14 bytes

// LINE 843:
	__asm        push   0x14;
	__asm        push   0;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 844:
	dsBufferDescription.dwSize = 0x14;
// LINE 845:
	dsBufferDescription.dwBufferBytes = 0x0;
// LINE 846:
	dsBufferDescription.lpwfxFormat = 0x0;
// LINE 847:
	dsBufferDescription.dwFlags = 0x1;
// LINE 851:
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
	__asm        jmp    near ptr 0x0042F9D5;
// LINE 853:
}

// FUNCTION: COPTER_D 0x0042f9da
int32_t DigitalSound::CreateSoundBuffer(/*packed*/ struct _DSBUFFERDESC *dsNewBufferDescription) {
	/*bp-0x14*/  /*packed*/ struct _DSBUFFERDESC dsBufferDescription; // 0x14 bytes
	/*bp-0x18*/  long hResult;

// LINE 881:
	__asm        cmp    DigitalSound::lpDirectSound, 0;
	__asm        jne    _T20;
// LINE 882:
	__asm        xor    eax, eax;
	__asm        jmp    _T149;
// LINE 884:
_T20:
	__asm        cmp    dsNewBufferDescription, 0;
	__asm        je     _T87;
// LINE 885:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        mov    eax, dsNewBufferDescription;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 886:
	__asm        cmp    hResult, 0;
	__asm        je     _T76;
// LINE 887:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042FA39;

	__asm        push   0x597FC0;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   DirectSoundError::DisplayError;
// LINE 888:
	__asm        jmp    _T144;

	__asm        jmp    _T10f;
// LINE 893:
_T76:
	__asm        mov    eax, dsNewBufferDescription;
	__asm        mov    eax, [eax+8];
	__asm        add    Sound::lTotalMemoryUsage, eax;
// LINE 896:
	__asm        jmp    _T105;
// LINE 899:
_T87:
	dsBufferDescription.dwSize = 0x14;
// LINE 900:
	dsBufferDescription.dwFlags = this->dwDesiredBufferDescFlags;
// LINE 901:
	dsBufferDescription.dwBufferBytes = this->cbSize;
// LINE 902:
	dsBufferDescription.dwReserved = 0x0;
// LINE 903:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    dsBufferDescription.lpwfxFormat, eax;
// LINE 905:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 906:
	__asm        cmp    hResult, 0;
	__asm        je     _Tfc;
// LINE 907:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0042FABF;

	__asm        push   0x598008;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   DirectSoundError::DisplayError;
// LINE 908:
	__asm        jmp    _T13f;

	__asm        jmp    _T10f;
// LINE 913:
_Tfc:
	__asm        mov    eax, dsBufferDescription.dwBufferBytes;
	__asm        add    Sound::lTotalMemoryUsage, eax;
// LINE 916:
_T105:
	__asm        mov    eax, 1;
	__asm        jmp    _T149;
// LINE 919:
ERROR_IN_ROUTINE:
_T10f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T138;
// LINE 920:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 921:
	this->lpSound[0] = 0x0;
// LINE 924:
_T138:
	__asm        xor    eax, eax;
	__asm        jmp    _T149;
// LINE 925:
_T13f:
	__asm        jmp    _T10f;
_T144:
	__asm        jmp    _T10f;
_T149:
}

// FUNCTION: COPTER_D 0x0042fb2a
int32_t DigitalSound::ReleaseSoundBuffer() {
	/*bp-0x4*/   int32_t i;

// LINE 939:
	i = 0x0;
// LINE 943:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     _T34;
// LINE 948:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        neg    eax;
	__asm        sub    Sound::lTotalMemoryUsage, eax;
// LINE 953:
_T34:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     _T7c;

	__asm        cmp    i, 8;
	__asm        jge    _T7c;
// LINE 954:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 955:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
// LINE 956:
	__asm        jmp    _T34;
// LINE 957:
_T7c:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FBB0;
// LINE 958:
}

// FUNCTION: COPTER_D 0x0042fbb5
int32_t DigitalSound::GetPan(long * lPan) {
	/*bp-0x4*/   long hResult;

// LINE 980:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T5b;
// LINE 981:
	__asm        mov    eax, lPan;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    hResult, eax;
// LINE 982:
	__asm        cmp    hResult, 0;
	__asm        je     _T5b;
// LINE 983:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FBFC;

	__asm        push   0x598050;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 984:
	__asm        xor    eax, eax;
	__asm        jmp    _T65;
// LINE 987:
_T5b:
	__asm        mov    eax, 1;
	__asm        jmp    _T65;
// LINE 989:
_T65:
}

// FUNCTION: COPTER_D 0x0042fc21
int32_t DigitalSound::SetPan(long lNewPan) {
	/*bp-0x4*/   long hResult;

// LINE 1009:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T83;
// LINE 1010:
	__asm        cmp    lNewPan, 0xFFFFD8F0;
	__asm        jge    _T2d;
// LINE 1011:
	lNewPan = 0xffffd8f0;
// LINE 1012:
_T2d:
	__asm        cmp    lNewPan, 0x2710;
	__asm        jle    _T41;
// LINE 1013:
	lNewPan = 0x2710;
// LINE 1014:
_T41:
	__asm        mov    eax, lNewPan;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x40];
	__asm        mov    hResult, eax;
// LINE 1015:
	__asm        cmp    hResult, 0;
	__asm        je     _T83;
// LINE 1016:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FC90;

	__asm        push   0x598084;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1017:
	__asm        xor    eax, eax;
	__asm        jmp    _T8d;
// LINE 1020:
_T83:
	__asm        mov    eax, 1;
	__asm        jmp    _T8d;
// LINE 1022:
_T8d:
}

// FUNCTION: COPTER_D 0x0042fcb5
int32_t DigitalSound::GetFrequency(long * lFrequency) {
	/*bp-0x4*/   long hResult;

// LINE 1041:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T5b;
// LINE 1042:
	__asm        mov    eax, lFrequency;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x20];
	__asm        mov    hResult, eax;
// LINE 1043:
	__asm        cmp    hResult, 0;
	__asm        je     _T5b;
// LINE 1044:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FCFC;

	__asm        push   0x5980B8;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1045:
	__asm        xor    eax, eax;
	__asm        jmp    _T65;
// LINE 1048:
_T5b:
	__asm        mov    eax, 1;
	__asm        jmp    _T65;
// LINE 1050:
_T65:
}

// FUNCTION: COPTER_D 0x0042fd21
int32_t DigitalSound::SetFrequency(long lNewFrequency) {
	/*bp-0x4*/   long hResult;

// LINE 1067:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T80;
// LINE 1068:
	__asm        cmp    lNewFrequency, 0x64;
	__asm        jge    _T2a;
// LINE 1069:
	lNewFrequency = 0x64;
// LINE 1070:
_T2a:
	__asm        cmp    lNewFrequency, 0x186A0;
	__asm        jle    _T3e;
// LINE 1071:
	lNewFrequency = 0x186a0;
// LINE 1072:
_T3e:
	__asm        mov    eax, lNewFrequency;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        mov    hResult, eax;
// LINE 1073:
	__asm        cmp    hResult, 0;
	__asm        je     _T80;
// LINE 1074:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FD8D;

	__asm        push   0x5980F8;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1075:
	__asm        xor    eax, eax;
	__asm        jmp    _T8a;
// LINE 1078:
_T80:
	__asm        mov    eax, 1;
	__asm        jmp    _T8a;
// LINE 1080:
_T8a:
}

// FUNCTION: COPTER_D 0x0042fdb2
int32_t DigitalSound::GetVolume(long * lVolume) {
	/*bp-0x4*/   long hResult;

// LINE 1099:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T6e;
// LINE 1100:
	__asm        mov    eax, lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    hResult, eax;
// LINE 1101:
	__asm        cmp    hResult, 0;
	__asm        je     _T5b;
// LINE 1102:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FDF9;

	__asm        push   0x598138;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1103:
	__asm        xor    eax, eax;
	__asm        jmp    _T75;
// LINE 1105:
_T5b:
	__asm        mov    eax, lVolume;
	__asm        add    dword ptr [eax], 0x2710;
// LINE 1106:
	__asm        mov    eax, 1;
	__asm        jmp    _T75;
// LINE 1108:
_T6e:
	__asm        xor    eax, eax;
	__asm        jmp    _T75;
// LINE 1110:
_T75:
}

// FUNCTION: COPTER_D 0x0042fe2e
int32_t DigitalSound::SetVolume(long lNewVolume) {
	/*bp-0x4*/   long hResult;

// LINE 1128:
	this->lVolume = lNewVolume;
// LINE 1129:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T75;
// LINE 1130:
	__asm        sub    lNewVolume, 0x2710;
// LINE 1131:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x3C];
	__asm        mov    hResult, eax;
// LINE 1132:
	__asm        cmp    hResult, 0;
	__asm        je     _T6b;
// LINE 1133:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FE85;

	__asm        push   0x598174;
	__asm        lea    ecx, [ebp-8];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1134:
	__asm        xor    eax, eax;
	__asm        jmp    _T7c;
// LINE 1136:
_T6b:
	__asm        mov    eax, 1;
	__asm        jmp    _T7c;
// LINE 1138:
_T75:
	__asm        xor    eax, eax;
	__asm        jmp    _T7c;
// LINE 1140:
_T7c:
}

// FUNCTION: COPTER_D 0x0042feb1
int32_t DigitalSound::SetPosition(long lX, long lY, long lZ) {
	/*bp-0x4*/   long lDistance;
	/*bp-0x8*/   long lNewVolume;

// LINE 1171:
	__asm        mov    eax, lZ;
	__asm        imul   eax, lZ;
	__asm        mov    ecx, lY;
	__asm        imul   ecx, lY;
	__asm        add    eax, ecx;
	__asm        mov    ecx, lX;
	__asm        imul   ecx, lX;
	__asm        add    eax, ecx;
	__asm        mov    lDistance, eax;
// LINE 1172:
	__asm        cmp    lDistance, 0x2FFFE4;
	__asm        jl     _T47;
// LINE 1173:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    _T99;
// LINE 1177:
_T47:
	__asm        mov    eax, lDistance;
	__asm        mov    [ebp-0x10], eax;
	__asm        fild   dword ptr [ebp-0x10];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        call   0x0056EBE8;
	__asm        mov    lDistance, eax;
// LINE 1182:
	__asm        mov    eax, lDistance;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, 0x6ED;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    lNewVolume, eax;
// LINE 1184:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    _T99;
// LINE 1185:
_T99:
}

// FUNCTION: COPTER_D 0x0042ff51
long DigitalSound::GetOriginalFrequency() {
// LINE 1194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        jmp    near ptr 0x0042FF68;
// LINE 1196:
}

// FUNCTION: COPTER_D 0x0042ff6d
long DigitalSound::IsPlaying() {
// LINE 1221:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        jmp    near ptr 0x0042FF8B;
// LINE 1223:
}

// FUNCTION: COPTER_D 0x0042ff90
long DigitalSound::IsPlaying(/*packed*/ struct IDirectSoundBuffer **lplpSoundPlaying) {
	/*bp-0x4*/   unsigned long dwStatus;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   long hResult;

// LINE 1230:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 8;
	__asm        jge    _Tbc;
// LINE 1231:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     _Tb0;
// LINE 1232:
	__asm        lea    eax, dwStatus;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x24];
	__asm        mov    hResult, eax;
// LINE 1233:
	__asm        cmp    hResult, 0;
	__asm        je     _T7e;
// LINE 1234:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042FFFC;

	__asm        push   0x5981B0;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1235:
	__asm        jmp    _T18;
// LINE 1241:
_T7e:
	__asm        test   reinterpret_cast<uint8_t>(dwStatus), 1;
	__asm        je     _Tab;
// LINE 1242:
	__asm        cmp    lplpSoundPlaying, 0;
	__asm        je     _Ta1;
// LINE 1243:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    ecx, lplpSoundPlaying;
	__asm        mov    [ecx], eax;
// LINE 1244:
_Ta1:
	__asm        mov    eax, 1;
	__asm        jmp    _Tc3;
// LINE 1247:
_Tab:
	__asm        jmp    _Tb7;
// LINE 1248:
_Tb0:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc3;
// LINE 1249:
_Tb7:
	__asm        jmp    _T18;
// LINE 1250:
_Tbc:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc3;
// LINE 1251:
_Tc3:
}

// FUNCTION: COPTER_D 0x0043005a
long DigitalSound::Play(long bPlayLooping, int32_t nDuplicateType) {
	/*bp-0x4*/   /*packed*/ struct IDirectSoundBuffer *lpSoundBufferToPlay;
	/*bp-0x8*/   unsigned long dwLooped;
	/*bp-0xc*/   long hResult;

// LINE 1271:
	dwLooped = 0x0;
// LINE 1274:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     _T35;
// LINE 1275:
	this->bUnloadBeforeNextPlay = 0x0;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 1280:
_T35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     _T52;
// LINE 1281:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
	__asm        jmp    _T298;
// LINE 1285:
_T52:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        jne    _T79;
// LINE 1286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        jne    _T79;
// LINE 1287:
	__asm        xor    eax, eax;
	__asm        jmp    _T298;
// LINE 1290:
_T79:
	__asm        cmp    nDuplicateType, 0;
	__asm        jne    _T8c;
// LINE 1291:
	nDuplicateType = this->nSoundDuplicateType;
// LINE 1292:
_T8c:
	__asm        cmp    bPlayLooping, 0;
	__asm        je     _Ta0;
// LINE 1293:
	this->bLooping = 0x1;
// LINE 1294:
_Ta0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _Tb4;
// LINE 1295:
	dwLooped = 0x1;
// LINE 1298:
_Tb4:
	__asm        lea    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        je     _T16d;
// LINE 1299:
	__asm        cmp    nDuplicateType, 1;
	__asm        jne    _T127;
// LINE 1300:
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x34];
// LINE 1303:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    _T118;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _T118;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T118;
// LINE 1304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1305:
_T118:
	__asm        mov    eax, 1;
	__asm        jmp    _T298;
// LINE 1307:
	__asm        jmp    _T168;
_T127:
	__asm        cmp    nDuplicateType, 2;
	__asm        jne    _T140;
// LINE 1308:
	__asm        mov    eax, 1;
	__asm        jmp    _T298;
// LINE 1310:
	__asm        jmp    _T168;
_T140:
	__asm        cmp    nDuplicateType, 3;
	__asm        jne    _T168;
// LINE 1314:
	__asm        lea    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
	__asm        test   eax, eax;
	__asm        jne    _T168;
// LINE 1315:
	__asm        xor    eax, eax;
	__asm        jmp    _T298;
// LINE 1318:
_T168:
	__asm        jmp    _T176;
// LINE 1319:
_T16d:
	lpSoundBufferToPlay = this->lpSound[0];
// LINE 1321:
_T176:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0x2710;
	__asm        je     _T198;
// LINE 1322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 1324:
_T198:
	__asm        mov    eax, dwLooped;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     _T259;
// LINE 1325:
	__asm        cmp    hResult, 0x88780096;
	__asm        jne    _T252;
// LINE 1326:
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        jne    _T252;
// LINE 1327:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00430244;

	__asm        push   0x5981E8;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1328:
	__asm        mov    eax, dwLooped;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        jne    _T252;
// LINE 1331:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    _T248;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _T248;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T248;
// LINE 1332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1333:
_T248:
	__asm        mov    eax, 1;
	__asm        jmp    _T298;
// LINE 1338:
_T252:
	__asm        xor    eax, eax;
	__asm        jmp    _T298;
// LINE 1342:
_T259:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    _T28e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _T28e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T28e;
// LINE 1343:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1344:
_T28e:
	__asm        mov    eax, 1;
	__asm        jmp    _T298;
// LINE 1346:
_T298:
}

// FUNCTION: COPTER_D 0x004302f9
int32_t DigitalSound::GetSoundAliasToPlay(/*packed*/ struct IDirectSoundBuffer **lplpSoundBufferToPlay) {
	/*bp-0x4*/   unsigned long dwStatus;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   long hResult;

// LINE 1373:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 8;
	__asm        jge    _T114;
// LINE 1374:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     _Ta6;
// LINE 1375:
	__asm        lea    eax, dwStatus;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x24];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     _T7e;
// LINE 1376:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00430365;

	__asm        push   0x598218;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1377:
	__asm        jmp    _T18;
// LINE 1379:
_T7e:
	__asm        cmp    dwStatus, 0;
	__asm        jne    _Ta1;
// LINE 1380:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    ecx, lplpSoundBufferToPlay;
	__asm        mov    [ecx], eax;
// LINE 1381:
	__asm        mov    eax, 1;
	__asm        jmp    _T11b;
// LINE 1384:
_Ta1:
	__asm        jmp    _T10f;
// LINE 1385:
_Ta6:
	__asm        cmp    DigitalSound::lpDirectSound, 0;
	__asm        jne    _Tba;
// LINE 1386:
	__asm        xor    eax, eax;
	__asm        jmp    _T11b;
// LINE 1387:
_Tba:
	__asm        mov    eax, lplpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     _T105;
// LINE 1388:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004303EA;

	__asm        push   0x59824C;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1389:
	__asm        xor    eax, eax;
	__asm        jmp    _T11b;
// LINE 1391:
_T105:
	__asm        mov    eax, 1;
	__asm        jmp    _T11b;
// LINE 1393:
_T10f:
	__asm        jmp    _T18;
// LINE 1394:
_T114:
	__asm        xor    eax, eax;
	__asm        jmp    _T11b;
// LINE 1396:
_T11b:
}

// FUNCTION: COPTER_D 0x0043041b
long DigitalSound::Stop() {
	/*bp-0x4*/   int32_t bWasPlaying;
	/*bp-0x8*/   int32_t i;

// LINE 1414:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    bWasPlaying, eax;
// LINE 1416:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     _T37;
// LINE 1417:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        jmp    _Tcc;
// LINE 1419:
_T37:
	__asm        mov    i, 0;
	__asm        jmp    _T46;
_T43:
	__asm        inc    i;
_T46:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     _T80;

	__asm        cmp    i, 8;
	__asm        jge    _T80;
// LINE 1424:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1425:
	__asm        jmp    _T43;
// LINE 1426:
_T80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T9b;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 1428:
_T9b:
	__asm        cmp    bWasPlaying, 0;
	__asm        je     _Tc2;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _Tc2;
// LINE 1429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        add    esp, 4;
// LINE 1430:
_Tc2:
	__asm        mov    eax, 1;
	__asm        jmp    _Tcc;
// LINE 1432:
_Tcc:
}

// FUNCTION: COPTER_D 0x004304ec
long DigitalSound::ShouldWeStream() {
	/*bp-0x4*/   unsigned long dwFileSize;
	/*bp-0x8c*/  /*packed*/ struct _OFSTRUCT ofStruct; // 0x88 bytes
	/*bp-0x90*/  int32_t hFile;

// LINE 1452:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T4c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4c:
	__asm        jmp    near ptr 0x0043053D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430561;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T112;

	__asm        jmp    near ptr 0x00430579;

	__asm        jmp    near ptr 0x0043057E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _Tcf;

	__asm        jmp    _Tcf;
_Tc0:
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T112;
_T112:
	__asm        jmp    near ptr 0x00430603;

	__asm        mov    byte ptr [ebp-0x98], 0;
	__asm        jmp    near ptr 0x0043060F;

	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x00430620;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00430650;

	__asm        jmp    near ptr 0x00430655;

	__asm        push   0;
	__asm        lea    eax, ofStruct.cBytes;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3638];
	__asm        mov    hFile, eax;
// LINE 1453:
	__asm        cmp    hFile, 0xFFFFFFFF;
	__asm        jne    _T19c;
// LINE 1454:
	__asm        xor    eax, eax;
	__asm        jmp    _T1d9;
// LINE 1455:
_T19c:
	__asm        push   0;
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3648];
	__asm        mov    dwFileSize, eax;
// LINE 1457:
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C374C];
// LINE 1459:
	__asm        cmp    dwFileSize, 0x30D40;
	__asm        jb     _T1d2;
// LINE 1460:
	__asm        mov    eax, 1;
	__asm        jmp    _T1d9;
// LINE 1461:
_T1d2:
	__asm        xor    eax, eax;
	__asm        jmp    _T1d9;
// LINE 1463:
_T1d9:
}

// FUNCTION: COPTER_D 0x004306ca
long DigitalSound::InitializeStreamBuffer(long bStopIfCurrentlyPlaying) {
	/*bp-0x14*/  /*packed*/ struct _DSBUFFERDESC dsBufferDescription; // 0x14 bytes
	/*bp-0x18*/  long hResult;

// LINE 1491:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T40;
// LINE 1492:
	__asm        cmp    bStopIfCurrentlyPlaying, 0;
	__asm        je     _T39;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 1494:
	__asm        jmp    _T40;
// LINE 1495:
_T39:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1498:
_T40:
	__asm        cmp    DigitalSound::lpDirectSound, 0;
	__asm        jne    _T54;
// LINE 1499:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1500:
_T54:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        jne    _T71;
// LINE 1501:
	__asm        push   0x5C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x72], eax;
// LINE 1502:
_T71:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        jne    _T85;
// LINE 1503:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1512:
_T85:
	this->lpStreamBufferInfo->hmmio = 0x0;
// LINE 1513:
	this->lpStreamBufferInfo->dwBufferSize = 0x0;
// LINE 1514:
	this->lpStreamBufferInfo->dwBufferSegSize = 0x0;
// LINE 1515:
	this->lpStreamBufferInfo->dwNextWriteOffset = 0x0;
// LINE 1516:
	this->lpStreamBufferInfo->dwPlayLast = 0x0;
// LINE 1517:
	this->lpStreamBufferInfo->dwProgress = 0x0;
// LINE 1518:
	this->lpStreamBufferInfo->bDonePlaying = 0x1;
// LINE 1519:
	this->lpStreamBufferInfo->bFoundEnd = 0x0;
// LINE 1520:
	this->lpStreamBufferInfo->nRemainingSegments = 0x0;
// LINE 1521:
	this->lpStreamBufferInfo->uTimerID = 0x0;
// LINE 1522:
	this->lpStreamBufferInfo->bInTimerCallback = 0x0;
// LINE 1523:
	this->lpStreamBufferInfo->bStreamPlaying = 0x0;
// LINE 1524:
	this->lpStreamBufferInfo->bTimerInstalled = 0x0;
// LINE 1528:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T155;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T155:
	__asm        jmp    near ptr 0x00430824;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430842;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1f1;

	__asm        jmp    near ptr 0x00430857;

	__asm        jmp    near ptr 0x0043085C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1b7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1c3;

	__asm        jmp    _T1c3;
_T1b7:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T1c3;
_T1c3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1f1;
_T1f1:
	__asm        jmp    near ptr 0x004308C0;

	__asm        mov    byte ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x004308C9;

	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004308D4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004308F5;

	__asm        jmp    near ptr 0x004308FA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   WaveOpenFile;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T266;
// LINE 1529:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1533:
_T266:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x40];
	__asm        cmp    ecx, 1;
	__asm        je     _T28e;
// LINE 1534:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1535:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1538:
_T28e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     _T2a6;
// LINE 1539:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 1545:
_T2a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x2C], eax;
// LINE 1546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, 6;
	__asm        mov    eax, [eax+0x2C];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x30], eax;
// LINE 1547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        lea    eax, [eax+eax*2];
	__asm        add    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x2C], eax;
// LINE 1550:
	__asm        push   0x14;
	__asm        push   0;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1551:
	dsBufferDescription.dwSize = 0x14;
// LINE 1552:
	dsBufferDescription.dwFlags = 0xe0;
// LINE 1553:
	dsBufferDescription.dwBufferBytes = this->lpStreamBufferInfo->dwBufferSize;
// LINE 1556:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    dsBufferDescription.lpwfxFormat, eax;
// LINE 1557:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        push   eax;
	__asm        mov    eax, DigitalSound::lpDirectSound;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 1558:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1559:
	__asm        cmp    hResult, 0;
	__asm        je     _T384;
// LINE 1560:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00430A3A;

	__asm        push   0x598288;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1561:
	__asm        xor    eax, eax;
	__asm        jmp    _T3a3;
// LINE 1564:
_T384:
	this->cbSize = dsBufferDescription.dwBufferBytes;
// LINE 1565:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    Sound::lTotalMemoryUsage, eax;
// LINE 1568:
	__asm        mov    eax, 1;
	__asm        jmp    _T3a3;
// LINE 1570:
_T3a3:
}

// FUNCTION: COPTER_D 0x00430a74
long DigitalSound::PlayStream() {
	/*bp-0x4*/   uint32_t nError;
	/*bp-0x8*/   int32_t bStopIfCurrentlyPlaying;
	/*bp-0xc*/   uint32_t nActualBytesRead;
	/*bp-0x10*/  unsigned long dwLength1;
	/*bp-0x14*/  unsigned char * lpWrite2;
	/*bp-0x18*/  unsigned char * lpWrite1;
	/*bp-0x1c*/  unsigned long dwLength2;
	/*bp-0x20*/  long hResult;

// LINE 1589:
	bStopIfCurrentlyPlaying = 0x0;
// LINE 1593:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jne    _T27;
// LINE 1594:
	bStopIfCurrentlyPlaying = 0x1;
// LINE 1598:
_T27:
	__asm        mov    eax, bStopIfCurrentlyPlaying;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x78];
	__asm        test   eax, eax;
	__asm        jne    _T45;
// LINE 1599:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1606:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T6d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T6d:
	__asm        jmp    near ptr 0x00430AE6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430B04;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T109;

	__asm        jmp    near ptr 0x00430B19;

	__asm        jmp    near ptr 0x00430B1E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tcf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _Tdb;

	__asm        jmp    _Tdb;
_Tcf:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    _Tdb;
_Tdb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T109;
_T109:
	__asm        jmp    near ptr 0x00430B82;

	__asm        mov    byte ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00430B8B;

	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00430B96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00430BB7;

	__asm        jmp    near ptr 0x00430BBC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   WaveOpenFile;
	__asm        add    esp, 0x10;
	__asm        mov    nError, eax;
// LINE 1607:
	__asm        cmp    nError, 0;
	__asm        je     _T183;
// LINE 1608:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1612:
_T183:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveStartDataRead;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 1613:
	__asm        cmp    nError, 0;
	__asm        je     _T1c9;
// LINE 1615:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1616:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1621:
_T1c9:
	this->lpStreamBufferInfo->bFoundEnd = 0x0;
// LINE 1622:
	this->lpStreamBufferInfo->nRemainingSegments = 0x0;
// LINE 1627:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 1628:
	__asm        cmp    hResult, 0;
	__asm        je     _T24e;
// LINE 1629:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00430C9F;

	__asm        push   0x5982D4;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   DirectSoundError::DisplayError;
// LINE 1630:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1631:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1634:
_T24e:
	__asm        cmp    dwLength1, 0;
	__asm        je     _T39d;
// LINE 1636:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1637:
	__asm        cmp    nError, 0;
	__asm        je     _T2c2;
// LINE 1638:
	__asm        push   0;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1639:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1640:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1642:
_T2c2:
	__asm        mov    eax, dwLength1;
	__asm        cmp    nActualBytesRead, eax;
	__asm        jae    _T39d;
// LINE 1646:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T34c;
// LINE 1647:
// Block start:
	/*bp-0x24*/  unsigned char * lpTemp;
	lpTemp = lpWrite1;
// LINE 1655:
_T2e1:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 1656:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength1, eax;
// LINE 1659:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveStartDataRead;
	__asm        add    esp, 0xC;
// LINE 1661:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
// LINE 1662:
	__asm        mov    eax, dwLength1;
	__asm        cmp    nActualBytesRead, eax;
	__asm        jb     _T2e1;
// LINE 1664:
// Block end:
	__asm        jmp    _T39d;
// LINE 1667:
_T34c:
	this->lpStreamBufferInfo->bFoundEnd = 0x1;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x72];
	__asm        mov    eax, nActualBytesRead;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1672:
	__asm        mov    eax, dwLength1;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1677:
_T39d:
	__asm        push   0;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 1678:
	__asm        cmp    hResult, 0;
	__asm        je     _T3e0;
// LINE 1679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1680:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1685:
_T3e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x34], eax;
// LINE 1686:
	this->lpStreamBufferInfo->bDonePlaying = 0x0;
// LINE 1690:
	this->lpStreamBufferInfo->bStreamPlaying = 0x1;
// LINE 1693:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x34];
	__asm        mov    hResult, eax;
// LINE 1694:
	__asm        cmp    hResult, 0;
	__asm        je     _T462;
// LINE 1695:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1696:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1699:
_T462:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0x2710;
	__asm        je     _T484;
// LINE 1700:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 1703:
_T484:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
// LINE 1706:
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3918];
	__asm        test   eax, eax;
	__asm        je     _T4f8;
// LINE 1708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1711:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x50], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x54], eax;
// LINE 1712:
	__asm        xor    eax, eax;
	__asm        jmp    _T53d;
// LINE 1714:
	__asm        jmp    _T533;
// LINE 1720:
_T4f8:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4310A5;
	__asm        push   0xA;
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x4C], eax;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     _T533;
// LINE 1722:
	this->lpStreamBufferInfo->bTimerInstalled = 0x1;
// LINE 1728:
_T533:
	__asm        mov    eax, 1;
	__asm        jmp    _T53d;
// LINE 1729:
_T53d:
}

// FUNCTION: COPTER_D 0x00430fb6
long DigitalSound::StopStream() {
	/*bp-0x4*/   uint32_t mmResult;

// LINE 1750:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        jne    _T23;
// LINE 1751:
	__asm        mov    eax, 1;
	__asm        jmp    _Tea;
// LINE 1753:
_T23:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        je     _Te0;
// LINE 1754:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _T95;
// LINE 1755:
	this->lpStreamBufferInfo->bTimerInstalled = 0x0;
// LINE 1757:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x4C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
	__asm        mov    mmResult, eax;
// LINE 1758:
	__asm        cmp    mmResult, 0;
	__asm        je     _T75;
// LINE 1759:
	__asm        push   0x598308;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 1760:
_T75:
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3914];
	__asm        mov    mmResult, eax;
// LINE 1761:
	__asm        cmp    mmResult, 0;
	__asm        je     _T95;
// LINE 1762:
	__asm        push   0x59832C;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 1770:
_T95:
	this->lpStreamBufferInfo->bDonePlaying = 0x1;
// LINE 1772:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _Td1;
// LINE 1773:
	this->lpStreamBufferInfo->bStreamPlaying = 0x0;
// LINE 1774:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1777:
_Td1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveCloseReadFile;
	__asm        add    esp, 4;
// LINE 1780:
_Te0:
	__asm        mov    eax, 1;
	__asm        jmp    _Tea;
// LINE 1781:
_Tea:
}

// FUNCTION: COPTER_D 0x004310a5
void StreamingBufferTimerCallback(uint32_t __formal, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
	/*bp-0x4*/   /*packed*/ class DigitalSound *digitalSoundObject;

// LINE 1798:
	digitalSoundObject = dwUser;
// LINE 1799:
	__asm        mov    eax, digitalSoundObject;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, digitalSoundObject;
	__asm        call   dword ptr [eax+0x7C];
// LINE 1800:
	__asm        jmp    near ptr 0x004310C4;
}

// FUNCTION: COPTER_D 0x004310cb
void DigitalSound::ProcessStreamingBufferTimerCallback() {
	/*bp-0x4*/   unsigned char * lpTemp;
	/*bp-0x8*/   int32_t nError;
	/*bp-0xc*/   unsigned long dwWrite;
	/*bp-0x10*/  uint32_t nActualBytesRead;
	/*bp-0x14*/  unsigned long dwLength1;
	/*bp-0x18*/  unsigned char * lpWrite2;
	/*bp-0x1c*/  unsigned long dwPlay;
	/*bp-0x20*/  unsigned char * lpWrite1;
	/*bp-0x24*/  unsigned long dwLength2;

// LINE 1813:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x58], 0;
	__asm        je     _T21;
// LINE 1814:
	__asm        jmp    _T751;
// LINE 1815:
_T21:
	this->lpStreamBufferInfo->bInTimerCallback = 0x1;
// LINE 1818:
	__asm        lea    eax, dwWrite;
	__asm        push   eax;
	__asm        lea    eax, dwPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
// LINE 1824:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    _T7f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        cmp    eax, dwPlay;
	__asm        jbe    _T7f;
// LINE 1826:
	__asm        jmp    _T74c;

	__asm        jmp    _T71c;
// LINE 1830:
_T7f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _Td1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Td1;
// LINE 1831:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    _Tc7;
// LINE 1832:
	this->lpStreamBufferInfo->bDonePlaying = 0x1;
// LINE 1833:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1835:
_Tc7:
	__asm        jmp    _T747;

	__asm        jmp    _T71c;
// LINE 1841:
_Td1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x38], ecx;
	__asm        jbe    _T106;
// LINE 1843:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        add    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x3C], eax;
// LINE 1845:
	__asm        jmp    _T11b;
// LINE 1847:
_T106:
	__asm        mov    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x3C], eax;
// LINE 1849:
_T11b:
	this->lpStreamBufferInfo->dwPlayLast = dwPlay;
// LINE 1854:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _T23d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T23d;
// LINE 1855:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        dec    dword ptr [eax+0x48];
// LINE 1857:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 1;
	__asm        jle    _T233;
// LINE 1861:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        je     _T1aa;
// LINE 1863:
	__asm        jmp    _T742;

	__asm        jmp    _T71c;
// LINE 1880:
_T1aa:
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1883:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1891:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x34], eax;
// LINE 1892:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x2C], ecx;
	__asm        ja     _T233;
// LINE 1893:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    [ecx+0x34], eax;
// LINE 1895:
_T233:
	__asm        jmp    _T73d;

	__asm        jmp    _T71c;
// LINE 1902:
_T23d:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        je     _T287;
// LINE 1904:
	__asm        jmp    _T738;

	__asm        jmp    _T71c;
// LINE 1907:
_T287:
	__asm        cmp    dwLength1, 0;
	__asm        je     _T448;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    _T448;
// LINE 1909:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1910:
	__asm        cmp    nError, 0;
	__asm        je     _T319;
// LINE 1911:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1912:
	this->lpStreamBufferInfo->bDonePlaying = 0x1;
// LINE 1913:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1914:
	__asm        jmp    _T733;

	__asm        jmp    _T71c;
// LINE 1916:
_T319:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength1, eax;
	__asm        jbe    _T443;
// LINE 1917:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T3d1;
// LINE 1919:
	this->lpStreamBufferInfo->bFoundEnd = 0x1;
// LINE 1924:
	__asm        mov    eax, dwLength1;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1927:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    _T3ac;
// LINE 1931:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1932:
	__asm        jmp    _T3cc;
// LINE 1935:
_T3ac:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1937:
_T3cc:
	__asm        jmp    _T443;
// LINE 1938:
_T3d1:
	lpTemp = lpWrite1;
// LINE 1945:
_T3d7:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 1946:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength1, eax;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveStartDataRead;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 1951:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1952:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength1, eax;
	__asm        ja     _T3d7;
// LINE 1961:
_T443:
	__asm        jmp    _T489;
_T448:
	__asm        cmp    dwLength1, 0;
	__asm        je     _T489;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T489;
// LINE 1963:
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1966:
_T489:
	__asm        cmp    dwLength2, 0;
	__asm        je     _T679;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    _T679;
// LINE 1968:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1969:
	__asm        cmp    nError, 0;
	__asm        je     _T51b;
// LINE 1970:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1971:
	this->lpStreamBufferInfo->bDonePlaying = 0x1;
// LINE 1972:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1973:
	__asm        jmp    _T72e;

	__asm        jmp    _T71c;
// LINE 1975:
_T51b:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength2, eax;
	__asm        jbe    _T674;
// LINE 1976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T602;
// LINE 1978:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        cmp    ecx, 8;
	__asm        jne    _T566;
// LINE 1979:
	__asm        mov    eax, dwLength2;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        push   0x80;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1980:
	__asm        jmp    _T590;
_T566:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        cmp    ecx, 0x10;
	__asm        jne    _T590;
// LINE 1981:
	__asm        mov    eax, dwLength2;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 1985:
_T590:
	this->lpStreamBufferInfo->bFoundEnd = 0x1;
// LINE 1986:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    _T5dd;
// LINE 1990:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1991:
	__asm        jmp    _T5fd;
// LINE 1994:
_T5dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1996:
_T5fd:
	__asm        jmp    _T674;
// LINE 1997:
_T602:
	lpTemp = lpWrite2;
// LINE 2004:
_T608:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 2005:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength2, eax;
// LINE 2008:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   WaveStartDataRead;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 2011:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 2012:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength2, eax;
	__asm        ja     _T608;
// LINE 2016:
_T674:
	__asm        jmp    _T6ba;
_T679:
	__asm        cmp    dwLength2, 0;
	__asm        je     _T6ba;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T6ba;
// LINE 2018:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 2021:
_T6ba:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 2024:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x34], eax;
// LINE 2025:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x2C], ecx;
	__asm        ja     _T71c;
// LINE 2026:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    [ecx+0x34], eax;
// LINE 2030:
END_OF_FUNCTION:
_T71c:
	this->lpStreamBufferInfo->bInTimerCallback = 0x0;
// LINE 2032:
	__asm        jmp    _T751;
_T72e:
	__asm        jmp    _T71c;
_T733:
	__asm        jmp    _T71c;
_T738:
	__asm        jmp    _T71c;
_T73d:
	__asm        jmp    _T71c;
_T742:
	__asm        jmp    _T71c;
_T747:
	__asm        jmp    _T71c;
_T74c:
	__asm        jmp    _T71c;
_T751:
}

// FUNCTION: COPTER_D 0x00431821
int32_t DigitalSound::SetCompletionNotification(void (*newSoundCompletionFunction)(long), long lNewSoundCompletionData) {
// LINE 2044:
	this->soundCompletionFunction = newSoundCompletionFunction;
// LINE 2045:
	this->lSoundCompletionData = lNewSoundCompletionData;
// LINE 2046:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00431849;
// LINE 2047:
}

// FUNCTION: COPTER_D 0x00431850
void DigitalSound::StopCompletionNotification() {
// LINE 2055:
	this->soundCompletionFunction = 0x0;
// LINE 2056:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T31;
// LINE 2057:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 2058:
_T31:
	__asm        jmp    near ptr 0x00431886;
}

// FUNCTION: COPTER_D 0x0043188b
long DigitalSound::EstimateRemainingPlayTime() {
	/*bp-0x4*/   unsigned long dwWrite;
	/*bp-0x8*/   unsigned long dwPlay;

// LINE 2075:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T57;
// LINE 2079:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+0x4E];
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x44];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        jmp    _Tb7;
// LINE 2081:
_T57:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T6e;
// LINE 2082:
	__asm        mov    eax, 0x7FFFFFFF;
	__asm        jmp    _Tb7;
// LINE 2092:
_T6e:
	__asm        lea    eax, dwWrite;
	__asm        push   eax;
	__asm        lea    eax, dwPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
// LINE 2093:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+0x4E];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x44];
	__asm        jmp    _Tb7;
// LINE 2096:
_Tb7:
}

// FUNCTION: COPTER_D 0x00431947
void CompletionEstimationTimerCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
	/*bp-0x4*/   /*packed*/ class DigitalSound *digitalSoundObject;

// LINE 2107:
	digitalSoundObject = dwUser;
// LINE 2108:
	__asm        mov    eax, digitalSoundObject;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, digitalSoundObject;
	__asm        call   dword ptr [eax+0x80];
// LINE 2109:
	__asm        jmp    near ptr 0x00431969;
}

// FUNCTION: COPTER_D 0x00431970
void DigitalSound::ProcessCompletionEstimationTimerCallback() {
// LINE 2116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T4b;
// LINE 2117:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 2118:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _T46;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        add    esp, 4;
// LINE 2120:
_T46:
	__asm        jmp    _T70;
// LINE 2126:
_T4b:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 2127:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 2128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 2129:
	__asm        jmp    _T70;
_T70:
}

// FUNCTION: COPTER_D 0x004319e5
int32_t DigitalSound::StartCompletionNotificationEstimationTimer() {
	/*bp-0x4*/   long lRemainingPlayTime;

// LINE 2138:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    _T2d;
// LINE 2139:
_T26:
	__asm        xor    eax, eax;
	__asm        jmp    _T93;
// LINE 2146:
_T2d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    lRemainingPlayTime, eax;
// LINE 2147:
	__asm        cmp    lRemainingPlayTime, 0x3E8;
	__asm        jge    _T4f;
// LINE 2154:
	lRemainingPlayTime = 0xa;
// LINE 2158:
_T4f:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3918];
	__asm        test   eax, eax;
	__asm        je     _T6b;
// LINE 2159:
	__asm        xor    eax, eax;
	__asm        jmp    _T93;
// LINE 2160:
	__asm        jmp    _T88;
// LINE 2166:
_T6b:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x431947;
	__asm        push   5;
	__asm        mov    eax, lRemainingPlayTime;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 2169:
_T88:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        jmp    _T93;
// LINE 2170:
_T93:
}

// FUNCTION: COPTER_D 0x00431a7d
void DigitalSound::StopCompletionNotificationEstimationTimer() {
// LINE 2177:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T38;
// LINE 2178:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
// LINE 2179:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 2180:
	this->nCompletionEstimationTimerSet = 0x0;
// LINE 2182:
_T38:
	__asm        jmp    near ptr 0x00431ABA;
}



// Contribution: 1:00030ac0-00030af8 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431ac0
// Sound::`scalar deleting destructor'



// Contribution: 1:00030b00-00030b1a Module: 64, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00030b20-00030b58 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431b20
// DigitalSound::`scalar deleting destructor'



// Contribution: 2:00000440-00000447 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundSystem @ 0x0058f440
//   00: SoundSystem::GetVolume @ 0x0042e32e
//   01: SoundSystem::SetVolume @ 0x0042e374
//   2 entries



// Contribution: 2:00000448-00000457 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundManager @ 0x0058f448
//   00: SoundManager::PlaySoundA @ 0x0042e612
//   01: SoundManager::StopSound @ 0x0042e663
//   02: SoundManager::StopAllSounds @ 0x0042e6a5
//   03: SoundManager::DeleteAllSounds @ 0x0042e419
//   4 entries



// Contribution: 2:00000458-00000483 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for Sound @ 0x0058f458
//   00: Sound::`scalar deleting destructor' @ 0x00431ac0
//   01: Sound::SetSoundFile @ 0x0042ed67
//   02: _purecall @ 0x0056cfa0
//   03: _purecall @ 0x0056cfa0
//   04: _purecall @ 0x0056cfa0
//   05: _purecall @ 0x0056cfa0
//   06: _purecall @ 0x0056cfa0
//   07: _purecall @ 0x0056cfa0
//   08: _purecall @ 0x0056cfa0
//   09: _purecall @ 0x0056cfa0
//   10: Sound::GetSoundType @ 0x0042ef5a
//   11 entries



// Contribution: 2:00000488-00000513 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for DigitalSound @ 0x0058f488
//   00: DigitalSound::`scalar deleting destructor' @ 0x00431b20
//   01: Sound::SetSoundFile @ 0x0042ed67
//   02: DigitalSound::Play @ 0x0043005a
//   03: DigitalSound::Stop @ 0x0043041b
//   04: DigitalSound::IsPlaying @ 0x0042ff6d
//   05: DigitalSound::SetCompletionNotification @ 0x00431821
//   06: DigitalSound::StopCompletionNotification @ 0x00431850
//   07: DigitalSound::EstimateRemainingPlayTime @ 0x0043188b
//   08: DigitalSound::GetVolume @ 0x0042fdb2
//   09: DigitalSound::SetVolume @ 0x0042fe2e
//   10: DigitalSound::GetSoundType @ 0x00431b00
//   11: DigitalSound::SetSoundFile @ 0x0042f318
//   12: DigitalSound::Load @ 0x0042f5fc
//   13: DigitalSound::LoadFromResource @ 0x0042f66a
//   14: DigitalSound::LoadFromFile @ 0x0042f682
//   15: DigitalSound::Unload @ 0x0042f549
//   16: DigitalSound::ShouldWeStream @ 0x004304ec
//   17: DigitalSound::PlayStream @ 0x00430a74
//   18: DigitalSound::StopStream @ 0x00430fb6
//   19: DigitalSound::IsPlaying @ 0x0042ff90
//   20: DigitalSound::GetPan @ 0x0042fbb5
//   21: DigitalSound::SetPan @ 0x0042fc21
//   22: DigitalSound::SetPosition @ 0x0042feb1
//   23: DigitalSound::GetOriginalFrequency @ 0x0042ff51
//   24: DigitalSound::GetFrequency @ 0x0042fcb5
//   25: DigitalSound::SetFrequency @ 0x0042fd21
//   26: DigitalSound::GetSoundAliasToPlay @ 0x004302f9
//   27: DigitalSound::CreateSoundBuffer @ 0x0042f9da
//   28: DigitalSound::CreatePrimarySoundBuffer @ 0x0042f989
//   29: DigitalSound::ReleaseSoundBuffer @ 0x0042fb2a
//   30: DigitalSound::InitializeStreamBuffer @ 0x004306ca
//   31: DigitalSound::ProcessStreamingBufferTimerCallback @ 0x004310cb
//   32: DigitalSound::ProcessCompletionEstimationTimerCallback @ 0x00431970
//   33: DigitalSound::StopCompletionNotificationEstimationTimer @ 0x00431a7d
//   34: DigitalSound::StartCompletionNotificationEstimationTimer @ 0x004319e5
//   35 entries



// Contribution: 3:00000e58-0000134d Module: 64, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597e58
unsigned long SoundSystem::dwMaxWaveFormatExSize = 0;

// GLOBAL: COPTER_D 0x00597e5c
unsigned long Sound::lTotalMemoryUsage = 0;

// GLOBAL: COPTER_D 0x00597e60
/*packed*/ struct IDirectSound *DigitalSound::lpDirectSound = { 0 /* todo */ };

