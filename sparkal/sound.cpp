// Module: sound.obj
// Source: C:\Copter\source\sparkal\sound.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class SoundSystem (forward reference);
class SoundSystem{
public:
	void SoundSystem();
	void ~SoundSystem();
	int32_t Initialize(void * __ptr32);
	void DeInitialize();
	// vtable: 0
	intro int32_t GetVolume(long *);
	// vtable: 4
	intro int32_t SetVolume(long);
	void EnableSound();
	void DisableSound();
	long IsSoundEnabled();
	long bSoundEnabled;
	static unsigned long dwMaxWaveFormatExSize;
protected:
	class DigitalSound* primarySound;
	struct IDirectSoundBuffer* lpPrimarySound;
	struct IDirectSound* lpDirectSound;
	struct _DSCAPS dsCapabilities;
};

// Type: void;

// Type: void * __ptr32;

// Type: long;

// Type: int32_t;

// Type: long *;

// Type: class SoundManager (forward reference);
class SoundManager{
public:
	Ptr to: class Sound[128] sound;
	void AddSound(class Sound*, int32_t);
	void SoundManager(const class basic_string<char>&, int32_t, int32_t);
	void SoundManager(long, int32_t);
	// vtable: 0
	intro long PlaySoundA(int32_t, long, int32_t);
	// vtable: 4
	intro void StopSound(int32_t);
	// vtable: 8
	intro void StopAllSounds();
	class Sound* GetSound(int32_t);
	void SoundManager();
	void ~SoundManager();
	// vtable: 12
	intro void DeleteAllSounds();
};

// Type: class Sound (forward reference);
class Sound{
		enum SoundSourceType {
			nSoundSourceTypeResource = 0,
			nSoundSourceTypeFile = 1,
		};
public:
	enum Sound::SoundSourceType nSoundSourceType;
		enum SoundDuplicateType {
			nSoundDuplicateDefault = 0,
			nSoundDuplicateInterrupt = 1,
			nSoundDuplicateContinue = 2,
			nSoundDuplicateOverlap = 3,
		};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*)(long) soundCompletionFunction;
	long lSoundCompletionData;
	int32_t bUnloadBeforeNextPlay;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: class DigitalSound (forward reference);
class DigitalSound : public Sound
{
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*)(long) soundCompletionFunction;
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	Ptr to: struct IDirectSoundBuffer[8] lpSound;
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long DigitalSound(struct IDirectSoundBuffer**);
public:
	virtual long DigitalSound();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: uint32_t;

// Type: unsigned char *;

// Type: struct _MMCKINFO;
class _MMCKINFO{
public:
	unsigned long ckid;
	unsigned long cksize;
	unsigned long fccType;
	unsigned long dwDataOffset;
	unsigned long dwFlags;
};

// Type: struct _DSBUFFERDESC;
class _DSBUFFERDESC{
public:
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwBufferBytes;
	unsigned long dwReserved;
	struct tWAVEFORMATEX* lpwfxFormat;
};

// Type: struct _DSBUFFERDESC (forward reference);

// Type: struct IDirectSoundBuffer (forward reference);
class IDirectSoundBuffer : public IUnknown
{
public:
	// vtable: 0
	// calltype: NearStd
	intro long QueryInterface(const struct _GUID&, void * __ptr32*);
	// vtable: 4
	// calltype: NearStd
	intro unsigned long AddRef();
	// vtable: 8
	// calltype: NearStd
	intro unsigned long Release();
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*);
	// calltype: NearStd
	virtual unsigned long AddRef();
	// calltype: NearStd
	virtual unsigned long Release();
	// vtable: 12
	// calltype: NearStd
	intro long GetCaps(struct _DSBCAPS*);
	// vtable: 16
	// calltype: NearStd
	intro long GetCurrentPosition(unsigned long *, unsigned long *);
	// vtable: 20
	// calltype: NearStd
	intro long GetFormat(struct tWAVEFORMATEX*, unsigned long, unsigned long *);
	// vtable: 24
	// calltype: NearStd
	intro long GetVolume(long *);
	// vtable: 28
	// calltype: NearStd
	intro long GetPan(long *);
	// vtable: 32
	// calltype: NearStd
	intro long GetFrequency(unsigned long *);
	// vtable: 36
	// calltype: NearStd
	intro long GetStatus(unsigned long *);
	// vtable: 40
	// calltype: NearStd
	intro long Initialize(struct IDirectSound*, struct _DSBUFFERDESC*);
	// vtable: 44
	// calltype: NearStd
	intro long Lock(unsigned long, unsigned long, void * __ptr32, unsigned long *, void * __ptr32, unsigned long *, unsigned long);
	// vtable: 48
	// calltype: NearStd
	intro long Play(unsigned long, unsigned long, unsigned long);
	// vtable: 52
	// calltype: NearStd
	intro long SetCurrentPosition(unsigned long);
	// vtable: 56
	// calltype: NearStd
	intro long SetFormat(struct tWAVEFORMATEX*);
	// vtable: 60
	// calltype: NearStd
	intro long SetVolume(long);
	// vtable: 64
	// calltype: NearStd
	intro long SetPan(long);
	// vtable: 68
	// calltype: NearStd
	intro long SetFrequency(unsigned long);
	// vtable: 72
	// calltype: NearStd
	intro long Stop();
	// vtable: 76
	// calltype: NearStd
	intro long Unlock(void * __ptr32, unsigned long, void * __ptr32, unsigned long);
	// vtable: 80
	// calltype: NearStd
	intro long Restore();
};

// Type: struct _OFSTRUCT;
class _OFSTRUCT{
public:
	unsigned char cBytes;
	unsigned char fFixedDisk;
	unsigned short nErrCode;
	unsigned short Reserved1;
	unsigned short Reserved2;
	char[128] szPathName;
};

// Type: void (long, );



// Contribution: 1:0002cf60-00030abe Module: 64, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0042df60
void SoundSystem::SoundSystem() {
// LINE 87:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F440;
// LINE 89:
	__asm        cmp    dword ptr ds:[0x597E58], 0;
	__asm        jne    near ptr 0x0042DF90;
// LINE 91:
	__asm        push   0x597E58;
	__asm        push   0x32;
	__asm        push   0;
	__asm        call   0x004C4678;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 94:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 95:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 99:
	__asm        push   0x60;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x60;
// LINE 104:
	__asm        jmp    near ptr 0x0042DFDA;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042dfe2
void SoundSystem::~SoundSystem() {
// LINE 107:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F440;
// LINE 108:
	__asm        mov    ecx, this;
	__asm        call   0x0042E2CD;
// LINE 109:
	__asm        jmp    near ptr 0x0042E004;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e009
int32_t SoundSystem::Initialize(void * __ptr32 hWindow) {
	long hResult;
	int32_t bReturnValue;

// LINE 119:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 122:
	__asm        mov    bReturnValue, 1;
// LINE 126:
	__asm        push   0x7A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042E046;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0042EF87;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0042E050;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    word ptr [eax+0x40], 1;
// LINE 135:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    word ptr [eax+0x42], 2;
// LINE 136:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    dword ptr [eax+0x44], 0x5622;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    dword ptr [eax+0x48], 0xAC44;
// LINE 138:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    word ptr [eax+0x4C], 2;
// LINE 139:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    word ptr [eax+0x4E], 8;
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    word ptr [eax+0x50], 0;
// LINE 145:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x004C4672;
	__asm        mov    hResult, eax;
// LINE 146:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042E0F6;
// LINE 147:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042E0CE;
	__asm        push   0x597E64;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x0042DC69;
// LINE 148:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 149:
	__asm        mov    bReturnValue, 0;
// LINE 150:
	__asm        jmp    near ptr 0x0042E2C1;
	__asm        jmp    near ptr 0x0042E232;
// LINE 155:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ds:[0x597E60], eax;
// LINE 158:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    hResult, eax;
// LINE 159:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042E150;
// LINE 160:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042E132;
	__asm        push   0x597EA4;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x0042DC69;
// LINE 161:
	__asm        mov    bReturnValue, 0;
// LINE 162:
	__asm        jmp    near ptr 0x0042E2BC;
	__asm        jmp    near ptr 0x0042E232;
// LINE 168:
	__asm        push   1;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    hResult, eax;
// LINE 169:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042E197;
// LINE 170:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0042E180;
	__asm        push   0x597EDC;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   0x0042DC69;
// LINE 171:
	__asm        jmp    near ptr 0x0042E2B7;
	__asm        jmp    near ptr 0x0042E232;
// LINE 175:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x70];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042E1C1;
// LINE 176:
	__asm        mov    bReturnValue, 0;
// LINE 177:
	__asm        jmp    near ptr 0x0042E2B2;
	__asm        jmp    near ptr 0x0042E232;
// LINE 179:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0x52];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 191:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        mov    hResult, eax;
// LINE 192:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042E21E;
// LINE 193:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042E200;
	__asm        push   0x597F20;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x0042DC69;
// LINE 194:
	__asm        mov    bReturnValue, 0;
// LINE 195:
	__asm        jmp    near ptr 0x0042E2AD;
	__asm        jmp    near ptr 0x0042E232;
// LINE 197:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 198:
	__asm        jmp    near ptr 0x0042E2A8;
	__asm        jmp    near ptr 0x0042E2A0;
// LINE 201:
ERROR_CLEANUP:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042E26C;
// LINE 202:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x74];
// LINE 203:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+0x52], eax;
// LINE 205:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0042E2A0;
// LINE 206:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 207:
	__asm        mov    dword ptr ds:[0x597E60], 0;
	__asm        mov    eax, ds:[0x597E60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 216:
END_OF_ROUTINE:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    near ptr 0x0042E2C6;
// LINE 218:
	__asm        jmp    near ptr 0x0042E2A0;
	__asm        jmp    near ptr 0x0042E232;
	__asm        jmp    near ptr 0x0042E232;
	__asm        jmp    near ptr 0x0042E232;
	__asm        jmp    near ptr 0x0042E232;
	__asm        jmp    near ptr 0x0042E232;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042e2cd
void SoundSystem::DeInitialize() {
// LINE 230:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042E31A;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042E310;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0042E310;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 237:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 239:
	__asm        jmp    near ptr 0x0042E329;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e32e
int32_t SoundSystem::GetVolume(long * lVolume) {
// LINE 252:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042E366;
// LINE 254:
	__asm        mov    eax, lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x20];
// LINE 255:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042E36D;
// LINE 257:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042E36D;
// LINE 258:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042e374
int32_t SoundSystem::SetVolume(long lNewVolume) {
// LINE 271:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 272:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x24];
	__asm        jmp    near ptr 0x0042E39A;
// LINE 273:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042e3a1
void SoundManager::SoundManager() {
	int32_t i;

// LINE 283:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F448;
// LINE 285:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042E3C5;
	__asm        inc    i;
	__asm        cmp    i, 0x80;
	__asm        jge    near ptr 0x0042E3E5;
// LINE 286:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+4], 0;
	__asm        jmp    near ptr 0x0042E3C2;
// LINE 287:
	__asm        jmp    near ptr 0x0042E3EA;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e3f2
void SoundManager::~SoundManager() {
// LINE 290:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F448;
// LINE 291:
	__asm        mov    ecx, this;
	__asm        call   0x0042E419;
// LINE 292:
	__asm        jmp    near ptr 0x0042E414;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e419
void SoundManager::DeleteAllSounds() {
	int32_t i;

// LINE 295:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 297:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042E434;
	__asm        inc    i;
	__asm        cmp    i, 0x80;
	__asm        jge    near ptr 0x0042E474;
// LINE 298:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042E46F;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0042E46F;
	__asm        jmp    near ptr 0x0042E431;
// LINE 299:
	__asm        jmp    near ptr 0x0042E479;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e47e
void SoundManager::AddSound(class Sound* soundToAdd, int32_t nIndex) {
// LINE 315:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 316:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E4C9;
// LINE 317:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042E4C9;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0042E4C9;
// LINE 318:
	__asm        mov    eax, soundToAdd;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 319:
	__asm        jmp    near ptr 0x0042E4DB;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0042e4e2
void SoundManager::AddDigitalSound(long lResID, int32_t nIndex) {
	class DigitalSound* newDigitalSound;

// LINE 340:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 341:
	__asm        push   0x7A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042E519;
	__asm        mov    eax, lResID;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0042F296;
	__asm        mov    newDigitalSound, eax;
	__asm        jmp    near ptr 0x0042E520;
	__asm        mov    newDigitalSound, 0;
// LINE 342:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E55F;
// LINE 343:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042E55F;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0042E55F;
// LINE 344:
	__asm        mov    eax, newDigitalSound;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 345:
	__asm        jmp    near ptr 0x0042E571;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0042e578
void SoundManager::AddDigitalSound(const class basic_string<char>& sNewSoundFile, int32_t nIndex, int32_t nStreamingType) {
	class DigitalSound* newDigitalSound;

// LINE 347:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 348:
	__asm        push   0x7A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042E5B3;
	__asm        mov    eax, nStreamingType;
	__asm        push   eax;
	__asm        mov    eax, sNewSoundFile;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0042F00F;
	__asm        mov    newDigitalSound, eax;
	__asm        jmp    near ptr 0x0042E5BA;
	__asm        mov    newDigitalSound, 0;
// LINE 349:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E5F9;
// LINE 350:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042E5F9;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0042E5F9;
// LINE 351:
	__asm        mov    eax, newDigitalSound;
	__asm        mov    ecx, nIndex;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+4], eax;
// LINE 352:
	__asm        jmp    near ptr 0x0042E60B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0042e612
long SoundManager::PlaySoundA(int32_t nIndex, long bPlayLooping, int32_t nDuplicateType) {
// LINE 363:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 364:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E655;
// LINE 365:
	__asm        mov    eax, nDuplicateType;
	__asm        push   eax;
	__asm        mov    eax, bPlayLooping;
	__asm        push   eax;
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    edx, nIndex;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+8];
	__asm        jmp    near ptr 0x0042E65C;
// LINE 366:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042E65C;
// LINE 367:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0042e663
void SoundManager::StopSound(int32_t nIndex) {
// LINE 378:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 379:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E699;
// LINE 380:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    edx, nIndex;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+0xC];
// LINE 381:
	__asm        jmp    near ptr 0x0042E69E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042e6a5
void SoundManager::StopAllSounds() {
	int32_t i;

// LINE 392:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 394:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042E6C0;
	__asm        inc    i;
	__asm        cmp    i, 0x80;
	__asm        jge    near ptr 0x0042E6FC;
// LINE 395:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+4], 0;
	__asm        je     near ptr 0x0042E6F7;
// LINE 396:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, i;
	__asm        mov    ebx, this;
	__asm        mov    edx, [ebx+edx*4+4];
	__asm        mov    edx, [edx];
	__asm        mov    ecx, [ecx+eax*4+4];
	__asm        call   dword ptr [edx+0xC];
// LINE 397:
	__asm        jmp    near ptr 0x0042E6BD;
// LINE 398:
	__asm        jmp    near ptr 0x0042E701;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e706
void Sound::Sound() {
// LINE 413:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042E765;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042E757;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0042E76F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        jmp    near ptr 0x0042E77E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F458;
// LINE 414:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 415:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 3;
// LINE 416:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 417:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 418:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 419:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 420:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0x2710;
// LINE 421:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 422:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 423:
	__asm        jmp    near ptr 0x0042E7E6;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e7ee
void Sound::~Sound() {
// LINE 432:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F458;
// LINE 434:
	__asm        jmp    near ptr 0x0042E808;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042E894;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042E894;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042E874;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042E879;
	__asm        jmp    near ptr 0x0042E87E;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042E88F;
	__asm        jmp    near ptr 0x0042E894;
	__asm        jmp    near ptr 0x0042E899;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0042E8C1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042E8C6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042e8cb
class Sound& Sound::operator=(const class Sound& newSound) {
// LINE 443:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 444:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 445:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 446:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 447:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 448:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 449:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    ecx, newSound;
	__asm        add    ecx, 0x14;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0042EADA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042E9B3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042E9B3;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042E993;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042E998;
	__asm        jmp    near ptr 0x0042E99D;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042E9AE;
	__asm        jmp    near ptr 0x0042E9B3;
	__asm        jmp    near ptr 0x0042E9B8;
	__asm        jmp    near ptr 0x0042E9BD;
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0042E9E7;
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0042EADA;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042EAD0;
	__asm        jmp    near ptr 0x0042EA03;
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042EAAA;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042EA4A;
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042EA6F;
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0042EA7B;
	__asm        jmp    near ptr 0x0042EA7B;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0042EA7B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042EAA5;
	__asm        jmp    near ptr 0x0042EAB3;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042EAC2;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0042EADA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0042EADF;
// LINE 450:
	__asm        mov    eax, newSound;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 451:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0042EAF3;
// LINE 452:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042eafa
int32_t operator<(const class Sound& compareSound1, const class Sound& compareSound2) {
// LINE 467:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 468:
	__asm        mov    eax, compareSound2;
	__asm        mov    ecx, compareSound1;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    near ptr 0x0042EB1C;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042EB1E;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042EB23;
// LINE 469:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042eb28
int32_t operator==(const class Sound& compareSound1, const class Sound& compareSound2) {
// LINE 484:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 485:
	__asm        mov    eax, compareSound1;
	__asm        mov    ecx, compareSound2;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     near ptr 0x0042EB4A;
// LINE 486:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042ED62;
// LINE 487:
	__asm        mov    eax, compareSound1;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0042ED28;
// LINE 488:
	__asm        jmp    near ptr 0x0042EB5C;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0042EB82;
	__asm        jmp    near ptr 0x0042EB71;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0042EB89;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0042EB8E;
	__asm        jmp    near ptr 0x0042EB93;
	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042EBB8;
	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042EBC4;
	__asm        jmp    near ptr 0x0042EBC4;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0042EBC4;
	__asm        mov    eax, compareSound2;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0042EBD5;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x0042EC17;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042EC08;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042EC17;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    eax, ecx;
	__asm        jb     near ptr 0x0042EC27;
	__asm        mov    eax, ecx;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042EC2F;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0042EC7B;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042EC65;
	__asm        jmp    near ptr 0x0042EC4E;
	__asm        jmp    near ptr 0x0042EC53;
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-8];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042EC76;
	__asm        jmp    near ptr 0x0042EC6A;
	__asm        jmp    near ptr 0x0042EC6F;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0042ECFB;
	__asm        jmp    near ptr 0x0042EC80;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042ECA5;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042ECB1;
	__asm        jmp    near ptr 0x0042ECB1;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0042ECB1;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056AC90;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0042ECCD;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042ECE2;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042ECF6;
	__asm        jmp    near ptr 0x0042ECE7;
	__asm        mov    eax, compareSound1;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042ECFB;
	__asm        jmp    near ptr 0x0042ED00;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x0042ED14;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042ED16;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042ED1E;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    near ptr 0x0042ED62;
// LINE 489:
	__asm        jmp    near ptr 0x0042ED58;
	__asm        mov    eax, compareSound1;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0042ED58;
// LINE 490:
	__asm        mov    eax, compareSound1;
	__asm        mov    ecx, compareSound2;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x0042ED51;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042ED53;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042ED62;
// LINE 491:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042ED62;
// LINE 492:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042ed67
void Sound::SetSoundFile(const class basic_string<char>& sNewSoundFile) {
// LINE 501:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 502:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     near ptr 0x0042EF35;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042EE0E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042EE0E;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042EDEE;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042EDF3;
	__asm        jmp    near ptr 0x0042EDF8;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042EE09;
	__asm        jmp    near ptr 0x0042EE0E;
	__asm        jmp    near ptr 0x0042EE13;
	__asm        jmp    near ptr 0x0042EE18;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0042EE42;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0042EF35;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042EF2B;
	__asm        jmp    near ptr 0x0042EE5E;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042EF05;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042EEA5;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042EECA;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0042EED6;
	__asm        jmp    near ptr 0x0042EED6;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0042EED6;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042EF00;
	__asm        jmp    near ptr 0x0042EF0E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042EF1D;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0042EF35;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0042EF3A;
// LINE 503:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 504:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 505:
	__asm        jmp    near ptr 0x0042EF53;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042ef5a
int32_t Sound::GetSoundType() {
// LINE 511:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 512:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042EF6D;
// LINE 513:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042ef72
unsigned long Sound::GetTotalMemoryUsage() {
// LINE 519:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 520:
	__asm        mov    eax, ds:[0x597E5C];
	__asm        jmp    near ptr 0x0042EF82;
// LINE 521:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042ef87
void DigitalSound::DigitalSound() {
	int32_t i;

// LINE 538:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0042E706;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 539:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 544:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 546:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x72], 0;
// LINE 547:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x76], 0xE0;
// LINE 548:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 549:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042EFE5;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0042F002;
// LINE 550:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
	__asm        jmp    near ptr 0x0042EFE2;
// LINE 556:
	__asm        jmp    near ptr 0x0042F007;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f00f
void DigitalSound::DigitalSound(const class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
	int32_t i;

// LINE 566:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0042E706;
	__asm        mov    eax, nNewStreamingType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 570:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 572:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x72], 0;
// LINE 573:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x76], 0xE0;
// LINE 574:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     near ptr 0x0042F215;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042F0EE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042F0EE;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042F0CE;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042F0D3;
	__asm        jmp    near ptr 0x0042F0D8;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042F0E9;
	__asm        jmp    near ptr 0x0042F0EE;
	__asm        jmp    near ptr 0x0042F0F3;
	__asm        jmp    near ptr 0x0042F0F8;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0042F122;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0042F215;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042F20B;
	__asm        jmp    near ptr 0x0042F13E;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042F1E5;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042F185;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042F1AA;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042F1B6;
	__asm        jmp    near ptr 0x0042F1B6;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0042F1B6;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042F1E0;
	__asm        jmp    near ptr 0x0042F1EE;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042F1FD;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0042F215;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0042F21A;
// LINE 575:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 576:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 1;
	__asm        jne    near ptr 0x0042F240;
// LINE 577:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 578:
	__asm        jmp    near ptr 0x0042F25B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 2;
	__asm        jne    near ptr 0x0042F25B;
// LINE 579:
	__asm        mov    ecx, this;
	__asm        call   0x004304EC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 580:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042F26A;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0042F287;
// LINE 581:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
	__asm        jmp    near ptr 0x0042F267;
// LINE 587:
	__asm        jmp    near ptr 0x0042F28C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0042f296
void DigitalSound::DigitalSound(long lNewResID) {
// LINE 595:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0042E706;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 596:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 599:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x72], 0;
// LINE 601:
	__asm        mov    eax, lNewResID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 602:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 608:
	__asm        jmp    near ptr 0x0042F2DF;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042f2e9
void DigitalSound::~DigitalSound() {
// LINE 615:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F488;
// LINE 616:
	__asm        mov    ecx, this;
	__asm        call   0x0042F549;
// LINE 624:
	__asm        jmp    near ptr 0x0042F30B;
	__asm        mov    ecx, this;
	__asm        call   0x0042E7EE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f318
void DigitalSound::SetSoundFile(const class basic_string<char>& sNewSoundFile, int32_t nNewStreamingType) {
// LINE 638:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 639:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     near ptr 0x0042F4E6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042F3BF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042F3BF;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042F39F;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042F3A4;
	__asm        jmp    near ptr 0x0042F3A9;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042F3BA;
	__asm        jmp    near ptr 0x0042F3BF;
	__asm        jmp    near ptr 0x0042F3C4;
	__asm        jmp    near ptr 0x0042F3C9;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0042F3F3;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0042F4E6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0042F4DC;
	__asm        jmp    near ptr 0x0042F40F;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042F4B6;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042F456;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042F47B;
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0042F487;
	__asm        jmp    near ptr 0x0042F487;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0042F487;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042F4B1;
	__asm        jmp    near ptr 0x0042F4BF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042F4CE;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0042F4E6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0042F4EB;
// LINE 640:
	__asm        mov    eax, nNewStreamingType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
// LINE 641:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 642:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 644:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 1;
	__asm        jne    near ptr 0x0042F51F;
// LINE 645:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 1;
// LINE 646:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 2;
	__asm        jne    near ptr 0x0042F53D;
// LINE 647:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 648:
	__asm        jmp    near ptr 0x0042F542;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0042f549
void DigitalSound::Unload() {
// LINE 654:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 655:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0042F570;
// LINE 656:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042F58E;
// LINE 659:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 662:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        je     near ptr 0x0042F5C0;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x72], 0;
// LINE 670:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 671:
	__asm        jmp    near ptr 0x0042F5D0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f5d5
class DigitalSound& DigitalSound::operator=(class DigitalSound& newSound) {
// LINE 682:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 683:
	__asm        mov    eax, newSound;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0042E8CB;
// LINE 684:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0042F5F5;
// LINE 685:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042f5fc
int32_t DigitalSound::Load() {
// LINE 702:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 703:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     near ptr 0x0042F61F;
// LINE 704:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042F665;
// LINE 705:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0042F641;
// LINE 706:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
	__asm        jmp    near ptr 0x0042F665;
// LINE 707:
	__asm        jmp    near ptr 0x0042F65E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0042F65E;
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x0042F665;
// LINE 709:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F665;
// LINE 710:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f66a
int32_t DigitalSound::LoadFromResource() {
// LINE 716:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 717:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F67D;
// LINE 718:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f682
int32_t DigitalSound::LoadFromFile() {
	long hResult;
	uint32_t cbActualRead;
	unsigned char * pbBufferData;
	unsigned long dwBufferLength2;
	unsigned char * pbBufferData2;
	int32_t bReturnValue;
	void * __ptr32 hmmioIn;
	struct _MMCKINFO ckInRiff;
	struct _MMCKINFO ckIn;
	unsigned long dwBufferLength;

// LINE 733:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 735:
	__asm        mov    bReturnValue, 1;
// LINE 737:
	__asm        mov    pbBufferData, 0;
// LINE 738:
	__asm        mov    pbBufferData2, 0;
// LINE 758:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0042F6CB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042F6D0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x0042F6EE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042F767;
	__asm        jmp    near ptr 0x0042F703;
	__asm        jmp    near ptr 0x0042F708;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042F72D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x0042F739;
	__asm        jmp    near ptr 0x0042F739;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x0042F739;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042F767;
	__asm        jmp    near ptr 0x0042F76C;
	__asm        mov    byte ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x0042F775;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x0042F780;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042F7A1;
	__asm        jmp    near ptr 0x0042F7A6;
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    eax, hmmioIn;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x0048EBB0;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042F7D3;
// LINE 759:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F984;
// LINE 764:
	__asm        push   0;
	__asm        mov    eax, ckInRiff.dwDataOffset;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042F802;
// LINE 765:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 766:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F984;
// LINE 770:
	__asm        mov    ckIn.ckid, 0x61746164;
// LINE 771:
	__asm        push   0x10;
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042F838;
// LINE 772:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 773:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F984;
// LINE 775:
	__asm        mov    eax, ckIn.cksize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 778:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042F867;
// LINE 779:
	__asm        mov    bReturnValue, 0;
// LINE 780:
	__asm        jmp    near ptr 0x0042F97F;
	__asm        jmp    near ptr 0x0042F962;
// LINE 785:
	__asm        push   0;
	__asm        lea    eax, dwBufferLength2;
	__asm        push   eax;
	__asm        lea    eax, pbBufferData2;
	__asm        push   eax;
	__asm        lea    eax, dwBufferLength;
	__asm        push   eax;
	__asm        lea    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 786:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042F8C3;
// LINE 787:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0042F8AC;
	__asm        push   0x597F54;
	__asm        lea    ecx, [ebp-0x4C];
	__asm        call   0x0042DC69;
// LINE 788:
	__asm        jmp    near ptr 0x0042F97A;
	__asm        jmp    near ptr 0x0042F962;
// LINE 797:
	__asm        lea    eax, cbActualRead;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042F8FD;
// LINE 798:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 799:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042F984;
// LINE 802:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 806:
	__asm        mov    eax, dwBufferLength2;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData2;
	__asm        push   eax;
	__asm        mov    eax, dwBufferLength;
	__asm        push   eax;
	__asm        mov    eax, pbBufferData;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 807:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042F95A;
// LINE 808:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0042F943;
	__asm        push   0x597F88;
	__asm        lea    ecx, [ebp-0x50];
	__asm        call   0x0042DC69;
// LINE 809:
	__asm        jmp    near ptr 0x0042F975;
	__asm        jmp    near ptr 0x0042F962;
// LINE 819:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    near ptr 0x0042F984;
// LINE 822:
ERROR_DONE_ROUTINE:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 823:
	__asm        mov    eax, bReturnValue;
	__asm        jmp    near ptr 0x0042F984;
// LINE 825:
	__asm        jmp    near ptr 0x0042F962;
	__asm        jmp    near ptr 0x0042F962;
	__asm        jmp    near ptr 0x0042F962;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f989
int32_t DigitalSound::CreatePrimarySoundBuffer() {
	struct _DSBUFFERDESC dsBufferDescription;

// LINE 839:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 843:
	__asm        push   0x14;
	__asm        push   0;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 844:
	__asm        mov    dsBufferDescription.dwSize, 0x14;
// LINE 845:
	__asm        mov    dsBufferDescription.dwBufferBytes, 0;
// LINE 846:
	__asm        mov    dsBufferDescription.lpwfxFormat, 0;
// LINE 847:
	__asm        mov    dsBufferDescription.dwFlags, 1;
// LINE 851:
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
	__asm        jmp    near ptr 0x0042F9D5;
// LINE 853:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042f9da
int32_t DigitalSound::CreateSoundBuffer(struct _DSBUFFERDESC* dsNewBufferDescription) {
	long hResult;
	struct _DSBUFFERDESC dsBufferDescription;

// LINE 876:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 881:
	__asm        cmp    dword ptr ds:[0x597E60], 0;
	__asm        jne    near ptr 0x0042F9FA;
// LINE 882:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FB23;
// LINE 884:
	__asm        cmp    dsNewBufferDescription, 0;
	__asm        je     near ptr 0x0042FA61;
// LINE 885:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        mov    eax, dsNewBufferDescription;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 886:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FA50;
// LINE 887:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0042FA39;
	__asm        push   0x597FC0;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x0042DC69;
// LINE 888:
	__asm        jmp    near ptr 0x0042FB1E;
	__asm        jmp    near ptr 0x0042FAE9;
// LINE 893:
	__asm        mov    eax, dsNewBufferDescription;
	__asm        mov    eax, [eax+8];
	__asm        add    ds:[0x597E5C], eax;
// LINE 896:
	__asm        jmp    near ptr 0x0042FADF;
// LINE 899:
	__asm        mov    dsBufferDescription.dwSize, 0x14;
// LINE 900:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x76];
	__asm        mov    dsBufferDescription.dwFlags, eax;
// LINE 901:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    dsBufferDescription.dwBufferBytes, eax;
// LINE 902:
	__asm        mov    dsBufferDescription.dwReserved, 0;
// LINE 903:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    dsBufferDescription.lpwfxFormat, eax;
// LINE 905:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 906:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FAD6;
// LINE 907:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0042FABF;
	__asm        push   0x598008;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   0x0042DC69;
// LINE 908:
	__asm        jmp    near ptr 0x0042FB19;
	__asm        jmp    near ptr 0x0042FAE9;
// LINE 913:
	__asm        mov    eax, dsBufferDescription.dwBufferBytes;
	__asm        add    ds:[0x597E5C], eax;
// LINE 916:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FB23;
// LINE 919:
ERROR_IN_ROUTINE:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FB12;
// LINE 920:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 921:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x52], 0;
// LINE 924:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FB23;
// LINE 925:
	__asm        jmp    near ptr 0x0042FAE9;
	__asm        jmp    near ptr 0x0042FAE9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fb2a
int32_t DigitalSound::ReleaseSoundBuffer() {
	int32_t i;

// LINE 938:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 939:
	__asm        mov    i, 0;
// LINE 943:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     near ptr 0x0042FB5E;
// LINE 948:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        neg    eax;
	__asm        sub    ds:[0x597E5C], eax;
// LINE 953:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     near ptr 0x0042FBA6;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0042FBA6;
// LINE 954:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 955:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x52], 0;
// LINE 956:
	__asm        jmp    near ptr 0x0042FB5E;
// LINE 957:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FBB0;
// LINE 958:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042fbb5
int32_t DigitalSound::GetPan(long * lPan) {
	long hResult;

// LINE 976:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 980:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FC10;
// LINE 981:
	__asm        mov    eax, lPan;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    hResult, eax;
// LINE 982:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FC10;
// LINE 983:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FBFC;
	__asm        push   0x598050;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 984:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FC1A;
// LINE 987:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FC1A;
// LINE 989:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fc21
int32_t DigitalSound::SetPan(long lNewPan) {
	long hResult;

// LINE 1005:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1009:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FCA4;
// LINE 1010:
	__asm        cmp    lNewPan, 0xFFFFD8F0;
	__asm        jge    near ptr 0x0042FC4E;
// LINE 1011:
	__asm        mov    lNewPan, 0xFFFFD8F0;
// LINE 1012:
	__asm        cmp    lNewPan, 0x2710;
	__asm        jle    near ptr 0x0042FC62;
// LINE 1013:
	__asm        mov    lNewPan, 0x2710;
// LINE 1014:
	__asm        mov    eax, lNewPan;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x40];
	__asm        mov    hResult, eax;
// LINE 1015:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FCA4;
// LINE 1016:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FC90;
	__asm        push   0x598084;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 1017:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FCAE;
// LINE 1020:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FCAE;
// LINE 1022:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fcb5
int32_t DigitalSound::GetFrequency(long * lFrequency) {
	long hResult;

// LINE 1038:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1041:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FD10;
// LINE 1042:
	__asm        mov    eax, lFrequency;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x20];
	__asm        mov    hResult, eax;
// LINE 1043:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FD10;
// LINE 1044:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FCFC;
	__asm        push   0x5980B8;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 1045:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FD1A;
// LINE 1048:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FD1A;
// LINE 1050:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fd21
int32_t DigitalSound::SetFrequency(long lNewFrequency) {
	long hResult;

// LINE 1064:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1067:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FDA1;
// LINE 1068:
	__asm        cmp    lNewFrequency, 0x64;
	__asm        jge    near ptr 0x0042FD4B;
// LINE 1069:
	__asm        mov    lNewFrequency, 0x64;
// LINE 1070:
	__asm        cmp    lNewFrequency, 0x186A0;
	__asm        jle    near ptr 0x0042FD5F;
// LINE 1071:
	__asm        mov    lNewFrequency, 0x186A0;
// LINE 1072:
	__asm        mov    eax, lNewFrequency;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        mov    hResult, eax;
// LINE 1073:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FDA1;
// LINE 1074:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FD8D;
	__asm        push   0x5980F8;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 1075:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FDAB;
// LINE 1078:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FDAB;
// LINE 1080:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fdb2
int32_t DigitalSound::GetVolume(long * lVolume) {
	long hResult;

// LINE 1096:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1099:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FE20;
// LINE 1100:
	__asm        mov    eax, lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    hResult, eax;
// LINE 1101:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FE0D;
// LINE 1102:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FDF9;
	__asm        push   0x598138;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 1103:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FE27;
// LINE 1105:
	__asm        mov    eax, lVolume;
	__asm        add    dword ptr [eax], 0x2710;
// LINE 1106:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FE27;
// LINE 1108:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FE27;
// LINE 1110:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042fe2e
int32_t DigitalSound::SetVolume(long lNewVolume) {
	long hResult;

// LINE 1124:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1128:
	__asm        mov    eax, lNewVolume;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 1129:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x0042FEA3;
// LINE 1130:
	__asm        sub    lNewVolume, 0x2710;
// LINE 1131:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x3C];
	__asm        mov    hResult, eax;
// LINE 1132:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0042FE99;
// LINE 1133:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042FE85;
	__asm        push   0x598174;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042DC69;
// LINE 1134:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FEAA;
// LINE 1136:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042FEAA;
// LINE 1138:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042FEAA;
// LINE 1140:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0042feb1
int32_t DigitalSound::SetPosition(long lX, long lY, long lZ) {
	long lNewVolume;
	long lDistance;

// LINE 1165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1171:
	__asm        mov    eax, lZ;
	__asm        imul   eax, lZ;
	__asm        mov    ecx, lY;
	__asm        imul   ecx, lY;
	__asm        add    eax, ecx;
	__asm        mov    ecx, lX;
	__asm        imul   ecx, lX;
	__asm        add    eax, ecx;
	__asm        mov    lDistance, eax;
// LINE 1172:
	__asm        cmp    lDistance, 0x2FFFE4;
	__asm        jl     near ptr 0x0042FEF8;
// LINE 1173:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    near ptr 0x0042FF4A;
// LINE 1177:
	__asm        mov    eax, lDistance;
	__asm        mov    [ebp-0x10], eax;
	__asm        fild   dword ptr [ebp-0x10];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        call   0x0056EBE8;
	__asm        mov    lDistance, eax;
// LINE 1182:
	__asm        mov    eax, lDistance;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, 0x6ED;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    lNewVolume, eax;
// LINE 1184:
	__asm        mov    eax, lNewVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        jmp    near ptr 0x0042FF4A;
// LINE 1185:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0042ff51
long DigitalSound::GetOriginalFrequency() {
// LINE 1192:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        jmp    near ptr 0x0042FF68;
// LINE 1196:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042ff6d
long DigitalSound::IsPlaying() {
// LINE 1219:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1221:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        jmp    near ptr 0x0042FF8B;
// LINE 1223:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042ff90
long DigitalSound::IsPlaying(struct IDirectSoundBuffer** lplpSoundPlaying) {
	long hResult;
	int32_t i;
	unsigned long dwStatus;

// LINE 1226:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1230:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0042FFAB;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0043004C;
// LINE 1231:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     near ptr 0x00430040;
// LINE 1232:
	__asm        lea    eax, dwStatus;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x24];
	__asm        mov    hResult, eax;
// LINE 1233:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0043000E;
// LINE 1234:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0042FFFC;
	__asm        push   0x5981B0;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x0042DC69;
// LINE 1235:
	__asm        jmp    near ptr 0x0042FFA8;
// LINE 1241:
	__asm        test   reinterpret_cast<uint8_t>(dwStatus), 1;
	__asm        je     near ptr 0x0043003B;
// LINE 1242:
	__asm        cmp    lplpSoundPlaying, 0;
	__asm        je     near ptr 0x00430031;
// LINE 1243:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    ecx, lplpSoundPlaying;
	__asm        mov    [ecx], eax;
// LINE 1244:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00430053;
// LINE 1247:
	__asm        jmp    near ptr 0x00430047;
// LINE 1248:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430053;
// LINE 1249:
	__asm        jmp    near ptr 0x0042FFA8;
// LINE 1250:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430053;
// LINE 1251:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043005a
long DigitalSound::Play(long bPlayLooping, int32_t nDuplicateType) {
	long hResult;
	unsigned long dwLooped;
	struct IDirectSoundBuffer* lpSoundBufferToPlay;

// LINE 1268:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1271:
	__asm        mov    dwLooped, 0;
// LINE 1274:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0043008F;
// LINE 1275:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 1280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     near ptr 0x004300AC;
// LINE 1281:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
	__asm        jmp    near ptr 0x004302F2;
// LINE 1285:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        jne    near ptr 0x004300D3;
// LINE 1286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004300D3;
// LINE 1287:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1290:
	__asm        cmp    nDuplicateType, 0;
	__asm        jne    near ptr 0x004300E6;
// LINE 1291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    nDuplicateType, eax;
// LINE 1292:
	__asm        cmp    bPlayLooping, 0;
	__asm        je     near ptr 0x004300FA;
// LINE 1293:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 1294:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x0043010E;
// LINE 1295:
	__asm        mov    dwLooped, 1;
// LINE 1298:
	__asm        lea    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004301C7;
// LINE 1299:
	__asm        cmp    nDuplicateType, 1;
	__asm        jne    near ptr 0x00430181;
// LINE 1300:
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x34];
// LINE 1303:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00430172;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x00430172;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x00430172;
// LINE 1304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1305:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1307:
	__asm        jmp    near ptr 0x004301C2;
	__asm        cmp    nDuplicateType, 2;
	__asm        jne    near ptr 0x0043019A;
// LINE 1308:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1310:
	__asm        jmp    near ptr 0x004301C2;
	__asm        cmp    nDuplicateType, 3;
	__asm        jne    near ptr 0x004301C2;
// LINE 1314:
	__asm        lea    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x68];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004301C2;
// LINE 1315:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1318:
	__asm        jmp    near ptr 0x004301D0;
// LINE 1319:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    lpSoundBufferToPlay, eax;
// LINE 1321:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0x2710;
	__asm        je     near ptr 0x004301F2;
// LINE 1322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 1324:
	__asm        mov    eax, dwLooped;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x004302B3;
// LINE 1325:
	__asm        cmp    hResult, 0x88780096;
	__asm        jne    near ptr 0x004302AC;
// LINE 1326:
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        jne    near ptr 0x004302AC;
// LINE 1327:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00430244;
	__asm        push   0x5981E8;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x0042DC69;
// LINE 1328:
	__asm        mov    eax, dwLooped;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, lpSoundBufferToPlay;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004302AC;
// LINE 1331:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x004302A2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x004302A2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x004302A2;
// LINE 1332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1333:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1338:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1342:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x004302E8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x004302E8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x004302E8;
// LINE 1343:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 1344:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004302F2;
// LINE 1346:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004302f9
int32_t DigitalSound::GetSoundAliasToPlay(struct IDirectSoundBuffer** lplpSoundBufferToPlay) {
	long hResult;
	int32_t i;
	unsigned long dwStatus;

// LINE 1364:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1373:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00430314;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0043040D;
// LINE 1374:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     near ptr 0x0043039F;
// LINE 1375:
	__asm        lea    eax, dwStatus;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x24];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x00430377;
// LINE 1376:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00430365;
	__asm        push   0x598218;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x0042DC69;
// LINE 1377:
	__asm        jmp    near ptr 0x00430311;
// LINE 1379:
	__asm        cmp    dwStatus, 0;
	__asm        jne    near ptr 0x0043039A;
// LINE 1380:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    ecx, lplpSoundBufferToPlay;
	__asm        mov    [ecx], eax;
// LINE 1381:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00430414;
// LINE 1384:
	__asm        jmp    near ptr 0x00430408;
// LINE 1385:
	__asm        cmp    dword ptr ds:[0x597E60], 0;
	__asm        jne    near ptr 0x004303B3;
// LINE 1386:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430414;
// LINE 1387:
	__asm        mov    eax, lplpSoundBufferToPlay;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    hResult, eax;
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x004303FE;
// LINE 1388:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004303EA;
	__asm        push   0x59824C;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x0042DC69;
// LINE 1389:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430414;
// LINE 1391:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00430414;
// LINE 1393:
	__asm        jmp    near ptr 0x00430311;
// LINE 1394:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430414;
// LINE 1396:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043041b
long DigitalSound::Stop() {
	int32_t i;
	int32_t bWasPlaying;

// LINE 1409:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1414:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    bWasPlaying, eax;
// LINE 1416:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     near ptr 0x00430452;
// LINE 1417:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
	__asm        jmp    near ptr 0x004304E7;
// LINE 1419:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00430461;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        cmp    dword ptr [ecx+eax*4+0x52], 0;
	__asm        je     near ptr 0x0043049B;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0043049B;
// LINE 1424:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1425:
	__asm        jmp    near ptr 0x0043045E;
// LINE 1426:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004304B6;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 1428:
	__asm        cmp    bWasPlaying, 0;
	__asm        je     near ptr 0x004304DD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x004304DD;
// LINE 1429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        add    esp, 4;
// LINE 1430:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004304E7;
// LINE 1432:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004304ec
long DigitalSound::ShouldWeStream() {
	int32_t hFile;
	struct _OFSTRUCT ofStruct;
	unsigned long dwFileSize;

// LINE 1446:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xB4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1452:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x00430538;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043053D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430561;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004305FE;
	__asm        jmp    near ptr 0x00430579;
	__asm        jmp    near ptr 0x0043057E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004305AC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x004305BB;
	__asm        jmp    near ptr 0x004305BB;
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    near ptr 0x004305BB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004305FE;
	__asm        jmp    near ptr 0x00430603;
	__asm        mov    byte ptr [ebp-0x98], 0;
	__asm        jmp    near ptr 0x0043060F;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x00430620;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00430650;
	__asm        jmp    near ptr 0x00430655;
	__asm        push   0;
	__asm        lea    eax, ofStruct.cBytes;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3638];
	__asm        mov    hFile, eax;
// LINE 1453:
	__asm        cmp    hFile, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00430688;
// LINE 1454:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004306C5;
// LINE 1455:
	__asm        push   0;
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3648];
	__asm        mov    dwFileSize, eax;
// LINE 1457:
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C374C];
// LINE 1459:
	__asm        cmp    dwFileSize, 0x30D40;
	__asm        jb     near ptr 0x004306BE;
// LINE 1460:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004306C5;
// LINE 1461:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004306C5;
// LINE 1463:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004306ca
long DigitalSound::InitializeStreamBuffer(long bStopIfCurrentlyPlaying) {
	long hResult;
	struct _DSBUFFERDESC dsBufferDescription;

// LINE 1485:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1491:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043070A;
// LINE 1492:
	__asm        cmp    bStopIfCurrentlyPlaying, 0;
	__asm        je     near ptr 0x00430703;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 1494:
	__asm        jmp    near ptr 0x0043070A;
// LINE 1495:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1498:
	__asm        cmp    dword ptr ds:[0x597E60], 0;
	__asm        jne    near ptr 0x0043071E;
// LINE 1499:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1500:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        jne    near ptr 0x0043073B;
// LINE 1501:
	__asm        push   0x5C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x72], eax;
// LINE 1502:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        jne    near ptr 0x0043074F;
// LINE 1503:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1512:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax], 0;
// LINE 1513:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 1514:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 1515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 1516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 1517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 1518:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 1;
// LINE 1519:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 1520:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 1521:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 1522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x58], 0;
// LINE 1523:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 1524:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1528:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0043081F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00430824;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430842;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004308BB;
	__asm        jmp    near ptr 0x00430857;
	__asm        jmp    near ptr 0x0043085C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00430881;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0043088D;
	__asm        jmp    near ptr 0x0043088D;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0043088D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004308BB;
	__asm        jmp    near ptr 0x004308C0;
	__asm        mov    byte ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x004308C9;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004308D4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004308F5;
	__asm        jmp    near ptr 0x004308FA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x0048EBB0;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00430930;
// LINE 1529:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1533:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x40];
	__asm        cmp    ecx, 1;
	__asm        je     near ptr 0x00430958;
// LINE 1534:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1535:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1538:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        je     near ptr 0x00430970;
// LINE 1539:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x74];
// LINE 1545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x2C], eax;
// LINE 1546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, 6;
	__asm        mov    eax, [eax+0x2C];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x30], eax;
// LINE 1547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        lea    eax, [eax+eax*2];
	__asm        add    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x2C], eax;
// LINE 1550:
	__asm        push   0x14;
	__asm        push   0;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1551:
	__asm        mov    dsBufferDescription.dwSize, 0x14;
// LINE 1552:
	__asm        mov    dsBufferDescription.dwFlags, 0xE0;
// LINE 1553:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    dsBufferDescription.dwBufferBytes, eax;
// LINE 1556:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    dsBufferDescription.lpwfxFormat, eax;
// LINE 1557:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x52;
	__asm        push   eax;
	__asm        lea    eax, dsBufferDescription.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597E60];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    hResult, eax;
// LINE 1558:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1559:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x00430A4E;
// LINE 1560:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00430A3A;
	__asm        push   0x598288;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x0042DC69;
// LINE 1561:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1564:
	__asm        mov    eax, dsBufferDescription.dwBufferBytes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 1565:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    ds:[0x597E5C], eax;
// LINE 1568:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00430A6D;
// LINE 1570:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00430a74
long DigitalSound::PlayStream() {
	long hResult;
	unsigned long dwLength2;
	unsigned char * lpWrite1;
	unsigned char * lpWrite2;
	unsigned long dwLength1;
	uint32_t nActualBytesRead;
	int32_t bStopIfCurrentlyPlaying;
	uint32_t nError;

// LINE 1582:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1589:
	__asm        mov    bStopIfCurrentlyPlaying, 0;
// LINE 1593:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jne    near ptr 0x00430A9B;
// LINE 1594:
	__asm        mov    bStopIfCurrentlyPlaying, 1;
// LINE 1598:
	__asm        mov    eax, bStopIfCurrentlyPlaying;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x78];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00430AB9;
// LINE 1599:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1606:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x00430AE1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00430AE6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00430B04;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00430B7D;
	__asm        jmp    near ptr 0x00430B19;
	__asm        jmp    near ptr 0x00430B1E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00430B43;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00430B4F;
	__asm        jmp    near ptr 0x00430B4F;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x00430B4F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00430B7D;
	__asm        jmp    near ptr 0x00430B82;
	__asm        mov    byte ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00430B8B;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00430B96;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00430BB7;
	__asm        jmp    near ptr 0x00430BBC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x0048EBB0;
	__asm        add    esp, 0x10;
	__asm        mov    nError, eax;
// LINE 1607:
	__asm        cmp    nError, 0;
	__asm        je     near ptr 0x00430BF7;
// LINE 1608:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1612:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EDB9;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 1613:
	__asm        cmp    nError, 0;
	__asm        je     near ptr 0x00430C3D;
// LINE 1615:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1616:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1621:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 1622:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 1627:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 1628:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x00430CC2;
// LINE 1629:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00430C9F;
	__asm        push   0x5982D4;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x0042DC69;
// LINE 1630:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1631:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1634:
	__asm        cmp    dwLength1, 0;
	__asm        je     near ptr 0x00430E11;
// LINE 1636:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1637:
	__asm        cmp    nError, 0;
	__asm        je     near ptr 0x00430D36;
// LINE 1638:
	__asm        push   0;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1639:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1640:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1642:
	__asm        mov    eax, dwLength1;
	__asm        cmp    nActualBytesRead, eax;
	__asm        jae    near ptr 0x00430E11;
// LINE 1646:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00430DC0;
// LINE 1647:
// Block start:
	unsigned char * lpTemp;
	__asm        mov    eax, lpWrite1;
	__asm        mov    lpTemp, eax;
// LINE 1655:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 1656:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength1, eax;
// LINE 1659:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EDB9;
	__asm        add    esp, 0xC;
// LINE 1661:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
// LINE 1662:
	__asm        mov    eax, dwLength1;
	__asm        cmp    nActualBytesRead, eax;
	__asm        jb     near ptr 0x00430D55;
// LINE 1664:
// Block end:
	__asm        jmp    near ptr 0x00430E11;
// LINE 1667:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x44], 1;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x72];
	__asm        mov    eax, nActualBytesRead;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1672:
	__asm        mov    eax, dwLength1;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1677:
	__asm        push   0;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
	__asm        mov    hResult, eax;
// LINE 1678:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x00430E54;
// LINE 1679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1680:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1685:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x34], eax;
// LINE 1686:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 1690:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 1693:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x34];
	__asm        mov    hResult, eax;
// LINE 1694:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x00430ED6;
// LINE 1695:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1696:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1699:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0x2710;
	__asm        je     near ptr 0x00430EF8;
// LINE 1700:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 1703:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x30];
// LINE 1706:
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3918];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00430F6C;
// LINE 1708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1711:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x50], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x54], eax;
// LINE 1712:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1714:
	__asm        jmp    near ptr 0x00430FA7;
// LINE 1720:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4310A5;
	__asm        push   0xA;
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x4C], eax;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     near ptr 0x00430FA7;
// LINE 1722:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 1728:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00430FB1;
// LINE 1729:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00430fb6
long DigitalSound::StopStream() {
	uint32_t mmResult;

// LINE 1743:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1750:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x52], 0;
	__asm        jne    near ptr 0x00430FD9;
// LINE 1751:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004310A0;
// LINE 1753:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x72], 0;
	__asm        je     near ptr 0x00431096;
// LINE 1754:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     near ptr 0x0043104B;
// LINE 1755:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1757:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x4C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
	__asm        mov    mmResult, eax;
// LINE 1758:
	__asm        cmp    mmResult, 0;
	__asm        je     near ptr 0x0043102B;
// LINE 1759:
	__asm        push   0x598308;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 1760:
	__asm        push   0x32;
	__asm        call   dword ptr ds:[0x6C3914];
	__asm        mov    mmResult, eax;
// LINE 1761:
	__asm        cmp    mmResult, 0;
	__asm        je     near ptr 0x0043104B;
// LINE 1762:
	__asm        push   0x59832C;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 1770:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 1;
// LINE 1772:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x00431087;
// LINE 1773:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 1774:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x48];
// LINE 1777:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EF6F;
	__asm        add    esp, 4;
// LINE 1780:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004310A0;
// LINE 1781:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004310a5
void StreamingBufferTimerCallback(uint32_t __formal, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
	class DigitalSound* digitalSoundObject;

// LINE 1797:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1798:
	__asm        mov    eax, dwUser;
	__asm        mov    digitalSoundObject, eax;
// LINE 1799:
	__asm        mov    eax, digitalSoundObject;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, digitalSoundObject;
	__asm        call   dword ptr [eax+0x7C];
// LINE 1800:
	__asm        jmp    near ptr 0x004310C4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004310cb
void DigitalSound::ProcessStreamingBufferTimerCallback() {
	unsigned long dwLength2;
	unsigned char * lpWrite1;
	unsigned long dwPlay;
	unsigned char * lpWrite2;
	unsigned long dwLength1;
	uint32_t nActualBytesRead;
	unsigned long dwWrite;
	int32_t nError;
	unsigned char * lpTemp;

// LINE 1806:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1813:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x58], 0;
	__asm        je     near ptr 0x004310EC;
// LINE 1814:
	__asm        jmp    near ptr 0x0043181C;
// LINE 1815:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x58], 1;
// LINE 1818:
	__asm        lea    eax, dwWrite;
	__asm        push   eax;
	__asm        lea    eax, dwPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
// LINE 1824:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    near ptr 0x0043114A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        cmp    eax, dwPlay;
	__asm        jbe    near ptr 0x0043114A;
// LINE 1826:
	__asm        jmp    near ptr 0x00431817;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1830:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x0043119C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0043119C;
// LINE 1831:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    near ptr 0x00431192;
// LINE 1832:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 1;
// LINE 1833:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1835:
	__asm        jmp    near ptr 0x00431812;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1841:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x38], ecx;
	__asm        jbe    near ptr 0x004311D1;
// LINE 1843:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        add    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x3C], eax;
// LINE 1845:
	__asm        jmp    near ptr 0x004311E6;
// LINE 1847:
	__asm        mov    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x3C], eax;
// LINE 1849:
	__asm        mov    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x38], eax;
// LINE 1854:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x00431308;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x00431308;
// LINE 1855:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        dec    dword ptr [eax+0x48];
// LINE 1857:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x48], 1;
	__asm        jle    near ptr 0x004312FE;
// LINE 1861:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431275;
// LINE 1863:
	__asm        jmp    near ptr 0x0043180D;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1880:
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1883:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1891:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x34], eax;
// LINE 1892:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x2C], ecx;
	__asm        ja     near ptr 0x004312FE;
// LINE 1893:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    [ecx+0x34], eax;
// LINE 1895:
	__asm        jmp    near ptr 0x00431808;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1902:
	__asm        push   0;
	__asm        lea    eax, dwLength2;
	__asm        push   eax;
	__asm        lea    eax, lpWrite2;
	__asm        push   eax;
	__asm        lea    eax, dwLength1;
	__asm        push   eax;
	__asm        lea    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431352;
// LINE 1904:
	__asm        jmp    near ptr 0x00431803;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1907:
	__asm        cmp    dwLength1, 0;
	__asm        je     near ptr 0x00431513;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    near ptr 0x00431513;
// LINE 1909:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1910:
	__asm        cmp    nError, 0;
	__asm        je     near ptr 0x004313E4;
// LINE 1911:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1912:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 1;
// LINE 1913:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1914:
	__asm        jmp    near ptr 0x004317FE;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1916:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength1, eax;
	__asm        jbe    near ptr 0x0043150E;
// LINE 1917:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x0043149C;
// LINE 1919:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x44], 1;
// LINE 1924:
	__asm        mov    eax, dwLength1;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1927:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    near ptr 0x00431477;
// LINE 1931:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1932:
	__asm        jmp    near ptr 0x00431497;
// LINE 1935:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1937:
	__asm        jmp    near ptr 0x0043150E;
// LINE 1938:
	__asm        mov    eax, lpWrite1;
	__asm        mov    lpTemp, eax;
// LINE 1945:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 1946:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength1, eax;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EDB9;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 1951:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1952:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength1, eax;
	__asm        ja     near ptr 0x004314A2;
// LINE 1961:
	__asm        jmp    near ptr 0x00431554;
	__asm        cmp    dwLength1, 0;
	__asm        je     near ptr 0x00431554;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x00431554;
// LINE 1963:
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1966:
	__asm        cmp    dwLength2, 0;
	__asm        je     near ptr 0x00431744;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    near ptr 0x00431744;
// LINE 1968:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 1969:
	__asm        cmp    nError, 0;
	__asm        je     near ptr 0x004315E6;
// LINE 1970:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 1971:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x40], 1;
// LINE 1972:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1973:
	__asm        jmp    near ptr 0x004317F9;
	__asm        jmp    near ptr 0x004317E7;
// LINE 1975:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength2, eax;
	__asm        jbe    near ptr 0x0043173F;
// LINE 1976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x004316CD;
// LINE 1978:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        cmp    ecx, 8;
	__asm        jne    near ptr 0x00431631;
// LINE 1979:
	__asm        mov    eax, dwLength2;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        push   0x80;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1980:
	__asm        jmp    near ptr 0x0043165B;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        cmp    ecx, 0x10;
	__asm        jne    near ptr 0x0043165B;
// LINE 1981:
	__asm        mov    eax, dwLength2;
	__asm        sub    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nActualBytesRead;
	__asm        add    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1985:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x44], 1;
// LINE 1986:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, dwPlay;
	__asm        cmp    [eax+0x34], ecx;
	__asm        jae    near ptr 0x004316A8;
// LINE 1990:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    eax, [ecx+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1991:
	__asm        jmp    near ptr 0x004316C8;
// LINE 1994:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x34];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    [ecx+0x48], eax;
// LINE 1996:
	__asm        jmp    near ptr 0x0043173F;
// LINE 1997:
	__asm        mov    eax, lpWrite2;
	__asm        mov    lpTemp, eax;
// LINE 2004:
	__asm        mov    eax, nActualBytesRead;
	__asm        add    lpTemp, eax;
// LINE 2005:
	__asm        xor    eax, eax;
	__asm        sub    eax, nActualBytesRead;
	__asm        neg    eax;
	__asm        sub    dwLength2, eax;
// LINE 2008:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        push   eax;
	__asm        call   0x0048EDB9;
	__asm        add    esp, 0xC;
	__asm        mov    nError, eax;
// LINE 2011:
	__asm        lea    eax, nActualBytesRead;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, lpTemp;
	__asm        push   eax;
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0048EE25;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
// LINE 2012:
	__asm        mov    eax, nActualBytesRead;
	__asm        cmp    dwLength2, eax;
	__asm        ja     near ptr 0x004316D3;
// LINE 2016:
	__asm        jmp    near ptr 0x00431785;
	__asm        cmp    dwLength2, 0;
	__asm        je     near ptr 0x00431785;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x00431785;
// LINE 2018:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x4E];
	__asm        sub    ecx, 8;
	__asm        cmp    ecx, 1;
	__asm        sbb    eax, eax;
	__asm        and    eax, 0x80;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 2021:
	__asm        mov    eax, dwLength2;
	__asm        push   eax;
	__asm        mov    eax, lpWrite2;
	__asm        push   eax;
	__asm        mov    eax, dwLength1;
	__asm        push   eax;
	__asm        mov    eax, lpWrite1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x4C];
// LINE 2024:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        add    [ecx+0x34], eax;
// LINE 2025:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x2C], ecx;
	__asm        ja     near ptr 0x004317E7;
// LINE 2026:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    eax, [ecx+0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x72];
	__asm        sub    [ecx+0x34], eax;
// LINE 2030:
END_OF_FUNCTION:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x72];
	__asm        mov    dword ptr [eax+0x58], 0;
// LINE 2032:
	__asm        jmp    near ptr 0x0043181C;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        jmp    near ptr 0x004317E7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431821
int32_t DigitalSound::SetCompletionNotification(void (*)(long) newSoundCompletionFunction, long lNewSoundCompletionData) {
// LINE 2043:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2044:
	__asm        mov    eax, newSoundCompletionFunction;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 2045:
	__asm        mov    eax, lNewSoundCompletionData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 2046:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00431849;
// LINE 2047:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00431850
void DigitalSound::StopCompletionNotification() {
// LINE 2054:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2055:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 2056:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00431881;
// LINE 2057:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 2058:
	__asm        jmp    near ptr 0x00431886;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043188b
long DigitalSound::EstimateRemainingPlayTime() {
	unsigned long dwPlay;
	unsigned long dwWrite;

// LINE 2071:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2075:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004318E2;
// LINE 2079:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+0x4E];
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x44];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        jmp    near ptr 0x00431942;
// LINE 2081:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x004318F9;
// LINE 2082:
	__asm        mov    eax, 0x7FFFFFFF;
	__asm        jmp    near ptr 0x00431942;
// LINE 2092:
	__asm        lea    eax, dwWrite;
	__asm        push   eax;
	__asm        lea    eax, dwPlay;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x52];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
// LINE 2093:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    eax, dwPlay;
	__asm        mov    ecx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+0x4E];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x44];
	__asm        jmp    near ptr 0x00431942;
// LINE 2096:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431947
void CompletionEstimationTimerCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
	class DigitalSound* digitalSoundObject;

// LINE 2106:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2107:
	__asm        mov    eax, dwUser;
	__asm        mov    digitalSoundObject, eax;
// LINE 2108:
	__asm        mov    eax, digitalSoundObject;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, digitalSoundObject;
	__asm        call   dword ptr [eax+0x80];
// LINE 2109:
	__asm        jmp    near ptr 0x00431969;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00431970
void DigitalSound::ProcessCompletionEstimationTimerCallback() {
// LINE 2115:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004319BB;
// LINE 2117:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 2118:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x004319B6;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        add    esp, 4;
// LINE 2120:
	__asm        jmp    near ptr 0x004319E0;
// LINE 2126:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 2127:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 2128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x88];
// LINE 2129:
	__asm        jmp    near ptr 0x004319E0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004319e5
int32_t DigitalSound::StartCompletionNotificationEstimationTimer() {
	long lRemainingPlayTime;

// LINE 2135:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2138:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00431A0B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    near ptr 0x00431A12;
// LINE 2139:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431A78;
// LINE 2146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    lRemainingPlayTime, eax;
// LINE 2147:
	__asm        cmp    lRemainingPlayTime, 0x3E8;
	__asm        jge    near ptr 0x00431A34;
// LINE 2154:
	__asm        mov    lRemainingPlayTime, 0xA;
// LINE 2158:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3918];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431A50;
// LINE 2159:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431A78;
// LINE 2160:
	__asm        jmp    near ptr 0x00431A6D;
// LINE 2166:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x431947;
	__asm        push   5;
	__asm        mov    eax, lRemainingPlayTime;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 2169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        jmp    near ptr 0x00431A78;
// LINE 2170:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431a7d
void DigitalSound::StopCompletionNotificationEstimationTimer() {
// LINE 2176:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2177:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00431AB5;
// LINE 2178:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
// LINE 2179:
	__asm        push   0x14;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 2180:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 2182:
	__asm        jmp    near ptr 0x00431ABA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00030ac0-00030af8 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431ac0
// Sound::`scalar deleting destructor'



// Contribution: 1:00030b00-00030b1a Module: 64, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00030b20-00030b58 Module: 64, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00431b20
// DigitalSound::`scalar deleting destructor'



// Contribution: 2:00000440-00000447 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f440
// ??_7SoundSystem@@6B@


// Contribution: 2:00000448-00000457 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f448
// ??_7SoundManager@@6B@


// Contribution: 2:00000458-00000483 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f458
// ??_7Sound@@6B@


// Contribution: 2:00000488-00000513 Module: 64, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f488
// ??_7DigitalSound@@6B@


// Contribution: 3:00000e58-0000134d Module: 64, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597e58
// SoundSystem::dwMaxWaveFormatExSize
// GLOBAL: COPTER_D 0x00597e5c
// Sound::lTotalMemoryUsage
// GLOBAL: COPTER_D 0x00597e60
// DigitalSound::lpDirectSound
