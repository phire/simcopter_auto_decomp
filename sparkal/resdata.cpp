// Module: Resdata.obj
// Source: C:\Copter\source\sparkal\Resdata.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class ResourceRCData (forward reference);
// VTABLE: COPTER_D 0x0058f648
class ResourceRCData{ // packed(0x1c bytes) TI: 0x2113
public:
	void ResourceRCData(/*packed*/ class ResourceRCData&);
	void ResourceRCData(int32_t, int32_t);
	void ResourceRCData();
	void ~ResourceRCData();
	/*packed*/ class ResourceRCData& operator=(/*packed*/ class ResourceRCData&);
	virtual void Reset(); // vtable+0x0
	virtual int32_t ReadResource(); // vtable+0x4
	unsigned long DataSize();
	char * DataReference();
protected:
	/*+0x4*/   int32_t nResource;
	/*+0x8*/   char * chData;
	/*+0xc*/   int32_t bWeOwnTheData;
	/*+0x10*/  void * __ptr32 hFoundResource;
	/*+0x14*/  void * __ptr32 hInstance;
	/*+0x18*/  void * __ptr32 hResource;
};

// Type: void;

// Type: int32_t;

// Type: uint32_t;

// Type: unsigned long;

// Type: char *;



// Contribution: 1:000467b0-00046b55 Module: 49, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004477b0
void ResourceRCData::ResourceRCData() {

	this->nResource = 0x0;
	this->chData = 0x0;
	this->bWeOwnTheData = 0x0;
	this->hFoundResource = 0x0;
	this->hInstance = 0x0;
	this->hResource = 0x0;
	this-><vftable> = 0x58f648;
// LINE 27:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044780e
void ResourceRCData::ResourceRCData(int32_t nTheResource, int32_t bLoadNow) {

	this->nResource = nTheResource;
	this->chData = 0x0;
	this->bWeOwnTheData = 0x0;
	this-><vftable> = 0x58f648;
// LINE 40:
	this->hInstance = _ghWindowsInstance;
// LINE 41:
	this->hFoundResource = 0x0;
// LINE 42:
	this->hResource = 0x0;
// LINE 45:
	__asm        cmp    bLoadNow, 0;
	__asm        je     _T63;
// LINE 46:
	__asm        mov    ecx, this;
	__asm        call   ResourceRCData::ReadResource;
// LINE 47:
_T63:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00447880
void ResourceRCData::ResourceRCData(/*packed*/ class ResourceRCData& resData) {

	this-><vftable> = 0x58f648;
// LINE 55:
	this->hFoundResource = 0x0;
// LINE 56:
	this->hInstance = 0x0;
// LINE 57:
	this->hResource = 0x0;
// LINE 58:
	this->nResource = resData.nResource;
// LINE 59:
	__asm        mov    eax, resData;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T8d;
// LINE 60:
// Block start:
	/*bp-0x4*/   uint32_t nAllocationSize;
	nAllocationSize = resData->ResourceRCData::DataSize();
// LINE 61:
	this->chData = operator new(nAllocationSize);
// LINE 62:
	__asm        mov    eax, nAllocationSize;
	__asm        push   eax;
	__asm        mov    eax, resData;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 63:
	this->bWeOwnTheData = 0x1;
// LINE 65:
// Block end:
_T8d:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044791c
void ResourceRCData::~ResourceRCData() {

	this-><vftable> = 0x58f648;
// LINE 73:
	__asm        mov    ecx, this;
	__asm        call   ResourceRCData::Reset;
// LINE 74:
	return;
}

// FUNCTION: COPTER_D 0x00447943
/*packed*/ class ResourceRCData& ResourceRCData::operator=(/*packed*/ class ResourceRCData& resData) {
// LINE 82:
	__asm        mov    eax, resData;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 83:
	return this;
// LINE 85:
_T20:
	this->hFoundResource = 0x0;
// LINE 86:
	this->hInstance = 0x0;
// LINE 87:
	this->hResource = 0x0;
// LINE 88:
	this->nResource = resData.nResource;
// LINE 89:
	__asm        mov    eax, resData;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;
// LINE 90:
// Block start:
	/*bp-0x4*/   uint32_t nAllocationSize;
	nAllocationSize = resData->ResourceRCData::DataSize();
// LINE 91:
	this->chData = operator new(nAllocationSize);
// LINE 92:
	__asm        mov    eax, nAllocationSize;
	__asm        push   eax;
	__asm        mov    eax, resData;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 93:
	this->bWeOwnTheData = 0x1;
// LINE 96:
// Block end:
_T98:
	return this;
// LINE 97:
}

// FUNCTION: COPTER_D 0x004479ea
void ResourceRCData::Reset() {
// LINE 106:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T26;
// LINE 107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3634];
// LINE 108:
_T26:
	this->hFoundResource = 0x0;
// LINE 109:
	this->hInstance = 0x0;
// LINE 110:
	this->hResource = 0x0;
// LINE 112:
	this->nResource = 0x0;
// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T76;
// LINE 114:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 115:
_T76:
	this->chData = 0x0;
// LINE 116:
	return;
}

// FUNCTION: COPTER_D 0x00447a74
unsigned long ResourceRCData::DataSize() {
// LINE 132:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T32;
// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3630];
	__asm        jmp    __RETURN;
// LINE 135:
_T32:
	return 0x0;
// LINE 136:
__RETURN:
}

// FUNCTION: COPTER_D 0x00447ab2
int32_t ResourceRCData::ReadResource() {
// LINE 145:
	__asm        push   0xA;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3624];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 146:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T7c;
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3628];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 148:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T7c;
// LINE 149:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3620];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 150:
	return 0x1;
// LINE 154:
_T7c:
	return 0x0;
// LINE 155:
}

// FUNCTION: COPTER_D 0x00447b3a
char * ResourceRCData::DataReference() {
// LINE 162:
	return this->chData;
// LINE 163:
}



// Contribution: 2:00000648-0000064f Module: 49, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ResourceRCData @ 0x0058f648
//   00: ResourceRCData::Reset @ 0x004479ea
//   01: ResourceRCData::ReadResource @ 0x00447ab2
//   2 entries

