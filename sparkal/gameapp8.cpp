// Module: Gameapp8.obj
// Source: C:\Copter\source\sparkal\Gameapp8.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ struct list<DirectoryEntry>::list_node_buffer (forward reference);
struct list<DirectoryEntry>::list_node_buffer{ // packed(0x8 bytes) TI: 0x2390
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<DirectoryEntry>::list_node *buffer;
};

// Type: /*packed*/ struct list<DirectoryEntry>::list_node (forward reference);
struct list<DirectoryEntry>::list_node{ // packed(0x18 bytes) TI: 0x2392
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class DirectoryEntry data; // 0x10 bytes
};

// Type: uint32_t;

// Type: char *;

// Type: long;

// Type: char;

// Type: /*packed*/ struct tagUserCityInfo;
struct tagUserCityInfo{ // packed(0x80 bytes) TI: 0x2b80
	/*+0x0*/   /*packed*/ struct tagCitySettings citySettings; // 0x24 bytes
	/*+0x24*/  long bUserHasSavedGame;
	/*+0x28*/  /*packed*/ struct tagUserPersonalInfo userPersonalInfo; // 0x58 bytes
};

// Type: unsigned long;

// Type: int32_t;

// Type: /*packed*/ struct tagCitySettings;
struct tagCitySettings{ // packed(0x24 bytes) TI: 0x26eb
	/*+0x0*/   long lDifficulty;
	/*+0x4*/   long lMissionFrequencyFire;
	/*+0x8*/   long lMissionFrequencyCrime;
	/*+0xc*/   long lMissionFrequencyRescue;
	/*+0x10*/  long lMissionFrequencyRiot;
	/*+0x14*/  long lMissionFrequencyTraffic;
	/*+0x18*/  long lMissionFrequencyMedEvac;
	/*+0x1c*/  long lMissionFrequencyTransport;
	/*+0x20*/  long lDaytime;
};

// Type: /*packed*/ struct tagCurrentCareerCityInfo;
struct tagCurrentCareerCityInfo{ // packed(0x6c bytes) TI: 0x26e5
	/*+0x0*/   long lCurrentCities[3]; // 0xc bytes
	/*+0xc*/   long lCurrentCityIndex;
	/*+0x10*/  long bUserHasSavedGame;
	/*+0x14*/  /*packed*/ struct tagUserPersonalInfo userPersonalInfo; // 0x58 bytes
};

// Type: /*packed*/ class MIFF;
// VTABLE: COPTER_D 0x00591950
class MIFF : public PFile
{ // packed(0x148 bytes) TI: 0x428e
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF() /* override */;
	virtual long OpenForReading(); // vtable+0x4
	virtual long OpenForWriting(long, long, long); // vtable+0x8
	virtual long OpenForAppending(); // vtable+0xc
	virtual long Close(); // vtable+0x10
	virtual long GetPresentRecordType(); // vtable+0x14
	virtual long GetPresentRecordSize(); // vtable+0x18
	virtual long GetPresentRecordDataSize(); // vtable+0x1c
	virtual long GetPresentRecordIndex(); // vtable+0x20
	virtual long VerifyFile(); // vtable+0x24
	virtual long ReadMIFFHeader(); // vtable+0x28
	virtual long ReadRecordHeader(); // vtable+0x2c
	virtual long ReadFileCreator(); // vtable+0x30
	virtual long ReadFileType(); // vtable+0x34
	virtual long ReadFileVersion(); // vtable+0x38
	virtual long ReadPresentRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x3c
	virtual long ReadPresentRecordData(char *, long); // vtable+0x40
	virtual long GoToFirstRecord(); // vtable+0x44
	virtual long GoToNextRecord(); // vtable+0x48
	virtual long GoToPreviousRecord(); // vtable+0x4c
	virtual long GoToFirstRecordOfGivenType(long); // vtable+0x50
	virtual long GoToNextRecordOfGivenType(long); // vtable+0x54
	virtual long GoToNthRecord(long); // vtable+0x58
	virtual long CountRecords(); // vtable+0x5c
	virtual long WriteMIFFRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x60
	virtual long WriteDataRecord(long, char *, long); // vtable+0x64
	virtual long WriteFileHeader(long, long, long); // vtable+0x68
	virtual long WriteEnd(); // vtable+0x6c
	/*+0x110*/ long lPresentRecordStart;
	/*+0x114*/ long lPresentRecordType;
	/*+0x118*/ long lPresentRecordLength;
	/*+0x11c*/ long lPresentRecordIndex;
	/*+0x120*/ long lReadWriteMode;
	/*+0x124*/ long bFileEndWritten;
	/*+0x128*/ long bFileAppearsCorrupt;
	/*+0x12c*/ /*packed*/ struct MIFFHeader myMIFFHeader; // 0x1c bytes
};

// Type: void;

// Type: /*packed*/ class list<DirectoryEntry> (forward reference);
class list<DirectoryEntry>{ // packed(0x8 bytes) TI: 0x236c
	using void_pointer = void * __ptr32;
	struct list<DirectoryEntry>::list_node{ // packed(0x18 bytes) TI: 0x2392
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class DirectoryEntry data; // 0x10 bytes
	};
protected:
	static /*packed*/ class allocator<list<DirectoryEntry>::list_node> list_node_allocator;
	static /*packed*/ class allocator<DirectoryEntry> value_allocator;
	using value_type = /*packed*/ class DirectoryEntry;
	using value_allocator_type = /*packed*/ class allocator<DirectoryEntry>;
	using pointer = /*packed*/ class DirectoryEntry*;
	using reference = /*packed*/ class DirectoryEntry&;
	using const_reference = const /*packed*/ class DirectoryEntry&;
	using list_node_allocator_type = /*packed*/ class allocator<list<DirectoryEntry>::list_node>;
	using link_type = /*packed*/ struct list<DirectoryEntry>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<DirectoryEntry>::list_node_buffer{ // packed(0x8 bytes) TI: 0x2390
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<DirectoryEntry>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<DirectoryEntry>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<DirectoryEntry>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<DirectoryEntry>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<DirectoryEntry>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<DirectoryEntry>::list_node *free_list;
	static /*packed*/ struct list<DirectoryEntry>::list_node *next_avail;
	static /*packed*/ struct list<DirectoryEntry>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<DirectoryEntry>::list_node* get_node();
	void put_node(/*packed*/ struct list<DirectoryEntry>::list_node*);
	/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
	{ // packed(0x4 bytes) TI: 0x238e
	protected:
		/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<DirectoryEntry>::iterator&);
		/*packed*/ class DirectoryEntry& operator*();
		/*packed*/ class list<DirectoryEntry>::iterator operator++(int32_t);
		/*packed*/ class list<DirectoryEntry>::iterator& operator++();
		/*packed*/ class list<DirectoryEntry>::iterator operator--(int32_t);
		/*packed*/ class list<DirectoryEntry>::iterator& operator--();
	};
	class list<DirectoryEntry>::const_iterator : public bidirectional_iterator<DirectoryEntry,int>
	{ // packed(0x4 bytes) TI: 0x2381
	protected:
		/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<DirectoryEntry>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<DirectoryEntry>::const_iterator&);
		const /*packed*/ class DirectoryEntry& operator*();
		/*packed*/ class list<DirectoryEntry>::const_iterator operator++(int32_t);
		/*packed*/ class list<DirectoryEntry>::const_iterator& operator++();
		/*packed*/ class list<DirectoryEntry>::const_iterator operator--(int32_t);
		/*packed*/ class list<DirectoryEntry>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int>;
public:
	void list<DirectoryEntry>(const /*packed*/ class list<DirectoryEntry>&);
	void list<DirectoryEntry>(const /*packed*/ class DirectoryEntry*, const /*packed*/ class DirectoryEntry*);
	void list<DirectoryEntry>(uint32_t, const /*packed*/ class DirectoryEntry&);
	void list<DirectoryEntry>();
	/*packed*/ class list<DirectoryEntry>::const_iterator begin();
	/*packed*/ class list<DirectoryEntry>::iterator begin();
	/*packed*/ class list<DirectoryEntry>::const_iterator end();
	/*packed*/ class list<DirectoryEntry>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class DirectoryEntry& front();
	/*packed*/ class DirectoryEntry& front();
	const /*packed*/ class DirectoryEntry& back();
	/*packed*/ class DirectoryEntry& back();
	void swap(/*packed*/ class list<DirectoryEntry>&);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, uint32_t, const /*packed*/ class DirectoryEntry&);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::const_iterator, /*packed*/ class list<DirectoryEntry>::const_iterator);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, const /*packed*/ class DirectoryEntry*, const /*packed*/ class DirectoryEntry*);
	/*packed*/ class list<DirectoryEntry>::iterator insert(/*packed*/ class list<DirectoryEntry>::iterator, const /*packed*/ class DirectoryEntry&);
	void push_front(const /*packed*/ class DirectoryEntry&);
	void push_back(const /*packed*/ class DirectoryEntry&);
	void erase(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
	void erase(/*packed*/ class list<DirectoryEntry>::iterator);
	void pop_front();
	void pop_back();
	void ~list<DirectoryEntry>();
	/*packed*/ class list<DirectoryEntry>& operator=(const /*packed*/ class list<DirectoryEntry>&);
protected:
	void transfer(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
public:
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&, /*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&, /*packed*/ class list<DirectoryEntry>::iterator);
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&);
	void remove(const /*packed*/ class DirectoryEntry&);
	void unique();
	void merge(/*packed*/ class list<DirectoryEntry>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class PFile;
// VTABLE: COPTER_D 0x00590468
class PFile{ // packed(0x110 bytes) TI: 0x453c
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const /*packed*/ class PFile&);
	void PFile(int32_t);
	void PFile();
	virtual void ~PFile(); // vtable+0x0
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	/*+0x4*/   char szFilePath[260]; // 0x104 bytes
	/*+0x108*/ int32_t Handle;
private:
	/*+0x10c*/ int32_t ShouldClose;
};



// Contribution: 1:00026550-00027c67 Module: 68, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00427550
unsigned long  CGameApp::GetLoadFileType(char * szFilePath, long& lFileType) {
// LINE 63:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        call   S2CityValidate;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T35;
// LINE 64:
	lFileType. = 0x1;
// LINE 65:
	__asm        xor    eax, eax;
	__asm        jmp    _T8c;
// LINE 67:
	__asm        jmp    _T82;
_T35:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        call   ValidateSCXSaveGameFile;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T5e;
// LINE 68:
	lFileType. = 0x5;
// LINE 69:
	__asm        xor    eax, eax;
	__asm        jmp    _T8c;
// LINE 71:
	__asm        jmp    _T82;
// LINE 72:
_T5e:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::ValidateCopterSaveGameFile;
	__asm        mov    ecx, lFileType;
	__asm        mov    [ecx], eax;
// LINE 73:
	__asm        mov    eax, lFileType;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T82;
// LINE 74:
	__asm        xor    eax, eax;
	__asm        jmp    _T8c;
// LINE 76:
_T82:
	__asm        mov    eax, 6;
	__asm        jmp    _T8c;
// LINE 77:
_T8c:
}

// FUNCTION: COPTER_D 0x004275e3
unsigned long  CGameApp::SetUpLoadGame(char * szLoadGamePath, long lFileType) {
// LINE 86:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 87:
	__asm        cmp    lFileType, 1;
	__asm        jne    _T56;
// LINE 88:
	__asm        mov    eax, szLoadGamePath;
	__asm        push   eax;
	__asm        call   S2CityValidate;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T3e;
// LINE 89:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _Ta7;
// LINE 90:
_T3e:
	__asm        mov    eax, szLoadGamePath;
	__asm        push   eax;
	__asm        call   SetUpNewUserCity;
	__asm        add    esp, 4;
// LINE 91:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta7;
// LINE 93:
	__asm        jmp    _T9d;
_T56:
	__asm        cmp    lFileType, 3;
	__asm        je     _T6a;

	__asm        cmp    lFileType, 4;
	__asm        jne    _T80;
// LINE 94:
_T6a:
	__asm        mov    eax, szLoadGamePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::LoadUserOrCareerGame;
	__asm        jmp    _Ta7;
// LINE 96:
	__asm        jmp    _T9d;
_T80:
	__asm        cmp    lFileType, 5;
	__asm        jne    _T9d;
// LINE 97:
	__asm        mov    eax, szLoadGamePath;
	__asm        push   eax;
	__asm        call   SetUpNewUserCity;
	__asm        add    esp, 4;
// LINE 98:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta7;
// LINE 101:
_T9d:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _Ta7;
// LINE 102:
_Ta7:
}

// FUNCTION: COPTER_D 0x00427691
unsigned long  CGameApp::LoadUserOrCareerGame(char * szGamePath) {
	/*bp-0x4*/   long lPresentRecordType;
	/*bp-0x104*/ char szSplitPathExtension[256]; // 0x100 bytes
	/*bp-0x108*/ char szSplitPathDrive[3];
	/*bp-0x10c*/ long lFileType;
	/*bp-0x110*/ unsigned long lSavedCityFileChecksum;
	/*bp-0x17c*/ /*packed*/ struct tagCurrentCareerCityInfo tempCurrentCareerCityInfo; // 0x6c bytes
	/*bp-0x180*/ int32_t bSaveGameInfoFound;
	/*bp-0x280*/ char szSplitPathDirectory[256]; // 0x100 bytes
	/*bp-0x2a4*/ /*packed*/ struct tagCitySettings savedCitySettings; // 0x24 bytes
	/*bp-0x3a4*/ char szSplitPathFilename[256]; // 0x100 bytes
	/*bp-0x3a8*/ int32_t bPathInfoFound;
	/*bp-0x4ac*/ char szCityPath[260]; // 0x104 bytes
	/*bp-0x4b0*/ unsigned long lActualCityFileChecksum;
	/*bp-0x530*/ /*packed*/ struct tagUserCityInfo tempUserCityInfo; // 0x80 bytes
	/*bp-0x634*/ char szCityFile[260]; // 0x104 bytes

// LINE 126:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 127:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 128:
	__asm        mov    eax, szGamePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4174;
	__asm        call   PFile::SetPath;
// LINE 129:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    _T7c;
// LINE 130:
	__asm        mov    eax, 3;
	__asm        jmp    _T55c;
// LINE 132:
_T7c:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x24];
	__asm        test   eax, eax;
	__asm        je     _Tc5;

	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x30];
	__asm        cmp    eax, 0x43505452;
	__asm        je     _Tea;
// LINE 133:
_Tc5:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 134:
	__asm        mov    eax, 4;
	__asm        jmp    _T55c;
// LINE 137:
_Tea:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x34];
	__asm        mov    lFileType, eax;
// LINE 138:
	__asm        cmp    lFileType, 0x43524552;
	__asm        je     _T150;

	__asm        cmp    lFileType, 0x55534552;
	__asm        je     _T150;
// LINE 139:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 140:
	__asm        mov    eax, 6;
	__asm        jmp    _T55c;
// LINE 143:
_T150:
	__asm        mov    bSaveGameInfoFound, 0;
	__asm        mov    eax, bSaveGameInfoFound;
	__asm        mov    bPathInfoFound, eax;
// LINE 144:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x44];
// LINE 146:
_T181:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    lPresentRecordType, eax;
// LINE 147:
	__asm        cmp    lPresentRecordType, 0x4346494C;
	__asm        jne    _T1e2;
// LINE 148:
	__asm        push   0x104;
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x40];
// LINE 149:
	bPathInfoFound = 0x1;
// LINE 151:
	__asm        jmp    _T280;
// LINE 152:
_T1e2:
	__asm        cmp    lPresentRecordType, 0x55494E46;
	__asm        jne    _T235;

	__asm        cmp    lFileType, 0x55534552;
	__asm        jne    _T235;
// LINE 154:
	__asm        push   0x80;
	__asm        lea    eax, tempUserCityInfo.citySettings.lDifficulty;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x40];
// LINE 155:
	bSaveGameInfoFound = 0x1;
// LINE 157:
	__asm        jmp    _T280;
// LINE 158:
_T235:
	__asm        cmp    lPresentRecordType, 0x43494E46;
	__asm        jne    _T280;

	__asm        cmp    lFileType, 0x43524552;
	__asm        jne    _T280;
// LINE 160:
	__asm        push   0x6C;
	__asm        lea    eax, tempCurrentCareerCityInfo.lCurrentCities[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x40];
// LINE 161:
	bSaveGameInfoFound = 0x1;
// LINE 163:
_T280:
	__asm        cmp    bPathInfoFound, 0;
	__asm        je     _T29f;

	__asm        cmp    bSaveGameInfoFound, 0;
	__asm        je     _T29f;
// LINE 164:
	__asm        jmp    _T2c2;
// LINE 165:
_T29f:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x48];
	__asm        test   eax, eax;
	__asm        jne    _T181;
// LINE 167:
_T2c2:
	__asm        cmp    bPathInfoFound, 0;
	__asm        je     _T2dc;

	__asm        cmp    bSaveGameInfoFound, 0;
	__asm        jne    _T301;
// LINE 168:
_T2dc:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 169:
	__asm        mov    eax, 2;
	__asm        jmp    _T55c;
// LINE 173:
_T301:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        mov    eax, szGamePath;
	__asm        push   eax;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 174:
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 175:
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 176:
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 177:
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        call   S2CityValidate;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T3a7;
// LINE 178:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 179:
	__asm        mov    eax, 5;
	__asm        jmp    _T55c;
// LINE 181:
_T3a7:
	__asm        cmp    lFileType, 0x55534552;
	__asm        jne    _T3e2;
// LINE 182:
	gCurrentCityType = 0x1;
// LINE 183:
	__asm        lea    esi, tempUserCityInfo.citySettings.lDifficulty;
	__asm        mov    edi, 0x5C2A20;
	__asm        mov    ecx, 0x20;
	__asm        rep movsd;
// LINE 185:
	G_daynight = gCurrentUserCityInfo.citySettings.lDaytime;
// LINE 187:
	__asm        jmp    _T455;
// LINE 188:
_T3e2:
	gCurrentCityType = 0x2;
// LINE 189:
	__asm        lea    esi, tempCurrentCareerCityInfo.lCurrentCities[0];
	__asm        mov    edi, 0x5C2AA8;
	__asm        mov    ecx, 0x1B;
	__asm        rep movsd;
// LINE 190:
	__asm        push   0x43534554;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x50];
	__asm        test   eax, eax;
	__asm        je     _T455;
// LINE 191:
	__asm        push   0x24;
	__asm        lea    eax, savedCitySettings.lDifficulty;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x40];
// LINE 193:
	G_daynight = savedCitySettings.lDaytime;
// LINE 196:
_T455:
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        push   0x5C2918;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 199:
	lSavedCityFileChecksum = 0x0;
// LINE 200:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x44];
// LINE 201:
	__asm        push   0x4353554D;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x54];
	__asm        test   eax, eax;
	__asm        je     _T4da;
// LINE 202:
	__asm        push   4;
	__asm        lea    eax, lSavedCityFileChecksum;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x40];
// LINE 203:
_T4da:
	__asm        lea    eax, szCityPath[0];
	__asm        push   eax;
	__asm        call   PFile::Checksum;
	__asm        add    esp, 4;
	__asm        mov    lActualCityFileChecksum, eax;
// LINE 204:
	__asm        cmp    lActualCityFileChecksum, 0;
	__asm        je     _T52d;

	__asm        cmp    lSavedCityFileChecksum, 0;
	__asm        je     _T52d;

	__asm        mov    eax, lActualCityFileChecksum;
	__asm        cmp    lSavedCityFileChecksum, eax;
	__asm        jne    _T52d;
// LINE 205:
	this-><CGameApp+0x20:4> = 0x1;
// LINE 208:
	__asm        jmp    _T555;
// LINE 209:
_T52d:
	this-><CGameApp+0x20:4> = 0x0;
// LINE 210:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 212:
_T555:
	__asm        xor    eax, eax;
	__asm        jmp    _T55c;
// LINE 213:
_T55c:
}

// FUNCTION: COPTER_D 0x00427bf4
unsigned long  CGameApp::SaveUserOrCareerGame(char * szGamePath, char * szCityPath) {
	/*bp-0x100*/ char szSplitPathExtension[256]; // 0x100 bytes
	/*bp-0x104*/ char szSplitPathDrive[3];
	/*bp-0x108*/ long lFileType;
	/*bp-0x208*/ char szSplitPathDirectory[256]; // 0x100 bytes
	/*bp-0x22c*/ /*packed*/ struct tagCitySettings tempCitySettings; // 0x24 bytes
	/*bp-0x32c*/ char szSplitPathFilename[256]; // 0x100 bytes
	/*bp-0x42c*/ char szCityFile[256]; // 0x100 bytes
	/*bp-0x430*/ unsigned long lActualCityFileChecksum;

// LINE 232:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 233:
	__asm        mov    eax, szGamePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x4174;
	__asm        call   PFile::SetPath;
// LINE 234:
	__asm        call   SetUserHasSavedCurrentCity;
// LINE 236:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T63;
// LINE 237:
	lFileType = 0x43524552;
// LINE 238:
	__asm        jmp    _T7a;
_T63:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T7a;
// LINE 239:
	lFileType = 0x55534552;
// LINE 241:
_T7a:
	__asm        push   0x100;
	__asm        mov    eax, lFileType;
	__asm        push   eax;
	__asm        push   0x43505452;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jne    _Tb8;
// LINE 242:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 244:
_Tb8:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        mov    eax, szCityPath;
	__asm        push   eax;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 245:
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 246:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 247:
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szCityFile[0];
	__asm        push   eax;
	__asm        push   0x4346494C;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x64];
	__asm        test   eax, eax;
	__asm        jne    _T171;
// LINE 248:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 249:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 251:
_T171:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T254;
// LINE 252:
	__asm        push   0x6C;
	__asm        push   0x5C2AA8;
	__asm        push   0x43494E46;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x64];
	__asm        test   eax, eax;
	__asm        jne    _T1d2;
// LINE 253:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 254:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 260:
_T1d2:
	__asm        mov    eax, gCurrentCareerCityInfo.lCurrentCityIndex;
	__asm        shl    eax, 3;
	__asm        lea    edi, tempCitySettings.lDifficulty;
	__asm        lea    esi, gAllCareerCities[0].citySettings.lDifficulty[eax+eax*8];
	__asm        mov    ecx, 9;
	__asm        rep movsd;
// LINE 261:
	tempCitySettings.lDaytime = G_daynight;
// LINE 262:
	__asm        push   0x24;
	__asm        lea    eax, tempCitySettings.lDifficulty;
	__asm        push   eax;
	__asm        push   0x43534554;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x64];
	__asm        test   eax, eax;
	__asm        jne    _T24f;
// LINE 263:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 264:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 267:
_T24f:
	__asm        jmp    _T2b8;
_T254:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T2b8;
// LINE 268:
	__asm        push   0x80;
	__asm        push   0x5C2A20;
	__asm        push   0x55494E46;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x64];
	__asm        test   eax, eax;
	__asm        jne    _T2b8;
// LINE 269:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 270:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 274:
_T2b8:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::WriteToMIFF;
// LINE 275:
	__asm        mov    eax, this;
	__asm        add    eax, 0x4174;
	__asm        push   eax;
	__asm        call   VRAppGameSave;
	__asm        add    esp, 4;
// LINE 277:
	__asm        mov    eax, szCityPath;
	__asm        push   eax;
	__asm        call   S2CitySave;
	__asm        add    esp, 4;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T31e;
// LINE 278:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 279:
	__asm        mov    eax, 7;
	__asm        jmp    _T39d;
// LINE 283:
_T31e:
	__asm        mov    eax, szCityPath;
	__asm        push   eax;
	__asm        call   PFile::Checksum;
	__asm        add    esp, 4;
	__asm        mov    lActualCityFileChecksum, eax;
// LINE 284:
	__asm        push   4;
	__asm        lea    eax, lActualCityFileChecksum;
	__asm        push   eax;
	__asm        push   0x4353554D;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x64];
// LINE 285:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4174];
	__asm        add    ecx, 0x4174;
	__asm        call   dword ptr [eax+0x10];
// LINE 288:
	__asm        mov    eax, szGamePath;
	__asm        push   eax;
	__asm        push   0x5C33E8;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 289:
	__asm        mov    eax, szCityPath;
	__asm        push   eax;
	__asm        push   0x5C2918;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 291:
	__asm        xor    eax, eax;
	__asm        jmp    _T39d;
// LINE 292:
_T39d:
}

// FUNCTION: COPTER_D 0x00427f98
unsigned long  CGameApp::DoSaveGameAs() {
	/*bp-0x100*/ char szSplitPathExtension[256]; // 0x100 bytes
	/*bp-0x104*/ int32_t nFullStringID;
	/*bp-0x108*/ char szSplitPathDrive[3];
	/*bp-0x10c*/ int32_t nFullTitleID;
	/*bp-0x20c*/ char szSplitPathFullDirectory[256]; // 0x100 bytes
	/*bp-0x210*/ char * chPrefData;
	/*bp-0x310*/ char szNewDirectory[256]; // 0x100 bytes
	/*bp-0x410*/ char szSplitPathDirectory[256]; // 0x100 bytes
	/*bp-0x514*/ char szCityFileSavePath[260]; // 0x104 bytes
	/*bp-0x618*/ char szGameFileSavePath[260]; // 0x104 bytes
	/*bp-0x718*/ char szSplitPathFilename[256]; // 0x100 bytes
	/*bp-0x71c*/ int32_t nFullFilterID;
	/*bp-0x720*/ unsigned long nResult;

// LINE 326:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        push   0x5C2918;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 328:
	__asm        push   0x7EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 329:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T30c;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7CC], eax;
	__asm        cmp    dword ptr [ebp-0x7CC], 0;
	__asm        je     _T9d;

	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7CC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x728], eax;
	__asm        jmp    _Ta7;
_T9d:
	__asm        mov    dword ptr [ebp-0x728], 0;
_Ta7:
	__asm        mov    dword ptr [ebp-0x72C], 0;
	__asm        jmp    near ptr 0x0042804E;

	__asm        push   0x5974A8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7FC], eax;
	__asm        jmp    near ptr 0x00428066;

	__asm        jmp    near ptr 0x0042806B;

	__asm        mov    eax, [ebp-0x7FC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x728];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x72C];
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x7F8];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        cmp    dword ptr [ebp-0x7FC], 0;
	__asm        je     _T149;

	__asm        jmp    near ptr 0x004280A5;

	__asm        jmp    near ptr 0x004280AA;

	__asm        mov    eax, [ebp-0x7F4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x728];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x804], eax;
	__asm        mov    eax, [ebp-0x7FC];
	__asm        push   eax;
	__asm        push   0x5974A8;
	__asm        mov    eax, [ebp-0x804];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T149;
_T149:
	__asm        mov    eax, [ebp-0x7F4];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x800], eax;
	__asm        jmp    near ptr 0x004280F5;

	__asm        mov    eax, [ebp-0x7FC];
	__asm        mov    ecx, [ebp-0x800];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x7F8];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x734];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x7F8];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    near ptr 0x00428129;

	__asm        lea    eax, [ebp-0x734];
	__asm        push   eax;
	__asm        call   Directory::DoesAnyEntryExistThatMatchesPattern;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x724], eax;
	__asm        mov    eax, [ebp-0x730];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x730];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1f6;

	__asm        mov    eax, [ebp-0x730];
	__asm        mov    [ebp-0x788], eax;
	__asm        mov    eax, [ebp-0x788];
	__asm        mov    [ebp-0x784], eax;
	__asm        cmp    dword ptr [ebp-0x784], 0;
	__asm        je     _T1f6;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x784];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1f6;
_T1f6:
	__asm        jmp    near ptr 0x00428193;

	__asm        cmp    dword ptr [ebp-0x734], 0;
	__asm        je     _T22f;

	__asm        mov    eax, [ebp-0x734];
	__asm        mov    [ebp-0x77C], eax;
	__asm        mov    eax, [ebp-0x77C];
	__asm        mov    [ebp-0x780], eax;
	__asm        mov    eax, [ebp-0x780];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T22f:
	__asm        jmp    near ptr 0x004281CC;

	__asm        mov    eax, [ebp-0x728];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x728];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T284;

	__asm        mov    eax, [ebp-0x728];
	__asm        mov    [ebp-0x798], eax;
	__asm        mov    eax, [ebp-0x798];
	__asm        mov    [ebp-0x794], eax;
	__asm        cmp    dword ptr [ebp-0x794], 0;
	__asm        je     _T284;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x794];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T284;
_T284:
	__asm        jmp    near ptr 0x00428221;

	__asm        cmp    dword ptr [ebp-0x72C], 0;
	__asm        je     _T2bd;

	__asm        mov    eax, [ebp-0x72C];
	__asm        mov    [ebp-0x78C], eax;
	__asm        mov    eax, [ebp-0x78C];
	__asm        mov    [ebp-0x790], eax;
	__asm        mov    eax, [ebp-0x790];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2bd:
	__asm        jmp    near ptr 0x0042825A;

	__asm        mov    eax, [ebp-0x724];
	__asm        mov    [ebp-0x774], eax;
	__asm        cmp    dword ptr [ebp-0x774], 0;
	__asm        je     _T30c;
// LINE 331:
	__asm        mov    eax, chPrefData;
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 332:
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 334:
	__asm        jmp    _T80a;
// LINE 340:
_T30c:
	__asm        mov    eax, gszAppDirectory;
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 341:
	__asm        push   0;
	__asm        push   0x32;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 342:
	__asm        push   0xFFF;
	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x7F0], eax;
	__asm        cmp    dword ptr [ebp-0x7F0], 0;
	__asm        jne    _T3ac;

	__asm        push   0xFFF;
	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x7F0], eax;
	__asm        push   0x597200;
	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
	__asm        jmp    _T3b1;
_T3ac:
	__asm        jmp    _T3b1;
// LINE 343:
_T3b1:
	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 344:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7D0], eax;
	__asm        cmp    dword ptr [ebp-0x7D0], 0;
	__asm        je     _T401;

	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7D0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x73C], eax;
	__asm        jmp    _T40b;
_T401:
	__asm        mov    dword ptr [ebp-0x73C], 0;
_T40b:
	__asm        mov    dword ptr [ebp-0x740], 0;
	__asm        jmp    near ptr 0x004283B2;

	__asm        lea    eax, [ebp-0x740];
	__asm        push   eax;
	__asm        call   Directory::DoesAnyEntryExistThatMatchesPattern;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T440;

	__asm        mov    dword ptr [ebp-0x738], 1;
	__asm        jmp    _T44a;
_T440:
	__asm        mov    dword ptr [ebp-0x738], 0;
_T44a:
	__asm        mov    eax, [ebp-0x73C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x73C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T49a;

	__asm        mov    eax, [ebp-0x73C];
	__asm        mov    [ebp-0x7A8], eax;
	__asm        mov    eax, [ebp-0x7A8];
	__asm        mov    [ebp-0x7A4], eax;
	__asm        cmp    dword ptr [ebp-0x7A4], 0;
	__asm        je     _T49a;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x7A4];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T49a;
_T49a:
	__asm        jmp    near ptr 0x00428437;

	__asm        cmp    dword ptr [ebp-0x740], 0;
	__asm        je     _T4d3;

	__asm        mov    eax, [ebp-0x740];
	__asm        mov    [ebp-0x79C], eax;
	__asm        mov    eax, [ebp-0x79C];
	__asm        mov    [ebp-0x7A0], eax;
	__asm        mov    eax, [ebp-0x7A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4d3:
	__asm        jmp    near ptr 0x00428470;

	__asm        mov    eax, [ebp-0x738];
	__asm        mov    [ebp-0x778], eax;
	__asm        cmp    dword ptr [ebp-0x778], 0;
	__asm        je     _T7f4;
// LINE 345:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7D4], eax;
	__asm        cmp    dword ptr [ebp-0x7D4], 0;
	__asm        je     _T5da;

	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x7D4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004284C3;

	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x7D4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x7D4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T5ab;

	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x7D4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7D8], eax;
	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7DC], eax;
	__asm        mov    eax, [ebp-0x7D8];
	__asm        push   eax;
	__asm        lea    eax, szNewDirectory[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7DC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042853E;

	__asm        jmp    _T5b7;
_T5ab:
	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    dword ptr [eax], 0;
_T5b7:
	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00428561;

	__asm        mov    eax, [ebp-0x7D4];
	__asm        mov    [ebp-0x76C], eax;
	__asm        jmp    _T5e4;
_T5da:
	__asm        mov    dword ptr [ebp-0x76C], 0;
_T5e4:
	__asm        mov    dword ptr [ebp-0x770], 0;
	__asm        jmp    near ptr 0x0042858B;

	__asm        mov    eax, gszAppDirectory;
	__asm        mov    [ebp-0x7E4], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7E0], eax;
	__asm        cmp    dword ptr [ebp-0x7E0], 0;
	__asm        je     _T638;

	__asm        mov    eax, [ebp-0x7E4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7E0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x764], eax;
	__asm        jmp    _T642;
_T638:
	__asm        mov    dword ptr [ebp-0x764], 0;
_T642:
	__asm        mov    dword ptr [ebp-0x768], 0;
	__asm        jmp    near ptr 0x004285E9;

	__asm        push   4;
	__asm        lea    eax, [ebp-0x770];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x768];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x760];
	__asm        call   Directory::Directory;
	__asm        mov    ecx, eax;
	__asm        call   Directory::CreateNewEntry;
	__asm        mov    eax, [ebp-0x76C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x76C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T6c9;

	__asm        mov    eax, [ebp-0x76C];
	__asm        mov    [ebp-0x7B8], eax;
	__asm        mov    eax, [ebp-0x7B8];
	__asm        mov    [ebp-0x7B4], eax;
	__asm        cmp    dword ptr [ebp-0x7B4], 0;
	__asm        je     _T6c9;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x7B4];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T6c9;
_T6c9:
	__asm        jmp    near ptr 0x00428666;

	__asm        cmp    dword ptr [ebp-0x770], 0;
	__asm        je     _T702;

	__asm        mov    eax, [ebp-0x770];
	__asm        mov    [ebp-0x7AC], eax;
	__asm        mov    eax, [ebp-0x7AC];
	__asm        mov    [ebp-0x7B0], eax;
	__asm        mov    eax, [ebp-0x7B0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T702:
	__asm        jmp    near ptr 0x0042869F;

	__asm        jmp    near ptr 0x004286A4;

	__asm        lea    ecx, [ebp-0x750];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x750], 0;
	__asm        je     _T74b;

	__asm        mov    eax, [ebp-0x750];
	__asm        mov    [ebp-0x7E8], eax;
	__asm        mov    eax, [ebp-0x7E8];
	__asm        mov    [ebp-0x7EC], eax;
	__asm        mov    eax, [ebp-0x7EC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T74b:
	__asm        jmp    near ptr 0x004286E8;

	__asm        lea    ecx, [ebp-0x758];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, [ebp-0x760];
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        mov    eax, [ebp-0x764];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x764];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T7b6;

	__asm        mov    eax, [ebp-0x764];
	__asm        mov    [ebp-0x7C8], eax;
	__asm        mov    eax, [ebp-0x7C8];
	__asm        mov    [ebp-0x7C4], eax;
	__asm        cmp    dword ptr [ebp-0x7C4], 0;
	__asm        je     _T7b6;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x7C4];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T7b6;
_T7b6:
	__asm        jmp    near ptr 0x00428753;

	__asm        cmp    dword ptr [ebp-0x768], 0;
	__asm        je     _T7ef;

	__asm        mov    eax, [ebp-0x768];
	__asm        mov    [ebp-0x7BC], eax;
	__asm        mov    eax, [ebp-0x7BC];
	__asm        mov    [ebp-0x7C0], eax;
	__asm        mov    eax, [ebp-0x7C0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7ef:
	__asm        jmp    _T7f4;
// LINE 346:
_T7f4:
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 354:
_T80a:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T830;
// LINE 355:
	nFullTitleID = 0x2f;
// LINE 356:
	nFullFilterID = 0x2d;
// LINE 358:
	__asm        jmp    _T844;
// LINE 359:
_T830:
	nFullTitleID = 0x2e;
// LINE 360:
	nFullFilterID = 0x2b;
// LINE 362:
_T844:
	__asm        push   0;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullTitleID, eax;
// LINE 363:
	__asm        push   0;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullFilterID, eax;
// LINE 365:
	__asm        push   0;
	__asm        mov    eax, nFullFilterID;
	__asm        push   eax;
	__asm        mov    eax, nFullTitleID;
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   GetSaveFilePath;
	__asm        add    esp, 0x10;
	__asm        mov    nResult, eax;
// LINE 366:
	__asm        cmp    nResult, 0;
	__asm        je     _T8ae;
// LINE 367:
	__asm        mov    eax, 9;
	__asm        jmp    _Tad7;
// LINE 373:
_T8ae:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 376:
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 377:
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 378:
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 380:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T99a;
// LINE 381:
	__asm        movsx  eax, szSplitPathExtension[0];
	__asm        test   eax, eax;
	__asm        je     _T96a;

	__asm        mov    eax, SZ_CAREER_DATA_FILE_SUFFIX;
	__asm        push   eax;
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T96a;
// LINE 382:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 383:
_T96a:
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        lea    eax, szCityFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 384:
	__asm        mov    eax, SZ_CAREER_DATA_FILE_SUFFIX;
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 386:
	__asm        jmp    _Ta07;
// LINE 387:
_T99a:
	__asm        movsx  eax, szSplitPathExtension[0];
	__asm        test   eax, eax;
	__asm        je     _T9dc;

	__asm        mov    eax, SZ_USER_DATA_FILE_SUFFIX;
	__asm        push   eax;
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T9dc;
// LINE 388:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 389:
_T9dc:
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        lea    eax, szCityFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 390:
	__asm        mov    eax, SZ_USER_DATA_FILE_SUFFIX;
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 394:
_Ta07:
	__asm        mov    eax, SZ_CITY_DATA_FILE_SUFFIX;
	__asm        push   eax;
	__asm        lea    eax, szCityFileSavePath[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 396:
	__asm        lea    eax, szCityFileSavePath[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::SaveUserOrCareerGame;
	__asm        mov    nResult, eax;
// LINE 398:
	__asm        cmp    nResult, 0;
	__asm        jne    _Tacc;
// LINE 399:
	__asm        lea    eax, szSplitPathExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFilename[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szGameFileSavePath[0];
	__asm        push   eax;
	__asm        call   _splitpath;
	__asm        add    esp, 0x14;
// LINE 400:
	__asm        lea    eax, szSplitPathDrive[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 401:
	__asm        lea    eax, szSplitPathDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 402:
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        lea    eax, szSplitPathFullDirectory[0];
	__asm        push   eax;
	__asm        push   0x7EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 405:
_Tacc:
	__asm        mov    eax, nResult;
	__asm        jmp    _Tad7;
// LINE 406:
_Tad7:
}

// FUNCTION: COPTER_D 0x00428a74
long  CGameApp::ValidateCopterSaveGameFile(char * szGamePath) {
	/*bp-0x4*/   long lFileType;
	/*bp-0x14c*/ /*packed*/ class MIFF myMIFF; // 0x148 bytes

// LINE 422:
	__asm        mov    eax, szGamePath;
	__asm        push   eax;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 425:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForReading;
	__asm        test   eax, eax;
	__asm        jne    _T54;
// LINE 426:
	__asm        mov    dword ptr [ebp-0x150], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x150];
	__asm        jmp    _T1bd;
// LINE 428:
_T54:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::VerifyFile;
	__asm        test   eax, eax;
	__asm        je     _T7d;

	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::ReadFileCreator;
	__asm        cmp    eax, 0x43505452;
	__asm        je     _Ta8;
// LINE 429:
_T7d:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 430:
	__asm        mov    dword ptr [ebp-0x154], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x154];
	__asm        jmp    _T1bd;
// LINE 433:
_Ta8:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::ReadFileType;
	__asm        mov    lFileType, eax;
// LINE 435:
	__asm        cmp    lFileType, 0x43524552;
	__asm        je     _Tfb;

	__asm        cmp    lFileType, 0x55534552;
	__asm        je     _Tfb;
// LINE 437:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 438:
	__asm        mov    dword ptr [ebp-0x158], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    _T1bd;
// LINE 443:
_Tfb:
	__asm        push   0x4346494C;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::GoToFirstRecordOfGivenType;
	__asm        test   eax, eax;
	__asm        jne    _T13e;
// LINE 444:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 445:
	__asm        mov    dword ptr [ebp-0x15C], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x15C];
	__asm        jmp    _T1bd;
// LINE 450:
_T13e:
	__asm        cmp    lFileType, 0x55534552;
	__asm        jne    _T170;
// LINE 451:
	__asm        mov    dword ptr [ebp-0x160], 3;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x160];
	__asm        jmp    _T1bd;
// LINE 452:
	__asm        jmp    _T19d;
_T170:
	__asm        cmp    lFileType, 0x43524552;
	__asm        jne    _T19d;
// LINE 453:
	__asm        mov    dword ptr [ebp-0x164], 4;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x164];
	__asm        jmp    _T1bd;
// LINE 454:
_T19d:
	__asm        mov    dword ptr [ebp-0x168], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x168];
	__asm        jmp    _T1bd;
// LINE 455:
_T1bd:
}

// FUNCTION: COPTER_D 0x00428c38
int  CGameApp::DisplayFileOpenError(unsigned long nResult) {
// LINE 463:
	__asm        push   1;
	__asm        mov    eax, nResult;
	__asm        add    eax, 0x15E;
	__asm        push   eax;
	__asm        push   0x7D9;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
	__asm        jmp    near ptr 0x00428C61;
// LINE 464:
}



// Contribution: 1:00027c70-00027e75 Module: 68, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00428c70
// list<DirectoryEntry>::~list<DirectoryEntry>



// Contribution: 3:00000484-000004ab Module: 68, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597484
char * SZ_CITY_DATA_FILE_SUFFIX = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597488
char * SZ_CAREER_DATA_FILE_SUFFIX = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059748c
char * SZ_USER_DATA_FILE_SUFFIX = { 0 /* todo */ };



// Contribution: 3:000004ac-000004af Module: 68, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005974ac
uint32_t list<DirectoryEntry>::number_of_lists = 0;



// Contribution: 3:000004b0-000004b3 Module: 68, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005974b0
/*packed*/ struct list<DirectoryEntry>::list_node *list<DirectoryEntry>::last = { 0 /* todo */ };



// Contribution: 3:000004b4-000004b7 Module: 68, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005974b4
/*packed*/ struct list<DirectoryEntry>::list_node *list<DirectoryEntry>::next_avail = { 0 /* todo */ };



// Contribution: 3:000004b8-000004bb Module: 68, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005974b8
/*packed*/ struct list<DirectoryEntry>::list_node *list<DirectoryEntry>::free_list = { 0 /* todo */ };



// Contribution: 3:000004bc-000004bf Module: 68, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005974bc
/*packed*/ struct list<DirectoryEntry>::list_node_buffer *list<DirectoryEntry>::buffer_list = { 0 /* todo */ };

