// Module: Cursor.obj
// Source: C:\Copter\source\sparkal\Cursor.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000737f0-00073953 Module: 35, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x004747f0
void Cursor::Cursor() {
// LINE 19:
	asm( 
"	      004747f0    push ebp"
"	      004747f1    mov ebp,esp"
"	      004747f3    sub esp,4"
"	      004747f6    push ebx"
"	      004747f7    push esi"
"	      004747f8    push edi"
"	      004747f9    mov [ebp-4],ecx"
);
// LINE 20:
	asm( 
"	      004747fc    jmp near ptr 00474801h"
"	      00474801    mov eax,[ebp-4]"
"	      00474804    pop edi"
"	      00474805    pop esi"
"	      00474806    pop ebx"
"	      00474807    leave"
"	      00474808    ret"
);
}

// FUNCTION: SIMCOPTER 0x00474809
void Cursor::~Cursor() {
// LINE 22:
	asm( 
"	      00474809    push ebp"
"	      0047480a    mov ebp,esp"
"	      0047480c    sub esp,4"
"	      0047480f    push ebx"
"	      00474810    push esi"
"	      00474811    push edi"
"	      00474812    mov [ebp-4],ecx"
);
// LINE 23:
	asm( 
"	      00474815    jmp near ptr 0047481Ah"
"	      0047481a    pop edi"
"	      0047481b    pop esi"
"	      0047481c    pop ebx"
"	      0047481d    leave"
"	      0047481e    ret"
);
}

// FUNCTION: SIMCOPTER 0x0047481f
int32_t Cursor::IsButtonDown(unsigned long, unsigned long) {
// LINE 35:
	asm( 
"	      0047481f    push ebp"
"	      00474820    mov ebp,esp"
"	      00474822    sub esp,8"
"	      00474825    push ebx"
"	      00474826    push esi"
"	      00474827    push edi"
);
// LINE 40:
	asm( 
"	      00474828    mov dword ptr [ebp-8],80000000h"
);
// LINE 47:
	asm( 
"	      0047482f    cmp dword ptr [ebp+8],1"
"	      00474833    jne near ptr 00474845h"
);
// LINE 48:
	asm( 
"	      00474839    mov dword ptr [ebp+8],1"
);
// LINE 49:
	asm( 
"	      00474840    jmp near ptr 0047486Ch"
"	      00474845    cmp dword ptr [ebp+8],2"
"	      00474849    jne near ptr 0047485Bh"
);
// LINE 50:
	asm( 
"	      0047484f    mov dword ptr [ebp+8],2"
);
// LINE 51:
	asm( 
"	      00474856    jmp near ptr 0047486Ch"
"	      0047485b    cmp dword ptr [ebp+8],4"
"	      0047485f    jne near ptr 0047486Ch"
);
// LINE 52:
	asm( 
"	      00474865    mov dword ptr [ebp+8],4"
);
// LINE 54:
	asm( 
"	      0047486c    mov eax,[ebp+8]"
"	      0047486f    push eax"
"	      00474870    call dword ptr ds:[6C3898h]"
"	      00474876    movsx eax,ax"
"	      00474879    mov [ebp-4],eax"
"	      0047487c    test byte ptr [ebp-1],80h"
"	      00474880    jne near ptr 0047488Dh"
);
// LINE 55:
	asm( 
"	      00474886    xor eax,eax"
"	      00474888    jmp near ptr 0047491Ch"
);
// LINE 59:
	asm( 
"	      0047488d    cmp dword ptr [ebp+0Ch],0"
"	      00474891    je near ptr 00474912h"
);
// LINE 60:
	asm( 
"	      00474897    test byte ptr [ebp+0Ch],1"
"	      0047489b    je near ptr 004748C0h"
);
// LINE 61:
	asm( 
"	      004748a1    push 10h"
"	      004748a3    call dword ptr ds:[6C3898h]"
"	      004748a9    movsx eax,ax"
"	      004748ac    mov [ebp-4],eax"
"	      004748af    test byte ptr [ebp-1],80h"
"	      004748b3    jne near ptr 004748C0h"
);
// LINE 62:
	asm( 
"	      004748b9    xor eax,eax"
"	      004748bb    jmp near ptr 0047491Ch"
);
// LINE 64:
	asm( 
"	      004748c0    test byte ptr [ebp+0Ch],2"
"	      004748c4    je near ptr 004748E9h"
);
// LINE 65:
	asm( 
"	      004748ca    push 11h"
"	      004748cc    call dword ptr ds:[6C3898h]"
"	      004748d2    movsx eax,ax"
"	      004748d5    mov [ebp-4],eax"
"	      004748d8    test byte ptr [ebp-1],80h"
"	      004748dc    jne near ptr 004748E9h"
);
// LINE 66:
	asm( 
"	      004748e2    xor eax,eax"
"	      004748e4    jmp near ptr 0047491Ch"
);
// LINE 68:
	asm( 
"	      004748e9    test byte ptr [ebp+0Ch],4"
"	      004748ed    je near ptr 00474912h"
);
// LINE 69:
	asm( 
"	      004748f3    push 12h"
"	      004748f5    call dword ptr ds:[6C3898h]"
"	      004748fb    movsx eax,ax"
"	      004748fe    mov [ebp-4],eax"
"	      00474901    test byte ptr [ebp-1],80h"
"	      00474905    jne near ptr 00474912h"
);
// LINE 70:
	asm( 
"	      0047490b    xor eax,eax"
"	      0047490d    jmp near ptr 0047491Ch"
);
// LINE 75:
	asm( 
"	      00474912    mov eax,1"
"	      00474917    jmp near ptr 0047491Ch"
);
// LINE 77:
	asm( 
"	      0047491c    pop edi"
"	      0047491d    pop esi"
"	      0047491e    pop ebx"
"	      0047491f    leave"
"	      00474920    ret"
);
}

// FUNCTION: SIMCOPTER 0x00474921
int32_t Cursor::WhereIsCursor(unsigned long *, unsigned long *) {
// LINE 89:
	asm( 
"	      00474921    push ebp"
"	      00474922    mov ebp,esp"
"	      00474924    sub esp,0Ch"
"	      00474927    push ebx"
"	      00474928    push esi"
"	      00474929    push edi"
);
// LINE 95:
	asm( 
"	      0047492a    lea eax,[ebp-0Ch]"
"	      0047492d    push eax"
"	      0047492e    call dword ptr ds:[6C3894h]"
"	      00474934    mov [ebp-4],eax"
);
// LINE 100:
	asm( 
"	      00474937    mov eax,[ebp-0Ch]"
"	      0047493a    mov ecx,[ebp+8]"
"	      0047493d    mov [ecx],eax"
);
// LINE 101:
	asm( 
"	      0047493f    mov eax,[ebp-8]"
"	      00474942    mov ecx,[ebp+0Ch]"
"	      00474945    mov [ecx],eax"
);
// LINE 102:
	asm( 
"	      00474947    mov eax,[ebp-4]"
"	      0047494a    jmp near ptr 0047494Fh"
);
// LINE 104:
	asm( 
"	      0047494f    pop edi"
"	      00474950    pop esi"
"	      00474951    pop ebx"
"	      00474952    leave"
"	      00474953    ret"
);
}

