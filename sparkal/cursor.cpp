// Module: Cursor.obj
// Source: C:\Copter\source\sparkal\Cursor.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class Cursor (forward reference);
class Cursor{ // packed(0x1 bytes) TI: 0x273d
public:
	void Cursor();
	void ~Cursor();
	// calltype: NearC
	static int32_t IsButtonDown(unsigned long, unsigned long);
	// calltype: NearC
	static int32_t WhereIsCursor(unsigned long *, unsigned long *);
};

// Type: void;

// Type: unsigned long;

// Type: int32_t;

// Type: unsigned long *;

// Type: struct tagPOINT;
struct tagPOINT{ // packed(0x8 bytes) TI: 0x1131
	long x;
	long y;
};



// Contribution: 1:000737f0-00073953 Module: 35, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004747f0
void Cursor::Cursor() {
// LINE 20:
	__asm        jmp    near ptr 0x00474801;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00474809
void Cursor::~Cursor() {
// LINE 23:
	__asm        jmp    near ptr 0x0047481A;
}

// FUNCTION: COPTER_D 0x0047481f
int32_t Cursor::IsButtonDown(unsigned long nCursor, unsigned long nModifiers) {
	const int32_t nAndValue;
	int32_t nKeyState;

// LINE 40:
	nAndValue = 0x80000000;
// LINE 47:
	__asm        cmp    nCursor, 1;
	__asm        jne    _T26;
// LINE 48:
	nCursor = 0x1;
// LINE 49:
	__asm        jmp    _T4d;
_T26:
	__asm        cmp    nCursor, 2;
	__asm        jne    _T3c;
// LINE 50:
	nCursor = 0x2;
// LINE 51:
	__asm        jmp    _T4d;
_T3c:
	__asm        cmp    nCursor, 4;
	__asm        jne    _T4d;
// LINE 52:
	nCursor = 0x4;
// LINE 54:
_T4d:
	__asm        mov    eax, nCursor;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3898];
	__asm        movsx  eax, ax;
	__asm        mov    nKeyState, eax;
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&nKeyState) + 3), 0x80;
	__asm        jne    _T6e;
// LINE 55:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfd;
// LINE 59:
_T6e:
	__asm        cmp    nModifiers, 0;
	__asm        je     _Tf3;
// LINE 60:
	__asm        test   reinterpret_cast<uint8_t>(nModifiers), 1;
	__asm        je     _Ta1;
// LINE 61:
	__asm        push   0x10;
	__asm        call   dword ptr ds:[0x6C3898];
	__asm        movsx  eax, ax;
	__asm        mov    nKeyState, eax;
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&nKeyState) + 3), 0x80;
	__asm        jne    _Ta1;
// LINE 62:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfd;
// LINE 64:
_Ta1:
	__asm        test   reinterpret_cast<uint8_t>(nModifiers), 2;
	__asm        je     _Tca;
// LINE 65:
	__asm        push   0x11;
	__asm        call   dword ptr ds:[0x6C3898];
	__asm        movsx  eax, ax;
	__asm        mov    nKeyState, eax;
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&nKeyState) + 3), 0x80;
	__asm        jne    _Tca;
// LINE 66:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfd;
// LINE 68:
_Tca:
	__asm        test   reinterpret_cast<uint8_t>(nModifiers), 4;
	__asm        je     _Tf3;
// LINE 69:
	__asm        push   0x12;
	__asm        call   dword ptr ds:[0x6C3898];
	__asm        movsx  eax, ax;
	__asm        mov    nKeyState, eax;
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&nKeyState) + 3), 0x80;
	__asm        jne    _Tf3;
// LINE 70:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfd;
// LINE 75:
_Tf3:
	__asm        mov    eax, 1;
	__asm        jmp    _Tfd;
// LINE 77:
_Tfd:
}

// FUNCTION: COPTER_D 0x00474921
int32_t Cursor::WhereIsCursor(unsigned long * nXPosition, unsigned long * nYPosition) {
	struct tagPOINT ptCursor;
	int32_t nReturnValue;

// LINE 95:
	__asm        lea    eax, ptCursor.x;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3894];
	__asm        mov    nReturnValue, eax;
// LINE 100:
	__asm        mov    eax, ptCursor.x;
	__asm        mov    ecx, nXPosition;
	__asm        mov    [ecx], eax;
// LINE 101:
	__asm        mov    eax, ptCursor.y;
	__asm        mov    ecx, nYPosition;
	__asm        mov    [ecx], eax;
// LINE 102:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0047494F;
// LINE 104:
}

