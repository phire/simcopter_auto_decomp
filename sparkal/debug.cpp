// Module: Debug.obj
// Source: C:\Copter\source\sparkal\Debug.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CDebugWindow (forward reference);
class CDebugWindow{
public:
	void CDebugWindow();
	void ~CDebugWindow();
	void HandleDebugCommand(char *);
	int32_t Create(char *);
	int32_t Save(char *);
	void ShowWindow();
	void HideWindow();
	void RegisterCommand(struct debug_command*);
	void UnregisterCommand(struct debug_command*);
	void OutputString(char *);
	long InstanceWindowProcedure(uint32_t, uint32_t, long);
private:
	class deque<basic_string<char>> m_strings;
	class vector<debug_command *> m_commands;
	static char * m_className;
	static struct tagWNDCLASSA m_class;
	void * __ptr32 m_hWnd;
	void * __ptr32 m_editWnd;
	// calltype: NearStd
	static long WindowProcedure(void * __ptr32, uint32_t, uint32_t, long);
	void OnSize(unsigned long, unsigned short, unsigned short);
	void OnEditChange();
	void OnPaint();
	void OnScroll(int32_t, int32_t);
	void RecalcScrollRange();
};

// Type: char *;
// Type: struct debug_command (forward reference);
public debug_command
// Type: class vector<basic_string<char>>;
class vector<basic_string<char>>{
	using vector_allocator = class allocator<basic_string<char>>;
	using value_type = class basic_string<char>;
	using pointer = class basic_string<char>*;
	using iterator = class basic_string<char>*;
	using const_iterator = const class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static class allocator<basic_string<char>> static_allocator;
	class basic_string<char>* start;
	class basic_string<char>* finish;
	class basic_string<char>* end_of_storage;
	void insert_aux(class basic_string<char>*, const class basic_string<char>&);
public:
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const class basic_string<char>& vector<basic_string<char>>(uint32_t);
	class basic_string<char>& vector<basic_string<char>>(uint32_t);
	void vector<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void vector<basic_string<char>>(const class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	class vector<basic_string<char>>& operator=(const class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	void push_back(const class basic_string<char>&);
	void swap(class vector<basic_string<char>>&);
	void vector<basic_string<char>>(class basic_string<char>*, uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>*, const class basic_string<char>*);
	class basic_string<char>* vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>&);
	void pop_back();
	void vector<basic_string<char>>(class basic_string<char>*, class basic_string<char>*);
	void vector<basic_string<char>>(class basic_string<char>*);
};

// Type: int32_t;
// Type: void;
// Type: struct class_debugger<CDebugWindow,CDebugWindowhelp_text>;
class class_debugger<CDebugWindow,CDebugWindowhelp_text> : public debug_command
{
public:
	class basic_string<char> command_string;
	class basic_string<char> usage_string;
	// vtable: 0
	intro void execute(char *);
	void class_debugger<CDebugWindow,CDebugWindowhelp_text>(class CDebugWindow*);
	class CDebugWindow* m_instance;
	virtual void execute(char *);
};

// Type: struct _iobuf (forward reference);
// Type: class deque<basic_string<char>>::iterator;
class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
{
protected:
	class basic_string<char>* current;
	class basic_string<char>* first;
	class basic_string<char>* last;
	class basic_string<char>** node;
public:
	void deque<basic_string<char>>::iterator();
protected:
	void deque<basic_string<char>>::iterator(class basic_string<char>*, class basic_string<char>**);
public:
	class basic_string<char>& operator*();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	int32_t deque<basic_string<char>>::iterator(const class deque<basic_string<char>>::iterator&);
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
	class deque<basic_string<char>>::iterator& operator+=(int32_t);
	class deque<basic_string<char>>::iterator& operator-=(int32_t);
	class deque<basic_string<char>>::iterator operator+(int32_t);
	class basic_string<char>& operator[](int32_t);
	int32_t operator==(const class deque<basic_string<char>>::iterator&);
	int32_t operator<(const class deque<basic_string<char>>::iterator&);
};

// Type: unsigned long;
// Type: unsigned short;
// Type: struct tagRECT;
class tagRECT{
public:
	long left;
	long top;
	long right;
	long bottom;
};

// Type: struct tagPAINTSTRUCT;
class tagPAINTSTRUCT{
public:
	void * __ptr32 hdc;
	int32_t fErase;
	struct tagRECT rcPaint;
	int32_t fRestore;
	int32_t fIncUpdate;
	unsigned char[32] rgbReserved;
};

// Type: void * __ptr32;
// Type: struct tagTEXTMETRICA;
class tagTEXTMETRICA{
public:
	long tmHeight;
	long tmAscent;
	long tmDescent;
	long tmInternalLeading;
	long tmExternalLeading;
	long tmAveCharWidth;
	long tmMaxCharWidth;
	long tmWeight;
	long tmOverhang;
	long tmDigitizedAspectX;
	long tmDigitizedAspectY;
	unsigned char tmFirstChar;
	unsigned char tmLastChar;
	unsigned char tmDefaultChar;
	unsigned char tmBreakChar;
	unsigned char tmItalic;
	unsigned char tmUnderlined;
	unsigned char tmStruckOut;
	unsigned char tmPitchAndFamily;
	unsigned char tmCharSet;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;
// Type: char[256];
// Type: uint32_t;
// Type: class vector<basic_string<char>> (forward reference);
class vector<basic_string<char>>{
	using vector_allocator = class allocator<basic_string<char>>;
	using value_type = class basic_string<char>;
	using pointer = class basic_string<char>*;
	using iterator = class basic_string<char>*;
	using const_iterator = const class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static class allocator<basic_string<char>> static_allocator;
	class basic_string<char>* start;
	class basic_string<char>* finish;
	class basic_string<char>* end_of_storage;
	void insert_aux(class basic_string<char>*, const class basic_string<char>&);
public:
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const class basic_string<char>& vector<basic_string<char>>(uint32_t);
	class basic_string<char>& vector<basic_string<char>>(uint32_t);
	void vector<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void vector<basic_string<char>>(const class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	class vector<basic_string<char>>& operator=(const class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	void push_back(const class basic_string<char>&);
	void swap(class vector<basic_string<char>>&);
	void vector<basic_string<char>>(class basic_string<char>*, uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>*, const class basic_string<char>*);
	class basic_string<char>* vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>&);
	void pop_back();
	void vector<basic_string<char>>(class basic_string<char>*, class basic_string<char>*);
	void vector<basic_string<char>>(class basic_string<char>*);
};

// Type: struct class_debugger<CDebugWindow,CDebugWindowhelp_text> (forward reference);
class class_debugger<CDebugWindow,CDebugWindowhelp_text> : public debug_command
{
public:
	class basic_string<char> command_string;
	class basic_string<char> usage_string;
	// vtable: 0
	intro void execute(char *);
	void class_debugger<CDebugWindow,CDebugWindowhelp_text>(class CDebugWindow*);
	class CDebugWindow* m_instance;
	virtual void execute(char *);
};

// Type: class deque<basic_string<char>>::iterator (forward reference);
class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
{
protected:
	class basic_string<char>* current;
	class basic_string<char>* first;
	class basic_string<char>* last;
	class basic_string<char>** node;
public:
	void deque<basic_string<char>>::iterator();
protected:
	void deque<basic_string<char>>::iterator(class basic_string<char>*, class basic_string<char>**);
public:
	class basic_string<char>& operator*();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	int32_t deque<basic_string<char>>::iterator(const class deque<basic_string<char>>::iterator&);
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
	class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
	class deque<basic_string<char>>::iterator& operator+=(int32_t);
	class deque<basic_string<char>>::iterator& operator-=(int32_t);
	class deque<basic_string<char>>::iterator operator+(int32_t);
	class basic_string<char>& operator[](int32_t);
	int32_t operator==(const class deque<basic_string<char>>::iterator&);
	int32_t operator<(const class deque<basic_string<char>>::iterator&);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class deque<basic_string<char>> (forward reference);
class deque<basic_string<char>>{
	class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
	{
	protected:
		class basic_string<char>* current;
		class basic_string<char>* first;
		class basic_string<char>* last;
		class basic_string<char>** node;
	public:
		void deque<basic_string<char>>::iterator();
	protected:
		void deque<basic_string<char>>::iterator(class basic_string<char>*, class basic_string<char>**);
	public:
		class basic_string<char>& operator*();
		class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
		int32_t deque<basic_string<char>>::iterator(const class deque<basic_string<char>>::iterator&);
		class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
		class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
		class deque<basic_string<char>>::iterator deque<basic_string<char>>::iterator(int32_t);
		class deque<basic_string<char>>::iterator& deque<basic_string<char>>::iterator();
		class deque<basic_string<char>>::iterator& operator+=(int32_t);
		class deque<basic_string<char>>::iterator& operator-=(int32_t);
		class deque<basic_string<char>>::iterator operator+(int32_t);
		class basic_string<char>& operator[](int32_t);
		int32_t operator==(const class deque<basic_string<char>>::iterator&);
		int32_t operator<(const class deque<basic_string<char>>::iterator&);
	};
	class deque<basic_string<char>>::const_iterator : public random_access_iterator<basic_string<char>,int>
	{
	protected:
		class basic_string<char>* current;
		class basic_string<char>* first;
		class basic_string<char>* last;
		class basic_string<char>** node;
	public:
		void deque<basic_string<char>>::const_iterator(const class deque<basic_string<char>>::iterator&);
		void deque<basic_string<char>>::const_iterator();
	protected:
		void deque<basic_string<char>>::const_iterator(class basic_string<char>*, class basic_string<char>**);
	public:
		const class basic_string<char>& operator*();
		class deque<basic_string<char>>::const_iterator deque<basic_string<char>>::const_iterator(int32_t);
		int32_t deque<basic_string<char>>::const_iterator(const class deque<basic_string<char>>::const_iterator&);
		class deque<basic_string<char>>::const_iterator deque<basic_string<char>>::const_iterator(int32_t);
		class deque<basic_string<char>>::const_iterator& deque<basic_string<char>>::const_iterator();
		class deque<basic_string<char>>::const_iterator deque<basic_string<char>>::const_iterator(int32_t);
		class deque<basic_string<char>>::const_iterator& deque<basic_string<char>>::const_iterator();
		class deque<basic_string<char>>::const_iterator& operator+=(int32_t);
		class deque<basic_string<char>>::const_iterator& operator-=(int32_t);
		class deque<basic_string<char>>::const_iterator operator+(int32_t);
		const class basic_string<char>& operator[](int32_t);
		int32_t operator==(const class deque<basic_string<char>>::const_iterator&);
		int32_t operator<(const class deque<basic_string<char>>::const_iterator&);
	};
	using value_type = class basic_string<char>;
	using data_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using map_allocator_type = class allocator<basic_string<char> *>;
protected:
	static class allocator<basic_string<char>> data_allocator;
	static uint32_t buffer_size;
	static class allocator<basic_string<char> *> map_allocator;
	using map_pointer = class basic_string<char>**;
	using const_reverse_iterator = class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
protected:
	class deque<basic_string<char>>::iterator start;
	class deque<basic_string<char>>::iterator finish;
	uint32_t length;
	class basic_string<char>** map;
	uint32_t map_size;
	void allocate_at_begin();
	void allocate_at_end();
	void deallocate_at_begin();
	void deallocate_at_end();
public:
	void deque<basic_string<char>>(const class deque<basic_string<char>>&);
	void deque<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void deque<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void deque<basic_string<char>>();
	class deque<basic_string<char>>::const_iterator deque<basic_string<char>>();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>();
	class deque<basic_string<char>>::const_iterator deque<basic_string<char>>();
	class deque<basic_string<char>>::iterator deque<basic_string<char>>();
	class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> deque<basic_string<char>>();
	class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> deque<basic_string<char>>();
	class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> deque<basic_string<char>>();
	class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> deque<basic_string<char>>();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& deque<basic_string<char>>(uint32_t);
	class basic_string<char>& deque<basic_string<char>>(uint32_t);
	const class basic_string<char>& deque<basic_string<char>>();
	class basic_string<char>& deque<basic_string<char>>();
	const class basic_string<char>& deque<basic_string<char>>();
	class basic_string<char>& deque<basic_string<char>>();
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void pop_front();
	void pop_back();
	void swap(class deque<basic_string<char>>&);
	void deque<basic_string<char>>(class deque<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	void deque<basic_string<char>>(class deque<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	class deque<basic_string<char>>::iterator deque<basic_string<char>>(class deque<basic_string<char>>::iterator, const class basic_string<char>&);
	void deque<basic_string<char>>(class deque<basic_string<char>>::iterator, class deque<basic_string<char>>::iterator);
	void deque<basic_string<char>>(class deque<basic_string<char>>::iterator);
	class deque<basic_string<char>>& operator=(const class deque<basic_string<char>>&);
	void ~deque<basic_string<char>>();
};

// Type: class vector<debug_command *> (forward reference);
class vector<debug_command *>{
	using vector_allocator = class allocator<debug_command *>;
	using value_type = struct debug_command*;
	using pointer = struct debug_command**;
	using iterator = struct debug_command**;
	using const_iterator = const struct debug_command**;
	using reference = struct debug_command*&;
	using const_reference = const struct debug_command*&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int>;
	using reverse_iterator = class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int>;
protected:
	static class allocator<debug_command *> static_allocator;
	struct debug_command** start;
	struct debug_command** finish;
	struct debug_command** end_of_storage;
	void insert_aux(struct debug_command**, const struct debug_command*&);
public:
	const struct debug_command** vector<debug_command *>();
	struct debug_command** vector<debug_command *>();
	const struct debug_command** vector<debug_command *>();
	struct debug_command** vector<debug_command *>();
	class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int> vector<debug_command *>();
	class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int> vector<debug_command *>();
	class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int> vector<debug_command *>();
	class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int> vector<debug_command *>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const struct debug_command*& vector<debug_command *>(uint32_t);
	struct debug_command*& vector<debug_command *>(uint32_t);
	void vector<debug_command *>(const struct debug_command**, const struct debug_command**);
	void vector<debug_command *>(const class vector<debug_command *>&);
	void vector<debug_command *>(uint32_t, const struct debug_command*&);
	void vector<debug_command *>();
	void ~vector<debug_command *>();
	class vector<debug_command *>& operator=(const class vector<debug_command *>&);
	void reserve(uint32_t);
	const struct debug_command*& vector<debug_command *>();
	struct debug_command*& vector<debug_command *>();
	const struct debug_command*& vector<debug_command *>();
	struct debug_command*& vector<debug_command *>();
	void push_back(const struct debug_command*&);
	void swap(class vector<debug_command *>&);
	void vector<debug_command *>(struct debug_command**, uint32_t, const struct debug_command*&);
	void vector<debug_command *>(struct debug_command**, const struct debug_command**, const struct debug_command**);
	struct debug_command** vector<debug_command *>(struct debug_command**, const struct debug_command*&);
	void pop_back();
	void vector<debug_command *>(struct debug_command**, struct debug_command**);
	void vector<debug_command *>(struct debug_command**);
};



// Contribution: 1:00021280-000246c8 Module: 70, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00422280
void CDebugWindow::HandleDebugCommand(char * data) {
	struct debug_command** it;
	class vector<basic_string<char>> commands;
	int32_t num;

// LINE 23:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xB8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 26:
	__asm        mov    commands.start, 0;
	__asm        mov    commands.finish, 0;
	__asm        mov    commands.end_of_storage, 0;
	__asm        jmp    near ptr 0x004222AC;
// LINE 27:
	__asm        lea    eax, commands.start;
	__asm        push   eax;
	__asm        sub    esp, 8;
	__asm        mov    [ebp-0x18], esp;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x00411990;
	__asm        call   0x00425041;
	__asm        add    esp, 0xC;
	__asm        mov    num, eax;
// LINE 30:
	__asm        cmp    num, 1;
	__asm        jne    near ptr 0x00422443;
// LINE 32:
	__asm        push   0x5973A4;
	__asm        call   0x00424B14;
	__asm        add    esp, 4;
// LINE 33:
	__asm        jmp    near ptr 0x004222E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    it, eax;
// LINE 35:
	__asm        jmp    near ptr 0x004222FE;
	__asm        add    it, 4;
	__asm        jmp    near ptr 0x00422303;
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00422431;
// LINE 36:
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00422346;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042234B;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00422368;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004223E0;
	__asm        jmp    near ptr 0x0042237D;
	__asm        jmp    near ptr 0x00422382;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004223A7;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004223B3;
	__asm        jmp    near ptr 0x004223B3;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x004223B3;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004223E0;
	__asm        jmp    near ptr 0x004223E5;
	__asm        mov    byte ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x004223EE;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004223F9;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00422419;
	__asm        jmp    near ptr 0x0042241E;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00424B14;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004222FA;
// LINE 37:
	__asm        push   0x5973B8;
	__asm        call   0x00424B14;
	__asm        add    esp, 4;
// LINE 39:
	__asm        jmp    near ptr 0x0042280F;
// LINE 41:
	__asm        jmp    near ptr 0x00422448;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    it, eax;
// LINE 43:
	__asm        jmp    near ptr 0x0042245D;
	__asm        add    it, 4;
	__asm        jmp    near ptr 0x00422462;
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x0042280F;
// LINE 44:
	__asm        jmp    near ptr 0x00422479;
	__asm        jmp    near ptr 0x0042247E;
	__asm        mov    eax, commands.start;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00422497;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x004224BD;
	__asm        jmp    near ptr 0x004224AC;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004224C4;
	__asm        mov    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004224C9;
	__asm        jmp    near ptr 0x004224CE;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004224F3;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004224FF;
	__asm        jmp    near ptr 0x004224FF;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x004224FF;
	__asm        jmp    near ptr 0x00422504;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x00410C40;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042252D;
	__asm        jmp    near ptr 0x00422532;
	__asm        jmp    near ptr 0x0042280A;
	__asm        jmp    near ptr 0x00422541;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0042280A;
// LINE 46:
	__asm        jmp    near ptr 0x00422546;
	__asm        jmp    near ptr 0x0042254B;
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00422585;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042258A;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004225AD;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00422649;
	__asm        jmp    near ptr 0x004225C5;
	__asm        jmp    near ptr 0x004225CA;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004225F8;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00422607;
	__asm        jmp    near ptr 0x00422607;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x00422607;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00422649;
	__asm        jmp    near ptr 0x0042264E;
	__asm        mov    byte ptr [ebp-0x74], 0;
	__asm        jmp    near ptr 0x00422657;
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x00422662;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00422688;
	__asm        jmp    near ptr 0x0042268D;
	__asm        mov    eax, commands.start;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004226D1;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004226D6;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004226F9;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00422795;
	__asm        jmp    near ptr 0x00422711;
	__asm        jmp    near ptr 0x00422716;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00422744;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x00422753;
	__asm        jmp    near ptr 0x00422753;
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    near ptr 0x00422753;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00422795;
	__asm        jmp    near ptr 0x0042279A;
	__asm        mov    byte ptr [ebp-0x98], 0;
	__asm        jmp    near ptr 0x004227A6;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x004227B7;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004227E6;
	__asm        jmp    near ptr 0x004227EB;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0x5973CC;
	__asm        call   0x00424B14;
	__asm        add    esp, 0xC;
// LINE 49:
	__asm        jmp    near ptr 0x00422459;
// LINE 50:
	__asm        mov    eax, commands.finish;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, commands.start;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    [ebp-0x48], eax;
	__asm        je     near ptr 0x004228BC;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00422868;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00422868;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00422868;
	__asm        jmp    near ptr 0x0042286D;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00422893;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422898;
	__asm        jmp    near ptr 0x004228A9;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004228AE;
	__asm        jmp    near ptr 0x004228B3;
	__asm        add    dword ptr [ebp-0x48], 8;
	__asm        jmp    near ptr 0x0042281B;
	__asm        jmp    near ptr 0x004228C1;
	__asm        mov    eax, commands.start;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004228D8;
	__asm        jmp    near ptr 0x004228DD;
	__asm        jmp    near ptr 0x004228E2;
	__asm        jmp    near ptr 0x004228E7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004228ee
void CDebugWindow::CDebugWindow() {
	static const struct class_debugger<CDebugWindow,CDebugWindowhelp_text> help_command = { /* <data@0x005c2900> */ };

// LINE 58:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x5C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x00422926;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        jmp    near ptr 0x00422953;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    dword ptr [ebp-0x10], 0x200;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004229A6;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004229AC;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004229B1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597420], eax;
	__asm        jmp    near ptr 0x004229C0;
	__asm        jmp    near ptr 0x004229C5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        jmp    near ptr 0x004229E8;
// LINE 59:
	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x5C28F8];
	__asm        test   al, 1;
	__asm        jne    near ptr 0x00422D29;
	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x5C28F8];
	__asm        or     al, 1;
	__asm        mov    ds:[0x5C28F8], al;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00422A57;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00422A4A;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ds:[0x5C2908], eax;
	__asm        jmp    near ptr 0x00422A61;
	__asm        mov    dword ptr ds:[0x5C2908], 0;
	__asm        mov    dword ptr ds:[0x5C2904], 0;
	__asm        jmp    near ptr 0x00422A70;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00422A99;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x0041E2D0;
	__asm        mov    ds:[0x5C2910], eax;
	__asm        jmp    near ptr 0x00422AA3;
	__asm        mov    dword ptr ds:[0x5C2910], 0;
	__asm        mov    dword ptr ds:[0x5C290C], 0;
	__asm        jmp    near ptr 0x00422AB2;
	__asm        mov    dword ptr ds:[0x5C2900], 0x58F420;
	__asm        jmp    near ptr 0x00422AC1;
	__asm        mov    dword ptr ds:[0x5C2900], 0x58F41C;
	__asm        mov    eax, this;
	__asm        mov    ds:[0x5C2914], eax;
	__asm        mov    eax, ds:[0x597370];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00422AE0;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00422B2B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422B1C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422B2B;
	__asm        jmp    near ptr 0x00422B30;
	__asm        mov    eax, ds:[0x5C2910];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00422B5F;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00422BAD;
	__asm        jmp    near ptr 0x00422B4E;
	__asm        mov    eax, ds:[0x5C2910];
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00422BAD;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00422B8E;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00422B95;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        lea    ecx, ds:[0x5C290C];
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x5C2910], eax;
	__asm        jmp    near ptr 0x00422BDF;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00422BDF;
	__asm        jmp    near ptr 0x00422BBC;
	__asm        mov    eax, ds:[0x5C2910];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00422BDF;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, ds:[0x5C2910];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00422BF0;
	__asm        jmp    near ptr 0x00422BF5;
	__asm        mov    eax, ds:[0x59736C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00422C02;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00422C4D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422C3E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422C4D;
	__asm        jmp    near ptr 0x00422C52;
	__asm        mov    eax, ds:[0x5C2908];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00422C81;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00422CCF;
	__asm        jmp    near ptr 0x00422C70;
	__asm        mov    eax, ds:[0x5C2908];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00422CCF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00422CB0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00422CB7;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        lea    ecx, ds:[0x5C2904];
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ds:[0x5C2908], eax;
	__asm        jmp    near ptr 0x00422D01;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00422D01;
	__asm        jmp    near ptr 0x00422CDE;
	__asm        mov    eax, ds:[0x5C2908];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00422D01;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, ds:[0x5C2908];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00422D12;
	__asm        jmp    near ptr 0x00422D17;
	__asm        jmp    near ptr 0x00422D1C;
	__asm        push   0x422DBA;
	__asm        call   0x0056D090;
	__asm        add    esp, 4;
	__asm        mov    dword ptr [ebp-0xC], 0x5C2900;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00422D7E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00422D56;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00422D6D;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00422D6D;
	__asm        jmp    near ptr 0x00422D72;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x30], 4;
	__asm        jmp    near ptr 0x00422D99;
	__asm        jmp    near ptr 0x00422D83;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2C;
	__asm        call   0x00426570;
	__asm        jmp    near ptr 0x00422D9E;
	__asm        jmp    near ptr 0x00422DA3;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 64:
	__asm        jmp    near ptr 0x00422DB2;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00422dba
// $E20

// FUNCTION: COPTER_D 0x00422f4b
void CDebugWindow::~CDebugWindow() {
// LINE 67:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 69:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00422F71;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3804];
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 72:
	__asm        jmp    near ptr 0x00422F80;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00422FA6;
	__asm        jmp    near ptr 0x00422F9D;
	__asm        add    dword ptr [ebp-0x6C], 4;
	__asm        jmp    near ptr 0x00422F89;
	__asm        jmp    near ptr 0x00422FAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00422FC5;
	__asm        jmp    near ptr 0x00422FCA;
	__asm        jmp    near ptr 0x00422FCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00422FE6;
	__asm        jmp    near ptr 0x004231DC;
	__asm        jmp    near ptr 0x00422FE6;
	__asm        jmp    near ptr 0x00422FF5;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x004231DC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00423016;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042301B;
	__asm        jmp    near ptr 0x00423020;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax], 8;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x20];
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00423043;
	__asm        jmp    near ptr 0x004230A0;
	__asm        jmp    near ptr 0x00423043;
	__asm        jmp    near ptr 0x00423052;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        jne    near ptr 0x004230A0;
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0x14];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423073;
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423094;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x1C], eax;
	__asm        jne    near ptr 0x004231D2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004230C9;
	__asm        jmp    near ptr 0x004230CE;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x004230E0;
	__asm        jmp    near ptr 0x004230E5;
	__asm        jmp    near ptr 0x00423174;
	__asm        jmp    near ptr 0x004230F4;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00423174;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00423115;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042316A;
	__asm        jmp    near ptr 0x0042316F;
	__asm        jmp    near ptr 0x004231CD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, ds:[0x597420];
	__asm        shl    eax, 3;
	__asm        mov    ecx, [ebp-0x60];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004231B1;
	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    ecx, this;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004231D2;
	__asm        jmp    near ptr 0x004231D7;
	__asm        jmp    near ptr 0x00422FCF;
	__asm        jmp    near ptr 0x004231E1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004231e6
int32_t CDebugWindow::Create(char * windowName) {
// LINE 75:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 77:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00423359;
// LINE 79:
// Block start:
	int32_t Width;
	int32_t Height;
	int32_t xPos;
	__asm        mov    dword ptr ds:[0x5C28D0], 0x20;
// LINE 80:
	__asm        mov    dword ptr ds:[0x5C28D4], 0x4249EF;
// LINE 81:
	__asm        mov    dword ptr ds:[0x5C28D8], 0;
// LINE 82:
	__asm        mov    dword ptr ds:[0x5C28DC], 0;
// LINE 83:
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        mov    ds:[0x5C28E0], eax;
// LINE 84:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C381C];
	__asm        mov    ds:[0x5C28E4], eax;
// LINE 85:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3818];
	__asm        mov    ds:[0x5C28E8], eax;
// LINE 86:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3560];
	__asm        mov    ds:[0x5C28EC], eax;
// LINE 87:
	__asm        mov    dword ptr ds:[0x5C28F0], 0;
// LINE 88:
	__asm        mov    eax, ds:[0x597368];
	__asm        mov    ds:[0x5C28F4], eax;
// LINE 89:
	__asm        push   0x5C28D0;
	__asm        call   dword ptr ds:[0x6C3814];
// LINE 91:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        sub    eax, 0x280;
	__asm        mov    Width, eax;
// LINE 92:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    Height, eax;
// LINE 93:
	__asm        mov    xPos, 0x280;
// LINE 94:
	__asm        cmp    Width, 0;
	__asm        jg     near ptr 0x004232BB;
// LINE 96:
	__asm        mov    Width, 0x64;
// LINE 97:
	__asm        mov    xPos, 0x21C;
// LINE 110:
	__asm        push   0;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, xPos;
	__asm        push   eax;
	__asm        push   0x90E40000;
	__asm        mov    eax, windowName;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597368];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 111:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0xFFFFFFEB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
// LINE 124:
	__asm        push   0;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x19;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x50801044;
	__asm        push   0x5973DC;
	__asm        push   0x5973E0;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 125:
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x004236C6;
// LINE 126:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00423360;
// LINE 129:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00423360;
// LINE 130:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00423367
void CDebugWindow::ShowWindow() {
// LINE 134:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 136:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 138:
	__asm        jmp    near ptr 0x00423387;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042338c
void CDebugWindow::HideWindow() {
// LINE 140:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 142:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 144:
	__asm        jmp    near ptr 0x004233AC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004233b1
int32_t CDebugWindow::Save(char * filePath) {
	struct _iobuf* file;
	class deque<basic_string<char>>::iterator it;

// LINE 146:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x78;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 153:
	__asm        push   0x5973E8;
	__asm        mov    eax, filePath;
	__asm        push   eax;
	__asm        call   0x0056D910;
	__asm        add    esp, 8;
	__asm        mov    file, eax;
// LINE 154:
	__asm        cmp    file, 0;
	__asm        jne    near ptr 0x004233E2;
// LINE 155:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004236BF;
// LINE 157:
	__asm        mov    eax, this;
	__asm        lea    ecx, it.current;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423403;
// LINE 158:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423427;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    it.current, eax;
	__asm        je     near ptr 0x004234AE;
	__asm        mov    eax, it.current;
	__asm        cmp    it.first, eax;
	__asm        je     near ptr 0x0042344B;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    [ebp-0x20], eax;
	__asm        jne    near ptr 0x004234B8;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    it.node, eax;
	__asm        jne    near ptr 0x00423472;
	__asm        mov    eax, it.current;
	__asm        sub    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        xor    ecx, ecx;
	__asm        and    ecx, 0xFFFFFFF8;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x004234B8;
	__asm        jmp    near ptr 0x0042349F;
	__asm        mov    eax, it.node;
	__asm        sub    eax, [ebp-0x18];
	__asm        sar    eax, 2;
	__asm        dec    eax;
	__asm        imul   eax, ds:[0x597420];
	__asm        mov    ecx, it.current;
	__asm        sub    ecx, it.first;
	__asm        sar    ecx, 3;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    ecx, [ebp-0x24];
	__asm        sar    ecx, 3;
	__asm        add    eax, ecx;
	__asm        jne    near ptr 0x004234B8;
	__asm        jmp    near ptr 0x004234AE;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    near ptr 0x004234B8;
	__asm        jmp    near ptr 0x004234CC;
	__asm        jmp    near ptr 0x004234B8;
	__asm        jmp    near ptr 0x004234C7;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x004234CC;
	__asm        jmp    near ptr 0x004234D1;
	__asm        jmp    near ptr 0x0042369D;
	__asm        jmp    near ptr 0x004234E0;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0042369D;
// LINE 160:
	__asm        jmp    near ptr 0x004234E5;
	__asm        jmp    near ptr 0x004234EA;
	__asm        jmp    near ptr 0x004234EF;
	__asm        mov    eax, it.current;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0042351B;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00423520;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042353D;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004235B5;
	__asm        jmp    near ptr 0x00423552;
	__asm        jmp    near ptr 0x00423557;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042357C;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00423588;
	__asm        jmp    near ptr 0x00423588;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x00423588;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004235B5;
	__asm        jmp    near ptr 0x004235BA;
	__asm        mov    byte ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x004235C3;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004235CE;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x74];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004235EE;
	__asm        jmp    near ptr 0x004235F3;
	__asm        mov    eax, file;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, it.current;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x0056D590;
	__asm        add    esp, 0x10;
// LINE 161:
	__asm        mov    eax, file;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x5973EC;
	__asm        call   0x0056D590;
	__asm        add    esp, 0x10;
// LINE 162:
	__asm        lea    eax, it.current;
	__asm        lea    ecx, [ebp-0x50];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    it.current, 8;
	__asm        mov    eax, it.last;
	__asm        cmp    it.current, eax;
	__asm        jne    near ptr 0x00423672;
	__asm        add    it.node, 4;
	__asm        mov    eax, it.node;
	__asm        mov    eax, [eax];
	__asm        mov    it.first, eax;
	__asm        mov    eax, it.first;
	__asm        mov    it.current, eax;
	__asm        mov    eax, ds:[0x597420];
	__asm        shl    eax, 3;
	__asm        add    eax, it.first;
	__asm        mov    it.last, eax;
	__asm        jmp    near ptr 0x00423677;
	__asm        lea    eax, [ebp-0x50];
	__asm        lea    ecx, [ebp-0x34];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423698;
// LINE 163:
	__asm        jmp    near ptr 0x00423403;
// LINE 165:
	__asm        mov    eax, file;
	__asm        push   eax;
	__asm        call   0x0056D280;
	__asm        add    esp, 4;
// LINE 166:
	__asm        mov    eax, file;
	__asm        push   eax;
	__asm        call   0x0056D120;
	__asm        add    esp, 4;
// LINE 167:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004236BF;
// LINE 168:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004236c6
void CDebugWindow::OnSize(unsigned long sizeType, unsigned short width, unsigned short height) {
	struct tagRECT winRect;
	struct tagRECT editRect;

// LINE 178:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 180:
	__asm        lea    eax, winRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 181:
	__asm        lea    eax, editRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 182:
	__asm        push   1;
	__asm        mov    eax, editRect.bottom;
	__asm        push   eax;
	__asm        mov    eax, winRect.right;
	__asm        push   eax;
	__asm        mov    eax, winRect.bottom;
	__asm        sub    eax, editRect.bottom;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3828];
// LINE 183:
	__asm        mov    ecx, this;
	__asm        call   0x004241FF;
// LINE 184:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 185:
	__asm        jmp    near ptr 0x00423732;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00423739
void CDebugWindow::OnPaint() {
	class deque<basic_string<char>>::iterator it;
	int32_t index;
	struct tagPAINTSTRUCT ps;
	void * __ptr32 hDC;
	struct tagTEXTMETRICA tm;
	char * str;
	int32_t scrollStart;

// LINE 191:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x110;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 194:
	__asm        lea    eax, ps.hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3838];
	__asm        mov    hDC, eax;
// LINE 198:
	__asm        lea    eax, tm.tmHeight;
	__asm        push   eax;
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C355C];
// LINE 199:
	__asm        mov    index, 0;
// LINE 201:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    scrollStart, eax;
// LINE 203:
	__asm        mov    it.current, 0;
	__asm        mov    it.first, 0;
	__asm        mov    it.last, 0;
	__asm        mov    it.node, 0;
	__asm        jmp    near ptr 0x004237BF;
// LINE 204:
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0xA8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004237E6;
	__asm        lea    eax, [ebp-0xA8];
	__asm        lea    ecx, it.current;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 23:
	__asm        jmp    near ptr 0x004238A9;
// LINE 204:
	__asm        lea    eax, it.current;
	__asm        lea    ecx, [ebp-0xE8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    it.current, 8;
	__asm        mov    eax, it.current;
	__asm        cmp    it.last, eax;
	__asm        jne    near ptr 0x0042387D;
	__asm        add    it.node, 4;
	__asm        mov    eax, it.node;
	__asm        mov    eax, [eax];
	__asm        mov    it.first, eax;
	__asm        mov    eax, it.first;
	__asm        mov    it.current, eax;
	__asm        mov    eax, ds:[0x597420];
	__asm        shl    eax, 3;
	__asm        add    eax, it.first;
	__asm        mov    it.last, eax;
	__asm        jmp    near ptr 0x00423882;
	__asm        lea    eax, [ebp-0xE8];
	__asm        lea    ecx, [ebp-0xB8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004238A9;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0xC8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004238D3;
	__asm        mov    eax, [ebp-0xC8];
	__asm        cmp    it.current, eax;
	__asm        je     near ptr 0x0042398D;
	__asm        mov    eax, it.current;
	__asm        cmp    it.first, eax;
	__asm        je     near ptr 0x00423909;
	__asm        mov    eax, [ebp-0xC8];
	__asm        cmp    [ebp-0xC4], eax;
	__asm        jne    near ptr 0x00423997;
	__asm        mov    eax, [ebp-0xBC];
	__asm        cmp    it.node, eax;
	__asm        jne    near ptr 0x0042393C;
	__asm        mov    eax, it.current;
	__asm        sub    eax, [ebp-0xC8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        xor    ecx, ecx;
	__asm        and    ecx, 0xFFFFFFF8;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00423997;
	__asm        jmp    near ptr 0x0042397B;
	__asm        mov    eax, it.node;
	__asm        sub    eax, [ebp-0xBC];
	__asm        sar    eax, 2;
	__asm        dec    eax;
	__asm        imul   eax, ds:[0x597420];
	__asm        mov    ecx, it.current;
	__asm        sub    ecx, it.first;
	__asm        sar    ecx, 3;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        sub    ecx, [ebp-0xC8];
	__asm        sar    ecx, 3;
	__asm        add    eax, ecx;
	__asm        jne    near ptr 0x00423997;
	__asm        jmp    near ptr 0x0042398D;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        jne    near ptr 0x00423997;
	__asm        jmp    near ptr 0x004239AE;
	__asm        jmp    near ptr 0x00423997;
	__asm        jmp    near ptr 0x004239A9;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        jne    near ptr 0x004239AE;
	__asm        jmp    near ptr 0x004239B3;
	__asm        jmp    near ptr 0x00423B84;
	__asm        jmp    near ptr 0x004239C5;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     near ptr 0x00423B84;
// LINE 206:
	__asm        jmp    near ptr 0x004239CA;
	__asm        mov    eax, it.current;
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00423A0E;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00423A13;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00423A36;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00423AD2;
	__asm        jmp    near ptr 0x00423A4E;
	__asm        jmp    near ptr 0x00423A53;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00423A81;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x100], eax;
	__asm        jmp    near ptr 0x00423A90;
	__asm        jmp    near ptr 0x00423A90;
	__asm        mov    dword ptr [ebp-0x100], 0;
	__asm        jmp    near ptr 0x00423A90;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00423AD2;
	__asm        jmp    near ptr 0x00423AD7;
	__asm        mov    byte ptr [ebp-0xF0], 0;
	__asm        jmp    near ptr 0x00423AE3;
	__asm        lea    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x00423AF4;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00423B23;
	__asm        jmp    near ptr 0x00423B28;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax];
	__asm        mov    str, eax;
// LINE 207:
	__asm        cmp    scrollStart, 0;
	__asm        jne    near ptr 0x00423B7C;
// LINE 208:
	__asm        mov    eax, index;
	__asm        mov    [ebp-0xCC], eax;
	__asm        inc    index;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        mov    eax, tm.tmHeight;
	__asm        imul   eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3558];
// LINE 209:
	__asm        jmp    near ptr 0x00423B7F;
// LINE 210:
	__asm        dec    scrollStart;
// LINE 211:
	__asm        jmp    near ptr 0x0042380D;
// LINE 214:
	__asm        lea    eax, ps.hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3830];
// LINE 215:
	__asm        jmp    near ptr 0x00423BA0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00423ba5
void CDebugWindow::OnScroll(int32_t scrollCode, int32_t pos) {
	int32_t minPos;
	int32_t maxPos;
	int32_t curPos;

// LINE 221:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 222:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    curPos, eax;
// LINE 223:
	__asm        mov    eax, scrollCode;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00423C05;
// LINE 225:
	__asm        dec    curPos;
	__asm        jmp    near ptr 0x00423C31;
// LINE 226:
	__asm        inc    curPos;
	__asm        jmp    near ptr 0x00423C31;
// LINE 227:
	__asm        sub    curPos, 0xA;
	__asm        jmp    near ptr 0x00423C31;
// LINE 228:
	__asm        add    curPos, 0xA;
	__asm        jmp    near ptr 0x00423C31;
// LINE 230:
	__asm        mov    eax, pos;
	__asm        mov    curPos, eax;
	__asm        jmp    near ptr 0x00423C31;
// LINE 231:
	__asm        jmp    near ptr 0x00423C31;
// LINE 232:
	__asm        jmp    near ptr 0x00423C31;
	__asm        cmp    dword ptr [ebp-0x14], 5;
	__asm        ja     near ptr 0x00423C31;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    dword ptr [eax*4+0x423C19];
	__asm        into;
	__asm        cmp    eax, [edx];
	__asm        salc;
	__asm        cmp    eax, [edx];
	__asm        fidivr word ptr [ebx];
	__asm        inc    edx;
	__asm        add    bh, ah;
	__asm        cmp    eax, [edx];
	__asm        (bad);
	__asm        (bad);
// LINE 233:
	__asm        cmp    curPos, 0;
	__asm        jge    near ptr 0x00423C42;
	__asm        mov    curPos, 0;
// LINE 235:
	__asm        lea    eax, maxPos;
	__asm        push   eax;
	__asm        lea    eax, minPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3840];
// LINE 236:
	__asm        mov    eax, curPos;
	__asm        cmp    maxPos, eax;
	__asm        jge    near ptr 0x00423C6B;
// LINE 237:
	__asm        mov    eax, maxPos;
	__asm        mov    curPos, eax;
// LINE 238:
	__asm        push   1;
	__asm        mov    eax, curPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C383C];
// LINE 239:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 240:
	__asm        jmp    near ptr 0x00423C96;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00423c9d
void CDebugWindow::OutputString(char * buf) {
	class basic_string<char> str;

// LINE 249:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 250:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00423CFF;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00423CF4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    str.reference, eax;
	__asm        jmp    near ptr 0x00423D06;
	__asm        mov    str.reference, 0;
	__asm        mov    str.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00423D12;
// LINE 251:
	__asm        jmp    near ptr 0x00423D17;
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00423D62;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00423D53;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00423D62;
	__asm        jmp    near ptr 0x00423D67;
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00423D92;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00423DDB;
	__asm        jmp    near ptr 0x00423D83;
	__asm        mov    eax, str.reference;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00423DDB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00423DC1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00423DC8;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    str.reference, eax;
	__asm        jmp    near ptr 0x00423E0B;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00423E0B;
	__asm        jmp    near ptr 0x00423DEA;
	__asm        mov    eax, str.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00423E0B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, str.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00423E19;
	__asm        jmp    near ptr 0x00423E1E;
// LINE 252:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00423E38;
	__asm        jmp    near ptr 0x00423EB0;
	__asm        jmp    near ptr 0x00423E38;
	__asm        jmp    near ptr 0x00423E4A;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        jne    near ptr 0x00423EB0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423E74;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0xB0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423E9E;
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    [ebp-0xA8], eax;
	__asm        jne    near ptr 0x00423EBB;
	__asm        mov    ecx, this;
	__asm        call   0x00426000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x00423EDB;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x00423F00;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, str.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x00411B80;
	__asm        jmp    near ptr 0x00423F00;
	__asm        jmp    near ptr 0x00423F05;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x10], 8;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x20];
	__asm        jmp    near ptr 0x00423F1D;
// LINE 253:
	__asm        jmp    near ptr 0x00423F22;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0x1F4;
	__asm        jbe    near ptr 0x00424125;
// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x0041DEF0;
	__asm        jmp    near ptr 0x00423F4F;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax], 8;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x20];
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00423F7B;
	__asm        jmp    near ptr 0x00423FDE;
	__asm        jmp    near ptr 0x00423F7B;
	__asm        jmp    near ptr 0x00423F8A;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x00423FDE;
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0x48];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423FAE;
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0x58];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00423FD2;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    [ebp-0x50], eax;
	__asm        jne    near ptr 0x0042411B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 4;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424019;
	__asm        jmp    near ptr 0x0042401E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00424033;
	__asm        jmp    near ptr 0x00424038;
	__asm        jmp    near ptr 0x004240DC;
	__asm        jmp    near ptr 0x0042404A;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x004240DC;
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0042406B;
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    ecx, this;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004240D2;
	__asm        jmp    near ptr 0x004240D7;
	__asm        jmp    near ptr 0x00424116;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x80];
	__asm        call   0x00425710;
	__asm        mov    ecx, this;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0042411B;
	__asm        jmp    near ptr 0x00424120;
	__asm        jmp    near ptr 0x00423F22;
// LINE 255:
	__asm        mov    ecx, this;
	__asm        call   0x004241FF;
// LINE 256:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 257:
	__asm        mov    eax, str.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004241C7;
	__asm        mov    eax, str.reference;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004241C7;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004241A7;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004241AC;
	__asm        jmp    near ptr 0x004241B1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004241C2;
	__asm        jmp    near ptr 0x004241C7;
	__asm        jmp    near ptr 0x004241CC;
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     near ptr 0x004241EE;
	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004241F3;
	__asm        jmp    near ptr 0x004241F8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004241ff
void CDebugWindow::RecalcScrollRange() {
	int32_t pane_lines;
	void * __ptr32 hDC;
	struct tagRECT winRect;
	int32_t range;
	struct tagTEXTMETRICA tm;
	struct tagRECT editRect;
	int32_t pane_height;
	int32_t minPos;
	int32_t maxPos;
	int32_t curPos;

// LINE 261:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x78;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hDC, eax;
// LINE 264:
	__asm        lea    eax, tm.tmHeight;
	__asm        push   eax;
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C355C];
// LINE 265:
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 268:
	__asm        lea    eax, winRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 269:
	__asm        lea    eax, editRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 271:
	__asm        mov    eax, winRect.bottom;
	__asm        sub    eax, editRect.bottom;
	__asm        mov    pane_height, eax;
// LINE 273:
	__asm        mov    eax, pane_height;
	__asm        cdq;
	__asm        idiv   tm.tmHeight;
	__asm        mov    pane_lines, eax;
// LINE 275:
	__asm        jmp    near ptr 0x00424274;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        sub    eax, pane_lines;
	__asm        mov    range, eax;
// LINE 276:
	__asm        cmp    range, 0;
	__asm        jge    near ptr 0x00424291;
	__asm        mov    range, 0;
// LINE 279:
	__asm        lea    eax, maxPos;
	__asm        push   eax;
	__asm        lea    eax, minPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3840];
// LINE 280:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    curPos, eax;
// LINE 282:
	__asm        push   1;
	__asm        mov    eax, range;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3848];
// LINE 284:
	__asm        mov    eax, maxPos;
	__asm        cmp    curPos, eax;
	__asm        jl     near ptr 0x004242F2;
// LINE 285:
	__asm        push   1;
	__asm        mov    eax, range;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C383C];
// LINE 287:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3844];
// LINE 288:
	__asm        jmp    near ptr 0x00424308;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0042430d
void CDebugWindow::OnEditChange() {
	long len;
	long count;
	char[256] buf;

// LINE 294:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x280;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 297:
	__asm        mov    buf[0], 0xFF;
// LINE 298:
	__asm        mov    buf[1], 0xFF;
// LINE 299:
	__asm        mov    buf[2], 0xFF;
// LINE 300:
	__asm        mov    buf[3], 0xFF;
// LINE 302:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xC4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C385C];
	__asm        mov    len, eax;
// LINE 303:
	__asm        mov    eax, len;
	__asm        mov    byte ptr [ebp+eax-0x100], 0;
// LINE 304:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C385C];
	__asm        mov    count, eax;
// LINE 305:
	__asm        cmp    count, 1;
	__asm        jle    near ptr 0x004248CA;
// LINE 308:
// Block start:
	struct debug_command** it;
	class vector<basic_string<char>> command_vector;
	int32_t num;
	char[256] comBuf;
	class basic_string<char> str;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        push   0x5973F0;
	__asm        lea    eax, comBuf[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0xC;
// LINE 309:
	__asm        lea    eax, comBuf[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00423C9D;
// LINE 310:
	__asm        push   0x5973F4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3854];
// LINE 312:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x274], eax;
	__asm        cmp    dword ptr [ebp-0x274], 0;
	__asm        je     near ptr 0x004244C5;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00424416;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00424496;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00424491;
	__asm        jmp    near ptr 0x004244A2;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004244B4;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    str.reference, eax;
	__asm        jmp    near ptr 0x004244CF;
	__asm        mov    str.reference, 0;
	__asm        mov    str.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004244DE;
// LINE 314:
	__asm        mov    command_vector.start, 0;
	__asm        mov    command_vector.finish, 0;
	__asm        mov    command_vector.end_of_storage, 0;
	__asm        jmp    near ptr 0x00424501;
// LINE 315:
	__asm        lea    eax, command_vector.start;
	__asm        push   eax;
	__asm        sub    esp, 8;
	__asm        mov    [ebp-0x228], esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, str.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x228];
	__asm        call   0x00411B80;
	__asm        call   0x00425041;
	__asm        add    esp, 0xC;
	__asm        mov    num, eax;
// LINE 319:
	__asm        cmp    num, 0;
	__asm        je     near ptr 0x00424699;
// LINE 320:
	__asm        jmp    near ptr 0x00424547;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    it, eax;
	__asm        jmp    near ptr 0x00424562;
	__asm        add    it, 4;
	__asm        jmp    near ptr 0x00424567;
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00424699;
// LINE 321:
	__asm        jmp    near ptr 0x00424581;
	__asm        jmp    near ptr 0x00424586;
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        jmp    near ptr 0x004245A8;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x004245D7;
	__asm        jmp    near ptr 0x004245C0;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x22C], eax;
	__asm        jmp    near ptr 0x004245E1;
	__asm        mov    dword ptr [ebp-0x22C], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004245E6;
	__asm        jmp    near ptr 0x004245EB;
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00424619;
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x230], eax;
	__asm        jmp    near ptr 0x00424628;
	__asm        jmp    near ptr 0x00424628;
	__asm        mov    dword ptr [ebp-0x230], 0;
	__asm        jmp    near ptr 0x00424628;
	__asm        jmp    near ptr 0x0042462D;
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   0x00410C40;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00424662;
	__asm        jmp    near ptr 0x00424667;
	__asm        jmp    near ptr 0x00424694;
	__asm        jmp    near ptr 0x00424679;
	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     near ptr 0x00424694;
// LINE 322:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    eax, it;
	__asm        mov    ecx, it;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx];
// LINE 323:
	__asm        jmp    near ptr 0x0042455B;
	__asm        mov    ecx, this;
	__asm        call   0x004241FF;
// LINE 324:
	__asm        mov    eax, command_vector.finish;
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x258], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        cmp    [ebp-0x258], eax;
	__asm        je     near ptr 0x004247AA;
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042473E;
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    [ebp-0x24C], eax;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        je     near ptr 0x0042473E;
	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00424725;
	__asm        mov    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424739;
	__asm        jmp    near ptr 0x0042473E;
	__asm        jmp    near ptr 0x00424743;
	__asm        mov    eax, [ebp-0x258];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0042477B;
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424780;
	__asm        jmp    near ptr 0x00424794;
	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424799;
	__asm        jmp    near ptr 0x0042479E;
	__asm        add    dword ptr [ebp-0x258], 8;
	__asm        jmp    near ptr 0x004246BC;
	__asm        jmp    near ptr 0x004247AF;
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004247CF;
	__asm        jmp    near ptr 0x004247D4;
	__asm        jmp    near ptr 0x004247D9;
	__asm        mov    eax, str.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042488C;
	__asm        mov    eax, str.reference;
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     near ptr 0x0042488C;
	__asm        mov    eax, [ebp-0x264];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00424869;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        mov    [ebp-0x270], eax;
	__asm        mov    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042486E;
	__asm        jmp    near ptr 0x00424873;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424887;
	__asm        jmp    near ptr 0x0042488C;
	__asm        jmp    near ptr 0x00424891;
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     near ptr 0x004248C5;
	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x260], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004248CA;
// LINE 325:
// Block end:
	__asm        jmp    near ptr 0x004248CF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004248d4
long CDebugWindow::InstanceWindowProcedure(uint32_t Message, uint32_t WParam, long LParam) {
// LINE 337:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 338:
	__asm        mov    eax, Message;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00424999;
// LINE 341:
	__asm        mov    eax, LParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004236C6;
// LINE 342:
	__asm        jmp    near ptr 0x004249E1;
// LINE 344:
	__asm        mov    eax, WParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0x300;
	__asm        jne    near ptr 0x0042492D;
// LINE 345:
	__asm        mov    ecx, this;
	__asm        call   0x0042430D;
// LINE 346:
	__asm        jmp    near ptr 0x004249E1;
// LINE 348:
	__asm        mov    eax, WParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00423BA5;
// LINE 349:
	__asm        jmp    near ptr 0x004249E1;
// LINE 351:
	__asm        mov    ecx, this;
	__asm        call   0x00423739;
// LINE 352:
	__asm        jmp    near ptr 0x004249E1;
// LINE 354:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3864];
// LINE 355:
	__asm        jmp    near ptr 0x004249E1;
// LINE 357:
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    near ptr 0x004249E8;
// LINE 358:
	__asm        jmp    near ptr 0x004249E1;
	__asm        cmp    dword ptr [ebp-8], 0xF;
	__asm        ja     near ptr 0x004249C2;
	__asm        je     near ptr 0x00424957;
	__asm        cmp    dword ptr [ebp-8], 5;
	__asm        je     near ptr 0x004248EB;
	__asm        cmp    dword ptr [ebp-8], 7;
	__asm        je     near ptr 0x00424964;
	__asm        jmp    near ptr 0x00424976;
	__asm        cmp    dword ptr [ebp-8], 0x111;
	__asm        je     near ptr 0x0042490C;
	__asm        cmp    dword ptr [ebp-8], 0x115;
	__asm        je     near ptr 0x00424932;
	__asm        jmp    near ptr 0x00424976;
// LINE 359:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004249E8;
// LINE 360:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004249ef
long CDebugWindow::WindowProcedure(void * __ptr32 hWindow, uint32_t Message, uint32_t WParam, long LParam) {
	class CDebugWindow* debugWin;

// LINE 362:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 363:
	__asm        push   0xFFFFFFEB;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        mov    debugWin, eax;
// LINE 364:
	__asm        cmp    debugWin, 0;
	__asm        je     near ptr 0x00424A2F;
// LINE 365:
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    ecx, debugWin;
	__asm        call   0x004248D4;
	__asm        jmp    near ptr 0x00424A4A;
// LINE 366:
	__asm        jmp    near ptr 0x00424A4A;
// LINE 367:
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    near ptr 0x00424A4A;
// LINE 368:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00424a51
void CreateDebugWindow() {
// LINE 383:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 384:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        jne    near ptr 0x00424AAA;
// LINE 386:
	__asm        push   0x40;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00424A90;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x004228EE;
	__asm        mov    ds:[0x597374], eax;
	__asm        jmp    near ptr 0x00424A9A;
	__asm        mov    dword ptr ds:[0x597374], 0;
// LINE 387:
	__asm        push   0x5973F8;
	__asm        mov    ecx, ds:[0x597374];
	__asm        call   0x004231E6;
// LINE 389:
	__asm        jmp    near ptr 0x00424AAF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00424ab4
void DestroyDebugWindow() {
// LINE 392:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 393:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x00424B0A;
// LINE 395:
	__asm        mov    eax, ds:[0x597374];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00424B00;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x00422F4B;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424AFB;
	__asm        jmp    near ptr 0x00424B00;
// LINE 396:
	__asm        mov    dword ptr ds:[0x597374], 0;
// LINE 398:
	__asm        jmp    near ptr 0x00424B0F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00424b14
void DebugOutput(char * text, ...) {
	char * Marker;
	char[256] buf;

// LINE 401:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x104;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 404:
	__asm        lea    eax, [ebp+0xC];
	__asm        mov    Marker, eax;
// LINE 405:
	__asm        mov    eax, Marker;
	__asm        push   eax;
	__asm        mov    eax, text;
	__asm        push   eax;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   0x0056D940;
	__asm        add    esp, 0xC;
// LINE 406:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x00424B62;
// LINE 407:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x597374];
	__asm        call   0x00423C9D;
// LINE 408:
	__asm        jmp    near ptr 0x00424B67;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00424b6c
void RegisterDebugCommand(struct debug_command* aCommand) {
// LINE 411:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x80;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 412:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x00424F26;
// LINE 413:
	__asm        mov    eax, aCommand;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, ds:[0x597374];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00424BE1;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00424BB9;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00424BD0;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424BD0;
	__asm        jmp    near ptr 0x00424BD5;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    dword ptr [eax+0x30], 4;
	__asm        jmp    near ptr 0x00424F1C;
	__asm        jmp    near ptr 0x00424BE6;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00424C90;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00424C21;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00424C3A;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424C3A;
	__asm        jmp    near ptr 0x00424C3F;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x78], eax;
	__asm        je     near ptr 0x00424C77;
	__asm        sub    dword ptr [ebp-0x30], 4;
	__asm        sub    dword ptr [ebp-0x34], 4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424C54;
	__asm        jmp    near ptr 0x00424C7C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    dword ptr [eax+0x30], 4;
	__asm        jmp    near ptr 0x00424F17;
	__asm        jmp    near ptr 0x00424C95;
	__asm        jmp    near ptr 0x00424C9A;
	__asm        jmp    near ptr 0x00424C9F;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00424CDE;
	__asm        jmp    near ptr 0x00424CBB;
	__asm        jmp    near ptr 0x00424CC0;
	__asm        jmp    near ptr 0x00424CC5;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00424D2B;
	__asm        mov    dword ptr [ebp-0x1C], 0x400;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x20], 1;
	__asm        lea    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00424D13;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00424D19;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00424D1E;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00424D2B;
	__asm        jmp    near ptr 0x00424D30;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x00425D40;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00424D46;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    [ebp-0x78], eax;
	__asm        je     near ptr 0x00424DA3;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x5C], 4;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        add    dword ptr [ebp-0x58], 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00424D80;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00424D99;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424D99;
	__asm        jmp    near ptr 0x00424D9E;
	__asm        jmp    near ptr 0x00424D55;
	__asm        jmp    near ptr 0x00424DA8;
	__asm        jmp    near ptr 0x00424DAD;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00424DD3;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00424DEA;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424DEA;
	__asm        jmp    near ptr 0x00424DEF;
	__asm        jmp    near ptr 0x00424DF4;
	__asm        jmp    near ptr 0x00424DF9;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xC];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x74], eax;
	__asm        je     near ptr 0x00424E74;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x60], eax;
	__asm        add    dword ptr [ebp-0x74], 4;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x6C], 4;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00424E51;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x00424E6A;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00424E6A;
	__asm        jmp    near ptr 0x00424E6F;
	__asm        jmp    near ptr 0x00424E26;
	__asm        jmp    near ptr 0x00424E79;
	__asm        jmp    near ptr 0x00424E7E;
	__asm        jmp    near ptr 0x00424E83;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     near ptr 0x00424EA9;
	__asm        jmp    near ptr 0x00424EA0;
	__asm        add    dword ptr [ebp-0x18], 4;
	__asm        jmp    near ptr 0x00424E8C;
	__asm        jmp    near ptr 0x00424EAE;
	__asm        jmp    near ptr 0x00424EB3;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00424ECD;
	__asm        jmp    near ptr 0x00424ED2;
	__asm        mov    eax, [ebp-0x10];
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    near ptr 0x00424EE6;
	__asm        jmp    near ptr 0x00424EEB;
	__asm        jmp    near ptr 0x00424EF0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        add    eax, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x2C], eax;
	__asm        jmp    near ptr 0x00424F1C;
	__asm        jmp    near ptr 0x00424F21;
	__asm        jmp    near ptr 0x00424F26;
// LINE 414:
	__asm        jmp    near ptr 0x00424F2B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00424f30
void UnregisterDebugCommand(struct debug_command* aCommand) {
// LINE 417:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 418:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x0042500B;
// LINE 419:
	__asm        mov    eax, aCommand;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, ds:[0x597374];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00424F59;
	__asm        jmp    near ptr 0x00424F5E;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-8], eax;
	__asm        je     near ptr 0x00424F99;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax], ecx;
	__asm        je     near ptr 0x00424F99;
	__asm        add    dword ptr [ebp-8], 4;
	__asm        jmp    near ptr 0x00424F76;
	__asm        jmp    near ptr 0x00424F9E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x18], eax;
	__asm        jne    near ptr 0x00424FBB;
	__asm        jmp    near ptr 0x00425001;
	__asm        add    dword ptr [ebp-4], 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x10], eax;
	__asm        je     near ptr 0x00424FFC;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax], ecx;
	__asm        je     near ptr 0x00424FF3;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        add    dword ptr [ebp-0x10], 4;
	__asm        jmp    near ptr 0x00424FCB;
	__asm        jmp    near ptr 0x00425001;
	__asm        jmp    near ptr 0x00425006;
	__asm        jmp    near ptr 0x0042500B;
// LINE 420:
	__asm        jmp    near ptr 0x00425010;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00425015
void SaveDebugWindow(char * fileName) {
// LINE 423:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 424:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x00425037;
// LINE 425:
	__asm        mov    eax, fileName;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x597374];
	__asm        call   0x004233B1;
// LINE 426:
	__asm        jmp    near ptr 0x0042503C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00425041
int32_t ParseCommandLine(class basic_string<char> str, class vector<basic_string<char>>& commands) {
	class basic_string<char> parseStr;
	int32_t pos;
	int32_t index;
	class basic_string<char> subString;

// LINE 430:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 432:
	__asm        jmp    near ptr 0x00425052;
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00425076;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x00412130;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x004256C4;
// LINE 434:
	__asm        lea    ecx, subString.c_str_ptr;
	__asm        call   0x00411EE0;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 437:
	__asm        jmp    near ptr 0x0042508B;
	__asm        jmp    near ptr 0x00425090;
	__asm        push   0x597408;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597408;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x004114D0;
	__asm        mov    pos, eax;
// LINE 438:
	__asm        cmp    pos, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004250E1;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00412130;
	__asm        lea    ecx, subString.c_str_ptr;
	__asm        call   0x00412130;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x00412130;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x004256C4;
// LINE 441:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x0041AB40;
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x00412130;
// LINE 442:
	__asm        jmp    near ptr 0x00425109;
	__asm        jmp    near ptr 0x0042510E;
	__asm        push   0x59740C;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59740C;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00411270;
	__asm        mov    pos, eax;
// LINE 444:
	__asm        mov    index, 0;
// LINE 446:
	__asm        cmp    pos, 0xFFFFFFFF;
	__asm        je     near ptr 0x0042543D;
// LINE 449:
	__asm        inc    index;
// LINE 452:
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x0041AB40;
	__asm        push   eax;
	__asm        mov    ecx, commands;
	__asm        call   0x00425760;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00425193;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00425198;
// LINE 455:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x0041AB40;
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x38];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004251E9;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004251EE;
// LINE 456:
	__asm        jmp    near ptr 0x004251F3;
	__asm        jmp    near ptr 0x004251F8;
	__asm        push   0x597410;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597410;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x004114D0;
	__asm        mov    pos, eax;
// LINE 459:
	__asm        cmp    pos, 0xFFFFFFFF;
	__asm        je     near ptr 0x00425438;
// LINE 461:
	__asm        jmp    near ptr 0x00425227;
	__asm        mov    eax, parseStr.reference;
	__asm        mov    ecx, pos;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x0042526E;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042525F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042526E;
	__asm        jmp    near ptr 0x00425273;
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00425305;
	__asm        jmp    near ptr 0x00425285;
	__asm        mov    eax, parseStr.reference;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, pos;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jae    near ptr 0x004252B0;
	__asm        jmp    near ptr 0x0042529C;
	__asm        mov    eax, parseStr.reference;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, pos;
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x004252BA;
	__asm        mov    dword ptr [ebp-0xA8], 0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    ecx, pos;
	__asm        add    ecx, eax;
	__asm        push   ecx;
	__asm        lea    ecx, [ebp-0x9C];
	__asm        call   0x00411A70;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x40];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x9C];
	__asm        call   0x00412130;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00425336;
	__asm        jmp    near ptr 0x00425336;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0xA4];
	__asm        call   0x00411EE0;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x40];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0xA4];
	__asm        call   0x00412130;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00425336;
	__asm        lea    eax, parseStr.c_str_ptr;
	__asm        cmp    [ebp-0xB0], eax;
	__asm        je     near ptr 0x004253CE;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00425352;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0042537C;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    eax, [eax+4];
	__asm        mov    parseStr.reference, eax;
	__asm        mov    eax, parseStr.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004253CE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xBC], eax;
	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     near ptr 0x004253C7;
	__asm        jmp    near ptr 0x0042539E;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xBC];
	__asm        call   0x0041E200;
	__asm        mov    parseStr.reference, eax;
	__asm        jmp    near ptr 0x004253CE;
	__asm        mov    parseStr.reference, 0;
	__asm        jmp    near ptr 0x004253D3;
	__asm        lea    ecx, [ebp-0x40];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00425409;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042540E;
// LINE 462:
	__asm        jmp    near ptr 0x00425413;
	__asm        jmp    near ptr 0x00425418;
	__asm        push   0x597414;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597414;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00411270;
	__asm        mov    pos, eax;
// LINE 464:
	__asm        jmp    near ptr 0x00425135;
// LINE 467:
	__asm        jmp    near ptr 0x00425442;
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00425629;
	__asm        jmp    near ptr 0x00425454;
	__asm        jmp    near ptr 0x00425459;
	__asm        push   0x597418;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597418;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x004114D0;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00425629;
// LINE 469:
	__asm        inc    index;
// LINE 470:
	__asm        jmp    near ptr 0x00425487;
	__asm        jmp    near ptr 0x0042548C;
	__asm        push   0x59741C;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59741C;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00411270;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004254B4;
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x004254F9;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004254EA;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004254F9;
	__asm        jmp    near ptr 0x004254FE;
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042557B;
	__asm        jmp    near ptr 0x00425510;
	__asm        mov    eax, parseStr.reference;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x00425535;
	__asm        jmp    near ptr 0x00425527;
	__asm        mov    eax, parseStr.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x0042553E;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x80], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   0x00411A70;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   0x00412130;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004255A6;
	__asm        jmp    near ptr 0x004255A6;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        call   0x00411EE0;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        call   0x00412130;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004255A6;
	__asm        mov    eax, commands;
	__asm        mov    ecx, commands;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        je     near ptr 0x004255DA;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, commands;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00425E20;
	__asm        add    esp, 8;
	__asm        mov    eax, commands;
	__asm        add    dword ptr [eax+4], 8;
	__asm        jmp    near ptr 0x004255F5;
	__asm        jmp    near ptr 0x004255DF;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, commands;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, commands;
	__asm        call   0x00426900;
	__asm        jmp    near ptr 0x004255FA;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00425624;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00425629;
// LINE 472:
	__asm        mov    eax, index;
	__asm        mov    [ebp-0x4C], eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    parseStr.c_str_ptr, 0;
	__asm        je     near ptr 0x00425659;
	__asm        mov    eax, parseStr.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042565E;
	__asm        lea    ecx, subString.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    subString.c_str_ptr, 0;
	__asm        je     near ptr 0x00425688;
	__asm        mov    eax, subString.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042568D;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     near ptr 0x004256B7;
	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004256BC;
	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    near ptr 0x004256C4;
// LINE 473:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:000246d0-00024703 Module: 70, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00024710-00024759 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425710
// deque<basic_string<char>>::iterator::iterator



// Contribution: 1:00024760-00024d34 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425760
// vector<basic_string<char>>::push_back



// Contribution: 1:00024d40-00024da8 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425d40
// allocate



// Contribution: 1:00024db0-00024e18 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425db0
// allocate



// Contribution: 1:00024e20-00024ffc Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425e20
// construct



// Contribution: 1:00025000-00025561 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426000
// deque<basic_string<char>>::allocate_at_end



// Contribution: 1:00025570-000258f7 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426570
// vector<debug_command *>::insert_aux



// Contribution: 1:00025900-00025fba Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426900
// vector<basic_string<char>>::insert_aux



// Contribution: 2:0000041c-0000041f Module: 70, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f41c
// ??_7?$class_debugger@VCDebugWindow@@$1?CDebugWindowhelp_text@@3PBDB$1?CDebugWindowusage_text@@3PBDB@@6B@


// Contribution: 2:00000420-00000423 Module: 70, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f420
// ??_7debug_command@@6B@


// Contribution: 3:00000368-0000041d Module: 70, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597368
// CDebugWindow::m_className
// GLOBAL: COPTER_D 0x0059736c
// CDebugWindowhelp_text
// GLOBAL: COPTER_D 0x00597370
// CDebugWindowusage_text
// GLOBAL: COPTER_D 0x00597374
// gDebugWindow


// Contribution: 3:00000420-00000423 Module: 70, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597420
// deque<basic_string<char>>::buffer_size


// Contribution: 3:0002b8d0-0002b917 Module: 70, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c28d0
// CDebugWindow::m_class
// LOCAL: COPTER_D 0x005c28f8
// ?$S19@?1???0CDebugWindow@@QAE@XZ@4EA
