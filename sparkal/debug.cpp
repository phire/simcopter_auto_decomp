// Module: Debug.obj
// Source: C:\Copter\source\sparkal\Debug.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class CDebugWindow (forward reference);
class CDebugWindow{ // packed(0x40 bytes) TI: 0x43eb
public:
	void CDebugWindow();
	void ~CDebugWindow();
	void HandleDebugCommand(char *);
	int32_t Create(char *);
	int32_t Save(char *);
	void ShowWindow();
	void HideWindow();
	void RegisterCommand(/*packed*/ struct debug_command*);
	void UnregisterCommand(/*packed*/ struct debug_command*);
	void OutputString(char *);
	long InstanceWindowProcedure(uint32_t, uint32_t, long);
private:
	/*+0x0*/   /*packed*/ class deque<basic_string<char>> m_strings; // 0x2c bytes
	/*+0x2c*/  /*packed*/ class vector<debug_command *> m_commands; // 0xc bytes
	static char * m_className;
	static /*packed*/ struct tagWNDCLASSA m_class;
	/*+0x38*/  void * __ptr32 m_hWnd;
	/*+0x3c*/  void * __ptr32 m_editWnd;
	// calltype: NearStd
	static long WindowProcedure(void * __ptr32, uint32_t, uint32_t, long);
	void OnSize(unsigned long, unsigned short, unsigned short);
	void OnEditChange();
	void OnPaint();
	void OnScroll(int32_t, int32_t);
	void RecalcScrollRange();
};

// Type: char *;

// Type: unsigned char;

// Type: uint32_t;

// Type: /*packed*/ struct tagWNDCLASSA;
struct tagWNDCLASSA{ // packed(0x28 bytes) TI: 0x26d3
	/*+0x0*/   uint32_t style;
	/*+0x4*/   long (*lpfnWndProc)(void * __ptr32, uint32_t, uint32_t, long);
	/*+0x8*/   int32_t cbClsExtra;
	/*+0xc*/   int32_t cbWndExtra;
	/*+0x10*/  void * __ptr32 hInstance;
	/*+0x14*/  void * __ptr32 hIcon;
	/*+0x18*/  void * __ptr32 hCursor;
	/*+0x1c*/  void * __ptr32 hbrBackground;
	/*+0x20*/  char * lpszMenuName;
	/*+0x24*/  char * lpszClassName;
};

// Type: /*packed*/ struct debug_command (forward reference);
// VTABLE: COPTER_D 0x0058f420
struct debug_command{ // packed(0x14 bytes) TI: 0x43fc
	/*+0x4*/   /*packed*/ class basic_string<char> command_string; // 0x8 bytes
	/*+0xc*/   /*packed*/ class basic_string<char> usage_string; // 0x8 bytes
	virtual void execute(char *); // vtable+0x0
};

// Type: /*packed*/ class vector<basic_string<char>>;
class vector<basic_string<char>>{ // packed(0xc bytes) TI: 0x1f15
	using vector_allocator = /*packed*/ class allocator<basic_string<char>>;
	using value_type = /*packed*/ class basic_string<char>;
	using pointer = /*packed*/ class basic_string<char>*;
	using iterator = /*packed*/ class basic_string<char>*;
	using const_iterator = const /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static /*packed*/ class allocator<basic_string<char>> static_allocator;
	/*+0x0*/   /*packed*/ class basic_string<char> *start;
	/*+0x4*/   /*packed*/ class basic_string<char> *finish;
	/*+0x8*/   /*packed*/ class basic_string<char> *end_of_storage;
	void insert_aux(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
public:
	const /*packed*/ class basic_string<char>* begin();
	/*packed*/ class basic_string<char>* begin();
	const /*packed*/ class basic_string<char>* end();
	/*packed*/ class basic_string<char>* end();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ class basic_string<char>& operator[](uint32_t);
	/*packed*/ class basic_string<char>& operator[](uint32_t);
	void vector<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void vector<basic_string<char>>(const /*packed*/ class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	/*packed*/ class vector<basic_string<char>>& operator=(const /*packed*/ class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void push_back(const /*packed*/ class basic_string<char>&);
	void swap(/*packed*/ class vector<basic_string<char>>&);
	void insert(/*packed*/ class basic_string<char>*, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class basic_string<char>* insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
	void pop_back();
	void erase(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>*);
	void erase(/*packed*/ class basic_string<char>*);
};

// Type: int32_t;

// Type: void;

// Type: /*packed*/ struct class_debugger<CDebugWindow,CDebugWindowhelp_text>;
struct class_debugger<CDebugWindow,CDebugWindowhelp_text> : public debug_command
{ // packed(0x18 bytes) TI: 0x4456
	void class_debugger<CDebugWindow,CDebugWindowhelp_text>(/*packed*/ class CDebugWindow*);
	/*+0x14*/  /*packed*/ class CDebugWindow *m_instance;
	virtual void execute(char *) /* override */;
};

// Type: /*packed*/ struct _iobuf (forward reference);
struct _iobuf{ // packed(0x20 bytes) TI: 0x2278
	/*+0x0*/   char * _ptr;
	/*+0x4*/   int32_t _cnt;
	/*+0x8*/   char * _base;
	/*+0xc*/   int32_t _flag;
	/*+0x10*/  int32_t _file;
	/*+0x14*/  int32_t _charbuf;
	/*+0x18*/  int32_t _bufsiz;
	/*+0x1c*/  char * _tmpfname;
};

// Type: /*packed*/ class deque<basic_string<char>>::iterator;
class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
{ // packed(0x10 bytes) TI: 0x43a2
protected:
	/*+0x0*/   /*packed*/ class basic_string<char> *current;
	/*+0x4*/   /*packed*/ class basic_string<char> *first;
	/*+0x8*/   /*packed*/ class basic_string<char> *last;
	/*+0xc*/   /*packed*/ class basic_string<char> **node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>**);
public:
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class deque<basic_string<char>>::iterator operator-(int32_t);
	int32_t operator-(const /*packed*/ class deque<basic_string<char>>::iterator&);
	/*packed*/ class deque<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator++();
	/*packed*/ class deque<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator--();
	/*packed*/ class deque<basic_string<char>>::iterator& operator+=(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator-=(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator operator+(int32_t);
	/*packed*/ class basic_string<char>& operator[](int32_t);
	int32_t operator==(const /*packed*/ class deque<basic_string<char>>::iterator&);
	int32_t operator<(const /*packed*/ class deque<basic_string<char>>::iterator&);
};

// Type: unsigned long;

// Type: unsigned short;

// Type: /*packed*/ struct tagRECT;
struct tagRECT{ // packed(0x10 bytes) TI: 0x13c4
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
};

// Type: /*packed*/ struct tagPAINTSTRUCT;
struct tagPAINTSTRUCT{ // packed(0x40 bytes) TI: 0x124b
	/*+0x0*/   void * __ptr32 hdc;
	/*+0x4*/   int32_t fErase;
	/*+0x8*/   /*packed*/ struct tagRECT rcPaint; // 0x10 bytes
	/*+0x18*/  int32_t fRestore;
	/*+0x1c*/  int32_t fIncUpdate;
	/*+0x20*/  unsigned char rgbReserved[32]; // 0x20 bytes
};

// Type: void * __ptr32;

// Type: /*packed*/ struct tagTEXTMETRICA;
struct tagTEXTMETRICA{ // packed(0x35 bytes) TI: 0x2b94
	/*+0x0*/   long tmHeight;
	/*+0x4*/   long tmAscent;
	/*+0x8*/   long tmDescent;
	/*+0xc*/   long tmInternalLeading;
	/*+0x10*/  long tmExternalLeading;
	/*+0x14*/  long tmAveCharWidth;
	/*+0x18*/  long tmMaxCharWidth;
	/*+0x1c*/  long tmWeight;
	/*+0x20*/  long tmOverhang;
	/*+0x24*/  long tmDigitizedAspectX;
	/*+0x28*/  long tmDigitizedAspectY;
	/*+0x2c*/  unsigned char tmFirstChar; // 0x1 bytes
	/*+0x2d*/  unsigned char tmLastChar; // 0x1 bytes
	/*+0x2e*/  unsigned char tmDefaultChar; // 0x1 bytes
	/*+0x2f*/  unsigned char tmBreakChar; // 0x1 bytes
	/*+0x30*/  unsigned char tmItalic; // 0x1 bytes
	/*+0x31*/  unsigned char tmUnderlined; // 0x1 bytes
	/*+0x32*/  unsigned char tmStruckOut; // 0x1 bytes
	/*+0x33*/  unsigned char tmPitchAndFamily; // 0x1 bytes
	/*+0x34*/  unsigned char tmCharSet; // 0x1 bytes
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: char;

// Type: /*packed*/ class vector<basic_string<char>> (forward reference);
class vector<basic_string<char>>{ // packed(0xc bytes) TI: 0x1f15
	using vector_allocator = /*packed*/ class allocator<basic_string<char>>;
	using value_type = /*packed*/ class basic_string<char>;
	using pointer = /*packed*/ class basic_string<char>*;
	using iterator = /*packed*/ class basic_string<char>*;
	using const_iterator = const /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static /*packed*/ class allocator<basic_string<char>> static_allocator;
	/*+0x0*/   /*packed*/ class basic_string<char> *start;
	/*+0x4*/   /*packed*/ class basic_string<char> *finish;
	/*+0x8*/   /*packed*/ class basic_string<char> *end_of_storage;
	void insert_aux(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
public:
	const /*packed*/ class basic_string<char>* begin();
	/*packed*/ class basic_string<char>* begin();
	const /*packed*/ class basic_string<char>* end();
	/*packed*/ class basic_string<char>* end();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ class basic_string<char>& operator[](uint32_t);
	/*packed*/ class basic_string<char>& operator[](uint32_t);
	void vector<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void vector<basic_string<char>>(const /*packed*/ class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	/*packed*/ class vector<basic_string<char>>& operator=(const /*packed*/ class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void push_back(const /*packed*/ class basic_string<char>&);
	void swap(/*packed*/ class vector<basic_string<char>>&);
	void insert(/*packed*/ class basic_string<char>*, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class basic_string<char>* insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
	void pop_back();
	void erase(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>*);
	void erase(/*packed*/ class basic_string<char>*);
};

// Type: /*packed*/ struct class_debugger<CDebugWindow,CDebugWindowhelp_text> (forward reference);
struct class_debugger<CDebugWindow,CDebugWindowhelp_text> : public debug_command
{ // packed(0x18 bytes) TI: 0x4456
	void class_debugger<CDebugWindow,CDebugWindowhelp_text>(/*packed*/ class CDebugWindow*);
	/*+0x14*/  /*packed*/ class CDebugWindow *m_instance;
	virtual void execute(char *) /* override */;
};

// Type: /*packed*/ class deque<basic_string<char>>::iterator (forward reference);
class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
{ // packed(0x10 bytes) TI: 0x43a2
protected:
	/*+0x0*/   /*packed*/ class basic_string<char> *current;
	/*+0x4*/   /*packed*/ class basic_string<char> *first;
	/*+0x8*/   /*packed*/ class basic_string<char> *last;
	/*+0xc*/   /*packed*/ class basic_string<char> **node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>**);
public:
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class deque<basic_string<char>>::iterator operator-(int32_t);
	int32_t operator-(const /*packed*/ class deque<basic_string<char>>::iterator&);
	/*packed*/ class deque<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator++();
	/*packed*/ class deque<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator--();
	/*packed*/ class deque<basic_string<char>>::iterator& operator+=(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator& operator-=(int32_t);
	/*packed*/ class deque<basic_string<char>>::iterator operator+(int32_t);
	/*packed*/ class basic_string<char>& operator[](int32_t);
	int32_t operator==(const /*packed*/ class deque<basic_string<char>>::iterator&);
	int32_t operator<(const /*packed*/ class deque<basic_string<char>>::iterator&);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class deque<basic_string<char>> (forward reference);
class deque<basic_string<char>>{ // packed(0x2c bytes) TI: 0x4377
	class deque<basic_string<char>>::iterator : public random_access_iterator<basic_string<char>,int>
	{ // packed(0x10 bytes) TI: 0x43a2
	protected:
		/*+0x0*/   /*packed*/ class basic_string<char> *current;
		/*+0x4*/   /*packed*/ class basic_string<char> *first;
		/*+0x8*/   /*packed*/ class basic_string<char> *last;
		/*+0xc*/   /*packed*/ class basic_string<char> **node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>**);
	public:
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class deque<basic_string<char>>::iterator operator-(int32_t);
		int32_t operator-(const /*packed*/ class deque<basic_string<char>>::iterator&);
		/*packed*/ class deque<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class deque<basic_string<char>>::iterator& operator++();
		/*packed*/ class deque<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class deque<basic_string<char>>::iterator& operator--();
		/*packed*/ class deque<basic_string<char>>::iterator& operator+=(int32_t);
		/*packed*/ class deque<basic_string<char>>::iterator& operator-=(int32_t);
		/*packed*/ class deque<basic_string<char>>::iterator operator+(int32_t);
		/*packed*/ class basic_string<char>& operator[](int32_t);
		int32_t operator==(const /*packed*/ class deque<basic_string<char>>::iterator&);
		int32_t operator<(const /*packed*/ class deque<basic_string<char>>::iterator&);
	};
	class deque<basic_string<char>>::const_iterator : public random_access_iterator<basic_string<char>,int>
	{ // packed(0x10 bytes) TI: 0x4391
	protected:
		/*+0x0*/   /*packed*/ class basic_string<char> *current;
		/*+0x4*/   /*packed*/ class basic_string<char> *first;
		/*+0x8*/   /*packed*/ class basic_string<char> *last;
		/*+0xc*/   /*packed*/ class basic_string<char> **node;
	public:
		void const_iterator(const /*packed*/ class deque<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>**);
	public:
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class deque<basic_string<char>>::const_iterator operator-(int32_t);
		int32_t operator-(const /*packed*/ class deque<basic_string<char>>::const_iterator&);
		/*packed*/ class deque<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class deque<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class deque<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class deque<basic_string<char>>::const_iterator& operator--();
		/*packed*/ class deque<basic_string<char>>::const_iterator& operator+=(int32_t);
		/*packed*/ class deque<basic_string<char>>::const_iterator& operator-=(int32_t);
		/*packed*/ class deque<basic_string<char>>::const_iterator operator+(int32_t);
		const /*packed*/ class basic_string<char>& operator[](int32_t);
		int32_t operator==(const /*packed*/ class deque<basic_string<char>>::const_iterator&);
		int32_t operator<(const /*packed*/ class deque<basic_string<char>>::const_iterator&);
	};
	using value_type = /*packed*/ class basic_string<char>;
	using data_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using map_allocator_type = /*packed*/ class allocator<basic_string<char> *>;
protected:
	static /*packed*/ class allocator<basic_string<char>> data_allocator;
	static uint32_t buffer_size;
	static /*packed*/ class allocator<basic_string<char> *> map_allocator;
	using map_pointer = /*packed*/ class basic_string<char>**;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
protected:
	/*+0x0*/   /*packed*/ class deque<basic_string<char>>::iterator start; // 0x10 bytes
	/*+0x10*/  /*packed*/ class deque<basic_string<char>>::iterator finish; // 0x10 bytes
	/*+0x20*/  uint32_t length;
	/*+0x24*/  /*packed*/ class basic_string<char> **map;
	/*+0x28*/  uint32_t map_size;
	void allocate_at_begin();
	void allocate_at_end();
	void deallocate_at_begin();
	void deallocate_at_end();
public:
	void deque<basic_string<char>>(const /*packed*/ class deque<basic_string<char>>&);
	void deque<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void deque<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void deque<basic_string<char>>();
	/*packed*/ class deque<basic_string<char>>::const_iterator begin();
	/*packed*/ class deque<basic_string<char>>::iterator begin();
	/*packed*/ class deque<basic_string<char>>::const_iterator end();
	/*packed*/ class deque<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_iterator<deque<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_iterator<deque<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& operator[](uint32_t);
	/*packed*/ class basic_string<char>& operator[](uint32_t);
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void pop_front();
	void pop_back();
	void swap(/*packed*/ class deque<basic_string<char>>&);
	void insert(/*packed*/ class deque<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void insert(/*packed*/ class deque<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	/*packed*/ class deque<basic_string<char>>::iterator insert(/*packed*/ class deque<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class deque<basic_string<char>>::iterator, /*packed*/ class deque<basic_string<char>>::iterator);
	void erase(/*packed*/ class deque<basic_string<char>>::iterator);
	/*packed*/ class deque<basic_string<char>>& operator=(const /*packed*/ class deque<basic_string<char>>&);
	void ~deque<basic_string<char>>();
};

// Type: /*packed*/ class vector<debug_command *> (forward reference);
class vector<debug_command *>{ // packed(0xc bytes) TI: 0x43dc
	using vector_allocator = /*packed*/ class allocator<debug_command *>;
	using value_type = /*packed*/ struct debug_command*;
	using pointer = /*packed*/ struct debug_command**;
	using iterator = /*packed*/ struct debug_command**;
	using const_iterator = const /*packed*/ struct debug_command**;
	using reference = /*packed*/ struct debug_command*&;
	using const_reference = const /*packed*/ struct debug_command*&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int>;
protected:
	static /*packed*/ class allocator<debug_command *> static_allocator;
	/*+0x0*/   /*packed*/ struct debug_command **start;
	/*+0x4*/   /*packed*/ struct debug_command **finish;
	/*+0x8*/   /*packed*/ struct debug_command **end_of_storage;
	void insert_aux(/*packed*/ struct debug_command**, const /*packed*/ struct debug_command*&);
public:
	const /*packed*/ struct debug_command** begin();
	/*packed*/ struct debug_command** begin();
	const /*packed*/ struct debug_command** end();
	/*packed*/ struct debug_command** end();
	/*unpacked*/ class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int> rbegin();
	/*unpacked*/ class reverse_iterator<debug_command * const *,debug_command *,debug_command * const &,int> rend();
	/*unpacked*/ class reverse_iterator<debug_command * *,debug_command *,debug_command * &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ struct debug_command*& operator[](uint32_t);
	/*packed*/ struct debug_command*& operator[](uint32_t);
	void vector<debug_command *>(const /*packed*/ struct debug_command**, const /*packed*/ struct debug_command**);
	void vector<debug_command *>(const /*packed*/ class vector<debug_command *>&);
	void vector<debug_command *>(uint32_t, const /*packed*/ struct debug_command*&);
	void vector<debug_command *>();
	void ~vector<debug_command *>();
	/*packed*/ class vector<debug_command *>& operator=(const /*packed*/ class vector<debug_command *>&);
	void reserve(uint32_t);
	const /*packed*/ struct debug_command*& front();
	/*packed*/ struct debug_command*& front();
	const /*packed*/ struct debug_command*& back();
	/*packed*/ struct debug_command*& back();
	void push_back(const /*packed*/ struct debug_command*&);
	void swap(/*packed*/ class vector<debug_command *>&);
	void insert(/*packed*/ struct debug_command**, uint32_t, const /*packed*/ struct debug_command*&);
	void insert(/*packed*/ struct debug_command**, const /*packed*/ struct debug_command**, const /*packed*/ struct debug_command**);
	/*packed*/ struct debug_command** insert(/*packed*/ struct debug_command**, const /*packed*/ struct debug_command*&);
	void pop_back();
	void erase(/*packed*/ struct debug_command**, /*packed*/ struct debug_command**);
	void erase(/*packed*/ struct debug_command**);
};

// Type: /*packed*/ struct random_access_iterator<basic_string<char>,int>;
struct random_access_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x4336
};

// Type: /*packed*/ struct debug_command;
// VTABLE: COPTER_D 0x0058f420
struct debug_command{ // packed(0x14 bytes) TI: 0x43fc
	/*+0x4*/   /*packed*/ class basic_string<char> command_string; // 0x8 bytes
	/*+0xc*/   /*packed*/ class basic_string<char> usage_string; // 0x8 bytes
	virtual void execute(char *); // vtable+0x0
};



// Contribution: 1:00021280-000246c8 Module: 70, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00422280
void CDebugWindow::HandleDebugCommand(char * data) {
	/*bp-0x4*/   int32_t num;
	/*bp-0x10*/  /*packed*/ class vector<basic_string<char>> commands; // 0xc bytes
	/*bp-0x14*/  /*packed*/ struct debug_command **it;

// LINE 26:
	commands.start = 0x0;
	commands.finish = 0x0;
	commands.end_of_storage = 0x0;
	__asm        jmp    _T2c;
// LINE 27:
_T2c:
	__asm        lea    eax, commands.start;
	__asm        push   eax;
	__asm        sub    esp, 8;
	__asm        mov    [ebp-0x18], esp;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        call   ParseCommandLine;
	__asm        add    esp, 0xC;
	__asm        mov    num, eax;
// LINE 30:
	__asm        cmp    num, 1;
	__asm        jne    _T1c3;
// LINE 32:
	DebugOutput(0x5973a4);
// LINE 33:
	__asm        jmp    _T69;
_T69:
	it = this->m_commands.start;
// LINE 35:
_FOR_7a:
	__asm        jmp    _FOR_COND_7a;
_FOR_NEXT_7a:
	it += 0x4;
_FOR_COND_7a:
	__asm        jmp    _T83;
_T83:
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T1b1;
// LINE 36:
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Tc6;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tc6:
	__asm        jmp    _Tcb;
_Tcb:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _Te8;
_Te8:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T160;

	__asm        jmp    _Tfd;
_Tfd:
	__asm        jmp    _T102;
_T102:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T127;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T133;

	__asm        jmp    _T133;
_T127:
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    _T133;
_T133:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T160;
_T160:
	__asm        jmp    _T165;
_T165:
	__asm        mov    byte ptr [ebp-0x50], 0;
	__asm        jmp    _T16e;
_T16e:
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T179;
_T179:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T19e;
_T19e:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
	__asm        jmp    _FOR_NEXT_7a;
// LINE 37:
_T1b1:
	DebugOutput(0x5973b8);
// LINE 39:
	__asm        jmp    _T58f;
// LINE 41:
_T1c3:
	__asm        jmp    _T1c8;
_T1c8:
	it = this->m_commands.start;
// LINE 43:
_FOR_1d9:
	__asm        jmp    _FOR_COND_1d9;
_FOR_NEXT_1d9:
	it += 0x4;
_FOR_COND_1d9:
	__asm        jmp    _T1e2;
_T1e2:
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T58f;
// LINE 44:
	__asm        jmp    _T1f9;
_T1f9:
	__asm        jmp    _T1fe;
_T1fe:
	__asm        mov    eax, commands.start;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T217;
_T217:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T23d;

	__asm        jmp    _T22c;
_T22c:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T244;
_T23d:
	__asm        mov    dword ptr [ebp-0x1C], 0xFFFFFFFF;
_T244:
	__asm        jmp    _T249;
_T249:
	__asm        jmp    _T24e;
_T24e:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T273;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T27f;

	__asm        jmp    _T27f;
_T273:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T27f;
_T27f:
	__asm        jmp    _T284;
_T284:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    _T2ad;

	__asm        jmp    _T2b2;
_T2ad:
	__asm        jmp    _T58a;
_T2b2:
	__asm        jmp    _T2c1;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T58a;
// LINE 46:
_T2c1:
	__asm        jmp    _T2c6;
_T2c6:
	__asm        jmp    _T2cb;
_T2cb:
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T305;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T305:
	__asm        jmp    _T30a;
_T30a:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T32d;
_T32d:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3c9;

	__asm        jmp    _T345;
_T345:
	__asm        jmp    _T34a;
_T34a:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T378;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    _T387;

	__asm        jmp    _T387;
_T378:
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    _T387;
_T387:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3c9;
_T3c9:
	__asm        jmp    _T3ce;
_T3ce:
	__asm        mov    byte ptr [ebp-0x74], 0;
	__asm        jmp    _T3d7;
_T3d7:
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T3e2;
_T3e2:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], al;
	__asm        jmp    _T408;
_T408:
	__asm        jmp    _T40d;
_T40d:
	__asm        mov    eax, commands.start;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T451;

	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T451:
	__asm        jmp    _T456;
_T456:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T479;
_T479:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T515;

	__asm        jmp    _T491;
_T491:
	__asm        jmp    _T496;
_T496:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4c4;

	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T4d3;

	__asm        jmp    _T4d3;
_T4c4:
	__asm        mov    dword ptr [ebp-0xA8], 0;
	__asm        jmp    _T4d3;
_T4d3:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T515;
_T515:
	__asm        jmp    _T51a;
_T51a:
	__asm        mov    byte ptr [ebp-0x98], 0;
	__asm        jmp    _T526;
_T526:
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    _T537;
_T537:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], al;
	__asm        jmp    _T566;
_T566:
	__asm        jmp    _T56b;
_T56b:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0x5973CC;
	__asm        call   DebugOutput;
	__asm        add    esp, 0xC;
// LINE 49:
_T58a:
	__asm        jmp    _FOR_NEXT_1d9;
// LINE 50:
_T58f:
	__asm        mov    eax, commands.finish;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, commands.start;
	__asm        mov    [ebp-0x48], eax;
__WHILE_59b:
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    [ebp-0x48], eax;
	__asm        je     _T63c;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5e8;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T5e8;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T5e8;
_T5e8:
	__asm        jmp    _T5ed;
_T5ed:
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T613;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T613:
	__asm        jmp    _T618;
_T618:
	__asm        jmp    _T629;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T629:
	__asm        jmp    _T62e;
_T62e:
	__asm        jmp    _T633;
_T633:
	__asm        add    dword ptr [ebp-0x48], 8;
	__asm        jmp    __WHILE_59b;
_T633:
	__asm        add    dword ptr [ebp-0x48], 8;
	__asm        jmp    __WHILE_59b;
_T63c:
	__asm        jmp    _T641;
_T641:
	__asm        mov    eax, commands.start;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T658;
_T658:
	__asm        jmp    _T65d;
_T65d:
	__asm        jmp    _T662;
_T662:
	return;
}

// FUNCTION: COPTER_D 0x004228ee
void CDebugWindow::CDebugWindow() {
	// StaticLocal: 0x005c2900
	static /*packed*/ struct class_debugger<CDebugWindow,CDebugWindowhelp_text> help_command;
	;


	this->m_strings.start.current = 0x0;
	this->m_strings.start.first = 0x0;
	this->m_strings.start.last = 0x0;
	this->m_strings.start.node = 0x0;
	__asm        jmp    _T38;
_T38:
	this->m_strings.finish.current = 0x0;
	this->m_strings.finish.first = 0x0;
	this->m_strings.finish.last = 0x0;
	this->m_strings.finish.node = 0x0;
	__asm        jmp    _T65;
_T65:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    dword ptr [ebp-0x10], 0x200;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tb8;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tbe;
_Tb8:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
_Tbe:
	__asm        jmp    _Tc3;
_Tc3:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    deque<basic_string<char>>::buffer_size, eax;
	__asm        jmp    _Td2;
_Td2:
	__asm        jmp    _Td7;
_Td7:
	this->m_commands.start = 0x0;
	this->m_commands.finish = 0x0;
	this->m_commands.end_of_storage = 0x0;
	__asm        jmp    _Tfa;
// LINE 59:
_Tfa:
	__asm        xor    eax, eax;
	__asm        mov    al, ?$S19@?1???0CDebugWindow@@QAE@XZ@4EA;
	__asm        test   al, 1;
	__asm        jne    _T43b;

	__asm        xor    eax, eax;
	__asm        mov    al, ?$S19@?1???0CDebugWindow@@QAE@XZ@4EA;
	__asm        or     al, 1;
	__asm        mov    ?$S19@?1???0CDebugWindow@@QAE@XZ@4EA, al;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T169;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T15c;
_T15c:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    help_command.command_string.reference, eax;
	__asm        jmp    _T173;
_T169:
	help_command.command_string.reference = 0x0;
_T173:
	help_command.command_string.c_str_ptr = 0x0;
	__asm        jmp    _T182;
_T182:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T1ab;

	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    help_command.usage_string.reference, eax;
	__asm        jmp    _T1b5;
_T1ab:
	help_command.usage_string.reference = 0x0;
_T1b5:
	help_command.usage_string.c_str_ptr = 0x0;
	__asm        jmp    _T1c4;
_T1c4:
	help_command<class_debugger<CDebugWindow,CDebugWindowhelp_text>+0x00> = 0x58f420;
	__asm        jmp    _T1d3;
_T1d3:
	__asm        mov    help_command<class_debugger<CDebugWindow,CDebugWindowhelp_text>+0x00>, 0x58F41C;
	__asm        mov    eax, this;
	__asm        mov    help_command.m_instance, eax;
	__asm        mov    eax, CDebugWindowusage_text;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1f2;
_T1f2:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0xFFFFFFFF;
	__asm        jne    _T23d;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T22e;
_T22e:
	exit(0x1);
	__asm        jmp    _T23d;
_T23d:
	__asm        jmp    _T242;
_T242:
	__asm        mov    eax, help_command.usage_string.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T271;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2bf;

	__asm        jmp    _T260;
_T260:
	__asm        mov    eax, help_command.usage_string.reference;
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2bf;
_T271:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T2a0;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T2a7;
_T2a0:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T2a7:
	__asm        lea    ecx, help_command.usage_string.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    help_command.usage_string.reference, eax;
	__asm        jmp    _T2f1;
_T2bf:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2f1;

	__asm        jmp    _T2ce;
_T2ce:
	__asm        mov    eax, help_command.usage_string.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2f1;
_T2f1:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, help_command.usage_string.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T302;
_T302:
	__asm        jmp    _T307;
_T307:
	__asm        mov    eax, CDebugWindowhelp_text;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T314;
_T314:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0xFFFFFFFF;
	__asm        jne    _T35f;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T350;
_T350:
	exit(0x1);
	__asm        jmp    _T35f;
_T35f:
	__asm        jmp    _T364;
_T364:
	__asm        mov    eax, help_command.command_string.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T393;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T3e1;

	__asm        jmp    _T382;
_T382:
	__asm        mov    eax, help_command.command_string.reference;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3e1;
_T393:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T3c2;

	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T3c9;
_T3c2:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T3c9:
	__asm        lea    ecx, help_command.command_string.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    help_command.command_string.reference, eax;
	__asm        jmp    _T413;
_T3e1:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T413;

	__asm        jmp    _T3f0;
_T3f0:
	__asm        mov    eax, help_command.command_string.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T413;
_T413:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, help_command.command_string.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T424;
_T424:
	__asm        jmp    _T429;
_T429:
	__asm        jmp    _T42e;
_T42e:
	atexit(0x422dba);
_T43b:
	__asm        mov    dword ptr [ebp-0xC], 0x5C2900;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T490;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T468;
_T468:
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T47f;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T47f;
_T47f:
	__asm        jmp    _T484;
_T484:
	this->m_commands.finish += 0x4;
	__asm        jmp    _T4ab;
_T490:
	__asm        jmp    _T495;
_T495:
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2C;
	__asm        call   vector<debug_command *>::insert_aux;
_T4ab:
	__asm        jmp    _T4b0;
_T4b0:
	__asm        jmp    _T4b5;
// LINE 62:
_T4b5:
	this->m_hWnd = 0x0;
// LINE 64:
	return;

	__asm        mov    eax, this;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00422dba
static void $E20() {

	__asm        jmp    _T0e;
_T0e:
	__asm        jmp    _T13;
_T13:
	__asm        mov    eax, ds:[0x5C2910];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, ds:[0x5C2910];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T9c;

	__asm        mov    eax, ds:[0x5C2910];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T9c;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T7c;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T7c:
	__asm        jmp    _T81;
_T81:
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T97;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        cmp    dword ptr ds:[0x5C290C], 0;
	__asm        je     _Tc8;

	__asm        mov    eax, ds:[0x5C290C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tc8:
	__asm        jmp    _Tcd;
_Tcd:
	__asm        mov    eax, ds:[0x5C2908];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, ds:[0x5C2908];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T156;

	__asm        mov    eax, ds:[0x5C2908];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T156;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T136;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T136:
	__asm        jmp    _T13b;
_T13b:
	__asm        jmp    _T140;
_T140:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T151;
_T151:
	__asm        jmp    _T156;
_T156:
	__asm        jmp    _T15b;
_T15b:
	__asm        cmp    dword ptr ds:[0x5C2904], 0;
	__asm        je     _T182;

	__asm        mov    eax, ds:[0x5C2904];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T182:
	__asm        jmp    _T187;
_T187:
	return;
}

// FUNCTION: COPTER_D 0x00422f4b
void CDebugWindow::~CDebugWindow() {
// LINE 69:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3804];
// LINE 70:
_T26:
	this->m_hWnd = 0x0;
// LINE 72:
	__asm        jmp    _T35;
_T35:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x6C], eax;
__WHILE_3e:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T5b;

	__asm        jmp    _T52;
_T52:
	__asm        add    dword ptr [ebp-0x6C], 4;
	__asm        jmp    __WHILE_3e;
_T52:
	__asm        add    dword ptr [ebp-0x6C], 4;
	__asm        jmp    __WHILE_3e;
_T5b:
	__asm        jmp    _T60;
_T60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T7f;
_T7f:
	__asm        jmp    _LOOP_84;
_LOOP_84:
	for (;;) {
		_LOOP_84:
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x20], 0;
			__asm        jne    _T9b;

			__asm        jmp    _T291;

			__asm        jmp    _T9b;
		_T9b:
			__asm        jmp    _Taa;

			__asm        cmp    dword ptr [ebp-4], 0;
			__asm        jne    _T291;
		_Taa:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    ecx, [ebp-0x28];
			__asm        call   basic_string<char>::~basic_string<char>;
			__asm        jmp    _Tcb;

			__asm        mov    eax, [ebp-0x28];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_Tcb:
			__asm        jmp    _Td0;
		_Td0:
			__asm        jmp    _Td5;
		_Td5:
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax], 8;
			__asm        mov    eax, this;
			__asm        dec    dword ptr [eax+0x20];
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x20], 0;
			__asm        jne    _Tf8;

			__asm        jmp    _T155;

			__asm        jmp    _Tf8;
		_Tf8:
			__asm        jmp    _T107;

			__asm        cmp    dword ptr [ebp-0x2C], 0;
			__asm        jne    _T155;
		_T107:
			__asm        mov    eax, this;
			__asm        lea    ecx, [ebp-0x14];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T128;
		_T128:
			__asm        mov    eax, this;
			__asm        lea    ecx, [ebp-0x24];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T149;
		_T149:
			__asm        mov    eax, [ebp-0x14];
			__asm        cmp    [ebp-0x1C], eax;
			__asm        jne    _T287;
		_T155:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-0x50], eax;
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax+0xC], 4;
			__asm        mov    eax, [ebp-0x50];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x54], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T17e;
		_T17e:
			__asm        jmp    _T183;
		_T183:
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x20], 0;
			__asm        jne    _T195;

			__asm        jmp    _T19a;
		_T195:
			__asm        jmp    _T229;
		_T19a:
			__asm        jmp    _T1a9;

			__asm        cmp    dword ptr [ebp-0x58], 0;
			__asm        je     _T229;
		_T1a9:
			__asm        mov    dword ptr [ebp-0x3C], 0;
			__asm        mov    dword ptr [ebp-0x38], 0;
			__asm        mov    dword ptr [ebp-0x34], 0;
			__asm        mov    dword ptr [ebp-0x30], 0;
			__asm        jmp    _T1ca;
		_T1ca:
			__asm        lea    eax, [ebp-0x3C];
			__asm        mov    ecx, this;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x10;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x24];
			__asm        mov    [ebp-0x5C], eax;
			__asm        mov    eax, [ebp-0x5C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T21f;
		_T21f:
			__asm        jmp    _T224;
		_T224:
			__asm        jmp    _T282;
		_T229:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-0x60], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x64], eax;
			__asm        mov    eax, [ebp-0x64];
			__asm        mov    [ebp-0x4C], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x48], eax;
			__asm        mov    eax, deque<basic_string<char>>::buffer_size;
			__asm        shl    eax, 3;
			__asm        mov    ecx, [ebp-0x60];
			__asm        add    eax, [ecx];
			__asm        mov    [ebp-0x44], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    [ebp-0x40], eax;
			__asm        jmp    _T266;
		_T266:
			__asm        lea    eax, [ebp-0x4C];
			__asm        mov    ecx, this;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
		_T282:
			__asm        jmp    _T287;
		_T287:
			__asm        jmp    _T28c;
		_T28c:
	}
_T291:
	return;
}

// FUNCTION: COPTER_D 0x004231e6
int32_t CDebugWindow::Create(char * windowName) {
// LINE 77:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    _T173;
// LINE 79:
// Block start:
	/*bp-0x4*/   int32_t xPos;
	/*bp-0x8*/   int32_t Height;
	/*bp-0xc*/   int32_t Width;
	CDebugWindow::m_class.style = 0x20;
// LINE 80:
	CDebugWindow::m_class.lpfnWndProc = 0x4249ef;
// LINE 81:
	CDebugWindow::m_class.cbClsExtra = 0x0;
// LINE 82:
	CDebugWindow::m_class.cbWndExtra = 0x0;
// LINE 83:
	CDebugWindow::m_class.hInstance = _ghWindowsInstance;
// LINE 84:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C381C];
	__asm        mov    CDebugWindow::m_class.hIcon, eax;
// LINE 85:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3818];
	__asm        mov    CDebugWindow::m_class.hCursor, eax;
// LINE 86:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3560];
	__asm        mov    CDebugWindow::m_class.hbrBackground, eax;
// LINE 87:
	CDebugWindow::m_class.lpszMenuName = 0x0;
// LINE 88:
	CDebugWindow::m_class.lpszClassName = CDebugWindow::m_className;
// LINE 89:
	__asm        push   0x5C28D0;
	__asm        call   dword ptr ds:[0x6C3814];
// LINE 91:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        sub    eax, 0x280;
	__asm        mov    Width, eax;
// LINE 92:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    Height, eax;
// LINE 93:
	xPos = 0x280;
// LINE 94:
	__asm        cmp    Width, 0;
	__asm        jg     _Td5;
// LINE 96:
	Width = 0x64;
// LINE 97:
	xPos = 0x21c;
// LINE 110:
_Td5:
	__asm        push   0;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, xPos;
	__asm        push   eax;
	__asm        push   0x90E40000;
	__asm        mov    eax, windowName;
	__asm        push   eax;
	__asm        mov    eax, CDebugWindow::m_className;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 111:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0xFFFFFFEB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
// LINE 124:
	__asm        push   0;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x19;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x50801044;
	__asm        push   0x5973DC;
	__asm        push   0x5973E0;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 125:
	this->CDebugWindow::OnSize(0x0, Width, Height);
// LINE 126:
	return 0x1;
// LINE 129:
// Block end:
_T173:
	return 0x0;
// LINE 130:
}

// FUNCTION: COPTER_D 0x00423367
void CDebugWindow::ShowWindow() {
// LINE 136:
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 138:
	return;
}

// FUNCTION: COPTER_D 0x0042338c
void CDebugWindow::HideWindow() {
// LINE 142:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 144:
	return;
}

// FUNCTION: COPTER_D 0x004233b1
int32_t CDebugWindow::Save(char * filePath) {
	/*bp-0x10*/  /*packed*/ class deque<basic_string<char>>::iterator it; // 0x10 bytes
	/*bp-0x14*/  /*packed*/ struct _iobuf *file;

// LINE 153:
	file = fopen(filePath, 0x5973e8);
// LINE 154:
	__asm        cmp    file, 0;
	__asm        jne    _T31;
// LINE 155:
	return 0x0;
// LINE 157:
_T31:
	__asm        mov    eax, this;
	__asm        lea    ecx, it.current;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _LOOP_52;
// LINE 158:
_LOOP_52:
	for (;;) {
		// LINE 158:
		_LOOP_52:
			__asm        mov    eax, this;
			__asm        add    eax, 0x10;
			__asm        lea    ecx, [ebp-0x24];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T76;
		_T76:
			__asm        mov    eax, [ebp-0x24];
			__asm        cmp    it.current, eax;
			__asm        je     _Tfd;

			__asm        mov    eax, it.current;
			__asm        cmp    it.first, eax;
			__asm        je     _T9a;

			__asm        mov    eax, [ebp-0x24];
			__asm        cmp    [ebp-0x20], eax;
			__asm        jne    _T107;
		_T9a:
			__asm        mov    eax, [ebp-0x18];
			__asm        cmp    it.node, eax;
			__asm        jne    _Tc1;

			__asm        mov    eax, it.current;
			__asm        sub    eax, [ebp-0x24];
			__asm        and    eax, 0xFFFFFFF8;
			__asm        xor    ecx, ecx;
			__asm        and    ecx, 0xFFFFFFF8;
			__asm        cmp    eax, ecx;
			__asm        jne    _T107;

			__asm        jmp    _Tee;
		_Tc1:
			__asm        mov    eax, it.node;
			__asm        sub    eax, [ebp-0x18];
			__asm        sar    eax, 2;
			__asm        dec    eax;
			__asm        imul   eax, deque<basic_string<char>>::buffer_size;
			__asm        mov    ecx, it.current;
			__asm        sub    ecx, it.first;
			__asm        sar    ecx, 3;
			__asm        add    eax, ecx;
			__asm        mov    ecx, [ebp-0x1C];
			__asm        sub    ecx, [ebp-0x24];
			__asm        sar    ecx, 3;
			__asm        add    eax, ecx;
			__asm        jne    _T107;
		_Tee:
			__asm        jmp    _Tfd;

			__asm        cmp    dword ptr [ebp-0x38], 0;
			__asm        jne    _T107;
		_Tfd:
			__asm        jmp    _T11b;

			__asm        jmp    _T107;
		_T107:
			__asm        jmp    _T116;

			__asm        cmp    dword ptr [ebp-0x3C], 0;
			__asm        jne    _T11b;
		_T116:
			__asm        jmp    _T120;
		_T11b:
			__asm        jmp    _T2ec;
		_T120:
			__asm        jmp    _T12f;

			__asm        cmp    dword ptr [ebp-0x40], 0;
			__asm        je     _T2ec;
		// LINE 160:
		_T12f:
			__asm        jmp    _T134;
		_T134:
			__asm        jmp    _T139;
		_T139:
			__asm        jmp    _T13e;
		_T13e:
			__asm        mov    eax, it.current;
			__asm        mov    [ebp-0x74], eax;
			__asm        mov    eax, [ebp-0x74];
			__asm        cmp    dword ptr [eax], 0;
			__asm        je     _T16a;

			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x54], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    [ebp-0x5C], eax;
			__asm        mov    eax, [ebp-0x5C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T16a:
			__asm        jmp    _T16f;
		_T16f:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        inc    eax;
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    ecx, [ebp-0x74];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T18c;
		_T18c:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T204;

			__asm        jmp    _T1a1;
		_T1a1:
			__asm        jmp    _T1a6;
		_T1a6:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T1cb;

			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x68], eax;
			__asm        jmp    _T1d7;

			__asm        jmp    _T1d7;
		_T1cb:
			__asm        mov    dword ptr [ebp-0x68], 0;
			__asm        jmp    _T1d7;
		_T1d7:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x6C], eax;
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x70], eax;
			__asm        mov    eax, [ebp-0x6C];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x68];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x70];
			__asm        push   eax;
			__asm        call   memcpy;
			__asm        add    esp, 0xC;
			__asm        jmp    _T204;
		_T204:
			__asm        jmp    _T209;
		_T209:
			__asm        mov    byte ptr [ebp-0x58], 0;
			__asm        jmp    _T212;
		_T212:
			__asm        lea    eax, [ebp-0x58];
			__asm        mov    [ebp-0x60], eax;
			__asm        jmp    _T21d;
		_T21d:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x74];
			__asm        add    eax, [ecx];
			__asm        mov    [ebp-0x64], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    al, [eax];
			__asm        mov    ecx, [ebp-0x64];
			__asm        mov    [ecx], al;
			__asm        jmp    _T23d;
		_T23d:
			__asm        jmp    _T242;
		_T242:
			__asm        mov    eax, file;
			__asm        push   eax;
			__asm        push   1;
			__asm        mov    eax, it.current;
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax];
			__asm        push   eax;
			__asm        call   fwrite;
			__asm        add    esp, 0x10;
		// LINE 161:
			fwrite(0x5973ec, 0x2, 0x1, file);
		// LINE 162:
			__asm        lea    eax, it.current;
			__asm        lea    ecx, [ebp-0x50];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        add    it.current, 8;
			__asm        mov    eax, it.last;
			__asm        cmp    it.current, eax;
			__asm        jne    _T2c1;

			it.node += 0x4;
			it.first = it.node->;
			it.current = it.first;
			it.last = ((deque<basic_string<char>>::buffer_size << 0x3) + it.first);
		_T2c1:
			__asm        jmp    _T2c6;
		_T2c6:
			__asm        lea    eax, [ebp-0x50];
			__asm        lea    ecx, [ebp-0x34];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T2e7;
		// LINE 163:
		_T2e7:
	}
// LINE 165:
_T2ec:
	fflush(file);
// LINE 166:
	fclose(file);
// LINE 167:
	return 0x1;
// LINE 168:
}

// FUNCTION: COPTER_D 0x004236c6
void CDebugWindow::OnSize(unsigned long sizeType, unsigned short width, unsigned short height) {
	/*bp-0x10*/  /*packed*/ struct tagRECT editRect; // 0x10 bytes
	/*bp-0x20*/  /*packed*/ struct tagRECT winRect; // 0x10 bytes

// LINE 180:
	__asm        lea    eax, winRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 181:
	__asm        lea    eax, editRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 182:
	__asm        push   1;
	__asm        mov    eax, editRect.bottom;
	__asm        push   eax;
	__asm        mov    eax, winRect.right;
	__asm        push   eax;
	__asm        mov    eax, winRect.bottom;
	__asm        sub    eax, editRect.bottom;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3828];
// LINE 183:
	this->CDebugWindow::RecalcScrollRange();
// LINE 184:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 185:
	return;
}

// FUNCTION: COPTER_D 0x00423739
void CDebugWindow::OnPaint() {
	/*bp-0x4*/   int32_t scrollStart;
	/*bp-0x8*/   char * str;
	/*bp-0x40*/  /*packed*/ struct tagTEXTMETRICA tm; // 0x35 bytes
	/*bp-0x44*/  void * __ptr32 hDC;
	/*bp-0x84*/  /*packed*/ struct tagPAINTSTRUCT ps; // 0x40 bytes
	/*bp-0x88*/  int32_t index;
	/*bp-0x98*/  /*packed*/ class deque<basic_string<char>>::iterator it; // 0x10 bytes

// LINE 194:
	__asm        lea    eax, ps.hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3838];
	__asm        mov    hDC, eax;
// LINE 198:
	__asm        lea    eax, tm.tmHeight;
	__asm        push   eax;
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C355C];
// LINE 199:
	index = 0x0;
// LINE 201:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    scrollStart, eax;
// LINE 203:
	it.current = 0x0;
	it.first = 0x0;
	it.last = 0x0;
	it.node = 0x0;
	__asm        jmp    _T86;
// LINE 204:
_T86:
	__asm        mov    eax, this;
	__asm        lea    ecx, [ebp-0xA8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _Tad;
_Tad:
	__asm        lea    eax, [ebp-0xA8];
	__asm        lea    ecx, it.current;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 23:
	__asm        jmp    _T170;
// LINE 204:
_LOOP_d4:
	for (;;) {
		// LINE 204:
		_LOOP_d4:
			__asm        lea    eax, it.current;
			__asm        lea    ecx, [ebp-0xE8];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        add    it.current, 8;
			__asm        mov    eax, it.current;
			__asm        cmp    it.last, eax;
			__asm        jne    _T144;

			it.node += 0x4;
			it.first = it.node->;
			it.current = it.first;
			it.last = ((deque<basic_string<char>>::buffer_size << 0x3) + it.first);
		_T144:
			__asm        jmp    _T149;
		_T149:
			__asm        lea    eax, [ebp-0xE8];
			__asm        lea    ecx, [ebp-0xB8];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T170;
		_T170:
			__asm        mov    eax, this;
			__asm        add    eax, 0x10;
			__asm        lea    ecx, [ebp-0xC8];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T19a;
		_T19a:
			__asm        mov    eax, [ebp-0xC8];
			__asm        cmp    it.current, eax;
			__asm        je     _T254;

			__asm        mov    eax, it.current;
			__asm        cmp    it.first, eax;
			__asm        je     _T1d0;

			__asm        mov    eax, [ebp-0xC8];
			__asm        cmp    [ebp-0xC4], eax;
			__asm        jne    _T25e;
		_T1d0:
			__asm        mov    eax, [ebp-0xBC];
			__asm        cmp    it.node, eax;
			__asm        jne    _T203;

			__asm        mov    eax, it.current;
			__asm        sub    eax, [ebp-0xC8];
			__asm        and    eax, 0xFFFFFFF8;
			__asm        xor    ecx, ecx;
			__asm        and    ecx, 0xFFFFFFF8;
			__asm        cmp    eax, ecx;
			__asm        jne    _T25e;

			__asm        jmp    _T242;
		_T203:
			__asm        mov    eax, it.node;
			__asm        sub    eax, [ebp-0xBC];
			__asm        sar    eax, 2;
			__asm        dec    eax;
			__asm        imul   eax, deque<basic_string<char>>::buffer_size;
			__asm        mov    ecx, it.current;
			__asm        sub    ecx, it.first;
			__asm        sar    ecx, 3;
			__asm        add    eax, ecx;
			__asm        mov    ecx, [ebp-0xC0];
			__asm        sub    ecx, [ebp-0xC8];
			__asm        sar    ecx, 3;
			__asm        add    eax, ecx;
			__asm        jne    _T25e;
		_T242:
			__asm        jmp    _T254;

			__asm        cmp    dword ptr [ebp-0xD0], 0;
			__asm        jne    _T25e;
		_T254:
			__asm        jmp    _T275;

			__asm        jmp    _T25e;
		_T25e:
			__asm        jmp    _T270;

			__asm        cmp    dword ptr [ebp-0xD4], 0;
			__asm        jne    _T275;
		_T270:
			__asm        jmp    _T27a;
		_T275:
			__asm        jmp    _T44b;
		_T27a:
			__asm        jmp    _T28c;

			__asm        cmp    dword ptr [ebp-0xD8], 0;
			__asm        je     _T44b;
		// LINE 206:
		_T28c:
			__asm        jmp    _T291;
		_T291:
			__asm        mov    eax, it.current;
			__asm        mov    [ebp-0x10C], eax;
			__asm        mov    eax, [ebp-0x10C];
			__asm        cmp    dword ptr [eax], 0;
			__asm        je     _T2d5;

			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0xEC], eax;
			__asm        mov    eax, [ebp-0xEC];
			__asm        mov    [ebp-0xF4], eax;
			__asm        mov    eax, [ebp-0xF4];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T2d5:
			__asm        jmp    _T2da;
		_T2da:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        inc    eax;
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    ecx, [ebp-0x10C];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T2fd;
		_T2fd:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T399;

			__asm        jmp    _T315;
		_T315:
			__asm        jmp    _T31a;
		_T31a:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T348;

			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x100], eax;
			__asm        jmp    _T357;

			__asm        jmp    _T357;
		_T348:
			__asm        mov    dword ptr [ebp-0x100], 0;
			__asm        jmp    _T357;
		_T357:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x104], eax;
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x108], eax;
			__asm        mov    eax, [ebp-0x104];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x100];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x108];
			__asm        push   eax;
			__asm        call   memcpy;
			__asm        add    esp, 0xC;
			__asm        jmp    _T399;
		_T399:
			__asm        jmp    _T39e;
		_T39e:
			__asm        mov    byte ptr [ebp-0xF0], 0;
			__asm        jmp    _T3aa;
		_T3aa:
			__asm        lea    eax, [ebp-0xF0];
			__asm        mov    [ebp-0xF8], eax;
			__asm        jmp    _T3bb;
		_T3bb:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, [ebp-0x10C];
			__asm        add    eax, [ecx];
			__asm        mov    [ebp-0xFC], eax;
			__asm        mov    eax, [ebp-0xF8];
			__asm        mov    al, [eax];
			__asm        mov    ecx, [ebp-0xFC];
			__asm        mov    [ecx], al;
			__asm        jmp    _T3ea;
		_T3ea:
			__asm        jmp    _T3ef;
		_T3ef:
			__asm        mov    eax, [ebp-0x10C];
			__asm        mov    eax, [eax];
			__asm        mov    str, eax;
		// LINE 207:
			__asm        cmp    scrollStart, 0;
			__asm        jne    _T443;
		// LINE 208:
			__asm        mov    eax, index;
			__asm        mov    [ebp-0xCC], eax;
			__asm        inc    index;
			__asm        mov    eax, str;
			__asm        push   eax;
			__asm        call   strlen;
			__asm        add    esp, 4;
			__asm        push   eax;
			__asm        mov    eax, str;
			__asm        push   eax;
			__asm        mov    eax, tm.tmHeight;
			__asm        imul   eax, [ebp-0xCC];
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, hDC;
			__asm        push   eax;
			__asm        call   dword ptr ds:[0x6C3558];
		// LINE 209:
			__asm        jmp    _T446;
		// LINE 210:
		_T443:
			scrollStart--;
		// LINE 211:
		_T446:
	}
// LINE 214:
_T44b:
	__asm        lea    eax, ps.hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3830];
// LINE 215:
	return;
}

// FUNCTION: COPTER_D 0x00423ba5
void CDebugWindow::OnScroll(int32_t scrollCode, int32_t pos) {
	/*bp-0x4*/   int32_t curPos;
	/*bp-0x8*/   int32_t maxPos;
	/*bp-0xc*/   int32_t minPos;

// LINE 222:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    curPos, eax;
// LINE 223:
	__asm        mov    eax, scrollCode;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T60;
// LINE 225:
_T29:
	curPos--;
	__asm        jmp    _T8c;
// LINE 226:
_T31:
	curPos++;
	__asm        jmp    _T8c;
// LINE 227:
_T39:
	curPos -= 0xa;
	__asm        jmp    _T8c;
// LINE 228:
_T42:
	curPos += 0xa;
	__asm        jmp    _T8c;
// LINE 230:
_T4b:
	curPos = pos;
	__asm        jmp    _T8c;
// LINE 231:
	__asm        jmp    _T8c;
// LINE 232:
	__asm        jmp    _T8c;
_T60:
	__asm        cmp    dword ptr [ebp-0x14], 5;
	__asm        ja     _T8c;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    _Switch_74[0][eax*4];
// Switch pointers:
//   _T29
//   _T31
//   _T39
//   _T42
//   _T4b
//   _T4b
// LINE 233:
_T8c:
	__asm        cmp    curPos, 0;
	__asm        jge    _T9d;

	curPos = 0x0;
// LINE 235:
_T9d:
	__asm        lea    eax, maxPos;
	__asm        push   eax;
	__asm        lea    eax, minPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3840];
// LINE 236:
	__asm        mov    eax, curPos;
	__asm        cmp    maxPos, eax;
	__asm        jge    _Tc6;
// LINE 237:
	curPos = maxPos;
// LINE 238:
_Tc6:
	__asm        push   1;
	__asm        mov    eax, curPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C383C];
// LINE 239:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 240:
	return;
}

// FUNCTION: COPTER_D 0x00423c9d
void CDebugWindow::OutputString(char * buf) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> str; // 0x8 bytes

// LINE 250:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    str.reference, eax;
	__asm        jmp    _T69;
_T62:
	str.reference = 0x0;
_T69:
	str.c_str_ptr = 0x0;
	__asm        jmp    _T75;
// LINE 251:
_T75:
	__asm        jmp    _T7a;
_T7a:
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _Tc5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb6;
_Tb6:
	exit(0x1);
	__asm        jmp    _Tc5;
_Tc5:
	__asm        jmp    _Tca;
_Tca:
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tf5;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T13e;

	__asm        jmp    _Te6;
_Te6:
	__asm        mov    eax, str.reference;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T13e;
_Tf5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T124;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T12b;
_T124:
	__asm        mov    dword ptr [ebp-0xC], 0;
_T12b:
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    str.reference, eax;
	__asm        jmp    _T16e;
_T13e:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T16e;

	__asm        jmp    _T14d;
_T14d:
	__asm        mov    eax, str.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T16e;
_T16e:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, str.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T17c;
_T17c:
	__asm        jmp    _T181;
// LINE 252:
_T181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T19b;

	__asm        jmp    _T213;

	__asm        jmp    _T19b;
_T19b:
	__asm        jmp    _T1ad;

	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        jne    _T213;
_T1ad:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0xA0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, [ebp-0xB0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T201;
_T201:
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    [ebp-0xA8], eax;
	__asm        jne    _T21e;
_T213:
	this->deque<basic_string<char>>::allocate_at_end();
_T21e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    _T23e;
_T23e:
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     _T263;

	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, str.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T263;
_T263:
	__asm        jmp    _T268;
_T268:
	this->m_strings.finish.current += 0x8;
	this->m_strings.length++;
	__asm        jmp    _T280;
// LINE 253:
_T280:
	__asm        jmp    __WHILE_285;
__WHILE_285:
	while ((this->m_strings.length > 0x1f4)) {
		// LINE 254:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x5C], eax;
			__asm        push   0;
			__asm        mov    ecx, [ebp-0x5C];
			__asm        call   basic_string<char>::`scalar deleting destructor';
			__asm        jmp    _T2b2;
		_T2b2:
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax], 8;
			__asm        mov    eax, this;
			__asm        dec    dword ptr [eax+0x20];
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x20], 0;
			__asm        jne    _T2de;

			__asm        jmp    _T341;

			__asm        jmp    _T2de;
		_T2de:
			__asm        jmp    _T2ed;

			__asm        cmp    dword ptr [ebp-0x60], 0;
			__asm        jne    _T341;
		_T2ed:
			__asm        mov    eax, this;
			__asm        lea    ecx, [ebp-0x48];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T311;
		_T311:
			__asm        mov    eax, this;
			__asm        lea    ecx, [ebp-0x58];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T335;
		_T335:
			__asm        mov    eax, [ebp-0x48];
			__asm        cmp    [ebp-0x50], eax;
			__asm        jne    _T47e;
		_T341:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-0x84], eax;
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax+0xC], 4;
			__asm        mov    eax, [ebp-0x84];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x88], eax;
			__asm        mov    eax, [ebp-0x88];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T37c;
		_T37c:
			__asm        jmp    _T381;
		_T381:
			__asm        mov    eax, this;
			__asm        cmp    dword ptr [eax+0x20], 0;
			__asm        jne    _T396;

			__asm        jmp    _T39b;
		_T396:
			__asm        jmp    _T43f;
		_T39b:
			__asm        jmp    _T3ad;

			__asm        cmp    dword ptr [ebp-0x8C], 0;
			__asm        je     _T43f;
		_T3ad:
			__asm        mov    dword ptr [ebp-0x70], 0;
			__asm        mov    dword ptr [ebp-0x6C], 0;
			__asm        mov    dword ptr [ebp-0x68], 0;
			__asm        mov    dword ptr [ebp-0x64], 0;
			__asm        jmp    _T3ce;
		_T3ce:
			__asm        lea    eax, [ebp-0x70];
			__asm        mov    ecx, this;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x10;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x24];
			__asm        mov    [ebp-0x90], eax;
			__asm        mov    eax, [ebp-0x90];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T435;
		_T435:
			__asm        jmp    _T43a;
		_T43a:
			__asm        jmp    _T479;
		_T43f:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    eax, [eax];
			__asm        push   eax;
			__asm        lea    ecx, [ebp-0x80];
			__asm        call   deque<basic_string<char>>::iterator::iterator;
			__asm        mov    ecx, this;
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
		_T479:
			__asm        jmp    _T47e;
		_T47e:
			__asm        jmp    _T483;
		_T483:
	}
// LINE 255:
_T488:
	this->CDebugWindow::RecalcScrollRange();
// LINE 256:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3824];
// LINE 257:
	__asm        mov    eax, str.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T52a;

	__asm        mov    eax, str.reference;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T52a;

	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T50a;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
_T50a:
	__asm        jmp    _T50f;
_T50f:
	__asm        jmp    _T514;
_T514:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T525;
_T525:
	__asm        jmp    _T52a;
_T52a:
	__asm        jmp    _T52f;
_T52f:
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     _T551;

	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T551:
	__asm        jmp    _T556;
_T556:
	return;
}

// FUNCTION: COPTER_D 0x004241ff
void CDebugWindow::RecalcScrollRange() {
	/*bp-0x4*/   int32_t curPos;
	/*bp-0x8*/   int32_t maxPos;
	/*bp-0xc*/   int32_t minPos;
	/*bp-0x10*/  int32_t pane_height;
	/*bp-0x20*/  /*packed*/ struct tagRECT editRect; // 0x10 bytes
	/*bp-0x58*/  /*packed*/ struct tagTEXTMETRICA tm; // 0x35 bytes
	/*bp-0x5c*/  int32_t range;
	/*bp-0x6c*/  /*packed*/ struct tagRECT winRect; // 0x10 bytes
	/*bp-0x70*/  void * __ptr32 hDC;
	/*bp-0x74*/  int32_t pane_lines;

// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hDC, eax;
// LINE 264:
	__asm        lea    eax, tm.tmHeight;
	__asm        push   eax;
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C355C];
// LINE 265:
	__asm        mov    eax, hDC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 268:
	__asm        lea    eax, winRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 269:
	__asm        lea    eax, editRect.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 271:
	pane_height = (winRect.bottom - editRect.bottom);
// LINE 273:
	__asm        mov    eax, pane_height;
	__asm        cdq;
	__asm        idiv   tm.tmHeight;
	__asm        mov    pane_lines, eax;
// LINE 275:
	__asm        jmp    _T75;
_T75:
	range = (this->m_strings.length - pane_lines);
// LINE 276:
	__asm        cmp    range, 0;
	__asm        jge    _T92;

	range = 0x0;
// LINE 279:
_T92:
	__asm        lea    eax, maxPos;
	__asm        push   eax;
	__asm        lea    eax, minPos;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3840];
// LINE 280:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3834];
	__asm        mov    curPos, eax;
// LINE 282:
	__asm        push   1;
	__asm        mov    eax, range;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3848];
// LINE 284:
	__asm        mov    eax, maxPos;
	__asm        cmp    curPos, eax;
	__asm        jl     _Tf3;
// LINE 285:
	__asm        push   1;
	__asm        mov    eax, range;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C383C];
// LINE 287:
_Tf3:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3844];
// LINE 288:
	return;
}

// FUNCTION: COPTER_D 0x0042430d
void CDebugWindow::OnEditChange() {
	/*bp-0x100*/ char buf[256]; // 0x100 bytes
	/*bp-0x104*/ long count;
	/*bp-0x108*/ long len;

// LINE 297:
	buf[0] = 0xff;
// LINE 298:
	buf[1] = 0xff;
// LINE 299:
	buf[2] = 0xff;
// LINE 300:
	buf[3] = 0xff;
// LINE 302:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xC4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C385C];
	__asm        mov    len, eax;
// LINE 303:
	__asm        mov    eax, len;
	__asm        mov    byte ptr [ebp+eax-0x100], 0;
// LINE 304:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C385C];
	__asm        mov    count, eax;
// LINE 305:
	__asm        cmp    count, 1;
	__asm        jle    _T5bd;
// LINE 308:
// Block start:
	/*bp-0x110*/ /*packed*/ class basic_string<char> str; // 0x8 bytes
	/*bp-0x210*/ char comBuf[256]; // 0x100 bytes
	/*bp-0x214*/ int32_t num;
	/*bp-0x220*/ /*packed*/ class vector<basic_string<char>> command_vector; // 0xc bytes
	/*bp-0x224*/ /*packed*/ struct debug_command **it;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        push   0x5973F0;
	__asm        lea    eax, comBuf[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0xC;
// LINE 309:
	this->CDebugWindow::OutputString(comBuf[0]);
// LINE 310:
	__asm        push   0x5973F4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3854];
// LINE 312:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x274], eax;
	__asm        cmp    dword ptr [ebp-0x274], 0;
	__asm        je     _T1b8;

	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T109;
_T109:
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T189;

	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x274];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T184;
_T184:
	__asm        jmp    _T195;
_T189:
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    dword ptr [eax], 0;
_T195:
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1a7;
_T1a7:
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    str.reference, eax;
	__asm        jmp    _T1c2;
_T1b8:
	str.reference = 0x0;
_T1c2:
	str.c_str_ptr = 0x0;
	__asm        jmp    _T1d1;
// LINE 314:
_T1d1:
	command_vector.start = 0x0;
	command_vector.finish = 0x0;
	command_vector.end_of_storage = 0x0;
	__asm        jmp    _T1f4;
// LINE 315:
_T1f4:
	__asm        lea    eax, command_vector.start;
	__asm        push   eax;
	__asm        sub    esp, 8;
	__asm        mov    [ebp-0x228], esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, str.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x228];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        call   ParseCommandLine;
	__asm        add    esp, 0xC;
	__asm        mov    num, eax;
// LINE 319:
	__asm        cmp    num, 0;
	__asm        je     _T38c;
// LINE 320:
	__asm        jmp    _FOR_24e;
_FOR_24e:
	it = this->m_commands.start;
	__asm        jmp    _FOR_COND_24e;
_FOR_NEXT_24e:
	it += 0x4;
_FOR_COND_24e:
	__asm        jmp    _T25a;
_T25a:
	__asm        mov    eax, this;
	__asm        mov    ecx, it;
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T38c;
// LINE 321:
	__asm        jmp    _T274;
_T274:
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, it;
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        jmp    _T29b;
_T29b:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T2ca;

	__asm        jmp    _T2b3;
_T2b3:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x22C], eax;
	__asm        jmp    _T2d4;
_T2ca:
	__asm        mov    dword ptr [ebp-0x22C], 0xFFFFFFFF;
_T2d4:
	__asm        jmp    _T2d9;
_T2d9:
	__asm        jmp    _T2de;
_T2de:
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T30c;

	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x230], eax;
	__asm        jmp    _T31b;

	__asm        jmp    _T31b;
_T30c:
	__asm        mov    dword ptr [ebp-0x230], 0;
	__asm        jmp    _T31b;
_T31b:
	__asm        jmp    _T320;
_T320:
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    _T355;

	__asm        jmp    _T35a;
_T355:
	__asm        jmp    _T387;
_T35a:
	__asm        jmp    _T36c;

	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     _T387;
// LINE 322:
_T36c:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    eax, it;
	__asm        mov    ecx, it;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx];
// LINE 323:
_T387:
	__asm        jmp    _FOR_NEXT_24e;
_T38c:
	this->CDebugWindow::RecalcScrollRange();
// LINE 324:
	__asm        mov    eax, command_vector.finish;
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x258], eax;
__WHILE_3af:
	__asm        mov    eax, [ebp-0x254];
	__asm        cmp    [ebp-0x258], eax;
	__asm        je     _T49d;

	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T431;

	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    [ebp-0x24C], eax;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        je     _T431;

	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T418;
_T418:
	__asm        mov    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T42c;
_T42c:
	__asm        jmp    _T431;
_T431:
	__asm        jmp    _T436;
_T436:
	__asm        mov    eax, [ebp-0x258];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T46e;

	__asm        mov    eax, [ebp-0x258];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T46e:
	__asm        jmp    _T473;
_T473:
	__asm        jmp    _T487;

	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T487:
	__asm        jmp    _T48c;
_T48c:
	__asm        jmp    _T491;
_T491:
	__asm        add    dword ptr [ebp-0x258], 8;
	__asm        jmp    __WHILE_3af;
_T491:
	__asm        add    dword ptr [ebp-0x258], 8;
	__asm        jmp    __WHILE_3af;
_T49d:
	__asm        jmp    _T4a2;
_T4a2:
	__asm        mov    eax, command_vector.start;
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T4c2;
_T4c2:
	__asm        jmp    _T4c7;
_T4c7:
	__asm        jmp    _T4cc;
_T4cc:
	__asm        mov    eax, str.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T57f;

	__asm        mov    eax, str.reference;
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     _T57f;

	__asm        mov    eax, [ebp-0x264];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T55c;

	__asm        mov    eax, [ebp-0x264];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        mov    [ebp-0x270], eax;
	__asm        mov    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    dword ptr [eax], 0;
_T55c:
	__asm        jmp    _T561;
_T561:
	__asm        jmp    _T566;
_T566:
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T57a;
_T57a:
	__asm        jmp    _T57f;
_T57f:
	__asm        jmp    _T584;
_T584:
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     _T5b8;

	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x260], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5b8:
	__asm        jmp    _T5bd;
// LINE 325:
// Block end:
_T5bd:
	return;
}

// FUNCTION: COPTER_D 0x004248d4
long CDebugWindow::InstanceWindowProcedure(uint32_t Message, uint32_t WParam, long LParam) {
// LINE 338:
	__asm        mov    eax, Message;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tc5;
// LINE 341:
_T17:
	this->CDebugWindow::OnSize(WParam, LParam, ((LParam >> 0x10) & 0xffff));
// LINE 342:
	__asm        jmp    _T10d;
// LINE 344:
_T38:
	__asm        mov    eax, WParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0x300;
	__asm        jne    _T59;
// LINE 345:
	this->CDebugWindow::OnEditChange();
// LINE 346:
_T59:
	__asm        jmp    _T10d;
// LINE 348:
_T5e:
	__asm        mov    eax, WParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CDebugWindow::OnScroll;
// LINE 349:
	__asm        jmp    _T10d;
// LINE 351:
_T83:
	this->CDebugWindow::OnPaint();
// LINE 352:
	__asm        jmp    _T10d;
// LINE 354:
_T90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3864];
// LINE 355:
	__asm        jmp    _T10d;
// LINE 357:
_Ta2:
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    __RETURN;
// LINE 358:
	__asm        jmp    _T10d;
_Tc5:
	__asm        cmp    dword ptr [ebp-8], 0xF;
	__asm        ja     _Tee;

	__asm        je     _T83;

	__asm        cmp    dword ptr [ebp-8], 5;
	__asm        je     _T17;

	__asm        cmp    dword ptr [ebp-8], 7;
	__asm        je     _T90;

	__asm        jmp    _Ta2;
_Tee:
	__asm        cmp    dword ptr [ebp-8], 0x111;
	__asm        je     _T38;

	__asm        cmp    dword ptr [ebp-8], 0x115;
	__asm        je     _T5e;

	__asm        jmp    _Ta2;
// LINE 359:
_T10d:
	return 0x0;
// LINE 360:
__RETURN:
}

// FUNCTION: COPTER_D 0x004249ef
long CDebugWindow::WindowProcedure(void * __ptr32 hWindow, uint32_t Message, uint32_t WParam, long LParam) {
	/*bp-0x4*/   /*packed*/ class CDebugWindow *debugWin;

// LINE 363:
	__asm        push   0xFFFFFFEB;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        mov    debugWin, eax;
// LINE 364:
	__asm        cmp    debugWin, 0;
	__asm        je     _T40;
// LINE 365:
	return debugWin->CDebugWindow::InstanceWindowProcedure(Message, WParam, LParam);
// LINE 366:
	__asm        jmp    __RETURN;
// LINE 367:
_T40:
	__asm        mov    eax, LParam;
	__asm        push   eax;
	__asm        mov    eax, WParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, hWindow;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3860];
	__asm        jmp    __RETURN;
// LINE 368:
__RETURN:
}

// FUNCTION: COPTER_D 0x00424a51
void CreateDebugWindow() {
// LINE 384:
	__asm        cmp    gDebugWindow, 0;
	__asm        jne    _T59;
// LINE 386:
	__asm        push   0x40;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3f;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CDebugWindow::CDebugWindow;
	__asm        mov    gDebugWindow, eax;
	__asm        jmp    _T49;
_T3f:
	gDebugWindow = 0x0;
// LINE 387:
_T49:
	gDebugWindow->CDebugWindow::Create(0x5973f8);
// LINE 389:
_T59:
	return;
}

// FUNCTION: COPTER_D 0x00424ab4
void DestroyDebugWindow() {
// LINE 393:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T56;
// LINE 395:
	__asm        mov    eax, gDebugWindow;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T4c;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CDebugWindow::~CDebugWindow;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T47;
_T47:
	__asm        jmp    _T4c;
// LINE 396:
_T4c:
	gDebugWindow = 0x0;
// LINE 398:
_T56:
	return;
}

// FUNCTION: COPTER_D 0x00424b14
void DebugOutput(char * text, ...) {
	/*bp-0x100*/ char buf[256]; // 0x100 bytes
	/*bp-0x104*/ char * Marker;

// LINE 404:
	__asm        lea    eax, [ebp+0xC];
	__asm        mov    Marker, eax;
// LINE 405:
	vsprintf(buf[0], text, Marker);
// LINE 406:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T4e;
// LINE 407:
	gDebugWindow->CDebugWindow::OutputString(buf[0]);
// LINE 408:
_T4e:
	return;
}

// FUNCTION: COPTER_D 0x00424b6c
void RegisterDebugCommand(/*packed*/ struct debug_command *aCommand) {
// LINE 412:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T3ba;
// LINE 413:
	__asm        mov    eax, aCommand;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, gDebugWindow;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T75;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T4d;
_T4d:
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T64;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T64;
_T64:
	__asm        jmp    _T69;
_T69:
	__asm        mov    eax, [ebp-0x80];
	__asm        add    dword ptr [eax+0x30], 4;
	__asm        jmp    _T3b0;
_T75:
	__asm        jmp    _T7a;
_T7a:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T124;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _Tce;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        jmp    _Tce;
_Tce:
	__asm        jmp    _Td3;
_Td3:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x34], eax;
__WHILE_e8:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x78], eax;
	__asm        je     _T10b;

	__asm        sub    dword ptr [ebp-0x30], 4;
	__asm        sub    dword ptr [ebp-0x34], 4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        jmp    __WHILE_e8;

	__asm        sub    dword ptr [ebp-0x30], 4;
	__asm        sub    dword ptr [ebp-0x34], 4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        jmp    __WHILE_e8;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    dword ptr [eax+0x30], 4;
	__asm        jmp    _T3ab;
_T124:
	__asm        jmp    _T129;
_T129:
	__asm        jmp    _T12e;
_T12e:
	__asm        jmp    _T133;
_T133:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        test   eax, eax;
	__asm        je     _T172;

	__asm        jmp    _T14f;
_T14f:
	__asm        jmp    _T154;
_T154:
	__asm        jmp    _T159;
_T159:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T1bf;
_T172:
	__asm        mov    dword ptr [ebp-0x1C], 0x400;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x20], 1;
	__asm        lea    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1a7;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T1ad;
_T1a7:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T1bf;
_T1bf:
	__asm        jmp    _T1c4;
_T1c4:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T1da;
_T1da:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x5C], eax;
__WHILE_1e9:
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    [ebp-0x78], eax;
	__asm        je     _T237;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x5C], 4;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        add    dword ptr [ebp-0x58], 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T214;
_T214:
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T22d;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T22d;
_T22d:
	__asm        jmp    _T232;
_T232:
_T232:
_T237:
	__asm        jmp    _T23c;
_T23c:
	__asm        jmp    _T241;
_T241:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T267;
_T267:
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T27e;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T27e;
_T27e:
	__asm        jmp    _T283;
_T283:
	__asm        jmp    _T288;
_T288:
	__asm        jmp    _T28d;
_T28d:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xC];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x74], eax;
__WHILE_2ba:
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x74], eax;
	__asm        je     _T308;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x60], eax;
	__asm        add    dword ptr [ebp-0x74], 4;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x6C], 4;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T2e5;
_T2e5:
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T2fe;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T2fe;
_T2fe:
	__asm        jmp    _T303;
_T303:
_T303:
_T308:
	__asm        jmp    _T30d;
_T30d:
	__asm        jmp    _T312;
_T312:
	__asm        jmp    _T317;
_T317:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x18], eax;
__WHILE_320:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x30], ecx;
	__asm        je     _T33d;

	__asm        jmp    _T334;
_T334:
	__asm        add    dword ptr [ebp-0x18], 4;
	__asm        jmp    __WHILE_320;
_T334:
	__asm        add    dword ptr [ebp-0x18], 4;
	__asm        jmp    __WHILE_320;
_T33d:
	__asm        jmp    _T342;
_T342:
	__asm        jmp    _T347;
_T347:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T361;
_T361:
	__asm        jmp    _T366;
_T366:
	__asm        mov    eax, [ebp-0x10];
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    _T37a;
_T37a:
	__asm        jmp    _T37f;
_T37f:
	__asm        jmp    _T384;
_T384:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x80];
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 2;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        add    eax, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x2C], eax;
_T3ab:
	__asm        jmp    _T3b0;
_T3b0:
	__asm        jmp    _T3b5;
_T3b5:
	__asm        jmp    _T3ba;
// LINE 414:
_T3ba:
	return;
}

// FUNCTION: COPTER_D 0x00424f30
void UnregisterDebugCommand(/*packed*/ struct debug_command *aCommand) {
// LINE 418:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _Tdb;
// LINE 419:
	__asm        mov    eax, aCommand;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, gDebugWindow;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T2e;
_T2e:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
__WHILE_46:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-8], eax;
	__asm        je     _T69;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax], ecx;
	__asm        je     _T69;

	__asm        add    dword ptr [ebp-8], 4;
	__asm        jmp    __WHILE_46;

	__asm        add    dword ptr [ebp-8], 4;
	__asm        jmp    __WHILE_46;
_T69:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x18], eax;
	__asm        jne    _T8b;

	__asm        jmp    _Td1;
_T8b:
	__asm        add    dword ptr [ebp-4], 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x10], eax;
__WHILE_9b:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x10], eax;
	__asm        je     _Tcc;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax], ecx;
	__asm        je     _Tc3;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        add    dword ptr [ebp-0xC], 4;
_Tc3:
	__asm        add    dword ptr [ebp-0x10], 4;
	__asm        jmp    __WHILE_9b;
_Tc3:
	__asm        add    dword ptr [ebp-0x10], 4;
	__asm        jmp    __WHILE_9b;
_Tcc:
	__asm        jmp    _Td1;
_Td1:
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
// LINE 420:
_Tdb:
	return;
}

// FUNCTION: COPTER_D 0x00425015
void SaveDebugWindow(char * fileName) {
// LINE 424:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T22;
// LINE 425:
	gDebugWindow->CDebugWindow::Save(fileName);
// LINE 426:
_T22:
	return;
}

// FUNCTION: COPTER_D 0x00425041
int32_t ParseCommandLine(/*packed*/ class basic_string<char> str, /*packed*/ class vector<basic_string<char>>& commands) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> subString; // 0x8 bytes
	/*bp-0xc*/   int32_t index;
	/*bp-0x10*/  int32_t pos;
	/*bp-0x18*/  /*packed*/ class basic_string<char> parseStr; // 0x8 bytes

// LINE 432:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, str.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T35;

	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 434:
_T35:
	subString.c_str_ptr->basic_string<char>::basic_string<char>();
	parseStr.c_str_ptr->basic_string<char>::basic_string<char>();
// LINE 437:
	__asm        jmp    _T4a;
_T4a:
	__asm        jmp    _T4f;
_T4f:
	__asm        push   0x597408;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597408;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::find_first_not_of_str;
	__asm        mov    pos, eax;
// LINE 438:
	__asm        cmp    pos, 0xFFFFFFFF;
	__asm        jne    _Ta0;

	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, subString.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    __RETURN;
// LINE 441:
_Ta0:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::substr;
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 442:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        jmp    _Tcd;
_Tcd:
	__asm        push   0x59740C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59740C;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::find_first_of_str;
	__asm        mov    pos, eax;
// LINE 444:
	index = 0x0;
// LINE 446:
__WHILE_f4:
	while ((pos != -0x1)) {
		// LINE 449:
			index++;
		// LINE 452:
			__asm        mov    eax, pos;
			__asm        push   eax;
			__asm        push   0;
			__asm        lea    eax, [ebp-0x30];
			__asm        push   eax;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::substr;
			__asm        push   eax;
			__asm        mov    ecx, commands;
			__asm        call   vector<basic_string<char>>::push_back;
			__asm        lea    ecx, [ebp-0x30];
			__asm        call   basic_string<char>::delete_ref;
			__asm        cmp    dword ptr [ebp-0x30], 0;
			__asm        je     _T152;

			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0xC0], eax;
			__asm        mov    eax, [ebp-0xC0];
			__asm        mov    [ebp-0xC4], eax;
			__asm        mov    eax, [ebp-0xC4];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T152:
			__asm        jmp    _T157;
		// LINE 455:
		_T157:
			__asm        push   0xFFFFFFFF;
			__asm        mov    eax, pos;
			__asm        push   eax;
			__asm        lea    eax, [ebp-0x38];
			__asm        push   eax;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::substr;
			__asm        push   eax;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::operator=;
			__asm        lea    ecx, [ebp-0x38];
			__asm        call   basic_string<char>::delete_ref;
			__asm        cmp    dword ptr [ebp-0x38], 0;
			__asm        je     _T1a8;

			__asm        mov    eax, [ebp-0x38];
			__asm        mov    [ebp-0xB4], eax;
			__asm        mov    eax, [ebp-0xB4];
			__asm        mov    [ebp-0xB8], eax;
			__asm        mov    eax, [ebp-0xB8];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T1a8:
			__asm        jmp    _T1ad;
		// LINE 456:
		_T1ad:
			__asm        jmp    _T1b2;
		_T1b2:
			__asm        jmp    _T1b7;
		_T1b7:
			__asm        push   0x597410;
			__asm        call   strlen;
			__asm        add    esp, 4;
			__asm        push   eax;
			__asm        push   0;
			__asm        push   0x597410;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::find_first_not_of_str;
			__asm        mov    pos, eax;
		// LINE 459:
			__asm        cmp    pos, 0xFFFFFFFF;
			__asm        je     _T3f7;
		// LINE 461:
			__asm        jmp    _T1e6;
		_T1e6:
			__asm        mov    eax, parseStr.reference;
			__asm        mov    ecx, pos;
			__asm        cmp    [eax+4], ecx;
			__asm        jae    _T22d;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0xAC], eax;
			__asm        mov    eax, [ebp-0xAC];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T21e;
		_T21e:
			exit(0x1);
			__asm        jmp    _T22d;
		_T22d:
			__asm        jmp    _T232;
		_T232:
			__asm        mov    eax, parseStr.reference;
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T2c4;

			__asm        jmp    _T244;
		_T244:
			__asm        mov    eax, parseStr.reference;
			__asm        mov    eax, [eax+4];
			__asm        sub    eax, pos;
			__asm        cmp    eax, 0xFFFFFFFF;
			__asm        jae    _T26f;

			__asm        jmp    _T25b;
		_T25b:
			__asm        mov    eax, parseStr.reference;
			__asm        mov    eax, [eax+4];
			__asm        sub    eax, pos;
			__asm        mov    [ebp-0xA8], eax;
			__asm        jmp    _T279;
		_T26f:
			__asm        mov    dword ptr [ebp-0xA8], 0xFFFFFFFF;
		_T279:
			__asm        push   0xFFFFFFFF;
			__asm        push   0;
			__asm        mov    eax, [ebp-0xA8];
			__asm        push   eax;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::data;
			__asm        mov    ecx, pos;
			__asm        add    ecx, eax;
			__asm        push   ecx;
			__asm        lea    ecx, [ebp-0x9C];
			__asm        call   basic_string<char>::basic_string<char>;
			__asm        push   eax;
			__asm        lea    ecx, [ebp-0x40];
			__asm        call   basic_string<char>::basic_string<char>;
			__asm        lea    ecx, [ebp-0x9C];
			__asm        call   basic_string<char>::~basic_string<char>;
			__asm        lea    eax, [ebp-0x40];
			__asm        mov    [ebp-0xB0], eax;
			__asm        jmp    _T2f5;

			__asm        jmp    _T2f5;
		_T2c4:
			__asm        push   0xFFFFFFFF;
			__asm        push   0;
			__asm        lea    ecx, [ebp-0xA4];
			__asm        call   basic_string<char>::basic_string<char>;
			__asm        push   eax;
			__asm        lea    ecx, [ebp-0x40];
			__asm        call   basic_string<char>::basic_string<char>;
			__asm        lea    ecx, [ebp-0xA4];
			__asm        call   basic_string<char>::~basic_string<char>;
			__asm        lea    eax, [ebp-0x40];
			__asm        mov    [ebp-0xB0], eax;
			__asm        jmp    _T2f5;
		_T2f5:
			__asm        lea    eax, parseStr.c_str_ptr;
			__asm        cmp    [ebp-0xB0], eax;
			__asm        je     _T38d;

			parseStr.c_str_ptr->basic_string<char>::delete_ref();
			__asm        jmp    _T311;
		_T311:
			__asm        mov    eax, [ebp-0xB0];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
			__asm        je     _T33b;

			__asm        mov    eax, [ebp-0xB0];
			__asm        mov    eax, [eax+4];
			__asm        mov    parseStr.reference, eax;
			__asm        mov    eax, parseStr.reference;
			__asm        inc    dword ptr [eax+0xC];
			__asm        jmp    _T38d;
		_T33b:
			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0xBC], eax;
			__asm        cmp    dword ptr [ebp-0xBC], 0;
			__asm        je     _T386;

			__asm        jmp    _T35d;
		_T35d:
			__asm        mov    eax, [ebp-0xB0];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, [ebp-0xB0];
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0xBC];
			__asm        call   basic_string_ref<char>::basic_string_ref<char>;
			__asm        mov    parseStr.reference, eax;
			__asm        jmp    _T38d;
		_T386:
			parseStr.reference = 0x0;
		_T38d:
			__asm        jmp    _T392;
		_T392:
			__asm        lea    ecx, [ebp-0x40];
			__asm        call   basic_string<char>::delete_ref;
			__asm        cmp    dword ptr [ebp-0x40], 0;
			__asm        je     _T3c8;

			__asm        mov    eax, [ebp-0x40];
			__asm        mov    [ebp-0x90], eax;
			__asm        mov    eax, [ebp-0x90];
			__asm        mov    [ebp-0x94], eax;
			__asm        mov    eax, [ebp-0x94];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
		_T3c8:
			__asm        jmp    _T3cd;
		// LINE 462:
		_T3cd:
			__asm        jmp    _T3d2;
		_T3d2:
			__asm        jmp    _T3d7;
		_T3d7:
			__asm        push   0x597414;
			__asm        call   strlen;
			__asm        add    esp, 4;
			__asm        push   eax;
			__asm        push   0;
			__asm        push   0x597414;
			__asm        lea    ecx, parseStr.c_str_ptr;
			__asm        call   basic_string<char>::find_first_of_str;
			__asm        mov    pos, eax;
		// LINE 464:
		_T3f7:
	}
// LINE 467:
_T3fc:
	__asm        jmp    _T401;
_T401:
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5e8;

	__asm        jmp    _T413;
_T413:
	__asm        jmp    _T418;
_T418:
	__asm        push   0x597418;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x597418;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::find_first_not_of_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T5e8;
// LINE 469:
	index++;
// LINE 470:
	__asm        jmp    _T446;
_T446:
	__asm        jmp    _T44b;
_T44b:
	__asm        push   0x59741C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59741C;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::find_first_of_str;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T473;
_T473:
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T4b8;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4a9;
_T4a9:
	exit(0x1);
	__asm        jmp    _T4b8;
_T4b8:
	__asm        jmp    _T4bd;
_T4bd:
	__asm        mov    eax, parseStr.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T53a;

	__asm        jmp    _T4cf;
_T4cf:
	__asm        mov    eax, parseStr.reference;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T4f4;

	__asm        jmp    _T4e6;
_T4e6:
	__asm        mov    eax, parseStr.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T4fd;
_T4f4:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x80], eax;
_T4fd:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T565;

	__asm        jmp    _T565;
_T53a:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    eax, [ebp-0x48];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T565;
_T565:
	__asm        mov    eax, commands;
	__asm        mov    ecx, commands;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        je     _T599;

	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, commands;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, commands;
	__asm        add    dword ptr [eax+4], 8;
	__asm        jmp    _T5b4;
_T599:
	__asm        jmp    _T59e;
_T59e:
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, commands;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, commands;
	__asm        call   vector<basic_string<char>>::insert_aux;
_T5b4:
	__asm        jmp    _T5b9;
_T5b9:
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T5e3;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5e3:
	__asm        jmp    _T5e8;
// LINE 472:
_T5e8:
	__asm        mov    eax, index;
	__asm        mov    [ebp-0x4C], eax;
	__asm        lea    ecx, parseStr.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    parseStr.c_str_ptr, 0;
	__asm        je     _T618;

	__asm        mov    eax, parseStr.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T618:
	__asm        jmp    _T61d;
_T61d:
	__asm        lea    ecx, subString.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    subString.c_str_ptr, 0;
	__asm        je     _T647;

	__asm        mov    eax, subString.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T647:
	__asm        jmp    _T64c;
_T64c:
	__asm        lea    ecx, str.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    str.c_str_ptr, 0;
	__asm        je     _T676;

	__asm        mov    eax, str.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T676:
	__asm        jmp    _T67b;
_T67b:
	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    __RETURN;
// LINE 473:
__RETURN:
}



// Contribution: 1:000246d0-00024703 Module: 70, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00024710-00024759 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425710
// deque<basic_string<char>>::iterator::iterator



// Contribution: 1:00024760-00024d34 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425760
// vector<basic_string<char>>::push_back



// Contribution: 1:00024d40-00024da8 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425d40
// allocate



// Contribution: 1:00024db0-00024e18 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425db0
// allocate



// Contribution: 1:00024e20-00024ffc Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00425e20
// construct



// Contribution: 1:00025000-00025561 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426000
// deque<basic_string<char>>::allocate_at_end



// Contribution: 1:00025570-000258f7 Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426570
// vector<debug_command *>::insert_aux



// Contribution: 1:00025900-00025fba Module: 70, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00426900
// vector<basic_string<char>>::insert_aux



// Contribution: 2:0000041c-0000041f Module: 70, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for *CDebugWindowusage_text> @ 0x0058f41c
//   00: execute @ 0x004256d0
//   1 entries



// Contribution: 2:00000420-00000423 Module: 70, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for debug_command @ 0x0058f420
//   00: _purecall @ 0x0056cfa0
//   1 entries



// Contribution: 3:00000368-0000041d Module: 70, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597368
char * CDebugWindow::m_className = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059736c
char * CDebugWindowhelp_text = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597370
char * CDebugWindowusage_text = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597374
/*packed*/ class CDebugWindow *gDebugWindow = { 0 /* todo */ };



// Contribution: 3:00000420-00000423 Module: 70, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597420
uint32_t deque<basic_string<char>>::buffer_size = 0;



// Contribution: 3:0002b8d0-0002b917 Module: 70, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c28d0
/*packed*/ struct tagWNDCLASSA CDebugWindow::m_class;

// GLOBAL: COPTER_D 0x005c28f8
static unsigned char ?$S19@?1???0CDebugWindow@@QAE@XZ@4EA;

