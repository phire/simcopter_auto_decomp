// Module: mssnlog.obj
// Source: C:\Copter\source\sparkal\mssnlog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ class MissionLogWindow (forward reference);
// VTABLE: COPTER_D 0x00590708
class MissionLogWindow : public GraphicWindow
{ // packed(0x80 bytes) TI: 0x2748
	enum MissionLogWindowSortType {
		nSortByTimeDate = 0,
		nSortByType = 1,
	};
public:
	void MissionLogWindow(int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~MissionLogWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	int32_t ReadPalette(/*packed*/ struct SparkalColor*);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
protected:
	void SortByTimeDate();
	void SortByType();
	void DrawBackground();
	/*+0x74*/  /*packed*/ class ListBoxWindow *myListBoxWindow;
	/*+0x78*/  /*unpacked*/ class CBackBuffer *myBackgroundBuffer;
	/*+0x7c*/  enum MissionLogWindow::MissionLogWindowSortType nCurrentSort;
};

// Type: int32_t;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: void;

// Type: /*packed*/ class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ struct SparkalColor;
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: char;

// Type: long;

// Type: void * __ptr32;

// Type: /*packed*/ class list<tagLogBase *>::iterator;
class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
{ // packed(0x4 bytes) TI: 0x16d0
protected:
	/*+0x0*/   /*packed*/ struct list<tagLogBase *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<tagLogBase *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<tagLogBase *>::iterator&);
	/*packed*/ struct tagLogBase*& operator*();
	/*packed*/ class list<tagLogBase *>::iterator operator++(int32_t);
	/*packed*/ class list<tagLogBase *>::iterator& operator++();
	/*packed*/ class list<tagLogBase *>::iterator operator--(int32_t);
	/*packed*/ class list<tagLogBase *>::iterator& operator--();
};

// Type: unsigned long;

// Type: /*packed*/ class MessageDisplayManager (forward reference);
// VTABLE: COPTER_D 0x005907d0
class MessageDisplayManager{ // packed(0x54 bytes) TI: 0x2746
public:
	void MessageDisplayManager();
	void ~MessageDisplayManager();
	virtual int32_t Initialize(); // vtable+0x0
	virtual void DisplayCurrentMessages(/*unpacked*/ class CBackBuffer*); // vtable+0x4
	virtual void AddNewMessage(/*packed*/ class basic_string<char>&); // vtable+0x8
	virtual void AddNewMessage(char *); // vtable+0xc
	/*+0x4*/   /*packed*/ class MPoint ptFirstMessage; // 0x8 bytes
	/*+0xc*/   long lMaximumMessageCount;
protected:
	/*+0x10*/  /*packed*/ class basic_string<char> *sMessages;
	/*+0x14*/  /*packed*/ class MTimer timerMessageDisplay; // 0x10 bytes
	/*+0x24*/  /*packed*/ class MFont fontMessages; // 0x1c bytes
	/*+0x40*/  long lVerticalSpaceBetweenMessages;
	/*+0x44*/  unsigned long lDisplayTime;
	/*+0x48*/  long lCurrentDisplayedMessageCount;
	/*+0x4c*/  int32_t bDisplayMessages;
	/*+0x50*/  /*packed*/ struct SparkalColor colorMessage;
};

// Type: uint32_t;

// Type: /*unpacked*/ class CBackBuffer (forward reference);
// CBackBuffer Class implementation not found

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ struct bidirectional_iterator<tagLogBase *,int>;
struct bidirectional_iterator<tagLogBase *,int>{ // packed(0x1 bytes) TI: 0x126f
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:0006aca0-0006d4f0 Module: 40, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0046bca0
void MissionLogWindow::MissionLogWindow(int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T39;
_T39:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590708;
	__asm        mov    eax, SZ_MISSION_LOG_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x44], eax;
// LINE 48:
	__asm        jmp    _Ta8;
_Ta8:
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jne    _Tf3;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Te4;
_Te4:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tf3;
_Tf3:
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T129;

	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2aa;

	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2aa;
_T129:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T204;

	__asm        cmp    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jne    _T17c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16d;
_T16d:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e1;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1dc;
_T1dc:
	__asm        jmp    _T1ea;
_T1e1:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
_T1ea:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1f9;
_T1f9:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T20b;
_T204:
	__asm        mov    dword ptr [ebp-0x14], 0;
_T20b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T297;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T297;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T277;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T277:
	__asm        jmp    _T27c;
_T27c:
	__asm        jmp    _T281;
_T281:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T292;
_T292:
	__asm        jmp    _T297;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T2dd;
_T2aa:
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2dd;

	__asm        jmp    _T2b9;
_T2b9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2dd;
_T2dd:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2ee;
_T2ee:
	__asm        jmp    _T2f3;
// LINE 50:
_T2f3:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::CreateImage;
// LINE 51:
	this->GraphicWindow::SetImageToDrawOnto();
// LINE 52:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046bfb4
void MissionLogWindow::~MissionLogWindow() {

	this-><MissionLogWindow+0x00> = 0x590708;
// LINE 59:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::DestroyImage;
// LINE 60:
	return;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0046bfe3
int32_t MissionLogWindow::Initialize() {
	/*bp-0x4*/   /*packed*/ struct SparkalColor tempSparkalColor;
	/*bp-0x8*/   int32_t nFullStringID;
	/*bp-0x10*/  /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x14*/  /*packed*/ class ButtonWindow *tempButtonWindow;

// LINE 68:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sText.reference = 0x0;
_T6d:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T79;
// LINE 71:
_T79:
	this->GraphicWindow::Initialize();
// LINE 75:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tf0;

	__asm        jmp    _Ta3;
_Ta3:
	__asm        mov    dword ptr [ebp-0x28], 0x50;
	__asm        mov    dword ptr [ebp-0x24], 0x17C;
	__asm        mov    dword ptr [ebp-0x20], 0x51;
	__asm        mov    dword ptr [ebp-0x1C], 0x17D;
	__asm        jmp    _Tc4;
_Tc4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_MISSION_LOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _Tf7;
_Tf0:
	tempButtonWindow = 0x0;
// LINE 76:
_Tf7:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x212);
// LINE 77:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1080], eax;
	__asm        cmp    dword ptr [ebp-0x1080], 0;
	__asm        jne    _T1b6;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1080], eax;
	__asm        jmp    _T168;
_T168:
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T18c;
_T18c:
	__asm        jmp    _T191;
_T191:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1b1;
_T1b1:
	__asm        jmp    _T306;
_T1b6:
	__asm        jmp    _T1bb;
_T1bb:
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0xFFFFFFFF;
	__asm        jne    _T215;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1090], eax;
	__asm        mov    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T206;
_T206:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T215;
_T215:
	__asm        jmp    _T21a;
_T21a:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T24b;

	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     _T2ac;

	__asm        jmp    _T239;
_T239:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1094];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2ac;
_T24b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1088], eax;
	__asm        cmp    dword ptr [ebp-0x1088], 0;
	__asm        je     _T28c;

	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1088];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1084], eax;
	__asm        jmp    _T296;
_T28c:
	__asm        mov    dword ptr [ebp-0x1084], 0;
_T296:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1084];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T2eb;
_T2ac:
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     _T2eb;

	__asm        jmp    _T2be;
_T2be:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108C], eax;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2eb;
_T2eb:
	__asm        mov    eax, [ebp-0x1094];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2fc;
_T2fc:
	__asm        jmp    _T301;
_T301:
	__asm        jmp    _T306;
// LINE 78:
_T306:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 79:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 83:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T38c;

	__asm        jmp    _T33f;
_T33f:
	__asm        mov    dword ptr [ebp-0x3C], 0x118;
	__asm        mov    dword ptr [ebp-0x38], 0x17C;
	__asm        mov    dword ptr [ebp-0x34], 0x119;
	__asm        mov    dword ptr [ebp-0x30], 0x17D;
	__asm        jmp    _T360;
_T360:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_MISSION_LOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T393;
_T38c:
	tempButtonWindow = 0x0;
// LINE 84:
_T393:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x213);
// LINE 85:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2098], eax;
	__asm        cmp    dword ptr [ebp-0x2098], 0;
	__asm        jne    _T452;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2098], eax;
	__asm        jmp    _T404;
_T404:
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T428;
_T428:
	__asm        jmp    _T42d;
_T42d:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T44d;
_T44d:
	__asm        jmp    _T480;
_T452:
	__asm        jmp    _T457;
_T457:
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T47b;
_T47b:
	__asm        jmp    _T480;
// LINE 86:
_T480:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 87:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 91:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T506;

	__asm        jmp    _T4b9;
_T4b9:
	__asm        mov    dword ptr [ebp-0x50], 0x1E0;
	__asm        mov    dword ptr [ebp-0x4C], 0x17C;
	__asm        mov    dword ptr [ebp-0x48], 0x1E1;
	__asm        mov    dword ptr [ebp-0x44], 0x17D;
	__asm        jmp    _T4da;
_T4da:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_MISSION_LOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T50d;
_T506:
	tempButtonWindow = 0x0;
// LINE 92:
_T50d:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x214);
// LINE 93:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x309C], eax;
	__asm        cmp    dword ptr [ebp-0x309C], 0;
	__asm        jne    _T5cc;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x309C], eax;
	__asm        jmp    _T57e;
_T57e:
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T5a2;
_T5a2:
	__asm        jmp    _T5a7;
_T5a7:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T5c7;
_T5c7:
	__asm        jmp    _T71c;
_T5cc:
	__asm        jmp    _T5d1;
_T5d1:
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30B0], eax;
	__asm        cmp    dword ptr [ebp-0x30B0], 0xFFFFFFFF;
	__asm        jne    _T62b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30AC], eax;
	__asm        mov    eax, [ebp-0x30AC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T61c;
_T61c:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T62b;
_T62b:
	__asm        jmp    _T630;
_T630:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T661;

	__asm        cmp    dword ptr [ebp-0x30B0], 0;
	__asm        je     _T6c2;

	__asm        jmp    _T64f;
_T64f:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x30B0];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T6c2;
_T661:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30A4], eax;
	__asm        cmp    dword ptr [ebp-0x30A4], 0;
	__asm        je     _T6a2;

	__asm        mov    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30A4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x30A0], eax;
	__asm        jmp    _T6ac;
_T6a2:
	__asm        mov    dword ptr [ebp-0x30A0], 0;
_T6ac:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x30A0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T701;
_T6c2:
	__asm        cmp    dword ptr [ebp-0x30B0], 0;
	__asm        je     _T701;

	__asm        jmp    _T6d4;
_T6d4:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30A8], eax;
	__asm        mov    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30A8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T701;
_T701:
	__asm        mov    eax, [ebp-0x30B0];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T712;
_T712:
	__asm        jmp    _T717;
_T717:
	__asm        jmp    _T71c;
// LINE 94:
_T71c:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 95:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 97:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T7a2;

	__asm        jmp    _T755;
_T755:
	__asm        mov    dword ptr [ebp-0x64], 0x42;
	__asm        mov    dword ptr [ebp-0x60], 0x54;
	__asm        mov    dword ptr [ebp-0x5C], 0x250;
	__asm        mov    dword ptr [ebp-0x58], 0x172;
	__asm        jmp    _T776;
_T776:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   ListBoxWindow::ListBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T7af;
_T7a2:
	this->myListBoxWindow = 0x0;
// LINE 98:
_T7af:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 99:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x128];
// LINE 100:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x28];
// LINE 101:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x11C];
// LINE 102:
	__asm        jmp    _T820;
// LINE 103:
_T820:
	tempSparkalColor.Blue = 0x0;
	tempSparkalColor.Green = tempSparkalColor.Blue;
	tempSparkalColor.Red = tempSparkalColor.Green;
// LINE 104:
	__asm        lea    eax, tempSparkalColor.Blue;
	__asm        push   eax;
	__asm        lea    eax, tempSparkalColor.Blue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x124];
// LINE 105:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD8];
// LINE 106:
	__asm        mov    eax, SZ_MISSION_LOG_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x12C];
// LINE 108:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByTimeDate;
// LINE 110:
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T8ee;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T8ee;

	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T8d8;
_T8d8:
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T8e9;
_T8e9:
	__asm        jmp    _T8ee;
_T8ee:
	__asm        jmp    _T8f3;
_T8f3:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T915;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T915:
	__asm        jmp    _T91a;
_T91a:
	__asm        mov    eax, [ebp-0x68];
	__asm        jmp    __RETURN;
// LINE 111:
__RETURN:
}

// FUNCTION: COPTER_D 0x0046c90a
int32_t MissionLogWindow::ReadPalette(/*packed*/ struct SparkalColor *pColorTable) {
// LINE 119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    _T6c;
_T6c:
	__asm        jmp    _T71;
_T71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    _Tde;
_Tde:
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
_T134:
_T136:
	return (CBackBuffer::GetPaletteFromImage(pColorTable, this-><MissionLogWindow+0x64>) != 0x0);
// LINE 120:
}

// FUNCTION: COPTER_D 0x0046ca4c
int32_t MissionLogWindow::CreateImage(int32_t __formal) {
	/*bp-0x104*/ char szBackgroundBufferPath[260]; // 0x104 bytes

// LINE 129:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 131:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T95;
// LINE 132:
	GetPathForFile(szBackgroundBufferPath[0], SZ_MISSION_LOG_WINDOW_BACKGROUND_IMAGE_FILE_NAME, 0x0, 0x6);
// LINE 133:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T88;

	__asm        lea    eax, szBackgroundBufferPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T95;
_T88:
	this->myBackgroundBuffer = 0x0;
// LINE 135:
_T95:
	return this-><MissionLogWindow+0x40>;
// LINE 136:
}

// FUNCTION: COPTER_D 0x0046caf6
void MissionLogWindow::DestroyImage() {
// LINE 143:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T5a;
// LINE 144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T4b;
_T4b:
	__asm        jmp    _T50;
// LINE 145:
_T50:
	this->myBackgroundBuffer = 0x0;
// LINE 147:
_T5a:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 148:
	return;
}

// FUNCTION: COPTER_D 0x0046cb62
int32_t MissionLogWindow::ComposeSelf() {
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 161:
	return 0x0;
// LINE 164:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     _T7e;
// LINE 165:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xBC];
// LINE 167:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T70;
// LINE 168:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::DrawBackground;
// LINE 169:
_T70:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 171:
_T7e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _Td3;
// LINE 173:
	__asm        jmp    _T90;
_T90:
	__asm        jmp    _T95;
_T95:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 175:
_Td3:
	return 0x1;
// LINE 176:
}

// FUNCTION: COPTER_D 0x0046cc44
void MissionLogWindow::DrawBackground() {
	/*bp-0x4*/   long x;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   long y;

// LINE 192:
	i = 0x0;
	x = 0x42;
	y = 0x50;
	__asm        jmp    _T29;
_T26:
	i++;
_T29:
	__asm        cmp    i, 0x15;
	__asm        jge    _T67;
// LINE 193:
	__asm        push   0x122;
	__asm        push   0x18;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xC];
// LINE 194:
	x += 0x18;
// LINE 195:
	__asm        jmp    _T26;
// LINE 196:
_T67:
	return;
}

// FUNCTION: COPTER_D 0x0046ccb5
int32_t MissionLogWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	/*bp-0x4*/   long lMyMessage;

// LINE 206:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T30;
// LINE 207:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T2b;
// LINE 208:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByTimeDate;
// LINE 210:
_T2b:
	__asm        jmp    _T7f;
_T30:
	__asm        cmp    lWindowID, 2;
	__asm        jne    _T54;
// LINE 211:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 1;
	__asm        je     _T4f;
// LINE 212:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByType;
// LINE 214:
_T4f:
	__asm        jmp    _T7f;
_T54:
	__asm        cmp    lWindowID, 3;
	__asm        jne    _T7f;
// LINE 215:
	__asm        lea    eax, lMyMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 217:
_T7f:
	return 0x1;
// LINE 218:
}

// FUNCTION: COPTER_D 0x0046cd45
void MissionLogWindow::SortByTimeDate() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sCurrentText; // 0x8 bytes
	/*bp-0xc*/   /*packed*/ class list<tagLogBase *>::iterator iterator;

// LINE 225:
	__asm        jmp    _T11;
// LINE 226:
_T11:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T61;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T56;
_T56:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    _T68;
_T61:
	sCurrentText.reference = 0x0;
_T68:
	sCurrentText.c_str_ptr = 0x0;
	__asm        jmp    _T74;
// LINE 228:
_T74:
	0x606e78->LogManager::SortLogEntriesByDate();
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
	__asm        mov    eax, gLogManager.myLogBasePtrList;
	__asm        mov    [ebp-0x30], eax;
// LINE 230:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Taf;
_Taf:
	__asm        jmp    _Tb4;
_Tb4:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    iterator.node, eax;
// LINE 23:
_Tba:
	__asm        mov    eax, gLogManager.myLogBasePtrList;
	__asm        mov    [ebp-0x20], eax;
// LINE 231:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Td5;
_Td5:
	__asm        jmp    _Tda;
_Tda:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _Tf0;

	__asm        jmp    _T104;

	__asm        jmp    _Tf0;
_Tf0:
	__asm        jmp    _Tff;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T104;
_Tff:
	__asm        jmp    _T109;
_T104:
	__asm        jmp    _T16f;
_T109:
	__asm        jmp    _T118;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T16f;
// LINE 232:
_T118:
	__asm        jmp    _T11d;
_T11d:
	__asm        push   1;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 233:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
// LINE 234:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16a;
// LINE 235:
_T16a:
	__asm        jmp    _Tba;
// LINE 236:
_T16f:
	this->nCurrentSort = 0x0;
// LINE 237:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1fc;

	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T1fc;

	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1dc;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
_T1dc:
	__asm        jmp    _T1e1;
_T1e1:
	__asm        jmp    _T1e6;
_T1e6:
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1f7;
_T1f7:
	__asm        jmp    _T1fc;
_T1fc:
	__asm        jmp    _T201;
_T201:
	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     _T223;

	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T223:
	__asm        jmp    _T228;
_T228:
	return;
}

// FUNCTION: COPTER_D 0x0046cf77
void MissionLogWindow::SortByType() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sCurrentText; // 0x8 bytes
	/*bp-0xc*/   /*packed*/ class list<tagLogBase *>::iterator iterator;
	/*bp-0x10*/  unsigned long nCurrentMissionID;

// LINE 245:
	__asm        jmp    _T17;
// LINE 246:
_T17:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T67;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5c;
_T5c:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    _T6e;
_T67:
	sCurrentText.reference = 0x0;
_T6e:
	sCurrentText.c_str_ptr = 0x0;
	__asm        jmp    _T7a;
// LINE 249:
_T7a:
	0x606e78->LogManager::SortLogEntriesByType();
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
	__asm        mov    eax, gLogManager.myLogBasePtrList;
	__asm        mov    [ebp-0x3C], eax;
// LINE 251:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 252:
	__asm        jmp    _Tcb;
_Tcb:
	nCurrentMissionID = iterator.node->data->nMissionID;
// LINE 23:
_Td7:
	__asm        mov    eax, gLogManager.myLogBasePtrList;
	__asm        mov    [ebp-0x2C], eax;
// LINE 253:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tf2;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T10d;

	__asm        jmp    _T121;

	__asm        jmp    _T10d;
_T10d:
	__asm        jmp    _T11c;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T121;
_T11c:
	__asm        jmp    _T126;
_T121:
	__asm        jmp    _T34b;
_T126:
	__asm        jmp    _T135;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T34b;
// LINE 254:
_T135:
	__asm        jmp    _T13a;
_T13a:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nCurrentMissionID;
	__asm        cmp    [eax+8], ecx;
	__asm        je     _T2ee;
// LINE 255:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T1fb;

	__asm        push   0x599494;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1d8;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        push   0x599494;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    _T1e1;
_T1d8:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax], 0;
_T1e1:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1f0;
_T1f0:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T202;
_T1fb:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T202:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T20e;
_T20e:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
	__asm        mov    eax, [ebp-0x1C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2b1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T2b1;

	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T291;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0;
_T291:
	__asm        jmp    _T296;
_T296:
	__asm        jmp    _T29b;
_T29b:
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2ac;
_T2ac:
	__asm        jmp    _T2b1;
_T2b1:
	__asm        jmp    _T2b6;
_T2b6:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T2d8;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2d8:
	__asm        jmp    _T2dd;
// LINE 256:
_T2dd:
	__asm        jmp    _T2e2;
_T2e2:
	nCurrentMissionID = iterator.node->data->nMissionID;
// LINE 258:
_T2ee:
	__asm        jmp    _T2f3;
_T2f3:
	__asm        push   1;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 259:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
// LINE 260:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T33b;
_T33b:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T346;
// LINE 261:
_T346:
	__asm        jmp    _Td7;
// LINE 262:
_T34b:
	this->nCurrentSort = 0x1;
// LINE 263:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3db;

	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T3db;

	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3bb;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax], 0;
_T3bb:
	__asm        jmp    _T3c0;
_T3c0:
	__asm        jmp    _T3c5;
_T3c5:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3d6;
_T3d6:
	__asm        jmp    _T3db;
_T3db:
	__asm        jmp    _T3e0;
_T3e0:
	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     _T402;

	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T402:
	__asm        jmp    _T407;
_T407:
	return;
}

// FUNCTION: COPTER_D 0x0046d388
void MessageDisplayManager::MessageDisplayManager() {

	__asm        jmp    _T11;
_T11:
	this->ptFirstMessage.x = 0x14;
	this->ptFirstMessage.y = 0x14;
	__asm        jmp    _T2a;
_T2a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T91;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
	__asm        jmp    _T91;
_T91:
	__asm        jmp    _T96;
_T96:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::MFont;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0x1388;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x50], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x51], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x52], 0xFF;
	__asm        jmp    _Td9;
_Td9:
	this-><vftable> = 0x5907d0;
// LINE 292:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::SetFontCharacteristics;
// LINE 293:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    ecx, 0x24;
	__asm        call   dword ptr [eax];
// LINE 294:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046d496
void MessageDisplayManager::~MessageDisplayManager() {

	this-><vftable> = 0x5907d0;
// LINE 300:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T162;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T158;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax-4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x28], eax;
_T53:
	__asm        dec    dword ptr [ebp-0x24];
	__asm        js     _T6d;

	__asm        sub    dword ptr [ebp-0x28], 8;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T53;
_T6d:
	__asm        jmp    _T72;
_T72:
	__asm        mov    eax, [ebp-4];
	__asm        sub    eax, 4;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T14e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T112;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T112;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tf2;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        jmp    _Tfc;
_Tfc:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T10d;
_T10d:
	__asm        jmp    _T112;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T13d;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T14e:
	__asm        jmp    _T153;
_T153:
	__asm        jmp    _T158;
// LINE 302:
_T158:
	this->sMessages = 0x0;
// LINE 304:
_T162:
	__asm        jmp    _T167;
_T167:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::~MFont;
	__asm        jmp    __RETURN;
__RETURN:
}

// FUNCTION: COPTER_D 0x0046d612
int32_t MessageDisplayManager::Initialize() {
// LINE 310:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jle    _T1d7;
// LINE 311:
// Block start:
	/*bp-0x4*/   uint32_t $S71;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T15c;
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T15c;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax-4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x38], eax;
_T57:
	__asm        dec    dword ptr [ebp-0x34];
	__asm        js     _T71;

	__asm        sub    dword ptr [ebp-0x38], 8;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T57;
_T71:
	__asm        jmp    _T76;
_T76:
	__asm        mov    eax, [ebp-8];
	__asm        sub    eax, 4;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T152;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T116;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T116;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tf6;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_Tf6:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        jmp    _T100;
_T100:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T111;
_T111:
	__asm        jmp    _T116;
_T116:
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T141;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T141:
	__asm        jmp    _T146;
_T146:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T152:
	__asm        jmp    _T157;
_T157:
	__asm        jmp    _T15c;
// LINE 313:
_T15c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    $S71, eax;
	__asm        mov    eax, $S71;
	__asm        shl    eax, 3;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1cd;

	__asm        mov    eax, $S71;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x18], eax;
_T19d:
	__asm        dec    dword ptr [ebp-0x14];
	__asm        js     _T1b7;

	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    _T19d;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T1d7;
_T1cd:
	this->sMessages = 0x0;
// LINE 315:
// Block end:
_T1d7:
	this->lCurrentDisplayedMessageCount = 0x0;
// LINE 316:
	return 0x1;
// LINE 317:
}

// FUNCTION: COPTER_D 0x0046d802
void MessageDisplayManager::DisplayCurrentMessages(/*unpacked*/ class CBackBuffer *bufferDestination) {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrentMessage; // 0x10 bytes
	/*bp-0x14*/  int32_t i;

// LINE 324:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
// LINE 327:
_T16:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     _T28;
// LINE 328:
	return;
// LINE 330:
_T28:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T36;
_T36:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _Tb9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    _T63;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Ta7;

	__asm        jmp    _Ta7;
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T90;

	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Ta7;

	__asm        jmp    _Ta7;
_T90:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Ta7;
_Ta7:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    [ebp-0x2C], eax;
_Tb9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T100;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     _T100;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    _T3ec;

	__asm        jmp    _T123;
_T100:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    _T3ec;

	__asm        jmp    _T123;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    _T3ec;
// LINE 331:
_T123:
	i = 0x0;
	__asm        jmp    _T132;
_T12f:
	i++;
_T132:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    _T32d;
// LINE 332:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax*8+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    [ebp-0x6C], eax;
	__asm        je     _T323;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1fc;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T1fc;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1dc;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T1dc:
	__asm        jmp    _T1e1;
_T1e1:
	__asm        jmp    _T1e6;
_T1e6:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1f7;
_T1f7:
	__asm        jmp    _T1fc;
_T1fc:
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T230;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T323;
_T230:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T319;

	__asm        jmp    _T24c;
_T24c:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2f3;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T293;
_T293:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2b8;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T2c4;

	__asm        jmp    _T2c4;
_T2b8:
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2ee;
_T2ee:
	__asm        jmp    _T2fc;
_T2f3:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
_T2fc:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T30b;
_T30b:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T323;
_T319:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
_T323:
	__asm        jmp    _T328;
_T328:
	__asm        jmp    _T12f;
// LINE 333:
_T32d:
	this->lCurrentDisplayedMessageCount--;
// LINE 334:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     _T345;
// LINE 335:
	return;
// LINE 336:
_T345:
	this->timerMessageDisplay.lTotalElapsedTime = 0x0;
	this->timerMessageDisplay.lStartTime = 0x0;
	__asm        jmp    _T35e;
_T35e:
	__asm        jmp    _T363;
_T363:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T375;

	__asm        jmp    _T3e7;
_T375:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    _T398;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T3e2;

	__asm        jmp    _T3e2;
_T398:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T3c8;

	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T3e2;

	__asm        jmp    _T3e2;
_T3c8:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T3e2;
_T3e2:
	__asm        jmp    _T3e7;
_T3e7:
	__asm        jmp    _T3ec;
// LINE 339:
_T3ec:
	rectCurrentMessage.left = this->ptFirstMessage.x;
// LINE 340:
	rectCurrentMessage.top = this->ptFirstMessage.y;
// LINE 341:
	rectCurrentMessage.right = 0x3e8;
// LINE 342:
	rectCurrentMessage.bottom = 0x3e8;
// LINE 343:
	bufferDestination-><CBackBuffer+0x38:4> = reinterpret_cast<uint32_t>(this->colorMessage.Blue);
	__asm        jmp    _T41d;
// LINE 345:
_T41d:
	i = 0x0;
	__asm        jmp    _T42c;
_T429:
	i++;
_T42c:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x48], ecx;
	__asm        jle    _T4bf;
// LINE 347:
	__asm        jmp    _T440;
_T440:
	__asm        jmp    _T445;
_T445:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T478;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T484;

	__asm        jmp    _T484;
_T478:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T484;
_T484:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentMessage.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, bufferDestination;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, bufferDestination;
	__asm        call   dword ptr [eax+0x48];
// LINE 348:
	rectCurrentMessage.top += this->lVerticalSpaceBetweenMessages;
// LINE 349:
	__asm        jmp    _T429;
// LINE 350:
_T4bf:
	return;
}

// FUNCTION: COPTER_D 0x0046dccd
void MessageDisplayManager::AddNewMessage(char * szNewMessage) {
	/*bp-0x4*/   int32_t i;

// LINE 359:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jg     _T27;
// LINE 360:
	return;
// LINE 362:
_T27:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0x48], ecx;
	__asm        jl     _T369;
// LINE 363:
	i = 0x0;
	__asm        jmp    _T4e;
_T4b:
	i++;
_T4e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    _T178;
// LINE 364:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax*8+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        cmp    [ebp-0x84], eax;
	__asm        je     _T16e;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Te5;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _Te5;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _Te5;
_Te5:
	__asm        jmp    _Tea;
_Tea:
	__asm        jmp    _Tef;
_Tef:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T11f;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T16e;
_T11f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T161;

	__asm        jmp    _T13b;
_T13b:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T16e;
_T161:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+4], 0;
_T16e:
	__asm        jmp    _T173;
_T173:
	__asm        jmp    _T4b;
_T178:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x38], eax;
// LINE 365:
	__asm        jmp    _T18f;
_T18f:
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0xFFFFFFFF;
	__asm        jne    _T1da;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1cb;
_T1cb:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1da;
_T1da:
	__asm        jmp    _T1df;
_T1df:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T210;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T25c;

	__asm        jmp    _T1fe;
_T1fe:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T25c;
_T210:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T23f;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T246;
_T23f:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T246:
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T28f;
_T25c:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T28f;

	__asm        jmp    _T26b;
_T26b:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T28f;
_T28f:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2a0;
_T2a0:
	__asm        jmp    _T2a5;
// LINE 366:
_T2a5:
	this->timerMessageDisplay.lTotalElapsedTime = 0x0;
	this->timerMessageDisplay.lStartTime = 0x0;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2c9;
_T2c9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T2de;

	__asm        jmp    _T35f;
_T2de:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    _T307;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T35a;

	__asm        jmp    _T35a;
_T307:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T33d;

	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T35a;

	__asm        jmp    _T35a;
_T33d:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T35a;
_T35a:
	__asm        jmp    _T35f;
_T35f:
	__asm        jmp    _T364;
// LINE 368:
_T364:
	__asm        jmp    _T6f1;
_T369:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     _T571;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x50], eax;
// LINE 369:
	__asm        jmp    _T38a;
_T38a:
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0xFFFFFFFF;
	__asm        jne    _T3d5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3c6;
_T3c6:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3d5;
_T3d5:
	__asm        jmp    _T3da;
_T3da:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T40b;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T457;

	__asm        jmp    _T3f9;
_T3f9:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T457;
_T40b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T43a;

	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T441;
_T43a:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T441:
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T48a;
_T457:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T48a;

	__asm        jmp    _T466;
_T466:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48a;
_T48a:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T49b;
_T49b:
	__asm        jmp    _T4a0;
// LINE 370:
_T4a0:
	this->lCurrentDisplayedMessageCount = 0x1;
// LINE 371:
	this->timerMessageDisplay.lTotalElapsedTime = 0x0;
	this->timerMessageDisplay.lStartTime = 0x0;
	__asm        jmp    _T4cc;
_T4cc:
	__asm        jmp    _T4d1;
_T4d1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T4e6;

	__asm        jmp    _T567;
_T4e6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    _T50f;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T562;

	__asm        jmp    _T562;
_T50f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T545;

	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T562;

	__asm        jmp    _T562;
_T545:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    _T562;
_T562:
	__asm        jmp    _T567;
_T567:
	__asm        jmp    _T56c;
// LINE 373:
_T56c:
	__asm        jmp    _T6f1;
// LINE 374:
_T571:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x48];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-8];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T59d;
_T59d:
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0xFFFFFFFF;
	__asm        jne    _T5e8;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T5d9;
_T5d9:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T5e8;
_T5e8:
	__asm        jmp    _T5ed;
_T5ed:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T61e;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T6a8;

	__asm        jmp    _T60c;
_T60c:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T6a8;
_T61e:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T64d;

	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T654;
_T64d:
	__asm        mov    dword ptr [ebp-0x54], 0;
_T654:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T695;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T695;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T695;
_T695:
	__asm        jmp    _T69a;
_T69a:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6db;
_T6a8:
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T6db;

	__asm        jmp    _T6b7;
_T6b7:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T6db;
_T6db:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6ec;
_T6ec:
	__asm        jmp    _T6f1;
// LINE 377:
_T6f1:
	return;
}

// FUNCTION: COPTER_D 0x0046e3ca
void MessageDisplayManager::AddNewMessage(/*packed*/ class basic_string<char>& sNewMessage) {
// LINE 383:
	__asm        mov    eax, sNewMessage;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T32;

	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T32:
	__asm        jmp    _T37;
_T37:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, sNewMessage;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T54;
_T54:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tcc;

	__asm        jmp    _T69;
_T69:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T93;

	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T9f;

	__asm        jmp    _T9f;
_T93:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tcc;
_Tcc:
	__asm        jmp    _Td1;
_Td1:
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    _Tda;
_Tda:
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te5;
_Te5:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sNewMessage;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    _T105;
_T105:
	__asm        jmp    _T10a;
_T10a:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 384:
	return;
}



// Contribution: 1:0006d500-0006d538 Module: 40, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0046e500
// MissionLogWindow::`scalar deleting destructor'



// Contribution: 1:0006d540-0006d681 Module: 40, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0046e540
// basic_string<char>::`vector deleting destructor'



// Contribution: 2:00001708-000017cb Module: 40, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MissionLogWindow @ 0x00590708
//   00: MissionLogWindow::DoMessage @ 0x0046ccb5
//   01: MissionLogWindow::Initialize @ 0x0046bfe3
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: MissionLogWindow::CreateImage @ 0x0046ca4c
//   05: MissionLogWindow::DestroyImage @ 0x0046caf6
//   06: MissionLogWindow::ComposeSelf @ 0x0046cb62
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: MissionLogWindow::`scalar deleting destructor' @ 0x0046e500
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:000017d0-000017df Module: 40, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MessageDisplayManager @ 0x005907d0
//   00: MessageDisplayManager::Initialize @ 0x0046d612
//   01: MessageDisplayManager::DisplayCurrentMessages @ 0x0046d802
//   02: MessageDisplayManager::AddNewMessage @ 0x0046e3ca
//   03: MessageDisplayManager::AddNewMessage @ 0x0046dccd
//   4 entries



// Contribution: 3:00002448-00002494 Module: 40, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599448
char * SZ_MISSION_LOG_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059944c
char * SZ_MISSION_LOG_WINDOW_BUTTON_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599450
char * SZ_MISSION_LOG_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599454
char * SZ_MISSION_LOG_WINDOW_BACKGROUND_IMAGE_FILE_NAME = { 0 /* todo */ };

