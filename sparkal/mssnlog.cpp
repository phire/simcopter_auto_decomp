// Module: mssnlog.obj
// Source: C:\Copter\source\sparkal\mssnlog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class MissionLogWindow (forward reference);
class MissionLogWindow : public GraphicWindow
{
		enum MissionLogWindowSortType {
			nSortByTimeDate = 0,
			nSortByType = 1,
		};
public:
	void MissionLogWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~MissionLogWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	int32_t ReadPalette(struct SparkalColor*);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
protected:
	void SortByTimeDate();
	void SortByType();
	void DrawBackground();
	class ListBoxWindow* myListBoxWindow;
	class CBackBuffer* myBackgroundBuffer;
	enum MissionLogWindow::MissionLogWindowSortType nCurrentSort;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: void;

// Type: class ButtonWindow (forward reference);
class ButtonWindow : public GraphicWindow
{
		enum ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: struct SparkalColor;
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: char[260];

// Type: long;

// Type: void * __ptr32;

// Type: class list<tagLogBase *>::iterator;
class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
{
protected:
	struct list<tagLogBase *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<tagLogBase *>::list_node*);
public:
	int32_t operator==(const class list<tagLogBase *>::iterator&);
	struct tagLogBase*& operator*();
	class list<tagLogBase *>::iterator operator++(int32_t);
	class list<tagLogBase *>::iterator& operator++();
	class list<tagLogBase *>::iterator operator--(int32_t);
	class list<tagLogBase *>::iterator& operator--();
};

// Type: unsigned long;

// Type: class MessageDisplayManager (forward reference);
class MessageDisplayManager{
public:
	void MessageDisplayManager();
	void ~MessageDisplayManager();
	// vtable: 0
	intro int32_t Initialize();
	// vtable: 4
	intro void DisplayCurrentMessages(class CBackBuffer*);
	// vtable: 8
	intro void AddNewMessage(class basic_string<char>&);
	// vtable: 12
	intro void AddNewMessage(char *);
	class MPoint ptFirstMessage;
	long lMaximumMessageCount;
protected:
	class basic_string<char>* sMessages;
	class MTimer timerMessageDisplay;
	class MFont fontMessages;
	long lVerticalSpaceBetweenMessages;
	unsigned long lDisplayTime;
	long lCurrentDisplayedMessageCount;
	int32_t bDisplayMessages;
	struct SparkalColor colorMessage;
};

// Type: uint32_t;

// Type: class CBackBuffer (forward reference);

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char *;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: struct bidirectional_iterator<tagLogBase *,int>;
class bidirectional_iterator<tagLogBase *,int>{
};

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:0006aca0-0006d4f0 Module: 40, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0046bca0
void MissionLogWindow::MissionLogWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        jmp    near ptr 0x0046BCB1;
	__asm        jmp    near ptr 0x0046BCB6;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0046BCD9;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0046BCF8;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590708;
	__asm        mov    eax, ds:[0x599448];
	__asm        mov    [ebp-0x44], eax;
// LINE 48:
	__asm        jmp    near ptr 0x0046BD48;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046BD93;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046BD84;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046BD93;
	__asm        jmp    near ptr 0x0046BD98;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046BDC9;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046BF4A;
	__asm        jmp    near ptr 0x0046BDB7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046BF4A;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0046BEA4;
	__asm        cmp    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046BE1C;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046BE0D;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046BE1C;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046BE81;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046BE7C;
	__asm        jmp    near ptr 0x0046BE8A;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046BE99;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046BEAB;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046BF37;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0046BF37;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046BF17;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046BF1C;
	__asm        jmp    near ptr 0x0046BF21;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046BF32;
	__asm        jmp    near ptr 0x0046BF37;
	__asm        jmp    near ptr 0x0046BF3C;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x0046BF7D;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046BF7D;
	__asm        jmp    near ptr 0x0046BF59;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046BF7D;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046BF8E;
	__asm        jmp    near ptr 0x0046BF93;
// LINE 50:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::CreateImage;
// LINE 51:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 52:
	__asm        jmp    near ptr 0x0046BFAA;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046bfb4
void MissionLogWindow::~MissionLogWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590708;
// LINE 59:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::DestroyImage;
// LINE 60:
	__asm        jmp    near ptr 0x0046BFD6;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0046bfe3
int32_t MissionLogWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;
	struct SparkalColor tempSparkalColor;

// LINE 68:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x0046C049;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046C03E;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0046C050;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0046C05C;
// LINE 71:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 75:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0046C0D3;
	__asm        jmp    near ptr 0x0046C086;
	__asm        mov    dword ptr [ebp-0x28], 0x50;
	__asm        mov    dword ptr [ebp-0x24], 0x17C;
	__asm        mov    dword ptr [ebp-0x20], 0x51;
	__asm        mov    dword ptr [ebp-0x1C], 0x17D;
	__asm        jmp    near ptr 0x0046C0A7;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59944C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0046C0DA;
	__asm        mov    tempButtonWindow, 0;
// LINE 76:
	__asm        push   0;
	__asm        push   0x212;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 77:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1080], eax;
	__asm        cmp    dword ptr [ebp-0x1080], 0;
	__asm        jne    near ptr 0x0046C199;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1080], eax;
	__asm        jmp    near ptr 0x0046C14B;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0046C16F;
	__asm        jmp    near ptr 0x0046C174;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0046C194;
	__asm        jmp    near ptr 0x0046C2E9;
	__asm        jmp    near ptr 0x0046C19E;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046C1F8;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1090], eax;
	__asm        mov    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C1E9;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C1F8;
	__asm        jmp    near ptr 0x0046C1FD;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046C22E;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     near ptr 0x0046C28F;
	__asm        jmp    near ptr 0x0046C21C;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1094];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046C28F;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1088], eax;
	__asm        cmp    dword ptr [ebp-0x1088], 0;
	__asm        je     near ptr 0x0046C26F;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1088];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1084], eax;
	__asm        jmp    near ptr 0x0046C279;
	__asm        mov    dword ptr [ebp-0x1084], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1084];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0046C2CE;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     near ptr 0x0046C2CE;
	__asm        jmp    near ptr 0x0046C2A1;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108C], eax;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x107C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046C2CE;
	__asm        mov    eax, [ebp-0x1094];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046C2DF;
	__asm        jmp    near ptr 0x0046C2E4;
	__asm        jmp    near ptr 0x0046C2E9;
// LINE 78:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 79:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 83:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0046C36F;
	__asm        jmp    near ptr 0x0046C322;
	__asm        mov    dword ptr [ebp-0x3C], 0x118;
	__asm        mov    dword ptr [ebp-0x38], 0x17C;
	__asm        mov    dword ptr [ebp-0x34], 0x119;
	__asm        mov    dword ptr [ebp-0x30], 0x17D;
	__asm        jmp    near ptr 0x0046C343;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59944C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0046C376;
	__asm        mov    tempButtonWindow, 0;
// LINE 84:
	__asm        push   0;
	__asm        push   0x213;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 85:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2098], eax;
	__asm        cmp    dword ptr [ebp-0x2098], 0;
	__asm        jne    near ptr 0x0046C435;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2098], eax;
	__asm        jmp    near ptr 0x0046C3E7;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0046C40B;
	__asm        jmp    near ptr 0x0046C410;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0046C430;
	__asm        jmp    near ptr 0x0046C463;
	__asm        jmp    near ptr 0x0046C43A;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0046C45E;
	__asm        jmp    near ptr 0x0046C463;
// LINE 86:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 87:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 91:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046C4E9;
	__asm        jmp    near ptr 0x0046C49C;
	__asm        mov    dword ptr [ebp-0x50], 0x1E0;
	__asm        mov    dword ptr [ebp-0x4C], 0x17C;
	__asm        mov    dword ptr [ebp-0x48], 0x1E1;
	__asm        mov    dword ptr [ebp-0x44], 0x17D;
	__asm        jmp    near ptr 0x0046C4BD;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59944C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0046C4F0;
	__asm        mov    tempButtonWindow, 0;
// LINE 92:
	__asm        push   0;
	__asm        push   0x214;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 93:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x309C], eax;
	__asm        cmp    dword ptr [ebp-0x309C], 0;
	__asm        jne    near ptr 0x0046C5AF;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x309C], eax;
	__asm        jmp    near ptr 0x0046C561;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0046C585;
	__asm        jmp    near ptr 0x0046C58A;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0046C5AA;
	__asm        jmp    near ptr 0x0046C6FF;
	__asm        jmp    near ptr 0x0046C5B4;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30B0], eax;
	__asm        cmp    dword ptr [ebp-0x30B0], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046C60E;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30AC], eax;
	__asm        mov    eax, [ebp-0x30AC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C5FF;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C60E;
	__asm        jmp    near ptr 0x0046C613;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046C644;
	__asm        cmp    dword ptr [ebp-0x30B0], 0;
	__asm        je     near ptr 0x0046C6A5;
	__asm        jmp    near ptr 0x0046C632;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x30B0];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046C6A5;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30A4], eax;
	__asm        cmp    dword ptr [ebp-0x30A4], 0;
	__asm        je     near ptr 0x0046C685;
	__asm        mov    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30A4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x30A0], eax;
	__asm        jmp    near ptr 0x0046C68F;
	__asm        mov    dword ptr [ebp-0x30A0], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x30A0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0046C6E4;
	__asm        cmp    dword ptr [ebp-0x30B0], 0;
	__asm        je     near ptr 0x0046C6E4;
	__asm        jmp    near ptr 0x0046C6B7;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30A8], eax;
	__asm        mov    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3098];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30A8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046C6E4;
	__asm        mov    eax, [ebp-0x30B0];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046C6F5;
	__asm        jmp    near ptr 0x0046C6FA;
	__asm        jmp    near ptr 0x0046C6FF;
// LINE 94:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 95:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 97:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x0046C785;
	__asm        jmp    near ptr 0x0046C738;
	__asm        mov    dword ptr [ebp-0x64], 0x42;
	__asm        mov    dword ptr [ebp-0x60], 0x54;
	__asm        mov    dword ptr [ebp-0x5C], 0x250;
	__asm        mov    dword ptr [ebp-0x58], 0x172;
	__asm        jmp    near ptr 0x0046C759;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   ListBoxWindow::ListBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x0046C792;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 98:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 99:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x128];
// LINE 100:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x28];
// LINE 101:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x11C];
// LINE 102:
	__asm        jmp    near ptr 0x0046C803;
// LINE 103:
	__asm        mov    tempSparkalColor.Blue, 0;
	__asm        mov    al, tempSparkalColor.Blue;
	__asm        mov    tempSparkalColor.Green, al;
	__asm        mov    al, tempSparkalColor.Green;
	__asm        mov    tempSparkalColor.Red, al;
// LINE 104:
	__asm        lea    eax, tempSparkalColor.Blue;
	__asm        push   eax;
	__asm        lea    eax, tempSparkalColor.Blue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x124];
// LINE 105:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD8];
// LINE 106:
	__asm        mov    eax, ds:[0x599450];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x12C];
// LINE 108:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByTimeDate;
// LINE 110:
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046C8D1;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0046C8D1;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0046C8BB;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C8CC;
	__asm        jmp    near ptr 0x0046C8D1;
	__asm        jmp    near ptr 0x0046C8D6;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x0046C8F8;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C8FD;
	__asm        mov    eax, [ebp-0x68];
	__asm        jmp    near ptr 0x0046C905;
// LINE 111:
}

// FUNCTION: COPTER_D 0x0046c90a
int32_t MissionLogWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x0046C93E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046C943;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x0046C961;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046C9DA;
	__asm        jmp    near ptr 0x0046C976;
	__asm        jmp    near ptr 0x0046C97B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046C9A0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046C9AC;
	__asm        jmp    near ptr 0x0046C9AC;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0046C9AC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046C9DA;
	__asm        jmp    near ptr 0x0046C9DF;
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0046C9E8;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046C9F3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0046CA14;
	__asm        jmp    near ptr 0x0046CA19;
	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0046CA3E;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046CA40;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046CA45;
// LINE 120:
}

// FUNCTION: COPTER_D 0x0046ca4c
int32_t MissionLogWindow::CreateImage(int32_t __formal) {
	char szBackgroundBufferPath[260];

// LINE 129:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 131:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x0046CAE1;
// LINE 132:
	__asm        lea    eax, szBackgroundBufferPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599454];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 133:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x0046CAD4;
	__asm        lea    eax, szBackgroundBufferPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0046CAE1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 135:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x0046CAEF;
// LINE 136:
}

// FUNCTION: COPTER_D 0x0046caf6
void MissionLogWindow::DestroyImage() {
// LINE 143:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x0046CB50;
// LINE 144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046CB46;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046CB41;
	__asm        jmp    near ptr 0x0046CB46;
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 147:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 148:
	__asm        jmp    near ptr 0x0046CB5D;
}

// FUNCTION: COPTER_D 0x0046cb62
int32_t MissionLogWindow::ComposeSelf() {
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x0046CB82;
// LINE 161:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046CC3F;
// LINE 164:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046CBE0;
// LINE 165:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xBC];
// LINE 167:
	__asm        jmp    near ptr 0x0046CBBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x0046CBD2;
// LINE 168:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::DrawBackground;
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 171:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x0046CC35;
// LINE 173:
	__asm        jmp    near ptr 0x0046CBF2;
	__asm        jmp    near ptr 0x0046CBF7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 175:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046CC3F;
// LINE 176:
}

// FUNCTION: COPTER_D 0x0046cc44
void MissionLogWindow::DrawBackground() {
	long y;
	int32_t i;
	long x;

// LINE 192:
	__asm        mov    i, 0;
	__asm        mov    x, 0x42;
	__asm        mov    y, 0x50;
	__asm        jmp    near ptr 0x0046CC6D;
	__asm        inc    i;
	__asm        cmp    i, 0x15;
	__asm        jge    near ptr 0x0046CCAB;
// LINE 193:
	__asm        push   0x122;
	__asm        push   0x18;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0xC];
// LINE 194:
	__asm        add    x, 0x18;
// LINE 195:
	__asm        jmp    near ptr 0x0046CC6A;
// LINE 196:
	__asm        jmp    near ptr 0x0046CCB0;
}

// FUNCTION: COPTER_D 0x0046ccb5
int32_t MissionLogWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lMyMessage;

// LINE 206:
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x0046CCE5;
// LINE 207:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x0046CCE0;
// LINE 208:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByTimeDate;
// LINE 210:
	__asm        jmp    near ptr 0x0046CD34;
	__asm        cmp    lWindowID, 2;
	__asm        jne    near ptr 0x0046CD09;
// LINE 211:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 1;
	__asm        je     near ptr 0x0046CD04;
// LINE 212:
	__asm        mov    ecx, this;
	__asm        call   MissionLogWindow::SortByType;
// LINE 214:
	__asm        jmp    near ptr 0x0046CD34;
	__asm        cmp    lWindowID, 3;
	__asm        jne    near ptr 0x0046CD34;
// LINE 215:
	__asm        lea    eax, lMyMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 217:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046CD3E;
// LINE 218:
}

// FUNCTION: COPTER_D 0x0046cd45
void MissionLogWindow::SortByTimeDate() {
	class list<tagLogBase *>::iterator iterator;
	class basic_string<char> sCurrentText;

// LINE 225:
	__asm        jmp    near ptr 0x0046CD56;
// LINE 226:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0046CDA6;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046CD9B;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    near ptr 0x0046CDAD;
	__asm        mov    sCurrentText.reference, 0;
	__asm        mov    sCurrentText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0046CDB9;
// LINE 228:
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::SortLogEntriesByDate;
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
	__asm        mov    eax, ds:[0x606E78];
	__asm        mov    [ebp-0x30], eax;
// LINE 230:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046CDF4;
	__asm        jmp    near ptr 0x0046CDF9;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    iterator.node, eax;
// LINE 23:
	__asm        mov    eax, ds:[0x606E78];
	__asm        mov    [ebp-0x20], eax;
// LINE 231:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046CE1A;
	__asm        jmp    near ptr 0x0046CE1F;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    near ptr 0x0046CE35;
	__asm        jmp    near ptr 0x0046CE49;
	__asm        jmp    near ptr 0x0046CE35;
	__asm        jmp    near ptr 0x0046CE44;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x0046CE49;
	__asm        jmp    near ptr 0x0046CE4E;
	__asm        jmp    near ptr 0x0046CEB4;
	__asm        jmp    near ptr 0x0046CE5D;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0046CEB4;
// LINE 232:
	__asm        jmp    near ptr 0x0046CE62;
	__asm        push   1;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 233:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
// LINE 234:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0046CEA4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046CEAF;
// LINE 235:
	__asm        jmp    near ptr 0x0046CDFF;
// LINE 236:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 237:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046CF41;
	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046CF41;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046CF21;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046CF26;
	__asm        jmp    near ptr 0x0046CF2B;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046CF3C;
	__asm        jmp    near ptr 0x0046CF41;
	__asm        jmp    near ptr 0x0046CF46;
	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     near ptr 0x0046CF68;
	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046CF6D;
	__asm        jmp    near ptr 0x0046CF72;
}

// FUNCTION: COPTER_D 0x0046cf77
void MissionLogWindow::SortByType() {
	unsigned long nCurrentMissionID;
	class list<tagLogBase *>::iterator iterator;
	class basic_string<char> sCurrentText;

// LINE 245:
	__asm        jmp    near ptr 0x0046CF8E;
// LINE 246:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046CFDE;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046CFD3;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    near ptr 0x0046CFE5;
	__asm        mov    sCurrentText.reference, 0;
	__asm        mov    sCurrentText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0046CFF1;
// LINE 249:
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::SortLogEntriesByType;
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
	__asm        mov    eax, ds:[0x606E78];
	__asm        mov    [ebp-0x3C], eax;
// LINE 251:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046D032;
	__asm        jmp    near ptr 0x0046D037;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 252:
	__asm        jmp    near ptr 0x0046D042;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMissionID, eax;
// LINE 23:
	__asm        mov    eax, ds:[0x606E78];
	__asm        mov    [ebp-0x2C], eax;
// LINE 253:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046D069;
	__asm        jmp    near ptr 0x0046D06E;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x0046D084;
	__asm        jmp    near ptr 0x0046D098;
	__asm        jmp    near ptr 0x0046D084;
	__asm        jmp    near ptr 0x0046D093;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x0046D098;
	__asm        jmp    near ptr 0x0046D09D;
	__asm        jmp    near ptr 0x0046D2C2;
	__asm        jmp    near ptr 0x0046D0AC;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0046D2C2;
// LINE 254:
	__asm        jmp    near ptr 0x0046D0B1;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nCurrentMissionID;
	__asm        cmp    [eax+8], ecx;
	__asm        je     near ptr 0x0046D265;
// LINE 255:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0046D172;
	__asm        push   0x599494;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046D0F2;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D14F;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        push   0x599494;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046D14A;
	__asm        jmp    near ptr 0x0046D158;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046D167;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0046D179;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0046D185;
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
	__asm        mov    eax, [ebp-0x1C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046D228;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0046D228;
	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D208;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046D20D;
	__asm        jmp    near ptr 0x0046D212;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D223;
	__asm        jmp    near ptr 0x0046D228;
	__asm        jmp    near ptr 0x0046D22D;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0046D24F;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D254;
// LINE 256:
	__asm        jmp    near ptr 0x0046D259;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentMissionID, eax;
// LINE 258:
	__asm        jmp    near ptr 0x0046D26A;
	__asm        push   1;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 259:
	__asm        push   0xFFFFFFFF;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD4];
// LINE 260:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x0046D2B2;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0046D2BD;
// LINE 261:
	__asm        jmp    near ptr 0x0046D04E;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 1;
// LINE 263:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046D352;
	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x0046D352;
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D332;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046D337;
	__asm        jmp    near ptr 0x0046D33C;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D34D;
	__asm        jmp    near ptr 0x0046D352;
	__asm        jmp    near ptr 0x0046D357;
	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     near ptr 0x0046D379;
	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D37E;
	__asm        jmp    near ptr 0x0046D383;
}

// FUNCTION: COPTER_D 0x0046d388
void MessageDisplayManager::MessageDisplayManager() {
	__asm        jmp    near ptr 0x0046D399;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0x14;
	__asm        jmp    near ptr 0x0046D3B2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046D419;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
	__asm        jmp    near ptr 0x0046D419;
	__asm        jmp    near ptr 0x0046D41E;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::MFont;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0x1388;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x50], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x51], 0xFF;
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x52], 0xFF;
	__asm        jmp    near ptr 0x0046D461;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5907D0;
// LINE 292:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::SetFontCharacteristics;
// LINE 293:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    ecx, 0x24;
	__asm        call   dword ptr [eax];
// LINE 294:
	__asm        jmp    near ptr 0x0046D48E;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046d496
void MessageDisplayManager::~MessageDisplayManager() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5907D0;
// LINE 300:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0046D5F8;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046D5EE;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax-4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x28], eax;
	__asm        dec    dword ptr [ebp-0x24];
	__asm        js     near ptr 0x0046D503;
	__asm        sub    dword ptr [ebp-0x28], 8;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    near ptr 0x0046D4E9;
	__asm        jmp    near ptr 0x0046D508;
	__asm        mov    eax, [ebp-4];
	__asm        sub    eax, 4;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D5E4;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046D5A8;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0046D5A8;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D588;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046D58D;
	__asm        jmp    near ptr 0x0046D592;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D5A3;
	__asm        jmp    near ptr 0x0046D5A8;
	__asm        jmp    near ptr 0x0046D5AD;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0046D5D3;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D5D8;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D5E9;
	__asm        jmp    near ptr 0x0046D5EE;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 304:
	__asm        jmp    near ptr 0x0046D5FD;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        call   MFont::~MFont;
	__asm        jmp    near ptr 0x0046D60D;
}

// FUNCTION: COPTER_D 0x0046d612
int32_t MessageDisplayManager::Initialize() {
// LINE 310:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jle    near ptr 0x0046D7E9;
// LINE 311:
// Block start:
	uint32_t $S71;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0046D76E;
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0046D76E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax-4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x38], eax;
	__asm        dec    dword ptr [ebp-0x34];
	__asm        js     near ptr 0x0046D683;
	__asm        sub    dword ptr [ebp-0x38], 8;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    near ptr 0x0046D669;
	__asm        jmp    near ptr 0x0046D688;
	__asm        mov    eax, [ebp-8];
	__asm        sub    eax, 4;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D764;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046D728;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0046D728;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D708;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046D70D;
	__asm        jmp    near ptr 0x0046D712;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D723;
	__asm        jmp    near ptr 0x0046D728;
	__asm        jmp    near ptr 0x0046D72D;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0046D753;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D758;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D769;
	__asm        jmp    near ptr 0x0046D76E;
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    $S71, eax;
	__asm        mov    eax, $S71;
	__asm        shl    eax, 3;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0046D7DF;
	__asm        mov    eax, $S71;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        dec    dword ptr [ebp-0x14];
	__asm        js     near ptr 0x0046D7C9;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0046D7AF;
	__asm        jmp    near ptr 0x0046D7CE;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x0046D7E9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 315:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 316:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046D7FD;
// LINE 317:
}

// FUNCTION: COPTER_D 0x0046d802
void MessageDisplayManager::DisplayCurrentMessages(class CBackBuffer* bufferDestination) {
	int32_t i;
	class MRect rectCurrentMessage;

// LINE 324:
	__asm        jmp    near ptr 0x0046D813;
	__asm        jmp    near ptr 0x0046D818;
// LINE 327:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     near ptr 0x0046D82A;
// LINE 328:
	__asm        jmp    near ptr 0x0046DCC6;
// LINE 330:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0046D838;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0046D8BB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    near ptr 0x0046D865;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046D8A9;
	__asm        jmp    near ptr 0x0046D8A9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046D892;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046D8A9;
	__asm        jmp    near ptr 0x0046D8A9;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046D8A9;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046D902;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        je     near ptr 0x0046D902;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    near ptr 0x0046DBEE;
	__asm        jmp    near ptr 0x0046D925;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    near ptr 0x0046DBEE;
	__asm        jmp    near ptr 0x0046D925;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+0x44], ecx;
	__asm        jae    near ptr 0x0046DBEE;
// LINE 331:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046D934;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x0046DB2F;
// LINE 332:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax*8+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    [ebp-0x6C], eax;
	__asm        je     near ptr 0x0046DB25;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046D9FE;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x0046D9FE;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046D9DE;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0046D9E3;
	__asm        jmp    near ptr 0x0046D9E8;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046D9F9;
	__asm        jmp    near ptr 0x0046D9FE;
	__asm        jmp    near ptr 0x0046DA03;
	__asm        jmp    near ptr 0x0046DA08;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0046DA32;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0046DB25;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0046DB1B;
	__asm        jmp    near ptr 0x0046DA4E;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046DAF5;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0046DA95;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046DABA;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0046DAC6;
	__asm        jmp    near ptr 0x0046DAC6;
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x0046DAC6;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046DAF0;
	__asm        jmp    near ptr 0x0046DAFE;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046DB0D;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046DB25;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0046DB2A;
	__asm        jmp    near ptr 0x0046D931;
// LINE 333:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x48];
// LINE 334:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     near ptr 0x0046DB47;
// LINE 335:
	__asm        jmp    near ptr 0x0046DCC6;
// LINE 336:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0046DB60;
	__asm        jmp    near ptr 0x0046DB65;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0046DB77;
	__asm        jmp    near ptr 0x0046DBE9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    near ptr 0x0046DB9A;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046DBE4;
	__asm        jmp    near ptr 0x0046DBE4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046DBCA;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046DBE4;
	__asm        jmp    near ptr 0x0046DBE4;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046DBE4;
	__asm        jmp    near ptr 0x0046DBE9;
	__asm        jmp    near ptr 0x0046DBEE;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    rectCurrentMessage.left, eax;
// LINE 340:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectCurrentMessage.top, eax;
// LINE 341:
	__asm        mov    rectCurrentMessage.right, 0x3E8;
// LINE 342:
	__asm        mov    rectCurrentMessage.bottom, 0x3E8;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, bufferDestination;
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0046DC1F;
// LINE 345:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046DC2E;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x48], ecx;
	__asm        jle    near ptr 0x0046DCC1;
// LINE 347:
	__asm        jmp    near ptr 0x0046DC42;
	__asm        jmp    near ptr 0x0046DC47;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046DC7A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0046DC86;
	__asm        jmp    near ptr 0x0046DC86;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0046DC86;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentMessage.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, bufferDestination;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, bufferDestination;
	__asm        call   dword ptr [eax+0x48];
// LINE 348:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        add    rectCurrentMessage.top, eax;
// LINE 349:
	__asm        jmp    near ptr 0x0046DC2B;
// LINE 350:
	__asm        jmp    near ptr 0x0046DCC6;
}

// FUNCTION: COPTER_D 0x0046dccd
void MessageDisplayManager::AddNewMessage(char * szNewMessage) {
	int32_t i;

// LINE 359:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jg     near ptr 0x0046DCF4;
// LINE 360:
	__asm        jmp    near ptr 0x0046E3C3;
// LINE 362:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0x48], ecx;
	__asm        jl     near ptr 0x0046E036;
// LINE 363:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046DD1B;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x0046DE45;
// LINE 364:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax*8+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        cmp    [ebp-0x84], eax;
	__asm        je     near ptr 0x0046DE3B;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046DDB2;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0046DDB2;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x0046DDB2;
	__asm        jmp    near ptr 0x0046DDB7;
	__asm        jmp    near ptr 0x0046DDBC;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0046DDEC;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0046DE3B;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     near ptr 0x0046DE2E;
	__asm        jmp    near ptr 0x0046DE08;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046DE3B;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0046DE40;
	__asm        jmp    near ptr 0x0046DD18;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, i;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x38], eax;
// LINE 365:
	__asm        jmp    near ptr 0x0046DE5C;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046DEA7;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046DE98;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046DEA7;
	__asm        jmp    near ptr 0x0046DEAC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046DEDD;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0046DF29;
	__asm        jmp    near ptr 0x0046DECB;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046DF29;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0046DF0C;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0046DF13;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046DF5C;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0046DF5C;
	__asm        jmp    near ptr 0x0046DF38;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046DF5C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046DF6D;
	__asm        jmp    near ptr 0x0046DF72;
// LINE 366:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0046DF91;
	__asm        jmp    near ptr 0x0046DF96;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0046DFAB;
	__asm        jmp    near ptr 0x0046E02C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    near ptr 0x0046DFD4;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E027;
	__asm        jmp    near ptr 0x0046E027;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046E00A;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E027;
	__asm        jmp    near ptr 0x0046E027;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E027;
	__asm        jmp    near ptr 0x0046E02C;
	__asm        jmp    near ptr 0x0046E031;
// LINE 368:
	__asm        jmp    near ptr 0x0046E3BE;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jg     near ptr 0x0046E23E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x50], eax;
// LINE 369:
	__asm        jmp    near ptr 0x0046E057;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046E0A2;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046E093;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046E0A2;
	__asm        jmp    near ptr 0x0046E0A7;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046E0D8;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0046E124;
	__asm        jmp    near ptr 0x0046E0C6;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046E124;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0046E107;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0046E10E;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046E157;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0046E157;
	__asm        jmp    near ptr 0x0046E133;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E157;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046E168;
	__asm        jmp    near ptr 0x0046E16D;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        jmp    near ptr 0x0046E199;
	__asm        jmp    near ptr 0x0046E19E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0046E1B3;
	__asm        jmp    near ptr 0x0046E234;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    near ptr 0x0046E1DC;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E22F;
	__asm        jmp    near ptr 0x0046E22F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046E212;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E22F;
	__asm        jmp    near ptr 0x0046E22F;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        jmp    near ptr 0x0046E22F;
	__asm        jmp    near ptr 0x0046E234;
	__asm        jmp    near ptr 0x0046E239;
// LINE 373:
	__asm        jmp    near ptr 0x0046E3BE;
// LINE 374:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x48];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, [ebp-8];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0046E26A;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0046E2B5;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046E2A6;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046E2B5;
	__asm        jmp    near ptr 0x0046E2BA;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0046E2EB;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x0046E375;
	__asm        jmp    near ptr 0x0046E2D9;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0046E375;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x0046E31A;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0046E321;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046E362;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x0046E362;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x0046E362;
	__asm        jmp    near ptr 0x0046E367;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046E3A8;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x0046E3A8;
	__asm        jmp    near ptr 0x0046E384;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szNewMessage;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E3A8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046E3B9;
	__asm        jmp    near ptr 0x0046E3BE;
// LINE 377:
	__asm        jmp    near ptr 0x0046E3C3;
}

// FUNCTION: COPTER_D 0x0046e3ca
void MessageDisplayManager::AddNewMessage(class basic_string<char>& sNewMessage) {
// LINE 383:
	__asm        mov    eax, sNewMessage;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0046E3FC;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046E401;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, sNewMessage;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0046E41E;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046E496;
	__asm        jmp    near ptr 0x0046E433;
	__asm        jmp    near ptr 0x0046E438;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046E45D;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046E469;
	__asm        jmp    near ptr 0x0046E469;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0046E469;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E496;
	__asm        jmp    near ptr 0x0046E49B;
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0046E4A4;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046E4AF;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sNewMessage;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0046E4CF;
	__asm        jmp    near ptr 0x0046E4D4;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 384:
	__asm        jmp    near ptr 0x0046E4EA;
}



// Contribution: 1:0006d500-0006d538 Module: 40, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0046e500
// MissionLogWindow::`scalar deleting destructor'



// Contribution: 1:0006d540-0006d681 Module: 40, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0046e540
// basic_string<char>::`vector deleting destructor'



// Contribution: 2:00001708-000017cb Module: 40, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590708
// ??_7MissionLogWindow@@6B@


// Contribution: 2:000017d0-000017df Module: 40, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005907d0
// ??_7MessageDisplayManager@@6B@


// Contribution: 3:00002448-00002494 Module: 40, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599448
// SZ_MISSION_LOG_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059944c
// SZ_MISSION_LOG_WINDOW_BUTTON_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599450
// SZ_MISSION_LOG_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599454
// SZ_MISSION_LOG_WINDOW_BACKGROUND_IMAGE_FILE_NAME
