// Module: Comander.obj
// Source: C:\Copter\source\sparkal\Comander.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class ICommander (forward reference);
// VTABLE: COPTER_D 0x005912a8
class ICommander{
public:
	void ICommander();
	virtual void ~ICommander(); // vtable+0x0
	virtual unsigned long Idle(); // vtable+0x4
	virtual unsigned long OnCharacter(char, int32_t); // vtable+0x8
	virtual unsigned long OnMouseDown(int32_t, int32_t); // vtable+0xc
	virtual unsigned long OnMouseUp(int32_t, int32_t); // vtable+0x10
	virtual unsigned long OnMouseMove(int32_t, int32_t); // vtable+0x14
	virtual unsigned long OnWindowActivate(); // vtable+0x18
	virtual unsigned long OnWindowDeactivate(); // vtable+0x1c
	virtual class CSparkalWindow* SetWindow(class CSparkalWindow*); // vtable+0x20
	class CSparkalWindow* GetWindow();
protected:
	class CSparkalWindow *mpWindow;
};

// Type: void;

// Type: class CSparkalWindow (forward reference);
// VTABLE: COPTER_D 0x00590ef8
class CSparkalWindow{
public:
	void CSparkalWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	void CSparkalWindow();
	virtual void ~CSparkalWindow(); // vtable+0x0
	void * __ptr32 GetPlatformData();
	long GetWidth();
	long GetHeight();
	virtual unsigned long GetClientSize(long *, long *); // vtable+0x4
	class ScreenBuffer* GetBackBuffer();
	class ScreenBuffer* SetBackBuffer(class ScreenBuffer*);
	class ICommander* GetCommander();
	class ICommander* SetCommander(class ICommander*);
	virtual unsigned long Draw(); // vtable+0x8
	virtual unsigned long SetCursor(unsigned long); // vtable+0xc
	virtual unsigned long SetCursorFromIndex(int32_t); // vtable+0x10
	virtual unsigned long LoadGameCursors(); // vtable+0x14
	virtual void FreeGameCursors(); // vtable+0x18
	unsigned long DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *);
	virtual unsigned long Sleep(); // vtable+0x1c
	virtual unsigned long WakeUp(); // vtable+0x20
	unsigned long ScreenScroll(long, long, long, long, long, long);
	unsigned long RectSlideUp(long, long, long, long);
	virtual unsigned long SwapBuffer(long, long, long, long); // vtable+0x24
	virtual unsigned long SwapBuffer(); // vtable+0x28
	virtual void UpdatePalette(long, long, struct SparkalColor*); // vtable+0x2c
protected:
	long mHeight;
	long mWidth;
	unsigned long mStyle;
	class ICommander *mpCommander;
	class ScreenBuffer *mpBackBuffer;
	void * __ptr32 mWindow;
	// calltype: NearStd
	virtual long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long); // vtable+0x30
	void * __ptr32 mPalette;
	void * __ptr32 mhCurrentCursor;
	void * __ptr32 mhCustomCursor;
	void * __ptr32 mCursors[16];
};

// Type: class CDefaultCommander (forward reference);
// VTABLE: COPTER_D 0x005912d0
class CDefaultCommander : public ICommander
{
public:
	void CDefaultCommander();
	virtual void ~CDefaultCommander() /* override */;
	virtual unsigned long Idle() /* override */;
	virtual unsigned long OnCharacter(char, int32_t) /* override */;
	virtual unsigned long OnMouseDown(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseUp(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseMove(int32_t, int32_t) /* override */;
	virtual unsigned long OnWindowActivate() /* override */;
	virtual unsigned long OnWindowDeactivate() /* override */;
};

// Type: unsigned long;

// Type: char;

// Type: int32_t;

// Type: uint32_t;

// Type: class ICommander;
// VTABLE: COPTER_D 0x005912a8
class ICommander{
public:
	void ICommander();
	virtual void ~ICommander(); // vtable+0x0
	virtual unsigned long Idle(); // vtable+0x4
	virtual unsigned long OnCharacter(char, int32_t); // vtable+0x8
	virtual unsigned long OnMouseDown(int32_t, int32_t); // vtable+0xc
	virtual unsigned long OnMouseUp(int32_t, int32_t); // vtable+0x10
	virtual unsigned long OnMouseMove(int32_t, int32_t); // vtable+0x14
	virtual unsigned long OnWindowActivate(); // vtable+0x18
	virtual unsigned long OnWindowDeactivate(); // vtable+0x1c
	virtual class CSparkalWindow* SetWindow(class CSparkalWindow*); // vtable+0x20
	class CSparkalWindow* GetWindow();
protected:
	class CSparkalWindow *mpWindow;
};



// Contribution: 1:00099d30-00099eff Module: 14, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049ad30
void ICommander::ICommander() {

	this-><vftable> = 0x5912a8;
// LINE 15:
	this->mpWindow = 0x0;
// LINE 16:
	__asm        jmp    near ptr 0x0049AD54;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049ad5c
void ICommander::~ICommander() {

	this-><vftable> = 0x5912a8;
// LINE 25:
	__asm        jmp    near ptr 0x0049AD76;
}

// FUNCTION: COPTER_D 0x0049ad7b
class CSparkalWindow* ICommander::SetWindow(class CSparkalWindow *pWindow) {
	class CSparkalWindow *ReturnWindow;

// LINE 29:
	ReturnWindow = this->mpWindow;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    ecx, pWindow;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T30;
// LINE 32:
	ReturnWindow = 0x0;
// LINE 33:
	__asm        jmp    _T39;
// LINE 34:
_T30:
	this->mpWindow = pWindow;
// LINE 36:
_T39:
	__asm        mov    eax, ReturnWindow;
	__asm        jmp    near ptr 0x0049ADBC;
// LINE 37:
}

// FUNCTION: COPTER_D 0x0049adc3
void CDefaultCommander::CDefaultCommander() {

	__asm        mov    ecx, this;
	__asm        call   ICommander::ICommander;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912D0;
// LINE 45:
	__asm        jmp    near ptr 0x0049ADE5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049aded
void CDefaultCommander::~CDefaultCommander() {

	this-><CDefaultCommander+0x00> = 0x5912d0;
// LINE 49:
	__asm        jmp    near ptr 0x0049AE07;

	__asm        mov    ecx, this;
	__asm        call   ICommander::~ICommander;
}

// FUNCTION: COPTER_D 0x0049ae14
unsigned long CDefaultCommander::Idle() {
// LINE 56:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AE27;
// LINE 57:
}

// FUNCTION: COPTER_D 0x0049ae2c
unsigned long CDefaultCommander::OnCharacter(char Character, int32_t RepeatCount) {
// LINE 61:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AE3F;
// LINE 62:
}

// FUNCTION: COPTER_D 0x0049ae46
unsigned long CDefaultCommander::OnMouseDown(int32_t x, int32_t y) {
// LINE 66:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AE59;
// LINE 67:
}

// FUNCTION: COPTER_D 0x0049ae60
unsigned long CDefaultCommander::OnMouseUp(int32_t x, int32_t y) {
// LINE 71:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AE73;
// LINE 72:
}

// FUNCTION: COPTER_D 0x0049ae7a
unsigned long CDefaultCommander::OnMouseMove(int32_t x, int32_t y) {
// LINE 76:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AE8D;
// LINE 77:
}

// FUNCTION: COPTER_D 0x0049ae94
unsigned long CDefaultCommander::OnWindowActivate() {
// LINE 81:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T32;

	__asm        push   0x51;
	__asm        push   0x59A29C;
	__asm        push   0x59A2C4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T37;
_T32:
	__asm        jmp    _T37;
// LINE 82:
_T37:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+4];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0049AEE3;
// LINE 83:
}

// FUNCTION: COPTER_D 0x0049aee8
unsigned long CDefaultCommander::OnWindowDeactivate() {
// LINE 87:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AEFB;
// LINE 88:
}



// Contribution: 1:00099f00-00099f38 Module: 14, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049af00
// ICommander::`scalar deleting destructor'



// Contribution: 1:00099f40-00099f78 Module: 14, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049af40
// CDefaultCommander::`scalar deleting destructor'



// Contribution: 2:000022a8-000022cb Module: 14, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ICommander @ 0x005912a8
//   00: ICommander::`scalar deleting destructor' @ 0x0049af00
//   01: _purecall @ 0x0056cfa0
//   02: _purecall @ 0x0056cfa0
//   03: _purecall @ 0x0056cfa0
//   04: _purecall @ 0x0056cfa0
//   05: _purecall @ 0x0056cfa0
//   06: _purecall @ 0x0056cfa0
//   07: _purecall @ 0x0056cfa0
//   08: ICommander::SetWindow @ 0x0049ad7b
//   9 entries



// Contribution: 2:000022d0-000022f3 Module: 14, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CDefaultCommander @ 0x005912d0
//   00: CDefaultCommander::`scalar deleting destructor' @ 0x0049af40
//   01: CDefaultCommander::Idle @ 0x0049ae14
//   02: CDefaultCommander::OnCharacter @ 0x0049ae2c
//   03: CDefaultCommander::OnMouseDown @ 0x0049ae46
//   04: CDefaultCommander::OnMouseUp @ 0x0049ae60
//   05: CDefaultCommander::OnMouseMove @ 0x0049ae7a
//   06: CDefaultCommander::OnWindowActivate @ 0x0049ae94
//   07: CDefaultCommander::OnWindowDeactivate @ 0x0049aee8
//   08: ICommander::SetWindow @ 0x0049ad7b
//   9 entries



// Contribution: 3:0000329c-000032cc Module: 14, 4 byte alignment, initialized_data, read, write, 
