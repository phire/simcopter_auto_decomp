// Module: Comander.obj
// Source: C:\Copter\source\sparkal\Comander.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00099d30-00099eff Module: 14, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x0049ad30
ICommander::ICommander {
// LINE 14:
	asm( 
"	      0049ad30    push ebp"
"	      0049ad31    mov ebp,esp"
"	      0049ad33    sub esp,4"
"	      0049ad36    push ebx"
"	      0049ad37    push esi"
"	      0049ad38    push edi"
"	      0049ad39    mov [ebp-4],ecx"
"	      0049ad3c    mov eax,[ebp-4]"
"	      0049ad3f    mov dword ptr [eax],5912A8h"
);
// LINE 15:
	asm( 
"	      0049ad45    mov eax,[ebp-4]"
"	      0049ad48    mov dword ptr [eax+4],0"
);
// LINE 16:
	asm( 
"	      0049ad4f    jmp near ptr 0049AD54h"
"	      0049ad54    mov eax,[ebp-4]"
"	      0049ad57    pop edi"
"	      0049ad58    pop esi"
"	      0049ad59    pop ebx"
"	      0049ad5a    leave"
"	      0049ad5b    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049ad5c
ICommander::~ICommander {
// LINE 19:
	asm( 
"	      0049ad5c    push ebp"
"	      0049ad5d    mov ebp,esp"
"	      0049ad5f    sub esp,4"
"	      0049ad62    push ebx"
"	      0049ad63    push esi"
"	      0049ad64    push edi"
"	      0049ad65    mov [ebp-4],ecx"
"	      0049ad68    mov eax,[ebp-4]"
"	      0049ad6b    mov dword ptr [eax],5912A8h"
);
// LINE 25:
	asm( 
"	      0049ad71    jmp near ptr 0049AD76h"
"	      0049ad76    pop edi"
"	      0049ad77    pop esi"
"	      0049ad78    pop ebx"
"	      0049ad79    leave"
"	      0049ad7a    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049ad7b
ICommander::SetWindow {
// LINE 28:
	asm( 
"	      0049ad7b    push ebp"
"	      0049ad7c    mov ebp,esp"
"	      0049ad7e    sub esp,8"
"	      0049ad81    push ebx"
"	      0049ad82    push esi"
"	      0049ad83    push edi"
"	      0049ad84    mov [ebp-8],ecx"
);
// LINE 29:
	asm( 
"	      0049ad87    mov eax,[ebp-8]"
"	      0049ad8a    mov eax,[eax+4]"
"	      0049ad8d    mov [ebp-4],eax"
);
// LINE 31:
	asm( 
"	      0049ad90    mov eax,[ebp-8]"
"	      0049ad93    mov ecx,[ebp+8]"
"	      0049ad96    cmp [eax+4],ecx"
"	      0049ad99    jne near ptr 0049ADABh"
);
// LINE 32:
	asm( 
"	      0049ad9f    mov dword ptr [ebp-4],0"
);
// LINE 33:
	asm( 
"	      0049ada6    jmp near ptr 0049ADB4h"
);
// LINE 34:
	asm( 
"	      0049adab    mov eax,[ebp+8]"
"	      0049adae    mov ecx,[ebp-8]"
"	      0049adb1    mov [ecx+4],eax"
);
// LINE 36:
	asm( 
"	      0049adb4    mov eax,[ebp-4]"
"	      0049adb7    jmp near ptr 0049ADBCh"
);
// LINE 37:
	asm( 
"	      0049adbc    pop edi"
"	      0049adbd    pop esi"
"	      0049adbe    pop ebx"
"	      0049adbf    leave"
"	      0049adc0    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0049adc3
CDefaultCommander::CDefaultCommander {
// LINE 44:
	asm( 
"	      0049adc3    push ebp"
"	      0049adc4    mov ebp,esp"
"	      0049adc6    sub esp,4"
"	      0049adc9    push ebx"
"	      0049adca    push esi"
"	      0049adcb    push edi"
"	      0049adcc    mov [ebp-4],ecx"
"	      0049adcf    mov ecx,[ebp-4]"
"	      0049add2    call 0049AD30h"
"	      0049add7    mov eax,[ebp-4]"
"	      0049adda    mov dword ptr [eax],5912D0h"
);
// LINE 45:
	asm( 
"	      0049ade0    jmp near ptr 0049ADE5h"
"	      0049ade5    mov eax,[ebp-4]"
"	      0049ade8    pop edi"
"	      0049ade9    pop esi"
"	      0049adea    pop ebx"
"	      0049adeb    leave"
"	      0049adec    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049aded
CDefaultCommander::~CDefaultCommander {
// LINE 48:
	asm( 
"	      0049aded    push ebp"
"	      0049adee    mov ebp,esp"
"	      0049adf0    sub esp,4"
"	      0049adf3    push ebx"
"	      0049adf4    push esi"
"	      0049adf5    push edi"
"	      0049adf6    mov [ebp-4],ecx"
"	      0049adf9    mov eax,[ebp-4]"
"	      0049adfc    mov dword ptr [eax],5912D0h"
);
// LINE 49:
	asm( 
"	      0049ae02    jmp near ptr 0049AE07h"
"	      0049ae07    mov ecx,[ebp-4]"
"	      0049ae0a    call 0049AD5Ch"
"	      0049ae0f    pop edi"
"	      0049ae10    pop esi"
"	      0049ae11    pop ebx"
"	      0049ae12    leave"
"	      0049ae13    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049ae14
CDefaultCommander::Idle {
// LINE 55:
	asm( 
"	      0049ae14    push ebp"
"	      0049ae15    mov ebp,esp"
"	      0049ae17    sub esp,4"
"	      0049ae1a    push ebx"
"	      0049ae1b    push esi"
"	      0049ae1c    push edi"
"	      0049ae1d    mov [ebp-4],ecx"
);
// LINE 56:
	asm( 
"	      0049ae20    xor eax,eax"
"	      0049ae22    jmp near ptr 0049AE27h"
);
// LINE 57:
	asm( 
"	      0049ae27    pop edi"
"	      0049ae28    pop esi"
"	      0049ae29    pop ebx"
"	      0049ae2a    leave"
"	      0049ae2b    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049ae2c
CDefaultCommander::OnCharacter {
// LINE 60:
	asm( 
"	      0049ae2c    push ebp"
"	      0049ae2d    mov ebp,esp"
"	      0049ae2f    sub esp,4"
"	      0049ae32    push ebx"
"	      0049ae33    push esi"
"	      0049ae34    push edi"
"	      0049ae35    mov [ebp-4],ecx"
);
// LINE 61:
	asm( 
"	      0049ae38    xor eax,eax"
"	      0049ae3a    jmp near ptr 0049AE3Fh"
);
// LINE 62:
	asm( 
"	      0049ae3f    pop edi"
"	      0049ae40    pop esi"
"	      0049ae41    pop ebx"
"	      0049ae42    leave"
"	      0049ae43    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x0049ae46
CDefaultCommander::OnMouseDown {
// LINE 65:
	asm( 
"	      0049ae46    push ebp"
"	      0049ae47    mov ebp,esp"
"	      0049ae49    sub esp,4"
"	      0049ae4c    push ebx"
"	      0049ae4d    push esi"
"	      0049ae4e    push edi"
"	      0049ae4f    mov [ebp-4],ecx"
);
// LINE 66:
	asm( 
"	      0049ae52    xor eax,eax"
"	      0049ae54    jmp near ptr 0049AE59h"
);
// LINE 67:
	asm( 
"	      0049ae59    pop edi"
"	      0049ae5a    pop esi"
"	      0049ae5b    pop ebx"
"	      0049ae5c    leave"
"	      0049ae5d    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x0049ae60
CDefaultCommander::OnMouseUp {
// LINE 70:
	asm( 
"	      0049ae60    push ebp"
"	      0049ae61    mov ebp,esp"
"	      0049ae63    sub esp,4"
"	      0049ae66    push ebx"
"	      0049ae67    push esi"
"	      0049ae68    push edi"
"	      0049ae69    mov [ebp-4],ecx"
);
// LINE 71:
	asm( 
"	      0049ae6c    xor eax,eax"
"	      0049ae6e    jmp near ptr 0049AE73h"
);
// LINE 72:
	asm( 
"	      0049ae73    pop edi"
"	      0049ae74    pop esi"
"	      0049ae75    pop ebx"
"	      0049ae76    leave"
"	      0049ae77    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x0049ae7a
CDefaultCommander::OnMouseMove {
// LINE 75:
	asm( 
"	      0049ae7a    push ebp"
"	      0049ae7b    mov ebp,esp"
"	      0049ae7d    sub esp,4"
"	      0049ae80    push ebx"
"	      0049ae81    push esi"
"	      0049ae82    push edi"
"	      0049ae83    mov [ebp-4],ecx"
);
// LINE 76:
	asm( 
"	      0049ae86    xor eax,eax"
"	      0049ae88    jmp near ptr 0049AE8Dh"
);
// LINE 77:
	asm( 
"	      0049ae8d    pop edi"
"	      0049ae8e    pop esi"
"	      0049ae8f    pop ebx"
"	      0049ae90    leave"
"	      0049ae91    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x0049ae94
CDefaultCommander::OnWindowActivate {
// LINE 80:
	asm( 
"	      0049ae94    push ebp"
"	      0049ae95    mov ebp,esp"
"	      0049ae97    sub esp,4"
"	      0049ae9a    push ebx"
"	      0049ae9b    push esi"
"	      0049ae9c    push edi"
"	      0049ae9d    mov [ebp-4],ecx"
);
// LINE 81:
	asm( 
"	      0049aea0    mov eax,[ebp-4]"
"	      0049aea3    cmp dword ptr [eax+4],0"
"	      0049aea7    jne near ptr 0049AEC6h"
"	      0049aead    push 51h"
"	      0049aeaf    push 59A29Ch"
"	      0049aeb4    push 59A2C4h"
"	      0049aeb9    call 0056DA30h"
"	      0049aebe    add esp,0Ch"
"	      0049aec1    jmp near ptr 0049AECBh"
"	      0049aec6    jmp near ptr 0049AECBh"
);
// LINE 82:
	asm( 
"	      0049aecb    push 0"
"	      0049aecd    mov eax,[ebp-4]"
"	      0049aed0    mov ecx,[ebp-4]"
"	      0049aed3    mov ecx,[ecx+4]"
"	      0049aed6    mov edx,[ecx]"
"	      0049aed8    mov ecx,[eax+4]"
"	      0049aedb    call dword ptr [edx+0Ch]"
"	      0049aede    jmp near ptr 0049AEE3h"
);
// LINE 83:
	asm( 
"	      0049aee3    pop edi"
"	      0049aee4    pop esi"
"	      0049aee5    pop ebx"
"	      0049aee6    leave"
"	      0049aee7    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049aee8
CDefaultCommander::OnWindowDeactivate {
// LINE 86:
	asm( 
"	      0049aee8    push ebp"
"	      0049aee9    mov ebp,esp"
"	      0049aeeb    sub esp,4"
"	      0049aeee    push ebx"
"	      0049aeef    push esi"
"	      0049aef0    push edi"
"	      0049aef1    mov [ebp-4],ecx"
);
// LINE 87:
	asm( 
"	      0049aef4    xor eax,eax"
"	      0049aef6    jmp near ptr 0049AEFBh"
);
// LINE 88:
	asm( 
"	      0049aefb    pop edi"
"	      0049aefc    pop esi"
"	      0049aefd    pop ebx"
"	      0049aefe    leave"
"	      0049aeff    ret"
);
}

// FUNCTION: SIMCOPTER 0x0049af00
// ICommander::`scalar deleting destructor'



// Contribution: 1:00099f00-00099f38 Module: 14, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00099f40-00099f78 Module: 14, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x0049af40
// CDefaultCommander::`scalar deleting destructor'



// Contribution: 2:000022a8-000022cb Module: 14, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000022d0-000022f3 Module: 14, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000022d0
// ??_7CDefaultCommander@@6B@


// Contribution: 3:0000329c-000032cc Module: 14, 4 byte alignment, initialized_data, read, write, 
