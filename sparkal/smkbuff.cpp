// Module: Smkbuff.obj
// Source: C:\Copter\source\sparkal\Smkbuff.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class SmackerBuffer (forward reference);
class SmackerBuffer{
public:
	void SmackerBuffer(char *, int32_t, int32_t);
	void SmackerBuffer();
	// vtable: 0
	intro void ~SmackerBuffer();
	// vtable: 4
	intro int32_t Initialize();
	// vtable: 8
	intro int32_t CreateSurface();
	// vtable: 12
	intro void ClearBuffer(int32_t);
	// vtable: 16
	intro int32_t Open(char *, unsigned long, unsigned long);
	// vtable: 20
	intro void Close();
	// vtable: 24
	intro int32_t ComposeToWindow();
	// vtable: 28
	intro int32_t SetPalette();
	void Goto(unsigned long);
	void Reset();
	void GetSummary(struct SmackSumTag*);
	void CenterBufferInRect(struct SparkalRect*);
	void SetBufferPosition(int32_t, int32_t);
	void SmackerBuffer(class CSparkalWindow*);
	void SmackerBuffer(void * __ptr32);
	void SetZoomFactor(int32_t);
	// calltype: NearC
	static char * GetSmackerVersion(char *);
	int32_t nStatus;
	int32_t bLoopVideo;
	int32_t bBlankAtEndOfVideo;
	int32_t nBlankColorIndex;
	struct SparkalColor colorWindowFill;
	void * __ptr32 myWindow;
	int32_t nBufferWidth;
	int32_t nBufferHeight;
	int32_t nDestX;
	int32_t nDestY;
	int32_t nDestWidth;
	int32_t nDestHeight;
protected:
	struct SmackBufTag* smkbuf;
	struct SmackTag* smk;
	char[260] szSmackFilePath;
};

// Type: void;

// Type: char *;

// Type: int32_t;

// Type: unsigned long;

// Type: void * __ptr32;

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct tagRECT;
class tagRECT{
public:
	long left;
	long top;
	long right;
	long bottom;
};

// Type: class CSparkalWindow (forward reference);

// Type: struct SparkalRect (forward reference);
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class VRBmpSmackerBuffer (forward reference);
class VRBmpSmackerBuffer : public SmackerBuffer
{
public:
	void VRBmpSmackerBuffer(char *, int32_t, int32_t);
	void VRBmpSmackerBuffer();
	// vtable: 0
	intro void ~SmackerBuffer();
	// vtable: 4
	intro int32_t Initialize();
	// vtable: 8
	intro int32_t CreateSurface();
	// vtable: 12
	intro void ClearBuffer(int32_t);
	// vtable: 16
	intro int32_t Open(char *, unsigned long, unsigned long);
	// vtable: 20
	intro void Close();
	// vtable: 24
	intro int32_t ComposeToWindow();
	// vtable: 28
	intro int32_t SetPalette();
	void Goto(unsigned long);
	void Reset();
	void GetSummary(struct SmackSumTag*);
	void CenterBufferInRect(struct SparkalRect*);
	void SetBufferPosition(int32_t, int32_t);
	void VRBmpSmackerBuffer(class CSparkalWindow*);
	void VRBmpSmackerBuffer(void * __ptr32);
	void SetZoomFactor(int32_t);
	// calltype: NearC
	static char * GetSmackerVersion(char *);
	int32_t nStatus;
	int32_t bLoopVideo;
	int32_t bBlankAtEndOfVideo;
	int32_t nBlankColorIndex;
	struct SparkalColor colorWindowFill;
	void * __ptr32 myWindow;
	int32_t nBufferWidth;
	int32_t nBufferHeight;
	int32_t nDestX;
	int32_t nDestY;
	int32_t nDestWidth;
	int32_t nDestHeight;
protected:
	struct SmackBufTag* smkbuf;
	struct SmackTag* smk;
	char[260] szSmackFilePath;
public:
	char * szVRBmpName;
	int32_t nVRBmpFlags;
	struct VRResource* vrOriginalResource;
	struct VRBmpHdr* bmpOriginalHeader;
	int32_t bPreserveBmp;
	char * chVRBmpHeader;
	struct VRBmpHdr* bmpHeader;
	char * bmpDataStart;
	int32_t bPreserveSmackerBuffer;
	void VRBmpSmackerBuffer(char *, int32_t, int32_t, int32_t);
	void VRBmpSmackerBuffer();
	virtual void ~VRBmpSmackerBuffer();
	void InitializeVRBmpMembers();
	// vtable: 32
	intro int32_t CreateSurface(int32_t);
	// vtable: 36
	intro void DeleteSurface();
	virtual void ClearBuffer(int32_t);
	virtual int32_t Open(char *, unsigned long, unsigned long);
	// vtable: 40
	intro int32_t SetDefaultVRBmp(char *, int32_t, int32_t);
	int32_t Compose();
	// vtable: 44
	intro int32_t DrawDefaultVRBmp();
};

// Type: struct VRBmpHdr (forward reference);

// Type: class SmackerBackBuffer (forward reference);
class SmackerBackBuffer : public SmackerBuffer, public IFlatImage, public IBackBuffer, public CBackBuffer
{
public:
	void SmackerBackBuffer(char *, int32_t, int32_t);
	void SmackerBackBuffer();
	// vtable: 0
	intro void ~SmackerBuffer();
	// vtable: 4
	intro int32_t Initialize();
	// vtable: 8
	intro int32_t CreateSurface();
	// vtable: 12
	intro void ClearBuffer(int32_t);
	// vtable: 16
	intro int32_t Open(char *, unsigned long, unsigned long);
	// vtable: 20
	intro void Close();
	// vtable: 24
	intro int32_t ComposeToWindow();
	// vtable: 28
	intro int32_t SetPalette();
	void Goto(unsigned long);
	void Reset();
	void GetSummary(struct SmackSumTag*);
	void CenterBufferInRect(struct SparkalRect*);
	void SetBufferPosition(int32_t, int32_t);
	void SmackerBackBuffer(class CSparkalWindow*);
	void SmackerBackBuffer(void * __ptr32);
	void SetZoomFactor(int32_t);
	// calltype: NearC
	static char * GetSmackerVersion(char *);
	int32_t nStatus;
	int32_t bLoopVideo;
	int32_t bBlankAtEndOfVideo;
	int32_t nBlankColorIndex;
	struct SparkalColor colorWindowFill;
	void * __ptr32 myWindow;
	int32_t nBufferWidth;
	int32_t nBufferHeight;
	int32_t nDestX;
	int32_t nDestY;
	int32_t nDestWidth;
	int32_t nDestHeight;
protected:
	struct SmackBufTag* smkbuf;
	struct SmackTag* smk;
	char[260] szSmackFilePath;
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long SmackerBackBuffer(class IFlatImage*, long, long, long, long, long, long);
	unsigned long SmackerBackBuffer(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long SmackerBackBuffer(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long SmackerBackBuffer(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	void SmackerBackBuffer(long, long, const struct SparkalColor*);
	void SmackerBackBuffer(char *);
	void SmackerBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long SmackerBackBuffer(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long SmackerBackBuffer(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long SmackerBackBuffer(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long SmackerBackBuffer(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long SmackerBackBuffer(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long SmackerBackBuffer(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long SmackerBackBuffer(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long SmackerBackBuffer(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
public:
	int32_t bUseSmackBuf;
	void SmackerBackBuffer(char *, int32_t, int32_t, int32_t, int32_t, int32_t);
	void SmackerBackBuffer();
	virtual void ~SmackerBackBuffer();
	virtual int32_t Initialize();
	// vtable: 32
	intro void SetBackBufferData(char *, int32_t, int32_t, int32_t, int32_t, int32_t);
	virtual int32_t Open(char *, unsigned long, unsigned long);
	virtual int32_t CreateSurface();
	// vtable: 36
	intro void SetDirectBlit();
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
protected:
	int32_t bDirectBlit;
	void BltParts(class IFlatImage*, long, long, long, long, long, long);
	void BltAll(class IFlatImage*, long, long, long, long, long, long);
};

// Type: long;

// Type: class IFlatImage (forward reference);
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long IFlatImage(class IFlatImage*, long, long, long, long, long, long);
	unsigned long IFlatImage(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long IFlatImage(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long IFlatImage(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};

// Type: uint32_t;



// Contribution: 1:00096c00-00098e2e Module: 17, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00497c00
void SmackerBuffer::SmackerBuffer() {
// LINE 39:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x00497C11;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591138;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 41:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 43:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x15];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16], al;
// LINE 45:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 46:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 47:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 48:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 49:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 50:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 51:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 52:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 53:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 54:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x3C], 0;
// LINE 55:
	__asm        jmp    near ptr 0x00497CC7;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497ccf
void SmackerBuffer::SmackerBuffer(char * szNewFilePath, int32_t nNewDestWidth, int32_t nNewDestHeight) {
// LINE 62:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x00497CE0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591138;
// LINE 63:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 64:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 65:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 68:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 72:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 73:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 74:
	__asm        mov    eax, nNewDestWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 75:
	__asm        mov    eax, nNewDestHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 77:
	__asm        cmp    szNewFilePath, 0;
	__asm        je     near ptr 0x00497D8B;
// LINE 78:
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 79:
	__asm        jmp    near ptr 0x00497D92;
// LINE 80:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x3C], 0;
// LINE 81:
	__asm        jmp    near ptr 0x00497D97;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00497da1
void SmackerBuffer::~SmackerBuffer() {
// LINE 89:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591138;
// LINE 90:
	__asm        mov    ecx, this;
	__asm        call   0x00497F91;
// LINE 91:
	__asm        jmp    near ptr 0x00497DC3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497dc8
int32_t SmackerBuffer::Initialize() {
// LINE 105:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
	__asm        jmp    near ptr 0x00497DE4;
// LINE 107:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497de9
int32_t SmackerBuffer::SetPalette() {
// LINE 114:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00497E19;
// LINE 116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004C4618;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        jmp    near ptr 0x00497E20;
// LINE 117:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00497E20;
// LINE 118:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497e25
int32_t SmackerBuffer::CreateSurface() {
// LINE 131:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 132:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00497E48;
// LINE 133:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00497F1D;
// LINE 134:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00497E5C;
// LINE 135:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00497F1D;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   0x004C4624;
	__asm        add    esp, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
// LINE 138:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jne    near ptr 0x00497EA9;
// LINE 139:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00497F1D;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x43C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 148:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049805B;
// LINE 149:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00497F1D;
// LINE 150:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497f22
int32_t SmackerBuffer::Open(char * szNewFilePath, unsigned long nFlags, unsigned long nExraBuffering) {
// LINE 159:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 160:
	__asm        cmp    szNewFilePath, 0;
	__asm        je     near ptr 0x00497F4B;
// LINE 161:
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 162:
	__asm        mov    eax, nExraBuffering;
	__asm        push   eax;
	__asm        mov    eax, nFlags;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x004C4630;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 165:
	__asm        push   0x493E0;
	__asm        call   0x004C462A;
	__asm        add    esp, 4;
// LINE 168:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 169:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00497F8A;
// LINE 170:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00497f91
void SmackerBuffer::Close() {
// LINE 178:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 179:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00497FC3;
// LINE 180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004C463C;
	__asm        add    esp, 4;
// LINE 181:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 183:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00497FE9;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4636;
	__asm        add    esp, 4;
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 187:
	__asm        jmp    near ptr 0x00497FEE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497ff3
void SmackerBuffer::Reset() {
// LINE 194:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 196:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        je     near ptr 0x00498019;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x00498039;
// LINE 198:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4642;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0049802F;
// LINE 199:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 201:
	__asm        jmp    near ptr 0x0049803E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498043
void SmackerBuffer::ClearBuffer(int32_t nPaletteIndex) {
// LINE 211:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 219:
	__asm        jmp    near ptr 0x00498054;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049805b
void SmackerBuffer::SetWindow(void * __ptr32 myNewWindow) {
	struct SparkalRect rectWindowSparkal;
	struct tagRECT rectWindow;

// LINE 228:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 229:
	__asm        mov    eax, myNewWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 233:
	__asm        jmp    near ptr 0x00498075;
// LINE 236:
	__asm        lea    eax, rectWindow.left;
	__asm        push   eax;
	__asm        mov    eax, myNewWindow;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 237:
	__asm        mov    eax, rectWindow.left;
	__asm        mov    rectWindowSparkal.left, eax;
// LINE 238:
	__asm        mov    eax, rectWindow.right;
	__asm        mov    rectWindowSparkal.right, eax;
// LINE 239:
	__asm        mov    eax, rectWindow.top;
	__asm        mov    rectWindowSparkal.top, eax;
// LINE 240:
	__asm        mov    eax, rectWindow.bottom;
	__asm        mov    rectWindowSparkal.bottom, eax;
// LINE 241:
	__asm        lea    eax, rectWindowSparkal.left;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004980DF;
// LINE 243:
	__asm        jmp    near ptr 0x004980AC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004980b3
void SmackerBuffer::SetWindow(class CSparkalWindow* myNewWindow) {
// LINE 251:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 252:
	__asm        jmp    near ptr 0x004980C4;
	__asm        mov    eax, myNewWindow;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049805B;
// LINE 253:
	__asm        jmp    near ptr 0x004980D8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004980df
void SmackerBuffer::CenterBufferInRect(struct SparkalRect* rectParent) {
	int32_t nActualDestinationHeight;
	int32_t nActualDestinationWidth;

// LINE 268:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x00498106;
// LINE 273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    nActualDestinationWidth, eax;
// LINE 274:
	__asm        jmp    near ptr 0x0049810F;
// LINE 275:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    nActualDestinationWidth, eax;
// LINE 277:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0049812A;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    nActualDestinationHeight, eax;
// LINE 279:
	__asm        jmp    near ptr 0x00498133;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    nActualDestinationHeight, eax;
// LINE 282:
	__asm        mov    eax, rectParent;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectParent;
	__asm        sub    eax, [ecx];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, eax;
	__asm        mov    eax, nActualDestinationWidth;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x24], ecx;
// LINE 283:
	__asm        mov    eax, rectParent;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectParent;
	__asm        sub    eax, [ecx+4];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, eax;
	__asm        mov    eax, nActualDestinationHeight;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x28], ecx;
// LINE 284:
	__asm        jmp    near ptr 0x00498181;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00498188
int32_t SmackerBuffer::ComposeToWindow() {
	void * __ptr32 dc;
	struct tagRECT rectFill;
	unsigned long colorRefFill;
	void * __ptr32 hBrush;

// LINE 305:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 313:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x004981A8;
// LINE 314:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00498484;
// LINE 316:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004981C4;
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 319:
	__asm        jmp    near ptr 0x004982C8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x004982C8;
// LINE 321:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    dc, eax;
// LINE 322:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00498267;
// LINE 325:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x15];
	__asm        shl    ecx, 8;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x16];
	__asm        or     ecx, edx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x14];
	__asm        shl    edx, 0x10;
	__asm        or     ecx, edx;
	__asm        mov    colorRefFill, ecx;
// LINE 326:
	__asm        mov    eax, colorRefFill;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35D0];
	__asm        mov    hBrush, eax;
// LINE 327:
	__asm        mov    rectFill.left, 0;
// LINE 328:
	__asm        mov    rectFill.top, 0;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    rectFill.right, eax;
// LINE 330:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        mov    rectFill.bottom, eax;
// LINE 331:
	__asm        mov    eax, hBrush;
	__asm        push   eax;
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        mov    eax, dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3888];
// LINE 332:
	__asm        mov    eax, hBrush;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 334:
	__asm        jmp    near ptr 0x004982AD;
// LINE 337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x004982AD;
// LINE 338:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, dc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004C464E;
	__asm        add    esp, 0x20;
// LINE 340:
	__asm        mov    eax, dc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 344:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498484;
// LINE 347:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00498473;
// LINE 348:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C466C;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0049846E;
// LINE 349:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00498422;
// LINE 350:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x00498367;
// LINE 351:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        add    eax, 0x6C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004C4666;
	__asm        add    esp, 0xC;
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x2C], 0x100;
	__asm        jae    near ptr 0x00498367;
// LINE 354:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x438];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4660;
	__asm        add    esp, 0x10;
// LINE 357:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    dc, eax;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4654;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00498411;
// LINE 362:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x380];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x37C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x378];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x374];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, dc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004C464E;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0049840C;
// LINE 364:
	__asm        jmp    near ptr 0x00498411;
// LINE 366:
	__asm        jmp    near ptr 0x00498386;
// LINE 367:
	__asm        mov    eax, dc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        cmp    eax, [ecx+0x370];
	__asm        jne    near ptr 0x0049845F;
// LINE 374:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0049845F;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 2;
// LINE 376:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498484;
// LINE 379:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4648;
	__asm        add    esp, 4;
// LINE 382:
	__asm        jmp    near ptr 0x0049847D;
// LINE 383:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x00498484;
// LINE 385:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00498484;
// LINE 386:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498489
void * __ptr32 VRSmackerInit(char * szSmackerFilePath, int32_t bPreserveBufferMemory) {
	class VRBmpSmackerBuffer* tempVRBmpSmackerBuffer;

// LINE 423:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 427:
	__asm        push   0x164;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004984C8;
	__asm        mov    eax, bPreserveBufferMemory;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, szSmackerFilePath;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x004985F4;
	__asm        mov    tempVRBmpSmackerBuffer, eax;
	__asm        jmp    near ptr 0x004984CF;
	__asm        mov    tempVRBmpSmackerBuffer, 0;
// LINE 428:
	__asm        mov    eax, tempVRBmpSmackerBuffer;
	__asm        jmp    near ptr 0x004984D7;
// LINE 429:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004984dc
void VRSmackerDestroy(void * __ptr32 pVRSmacker) {
// LINE 432:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 433:
	__asm        mov    eax, pVRSmacker;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049850C;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0049850C;
// LINE 434:
	__asm        jmp    near ptr 0x00498511;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498516
int32_t VRSmackerSetBitmap(void * __ptr32 pVRSmacker, char * szVRBitmap, int32_t nFlags, int32_t bPreserveBitmapMemory) {
// LINE 439:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 441:
	__asm        mov    eax, bPreserveBitmapMemory;
	__asm        push   eax;
	__asm        mov    eax, nFlags;
	__asm        push   eax;
	__asm        mov    eax, szVRBitmap;
	__asm        push   eax;
	__asm        mov    eax, pVRSmacker;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pVRSmacker;
	__asm        call   dword ptr [eax+0x28];
	__asm        jmp    near ptr 0x00498538;
// LINE 442:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049853d
int32_t VRSmackerNextFrame(void * __ptr32 pVRSmacker) {
// LINE 445:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 446:
	__asm        mov    ecx, pVRSmacker;
	__asm        call   0x00498A93;
	__asm        jmp    near ptr 0x00498550;
// LINE 447:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498555
void VRSmackerReset(void * __ptr32 pVRSmacker) {
// LINE 449:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 450:
	__asm        mov    ecx, pVRSmacker;
	__asm        call   0x00497FF3;
// LINE 451:
	__asm        jmp    near ptr 0x00498568;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049856d
int32_t VRSmackerStatus(void * __ptr32 pVRSmacker) {
// LINE 453:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 454:
	__asm        mov    eax, pVRSmacker;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0049857E;
// LINE 455:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498583
struct VRBmpHdr* VRSmackerGetBitmap(void * __ptr32 pVRSmacker) {
// LINE 457:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 458:
	__asm        mov    eax, pVRSmacker;
	__asm        mov    eax, [eax+0x158];
	__asm        jmp    near ptr 0x00498597;
// LINE 459:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049859c
char * VRSmackerGetBitmapBits(void * __ptr32 pVRSmacker) {
// LINE 461:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 462:
	__asm        mov    eax, pVRSmacker;
	__asm        mov    eax, [eax+0x15C];
	__asm        jmp    near ptr 0x004985B0;
// LINE 463:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004985b5
void VRBmpSmackerBuffer::VRBmpSmackerBuffer() {
// LINE 472:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x00497C00;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x160], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591158;
// LINE 473:
	__asm        mov    ecx, this;
	__asm        call   0x004986BF;
// LINE 474:
	__asm        jmp    near ptr 0x004985EC;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004985f4
void VRBmpSmackerBuffer::VRBmpSmackerBuffer(char * szNewFilePath, int32_t nNewDestWidth, int32_t nNewDestHeight, int32_t bNewPreserveSmackerBuffer) {
// LINE 485:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, nNewDestHeight;
	__asm        push   eax;
	__asm        mov    eax, nNewDestWidth;
	__asm        push   eax;
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00497CCF;
	__asm        mov    eax, bNewPreserveSmackerBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591158;
// LINE 486:
	__asm        mov    ecx, this;
	__asm        call   0x004986BF;
// LINE 487:
	__asm        jmp    near ptr 0x00498636;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00498640
void VRBmpSmackerBuffer::~VRBmpSmackerBuffer() {
// LINE 494:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591158;
// LINE 495:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        je     near ptr 0x00498683;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 497:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x148], 0;
	__asm        je     near ptr 0x004986A5;
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        call   0x004D5872;
	__asm        add    esp, 4;
// LINE 499:
	__asm        mov    ecx, this;
	__asm        call   0x0049891F;
// LINE 500:
	__asm        jmp    near ptr 0x004986B2;
	__asm        mov    ecx, this;
	__asm        call   0x00497DA1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004986bf
void VRBmpSmackerBuffer::InitializeVRBmpMembers() {
// LINE 507:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 508:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0;
// LINE 509:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x144], 0;
// LINE 510:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x148], 0;
// LINE 511:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14C], 0;
// LINE 512:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x154], 0;
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x158], 0;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15C], 0;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x150], 0;
// LINE 516:
	__asm        jmp    near ptr 0x00498738;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049873d
int32_t VRBmpSmackerBuffer::CreateSurface(int32_t bCopyOriginalBitmap) {
	int32_t nSizeOfHeader;
	int32_t i;

// LINE 532:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 536:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x158], 0;
	__asm        je     near ptr 0x00498763;
// LINE 537:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498918;
// LINE 540:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x0049878C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0049878C;
// LINE 541:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 542:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x004987B5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004987B5;
// LINE 543:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 545:
	__asm        mov    nSizeOfHeader, 0xC;
// LINE 546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        shl    eax, 2;
	__asm        add    nSizeOfHeader, eax;
// LINE 547:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x20];
	__asm        add    nSizeOfHeader, eax;
// LINE 549:
	__asm        mov    eax, nSizeOfHeader;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
// LINE 550:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
// LINE 551:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 2;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x158];
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
// LINE 553:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x158];
	__asm        mov    [ecx], eax;
// LINE 554:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x158];
	__asm        mov    [ecx+4], eax;
// LINE 555:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    word ptr [eax+8], 0;
// LINE 556:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    word ptr [eax+0xA], 0;
// LINE 560:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        je     near ptr 0x004988CE;
	__asm        cmp    bCopyOriginalBitmap, 0;
	__asm        je     near ptr 0x004988CE;
// LINE 561:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049888D;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jle    near ptr 0x004988BE;
// LINE 562:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        imul   eax, i;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x158];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+0xC], eax;
	__asm        jmp    near ptr 0x0049888A;
// LINE 563:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 565:
	__asm        jmp    near ptr 0x0049890E;
// LINE 566:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004988DD;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jle    near ptr 0x0049890E;
// LINE 567:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        imul   eax, i;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x158];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+0xC], eax;
// LINE 569:
	__asm        jmp    near ptr 0x004988DA;
// LINE 571:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498918;
// LINE 572:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049891f
void VRBmpSmackerBuffer::DeleteSurface() {
// LINE 580:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 581:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x154], 0;
	__asm        je     near ptr 0x00498980;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 583:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x154], 0;
// LINE 584:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x158], 0;
// LINE 585:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15C], 0;
// LINE 587:
	__asm        jmp    near ptr 0x00498985;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049898a
int32_t VRBmpSmackerBuffer::Open(char * szNewFilePath, unsigned long nFlags, unsigned long nExraBuffering) {
// LINE 595:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 597:
	__asm        cmp    szNewFilePath, 0;
	__asm        je     near ptr 0x004989B3;
// LINE 598:
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 599:
	__asm        mov    eax, nExraBuffering;
	__asm        push   eax;
	__asm        mov    eax, nFlags;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x004C4630;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 602:
	__asm        push   0x493E0;
	__asm        call   0x004C462A;
	__asm        add    esp, 4;
// LINE 607:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x160], 0;
	__asm        je     near ptr 0x004989FA;
// LINE 608:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 609:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498A04;
// LINE 610:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00498a0b
void VRBmpSmackerBuffer::ClearBuffer(int32_t nPaletteIndex) {
	int32_t i;

// LINE 620:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 623:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00498A26;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jle    near ptr 0x00498A87;
// LINE 624:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        imul   eax, i;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x158];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+0xC], eax;
// LINE 625:
	__asm        mov    eax, nPaletteIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4+0xC];
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x158];
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 626:
	__asm        jmp    near ptr 0x00498A23;
// LINE 627:
	__asm        jmp    near ptr 0x00498A8C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00498a93
int32_t VRBmpSmackerBuffer::Compose() {
// LINE 649:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 650:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00498AD8;
// LINE 652:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x158], 0;
	__asm        jne    near ptr 0x00498AD3;
// LINE 653:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 658:
	__asm        jmp    near ptr 0x00498BF4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x00498B1E;
// LINE 659:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00498B0F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x158], 0;
	__asm        je     near ptr 0x00498B0F;
// LINE 660:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 661:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498BFB;
// LINE 664:
	__asm        jmp    near ptr 0x00498BF4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00498BEA;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C466C;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00498BE5;
// LINE 666:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 667:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        cmp    eax, [ecx+0x370];
	__asm        jne    near ptr 0x00498BD6;
// LINE 669:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x00498BD6;
// LINE 670:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 2;
// LINE 671:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x160], 0;
	__asm        jne    near ptr 0x00498BCC;
// LINE 672:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 673:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498BFB;
// LINE 676:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4648;
	__asm        add    esp, 4;
// LINE 679:
	__asm        jmp    near ptr 0x00498BF4;
// LINE 680:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x00498BFB;
// LINE 682:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00498BFB;
// LINE 683:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498c00
int32_t VRBmpSmackerBuffer::SetDefaultVRBmp(char * szNewVRBmpName, int32_t nNewVRBmpFlags, int32_t bNewPreserveBmp) {
// LINE 698:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 699:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        je     near ptr 0x00498C3A;
// LINE 700:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 701:
	__asm        mov    eax, szNewVRBmpName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
// LINE 702:
	__asm        mov    eax, szNewVRBmpName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 703:
	__asm        mov    eax, nNewVRBmpFlags;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
// LINE 704:
	__asm        mov    eax, bNewPreserveBmp;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
// LINE 706:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 707:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498C9C;
// LINE 708:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00498ca3
int32_t VRBmpSmackerBuffer::DrawDefaultVRBmp() {
	int32_t nHeightToCopy;
	int32_t nWidthToCopy;
	int32_t i;
	int32_t nBmpHeight;
	int32_t nBmpWidth;

// LINE 722:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 730:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        je     near ptr 0x00498E8D;
// LINE 732:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x148], 0;
	__asm        jne    near ptr 0x00498D2D;
// LINE 733:
	__asm        push   0x59A208;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        call   0x004D5356;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 734:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x148], 0;
	__asm        jne    near ptr 0x00498D10;
// LINE 735:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00498EE3;
// LINE 736:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 745:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x158], 0;
	__asm        je     near ptr 0x00498E8D;
// LINE 746:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    eax, [eax];
	__asm        mov    nBmpWidth, eax;
// LINE 747:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    eax, [eax+4];
	__asm        mov    nBmpHeight, eax;
// LINE 748:
	__asm        mov    eax, this;
	__asm        mov    ecx, nBmpWidth;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    near ptr 0x00498D74;
// LINE 749:
	__asm        mov    eax, nBmpWidth;
	__asm        mov    nWidthToCopy, eax;
// LINE 750:
	__asm        jmp    near ptr 0x00498D7D;
// LINE 751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    nWidthToCopy, eax;
// LINE 752:
	__asm        mov    eax, this;
	__asm        mov    ecx, nBmpHeight;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jle    near ptr 0x00498D97;
// LINE 753:
	__asm        mov    eax, nBmpHeight;
	__asm        mov    nHeightToCopy, eax;
// LINE 754:
	__asm        jmp    near ptr 0x00498DA0;
// LINE 755:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    nHeightToCopy, eax;
// LINE 757:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00498DAF;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    nHeightToCopy, eax;
	__asm        jle    near ptr 0x00498E40;
// LINE 759:
	__asm        mov    eax, nWidthToCopy;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x158];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 762:
	__asm        mov    eax, this;
	__asm        mov    ecx, nWidthToCopy;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    near ptr 0x00498E3B;
// LINE 764:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, nWidthToCopy;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x158];
	__asm        add    eax, nWidthToCopy;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 765:
	__asm        jmp    near ptr 0x00498DAC;
// LINE 766:
	__asm        mov    eax, nBmpHeight;
	__asm        cmp    nHeightToCopy, eax;
	__asm        jge    near ptr 0x00498E8D;
// LINE 767:
	__asm        jmp    near ptr 0x00498E54;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    nBmpHeight, eax;
	__asm        jle    near ptr 0x00498E8D;
// LINE 768:
	__asm        push   0;
	__asm        mov    eax, nBmpWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x158];
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00498E51;
// LINE 774:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x150], 0;
	__asm        jne    near ptr 0x00498ED9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x148], 0;
	__asm        je     near ptr 0x00498ED9;
// LINE 775:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        call   0x004D5872;
	__asm        add    esp, 4;
// LINE 776:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x148], 0;
// LINE 777:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14C], 0;
// LINE 779:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00498EE3;
// LINE 780:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498ee8
void SmackerBackBuffer::SmackerBackBuffer() {
// LINE 805:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x00497C00;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x140;
	__asm        call   0x0046E690;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5911F0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0x591188;
// LINE 806:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x274], 0;
// LINE 807:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x148], 0;
// LINE 808:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14C], 0;
// LINE 809:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x278], 0;
// LINE 810:
	__asm        jmp    near ptr 0x00498F59;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00498f61
void SmackerBackBuffer::SmackerBackBuffer(char * szNewFilePath, int32_t bNewUseSmackBuf, int32_t nNewWidth, int32_t nNewHeight, int32_t nNewDestWidth, int32_t nNewDestHeight) {
// LINE 819:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, nNewDestHeight;
	__asm        push   eax;
	__asm        mov    eax, nNewDestWidth;
	__asm        push   eax;
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00497CCF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x140;
	__asm        call   0x0046E690;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5911F0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0x591188;
// LINE 820:
	__asm        mov    eax, bNewUseSmackBuf;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x274], eax;
// LINE 821:
	__asm        mov    eax, nNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 822:
	__asm        mov    eax, nNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 823:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x278], 0;
// LINE 824:
	__asm        jmp    near ptr 0x00498FDB;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00498fe5
void SmackerBackBuffer::~SmackerBackBuffer() {
// LINE 832:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5911F0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x140], 0x591188;
// LINE 834:
	__asm        mov    ecx, this;
	__asm        call   0x00497F91;
// LINE 835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x278], 0;
	__asm        je     near ptr 0x00499039;
// LINE 837:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18C], 0;
// LINE 838:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x190], 0;
// LINE 841:
	__asm        jmp    near ptr 0x0049903E;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00499058;
	__asm        mov    eax, this;
	__asm        add    eax, 0x140;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0049905F;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    ecx, this;
	__asm        call   0x00497DA1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00499074
void SmackerBackBuffer::SetDirectBlit() {
// LINE 848:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 849:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x278], 1;
// LINE 850:
	__asm        jmp    near ptr 0x00499092;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00499097
int32_t SmackerBackBuffer::Initialize() {
// LINE 865:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 866:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x278], 0;
	__asm        je     near ptr 0x004990BD;
// LINE 867:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004990CD;
// LINE 868:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
	__asm        jmp    near ptr 0x004990CD;
// LINE 869:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004990d2
void SmackerBackBuffer::SetBackBufferData(char * szNewFilePath, int32_t bNewUseSmackBuf, int32_t nNewWidth, int32_t nNewHeight, int32_t nNewDestinationWidth, int32_t nNewDestinationHeight) {
// LINE 883:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 884:
	__asm        cmp    szNewFilePath, 0;
	__asm        je     near ptr 0x00499100;
// LINE 885:
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 886:
	__asm        jmp    near ptr 0x00499107;
// LINE 887:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x3C], 0;
// LINE 889:
	__asm        mov    eax, bNewUseSmackBuf;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x274], eax;
// LINE 890:
	__asm        mov    eax, nNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 891:
	__asm        mov    eax, nNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 892:
	__asm        mov    eax, nNewDestinationWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 893:
	__asm        mov    eax, nNewDestinationHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 894:
	__asm        jmp    near ptr 0x00499142;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00499149
int32_t SmackerBackBuffer::Open(char * szNewFilePath, unsigned long nFlags, unsigned long nExraBuffering) {
// LINE 901:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 902:
	__asm        cmp    szNewFilePath, 0;
	__asm        je     near ptr 0x00499172;
// LINE 903:
	__asm        mov    eax, szNewFilePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 904:
	__asm        mov    eax, nExraBuffering;
	__asm        push   eax;
	__asm        mov    eax, nFlags;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x004C4630;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 905:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x004991A3;
// LINE 906:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00499203;
// LINE 908:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 909:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 912:
	__asm        push   0x493E0;
	__asm        call   0x004C462A;
	__asm        add    esp, 4;
// LINE 915:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x278], 0;
	__asm        je     near ptr 0x004991EE;
// LINE 916:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499203;
// LINE 917:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 918:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499203;
// LINE 919:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0049920a
int32_t SmackerBackBuffer::CreateSurface() {
	long ddrval;

// LINE 933:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 946:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x278], 0;
	__asm        je     near ptr 0x00499230;
// LINE 947:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499391;
// LINE 952:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18C], 0;
	__asm        je     near ptr 0x0049924A;
// LINE 953:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499391;
// LINE 956:
	__asm        push   0x6C;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x198;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 957:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x198], 0x6C;
// LINE 958:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x19C], 6;
// LINE 959:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x200], 0x840;
// LINE 960:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AC], 0;
// LINE 961:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1A4], eax;
// LINE 962:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1A0], eax;
// LINE 963:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15C], 0;
// LINE 964:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x160], 0;
// LINE 965:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
// LINE 966:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
// LINE 968:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x198;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    ddrval, eax;
// LINE 969:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x00499345;
// LINE 970:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00499331;
	__asm        push   0x59A20C;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 971:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00499391;
// LINE 977:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14C];
	__asm        add    ds:[0x599DA0], eax;
// LINE 981:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax];
// LINE 982:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        add    ecx, 0x140;
	__asm        call   dword ptr [eax+4];
// LINE 986:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499391;
// LINE 987:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00499396
unsigned long SmackerBackBuffer::Compose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
// LINE 1014:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1015:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x13C], 0;
	__asm        jne    near ptr 0x004993C4;
// LINE 1016:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax-0x13C], 1;
// LINE 1018:
	__asm        jmp    near ptr 0x004994A2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x13C], 2;
	__asm        jne    near ptr 0x004994A2;
// LINE 1019:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x134], 0;
	__asm        je     near ptr 0x00499435;
// LINE 1020:
// Block start:
	struct SparkalRect rectFill;
	__asm        jmp    near ptr 0x004993E9;
// LINE 1021:
	__asm        mov    eax, DestLeft;
	__asm        mov    rectFill.left, eax;
// LINE 1022:
	__asm        mov    eax, DestTop;
	__asm        mov    rectFill.top, eax;
// LINE 1023:
	__asm        jmp    near ptr 0x004993FA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, DestLeft;
	__asm        mov    rectFill.right, eax;
// LINE 1024:
	__asm        jmp    near ptr 0x0049940B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, DestTop;
	__asm        mov    rectFill.bottom, eax;
// LINE 1025:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 1027:
// Block end:
	__asm        jmp    near ptr 0x00499498;
// LINE 1030:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x00499474;
// LINE 1032:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499D5C;
// LINE 1034:
	__asm        jmp    near ptr 0x00499498;
// LINE 1036:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046F948;
// LINE 1039:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499766;
// LINE 1042:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x108], 0;
	__asm        je     near ptr 0x00499755;
// LINE 1043:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C466C;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00499750;
// LINE 1044:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x004995F2;
// LINE 1048:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x00499562;
// LINE 1049:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        add    eax, 0x6C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        push   eax;
	__asm        call   0x004C4666;
	__asm        add    esp, 0xC;
// LINE 1050:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        cmp    dword ptr [eax+0x2C], 0x100;
	__asm        jae    near ptr 0x00499562;
// LINE 1052:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        mov    eax, [eax+0x438];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C4660;
	__asm        add    esp, 0x10;
// LINE 1055:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1057:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x114], 0;
	__asm        jne    near ptr 0x004995C3;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x110], 0;
	__asm        jne    near ptr 0x004995C3;
// LINE 1059:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499B35;
// LINE 1060:
	__asm        jmp    near ptr 0x004995ED;
// LINE 1062:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499D5C;
// LINE 1064:
	__asm        jmp    near ptr 0x004996F5;
// LINE 1065:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x138], 0;
	__asm        je     near ptr 0x0049966E;
// LINE 1066:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax];
// LINE 1067:
	__asm        jmp    near ptr 0x00499611;
	__asm        jmp    near ptr 0x00499616;
	__asm        jmp    near ptr 0x0049961B;
	__asm        push   0;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 1068:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1069:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+4];
// LINE 1071:
	__asm        jmp    near ptr 0x004996F5;
// LINE 1072:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 1073:
	__asm        jmp    near ptr 0x0049967D;
	__asm        jmp    near ptr 0x00499682;
	__asm        jmp    near ptr 0x00499687;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 1074:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1075:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 1078:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046F948;
// LINE 1081:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx-0x108];
	__asm        cmp    eax, [ecx+0x370];
	__asm        jne    near ptr 0x0049973E;
// LINE 1082:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x138], 0;
	__asm        jne    near ptr 0x0049973E;
// LINE 1083:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax-0x13C], 2;
// LINE 1084:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499766;
// LINE 1087:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C4648;
	__asm        add    esp, 4;
// LINE 1090:
	__asm        jmp    near ptr 0x0049975F;
// LINE 1091:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x00499766;
// LINE 1093:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00499766;
// LINE 1094:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0049976d
unsigned long SmackerBackBuffer::StretchCompose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long DestRight, long DestBottom, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
// LINE 1104:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1105:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x13C], 0;
	__asm        jne    near ptr 0x0049979B;
// LINE 1106:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax-0x13C], 1;
// LINE 1108:
	__asm        jmp    near ptr 0x0049986B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x13C], 2;
	__asm        jne    near ptr 0x0049986B;
// LINE 1109:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x134], 0;
	__asm        je     near ptr 0x004997F6;
// LINE 1110:
// Block start:
	struct SparkalRect rectFill;
	__asm        jmp    near ptr 0x004997C0;
// LINE 1111:
	__asm        mov    eax, DestLeft;
	__asm        mov    rectFill.left, eax;
// LINE 1112:
	__asm        mov    eax, DestTop;
	__asm        mov    rectFill.top, eax;
// LINE 1113:
	__asm        mov    eax, DestRight;
	__asm        mov    rectFill.right, eax;
// LINE 1114:
	__asm        mov    eax, DestBottom;
	__asm        mov    rectFill.bottom, eax;
// LINE 1115:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 1117:
// Block end:
	__asm        jmp    near ptr 0x00499861;
// LINE 1120:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x00499835;
// LINE 1122:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499D5C;
// LINE 1124:
	__asm        jmp    near ptr 0x00499861;
// LINE 1127:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestBottom;
	__asm        push   eax;
	__asm        mov    eax, DestRight;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046FE13;
// LINE 1130:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499B2E;
// LINE 1133:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x108], 0;
	__asm        je     near ptr 0x00499B1D;
// LINE 1134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C466C;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00499B18;
// LINE 1135:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x004999BB;
// LINE 1139:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x0049992B;
// LINE 1140:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        add    eax, 0x6C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        push   eax;
	__asm        call   0x004C4666;
	__asm        add    esp, 0xC;
// LINE 1141:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        cmp    dword ptr [eax+0x2C], 0x100;
	__asm        jae    near ptr 0x0049992B;
// LINE 1143:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        mov    eax, [eax+0x438];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x10C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C4660;
	__asm        add    esp, 0x10;
// LINE 1146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1148:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x114], 0;
	__asm        jne    near ptr 0x0049998C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x110], 0;
	__asm        jne    near ptr 0x0049998C;
// LINE 1150:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499B35;
// LINE 1151:
	__asm        jmp    near ptr 0x004999B6;
// LINE 1153:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        sub    ecx, 0x140;
	__asm        call   0x00499D5C;
// LINE 1155:
	__asm        jmp    near ptr 0x00499ABD;
// LINE 1156:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x138], 0;
	__asm        je     near ptr 0x00499A33;
// LINE 1157:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax];
// LINE 1158:
	__asm        jmp    near ptr 0x004999DA;
	__asm        jmp    near ptr 0x004999DF;
	__asm        jmp    near ptr 0x004999E4;
	__asm        push   0;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 1159:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1160:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+4];
// LINE 1162:
	__asm        jmp    near ptr 0x00499ABD;
// LINE 1163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 1164:
	__asm        jmp    near ptr 0x00499A42;
	__asm        jmp    near ptr 0x00499A47;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C461E;
	__asm        add    esp, 0x1C;
// LINE 1165:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C465A;
	__asm        add    esp, 4;
// LINE 1166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 1170:
	__asm        mov    eax, SrcBottom;
	__asm        push   eax;
	__asm        mov    eax, SrcRight;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, DestBottom;
	__asm        push   eax;
	__asm        mov    eax, DestRight;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046FE13;
// LINE 1173:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx-0x108];
	__asm        cmp    eax, [ecx+0x370];
	__asm        jne    near ptr 0x00499B06;
// LINE 1174:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax-0x138], 0;
	__asm        jne    near ptr 0x00499B06;
// LINE 1175:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax-0x13C], 2;
// LINE 1176:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00499B2E;
// LINE 1179:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax-0x108];
	__asm        push   eax;
	__asm        call   0x004C4648;
	__asm        add    esp, 4;
// LINE 1182:
	__asm        jmp    near ptr 0x00499B27;
// LINE 1183:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x00499B2E;
// LINE 1185:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00499B2E;
// LINE 1186:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x00499b35
void SmackerBackBuffer::BltParts(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
	char * pOriginalSourceImageBits;
	unsigned long nLastRecty2;
	unsigned long nLastRectw;
	unsigned long i;
	unsigned long nLastRecty;
	unsigned long nLastRectx;
	unsigned long nLastRecth;
	int32_t nSourceImageStride;
	char * pDestImageBits;
	int32_t nDestImageStride;
	char * pSourceImageBits;
	char * pOriginalDestImageBits;
	unsigned long nLastRectx2;

// LINE 1215:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00499B53;
// LINE 1231:
	__asm        jmp    near ptr 0x00499D55;
// LINE 1233:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax];
// LINE 1234:
	__asm        jmp    near ptr 0x00499B62;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pOriginalDestImageBits, eax;
// LINE 1235:
	__asm        jmp    near ptr 0x00499B70;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    nDestImageStride, eax;
// LINE 1236:
	__asm        mov    eax, DestTop;
	__asm        imul   eax, nDestImageStride;
	__asm        add    eax, DestLeft;
	__asm        add    pOriginalDestImageBits, eax;
// LINE 1237:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x43C];
	__asm        mov    pOriginalSourceImageBits, eax;
// LINE 1238:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    nSourceImageStride, eax;
// LINE 1243:
	__asm        cmp    SrcRight, 0;
	__asm        jne    near ptr 0x00499BB7;
// LINE 1244:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    SrcRight, eax;
// LINE 1245:
	__asm        cmp    SrcBottom, 0;
	__asm        jne    near ptr 0x00499BCD;
// LINE 1246:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    SrcBottom, eax;
// LINE 1248:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        call   0x004C4654;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00499D45;
// LINE 1250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x374];
	__asm        add    eax, DestLeft;
	__asm        mov    nLastRectx, eax;
// LINE 1251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x378];
	__asm        add    eax, DestTop;
	__asm        mov    nLastRecty, eax;
// LINE 1252:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x37C];
	__asm        mov    nLastRectw, eax;
// LINE 1253:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x380];
	__asm        mov    nLastRecth, eax;
// LINE 1254:
	__asm        mov    eax, nLastRectw;
	__asm        add    eax, nLastRectx;
	__asm        mov    nLastRectx2, eax;
// LINE 1255:
	__asm        mov    eax, nLastRecth;
	__asm        add    eax, nLastRecty;
	__asm        mov    nLastRecty2, eax;
// LINE 1259:
	__asm        mov    eax, nLastRectx;
	__asm        cmp    SrcLeft, eax;
	__asm        jbe    near ptr 0x00499C6A;
// LINE 1260:
	__asm        mov    eax, nLastRectx2;
	__asm        cmp    SrcLeft, eax;
	__asm        jbe    near ptr 0x00499C64;
// LINE 1261:
	__asm        jmp    near ptr 0x00499BCD;
// LINE 1262:
	__asm        jmp    near ptr 0x00499C6A;
// LINE 1263:
	__asm        mov    eax, SrcLeft;
	__asm        mov    nLastRectx, eax;
// LINE 1265:
	__asm        mov    eax, nLastRectx2;
	__asm        cmp    SrcRight, eax;
	__asm        jae    near ptr 0x00499C95;
// LINE 1266:
	__asm        mov    eax, nLastRectx;
	__asm        cmp    SrcRight, eax;
	__asm        jae    near ptr 0x00499C8C;
// LINE 1267:
	__asm        jmp    near ptr 0x00499BCD;
// LINE 1268:
	__asm        jmp    near ptr 0x00499C95;
// LINE 1269:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, nLastRectx;
	__asm        mov    nLastRectw, eax;
// LINE 1271:
	__asm        mov    eax, nLastRecty;
	__asm        cmp    SrcTop, eax;
	__asm        jbe    near ptr 0x00499CBD;
// LINE 1272:
	__asm        mov    eax, nLastRecty2;
	__asm        cmp    SrcTop, eax;
	__asm        jbe    near ptr 0x00499CB7;
// LINE 1273:
	__asm        jmp    near ptr 0x00499BCD;
// LINE 1274:
	__asm        jmp    near ptr 0x00499CBD;
// LINE 1275:
	__asm        mov    eax, SrcTop;
	__asm        mov    nLastRecty, eax;
// LINE 1277:
	__asm        mov    eax, nLastRecty2;
	__asm        cmp    SrcBottom, eax;
	__asm        jae    near ptr 0x00499CE8;
// LINE 1278:
	__asm        mov    eax, nLastRecty;
	__asm        cmp    SrcBottom, eax;
	__asm        jae    near ptr 0x00499CDF;
// LINE 1279:
	__asm        jmp    near ptr 0x00499BCD;
// LINE 1280:
	__asm        jmp    near ptr 0x00499CE8;
// LINE 1281:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, nLastRecty;
	__asm        mov    nLastRecth, eax;
// LINE 1286:
	__asm        mov    eax, nLastRecty;
	__asm        imul   eax, nDestImageStride;
	__asm        add    eax, nLastRectx;
	__asm        add    eax, pOriginalDestImageBits;
	__asm        mov    pDestImageBits, eax;
// LINE 1288:
	__asm        mov    eax, nLastRecty;
	__asm        imul   eax, nSourceImageStride;
	__asm        add    eax, nLastRectx;
	__asm        add    eax, pOriginalSourceImageBits;
	__asm        mov    pSourceImageBits, eax;
// LINE 1290:
	__asm        mov    i, 0;
// LINE 1291:
	__asm        mov    eax, nLastRecth;
	__asm        cmp    i, eax;
	__asm        jae    near ptr 0x00499D40;
// LINE 1293:
	__asm        mov    eax, nLastRectw;
	__asm        push   eax;
	__asm        mov    eax, pSourceImageBits;
	__asm        push   eax;
	__asm        mov    eax, pDestImageBits;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 1294:
	__asm        mov    eax, nDestImageStride;
	__asm        add    pDestImageBits, eax;
// LINE 1295:
	__asm        mov    eax, nSourceImageStride;
	__asm        add    pSourceImageBits, eax;
// LINE 1296:
	__asm        jmp    near ptr 0x00499D0F;
// LINE 1297:
	__asm        jmp    near ptr 0x00499BCD;
// LINE 1298:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+4];
// LINE 1299:
	__asm        jmp    near ptr 0x00499D55;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x00499d5c
void SmackerBackBuffer::BltAll(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
	int32_t nSourceImageWidth;
	int32_t nSourceImageHeight;
	int32_t i;
	int32_t nSourceImageStride;
	char * pDestImageBits;
	int32_t nDestImageStride;
	char * pSourceImageBits;

// LINE 1328:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1340:
	__asm        mov    i, 0;
// LINE 1342:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        jne    near ptr 0x00499D81;
// LINE 1343:
	__asm        jmp    near ptr 0x00499E28;
// LINE 1345:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax];
// LINE 1346:
	__asm        jmp    near ptr 0x00499D90;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestImageBits, eax;
// LINE 1347:
	__asm        jmp    near ptr 0x00499D9E;
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    nDestImageStride, eax;
// LINE 1348:
	__asm        mov    eax, DestTop;
	__asm        imul   eax, nDestImageStride;
	__asm        add    eax, DestLeft;
	__asm        add    pDestImageBits, eax;
// LINE 1349:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x43C];
	__asm        mov    pSourceImageBits, eax;
// LINE 1350:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    nSourceImageStride, eax;
// LINE 1351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    nSourceImageWidth, eax;
// LINE 1352:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    nSourceImageHeight, eax;
// LINE 1354:
	__asm        mov    eax, nSourceImageHeight;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x00499E18;
// LINE 1356:
	__asm        mov    eax, nSourceImageWidth;
	__asm        push   eax;
	__asm        mov    eax, pSourceImageBits;
	__asm        push   eax;
	__asm        mov    eax, pDestImageBits;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 1357:
	__asm        mov    eax, nDestImageStride;
	__asm        add    pDestImageBits, eax;
// LINE 1358:
	__asm        mov    eax, nSourceImageStride;
	__asm        add    pSourceImageBits, eax;
// LINE 1359:
	__asm        jmp    near ptr 0x00499DE7;
// LINE 1361:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+4];
// LINE 1362:
	__asm        jmp    near ptr 0x00499E28;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}



// Contribution: 1:00098e30-00098e68 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499e30
// SmackerBuffer::`scalar deleting destructor'



// Contribution: 1:00098e70-00098ea8 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499e70
// VRBmpSmackerBuffer::`scalar deleting destructor'



// Contribution: 1:00098eb0-00098ee8 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499eb0
// SmackerBackBuffer::`scalar deleting destructor'



// Contribution: 2:00002138-00002157 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591138
// ??_7SmackerBuffer@@6B@


// Contribution: 2:00002158-00002187 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591158
// ??_7VRBmpSmackerBuffer@@6B@


// Contribution: 2:00002188-000021eb Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591188
// ??_7SmackerBackBuffer@@6BCBackBuffer@@@


// Contribution: 2:000021f0-00002217 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005911f0
// ??_7SmackerBackBuffer@@6BSmackerBuffer@@@


// Contribution: 3:00003208-00003249 Module: 17, 4 byte alignment, initialized_data, read, write, 
