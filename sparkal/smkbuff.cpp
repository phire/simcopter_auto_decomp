// Module: Smkbuff.obj
// Source: C:\Copter\source\sparkal\Smkbuff.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00096c00-00098e2e Module: 17, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00497c00
void SmackerBuffer::SmackerBuffer() {
// LINE 39:
	asm( 
"	      00497c00    push ebp"
"	      00497c01    mov ebp,esp"
"	      00497c03    sub esp,4"
"	      00497c06    push ebx"
"	      00497c07    push esi"
"	      00497c08    push edi"
"	      00497c09    mov [ebp-4],ecx"
"	      00497c0c    jmp near ptr 00497C11h"
"	      00497c11    mov eax,[ebp-4]"
"	      00497c14    mov dword ptr [eax],591138h"
);
// LINE 40:
	asm( 
"	      00497c1a    mov eax,[ebp-4]"
"	      00497c1d    mov dword ptr [eax+4],0"
);
// LINE 41:
	asm( 
"	      00497c24    mov eax,[ebp-4]"
"	      00497c27    mov dword ptr [eax+8],0"
);
// LINE 42:
	asm( 
"	      00497c2e    mov eax,[ebp-4]"
"	      00497c31    mov dword ptr [eax+0Ch],0"
);
// LINE 43:
	asm( 
"	      00497c38    mov eax,[ebp-4]"
"	      00497c3b    mov dword ptr [eax+10h],0"
);
// LINE 44:
	asm( 
"	      00497c42    mov eax,[ebp-4]"
"	      00497c45    mov byte ptr [eax+14h],0"
"	      00497c49    mov eax,[ebp-4]"
"	      00497c4c    mov al,[eax+14h]"
"	      00497c4f    mov ecx,[ebp-4]"
"	      00497c52    mov [ecx+15h],al"
"	      00497c55    mov eax,[ebp-4]"
"	      00497c58    mov al,[eax+15h]"
"	      00497c5b    mov ecx,[ebp-4]"
"	      00497c5e    mov [ecx+16h],al"
);
// LINE 45:
	asm( 
"	      00497c61    mov eax,[ebp-4]"
"	      00497c64    mov dword ptr [eax+18h],0"
);
// LINE 46:
	asm( 
"	      00497c6b    mov eax,[ebp-4]"
"	      00497c6e    mov dword ptr [eax+1Ch],0"
);
// LINE 47:
	asm( 
"	      00497c75    mov eax,[ebp-4]"
"	      00497c78    mov dword ptr [eax+20h],0"
);
// LINE 48:
	asm( 
"	      00497c7f    mov eax,[ebp-4]"
"	      00497c82    mov dword ptr [eax+24h],0"
);
// LINE 49:
	asm( 
"	      00497c89    mov eax,[ebp-4]"
"	      00497c8c    mov dword ptr [eax+28h],0"
);
// LINE 50:
	asm( 
"	      00497c93    mov eax,[ebp-4]"
"	      00497c96    mov dword ptr [eax+2Ch],0"
);
// LINE 51:
	asm( 
"	      00497c9d    mov eax,[ebp-4]"
"	      00497ca0    mov dword ptr [eax+30h],0"
);
// LINE 52:
	asm( 
"	      00497ca7    mov eax,[ebp-4]"
"	      00497caa    mov dword ptr [eax+34h],0"
);
// LINE 53:
	asm( 
"	      00497cb1    mov eax,[ebp-4]"
"	      00497cb4    mov dword ptr [eax+38h],0"
);
// LINE 54:
	asm( 
"	      00497cbb    mov eax,[ebp-4]"
"	      00497cbe    mov byte ptr [eax+3Ch],0"
);
// LINE 55:
	asm( 
"	      00497cc2    jmp near ptr 00497CC7h"
"	      00497cc7    mov eax,[ebp-4]"
"	      00497cca    pop edi"
"	      00497ccb    pop esi"
"	      00497ccc    pop ebx"
"	      00497ccd    leave"
"	      00497cce    ret"
);
}

// FUNCTION: COPTER_D 0x00497ccf
void SmackerBuffer::SmackerBuffer(char *, int32_t, int32_t) {
// LINE 62:
	asm( 
"	      00497ccf    push ebp"
"	      00497cd0    mov ebp,esp"
"	      00497cd2    sub esp,4"
"	      00497cd5    push ebx"
"	      00497cd6    push esi"
"	      00497cd7    push edi"
"	      00497cd8    mov [ebp-4],ecx"
"	      00497cdb    jmp near ptr 00497CE0h"
"	      00497ce0    mov eax,[ebp-4]"
"	      00497ce3    mov dword ptr [eax],591138h"
);
// LINE 63:
	asm( 
"	      00497ce9    mov eax,[ebp-4]"
"	      00497cec    mov dword ptr [eax+4],0"
);
// LINE 64:
	asm( 
"	      00497cf3    mov eax,[ebp-4]"
"	      00497cf6    mov dword ptr [eax+8],0"
);
// LINE 65:
	asm( 
"	      00497cfd    mov eax,[ebp-4]"
"	      00497d00    mov dword ptr [eax+0Ch],0"
);
// LINE 66:
	asm( 
"	      00497d07    mov eax,[ebp-4]"
"	      00497d0a    mov dword ptr [eax+10h],0"
);
// LINE 67:
	asm( 
"	      00497d11    mov eax,[ebp-4]"
"	      00497d14    mov dword ptr [eax+18h],0"
);
// LINE 68:
	asm( 
"	      00497d1b    mov eax,[ebp-4]"
"	      00497d1e    mov dword ptr [eax+34h],0"
);
// LINE 69:
	asm( 
"	      00497d25    mov eax,[ebp-4]"
"	      00497d28    mov dword ptr [eax+38h],0"
);
// LINE 70:
	asm( 
"	      00497d2f    mov eax,[ebp-4]"
"	      00497d32    mov dword ptr [eax+1Ch],0"
);
// LINE 71:
	asm( 
"	      00497d39    mov eax,[ebp-4]"
"	      00497d3c    mov dword ptr [eax+20h],0"
);
// LINE 72:
	asm( 
"	      00497d43    mov eax,[ebp-4]"
"	      00497d46    mov dword ptr [eax+24h],0"
);
// LINE 73:
	asm( 
"	      00497d4d    mov eax,[ebp-4]"
"	      00497d50    mov dword ptr [eax+28h],0"
);
// LINE 74:
	asm( 
"	      00497d57    mov eax,[ebp+0Ch]"
"	      00497d5a    mov ecx,[ebp-4]"
"	      00497d5d    mov [ecx+2Ch],eax"
);
// LINE 75:
	asm( 
"	      00497d60    mov eax,[ebp+10h]"
"	      00497d63    mov ecx,[ebp-4]"
"	      00497d66    mov [ecx+30h],eax"
);
// LINE 77:
	asm( 
"	      00497d69    cmp dword ptr [ebp+8],0"
"	      00497d6d    je near ptr 00497D8Bh"
);
// LINE 78:
	asm( 
"	      00497d73    mov eax,[ebp+8]"
"	      00497d76    push eax"
"	      00497d77    mov eax,[ebp-4]"
"	      00497d7a    add eax,3Ch"
"	      00497d7d    push eax"
"	      00497d7e    call 0056CEB0h"
"	      00497d83    add esp,8"
);
// LINE 79:
	asm( 
"	      00497d86    jmp near ptr 00497D92h"
);
// LINE 80:
	asm( 
"	      00497d8b    mov eax,[ebp-4]"
"	      00497d8e    mov byte ptr [eax+3Ch],0"
);
// LINE 81:
	asm( 
"	      00497d92    jmp near ptr 00497D97h"
"	      00497d97    mov eax,[ebp-4]"
"	      00497d9a    pop edi"
"	      00497d9b    pop esi"
"	      00497d9c    pop ebx"
"	      00497d9d    leave"
"	      00497d9e    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x00497da1
void SmackerBuffer::~SmackerBuffer() {
// LINE 89:
	asm( 
"	      00497da1    push ebp"
"	      00497da2    mov ebp,esp"
"	      00497da4    sub esp,4"
"	      00497da7    push ebx"
"	      00497da8    push esi"
"	      00497da9    push edi"
"	      00497daa    mov [ebp-4],ecx"
"	      00497dad    mov eax,[ebp-4]"
"	      00497db0    mov dword ptr [eax],591138h"
);
// LINE 90:
	asm( 
"	      00497db6    mov ecx,[ebp-4]"
"	      00497db9    call 00497F91h"
);
// LINE 91:
	asm( 
"	      00497dbe    jmp near ptr 00497DC3h"
"	      00497dc3    pop edi"
"	      00497dc4    pop esi"
"	      00497dc5    pop ebx"
"	      00497dc6    leave"
"	      00497dc7    ret"
);
}

// FUNCTION: COPTER_D 0x00497dc8
int32_t SmackerBuffer::Initialize() {
// LINE 105:
	asm( 
"	      00497dc8    push ebp"
"	      00497dc9    mov ebp,esp"
"	      00497dcb    sub esp,4"
"	      00497dce    push ebx"
"	      00497dcf    push esi"
"	      00497dd0    push edi"
"	      00497dd1    mov [ebp-4],ecx"
);
// LINE 106:
	asm( 
"	      00497dd4    mov eax,[ebp-4]"
"	      00497dd7    mov eax,[eax]"
"	      00497dd9    mov ecx,[ebp-4]"
"	      00497ddc    call dword ptr [eax+8]"
"	      00497ddf    jmp near ptr 00497DE4h"
);
// LINE 107:
	asm( 
"	      00497de4    pop edi"
"	      00497de5    pop esi"
"	      00497de6    pop ebx"
"	      00497de7    leave"
"	      00497de8    ret"
);
}

// FUNCTION: COPTER_D 0x00497de9
int32_t SmackerBuffer::SetPalette() {
// LINE 114:
	asm( 
"	      00497de9    push ebp"
"	      00497dea    mov ebp,esp"
"	      00497dec    sub esp,4"
"	      00497def    push ebx"
"	      00497df0    push esi"
"	      00497df1    push edi"
"	      00497df2    mov [ebp-4],ecx"
);
// LINE 115:
	asm( 
"	      00497df5    mov eax,[ebp-4]"
"	      00497df8    cmp dword ptr [eax+34h],0"
"	      00497dfc    je near ptr 00497E19h"
);
// LINE 116:
	asm( 
"	      00497e02    mov eax,[ebp-4]"
"	      00497e05    mov eax,[eax+34h]"
"	      00497e08    push eax"
"	      00497e09    call 004C4618h"
"	      00497e0e    add esp,4"
"	      00497e11    movzx eax,ax"
"	      00497e14    jmp near ptr 00497E20h"
);
// LINE 117:
	asm( 
"	      00497e19    xor eax,eax"
"	      00497e1b    jmp near ptr 00497E20h"
);
// LINE 118:
	asm( 
"	      00497e20    pop edi"
"	      00497e21    pop esi"
"	      00497e22    pop ebx"
"	      00497e23    leave"
"	      00497e24    ret"
);
}

// FUNCTION: COPTER_D 0x00497e25
int32_t SmackerBuffer::CreateSurface() {
// LINE 131:
	asm( 
"	      00497e25    push ebp"
"	      00497e26    mov ebp,esp"
"	      00497e28    sub esp,4"
"	      00497e2b    push ebx"
"	      00497e2c    push esi"
"	      00497e2d    push edi"
"	      00497e2e    mov [ebp-4],ecx"
);
// LINE 132:
	asm( 
"	      00497e31    mov eax,[ebp-4]"
"	      00497e34    cmp dword ptr [eax+34h],0"
"	      00497e38    je near ptr 00497E48h"
);
// LINE 133:
	asm( 
"	      00497e3e    mov eax,1"
"	      00497e43    jmp near ptr 00497F1Dh"
);
// LINE 134:
	asm( 
"	      00497e48    mov eax,[ebp-4]"
"	      00497e4b    cmp dword ptr [eax+38h],0"
"	      00497e4f    jne near ptr 00497E5Ch"
);
// LINE 135:
	asm( 
"	      00497e55    xor eax,eax"
"	      00497e57    jmp near ptr 00497F1Dh"
);
// LINE 137:
	asm( 
"	      00497e5c    mov eax,[ebp-4]"
"	      00497e5f    mov eax,[eax+30h]"
"	      00497e62    push eax"
"	      00497e63    mov eax,[ebp-4]"
"	      00497e66    mov eax,[eax+2Ch]"
"	      00497e69    push eax"
"	      00497e6a    mov eax,[ebp-4]"
"	      00497e6d    mov eax,[eax+38h]"
"	      00497e70    mov eax,[eax+8]"
"	      00497e73    push eax"
"	      00497e74    mov eax,[ebp-4]"
"	      00497e77    mov eax,[eax+38h]"
"	      00497e7a    mov eax,[eax+4]"
"	      00497e7d    push eax"
"	      00497e7e    push 0"
"	      00497e80    mov eax,[ebp-4]"
"	      00497e83    mov eax,[eax+18h]"
"	      00497e86    push eax"
"	      00497e87    call 004C4624h"
"	      00497e8c    add esp,18h"
"	      00497e8f    mov ecx,[ebp-4]"
"	      00497e92    mov [ecx+34h],eax"
);
// LINE 138:
	asm( 
"	      00497e95    mov eax,[ebp-4]"
"	      00497e98    cmp dword ptr [eax+34h],0"
"	      00497e9c    jne near ptr 00497EA9h"
);
// LINE 139:
	asm( 
"	      00497ea2    xor eax,eax"
"	      00497ea4    jmp near ptr 00497F1Dh"
);
// LINE 143:
	asm( 
"	      00497ea9    mov eax,[ebp-4]"
"	      00497eac    mov eax,[eax+34h]"
"	      00497eaf    mov eax,[eax]"
"	      00497eb1    push eax"
"	      00497eb2    mov eax,[ebp-4]"
"	      00497eb5    mov eax,[eax+34h]"
"	      00497eb8    mov eax,[eax+43Ch]"
"	      00497ebe    push eax"
"	      00497ebf    mov eax,[ebp-4]"
"	      00497ec2    mov eax,[eax+34h]"
"	      00497ec5    mov eax,[eax+14h]"
"	      00497ec8    push eax"
"	      00497ec9    mov eax,[ebp-4]"
"	      00497ecc    mov eax,[eax+34h]"
"	      00497ecf    mov eax,[eax+10h]"
"	      00497ed2    push eax"
"	      00497ed3    push 0"
"	      00497ed5    push 0"
"	      00497ed7    mov eax,[ebp-4]"
"	      00497eda    mov eax,[eax+38h]"
"	      00497edd    push eax"
"	      00497ede    call 004C461Eh"
"	      00497ee3    add esp,1Ch"
);
// LINE 145:
	asm( 
"	      00497ee6    mov eax,[ebp-4]"
"	      00497ee9    mov eax,[eax+38h]"
"	      00497eec    mov eax,[eax+4]"
"	      00497eef    mov ecx,[ebp-4]"
"	      00497ef2    mov [ecx+1Ch],eax"
);
// LINE 146:
	asm( 
"	      00497ef5    mov eax,[ebp-4]"
"	      00497ef8    mov eax,[eax+38h]"
"	      00497efb    mov eax,[eax+8]"
"	      00497efe    mov ecx,[ebp-4]"
"	      00497f01    mov [ecx+20h],eax"
);
// LINE 148:
	asm( 
"	      00497f04    mov eax,[ebp-4]"
"	      00497f07    mov eax,[eax+18h]"
"	      00497f0a    push eax"
"	      00497f0b    mov ecx,[ebp-4]"
"	      00497f0e    call 0049805Bh"
);
// LINE 149:
	asm( 
"	      00497f13    mov eax,1"
"	      00497f18    jmp near ptr 00497F1Dh"
);
// LINE 150:
	asm( 
"	      00497f1d    pop edi"
"	      00497f1e    pop esi"
"	      00497f1f    pop ebx"
"	      00497f20    leave"
"	      00497f21    ret"
);
}

// FUNCTION: COPTER_D 0x00497f22
int32_t SmackerBuffer::Open(char *, unsigned long, unsigned long) {
// LINE 159:
	asm( 
"	      00497f22    push ebp"
"	      00497f23    mov ebp,esp"
"	      00497f25    sub esp,4"
"	      00497f28    push ebx"
"	      00497f29    push esi"
"	      00497f2a    push edi"
"	      00497f2b    mov [ebp-4],ecx"
);
// LINE 160:
	asm( 
"	      00497f2e    cmp dword ptr [ebp+8],0"
"	      00497f32    je near ptr 00497F4Bh"
);
// LINE 161:
	asm( 
"	      00497f38    mov eax,[ebp+8]"
"	      00497f3b    push eax"
"	      00497f3c    mov eax,[ebp-4]"
"	      00497f3f    add eax,3Ch"
"	      00497f42    push eax"
"	      00497f43    call 0056CEB0h"
"	      00497f48    add esp,8"
);
// LINE 162:
	asm( 
"	      00497f4b    mov eax,[ebp+10h]"
"	      00497f4e    push eax"
"	      00497f4f    mov eax,[ebp+0Ch]"
"	      00497f52    push eax"
"	      00497f53    mov eax,[ebp-4]"
"	      00497f56    add eax,3Ch"
"	      00497f59    push eax"
"	      00497f5a    call 004C4630h"
"	      00497f5f    add esp,0Ch"
"	      00497f62    mov ecx,[ebp-4]"
"	      00497f65    mov [ecx+38h],eax"
);
// LINE 165:
	asm( 
"	      00497f68    push 493E0h"
"	      00497f6d    call 004C462Ah"
"	      00497f72    add esp,4"
);
// LINE 168:
	asm( 
"	      00497f75    mov eax,[ebp-4]"
"	      00497f78    mov eax,[eax]"
"	      00497f7a    mov ecx,[ebp-4]"
"	      00497f7d    call dword ptr [eax+8]"
);
// LINE 169:
	asm( 
"	      00497f80    mov eax,1"
"	      00497f85    jmp near ptr 00497F8Ah"
);
// LINE 170:
	asm( 
"	      00497f8a    pop edi"
"	      00497f8b    pop esi"
"	      00497f8c    pop ebx"
"	      00497f8d    leave"
"	      00497f8e    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x00497f91
void SmackerBuffer::Close() {
// LINE 178:
	asm( 
"	      00497f91    push ebp"
"	      00497f92    mov ebp,esp"
"	      00497f94    sub esp,4"
"	      00497f97    push ebx"
"	      00497f98    push esi"
"	      00497f99    push edi"
"	      00497f9a    mov [ebp-4],ecx"
);
// LINE 179:
	asm( 
"	      00497f9d    mov eax,[ebp-4]"
"	      00497fa0    cmp dword ptr [eax+34h],0"
"	      00497fa4    je near ptr 00497FC3h"
);
// LINE 180:
	asm( 
"	      00497faa    mov eax,[ebp-4]"
"	      00497fad    mov eax,[eax+34h]"
"	      00497fb0    push eax"
"	      00497fb1    call 004C463Ch"
"	      00497fb6    add esp,4"
);
// LINE 181:
	asm( 
"	      00497fb9    mov eax,[ebp-4]"
"	      00497fbc    mov dword ptr [eax+34h],0"
);
// LINE 183:
	asm( 
"	      00497fc3    mov eax,[ebp-4]"
"	      00497fc6    cmp dword ptr [eax+38h],0"
"	      00497fca    je near ptr 00497FE9h"
);
// LINE 184:
	asm( 
"	      00497fd0    mov eax,[ebp-4]"
"	      00497fd3    mov eax,[eax+38h]"
"	      00497fd6    push eax"
"	      00497fd7    call 004C4636h"
"	      00497fdc    add esp,4"
);
// LINE 185:
	asm( 
"	      00497fdf    mov eax,[ebp-4]"
"	      00497fe2    mov dword ptr [eax+38h],0"
);
// LINE 187:
	asm( 
"	      00497fe9    jmp near ptr 00497FEEh"
"	      00497fee    pop edi"
"	      00497fef    pop esi"
"	      00497ff0    pop ebx"
"	      00497ff1    leave"
"	      00497ff2    ret"
);
}

// FUNCTION: COPTER_D 0x00497ff3
void SmackerBuffer::Reset() {
// LINE 194:
	asm( 
"	      00497ff3    push ebp"
"	      00497ff4    mov ebp,esp"
"	      00497ff6    sub esp,4"
"	      00497ff9    push ebx"
"	      00497ffa    push esi"
"	      00497ffb    push edi"
"	      00497ffc    mov [ebp-4],ecx"
);
// LINE 196:
	asm( 
"	      00497fff    mov eax,[ebp-4]"
"	      00498002    cmp dword ptr [eax+4],1"
"	      00498006    je near ptr 00498019h"
"	      0049800c    mov eax,[ebp-4]"
"	      0049800f    cmp dword ptr [eax+4],2"
"	      00498013    jne near ptr 00498039h"
);
// LINE 198:
	asm( 
"	      00498019    push 0"
"	      0049801b    mov eax,[ebp-4]"
"	      0049801e    mov eax,[eax+38h]"
"	      00498021    push eax"
"	      00498022    call 004C4642h"
"	      00498027    add esp,8"
"	      0049802a    jmp near ptr 0049802Fh"
);
// LINE 199:
	asm( 
"	      0049802f    mov eax,[ebp-4]"
"	      00498032    mov dword ptr [eax+4],0"
);
// LINE 201:
	asm( 
"	      00498039    jmp near ptr 0049803Eh"
"	      0049803e    pop edi"
"	      0049803f    pop esi"
"	      00498040    pop ebx"
"	      00498041    leave"
"	      00498042    ret"
);
}

// FUNCTION: COPTER_D 0x00498043
void SmackerBuffer::ClearBuffer(int32_t) {
// LINE 211:
	asm( 
"	      00498043    push ebp"
"	      00498044    mov ebp,esp"
"	      00498046    sub esp,4"
"	      00498049    push ebx"
"	      0049804a    push esi"
"	      0049804b    push edi"
"	      0049804c    mov [ebp-4],ecx"
);
// LINE 219:
	asm( 
"	      0049804f    jmp near ptr 00498054h"
"	      00498054    pop edi"
"	      00498055    pop esi"
"	      00498056    pop ebx"
"	      00498057    leave"
"	      00498058    ret 4"
);
}

// FUNCTION: COPTER_D 0x0049805b
void SmackerBuffer::SetWindow(void * __ptr32) {
// LINE 228:
	asm( 
"	      0049805b    push ebp"
"	      0049805c    mov ebp,esp"
"	      0049805e    sub esp,24h"
"	      00498061    push ebx"
"	      00498062    push esi"
"	      00498063    push edi"
"	      00498064    mov [ebp-24h],ecx"
);
// LINE 229:
	asm( 
"	      00498067    mov eax,[ebp+8]"
"	      0049806a    mov ecx,[ebp-24h]"
"	      0049806d    mov [ecx+18h],eax"
);
// LINE 233:
	asm( 
"	      00498070    jmp near ptr 00498075h"
);
// LINE 236:
	asm( 
"	      00498075    lea eax,[ebp-10h]"
"	      00498078    push eax"
"	      00498079    mov eax,[ebp+8]"
"	      0049807c    push eax"
"	      0049807d    call dword ptr ds:[6C382Ch]"
);
// LINE 237:
	asm( 
"	      00498083    mov eax,[ebp-10h]"
"	      00498086    mov [ebp-20h],eax"
);
// LINE 238:
	asm( 
"	      00498089    mov eax,[ebp-8]"
"	      0049808c    mov [ebp-18h],eax"
);
// LINE 239:
	asm( 
"	      0049808f    mov eax,[ebp-0Ch]"
"	      00498092    mov [ebp-1Ch],eax"
);
// LINE 240:
	asm( 
"	      00498095    mov eax,[ebp-4]"
"	      00498098    mov [ebp-14h],eax"
);
// LINE 241:
	asm( 
"	      0049809b    lea eax,[ebp-20h]"
"	      0049809e    push eax"
"	      0049809f    mov ecx,[ebp-24h]"
"	      004980a2    call 004980DFh"
);
// LINE 243:
	asm( 
"	      004980a7    jmp near ptr 004980ACh"
"	      004980ac    pop edi"
"	      004980ad    pop esi"
"	      004980ae    pop ebx"
"	      004980af    leave"
"	      004980b0    ret 4"
);
}

// FUNCTION: COPTER_D 0x004980b3
void SmackerBuffer::SetWindow(class CSparkalWindow*) {
// LINE 251:
	asm( 
"	      004980b3    push ebp"
"	      004980b4    mov ebp,esp"
"	      004980b6    sub esp,4"
"	      004980b9    push ebx"
"	      004980ba    push esi"
"	      004980bb    push edi"
"	      004980bc    mov [ebp-4],ecx"
);
// LINE 252:
	asm( 
"	      004980bf    jmp near ptr 004980C4h"
"	      004980c4    mov eax,[ebp+8]"
"	      004980c7    mov eax,[eax+18h]"
"	      004980ca    push eax"
"	      004980cb    mov ecx,[ebp-4]"
"	      004980ce    call 0049805Bh"
);
// LINE 253:
	asm( 
"	      004980d3    jmp near ptr 004980D8h"
"	      004980d8    pop edi"
"	      004980d9    pop esi"
"	      004980da    pop ebx"
"	      004980db    leave"
"	      004980dc    ret 4"
);
}

// FUNCTION: COPTER_D 0x004980df
void SmackerBuffer::CenterBufferInRect(struct SparkalRect*) {
// LINE 268:
	asm( 
"	      004980df    push ebp"
"	      004980e0    mov ebp,esp"
"	      004980e2    sub esp,0Ch"
"	      004980e5    push ebx"
"	      004980e6    push esi"
"	      004980e7    push edi"
"	      004980e8    mov [ebp-0Ch],ecx"
);
// LINE 272:
	asm( 
"	      004980eb    mov eax,[ebp-0Ch]"
"	      004980ee    cmp dword ptr [eax+2Ch],0"
"	      004980f2    je near ptr 00498106h"
);
// LINE 273:
	asm( 
"	      004980f8    mov eax,[ebp-0Ch]"
"	      004980fb    mov eax,[eax+2Ch]"
"	      004980fe    mov [ebp-4],eax"
);
// LINE 274:
	asm( 
"	      00498101    jmp near ptr 0049810Fh"
);
// LINE 275:
	asm( 
"	      00498106    mov eax,[ebp-0Ch]"
"	      00498109    mov eax,[eax+1Ch]"
"	      0049810c    mov [ebp-4],eax"
);
// LINE 277:
	asm( 
"	      0049810f    mov eax,[ebp-0Ch]"
"	      00498112    cmp dword ptr [eax+30h],0"
"	      00498116    je near ptr 0049812Ah"
);
// LINE 278:
	asm( 
"	      0049811c    mov eax,[ebp-0Ch]"
"	      0049811f    mov eax,[eax+30h]"
"	      00498122    mov [ebp-8],eax"
);
// LINE 279:
	asm( 
"	      00498125    jmp near ptr 00498133h"
);
// LINE 280:
	asm( 
"	      0049812a    mov eax,[ebp-0Ch]"
"	      0049812d    mov eax,[eax+20h]"
"	      00498130    mov [ebp-8],eax"
);
// LINE 282:
	asm( 
"	      00498133    mov eax,[ebp+8]"
"	      00498136    mov eax,[eax+8]"
"	      00498139    mov ecx,[ebp+8]"
"	      0049813c    sub eax,[ecx]"
"	      0049813e    cdq"
"	      0049813f    sub eax,edx"
"	      00498141    sar eax,1"
"	      00498144    mov ecx,eax"
"	      00498146    mov eax,[ebp-4]"
"	      00498149    cdq"
"	      0049814a    sub eax,edx"
"	      0049814c    sar eax,1"
"	      0049814f    sub ecx,eax"
"	      00498151    mov eax,[ebp-0Ch]"
"	      00498154    mov [eax+24h],ecx"
);
// LINE 283:
	asm( 
"	      00498157    mov eax,[ebp+8]"
"	      0049815a    mov eax,[eax+0Ch]"
"	      0049815d    mov ecx,[ebp+8]"
"	      00498160    sub eax,[ecx+4]"
"	      00498163    cdq"
"	      00498164    sub eax,edx"
"	      00498166    sar eax,1"
"	      00498169    mov ecx,eax"
"	      0049816b    mov eax,[ebp-8]"
"	      0049816e    cdq"
"	      0049816f    sub eax,edx"
"	      00498171    sar eax,1"
"	      00498174    sub ecx,eax"
"	      00498176    mov eax,[ebp-0Ch]"
"	      00498179    mov [eax+28h],ecx"
);
// LINE 284:
	asm( 
"	      0049817c    jmp near ptr 00498181h"
"	      00498181    pop edi"
"	      00498182    pop esi"
"	      00498183    pop ebx"
"	      00498184    leave"
"	      00498185    ret 4"
);
}

// FUNCTION: COPTER_D 0x00498188
int32_t SmackerBuffer::ComposeToWindow() {
// LINE 305:
	asm( 
"	      00498188    push ebp"
"	      00498189    mov ebp,esp"
"	      0049818b    sub esp,20h"
"	      0049818e    push ebx"
"	      0049818f    push esi"
"	      00498190    push edi"
"	      00498191    mov [ebp-20h],ecx"
);
// LINE 313:
	asm( 
"	      00498194    mov eax,[ebp-20h]"
"	      00498197    cmp dword ptr [eax+38h],0"
"	      0049819b    jne near ptr 004981A8h"
);
// LINE 314:
	asm( 
"	      004981a1    xor eax,eax"
"	      004981a3    jmp near ptr 00498484h"
);
// LINE 316:
	asm( 
"	      004981a8    mov eax,[ebp-20h]"
"	      004981ab    cmp dword ptr [eax+4],0"
"	      004981af    jne near ptr 004981C4h"
);
// LINE 317:
	asm( 
"	      004981b5    mov eax,[ebp-20h]"
"	      004981b8    mov dword ptr [eax+4],1"
);
// LINE 319:
	asm( 
"	      004981bf    jmp near ptr 004982C8h"
"	      004981c4    mov eax,[ebp-20h]"
"	      004981c7    cmp dword ptr [eax+4],2"
"	      004981cb    jne near ptr 004982C8h"
);
// LINE 321:
	asm( 
"	      004981d1    mov eax,[ebp-20h]"
"	      004981d4    mov eax,[eax+18h]"
"	      004981d7    push eax"
"	      004981d8    call dword ptr ds:[6C3850h]"
"	      004981de    mov [ebp-1Ch],eax"
);
// LINE 322:
	asm( 
"	      004981e1    mov eax,[ebp-20h]"
"	      004981e4    cmp dword ptr [eax+0Ch],0"
"	      004981e8    je near ptr 00498267h"
);
// LINE 325:
	asm( 
"	      004981ee    mov eax,[ebp-20h]"
"	      004981f1    xor ecx,ecx"
"	      004981f3    mov cl,[eax+15h]"
"	      004981f6    shl ecx,8"
"	      004981f9    mov eax,[ebp-20h]"
"	      004981fc    xor edx,edx"
"	      004981fe    mov dl,[eax+16h]"
"	      00498201    or ecx,edx"
"	      00498203    mov eax,[ebp-20h]"
"	      00498206    xor edx,edx"
"	      00498208    mov dl,[eax+14h]"
"	      0049820b    shl edx,10h"
"	      0049820e    or ecx,edx"
"	      00498210    mov [ebp-8],ecx"
);
// LINE 326:
	asm( 
"	      00498213    mov eax,[ebp-8]"
"	      00498216    push eax"
"	      00498217    call dword ptr ds:[6C35D0h]"
"	      0049821d    mov [ebp-4],eax"
);
// LINE 327:
	asm( 
"	      00498220    mov dword ptr [ebp-18h],0"
);
// LINE 328:
	asm( 
"	      00498227    mov dword ptr [ebp-14h],0"
);
// LINE 329:
	asm( 
"	      0049822e    mov eax,[ebp-20h]"
"	      00498231    mov eax,[eax+38h]"
"	      00498234    mov eax,[eax+4]"
"	      00498237    mov [ebp-10h],eax"
);
// LINE 330:
	asm( 
"	      0049823a    mov eax,[ebp-20h]"
"	      0049823d    mov eax,[eax+38h]"
"	      00498240    mov eax,[eax+8]"
"	      00498243    mov [ebp-0Ch],eax"
);
// LINE 331:
	asm( 
"	      00498246    mov eax,[ebp-4]"
"	      00498249    push eax"
"	      0049824a    lea eax,[ebp-18h]"
"	      0049824d    push eax"
"	      0049824e    mov eax,[ebp-1Ch]"
"	      00498251    push eax"
"	      00498252    call dword ptr ds:[6C3888h]"
);
// LINE 332:
	asm( 
"	      00498258    mov eax,[ebp-4]"
"	      0049825b    push eax"
"	      0049825c    call dword ptr ds:[6C358Ch]"
);
// LINE 334:
	asm( 
"	      00498262    jmp near ptr 004982ADh"
);
// LINE 337:
	asm( 
"	      00498267    mov eax,[ebp-20h]"
"	      0049826a    cmp dword ptr [eax+34h],0"
"	      0049826e    je near ptr 004982ADh"
);
// LINE 338:
	asm( 
"	      00498274    mov eax,[ebp-20h]"
"	      00498277    mov eax,[eax+38h]"
"	      0049827a    mov eax,[eax+8]"
"	      0049827d    push eax"
"	      0049827e    mov eax,[ebp-20h]"
"	      00498281    mov eax,[eax+38h]"
"	      00498284    mov eax,[eax+4]"
"	      00498287    push eax"
"	      00498288    push 0"
"	      0049828a    push 0"
"	      0049828c    mov eax,[ebp-20h]"
"	      0049828f    mov eax,[eax+28h]"
"	      00498292    push eax"
"	      00498293    mov eax,[ebp-20h]"
"	      00498296    mov eax,[eax+24h]"
"	      00498299    push eax"
"	      0049829a    mov eax,[ebp-1Ch]"
"	      0049829d    push eax"
"	      0049829e    mov eax,[ebp-20h]"
"	      004982a1    mov eax,[eax+34h]"
"	      004982a4    push eax"
"	      004982a5    call 004C464Eh"
"	      004982aa    add esp,20h"
);
// LINE 340:
	asm( 
"	      004982ad    mov eax,[ebp-1Ch]"
"	      004982b0    push eax"
"	      004982b1    mov eax,[ebp-20h]"
"	      004982b4    mov eax,[eax+18h]"
"	      004982b7    push eax"
"	      004982b8    call dword ptr ds:[6C384Ch]"
);
// LINE 344:
	asm( 
"	      004982be    mov eax,1"
"	      004982c3    jmp near ptr 00498484h"
);
// LINE 347:
	asm( 
"	      004982c8    mov eax,[ebp-20h]"
"	      004982cb    cmp dword ptr [eax+38h],0"
"	      004982cf    je near ptr 00498473h"
);
// LINE 348:
	asm( 
"	      004982d5    mov eax,[ebp-20h]"
"	      004982d8    mov eax,[eax+38h]"
"	      004982db    push eax"
"	      004982dc    call 004C466Ch"
"	      004982e1    add esp,4"
"	      004982e4    test eax,eax"
"	      004982e6    jne near ptr 0049846Eh"
);
// LINE 349:
	asm( 
"	      004982ec    mov eax,[ebp-20h]"
"	      004982ef    cmp dword ptr [eax+34h],0"
"	      004982f3    je near ptr 00498422h"
);
// LINE 350:
	asm( 
"	      004982f9    mov eax,[ebp-20h]"
"	      004982fc    mov eax,[eax+38h]"
"	      004982ff    cmp dword ptr [eax+68h],0"
"	      00498303    je near ptr 00498367h"
);
// LINE 351:
	asm( 
"	      00498309    push 0"
"	      0049830b    mov eax,[ebp-20h]"
"	      0049830e    mov eax,[eax+38h]"
"	      00498311    add eax,6Ch"
"	      00498314    push eax"
"	      00498315    mov eax,[ebp-20h]"
"	      00498318    mov eax,[eax+34h]"
"	      0049831b    push eax"
"	      0049831c    call 004C4666h"
"	      00498321    add esp,0Ch"
);
// LINE 352:
	asm( 
"	      00498324    mov eax,[ebp-20h]"
"	      00498327    mov eax,[eax+34h]"
"	      0049832a    cmp dword ptr [eax+2Ch],100h"
"	      00498331    jae near ptr 00498367h"
);
// LINE 354:
	asm( 
"	      00498337    mov eax,[ebp-20h]"
"	      0049833a    mov eax,[eax+34h]"
"	      0049833d    mov eax,[eax+438h]"
"	      00498343    push eax"
"	      00498344    mov eax,[ebp-20h]"
"	      00498347    mov eax,[eax+34h]"
"	      0049834a    mov eax,[eax+28h]"
"	      0049834d    push eax"
"	      0049834e    mov eax,[ebp-20h]"
"	      00498351    mov eax,[eax+34h]"
"	      00498354    add eax,38h"
"	      00498357    push eax"
"	      00498358    mov eax,[ebp-20h]"
"	      0049835b    mov eax,[eax+38h]"
"	      0049835e    push eax"
"	      0049835f    call 004C4660h"
"	      00498364    add esp,10h"
);
// LINE 357:
	asm( 
"	      00498367    mov eax,[ebp-20h]"
"	      0049836a    mov eax,[eax+38h]"
"	      0049836d    push eax"
"	      0049836e    call 004C465Ah"
"	      00498373    add esp,4"
);
// LINE 359:
	asm( 
"	      00498376    mov eax,[ebp-20h]"
"	      00498379    mov eax,[eax+18h]"
"	      0049837c    push eax"
"	      0049837d    call dword ptr ds:[6C3850h]"
"	      00498383    mov [ebp-1Ch],eax"
);
// LINE 360:
	asm( 
"	      00498386    mov eax,[ebp-20h]"
"	      00498389    mov eax,[eax+34h]"
"	      0049838c    mov eax,[eax+4]"
"	      0049838f    push eax"
"	      00498390    mov eax,[ebp-20h]"
"	      00498393    mov eax,[eax+38h]"
"	      00498396    push eax"
"	      00498397    call 004C4654h"
"	      0049839c    add esp,8"
"	      0049839f    test eax,eax"
"	      004983a1    je near ptr 00498411h"
);
// LINE 362:
	asm( 
"	      004983a7    mov eax,[ebp-20h]"
"	      004983aa    mov eax,[eax+38h]"
"	      004983ad    mov eax,[eax+380h]"
"	      004983b3    push eax"
"	      004983b4    mov eax,[ebp-20h]"
"	      004983b7    mov eax,[eax+38h]"
"	      004983ba    mov eax,[eax+37Ch]"
"	      004983c0    push eax"
"	      004983c1    mov eax,[ebp-20h]"
"	      004983c4    mov eax,[eax+38h]"
"	      004983c7    mov eax,[eax+378h]"
"	      004983cd    push eax"
"	      004983ce    mov eax,[ebp-20h]"
"	      004983d1    mov eax,[eax+38h]"
"	      004983d4    mov eax,[eax+374h]"
"	      004983da    push eax"
"	      004983db    mov eax,[ebp-20h]"
"	      004983de    mov eax,[eax+28h]"
"	      004983e1    push eax"
"	      004983e2    mov eax,[ebp-20h]"
"	      004983e5    mov eax,[eax+24h]"
"	      004983e8    push eax"
"	      004983e9    mov eax,[ebp-1Ch]"
"	      004983ec    push eax"
"	      004983ed    mov eax,[ebp-20h]"
"	      004983f0    mov eax,[eax+34h]"
"	      004983f3    push eax"
"	      004983f4    call 004C464Eh"
"	      004983f9    add esp,20h"
"	      004983fc    movzx eax,ax"
"	      004983ff    test eax,eax"
"	      00498401    je near ptr 0049840Ch"
);
// LINE 364:
	asm( 
"	      00498407    jmp near ptr 00498411h"
);
// LINE 366:
	asm( 
"	      0049840c    jmp near ptr 00498386h"
);
// LINE 367:
	asm( 
"	      00498411    mov eax,[ebp-1Ch]"
"	      00498414    push eax"
"	      00498415    mov eax,[ebp-20h]"
"	      00498418    mov eax,[eax+18h]"
"	      0049841b    push eax"
"	      0049841c    call dword ptr ds:[6C384Ch]"
);
// LINE 373:
	asm( 
"	      00498422    mov eax,[ebp-20h]"
"	      00498425    mov eax,[eax+38h]"
"	      00498428    mov eax,[eax+0Ch]"
"	      0049842b    dec eax"
"	      0049842c    mov ecx,[ebp-20h]"
"	      0049842f    mov ecx,[ecx+38h]"
"	      00498432    cmp eax,[ecx+370h]"
"	      00498438    jne near ptr 0049845Fh"
);
// LINE 374:
	asm( 
"	      0049843e    mov eax,[ebp-20h]"
"	      00498441    cmp dword ptr [eax+8],0"
"	      00498445    jne near ptr 0049845Fh"
);
// LINE 375:
	asm( 
"	      0049844b    mov eax,[ebp-20h]"
"	      0049844e    mov dword ptr [eax+4],2"
);
// LINE 376:
	asm( 
"	      00498455    mov eax,1"
"	      0049845a    jmp near ptr 00498484h"
);
// LINE 379:
	asm( 
"	      0049845f    mov eax,[ebp-20h]"
"	      00498462    mov eax,[eax+38h]"
"	      00498465    push eax"
"	      00498466    call 004C4648h"
"	      0049846b    add esp,4"
);
// LINE 382:
	asm( 
"	      0049846e    jmp near ptr 0049847Dh"
);
// LINE 383:
	asm( 
"	      00498473    mov eax,2"
"	      00498478    jmp near ptr 00498484h"
);
// LINE 385:
	asm( 
"	      0049847d    xor eax,eax"
"	      0049847f    jmp near ptr 00498484h"
);
// LINE 386:
	asm( 
"	      00498484    pop edi"
"	      00498485    pop esi"
"	      00498486    pop ebx"
"	      00498487    leave"
"	      00498488    ret"
);
}

// FUNCTION: COPTER_D 0x00498489
void * __ptr32 VRSmackerInit() {
// LINE 423:
	asm( 
"	      00498489    push ebp"
"	      0049848a    mov ebp,esp"
"	      0049848c    sub esp,8"
"	      0049848f    push ebx"
"	      00498490    push esi"
"	      00498491    push edi"
);
// LINE 427:
	asm( 
"	      00498492    push 164h"
"	      00498497    call 0056A600h"
"	      0049849c    add esp,4"
"	      0049849f    mov [ebp-8],eax"
"	      004984a2    cmp dword ptr [ebp-8],0"
"	      004984a6    je near ptr 004984C8h"
"	      004984ac    mov eax,[ebp+0Ch]"
"	      004984af    push eax"
"	      004984b0    push 0"
"	      004984b2    push 0"
"	      004984b4    mov eax,[ebp+8]"
"	      004984b7    push eax"
"	      004984b8    mov ecx,[ebp-8]"
"	      004984bb    call 004985F4h"
"	      004984c0    mov [ebp-4],eax"
"	      004984c3    jmp near ptr 004984CFh"
"	      004984c8    mov dword ptr [ebp-4],0"
);
// LINE 428:
	asm( 
"	      004984cf    mov eax,[ebp-4]"
"	      004984d2    jmp near ptr 004984D7h"
);
// LINE 429:
	asm( 
"	      004984d7    pop edi"
"	      004984d8    pop esi"
"	      004984d9    pop ebx"
"	      004984da    leave"
"	      004984db    ret"
);
}

// FUNCTION: COPTER_D 0x004984dc
void VRSmackerDestroy() {
// LINE 432:
	asm( 
"	      004984dc    push ebp"
"	      004984dd    mov ebp,esp"
"	      004984df    sub esp,8"
"	      004984e2    push ebx"
"	      004984e3    push esi"
"	      004984e4    push edi"
);
// LINE 433:
	asm( 
"	      004984e5    mov eax,[ebp+8]"
"	      004984e8    mov [ebp-8],eax"
"	      004984eb    mov eax,[ebp-8]"
"	      004984ee    mov [ebp-4],eax"
"	      004984f1    cmp dword ptr [ebp-4],0"
"	      004984f5    je near ptr 0049850Ch"
"	      004984fb    push 1"
"	      004984fd    mov eax,[ebp-4]"
"	      00498500    mov eax,[eax]"
"	      00498502    mov ecx,[ebp-4]"
"	      00498505    call dword ptr [eax]"
"	      00498507    jmp near ptr 0049850Ch"
);
// LINE 434:
	asm( 
"	      0049850c    jmp near ptr 00498511h"
"	      00498511    pop edi"
"	      00498512    pop esi"
"	      00498513    pop ebx"
"	      00498514    leave"
"	      00498515    ret"
);
}

// FUNCTION: COPTER_D 0x00498516
int32_t VRSmackerSetBitmap() {
// LINE 439:
	asm( 
"	      00498516    push ebp"
"	      00498517    mov ebp,esp"
"	      00498519    push ebx"
"	      0049851a    push esi"
"	      0049851b    push edi"
);
// LINE 441:
	asm( 
"	      0049851c    mov eax,[ebp+14h]"
"	      0049851f    push eax"
"	      00498520    mov eax,[ebp+10h]"
"	      00498523    push eax"
"	      00498524    mov eax,[ebp+0Ch]"
"	      00498527    push eax"
"	      00498528    mov eax,[ebp+8]"
"	      0049852b    mov eax,[eax]"
"	      0049852d    mov ecx,[ebp+8]"
"	      00498530    call dword ptr [eax+28h]"
"	      00498533    jmp near ptr 00498538h"
);
// LINE 442:
	asm( 
"	      00498538    pop edi"
"	      00498539    pop esi"
"	      0049853a    pop ebx"
"	      0049853b    leave"
"	      0049853c    ret"
);
}

// FUNCTION: COPTER_D 0x0049853d
int32_t VRSmackerNextFrame() {
// LINE 445:
	asm( 
"	      0049853d    push ebp"
"	      0049853e    mov ebp,esp"
"	      00498540    push ebx"
"	      00498541    push esi"
"	      00498542    push edi"
);
// LINE 446:
	asm( 
"	      00498543    mov ecx,[ebp+8]"
"	      00498546    call 00498A93h"
"	      0049854b    jmp near ptr 00498550h"
);
// LINE 447:
	asm( 
"	      00498550    pop edi"
"	      00498551    pop esi"
"	      00498552    pop ebx"
"	      00498553    leave"
"	      00498554    ret"
);
}

// FUNCTION: COPTER_D 0x00498555
void VRSmackerReset() {
// LINE 449:
	asm( 
"	      00498555    push ebp"
"	      00498556    mov ebp,esp"
"	      00498558    push ebx"
"	      00498559    push esi"
"	      0049855a    push edi"
);
// LINE 450:
	asm( 
"	      0049855b    mov ecx,[ebp+8]"
"	      0049855e    call 00497FF3h"
);
// LINE 451:
	asm( 
"	      00498563    jmp near ptr 00498568h"
"	      00498568    pop edi"
"	      00498569    pop esi"
"	      0049856a    pop ebx"
"	      0049856b    leave"
"	      0049856c    ret"
);
}

// FUNCTION: COPTER_D 0x0049856d
int32_t VRSmackerStatus() {
// LINE 453:
	asm( 
"	      0049856d    push ebp"
"	      0049856e    mov ebp,esp"
"	      00498570    push ebx"
"	      00498571    push esi"
"	      00498572    push edi"
);
// LINE 454:
	asm( 
"	      00498573    mov eax,[ebp+8]"
"	      00498576    mov eax,[eax+4]"
"	      00498579    jmp near ptr 0049857Eh"
);
// LINE 455:
	asm( 
"	      0049857e    pop edi"
"	      0049857f    pop esi"
"	      00498580    pop ebx"
"	      00498581    leave"
"	      00498582    ret"
);
}

// FUNCTION: COPTER_D 0x00498583
struct VRBmpHdr* VRSmackerGetBitmap() {
// LINE 457:
	asm( 
"	      00498583    push ebp"
"	      00498584    mov ebp,esp"
"	      00498586    push ebx"
"	      00498587    push esi"
"	      00498588    push edi"
);
// LINE 458:
	asm( 
"	      00498589    mov eax,[ebp+8]"
"	      0049858c    mov eax,[eax+158h]"
"	      00498592    jmp near ptr 00498597h"
);
// LINE 459:
	asm( 
"	      00498597    pop edi"
"	      00498598    pop esi"
"	      00498599    pop ebx"
"	      0049859a    leave"
"	      0049859b    ret"
);
}

// FUNCTION: COPTER_D 0x0049859c
char * VRSmackerGetBitmapBits() {
// LINE 461:
	asm( 
"	      0049859c    push ebp"
"	      0049859d    mov ebp,esp"
"	      0049859f    push ebx"
"	      004985a0    push esi"
"	      004985a1    push edi"
);
// LINE 462:
	asm( 
"	      004985a2    mov eax,[ebp+8]"
"	      004985a5    mov eax,[eax+15Ch]"
"	      004985ab    jmp near ptr 004985B0h"
);
// LINE 463:
	asm( 
"	      004985b0    pop edi"
"	      004985b1    pop esi"
"	      004985b2    pop ebx"
"	      004985b3    leave"
"	      004985b4    ret"
);
}

// FUNCTION: COPTER_D 0x004985b5
void VRBmpSmackerBuffer::VRBmpSmackerBuffer() {
// LINE 472:
	asm( 
"	      004985b5    push ebp"
"	      004985b6    mov ebp,esp"
"	      004985b8    sub esp,4"
"	      004985bb    push ebx"
"	      004985bc    push esi"
"	      004985bd    push edi"
"	      004985be    mov [ebp-4],ecx"
"	      004985c1    mov ecx,[ebp-4]"
"	      004985c4    call 00497C00h"
"	      004985c9    mov eax,[ebp-4]"
"	      004985cc    mov dword ptr [eax+160h],0"
"	      004985d6    mov eax,[ebp-4]"
"	      004985d9    mov dword ptr [eax],591158h"
);
// LINE 473:
	asm( 
"	      004985df    mov ecx,[ebp-4]"
"	      004985e2    call 004986BFh"
);
// LINE 474:
	asm( 
"	      004985e7    jmp near ptr 004985ECh"
"	      004985ec    mov eax,[ebp-4]"
"	      004985ef    pop edi"
"	      004985f0    pop esi"
"	      004985f1    pop ebx"
"	      004985f2    leave"
"	      004985f3    ret"
);
}

// FUNCTION: COPTER_D 0x004985f4
void VRBmpSmackerBuffer::VRBmpSmackerBuffer(char *, int32_t, int32_t, int32_t) {
// LINE 485:
	asm( 
"	      004985f4    push ebp"
"	      004985f5    mov ebp,esp"
"	      004985f7    sub esp,4"
"	      004985fa    push ebx"
"	      004985fb    push esi"
"	      004985fc    push edi"
"	      004985fd    mov [ebp-4],ecx"
"	      00498600    mov eax,[ebp+10h]"
"	      00498603    push eax"
"	      00498604    mov eax,[ebp+0Ch]"
"	      00498607    push eax"
"	      00498608    mov eax,[ebp+8]"
"	      0049860b    push eax"
"	      0049860c    mov ecx,[ebp-4]"
"	      0049860f    call 00497CCFh"
"	      00498614    mov eax,[ebp+14h]"
"	      00498617    mov ecx,[ebp-4]"
"	      0049861a    mov [ecx+160h],eax"
"	      00498620    mov eax,[ebp-4]"
"	      00498623    mov dword ptr [eax],591158h"
);
// LINE 486:
	asm( 
"	      00498629    mov ecx,[ebp-4]"
"	      0049862c    call 004986BFh"
);
// LINE 487:
	asm( 
"	      00498631    jmp near ptr 00498636h"
"	      00498636    mov eax,[ebp-4]"
"	      00498639    pop edi"
"	      0049863a    pop esi"
"	      0049863b    pop ebx"
"	      0049863c    leave"
"	      0049863d    ret 10h"
);
}

// FUNCTION: COPTER_D 0x00498640
void VRBmpSmackerBuffer::~VRBmpSmackerBuffer() {
// LINE 494:
	asm( 
"	      00498640    push ebp"
"	      00498641    mov ebp,esp"
"	      00498643    sub esp,0Ch"
"	      00498646    push ebx"
"	      00498647    push esi"
"	      00498648    push edi"
"	      00498649    mov [ebp-0Ch],ecx"
"	      0049864c    mov eax,[ebp-0Ch]"
"	      0049864f    mov dword ptr [eax],591158h"
);
// LINE 495:
	asm( 
"	      00498655    mov eax,[ebp-0Ch]"
"	      00498658    cmp dword ptr [eax+140h],0"
"	      0049865f    je near ptr 00498683h"
);
// LINE 496:
	asm( 
"	      00498665    mov eax,[ebp-0Ch]"
"	      00498668    mov eax,[eax+140h]"
"	      0049866e    mov [ebp-4],eax"
"	      00498671    mov eax,[ebp-4]"
"	      00498674    mov [ebp-8],eax"
"	      00498677    mov eax,[ebp-8]"
"	      0049867a    push eax"
"	      0049867b    call 0056A740h"
"	      00498680    add esp,4"
);
// LINE 497:
	asm( 
"	      00498683    mov eax,[ebp-0Ch]"
"	      00498686    cmp dword ptr [eax+148h],0"
"	      0049868d    je near ptr 004986A5h"
);
// LINE 498:
	asm( 
"	      00498693    mov eax,[ebp-0Ch]"
"	      00498696    mov eax,[eax+148h]"
"	      0049869c    push eax"
"	      0049869d    call 004D5872h"
"	      004986a2    add esp,4"
);
// LINE 499:
	asm( 
"	      004986a5    mov ecx,[ebp-0Ch]"
"	      004986a8    call 0049891Fh"
);
// LINE 500:
	asm( 
"	      004986ad    jmp near ptr 004986B2h"
"	      004986b2    mov ecx,[ebp-0Ch]"
"	      004986b5    call 00497DA1h"
"	      004986ba    pop edi"
"	      004986bb    pop esi"
"	      004986bc    pop ebx"
"	      004986bd    leave"
"	      004986be    ret"
);
}

// FUNCTION: COPTER_D 0x004986bf
void VRBmpSmackerBuffer::InitializeVRBmpMembers() {
// LINE 507:
	asm( 
"	      004986bf    push ebp"
"	      004986c0    mov ebp,esp"
"	      004986c2    sub esp,4"
"	      004986c5    push ebx"
"	      004986c6    push esi"
"	      004986c7    push edi"
"	      004986c8    mov [ebp-4],ecx"
);
// LINE 508:
	asm( 
"	      004986cb    mov eax,[ebp-4]"
"	      004986ce    mov dword ptr [eax+140h],0"
);
// LINE 509:
	asm( 
"	      004986d8    mov eax,[ebp-4]"
"	      004986db    mov dword ptr [eax+144h],0"
);
// LINE 510:
	asm( 
"	      004986e5    mov eax,[ebp-4]"
"	      004986e8    mov dword ptr [eax+148h],0"
);
// LINE 511:
	asm( 
"	      004986f2    mov eax,[ebp-4]"
"	      004986f5    mov dword ptr [eax+14Ch],0"
);
// LINE 512:
	asm( 
"	      004986ff    mov eax,[ebp-4]"
"	      00498702    mov dword ptr [eax+154h],0"
);
// LINE 513:
	asm( 
"	      0049870c    mov eax,[ebp-4]"
"	      0049870f    mov dword ptr [eax+158h],0"
);
// LINE 514:
	asm( 
"	      00498719    mov eax,[ebp-4]"
"	      0049871c    mov dword ptr [eax+15Ch],0"
);
// LINE 515:
	asm( 
"	      00498726    mov eax,[ebp-4]"
"	      00498729    mov dword ptr [eax+150h],0"
);
// LINE 516:
	asm( 
"	      00498733    jmp near ptr 00498738h"
"	      00498738    pop edi"
"	      00498739    pop esi"
"	      0049873a    pop ebx"
"	      0049873b    leave"
"	      0049873c    ret"
);
}

// FUNCTION: COPTER_D 0x0049873d
int32_t VRBmpSmackerBuffer::CreateSurface(int32_t) {
// LINE 532:
	asm( 
"	      0049873d    push ebp"
"	      0049873e    mov ebp,esp"
"	      00498740    sub esp,0Ch"
"	      00498743    push ebx"
"	      00498744    push esi"
"	      00498745    push edi"
"	      00498746    mov [ebp-0Ch],ecx"
);
// LINE 536:
	asm( 
"	      00498749    mov eax,[ebp-0Ch]"
"	      0049874c    cmp dword ptr [eax+158h],0"
"	      00498753    je near ptr 00498763h"
);
// LINE 537:
	asm( 
"	      00498759    mov eax,1"
"	      0049875e    jmp near ptr 00498918h"
);
// LINE 540:
	asm( 
"	      00498763    mov eax,[ebp-0Ch]"
"	      00498766    cmp dword ptr [eax+1Ch],0"
"	      0049876a    jne near ptr 0049878Ch"
"	      00498770    mov eax,[ebp-0Ch]"
"	      00498773    cmp dword ptr [eax+38h],0"
"	      00498777    je near ptr 0049878Ch"
);
// LINE 541:
	asm( 
"	      0049877d    mov eax,[ebp-0Ch]"
"	      00498780    mov eax,[eax+38h]"
"	      00498783    mov eax,[eax+4]"
"	      00498786    mov ecx,[ebp-0Ch]"
"	      00498789    mov [ecx+1Ch],eax"
);
// LINE 542:
	asm( 
"	      0049878c    mov eax,[ebp-0Ch]"
"	      0049878f    cmp dword ptr [eax+20h],0"
"	      00498793    jne near ptr 004987B5h"
"	      00498799    mov eax,[ebp-0Ch]"
"	      0049879c    cmp dword ptr [eax+38h],0"
"	      004987a0    je near ptr 004987B5h"
);
// LINE 543:
	asm( 
"	      004987a6    mov eax,[ebp-0Ch]"
"	      004987a9    mov eax,[eax+38h]"
"	      004987ac    mov eax,[eax+8]"
"	      004987af    mov ecx,[ebp-0Ch]"
"	      004987b2    mov [ecx+20h],eax"
);
// LINE 545:
	asm( 
"	      004987b5    mov dword ptr [ebp-8],0Ch"
);
// LINE 546:
	asm( 
"	      004987bc    mov eax,[ebp-0Ch]"
"	      004987bf    mov eax,[eax+20h]"
"	      004987c2    shl eax,2"
"	      004987c5    add [ebp-8],eax"
);
// LINE 547:
	asm( 
"	      004987c8    mov eax,[ebp-0Ch]"
"	      004987cb    mov eax,[eax+1Ch]"
"	      004987ce    mov ecx,[ebp-0Ch]"
"	      004987d1    imul eax,[ecx+20h]"
"	      004987d5    add [ebp-8],eax"
);
// LINE 549:
	asm( 
"	      004987d8    mov eax,[ebp-8]"
"	      004987db    push eax"
"	      004987dc    call 0056A600h"
"	      004987e1    add esp,4"
"	      004987e4    mov ecx,[ebp-0Ch]"
"	      004987e7    mov [ecx+154h],eax"
);
// LINE 550:
	asm( 
"	      004987ed    mov eax,[ebp-0Ch]"
"	      004987f0    mov eax,[eax+154h]"
"	      004987f6    mov ecx,[ebp-0Ch]"
"	      004987f9    mov [ecx+158h],eax"
);
// LINE 551:
	asm( 
"	      004987ff    mov eax,[ebp-0Ch]"
"	      00498802    mov eax,[eax+158h]"
"	      00498808    mov eax,[eax+4]"
"	      0049880b    shl eax,2"
"	      0049880e    mov ecx,[ebp-0Ch]"
"	      00498811    add eax,[ecx+158h]"
"	      00498817    add eax,0Ch"
"	      0049881a    mov ecx,[ebp-0Ch]"
"	      0049881d    mov [ecx+15Ch],eax"
);
// LINE 553:
	asm( 
"	      00498823    mov eax,[ebp-0Ch]"
"	      00498826    mov eax,[eax+1Ch]"
"	      00498829    mov ecx,[ebp-0Ch]"
"	      0049882c    mov ecx,[ecx+158h]"
"	      00498832    mov [ecx],eax"
);
// LINE 554:
	asm( 
"	      00498834    mov eax,[ebp-0Ch]"
"	      00498837    mov eax,[eax+20h]"
"	      0049883a    mov ecx,[ebp-0Ch]"
"	      0049883d    mov ecx,[ecx+158h]"
"	      00498843    mov [ecx+4],eax"
);
// LINE 555:
	asm( 
"	      00498846    mov eax,[ebp-0Ch]"
"	      00498849    mov eax,[eax+158h]"
"	      0049884f    mov word ptr [eax+8],0"
);
// LINE 556:
	asm( 
"	      00498855    mov eax,[ebp-0Ch]"
"	      00498858    mov eax,[eax+158h]"
"	      0049885e    mov word ptr [eax+0Ah],0"
);
// LINE 560:
	asm( 
"	      00498864    mov eax,[ebp-0Ch]"
"	      00498867    cmp dword ptr [eax+140h],0"
"	      0049886e    je near ptr 004988CEh"
"	      00498874    cmp dword ptr [ebp+8],0"
"	      00498878    je near ptr 004988CEh"
);
// LINE 561:
	asm( 
"	      0049887e    mov dword ptr [ebp-4],0"
"	      00498885    jmp near ptr 0049888Dh"
"	      0049888a    inc dword ptr [ebp-4]"
"	      0049888d    mov eax,[ebp-0Ch]"
"	      00498890    mov ecx,[ebp-4]"
"	      00498893    cmp [eax+20h],ecx"
"	      00498896    jle near ptr 004988BEh"
);
// LINE 562:
	asm( 
"	      0049889c    mov eax,[ebp-0Ch]"
"	      0049889f    mov eax,[eax+1Ch]"
"	      004988a2    imul eax,[ebp-4]"
"	      004988a6    add eax,0Ch"
"	      004988a9    mov ecx,[ebp-0Ch]"
"	      004988ac    mov ecx,[ecx+158h]"
"	      004988b2    mov edx,[ebp-4]"
"	      004988b5    mov [ecx+edx*4+0Ch],eax"
"	      004988b9    jmp near ptr 0049888Ah"
);
// LINE 563:
	asm( 
"	      004988be    mov eax,[ebp-0Ch]"
"	      004988c1    mov eax,[eax]"
"	      004988c3    mov ecx,[ebp-0Ch]"
"	      004988c6    call dword ptr [eax+2Ch]"
);
// LINE 565:
	asm( 
"	      004988c9    jmp near ptr 0049890Eh"
);
// LINE 566:
	asm( 
"	      004988ce    mov dword ptr [ebp-4],0"
"	      004988d5    jmp near ptr 004988DDh"
"	      004988da    inc dword ptr [ebp-4]"
"	      004988dd    mov eax,[ebp-0Ch]"
"	      004988e0    mov ecx,[ebp-4]"
"	      004988e3    cmp [eax+20h],ecx"
"	      004988e6    jle near ptr 0049890Eh"
);
// LINE 567:
	asm( 
"	      004988ec    mov eax,[ebp-0Ch]"
"	      004988ef    mov eax,[eax+1Ch]"
"	      004988f2    imul eax,[ebp-4]"
"	      004988f6    add eax,0Ch"
"	      004988f9    mov ecx,[ebp-0Ch]"
"	      004988fc    mov ecx,[ecx+158h]"
"	      00498902    mov edx,[ebp-4]"
"	      00498905    mov [ecx+edx*4+0Ch],eax"
);
// LINE 569:
	asm( 
"	      00498909    jmp near ptr 004988DAh"
);
// LINE 571:
	asm( 
"	      0049890e    mov eax,1"
"	      00498913    jmp near ptr 00498918h"
);
// LINE 572:
	asm( 
"	      00498918    pop edi"
"	      00498919    pop esi"
"	      0049891a    pop ebx"
"	      0049891b    leave"
"	      0049891c    ret 4"
);
}

// FUNCTION: COPTER_D 0x0049891f
void VRBmpSmackerBuffer::DeleteSurface() {
// LINE 580:
	asm( 
"	      0049891f    push ebp"
"	      00498920    mov ebp,esp"
"	      00498922    sub esp,0Ch"
"	      00498925    push ebx"
"	      00498926    push esi"
"	      00498927    push edi"
"	      00498928    mov [ebp-0Ch],ecx"
);
// LINE 581:
	asm( 
"	      0049892b    mov eax,[ebp-0Ch]"
"	      0049892e    cmp dword ptr [eax+154h],0"
"	      00498935    je near ptr 00498980h"
);
// LINE 582:
	asm( 
"	      0049893b    mov eax,[ebp-0Ch]"
"	      0049893e    mov eax,[eax+154h]"
"	      00498944    mov [ebp-4],eax"
"	      00498947    mov eax,[ebp-4]"
"	      0049894a    mov [ebp-8],eax"
"	      0049894d    mov eax,[ebp-8]"
"	      00498950    push eax"
"	      00498951    call 0056A740h"
"	      00498956    add esp,4"
);
// LINE 583:
	asm( 
"	      00498959    mov eax,[ebp-0Ch]"
"	      0049895c    mov dword ptr [eax+154h],0"
);
// LINE 584:
	asm( 
"	      00498966    mov eax,[ebp-0Ch]"
"	      00498969    mov dword ptr [eax+158h],0"
);
// LINE 585:
	asm( 
"	      00498973    mov eax,[ebp-0Ch]"
"	      00498976    mov dword ptr [eax+15Ch],0"
);
// LINE 587:
	asm( 
"	      00498980    jmp near ptr 00498985h"
"	      00498985    pop edi"
"	      00498986    pop esi"
"	      00498987    pop ebx"
"	      00498988    leave"
"	      00498989    ret"
);
}

// FUNCTION: COPTER_D 0x0049898a
int32_t VRBmpSmackerBuffer::Open(char *, unsigned long, unsigned long) {
// LINE 595:
	asm( 
"	      0049898a    push ebp"
"	      0049898b    mov ebp,esp"
"	      0049898d    sub esp,4"
"	      00498990    push ebx"
"	      00498991    push esi"
"	      00498992    push edi"
"	      00498993    mov [ebp-4],ecx"
);
// LINE 597:
	asm( 
"	      00498996    cmp dword ptr [ebp+8],0"
"	      0049899a    je near ptr 004989B3h"
);
// LINE 598:
	asm( 
"	      004989a0    mov eax,[ebp+8]"
"	      004989a3    push eax"
"	      004989a4    mov eax,[ebp-4]"
"	      004989a7    add eax,3Ch"
"	      004989aa    push eax"
"	      004989ab    call 0056CEB0h"
"	      004989b0    add esp,8"
);
// LINE 599:
	asm( 
"	      004989b3    mov eax,[ebp+10h]"
"	      004989b6    push eax"
"	      004989b7    mov eax,[ebp+0Ch]"
"	      004989ba    push eax"
"	      004989bb    mov eax,[ebp-4]"
"	      004989be    add eax,3Ch"
"	      004989c1    push eax"
"	      004989c2    call 004C4630h"
"	      004989c7    add esp,0Ch"
"	      004989ca    mov ecx,[ebp-4]"
"	      004989cd    mov [ecx+38h],eax"
);
// LINE 602:
	asm( 
"	      004989d0    push 493E0h"
"	      004989d5    call 004C462Ah"
"	      004989da    add esp,4"
);
// LINE 607:
	asm( 
"	      004989dd    mov eax,[ebp-4]"
"	      004989e0    cmp dword ptr [eax+160h],0"
"	      004989e7    je near ptr 004989FAh"
);
// LINE 608:
	asm( 
"	      004989ed    push 1"
"	      004989ef    mov eax,[ebp-4]"
"	      004989f2    mov eax,[eax]"
"	      004989f4    mov ecx,[ebp-4]"
"	      004989f7    call dword ptr [eax+20h]"
);
// LINE 609:
	asm( 
"	      004989fa    mov eax,1"
"	      004989ff    jmp near ptr 00498A04h"
);
// LINE 610:
	asm( 
"	      00498a04    pop edi"
"	      00498a05    pop esi"
"	      00498a06    pop ebx"
"	      00498a07    leave"
"	      00498a08    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x00498a0b
void VRBmpSmackerBuffer::ClearBuffer(int32_t) {
// LINE 620:
	asm( 
"	      00498a0b    push ebp"
"	      00498a0c    mov ebp,esp"
"	      00498a0e    sub esp,8"
"	      00498a11    push ebx"
"	      00498a12    push esi"
"	      00498a13    push edi"
"	      00498a14    mov [ebp-8],ecx"
);
// LINE 623:
	asm( 
"	      00498a17    mov dword ptr [ebp-4],0"
"	      00498a1e    jmp near ptr 00498A26h"
"	      00498a23    inc dword ptr [ebp-4]"
"	      00498a26    mov eax,[ebp-8]"
"	      00498a29    mov ecx,[ebp-4]"
"	      00498a2c    cmp [eax+20h],ecx"
"	      00498a2f    jle near ptr 00498A87h"
);
// LINE 624:
	asm( 
"	      00498a35    mov eax,[ebp-8]"
"	      00498a38    mov eax,[eax+1Ch]"
"	      00498a3b    imul eax,[ebp-4]"
"	      00498a3f    add eax,0Ch"
"	      00498a42    mov ecx,[ebp-8]"
"	      00498a45    mov ecx,[ecx+158h]"
"	      00498a4b    mov edx,[ebp-4]"
"	      00498a4e    mov [ecx+edx*4+0Ch],eax"
);
// LINE 625:
	asm( 
"	      00498a52    mov eax,[ebp+8]"
"	      00498a55    push eax"
"	      00498a56    mov eax,[ebp-8]"
"	      00498a59    mov eax,[eax+1Ch]"
"	      00498a5c    push eax"
"	      00498a5d    mov eax,[ebp-8]"
"	      00498a60    mov eax,[eax+158h]"
"	      00498a66    mov ecx,[ebp-4]"
"	      00498a69    mov eax,[eax+ecx*4+0Ch]"
"	      00498a6d    shl eax,4"
"	      00498a70    mov ecx,[ebp-8]"
"	      00498a73    add eax,[ecx+158h]"
"	      00498a79    push eax"
"	      00498a7a    call 0056EB90h"
"	      00498a7f    add esp,0Ch"
);
// LINE 626:
	asm( 
"	      00498a82    jmp near ptr 00498A23h"
);
// LINE 627:
	asm( 
"	      00498a87    jmp near ptr 00498A8Ch"
"	      00498a8c    pop edi"
"	      00498a8d    pop esi"
"	      00498a8e    pop ebx"
"	      00498a8f    leave"
"	      00498a90    ret 4"
);
}

// FUNCTION: COPTER_D 0x00498a93
int32_t VRBmpSmackerBuffer::Compose() {
// LINE 649:
	asm( 
"	      00498a93    push ebp"
"	      00498a94    mov ebp,esp"
"	      00498a96    sub esp,4"
"	      00498a99    push ebx"
"	      00498a9a    push esi"
"	      00498a9b    push edi"
"	      00498a9c    mov [ebp-4],ecx"
);
// LINE 650:
	asm( 
"	      00498a9f    mov eax,[ebp-4]"
"	      00498aa2    cmp dword ptr [eax+4],0"
"	      00498aa6    jne near ptr 00498AD8h"
);
// LINE 652:
	asm( 
"	      00498aac    mov eax,[ebp-4]"
"	      00498aaf    cmp dword ptr [eax+158h],0"
"	      00498ab6    jne near ptr 00498AD3h"
);
// LINE 653:
	asm( 
"	      00498abc    push 0"
"	      00498abe    mov eax,[ebp-4]"
"	      00498ac1    mov eax,[eax]"
"	      00498ac3    mov ecx,[ebp-4]"
"	      00498ac6    call dword ptr [eax+20h]"
);
// LINE 654:
	asm( 
"	      00498ac9    mov eax,[ebp-4]"
"	      00498acc    mov dword ptr [eax+4],1"
);
// LINE 658:
	asm( 
"	      00498ad3    jmp near ptr 00498BF4h"
"	      00498ad8    mov eax,[ebp-4]"
"	      00498adb    cmp dword ptr [eax+4],2"
"	      00498adf    jne near ptr 00498B1Eh"
);
// LINE 659:
	asm( 
"	      00498ae5    mov eax,[ebp-4]"
"	      00498ae8    cmp dword ptr [eax+0Ch],0"
"	      00498aec    je near ptr 00498B0Fh"
"	      00498af2    mov eax,[ebp-4]"
"	      00498af5    cmp dword ptr [eax+158h],0"
"	      00498afc    je near ptr 00498B0Fh"
);
// LINE 660:
	asm( 
"	      00498b02    push 0"
"	      00498b04    mov eax,[ebp-4]"
"	      00498b07    mov eax,[eax]"
"	      00498b09    mov ecx,[ebp-4]"
"	      00498b0c    call dword ptr [eax+0Ch]"
);
// LINE 661:
	asm( 
"	      00498b0f    mov eax,1"
"	      00498b14    jmp near ptr 00498BFBh"
);
// LINE 664:
	asm( 
"	      00498b19    jmp near ptr 00498BF4h"
"	      00498b1e    mov eax,[ebp-4]"
"	      00498b21    cmp dword ptr [eax+38h],0"
"	      00498b25    je near ptr 00498BEAh"
);
// LINE 665:
	asm( 
"	      00498b2b    mov eax,[ebp-4]"
"	      00498b2e    mov eax,[eax+38h]"
"	      00498b31    push eax"
"	      00498b32    call 004C466Ch"
"	      00498b37    add esp,4"
"	      00498b3a    test eax,eax"
"	      00498b3c    jne near ptr 00498BE5h"
);
// LINE 666:
	asm( 
"	      00498b42    push 0"
"	      00498b44    mov eax,[ebp-4]"
"	      00498b47    mov eax,[eax+15Ch]"
"	      00498b4d    push eax"
"	      00498b4e    mov eax,[ebp-4]"
"	      00498b51    mov eax,[eax+20h]"
"	      00498b54    push eax"
"	      00498b55    mov eax,[ebp-4]"
"	      00498b58    mov eax,[eax+1Ch]"
"	      00498b5b    push eax"
"	      00498b5c    push 0"
"	      00498b5e    push 0"
"	      00498b60    mov eax,[ebp-4]"
"	      00498b63    mov eax,[eax+38h]"
"	      00498b66    push eax"
"	      00498b67    call 004C461Eh"
"	      00498b6c    add esp,1Ch"
);
// LINE 667:
	asm( 
"	      00498b6f    mov eax,[ebp-4]"
"	      00498b72    mov eax,[eax+38h]"
"	      00498b75    push eax"
"	      00498b76    call 004C465Ah"
"	      00498b7b    add esp,4"
);
// LINE 668:
	asm( 
"	      00498b7e    mov eax,[ebp-4]"
"	      00498b81    mov eax,[eax+38h]"
"	      00498b84    mov eax,[eax+0Ch]"
"	      00498b87    dec eax"
"	      00498b88    mov ecx,[ebp-4]"
"	      00498b8b    mov ecx,[ecx+38h]"
"	      00498b8e    cmp eax,[ecx+370h]"
"	      00498b94    jne near ptr 00498BD6h"
);
// LINE 669:
	asm( 
"	      00498b9a    mov eax,[ebp-4]"
"	      00498b9d    cmp dword ptr [eax+8],0"
"	      00498ba1    jne near ptr 00498BD6h"
);
// LINE 670:
	asm( 
"	      00498ba7    mov eax,[ebp-4]"
"	      00498baa    mov dword ptr [eax+4],2"
);
// LINE 671:
	asm( 
"	      00498bb1    mov eax,[ebp-4]"
"	      00498bb4    cmp dword ptr [eax+160h],0"
"	      00498bbb    jne near ptr 00498BCCh"
);
// LINE 672:
	asm( 
"	      00498bc1    mov eax,[ebp-4]"
"	      00498bc4    mov eax,[eax]"
"	      00498bc6    mov ecx,[ebp-4]"
"	      00498bc9    call dword ptr [eax+24h]"
);
// LINE 673:
	asm( 
"	      00498bcc    mov eax,1"
"	      00498bd1    jmp near ptr 00498BFBh"
);
// LINE 676:
	asm( 
"	      00498bd6    mov eax,[ebp-4]"
"	      00498bd9    mov eax,[eax+38h]"
"	      00498bdc    push eax"
"	      00498bdd    call 004C4648h"
"	      00498be2    add esp,4"
);
// LINE 679:
	asm( 
"	      00498be5    jmp near ptr 00498BF4h"
);
// LINE 680:
	asm( 
"	      00498bea    mov eax,2"
"	      00498bef    jmp near ptr 00498BFBh"
);
// LINE 682:
	asm( 
"	      00498bf4    xor eax,eax"
"	      00498bf6    jmp near ptr 00498BFBh"
);
// LINE 683:
	asm( 
"	      00498bfb    pop edi"
"	      00498bfc    pop esi"
"	      00498bfd    pop ebx"
"	      00498bfe    leave"
"	      00498bff    ret"
);
}

// FUNCTION: COPTER_D 0x00498c00
int32_t VRBmpSmackerBuffer::SetDefaultVRBmp(char *, int32_t, int32_t) {
// LINE 698:
	asm( 
"	      00498c00    push ebp"
"	      00498c01    mov ebp,esp"
"	      00498c03    sub esp,0Ch"
"	      00498c06    push ebx"
"	      00498c07    push esi"
"	      00498c08    push edi"
"	      00498c09    mov [ebp-0Ch],ecx"
);
// LINE 699:
	asm( 
"	      00498c0c    mov eax,[ebp-0Ch]"
"	      00498c0f    cmp dword ptr [eax+140h],0"
"	      00498c16    je near ptr 00498C3Ah"
);
// LINE 700:
	asm( 
"	      00498c1c    mov eax,[ebp-0Ch]"
"	      00498c1f    mov eax,[eax+140h]"
"	      00498c25    mov [ebp-4],eax"
"	      00498c28    mov eax,[ebp-4]"
"	      00498c2b    mov [ebp-8],eax"
"	      00498c2e    mov eax,[ebp-8]"
"	      00498c31    push eax"
"	      00498c32    call 0056A740h"
"	      00498c37    add esp,4"
);
// LINE 701:
	asm( 
"	      00498c3a    mov eax,[ebp+8]"
"	      00498c3d    push eax"
"	      00498c3e    call 0056ABE0h"
"	      00498c43    add esp,4"
"	      00498c46    inc eax"
"	      00498c47    push eax"
"	      00498c48    call 0056A600h"
"	      00498c4d    add esp,4"
"	      00498c50    mov ecx,[ebp-0Ch]"
"	      00498c53    mov [ecx+140h],eax"
);
// LINE 702:
	asm( 
"	      00498c59    mov eax,[ebp+8]"
"	      00498c5c    push eax"
"	      00498c5d    mov eax,[ebp-0Ch]"
"	      00498c60    mov eax,[eax+140h]"
"	      00498c66    push eax"
"	      00498c67    call 0056CEB0h"
"	      00498c6c    add esp,8"
);
// LINE 703:
	asm( 
"	      00498c6f    mov eax,[ebp+0Ch]"
"	      00498c72    mov ecx,[ebp-0Ch]"
"	      00498c75    mov [ecx+144h],eax"
);
// LINE 704:
	asm( 
"	      00498c7b    mov eax,[ebp+10h]"
"	      00498c7e    mov ecx,[ebp-0Ch]"
"	      00498c81    mov [ecx+150h],eax"
);
// LINE 706:
	asm( 
"	      00498c87    mov eax,[ebp-0Ch]"
"	      00498c8a    mov eax,[eax]"
"	      00498c8c    mov ecx,[ebp-0Ch]"
"	      00498c8f    call dword ptr [eax+2Ch]"
);
// LINE 707:
	asm( 
"	      00498c92    mov eax,1"
"	      00498c97    jmp near ptr 00498C9Ch"
);
// LINE 708:
	asm( 
"	      00498c9c    pop edi"
"	      00498c9d    pop esi"
"	      00498c9e    pop ebx"
"	      00498c9f    leave"
"	      00498ca0    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x00498ca3
int32_t VRBmpSmackerBuffer::DrawDefaultVRBmp() {
// LINE 722:
	asm( 
"	      00498ca3    push ebp"
"	      00498ca4    mov ebp,esp"
"	      00498ca6    sub esp,18h"
"	      00498ca9    push ebx"
"	      00498caa    push esi"
"	      00498cab    push edi"
"	      00498cac    mov [ebp-18h],ecx"
);
// LINE 730:
	asm( 
"	      00498caf    mov eax,[ebp-18h]"
"	      00498cb2    cmp dword ptr [eax+140h],0"
"	      00498cb9    je near ptr 00498E8Dh"
);
// LINE 732:
	asm( 
"	      00498cbf    mov eax,[ebp-18h]"
"	      00498cc2    cmp dword ptr [eax+148h],0"
"	      00498cc9    jne near ptr 00498D2Dh"
);
// LINE 733:
	asm( 
"	      00498ccf    push 59A208h"
"	      00498cd4    mov eax,[ebp-18h]"
"	      00498cd7    mov eax,[eax+144h]"
"	      00498cdd    push eax"
"	      00498cde    mov eax,[ebp-18h]"
"	      00498ce1    mov eax,[eax+140h]"
"	      00498ce7    push eax"
"	      00498ce8    call 004D5356h"
"	      00498ced    add esp,0Ch"
"	      00498cf0    mov ecx,[ebp-18h]"
"	      00498cf3    mov [ecx+148h],eax"
);
// LINE 734:
	asm( 
"	      00498cf9    mov eax,[ebp-18h]"
"	      00498cfc    cmp dword ptr [eax+148h],0"
"	      00498d03    jne near ptr 00498D10h"
);
// LINE 735:
	asm( 
"	      00498d09    xor eax,eax"
"	      00498d0b    jmp near ptr 00498EE3h"
);
// LINE 736:
	asm( 
"	      00498d10    push 0"
"	      00498d12    mov eax,[ebp-18h]"
"	      00498d15    mov eax,[eax+148h]"
"	      00498d1b    push eax"
"	      00498d1c    call 004D6246h"
"	      00498d21    add esp,8"
"	      00498d24    mov ecx,[ebp-18h]"
"	      00498d27    mov [ecx+14Ch],eax"
);
// LINE 745:
	asm( 
"	      00498d2d    mov eax,[ebp-18h]"
"	      00498d30    cmp dword ptr [eax+158h],0"
"	      00498d37    je near ptr 00498E8Dh"
);
// LINE 746:
	asm( 
"	      00498d3d    mov eax,[ebp-18h]"
"	      00498d40    mov eax,[eax+14Ch]"
"	      00498d46    mov eax,[eax]"
"	      00498d48    mov [ebp-4],eax"
);
// LINE 747:
	asm( 
"	      00498d4b    mov eax,[ebp-18h]"
"	      00498d4e    mov eax,[eax+14Ch]"
"	      00498d54    mov eax,[eax+4]"
"	      00498d57    mov [ebp-8],eax"
);
// LINE 748:
	asm( 
"	      00498d5a    mov eax,[ebp-18h]"
"	      00498d5d    mov ecx,[ebp-4]"
"	      00498d60    cmp [eax+1Ch],ecx"
"	      00498d63    jle near ptr 00498D74h"
);
// LINE 749:
	asm( 
"	      00498d69    mov eax,[ebp-4]"
"	      00498d6c    mov [ebp-10h],eax"
);
// LINE 750:
	asm( 
"	      00498d6f    jmp near ptr 00498D7Dh"
);
// LINE 751:
	asm( 
"	      00498d74    mov eax,[ebp-18h]"
"	      00498d77    mov eax,[eax+1Ch]"
"	      00498d7a    mov [ebp-10h],eax"
);
// LINE 752:
	asm( 
"	      00498d7d    mov eax,[ebp-18h]"
"	      00498d80    mov ecx,[ebp-8]"
"	      00498d83    cmp [eax+20h],ecx"
"	      00498d86    jle near ptr 00498D97h"
);
// LINE 753:
	asm( 
"	      00498d8c    mov eax,[ebp-8]"
"	      00498d8f    mov [ebp-14h],eax"
);
// LINE 754:
	asm( 
"	      00498d92    jmp near ptr 00498DA0h"
);
// LINE 755:
	asm( 
"	      00498d97    mov eax,[ebp-18h]"
"	      00498d9a    mov eax,[eax+20h]"
"	      00498d9d    mov [ebp-14h],eax"
);
// LINE 757:
	asm( 
"	      00498da0    mov dword ptr [ebp-0Ch],0"
"	      00498da7    jmp near ptr 00498DAFh"
"	      00498dac    inc dword ptr [ebp-0Ch]"
"	      00498daf    mov eax,[ebp-0Ch]"
"	      00498db2    cmp [ebp-14h],eax"
"	      00498db5    jle near ptr 00498E40h"
);
// LINE 759:
	asm( 
"	      00498dbb    mov eax,[ebp-10h]"
"	      00498dbe    push eax"
"	      00498dbf    mov eax,[ebp-18h]"
"	      00498dc2    mov eax,[eax+158h]"
"	      00498dc8    mov ecx,[ebp-0Ch]"
"	      00498dcb    mov eax,[eax+ecx*4+0Ch]"
"	      00498dcf    mov ecx,[ebp-18h]"
"	      00498dd2    add eax,[ecx+14Ch]"
"	      00498dd8    push eax"
"	      00498dd9    mov eax,[ebp-18h]"
"	      00498ddc    mov eax,[eax+158h]"
"	      00498de2    mov ecx,[ebp-0Ch]"
"	      00498de5    mov eax,[eax+ecx*4+0Ch]"
"	      00498de9    mov ecx,[ebp-18h]"
"	      00498dec    add eax,[ecx+158h]"
"	      00498df2    push eax"
"	      00498df3    call 0056A800h"
"	      00498df8    add esp,0Ch"
);
// LINE 762:
	asm( 
"	      00498dfb    mov eax,[ebp-18h]"
"	      00498dfe    mov ecx,[ebp-10h]"
"	      00498e01    cmp [eax+1Ch],ecx"
"	      00498e04    jle near ptr 00498E3Bh"
);
// LINE 764:
	asm( 
"	      00498e0a    push 0"
"	      00498e0c    mov eax,[ebp-18h]"
"	      00498e0f    mov eax,[eax+1Ch]"
"	      00498e12    sub eax,[ebp-10h]"
"	      00498e15    push eax"
"	      00498e16    mov eax,[ebp-18h]"
"	      00498e19    mov eax,[eax+158h]"
"	      00498e1f    mov ecx,[ebp-0Ch]"
"	      00498e22    mov eax,[eax+ecx*4+0Ch]"
"	      00498e26    mov ecx,[ebp-18h]"
"	      00498e29    add eax,[ecx+158h]"
"	      00498e2f    add eax,[ebp-10h]"
"	      00498e32    push eax"
"	      00498e33    call 0056EB90h"
"	      00498e38    add esp,0Ch"
);
// LINE 765:
	asm( 
"	      00498e3b    jmp near ptr 00498DACh"
);
// LINE 766:
	asm( 
"	      00498e40    mov eax,[ebp-8]"
"	      00498e43    cmp [ebp-14h],eax"
"	      00498e46    jge near ptr 00498E8Dh"
);
// LINE 767:
	asm( 
"	      00498e4c    jmp near ptr 00498E54h"
"	      00498e51    inc dword ptr [ebp-0Ch]"
"	      00498e54    mov eax,[ebp-0Ch]"
"	      00498e57    cmp [ebp-8],eax"
"	      00498e5a    jle near ptr 00498E8Dh"
);
// LINE 768:
	asm( 
"	      00498e60    push 0"
"	      00498e62    mov eax,[ebp-4]"
"	      00498e65    push eax"
"	      00498e66    mov eax,[ebp-18h]"
"	      00498e69    mov eax,[eax+158h]"
"	      00498e6f    mov ecx,[ebp-0Ch]"
"	      00498e72    mov eax,[eax+ecx*4+0Ch]"
"	      00498e76    mov ecx,[ebp-18h]"
"	      00498e79    add eax,[ecx+158h]"
"	      00498e7f    push eax"
"	      00498e80    call 0056EB90h"
"	      00498e85    add esp,0Ch"
"	      00498e88    jmp near ptr 00498E51h"
);
// LINE 774:
	asm( 
"	      00498e8d    mov eax,[ebp-18h]"
"	      00498e90    cmp dword ptr [eax+150h],0"
"	      00498e97    jne near ptr 00498ED9h"
"	      00498e9d    mov eax,[ebp-18h]"
"	      00498ea0    cmp dword ptr [eax+148h],0"
"	      00498ea7    je near ptr 00498ED9h"
);
// LINE 775:
	asm( 
"	      00498ead    mov eax,[ebp-18h]"
"	      00498eb0    mov eax,[eax+148h]"
"	      00498eb6    push eax"
"	      00498eb7    call 004D5872h"
"	      00498ebc    add esp,4"
);
// LINE 776:
	asm( 
"	      00498ebf    mov eax,[ebp-18h]"
"	      00498ec2    mov dword ptr [eax+148h],0"
);
// LINE 777:
	asm( 
"	      00498ecc    mov eax,[ebp-18h]"
"	      00498ecf    mov dword ptr [eax+14Ch],0"
);
// LINE 779:
	asm( 
"	      00498ed9    mov eax,1"
"	      00498ede    jmp near ptr 00498EE3h"
);
// LINE 780:
	asm( 
"	      00498ee3    pop edi"
"	      00498ee4    pop esi"
"	      00498ee5    pop ebx"
"	      00498ee6    leave"
"	      00498ee7    ret"
);
}

// FUNCTION: COPTER_D 0x00498ee8
void SmackerBackBuffer::SmackerBackBuffer() {
// LINE 805:
	asm( 
"	      00498ee8    push ebp"
"	      00498ee9    mov ebp,esp"
"	      00498eeb    sub esp,4"
"	      00498eee    push ebx"
"	      00498eef    push esi"
"	      00498ef0    push edi"
"	      00498ef1    mov [ebp-4],ecx"
"	      00498ef4    mov ecx,[ebp-4]"
"	      00498ef7    call 00497C00h"
"	      00498efc    mov ecx,[ebp-4]"
"	      00498eff    add ecx,140h"
"	      00498f05    call 0046E690h"
"	      00498f0a    mov eax,[ebp-4]"
"	      00498f0d    mov dword ptr [eax],5911F0h"
"	      00498f13    mov eax,[ebp-4]"
"	      00498f16    mov dword ptr [eax+140h],591188h"
);
// LINE 806:
	asm( 
"	      00498f20    mov eax,[ebp-4]"
"	      00498f23    mov dword ptr [eax+274h],0"
);
// LINE 807:
	asm( 
"	      00498f2d    mov eax,[ebp-4]"
"	      00498f30    mov dword ptr [eax+148h],0"
);
// LINE 808:
	asm( 
"	      00498f3a    mov eax,[ebp-4]"
"	      00498f3d    mov dword ptr [eax+14Ch],0"
);
// LINE 809:
	asm( 
"	      00498f47    mov eax,[ebp-4]"
"	      00498f4a    mov dword ptr [eax+278h],0"
);
// LINE 810:
	asm( 
"	      00498f54    jmp near ptr 00498F59h"
"	      00498f59    mov eax,[ebp-4]"
"	      00498f5c    pop edi"
"	      00498f5d    pop esi"
"	      00498f5e    pop ebx"
"	      00498f5f    leave"
"	      00498f60    ret"
);
}

// FUNCTION: COPTER_D 0x00498f61
void SmackerBackBuffer::SmackerBackBuffer(char *, int32_t, int32_t, int32_t, int32_t, int32_t) {
// LINE 819:
	asm( 
"	      00498f61    push ebp"
"	      00498f62    mov ebp,esp"
"	      00498f64    sub esp,4"
"	      00498f67    push ebx"
"	      00498f68    push esi"
"	      00498f69    push edi"
"	      00498f6a    mov [ebp-4],ecx"
"	      00498f6d    mov eax,[ebp+1Ch]"
"	      00498f70    push eax"
"	      00498f71    mov eax,[ebp+18h]"
"	      00498f74    push eax"
"	      00498f75    mov eax,[ebp+8]"
"	      00498f78    push eax"
"	      00498f79    mov ecx,[ebp-4]"
"	      00498f7c    call 00497CCFh"
"	      00498f81    mov ecx,[ebp-4]"
"	      00498f84    add ecx,140h"
"	      00498f8a    call 0046E690h"
"	      00498f8f    mov eax,[ebp-4]"
"	      00498f92    mov dword ptr [eax],5911F0h"
"	      00498f98    mov eax,[ebp-4]"
"	      00498f9b    mov dword ptr [eax+140h],591188h"
);
// LINE 820:
	asm( 
"	      00498fa5    mov eax,[ebp+0Ch]"
"	      00498fa8    mov ecx,[ebp-4]"
"	      00498fab    mov [ecx+274h],eax"
);
// LINE 821:
	asm( 
"	      00498fb1    mov eax,[ebp+10h]"
"	      00498fb4    mov ecx,[ebp-4]"
"	      00498fb7    mov [ecx+148h],eax"
);
// LINE 822:
	asm( 
"	      00498fbd    mov eax,[ebp+14h]"
"	      00498fc0    mov ecx,[ebp-4]"
"	      00498fc3    mov [ecx+14Ch],eax"
);
// LINE 823:
	asm( 
"	      00498fc9    mov eax,[ebp-4]"
"	      00498fcc    mov dword ptr [eax+278h],0"
);
// LINE 824:
	asm( 
"	      00498fd6    jmp near ptr 00498FDBh"
"	      00498fdb    mov eax,[ebp-4]"
"	      00498fde    pop edi"
"	      00498fdf    pop esi"
"	      00498fe0    pop ebx"
"	      00498fe1    leave"
"	      00498fe2    ret 18h"
);
}

// FUNCTION: COPTER_D 0x00498fe5
void SmackerBackBuffer::~SmackerBackBuffer() {
// LINE 832:
	asm( 
"	      00498fe5    push ebp"
"	      00498fe6    mov ebp,esp"
"	      00498fe8    sub esp,8"
"	      00498feb    push ebx"
"	      00498fec    push esi"
"	      00498fed    push edi"
"	      00498fee    mov [ebp-8],ecx"
"	      00498ff1    mov eax,[ebp-8]"
"	      00498ff4    mov dword ptr [eax],5911F0h"
"	      00498ffa    mov eax,[ebp-8]"
"	      00498ffd    mov dword ptr [eax+140h],591188h"
);
// LINE 834:
	asm( 
"	      00499007    mov ecx,[ebp-8]"
"	      0049900a    call 00497F91h"
);
// LINE 835:
	asm( 
"	      0049900f    mov eax,[ebp-8]"
"	      00499012    cmp dword ptr [eax+278h],0"
"	      00499019    je near ptr 00499039h"
);
// LINE 837:
	asm( 
"	      0049901f    mov eax,[ebp-8]"
"	      00499022    mov dword ptr [eax+18Ch],0"
);
// LINE 838:
	asm( 
"	      0049902c    mov eax,[ebp-8]"
"	      0049902f    mov dword ptr [eax+190h],0"
);
// LINE 841:
	asm( 
"	      00499039    jmp near ptr 0049903Eh"
"	      0049903e    cmp dword ptr [ebp-8],0"
"	      00499042    je near ptr 00499058h"
"	      00499048    mov eax,[ebp-8]"
"	      0049904b    add eax,140h"
"	      00499050    mov [ebp-4],eax"
"	      00499053    jmp near ptr 0049905Fh"
"	      00499058    mov dword ptr [ebp-4],0"
"	      0049905f    mov ecx,[ebp-4]"
"	      00499062    call 0046EC7Ah"
"	      00499067    mov ecx,[ebp-8]"
"	      0049906a    call 00497DA1h"
"	      0049906f    pop edi"
"	      00499070    pop esi"
"	      00499071    pop ebx"
"	      00499072    leave"
"	      00499073    ret"
);
}

// FUNCTION: COPTER_D 0x00499074
void SmackerBackBuffer::SetDirectBlit() {
// LINE 848:
	asm( 
"	      00499074    push ebp"
"	      00499075    mov ebp,esp"
"	      00499077    sub esp,4"
"	      0049907a    push ebx"
"	      0049907b    push esi"
"	      0049907c    push edi"
"	      0049907d    mov [ebp-4],ecx"
);
// LINE 849:
	asm( 
"	      00499080    mov eax,[ebp-4]"
"	      00499083    mov dword ptr [eax+278h],1"
);
// LINE 850:
	asm( 
"	      0049908d    jmp near ptr 00499092h"
"	      00499092    pop edi"
"	      00499093    pop esi"
"	      00499094    pop ebx"
"	      00499095    leave"
"	      00499096    ret"
);
}

// FUNCTION: COPTER_D 0x00499097
int32_t SmackerBackBuffer::Initialize() {
// LINE 865:
	asm( 
"	      00499097    push ebp"
"	      00499098    mov ebp,esp"
"	      0049909a    sub esp,4"
"	      0049909d    push ebx"
"	      0049909e    push esi"
"	      0049909f    push edi"
"	      004990a0    mov [ebp-4],ecx"
);
// LINE 866:
	asm( 
"	      004990a3    mov eax,[ebp-4]"
"	      004990a6    cmp dword ptr [eax+278h],0"
"	      004990ad    je near ptr 004990BDh"
);
// LINE 867:
	asm( 
"	      004990b3    mov eax,1"
"	      004990b8    jmp near ptr 004990CDh"
);
// LINE 868:
	asm( 
"	      004990bd    mov eax,[ebp-4]"
"	      004990c0    mov eax,[eax]"
"	      004990c2    mov ecx,[ebp-4]"
"	      004990c5    call dword ptr [eax+8]"
"	      004990c8    jmp near ptr 004990CDh"
);
// LINE 869:
	asm( 
"	      004990cd    pop edi"
"	      004990ce    pop esi"
"	      004990cf    pop ebx"
"	      004990d0    leave"
"	      004990d1    ret"
);
}

// FUNCTION: COPTER_D 0x004990d2
void SmackerBackBuffer::SetBackBufferData(char *, int32_t, int32_t, int32_t, int32_t, int32_t) {
// LINE 883:
	asm( 
"	      004990d2    push ebp"
"	      004990d3    mov ebp,esp"
"	      004990d5    sub esp,4"
"	      004990d8    push ebx"
"	      004990d9    push esi"
"	      004990da    push edi"
"	      004990db    mov [ebp-4],ecx"
);
// LINE 884:
	asm( 
"	      004990de    cmp dword ptr [ebp+8],0"
"	      004990e2    je near ptr 00499100h"
);
// LINE 885:
	asm( 
"	      004990e8    mov eax,[ebp+8]"
"	      004990eb    push eax"
"	      004990ec    mov eax,[ebp-4]"
"	      004990ef    add eax,3Ch"
"	      004990f2    push eax"
"	      004990f3    call 0056CEB0h"
"	      004990f8    add esp,8"
);
// LINE 886:
	asm( 
"	      004990fb    jmp near ptr 00499107h"
);
// LINE 887:
	asm( 
"	      00499100    mov eax,[ebp-4]"
"	      00499103    mov byte ptr [eax+3Ch],0"
);
// LINE 889:
	asm( 
"	      00499107    mov eax,[ebp+0Ch]"
"	      0049910a    mov ecx,[ebp-4]"
"	      0049910d    mov [ecx+274h],eax"
);
// LINE 890:
	asm( 
"	      00499113    mov eax,[ebp+10h]"
"	      00499116    mov ecx,[ebp-4]"
"	      00499119    mov [ecx+148h],eax"
);
// LINE 891:
	asm( 
"	      0049911f    mov eax,[ebp+14h]"
"	      00499122    mov ecx,[ebp-4]"
"	      00499125    mov [ecx+14Ch],eax"
);
// LINE 892:
	asm( 
"	      0049912b    mov eax,[ebp+18h]"
"	      0049912e    mov ecx,[ebp-4]"
"	      00499131    mov [ecx+2Ch],eax"
);
// LINE 893:
	asm( 
"	      00499134    mov eax,[ebp+1Ch]"
"	      00499137    mov ecx,[ebp-4]"
"	      0049913a    mov [ecx+30h],eax"
);
// LINE 894:
	asm( 
"	      0049913d    jmp near ptr 00499142h"
"	      00499142    pop edi"
"	      00499143    pop esi"
"	      00499144    pop ebx"
"	      00499145    leave"
"	      00499146    ret 18h"
);
}

// FUNCTION: COPTER_D 0x00499149
int32_t SmackerBackBuffer::Open(char *, unsigned long, unsigned long) {
// LINE 901:
	asm( 
"	      00499149    push ebp"
"	      0049914a    mov ebp,esp"
"	      0049914c    sub esp,4"
"	      0049914f    push ebx"
"	      00499150    push esi"
"	      00499151    push edi"
"	      00499152    mov [ebp-4],ecx"
);
// LINE 902:
	asm( 
"	      00499155    cmp dword ptr [ebp+8],0"
"	      00499159    je near ptr 00499172h"
);
// LINE 903:
	asm( 
"	      0049915f    mov eax,[ebp+8]"
"	      00499162    push eax"
"	      00499163    mov eax,[ebp-4]"
"	      00499166    add eax,3Ch"
"	      00499169    push eax"
"	      0049916a    call 0056CEB0h"
"	      0049916f    add esp,8"
);
// LINE 904:
	asm( 
"	      00499172    mov eax,[ebp+10h]"
"	      00499175    push eax"
"	      00499176    mov eax,[ebp+0Ch]"
"	      00499179    push eax"
"	      0049917a    mov eax,[ebp-4]"
"	      0049917d    add eax,3Ch"
"	      00499180    push eax"
"	      00499181    call 004C4630h"
"	      00499186    add esp,0Ch"
"	      00499189    mov ecx,[ebp-4]"
"	      0049918c    mov [ecx+38h],eax"
);
// LINE 905:
	asm( 
"	      0049918f    mov eax,[ebp-4]"
"	      00499192    cmp dword ptr [eax+38h],0"
"	      00499196    jne near ptr 004991A3h"
);
// LINE 906:
	asm( 
"	      0049919c    xor eax,eax"
"	      0049919e    jmp near ptr 00499203h"
);
// LINE 908:
	asm( 
"	      004991a3    mov eax,[ebp-4]"
"	      004991a6    mov eax,[eax+38h]"
"	      004991a9    mov eax,[eax+4]"
"	      004991ac    mov ecx,[ebp-4]"
"	      004991af    mov [ecx+148h],eax"
);
// LINE 909:
	asm( 
"	      004991b5    mov eax,[ebp-4]"
"	      004991b8    mov eax,[eax+38h]"
"	      004991bb    mov eax,[eax+8]"
"	      004991be    mov ecx,[ebp-4]"
"	      004991c1    mov [ecx+14Ch],eax"
);
// LINE 912:
	asm( 
"	      004991c7    push 493E0h"
"	      004991cc    call 004C462Ah"
"	      004991d1    add esp,4"
);
// LINE 915:
	asm( 
"	      004991d4    mov eax,[ebp-4]"
"	      004991d7    cmp dword ptr [eax+278h],0"
"	      004991de    je near ptr 004991EEh"
);
// LINE 916:
	asm( 
"	      004991e4    mov eax,1"
"	      004991e9    jmp near ptr 00499203h"
);
// LINE 917:
	asm( 
"	      004991ee    mov eax,[ebp-4]"
"	      004991f1    mov eax,[eax]"
"	      004991f3    mov ecx,[ebp-4]"
"	      004991f6    call dword ptr [eax+8]"
);
// LINE 918:
	asm( 
"	      004991f9    mov eax,1"
"	      004991fe    jmp near ptr 00499203h"
);
// LINE 919:
	asm( 
"	      00499203    pop edi"
"	      00499204    pop esi"
"	      00499205    pop ebx"
"	      00499206    leave"
"	      00499207    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0049920a
int32_t SmackerBackBuffer::CreateSurface() {
// LINE 933:
	asm( 
"	      0049920a    push ebp"
"	      0049920b    mov ebp,esp"
"	      0049920d    sub esp,0Ch"
"	      00499210    push ebx"
"	      00499211    push esi"
"	      00499212    push edi"
"	      00499213    mov [ebp-0Ch],ecx"
);
// LINE 946:
	asm( 
"	      00499216    mov eax,[ebp-0Ch]"
"	      00499219    cmp dword ptr [eax+278h],0"
"	      00499220    je near ptr 00499230h"
);
// LINE 947:
	asm( 
"	      00499226    mov eax,1"
"	      0049922b    jmp near ptr 00499391h"
);
// LINE 952:
	asm( 
"	      00499230    mov eax,[ebp-0Ch]"
"	      00499233    cmp dword ptr [eax+18Ch],0"
"	      0049923a    je near ptr 0049924Ah"
);
// LINE 953:
	asm( 
"	      00499240    mov eax,1"
"	      00499245    jmp near ptr 00499391h"
);
// LINE 956:
	asm( 
"	      0049924a    push 6Ch"
"	      0049924c    push 0"
"	      0049924e    mov eax,[ebp-0Ch]"
"	      00499251    add eax,198h"
"	      00499256    push eax"
"	      00499257    call 0056EB90h"
"	      0049925c    add esp,0Ch"
);
// LINE 957:
	asm( 
"	      0049925f    mov eax,[ebp-0Ch]"
"	      00499262    mov dword ptr [eax+198h],6Ch"
);
// LINE 958:
	asm( 
"	      0049926c    mov eax,[ebp-0Ch]"
"	      0049926f    mov dword ptr [eax+19Ch],6"
);
// LINE 959:
	asm( 
"	      00499279    mov eax,[ebp-0Ch]"
"	      0049927c    mov dword ptr [eax+200h],840h"
);
// LINE 960:
	asm( 
"	      00499286    mov eax,[ebp-0Ch]"
"	      00499289    mov dword ptr [eax+1ACh],0"
);
// LINE 961:
	asm( 
"	      00499293    mov eax,[ebp-0Ch]"
"	      00499296    mov eax,[eax+148h]"
"	      0049929c    mov ecx,[ebp-0Ch]"
"	      0049929f    mov [ecx+1A4h],eax"
);
// LINE 962:
	asm( 
"	      004992a5    mov eax,[ebp-0Ch]"
"	      004992a8    mov eax,[eax+14Ch]"
"	      004992ae    mov ecx,[ebp-0Ch]"
"	      004992b1    mov [ecx+1A0h],eax"
);
// LINE 963:
	asm( 
"	      004992b7    mov eax,[ebp-0Ch]"
"	      004992ba    mov dword ptr [eax+15Ch],0"
);
// LINE 964:
	asm( 
"	      004992c4    mov eax,[ebp-0Ch]"
"	      004992c7    mov dword ptr [eax+160h],0"
);
// LINE 965:
	asm( 
"	      004992d1    mov eax,[ebp-0Ch]"
"	      004992d4    mov eax,[eax+148h]"
"	      004992da    mov ecx,[ebp-0Ch]"
"	      004992dd    mov [ecx+164h],eax"
);
// LINE 966:
	asm( 
"	      004992e3    mov eax,[ebp-0Ch]"
"	      004992e6    mov eax,[eax+14Ch]"
"	      004992ec    mov ecx,[ebp-0Ch]"
"	      004992ef    mov [ecx+168h],eax"
);
// LINE 968:
	asm( 
"	      004992f5    push 0"
"	      004992f7    mov eax,[ebp-0Ch]"
"	      004992fa    add eax,18Ch"
"	      004992ff    push eax"
"	      00499300    mov eax,[ebp-0Ch]"
"	      00499303    add eax,198h"
"	      00499308    push eax"
"	      00499309    mov eax,ds:[597264h]"
"	      0049930e    push eax"
"	      0049930f    mov eax,ds:[597264h]"
"	      00499314    mov eax,[eax]"
"	      00499316    call dword ptr [eax+18h]"
"	      00499319    mov [ebp-4],eax"
);
// LINE 969:
	asm( 
"	      0049931c    cmp dword ptr [ebp-4],0"
"	      00499320    je near ptr 00499345h"
);
// LINE 970:
	asm( 
"	      00499326    mov eax,[ebp-4]"
"	      00499329    mov [ebp-8],eax"
"	      0049932c    jmp near ptr 00499331h"
"	      00499331    push 59A20Ch"
"	      00499336    lea ecx,[ebp-8]"
"	      00499339    call 0042D420h"
);
// LINE 971:
	asm( 
"	      0049933e    xor eax,eax"
"	      00499340    jmp near ptr 00499391h"
);
// LINE 977:
	asm( 
"	      00499345    mov eax,[ebp-0Ch]"
"	      00499348    mov eax,[eax+148h]"
"	      0049934e    mov ecx,[ebp-0Ch]"
"	      00499351    imul eax,[ecx+14Ch]"
"	      00499358    add ds:[599DA0h],eax"
);
// LINE 981:
	asm( 
"	      0049935e    mov ecx,[ebp-0Ch]"
"	      00499361    mov eax,[ebp-0Ch]"
"	      00499364    mov eax,[eax+140h]"
"	      0049936a    add ecx,140h"
"	      00499370    call dword ptr [eax]"
);
// LINE 982:
	asm( 
"	      00499372    mov ecx,[ebp-0Ch]"
"	      00499375    mov eax,[ebp-0Ch]"
"	      00499378    mov eax,[eax+140h]"
"	      0049937e    add ecx,140h"
"	      00499384    call dword ptr [eax+4]"
);
// LINE 986:
	asm( 
"	      00499387    mov eax,1"
"	      0049938c    jmp near ptr 00499391h"
);
// LINE 987:
	asm( 
"	      00499391    pop edi"
"	      00499392    pop esi"
"	      00499393    pop ebx"
"	      00499394    leave"
"	      00499395    ret"
);
}

// FUNCTION: COPTER_D 0x00499396
unsigned long SmackerBackBuffer::Compose(class IFlatImage*, long, long, long, long, long, long) {
// LINE 1014:
	asm( 
"	      00499396    push ebp"
"	      00499397    mov ebp,esp"
"	      00499399    sub esp,14h"
"	      0049939c    push ebx"
"	      0049939d    push esi"
"	      0049939e    push edi"
"	      0049939f    mov [ebp-14h],ecx"
);
// LINE 1015:
	asm( 
"	      004993a2    mov eax,[ebp-14h]"
"	      004993a5    cmp dword ptr [eax-13Ch],0"
"	      004993ac    jne near ptr 004993C4h"
);
// LINE 1016:
	asm( 
"	      004993b2    mov eax,[ebp-14h]"
"	      004993b5    mov dword ptr [eax-13Ch],1"
);
// LINE 1018:
	asm( 
"	      004993bf    jmp near ptr 004994A2h"
"	      004993c4    mov eax,[ebp-14h]"
"	      004993c7    cmp dword ptr [eax-13Ch],2"
"	      004993ce    jne near ptr 004994A2h"
);
// LINE 1019:
	asm( 
"	      004993d4    mov eax,[ebp-14h]"
"	      004993d7    cmp dword ptr [eax-134h],0"
"	      004993de    je near ptr 00499435h"
);
// LINE 1020:
	asm( 
"	      004993e4    jmp near ptr 004993E9h"
);
// LINE 1021:
	asm( 
"	      004993e9    mov eax,[ebp+0Ch]"
"	      004993ec    mov [ebp-10h],eax"
);
// LINE 1022:
	asm( 
"	      004993ef    mov eax,[ebp+10h]"
"	      004993f2    mov [ebp-0Ch],eax"
);
// LINE 1023:
	asm( 
"	      004993f5    jmp near ptr 004993FAh"
"	      004993fa    mov eax,[ebp-14h]"
"	      004993fd    mov eax,[eax+8]"
"	      00499400    add eax,[ebp+0Ch]"
"	      00499403    mov [ebp-8],eax"
);
// LINE 1024:
	asm( 
"	      00499406    jmp near ptr 0049940Bh"
"	      0049940b    mov eax,[ebp-14h]"
"	      0049940e    mov eax,[eax+8]"
"	      00499411    add eax,[ebp+10h]"
"	      00499414    mov [ebp-4],eax"
);
// LINE 1025:
	asm( 
"	      00499417    lea eax,[ebp-10h]"
"	      0049941a    push eax"
"	      0049941b    mov eax,[ebp-14h]"
"	      0049941e    mov eax,[eax-130h]"
"	      00499424    push eax"
"	      00499425    mov eax,[ebp-14h]"
"	      00499428    mov eax,[eax]"
"	      0049942a    mov ecx,[ebp-14h]"
"	      0049942d    call dword ptr [eax+44h]"
);
// LINE 1027:
	asm( 
"	      00499430    jmp near ptr 00499498h"
);
// LINE 1030:
	asm( 
"	      00499435    mov eax,[ebp-14h]"
"	      00499438    cmp dword ptr [eax+134h],0"
"	      0049943f    je near ptr 00499474h"
);
// LINE 1032:
	asm( 
"	      00499445    mov eax,[ebp+20h]"
"	      00499448    push eax"
"	      00499449    mov eax,[ebp+1Ch]"
"	      0049944c    push eax"
"	      0049944d    mov eax,[ebp+18h]"
"	      00499450    push eax"
"	      00499451    mov eax,[ebp+14h]"
"	      00499454    push eax"
"	      00499455    mov eax,[ebp+10h]"
"	      00499458    push eax"
"	      00499459    mov eax,[ebp+0Ch]"
"	      0049945c    push eax"
"	      0049945d    mov eax,[ebp+8]"
"	      00499460    push eax"
"	      00499461    mov ecx,[ebp-14h]"
"	      00499464    sub ecx,140h"
"	      0049946a    call 00499D5Ch"
);
// LINE 1034:
	asm( 
"	      0049946f    jmp near ptr 00499498h"
);
// LINE 1036:
	asm( 
"	      00499474    mov eax,[ebp+20h]"
"	      00499477    push eax"
"	      00499478    mov eax,[ebp+1Ch]"
"	      0049947b    push eax"
"	      0049947c    mov eax,[ebp+18h]"
"	      0049947f    push eax"
"	      00499480    mov eax,[ebp+14h]"
"	      00499483    push eax"
"	      00499484    mov eax,[ebp+10h]"
"	      00499487    push eax"
"	      00499488    mov eax,[ebp+0Ch]"
"	      0049948b    push eax"
"	      0049948c    mov eax,[ebp+8]"
"	      0049948f    push eax"
"	      00499490    mov ecx,[ebp-14h]"
"	      00499493    call 0046F948h"
);
// LINE 1039:
	asm( 
"	      00499498    mov eax,1"
"	      0049949d    jmp near ptr 00499766h"
);
// LINE 1042:
	asm( 
"	      004994a2    mov eax,[ebp-14h]"
"	      004994a5    cmp dword ptr [eax-108h],0"
"	      004994ac    je near ptr 00499755h"
);
// LINE 1043:
	asm( 
"	      004994b2    mov eax,[ebp-14h]"
"	      004994b5    mov eax,[eax-108h]"
"	      004994bb    push eax"
"	      004994bc    call 004C466Ch"
"	      004994c1    add esp,4"
"	      004994c4    test eax,eax"
"	      004994c6    jne near ptr 00499750h"
);
// LINE 1044:
	asm( 
"	      004994cc    mov eax,[ebp-14h]"
"	      004994cf    cmp dword ptr [eax+134h],0"
"	      004994d6    je near ptr 004995F2h"
);
// LINE 1048:
	asm( 
"	      004994dc    mov eax,[ebp-14h]"
"	      004994df    mov eax,[eax-108h]"
"	      004994e5    cmp dword ptr [eax+68h],0"
"	      004994e9    je near ptr 00499562h"
);
// LINE 1049:
	asm( 
"	      004994ef    push 0"
"	      004994f1    mov eax,[ebp-14h]"
"	      004994f4    mov eax,[eax-108h]"
"	      004994fa    add eax,6Ch"
"	      004994fd    push eax"
"	      004994fe    mov eax,[ebp-14h]"
"	      00499501    mov eax,[eax-10Ch]"
"	      00499507    push eax"
"	      00499508    call 004C4666h"
"	      0049950d    add esp,0Ch"
);
// LINE 1050:
	asm( 
"	      00499510    mov eax,[ebp-14h]"
"	      00499513    mov eax,[eax-10Ch]"
"	      00499519    cmp dword ptr [eax+2Ch],100h"
"	      00499520    jae near ptr 00499562h"
);
// LINE 1052:
	asm( 
"	      00499526    mov eax,[ebp-14h]"
"	      00499529    mov eax,[eax-10Ch]"
"	      0049952f    mov eax,[eax+438h]"
"	      00499535    push eax"
"	      00499536    mov eax,[ebp-14h]"
"	      00499539    mov eax,[eax-10Ch]"
"	      0049953f    mov eax,[eax+28h]"
"	      00499542    push eax"
"	      00499543    mov eax,[ebp-14h]"
"	      00499546    mov eax,[eax-10Ch]"
"	      0049954c    add eax,38h"
"	      0049954f    push eax"
"	      00499550    mov eax,[ebp-14h]"
"	      00499553    mov eax,[eax-108h]"
"	      00499559    push eax"
"	      0049955a    call 004C4660h"
"	      0049955f    add esp,10h"
);
// LINE 1055:
	asm( 
"	      00499562    mov eax,[ebp-14h]"
"	      00499565    mov eax,[eax-108h]"
"	      0049956b    push eax"
"	      0049956c    call 004C465Ah"
"	      00499571    add esp,4"
);
// LINE 1057:
	asm( 
"	      00499574    mov eax,[ebp-14h]"
"	      00499577    cmp dword ptr [eax-114h],0"
"	      0049957e    jne near ptr 004995C3h"
"	      00499584    mov eax,[ebp-14h]"
"	      00499587    cmp dword ptr [eax-110h],0"
"	      0049958e    jne near ptr 004995C3h"
);
// LINE 1059:
	asm( 
"	      00499594    mov eax,[ebp+20h]"
"	      00499597    push eax"
"	      00499598    mov eax,[ebp+1Ch]"
"	      0049959b    push eax"
"	      0049959c    mov eax,[ebp+18h]"
"	      0049959f    push eax"
"	      004995a0    mov eax,[ebp+14h]"
"	      004995a3    push eax"
"	      004995a4    mov eax,[ebp+10h]"
"	      004995a7    push eax"
"	      004995a8    mov eax,[ebp+0Ch]"
"	      004995ab    push eax"
"	      004995ac    mov eax,[ebp+8]"
"	      004995af    push eax"
"	      004995b0    mov ecx,[ebp-14h]"
"	      004995b3    sub ecx,140h"
"	      004995b9    call 00499B35h"
);
// LINE 1060:
	asm( 
"	      004995be    jmp near ptr 004995EDh"
);
// LINE 1062:
	asm( 
"	      004995c3    mov eax,[ebp+20h]"
"	      004995c6    push eax"
"	      004995c7    mov eax,[ebp+1Ch]"
"	      004995ca    push eax"
"	      004995cb    mov eax,[ebp+18h]"
"	      004995ce    push eax"
"	      004995cf    mov eax,[ebp+14h]"
"	      004995d2    push eax"
"	      004995d3    mov eax,[ebp+10h]"
"	      004995d6    push eax"
"	      004995d7    mov eax,[ebp+0Ch]"
"	      004995da    push eax"
"	      004995db    mov eax,[ebp+8]"
"	      004995de    push eax"
"	      004995df    mov ecx,[ebp-14h]"
"	      004995e2    sub ecx,140h"
"	      004995e8    call 00499D5Ch"
);
// LINE 1064:
	asm( 
"	      004995ed    jmp near ptr 004996F5h"
);
// LINE 1065:
	asm( 
"	      004995f2    mov eax,[ebp-14h]"
"	      004995f5    cmp dword ptr [eax+138h],0"
"	      004995fc    je near ptr 0049966Eh"
);
// LINE 1066:
	asm( 
"	      00499602    mov eax,[ebp+8]"
"	      00499605    mov eax,[eax]"
"	      00499607    mov ecx,[ebp+8]"
"	      0049960a    call dword ptr [eax]"
);
// LINE 1067:
	asm( 
"	      0049960c    jmp near ptr 00499611h"
"	      00499611    jmp near ptr 00499616h"
"	      00499616    jmp near ptr 0049961Bh"
"	      0049961b    push 0"
"	      0049961d    mov eax,[ebp+8]"
"	      00499620    mov eax,[eax+10h]"
"	      00499623    push eax"
"	      00499624    mov eax,[ebp+8]"
"	      00499627    mov eax,[eax+0Ch]"
"	      0049962a    push eax"
"	      0049962b    mov eax,[ebp+8]"
"	      0049962e    mov eax,[eax+14h]"
"	      00499631    push eax"
"	      00499632    mov eax,[ebp+10h]"
"	      00499635    push eax"
"	      00499636    mov eax,[ebp+0Ch]"
"	      00499639    push eax"
"	      0049963a    mov eax,[ebp-14h]"
"	      0049963d    mov eax,[eax-108h]"
"	      00499643    push eax"
"	      00499644    call 004C461Eh"
"	      00499649    add esp,1Ch"
);
// LINE 1068:
	asm( 
"	      0049964c    mov eax,[ebp-14h]"
"	      0049964f    mov eax,[eax-108h]"
"	      00499655    push eax"
"	      00499656    call 004C465Ah"
"	      0049965b    add esp,4"
);
// LINE 1069:
	asm( 
"	      0049965e    mov eax,[ebp+8]"
"	      00499661    mov eax,[eax]"
"	      00499663    mov ecx,[ebp+8]"
"	      00499666    call dword ptr [eax+4]"
);
// LINE 1071:
	asm( 
"	      00499669    jmp near ptr 004996F5h"
);
// LINE 1072:
	asm( 
"	      0049966e    mov eax,[ebp-14h]"
"	      00499671    mov eax,[eax]"
"	      00499673    mov ecx,[ebp-14h]"
"	      00499676    call dword ptr [eax]"
);
// LINE 1073:
	asm( 
"	      00499678    jmp near ptr 0049967Dh"
"	      0049967d    jmp near ptr 00499682h"
"	      00499682    jmp near ptr 00499687h"
"	      00499687    push 0"
"	      00499689    mov eax,[ebp-14h]"
"	      0049968c    mov eax,[eax+10h]"
"	      0049968f    push eax"
"	      00499690    mov eax,[ebp-14h]"
"	      00499693    mov eax,[eax+0Ch]"
"	      00499696    push eax"
"	      00499697    mov eax,[ebp-14h]"
"	      0049969a    mov eax,[eax+14h]"
"	      0049969d    push eax"
"	      0049969e    push 0"
"	      004996a0    push 0"
"	      004996a2    mov eax,[ebp-14h]"
"	      004996a5    mov eax,[eax-108h]"
"	      004996ab    push eax"
"	      004996ac    call 004C461Eh"
"	      004996b1    add esp,1Ch"
);
// LINE 1074:
	asm( 
"	      004996b4    mov eax,[ebp-14h]"
"	      004996b7    mov eax,[eax-108h]"
"	      004996bd    push eax"
"	      004996be    call 004C465Ah"
"	      004996c3    add esp,4"
);
// LINE 1075:
	asm( 
"	      004996c6    mov eax,[ebp-14h]"
"	      004996c9    mov eax,[eax]"
"	      004996cb    mov ecx,[ebp-14h]"
"	      004996ce    call dword ptr [eax+4]"
);
// LINE 1078:
	asm( 
"	      004996d1    mov eax,[ebp+20h]"
"	      004996d4    push eax"
"	      004996d5    mov eax,[ebp+1Ch]"
"	      004996d8    push eax"
"	      004996d9    mov eax,[ebp+18h]"
"	      004996dc    push eax"
"	      004996dd    mov eax,[ebp+14h]"
"	      004996e0    push eax"
"	      004996e1    mov eax,[ebp+10h]"
"	      004996e4    push eax"
"	      004996e5    mov eax,[ebp+0Ch]"
"	      004996e8    push eax"
"	      004996e9    mov eax,[ebp+8]"
"	      004996ec    push eax"
"	      004996ed    mov ecx,[ebp-14h]"
"	      004996f0    call 0046F948h"
);
// LINE 1081:
	asm( 
"	      004996f5    mov eax,[ebp-14h]"
"	      004996f8    mov eax,[eax-108h]"
"	      004996fe    mov eax,[eax+0Ch]"
"	      00499701    dec eax"
"	      00499702    mov ecx,[ebp-14h]"
"	      00499705    mov ecx,[ecx-108h]"
"	      0049970b    cmp eax,[ecx+370h]"
"	      00499711    jne near ptr 0049973Eh"
);
// LINE 1082:
	asm( 
"	      00499717    mov eax,[ebp-14h]"
"	      0049971a    cmp dword ptr [eax-138h],0"
"	      00499721    jne near ptr 0049973Eh"
);
// LINE 1083:
	asm( 
"	      00499727    mov eax,[ebp-14h]"
"	      0049972a    mov dword ptr [eax-13Ch],2"
);
// LINE 1084:
	asm( 
"	      00499734    mov eax,1"
"	      00499739    jmp near ptr 00499766h"
);
// LINE 1087:
	asm( 
"	      0049973e    mov eax,[ebp-14h]"
"	      00499741    mov eax,[eax-108h]"
"	      00499747    push eax"
"	      00499748    call 004C4648h"
"	      0049974d    add esp,4"
);
// LINE 1090:
	asm( 
"	      00499750    jmp near ptr 0049975Fh"
);
// LINE 1091:
	asm( 
"	      00499755    mov eax,2"
"	      0049975a    jmp near ptr 00499766h"
);
// LINE 1093:
	asm( 
"	      0049975f    xor eax,eax"
"	      00499761    jmp near ptr 00499766h"
);
// LINE 1094:
	asm( 
"	      00499766    pop edi"
"	      00499767    pop esi"
"	      00499768    pop ebx"
"	      00499769    leave"
"	      0049976a    ret 1Ch"
);
}

// FUNCTION: COPTER_D 0x0049976d
unsigned long SmackerBackBuffer::StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long) {
// LINE 1104:
	asm( 
"	      0049976d    push ebp"
"	      0049976e    mov ebp,esp"
"	      00499770    sub esp,14h"
"	      00499773    push ebx"
"	      00499774    push esi"
"	      00499775    push edi"
"	      00499776    mov [ebp-14h],ecx"
);
// LINE 1105:
	asm( 
"	      00499779    mov eax,[ebp-14h]"
"	      0049977c    cmp dword ptr [eax-13Ch],0"
"	      00499783    jne near ptr 0049979Bh"
);
// LINE 1106:
	asm( 
"	      00499789    mov eax,[ebp-14h]"
"	      0049978c    mov dword ptr [eax-13Ch],1"
);
// LINE 1108:
	asm( 
"	      00499796    jmp near ptr 0049986Bh"
"	      0049979b    mov eax,[ebp-14h]"
"	      0049979e    cmp dword ptr [eax-13Ch],2"
"	      004997a5    jne near ptr 0049986Bh"
);
// LINE 1109:
	asm( 
"	      004997ab    mov eax,[ebp-14h]"
"	      004997ae    cmp dword ptr [eax-134h],0"
"	      004997b5    je near ptr 004997F6h"
);
// LINE 1110:
	asm( 
"	      004997bb    jmp near ptr 004997C0h"
);
// LINE 1111:
	asm( 
"	      004997c0    mov eax,[ebp+0Ch]"
"	      004997c3    mov [ebp-10h],eax"
);
// LINE 1112:
	asm( 
"	      004997c6    mov eax,[ebp+10h]"
"	      004997c9    mov [ebp-0Ch],eax"
);
// LINE 1113:
	asm( 
"	      004997cc    mov eax,[ebp+14h]"
"	      004997cf    mov [ebp-8],eax"
);
// LINE 1114:
	asm( 
"	      004997d2    mov eax,[ebp+18h]"
"	      004997d5    mov [ebp-4],eax"
);
// LINE 1115:
	asm( 
"	      004997d8    lea eax,[ebp-10h]"
"	      004997db    push eax"
"	      004997dc    mov eax,[ebp-14h]"
"	      004997df    mov eax,[eax-130h]"
"	      004997e5    push eax"
"	      004997e6    mov eax,[ebp-14h]"
"	      004997e9    mov eax,[eax]"
"	      004997eb    mov ecx,[ebp-14h]"
"	      004997ee    call dword ptr [eax+44h]"
);
// LINE 1117:
	asm( 
"	      004997f1    jmp near ptr 00499861h"
);
// LINE 1120:
	asm( 
"	      004997f6    mov eax,[ebp-14h]"
"	      004997f9    cmp dword ptr [eax+134h],0"
"	      00499800    je near ptr 00499835h"
);
// LINE 1122:
	asm( 
"	      00499806    mov eax,[ebp+28h]"
"	      00499809    push eax"
"	      0049980a    mov eax,[ebp+24h]"
"	      0049980d    push eax"
"	      0049980e    mov eax,[ebp+20h]"
"	      00499811    push eax"
"	      00499812    mov eax,[ebp+1Ch]"
"	      00499815    push eax"
"	      00499816    mov eax,[ebp+10h]"
"	      00499819    push eax"
"	      0049981a    mov eax,[ebp+0Ch]"
"	      0049981d    push eax"
"	      0049981e    mov eax,[ebp+8]"
"	      00499821    push eax"
"	      00499822    mov ecx,[ebp-14h]"
"	      00499825    sub ecx,140h"
"	      0049982b    call 00499D5Ch"
);
// LINE 1124:
	asm( 
"	      00499830    jmp near ptr 00499861h"
);
// LINE 1127:
	asm( 
"	      00499835    mov eax,[ebp+28h]"
"	      00499838    push eax"
"	      00499839    mov eax,[ebp+24h]"
"	      0049983c    push eax"
"	      0049983d    mov eax,[ebp+20h]"
"	      00499840    push eax"
"	      00499841    mov eax,[ebp+1Ch]"
"	      00499844    push eax"
"	      00499845    mov eax,[ebp+18h]"
"	      00499848    push eax"
"	      00499849    mov eax,[ebp+14h]"
"	      0049984c    push eax"
"	      0049984d    mov eax,[ebp+10h]"
"	      00499850    push eax"
"	      00499851    mov eax,[ebp+0Ch]"
"	      00499854    push eax"
"	      00499855    mov eax,[ebp+8]"
"	      00499858    push eax"
"	      00499859    mov ecx,[ebp-14h]"
"	      0049985c    call 0046FE13h"
);
// LINE 1130:
	asm( 
"	      00499861    mov eax,1"
"	      00499866    jmp near ptr 00499B2Eh"
);
// LINE 1133:
	asm( 
"	      0049986b    mov eax,[ebp-14h]"
"	      0049986e    cmp dword ptr [eax-108h],0"
"	      00499875    je near ptr 00499B1Dh"
);
// LINE 1134:
	asm( 
"	      0049987b    mov eax,[ebp-14h]"
"	      0049987e    mov eax,[eax-108h]"
"	      00499884    push eax"
"	      00499885    call 004C466Ch"
"	      0049988a    add esp,4"
"	      0049988d    test eax,eax"
"	      0049988f    jne near ptr 00499B18h"
);
// LINE 1135:
	asm( 
"	      00499895    mov eax,[ebp-14h]"
"	      00499898    cmp dword ptr [eax+134h],0"
"	      0049989f    je near ptr 004999BBh"
);
// LINE 1139:
	asm( 
"	      004998a5    mov eax,[ebp-14h]"
"	      004998a8    mov eax,[eax-108h]"
"	      004998ae    cmp dword ptr [eax+68h],0"
"	      004998b2    je near ptr 0049992Bh"
);
// LINE 1140:
	asm( 
"	      004998b8    push 0"
"	      004998ba    mov eax,[ebp-14h]"
"	      004998bd    mov eax,[eax-108h]"
"	      004998c3    add eax,6Ch"
"	      004998c6    push eax"
"	      004998c7    mov eax,[ebp-14h]"
"	      004998ca    mov eax,[eax-10Ch]"
"	      004998d0    push eax"
"	      004998d1    call 004C4666h"
"	      004998d6    add esp,0Ch"
);
// LINE 1141:
	asm( 
"	      004998d9    mov eax,[ebp-14h]"
"	      004998dc    mov eax,[eax-10Ch]"
"	      004998e2    cmp dword ptr [eax+2Ch],100h"
"	      004998e9    jae near ptr 0049992Bh"
);
// LINE 1143:
	asm( 
"	      004998ef    mov eax,[ebp-14h]"
"	      004998f2    mov eax,[eax-10Ch]"
"	      004998f8    mov eax,[eax+438h]"
"	      004998fe    push eax"
"	      004998ff    mov eax,[ebp-14h]"
"	      00499902    mov eax,[eax-10Ch]"
"	      00499908    mov eax,[eax+28h]"
"	      0049990b    push eax"
"	      0049990c    mov eax,[ebp-14h]"
"	      0049990f    mov eax,[eax-10Ch]"
"	      00499915    add eax,38h"
"	      00499918    push eax"
"	      00499919    mov eax,[ebp-14h]"
"	      0049991c    mov eax,[eax-108h]"
"	      00499922    push eax"
"	      00499923    call 004C4660h"
"	      00499928    add esp,10h"
);
// LINE 1146:
	asm( 
"	      0049992b    mov eax,[ebp-14h]"
"	      0049992e    mov eax,[eax-108h]"
"	      00499934    push eax"
"	      00499935    call 004C465Ah"
"	      0049993a    add esp,4"
);
// LINE 1148:
	asm( 
"	      0049993d    mov eax,[ebp-14h]"
"	      00499940    cmp dword ptr [eax-114h],0"
"	      00499947    jne near ptr 0049998Ch"
"	      0049994d    mov eax,[ebp-14h]"
"	      00499950    cmp dword ptr [eax-110h],0"
"	      00499957    jne near ptr 0049998Ch"
);
// LINE 1150:
	asm( 
"	      0049995d    mov eax,[ebp+28h]"
"	      00499960    push eax"
"	      00499961    mov eax,[ebp+24h]"
"	      00499964    push eax"
"	      00499965    mov eax,[ebp+20h]"
"	      00499968    push eax"
"	      00499969    mov eax,[ebp+1Ch]"
"	      0049996c    push eax"
"	      0049996d    mov eax,[ebp+10h]"
"	      00499970    push eax"
"	      00499971    mov eax,[ebp+0Ch]"
"	      00499974    push eax"
"	      00499975    mov eax,[ebp+8]"
"	      00499978    push eax"
"	      00499979    mov ecx,[ebp-14h]"
"	      0049997c    sub ecx,140h"
"	      00499982    call 00499B35h"
);
// LINE 1151:
	asm( 
"	      00499987    jmp near ptr 004999B6h"
);
// LINE 1153:
	asm( 
"	      0049998c    mov eax,[ebp+28h]"
"	      0049998f    push eax"
"	      00499990    mov eax,[ebp+24h]"
"	      00499993    push eax"
"	      00499994    mov eax,[ebp+20h]"
"	      00499997    push eax"
"	      00499998    mov eax,[ebp+1Ch]"
"	      0049999b    push eax"
"	      0049999c    mov eax,[ebp+10h]"
"	      0049999f    push eax"
"	      004999a0    mov eax,[ebp+0Ch]"
"	      004999a3    push eax"
"	      004999a4    mov eax,[ebp+8]"
"	      004999a7    push eax"
"	      004999a8    mov ecx,[ebp-14h]"
"	      004999ab    sub ecx,140h"
"	      004999b1    call 00499D5Ch"
);
// LINE 1155:
	asm( 
"	      004999b6    jmp near ptr 00499ABDh"
);
// LINE 1156:
	asm( 
"	      004999bb    mov eax,[ebp-14h]"
"	      004999be    cmp dword ptr [eax+138h],0"
"	      004999c5    je near ptr 00499A33h"
);
// LINE 1157:
	asm( 
"	      004999cb    mov eax,[ebp+8]"
"	      004999ce    mov eax,[eax]"
"	      004999d0    mov ecx,[ebp+8]"
"	      004999d3    call dword ptr [eax]"
);
// LINE 1158:
	asm( 
"	      004999d5    jmp near ptr 004999DAh"
"	      004999da    jmp near ptr 004999DFh"
"	      004999df    jmp near ptr 004999E4h"
"	      004999e4    push 0"
"	      004999e6    mov eax,[ebp+8]"
"	      004999e9    mov eax,[eax+10h]"
"	      004999ec    push eax"
"	      004999ed    mov eax,[ebp+8]"
"	      004999f0    mov eax,[eax+0Ch]"
"	      004999f3    push eax"
"	      004999f4    mov eax,[ebp+8]"
"	      004999f7    mov eax,[eax+14h]"
"	      004999fa    push eax"
"	      004999fb    push 0"
"	      004999fd    push 0"
"	      004999ff    mov eax,[ebp-14h]"
"	      00499a02    mov eax,[eax-108h]"
"	      00499a08    push eax"
"	      00499a09    call 004C461Eh"
"	      00499a0e    add esp,1Ch"
);
// LINE 1159:
	asm( 
"	      00499a11    mov eax,[ebp-14h]"
"	      00499a14    mov eax,[eax-108h]"
"	      00499a1a    push eax"
"	      00499a1b    call 004C465Ah"
"	      00499a20    add esp,4"
);
// LINE 1160:
	asm( 
"	      00499a23    mov eax,[ebp+8]"
"	      00499a26    mov eax,[eax]"
"	      00499a28    mov ecx,[ebp+8]"
"	      00499a2b    call dword ptr [eax+4]"
);
// LINE 1162:
	asm( 
"	      00499a2e    jmp near ptr 00499ABDh"
);
// LINE 1163:
	asm( 
"	      00499a33    mov eax,[ebp-14h]"
"	      00499a36    mov eax,[eax]"
"	      00499a38    mov ecx,[ebp-14h]"
"	      00499a3b    call dword ptr [eax]"
);
// LINE 1164:
	asm( 
"	      00499a3d    jmp near ptr 00499A42h"
"	      00499a42    jmp near ptr 00499A47h"
"	      00499a47    push 0"
"	      00499a49    mov eax,[ebp-14h]"
"	      00499a4c    mov eax,[eax+10h]"
"	      00499a4f    push eax"
"	      00499a50    mov eax,[ebp-14h]"
"	      00499a53    mov eax,[eax+0Ch]"
"	      00499a56    push eax"
"	      00499a57    mov eax,[ebp-14h]"
"	      00499a5a    mov eax,[eax+14h]"
"	      00499a5d    push eax"
"	      00499a5e    push 0"
"	      00499a60    push 0"
"	      00499a62    mov eax,[ebp-14h]"
"	      00499a65    mov eax,[eax-108h]"
"	      00499a6b    push eax"
"	      00499a6c    call 004C461Eh"
"	      00499a71    add esp,1Ch"
);
// LINE 1165:
	asm( 
"	      00499a74    mov eax,[ebp-14h]"
"	      00499a77    mov eax,[eax-108h]"
"	      00499a7d    push eax"
"	      00499a7e    call 004C465Ah"
"	      00499a83    add esp,4"
);
// LINE 1166:
	asm( 
"	      00499a86    mov eax,[ebp-14h]"
"	      00499a89    mov eax,[eax]"
"	      00499a8b    mov ecx,[ebp-14h]"
"	      00499a8e    call dword ptr [eax+4]"
);
// LINE 1170:
	asm( 
"	      00499a91    mov eax,[ebp+28h]"
"	      00499a94    push eax"
"	      00499a95    mov eax,[ebp+24h]"
"	      00499a98    push eax"
"	      00499a99    mov eax,[ebp+20h]"
"	      00499a9c    push eax"
"	      00499a9d    mov eax,[ebp+1Ch]"
"	      00499aa0    push eax"
"	      00499aa1    mov eax,[ebp+18h]"
"	      00499aa4    push eax"
"	      00499aa5    mov eax,[ebp+14h]"
"	      00499aa8    push eax"
"	      00499aa9    mov eax,[ebp+10h]"
"	      00499aac    push eax"
"	      00499aad    mov eax,[ebp+0Ch]"
"	      00499ab0    push eax"
"	      00499ab1    mov eax,[ebp+8]"
"	      00499ab4    push eax"
"	      00499ab5    mov ecx,[ebp-14h]"
"	      00499ab8    call 0046FE13h"
);
// LINE 1173:
	asm( 
"	      00499abd    mov eax,[ebp-14h]"
"	      00499ac0    mov eax,[eax-108h]"
"	      00499ac6    mov eax,[eax+0Ch]"
"	      00499ac9    dec eax"
"	      00499aca    mov ecx,[ebp-14h]"
"	      00499acd    mov ecx,[ecx-108h]"
"	      00499ad3    cmp eax,[ecx+370h]"
"	      00499ad9    jne near ptr 00499B06h"
);
// LINE 1174:
	asm( 
"	      00499adf    mov eax,[ebp-14h]"
"	      00499ae2    cmp dword ptr [eax-138h],0"
"	      00499ae9    jne near ptr 00499B06h"
);
// LINE 1175:
	asm( 
"	      00499aef    mov eax,[ebp-14h]"
"	      00499af2    mov dword ptr [eax-13Ch],2"
);
// LINE 1176:
	asm( 
"	      00499afc    mov eax,1"
"	      00499b01    jmp near ptr 00499B2Eh"
);
// LINE 1179:
	asm( 
"	      00499b06    mov eax,[ebp-14h]"
"	      00499b09    mov eax,[eax-108h]"
"	      00499b0f    push eax"
"	      00499b10    call 004C4648h"
"	      00499b15    add esp,4"
);
// LINE 1182:
	asm( 
"	      00499b18    jmp near ptr 00499B27h"
);
// LINE 1183:
	asm( 
"	      00499b1d    mov eax,2"
"	      00499b22    jmp near ptr 00499B2Eh"
);
// LINE 1185:
	asm( 
"	      00499b27    xor eax,eax"
"	      00499b29    jmp near ptr 00499B2Eh"
);
// LINE 1186:
	asm( 
"	      00499b2e    pop edi"
"	      00499b2f    pop esi"
"	      00499b30    pop ebx"
"	      00499b31    leave"
"	      00499b32    ret 24h"
);
}

// FUNCTION: COPTER_D 0x00499b35
void SmackerBackBuffer::BltParts(class IFlatImage*, long, long, long, long, long, long) {
// LINE 1215:
	asm( 
"	      00499b35    push ebp"
"	      00499b36    mov ebp,esp"
"	      00499b38    sub esp,38h"
"	      00499b3b    push ebx"
"	      00499b3c    push esi"
"	      00499b3d    push edi"
"	      00499b3e    mov [ebp-38h],ecx"
);
// LINE 1230:
	asm( 
"	      00499b41    mov eax,[ebp-38h]"
"	      00499b44    cmp dword ptr [eax+38h],0"
"	      00499b48    jne near ptr 00499B53h"
);
// LINE 1231:
	asm( 
"	      00499b4e    jmp near ptr 00499D55h"
);
// LINE 1233:
	asm( 
"	      00499b53    mov eax,[ebp+8]"
"	      00499b56    mov eax,[eax]"
"	      00499b58    mov ecx,[ebp+8]"
"	      00499b5b    call dword ptr [eax]"
);
// LINE 1234:
	asm( 
"	      00499b5d    jmp near ptr 00499B62h"
"	      00499b62    mov eax,[ebp+8]"
"	      00499b65    mov eax,[eax+10h]"
"	      00499b68    mov [ebp-8],eax"
);
// LINE 1235:
	asm( 
"	      00499b6b    jmp near ptr 00499B70h"
"	      00499b70    mov eax,[ebp+8]"
"	      00499b73    mov eax,[eax+14h]"
"	      00499b76    mov [ebp-10h],eax"
);
// LINE 1236:
	asm( 
"	      00499b79    mov eax,[ebp+10h]"
"	      00499b7c    imul eax,[ebp-10h]"
"	      00499b80    add eax,[ebp+0Ch]"
"	      00499b83    add [ebp-8],eax"
);
// LINE 1237:
	asm( 
"	      00499b86    mov eax,[ebp-38h]"
"	      00499b89    mov eax,[eax+34h]"
"	      00499b8c    mov eax,[eax+43Ch]"
"	      00499b92    mov [ebp-34h],eax"
);
// LINE 1238:
	asm( 
"	      00499b95    mov eax,[ebp-38h]"
"	      00499b98    mov eax,[eax+34h]"
"	      00499b9b    mov eax,[eax+10h]"
"	      00499b9e    mov [ebp-18h],eax"
);
// LINE 1243:
	asm( 
"	      00499ba1    cmp dword ptr [ebp+1Ch],0"
"	      00499ba5    jne near ptr 00499BB7h"
);
// LINE 1244:
	asm( 
"	      00499bab    mov eax,[ebp-38h]"
"	      00499bae    mov eax,[eax+148h]"
"	      00499bb4    mov [ebp+1Ch],eax"
);
// LINE 1245:
	asm( 
"	      00499bb7    cmp dword ptr [ebp+20h],0"
"	      00499bbb    jne near ptr 00499BCDh"
);
// LINE 1246:
	asm( 
"	      00499bc1    mov eax,[ebp-38h]"
"	      00499bc4    mov eax,[eax+14Ch]"
"	      00499bca    mov [ebp+20h],eax"
);
// LINE 1248:
	asm( 
"	      00499bcd    mov eax,[ebp-38h]"
"	      00499bd0    mov eax,[eax+34h]"
"	      00499bd3    mov eax,[eax+4]"
"	      00499bd6    push eax"
"	      00499bd7    mov eax,[ebp-38h]"
"	      00499bda    mov eax,[eax+38h]"
"	      00499bdd    push eax"
"	      00499bde    call 004C4654h"
"	      00499be3    add esp,8"
"	      00499be6    test eax,eax"
"	      00499be8    je near ptr 00499D45h"
);
// LINE 1250:
	asm( 
"	      00499bee    mov eax,[ebp-38h]"
"	      00499bf1    mov eax,[eax+38h]"
"	      00499bf4    mov eax,[eax+374h]"
"	      00499bfa    add eax,[ebp+0Ch]"
"	      00499bfd    mov [ebp-20h],eax"
);
// LINE 1251:
	asm( 
"	      00499c00    mov eax,[ebp-38h]"
"	      00499c03    mov eax,[eax+38h]"
"	      00499c06    mov eax,[eax+378h]"
"	      00499c0c    add eax,[ebp+10h]"
"	      00499c0f    mov [ebp-24h],eax"
);
// LINE 1252:
	asm( 
"	      00499c12    mov eax,[ebp-38h]"
"	      00499c15    mov eax,[eax+38h]"
"	      00499c18    mov eax,[eax+37Ch]"
"	      00499c1e    mov [ebp-2Ch],eax"
);
// LINE 1253:
	asm( 
"	      00499c21    mov eax,[ebp-38h]"
"	      00499c24    mov eax,[eax+38h]"
"	      00499c27    mov eax,[eax+380h]"
"	      00499c2d    mov [ebp-1Ch],eax"
);
// LINE 1254:
	asm( 
"	      00499c30    mov eax,[ebp-2Ch]"
"	      00499c33    add eax,[ebp-20h]"
"	      00499c36    mov [ebp-4],eax"
);
// LINE 1255:
	asm( 
"	      00499c39    mov eax,[ebp-1Ch]"
"	      00499c3c    add eax,[ebp-24h]"
"	      00499c3f    mov [ebp-30h],eax"
);
// LINE 1259:
	asm( 
"	      00499c42    mov eax,[ebp-20h]"
"	      00499c45    cmp [ebp+14h],eax"
"	      00499c48    jbe near ptr 00499C6Ah"
);
// LINE 1260:
	asm( 
"	      00499c4e    mov eax,[ebp-4]"
"	      00499c51    cmp [ebp+14h],eax"
"	      00499c54    jbe near ptr 00499C64h"
);
// LINE 1261:
	asm( 
"	      00499c5a    jmp near ptr 00499BCDh"
);
// LINE 1262:
	asm( 
"	      00499c5f    jmp near ptr 00499C6Ah"
);
// LINE 1263:
	asm( 
"	      00499c64    mov eax,[ebp+14h]"
"	      00499c67    mov [ebp-20h],eax"
);
// LINE 1265:
	asm( 
"	      00499c6a    mov eax,[ebp-4]"
"	      00499c6d    cmp [ebp+1Ch],eax"
"	      00499c70    jae near ptr 00499C95h"
);
// LINE 1266:
	asm( 
"	      00499c76    mov eax,[ebp-20h]"
"	      00499c79    cmp [ebp+1Ch],eax"
"	      00499c7c    jae near ptr 00499C8Ch"
);
// LINE 1267:
	asm( 
"	      00499c82    jmp near ptr 00499BCDh"
);
// LINE 1268:
	asm( 
"	      00499c87    jmp near ptr 00499C95h"
);
// LINE 1269:
	asm( 
"	      00499c8c    mov eax,[ebp+1Ch]"
"	      00499c8f    sub eax,[ebp-20h]"
"	      00499c92    mov [ebp-2Ch],eax"
);
// LINE 1271:
	asm( 
"	      00499c95    mov eax,[ebp-24h]"
"	      00499c98    cmp [ebp+18h],eax"
"	      00499c9b    jbe near ptr 00499CBDh"
);
// LINE 1272:
	asm( 
"	      00499ca1    mov eax,[ebp-30h]"
"	      00499ca4    cmp [ebp+18h],eax"
"	      00499ca7    jbe near ptr 00499CB7h"
);
// LINE 1273:
	asm( 
"	      00499cad    jmp near ptr 00499BCDh"
);
// LINE 1274:
	asm( 
"	      00499cb2    jmp near ptr 00499CBDh"
);
// LINE 1275:
	asm( 
"	      00499cb7    mov eax,[ebp+18h]"
"	      00499cba    mov [ebp-24h],eax"
);
// LINE 1277:
	asm( 
"	      00499cbd    mov eax,[ebp-30h]"
"	      00499cc0    cmp [ebp+20h],eax"
"	      00499cc3    jae near ptr 00499CE8h"
);
// LINE 1278:
	asm( 
"	      00499cc9    mov eax,[ebp-24h]"
"	      00499ccc    cmp [ebp+20h],eax"
"	      00499ccf    jae near ptr 00499CDFh"
);
// LINE 1279:
	asm( 
"	      00499cd5    jmp near ptr 00499BCDh"
);
// LINE 1280:
	asm( 
"	      00499cda    jmp near ptr 00499CE8h"
);
// LINE 1281:
	asm( 
"	      00499cdf    mov eax,[ebp+20h]"
"	      00499ce2    sub eax,[ebp-24h]"
"	      00499ce5    mov [ebp-1Ch],eax"
);
// LINE 1286:
	asm( 
"	      00499ce8    mov eax,[ebp-24h]"
"	      00499ceb    imul eax,[ebp-10h]"
"	      00499cef    add eax,[ebp-20h]"
"	      00499cf2    add eax,[ebp-8]"
"	      00499cf5    mov [ebp-14h],eax"
);
// LINE 1288:
	asm( 
"	      00499cf8    mov eax,[ebp-24h]"
"	      00499cfb    imul eax,[ebp-18h]"
"	      00499cff    add eax,[ebp-20h]"
"	      00499d02    add eax,[ebp-34h]"
"	      00499d05    mov [ebp-0Ch],eax"
);
// LINE 1290:
	asm( 
"	      00499d08    mov dword ptr [ebp-28h],0"
);
// LINE 1291:
	asm( 
"	      00499d0f    mov eax,[ebp-1Ch]"
"	      00499d12    cmp [ebp-28h],eax"
"	      00499d15    jae near ptr 00499D40h"
);
// LINE 1293:
	asm( 
"	      00499d1b    mov eax,[ebp-2Ch]"
"	      00499d1e    push eax"
"	      00499d1f    mov eax,[ebp-0Ch]"
"	      00499d22    push eax"
"	      00499d23    mov eax,[ebp-14h]"
"	      00499d26    push eax"
"	      00499d27    call 0056A800h"
"	      00499d2c    add esp,0Ch"
);
// LINE 1294:
	asm( 
"	      00499d2f    mov eax,[ebp-10h]"
"	      00499d32    add [ebp-14h],eax"
);
// LINE 1295:
	asm( 
"	      00499d35    mov eax,[ebp-18h]"
"	      00499d38    add [ebp-0Ch],eax"
);
// LINE 1296:
	asm( 
"	      00499d3b    jmp near ptr 00499D0Fh"
);
// LINE 1297:
	asm( 
"	      00499d40    jmp near ptr 00499BCDh"
);
// LINE 1298:
	asm( 
"	      00499d45    mov eax,[ebp+8]"
"	      00499d48    mov eax,[eax]"
"	      00499d4a    mov ecx,[ebp+8]"
"	      00499d4d    call dword ptr [eax+4]"
);
// LINE 1299:
	asm( 
"	      00499d50    jmp near ptr 00499D55h"
"	      00499d55    pop edi"
"	      00499d56    pop esi"
"	      00499d57    pop ebx"
"	      00499d58    leave"
"	      00499d59    ret 1Ch"
);
}

// FUNCTION: COPTER_D 0x00499d5c
void SmackerBackBuffer::BltAll(class IFlatImage*, long, long, long, long, long, long) {
// LINE 1328:
	asm( 
"	      00499d5c    push ebp"
"	      00499d5d    mov ebp,esp"
"	      00499d5f    sub esp,20h"
"	      00499d62    push ebx"
"	      00499d63    push esi"
"	      00499d64    push edi"
"	      00499d65    mov [ebp-20h],ecx"
);
// LINE 1340:
	asm( 
"	      00499d68    mov dword ptr [ebp-14h],0"
);
// LINE 1342:
	asm( 
"	      00499d6f    mov eax,[ebp-20h]"
"	      00499d72    cmp dword ptr [eax+38h],0"
"	      00499d76    jne near ptr 00499D81h"
);
// LINE 1343:
	asm( 
"	      00499d7c    jmp near ptr 00499E28h"
);
// LINE 1345:
	asm( 
"	      00499d81    mov eax,[ebp+8]"
"	      00499d84    mov eax,[eax]"
"	      00499d86    mov ecx,[ebp+8]"
"	      00499d89    call dword ptr [eax]"
);
// LINE 1346:
	asm( 
"	      00499d8b    jmp near ptr 00499D90h"
"	      00499d90    mov eax,[ebp+8]"
"	      00499d93    mov eax,[eax+10h]"
"	      00499d96    mov [ebp-0Ch],eax"
);
// LINE 1347:
	asm( 
"	      00499d99    jmp near ptr 00499D9Eh"
"	      00499d9e    mov eax,[ebp+8]"
"	      00499da1    mov eax,[eax+14h]"
"	      00499da4    mov [ebp-8],eax"
);
// LINE 1348:
	asm( 
"	      00499da7    mov eax,[ebp+10h]"
"	      00499daa    imul eax,[ebp-8]"
"	      00499dae    add eax,[ebp+0Ch]"
"	      00499db1    add [ebp-0Ch],eax"
);
// LINE 1349:
	asm( 
"	      00499db4    mov eax,[ebp-20h]"
"	      00499db7    mov eax,[eax+34h]"
"	      00499dba    mov eax,[eax+43Ch]"
"	      00499dc0    mov [ebp-4],eax"
);
// LINE 1350:
	asm( 
"	      00499dc3    mov eax,[ebp-20h]"
"	      00499dc6    mov eax,[eax+34h]"
"	      00499dc9    mov eax,[eax+10h]"
"	      00499dcc    mov [ebp-10h],eax"
);
// LINE 1351:
	asm( 
"	      00499dcf    mov eax,[ebp-20h]"
"	      00499dd2    mov eax,[eax+34h]"
"	      00499dd5    mov eax,[eax+10h]"
"	      00499dd8    mov [ebp-1Ch],eax"
);
// LINE 1352:
	asm( 
"	      00499ddb    mov eax,[ebp-20h]"
"	      00499dde    mov eax,[eax+34h]"
"	      00499de1    mov eax,[eax+14h]"
"	      00499de4    mov [ebp-18h],eax"
);
// LINE 1354:
	asm( 
"	      00499de7    mov eax,[ebp-18h]"
"	      00499dea    cmp [ebp-14h],eax"
"	      00499ded    jge near ptr 00499E18h"
);
// LINE 1356:
	asm( 
"	      00499df3    mov eax,[ebp-1Ch]"
"	      00499df6    push eax"
"	      00499df7    mov eax,[ebp-4]"
"	      00499dfa    push eax"
"	      00499dfb    mov eax,[ebp-0Ch]"
"	      00499dfe    push eax"
"	      00499dff    call 0056A800h"
"	      00499e04    add esp,0Ch"
);
// LINE 1357:
	asm( 
"	      00499e07    mov eax,[ebp-8]"
"	      00499e0a    add [ebp-0Ch],eax"
);
// LINE 1358:
	asm( 
"	      00499e0d    mov eax,[ebp-10h]"
"	      00499e10    add [ebp-4],eax"
);
// LINE 1359:
	asm( 
"	      00499e13    jmp near ptr 00499DE7h"
);
// LINE 1361:
	asm( 
"	      00499e18    mov eax,[ebp+8]"
"	      00499e1b    mov eax,[eax]"
"	      00499e1d    mov ecx,[ebp+8]"
"	      00499e20    call dword ptr [eax+4]"
);
// LINE 1362:
	asm( 
"	      00499e23    jmp near ptr 00499E28h"
"	      00499e28    pop edi"
"	      00499e29    pop esi"
"	      00499e2a    pop ebx"
"	      00499e2b    leave"
"	      00499e2c    ret 1Ch"
);
}



// Contribution: 1:00098e30-00098e68 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499e30
// SmackerBuffer::`scalar deleting destructor'



// Contribution: 1:00098e70-00098ea8 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499e70
// VRBmpSmackerBuffer::`scalar deleting destructor'



// Contribution: 1:00098eb0-00098ee8 Module: 17, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00499eb0
// SmackerBackBuffer::`scalar deleting destructor'



// Contribution: 2:00002138-00002157 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00002138
// ??_7SmackerBuffer@@6B@


// Contribution: 2:00002158-00002187 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00002158
// ??_7VRBmpSmackerBuffer@@6B@
// GLOBAL: COPTER_D 0x00002188
// ??_7SmackerBackBuffer@@6BCBackBuffer@@@


// Contribution: 2:00002188-000021eb Module: 17, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000021f0-00002217 Module: 17, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x000021f0
// ??_7SmackerBackBuffer@@6BSmackerBuffer@@@


// Contribution: 3:00003208-00003249 Module: 17, 4 byte alignment, initialized_data, read, write, 
