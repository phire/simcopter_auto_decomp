// Module: soundq.obj
// Source: C:\Copter\source\sparkal\soundq.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct list<SoundQueueItem *>::list_node_buffer (forward reference);
// list<SoundQueueItem *>::list_node_buffer Class implementation not found

// Type: struct list<SoundQueueItem *>::list_node (forward reference);
// list<SoundQueueItem *>::list_node Class implementation not found

// Type: uint32_t;

// Type: struct SoundQueueItem (forward reference);
struct SoundQueueItem{
	void SoundQueueItem(class Sound*, char *, long, int32_t);
	void SoundQueueItem(class Sound*, const class basic_string<char>&, long, int32_t);
	void SoundQueueItem(class Sound*, long, long, int32_t);
	void SoundQueueItem(class Sound*, long, int32_t);
	void SoundQueueItem();
	class Sound* mySound;
	long lSoundResourceID;
	class basic_string<char> sSoundFile;
	long lTimeToWaitBeforePlaying;
	int32_t bDeleteSoundWhenFinished;
};

// Type: void;

// Type: class Sound (forward reference);
class Sound{
		enum SoundSourceType {
			nSoundSourceTypeResource = 0,
			nSoundSourceTypeFile = 1,
		};
public:
	enum Sound::SoundSourceType nSoundSourceType;
		enum SoundDuplicateType {
			nSoundDuplicateDefault = 0,
			nSoundDuplicateInterrupt = 1,
			nSoundDuplicateContinue = 2,
			nSoundDuplicateOverlap = 3,
		};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	int32_t bUnloadBeforeNextPlay;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: long;

// Type: int32_t;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char *;

// Type: struct DigitalSoundQueueItem (forward reference);
struct DigitalSoundQueueItem : public SoundQueueItem
{
	void DigitalSoundQueueItem(long, long);
	void DigitalSoundQueueItem(char *, long);
	void DigitalSoundQueueItem(const class basic_string<char>&, long);
};

// Type: class SoundQueue (forward reference);
class SoundQueue{
public:
	void SoundQueue();
	void ~SoundQueue();
	// vtable: 0
	intro int32_t Initialize();
	// vtable: 4
	intro void DeInitialize(int32_t);
	// vtable: 8
	intro void ClearQueue(int32_t);
	class SoundQueue& operator+=(struct SoundQueueItem*);
	class SoundQueue& operator+=(class Sound*);
	// vtable: 12
	intro int32_t StartPauseCallback(long);
	// vtable: 16
	intro void EndPauseCallback();
	// vtable: 20
	intro void PlayNextSoundInQueue();
	// vtable: 24
	intro void RemoveNextSoundInQueue();
	// vtable: 28
	intro void SoundQueueCompletionCallback();
	// calltype: NearC
	static void StaticSoundQueueCompletionCallback(long);
	// vtable: 32
	intro void SoundQueueWaitTimeCallback();
	// calltype: NearC
	static void StaticSoundQueueWaitTimeCallback(long);
	// vtable: 36
	intro int32_t GetMutex(unsigned long);
	// vtable: 40
	intro void ReleaseMutex();
protected:
	class list<SoundQueueItem *> mySoundQueueItemList;
	int32_t bOK;
	long bMutex;
	int32_t nWaitTimerSet;
	// calltype: NearStd
	static void WindowsStaticSoundQueueCompletionCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
	// calltype: NearStd
	static void WindowsStaticSoundQueueWaitTimeCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
};

// Type: class list<SoundQueueItem *>::iterator;
class list<SoundQueueItem *>::iterator : public bidirectional_iterator<SoundQueueItem *,int>
{
protected:
	struct list<SoundQueueItem *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<SoundQueueItem *>::list_node*);
public:
	int32_t operator==(const class list<SoundQueueItem *>::iterator&);
	struct SoundQueueItem*& operator*();
	class list<SoundQueueItem *>::iterator operator++(int32_t);
	class list<SoundQueueItem *>::iterator& operator++();
	class list<SoundQueueItem *>::iterator operator--(int32_t);
	class list<SoundQueueItem *>::iterator& operator--();
};

// Type: unsigned long;

// Type: class MTimer;
class MTimer{
		enum TimerResolution {
			nTimerResolutionMicroseconds = 0,
			nTimerResolutionMilliseconds = 1,
			nTimerResolutionSeconds = 2,
		};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	enum MTimer::TimerResolution nTimerResolution;
	unsigned long lStartTime;
	unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	unsigned long lFrequency;
};

// Type: struct bidirectional_iterator<SoundQueueItem *,int>;
struct bidirectional_iterator<SoundQueueItem *,int>{
};

// Type: struct SoundQueueItem;
struct SoundQueueItem{
	void SoundQueueItem(class Sound*, char *, long, int32_t);
	void SoundQueueItem(class Sound*, const class basic_string<char>&, long, int32_t);
	void SoundQueueItem(class Sound*, long, long, int32_t);
	void SoundQueueItem(class Sound*, long, int32_t);
	void SoundQueueItem();
	class Sound* mySound;
	long lSoundResourceID;
	class basic_string<char> sSoundFile;
	long lTimeToWaitBeforePlaying;
	int32_t bDeleteSoundWhenFinished;
};



// Contribution: 1:0001f5f0-00021277 Module: 71, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004205f0
void SoundQueueItem::SoundQueueItem() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00420641;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x00420668;
// LINE 22:
	__asm        jmp    near ptr 0x0042066D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420675
void SoundQueueItem::SoundQueueItem(class Sound* sound, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004206C6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004206ED;
// LINE 30:
	__asm        mov    eax, sound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 32:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 33:
	__asm        mov    eax, bNewDeleteSoundWhenFinished;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 34:
	__asm        jmp    near ptr 0x00420716;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420720
void SoundQueueItem::SoundQueueItem(class Sound* sound, long lNewSoundResourceID, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00420771;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x00420798;
// LINE 42:
	__asm        mov    eax, sound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 43:
	__asm        mov    eax, lNewSoundResourceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 44:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 45:
	__asm        mov    eax, bNewDeleteSoundWhenFinished;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 46:
	__asm        jmp    near ptr 0x004207C0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004207ca
void SoundQueueItem::SoundQueueItem(class Sound* sound, const class basic_string<char>& sNewSoundFile, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042081B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x00420842;
// LINE 54:
	__asm        mov    eax, sound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 55:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     _T242;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T11b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T11b;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tfb;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Tfb:
	__asm        jmp    near ptr 0x004208CA;

	__asm        jmp    near ptr 0x004208CF;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004208E0;

	__asm        jmp    _T11b;
_T11b:
	__asm        jmp    near ptr 0x004208EA;

	__asm        jmp    near ptr 0x004208EF;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T14f;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T242;
_T14f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T238;

	__asm        jmp    near ptr 0x00420935;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T212;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0042097C;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1d7;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1e3;

	__asm        jmp    _T1e3;
_T1d7:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T1e3;
_T1e3:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004209D7;

	__asm        jmp    _T21b;
_T212:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T21b:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004209F4;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T242;
_T238:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T242:
	__asm        jmp    near ptr 0x00420A11;
// LINE 56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 57:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 58:
	__asm        mov    eax, bNewDeleteSoundWhenFinished;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 59:
	__asm        jmp    near ptr 0x00420A32;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420a3c
void SoundQueueItem::SoundQueueItem(class Sound* sound, char * szNewSoundFile, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00420A8D;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x00420AB4;
// LINE 68:
	__asm        mov    eax, sound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 69:
	__asm        jmp    near ptr 0x00420AC1;

	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _Td0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420AFD;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    near ptr 0x00420B11;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T106;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T287;

	__asm        jmp    near ptr 0x00420B30;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T287;
_T106:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e1;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T159;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420B86;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T159;
_T159:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1be;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420BF5;

	__asm        jmp    _T1c7;
_T1be:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00420C12;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1e8;
_T1e1:
	__asm        mov    dword ptr [ebp-4], 0;
_T1e8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T274;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T274;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T254;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T254:
	__asm        jmp    near ptr 0x00420C95;

	__asm        jmp    near ptr 0x00420C9A;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420CAB;

	__asm        jmp    _T274;
_T274:
	__asm        jmp    near ptr 0x00420CB5;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T2ba;
_T287:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ba;

	__asm        jmp    near ptr 0x00420CD2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00420D07;

	__asm        jmp    near ptr 0x00420D0C;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 71:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 72:
	__asm        mov    eax, bNewDeleteSoundWhenFinished;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 73:
	__asm        jmp    near ptr 0x00420D2D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420d37
void DigitalSoundQueueItem::DigitalSoundQueueItem(const class basic_string<char>& sNewDigitalSoundFile, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 90:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T43;

	__asm        push   2;
	__asm        mov    eax, sNewDigitalSoundFile;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T4c;
_T43:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 91:
_T4c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 92:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 1;
// LINE 94:
	__asm        jmp    near ptr 0x00420DA5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420daf
void DigitalSoundQueueItem::DigitalSoundQueueItem(char * szNewSoundFile, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 103:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T114;

	__asm        or     dword ptr [ebp-0x10], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _Te3;

	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00420E13;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00420E6A;

	__asm        jmp    _Tc9;
_Tc0:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_Tc9:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00420E87;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tea;
_Te3:
	__asm        mov    dword ptr [ebp-8], 0;
_Tea:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x00420EA5;

	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T11d;
_T114:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
_T11d:
	__asm        test   byte ptr [ebp-0x10], 1;
	__asm        je     _T1df;

	__asm        and    dword ptr [ebp-0x10], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ae;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1ae;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T18e;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T18e:
	__asm        jmp    near ptr 0x00420F42;

	__asm        jmp    near ptr 0x00420F47;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00420F58;

	__asm        jmp    _T1ae;
_T1ae:
	__asm        jmp    near ptr 0x00420F62;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1d5;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1d5:
	__asm        jmp    near ptr 0x00420F89;

	__asm        jmp    _T1df;
// LINE 104:
_T1df:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 105:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 106:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 1;
// LINE 107:
	__asm        jmp    near ptr 0x00420FB0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420fba
void DigitalSoundQueueItem::DigitalSoundQueueItem(long lNewDigitalSoundResourceID, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 117:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T41;

	__asm        mov    eax, lNewDigitalSoundResourceID;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T4a;
_T41:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 118:
_T4a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 119:
	__asm        mov    eax, lNewTimeToWaitBeforePlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 120:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 1;
// LINE 121:
	__asm        jmp    near ptr 0x00421026;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00421030
void SoundQueue::SoundQueue() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        inc    list<SoundQueueItem *>::number_of_lists;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<SoundQueueItem *>::free_list, 0;
	__asm        je     _T48;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T48:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        cmp    list<SoundQueueItem *>::last, eax;
	__asm        jne    _T210;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004210CD;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta7:
	__asm        jmp    near ptr 0x004210DC;

	__asm        jmp    near ptr 0x004210E1;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tec;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tf2;
_Tec:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tf2:
	__asm        jmp    near ptr 0x00421127;

	__asm        jmp    near ptr 0x0042112C;

	__asm        jmp    near ptr 0x00421131;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421185;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15f:
	__asm        jmp    near ptr 0x00421194;

	__asm        jmp    near ptr 0x00421199;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<SoundQueueItem *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1cc;
_T1c6:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1cc:
	__asm        jmp    near ptr 0x00421201;

	__asm        jmp    near ptr 0x00421206;

	__asm        jmp    near ptr 0x0042120B;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    list<SoundQueueItem *>::last, eax;
	__asm        jmp    near ptr 0x00421226;

	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T210:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T225:
	__asm        jmp    near ptr 0x0042125A;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00421285;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3F0;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 148:
	__asm        jmp    near ptr 0x004212B1;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004212b9
void SoundQueue::~SoundQueue() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3F0;
// LINE 156:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   SoundQueue::DeInitialize;
// LINE 157:
	__asm        jmp    near ptr 0x004212DD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004212F1;

	__asm        jmp    near ptr 0x004212F6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042130C;

	__asm        jmp    near ptr 0x00421311;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T64:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T8e;

	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T8e;
_T89:
	__asm        jmp    _T93;
_T8e:
	__asm        jmp    _T112;
_T93:
	__asm        jmp    _Ta2;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;
_Ta2:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0042136E;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00421379;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042139F;

	__asm        jmp    near ptr 0x004213A4;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    near ptr 0x004213BB;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
	__asm        jmp    near ptr 0x004213C6;

	__asm        jmp    _T64;
_T112:
	__asm        jmp    near ptr 0x004213D0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    near ptr 0x004213F0;

	__asm        dec    list<SoundQueueItem *>::number_of_lists;
	__asm        jne    _T1c1;
_T143:
	__asm        cmp    list<SoundQueueItem *>::buffer_list, 0;
	__asm        je     _T19e;

	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421437;

	__asm        jmp    near ptr 0x0042143C;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042144D;

	__asm        jmp    near ptr 0x00421452;

	__asm        jmp    _T143;
_T19e:
	__asm        mov    list<SoundQueueItem *>::free_list, 0;
	__asm        mov    list<SoundQueueItem *>::next_avail, 0;
	__asm        mov    list<SoundQueueItem *>::last, 0;
	__asm        jmp    _T1c1;
_T1c1:
	__asm        jmp    near ptr 0x0042147F;
}

// FUNCTION: COPTER_D 0x00421484
int32_t SoundQueue::Initialize() {
// LINE 165:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T36;
// LINE 167:
	__asm        push   0x64;
	__asm        call   dword ptr ds:[0x6C3918];
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 1;
// LINE 170:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 172:
_T36:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004214C4;
// LINE 173:
}

// FUNCTION: COPTER_D 0x004214c9
void SoundQueue::DeInitialize(int32_t bStopCurrentlyPlayingSound) {
// LINE 180:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T36;
// LINE 182:
	__asm        push   0x64;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 183:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 186:
_T36:
	__asm        mov    eax, bStopCurrentlyPlayingSound;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 187:
	__asm        jmp    near ptr 0x00421513;
}

// FUNCTION: COPTER_D 0x0042151a
void SoundQueue::ClearQueue(int32_t bStopCurrentlyPlayingSound) {
	struct SoundQueueItem* currentSoundQueueItem;

// LINE 199:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 201:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 202:
	__asm        jmp    near ptr 0x00421546;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2a5;
// LINE 203:
// Block start:
	class list<SoundQueueItem *>::iterator iterator;
	__asm        cmp    bStopCurrentlyPlayingSound, 0;
	__asm        je     _T80;
// LINE 204:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00421573;

	__asm        jmp    near ptr 0x00421578;

	__asm        jmp    near ptr 0x0042157D;

	__asm        jmp    near ptr 0x00421582;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 205:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0xC];
// LINE 207:
_T80:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x18];
// LINE 208:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004215BF;

	__asm        jmp    _Taa;
// LINE 209:
_Taa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004215D8;

	__asm        jmp    near ptr 0x004215DD;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _Td9;

	__asm        jmp    _Ted;

	__asm        jmp    _Td9;
_Td9:
	__asm        jmp    _Te8;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        jne    _Ted;
_Te8:
	__asm        jmp    _Tf2;
_Ted:
	__asm        jmp    _T2a5;
_Tf2:
	__asm        jmp    _T101;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2a5;
// LINE 210:
_T101:
	__asm        jmp    near ptr 0x00421620;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 211:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T145;
// LINE 212:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T145;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T145;
// LINE 213:
_T145:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T234;

	__asm        jmp    near ptr 0x0042167A;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ec;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T1ec;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1cc;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T1cc:
	__asm        jmp    near ptr 0x004216EB;

	__asm        jmp    near ptr 0x004216F0;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421701;

	__asm        jmp    _T1ec;
_T1ec:
	__asm        jmp    near ptr 0x0042170B;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T219:
	__asm        jmp    near ptr 0x00421738;

	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421749;

	__asm        jmp    _T234;
// LINE 214:
_T234:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00421761;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0042176C;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00421792;

	__asm        jmp    near ptr 0x00421797;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    near ptr 0x004217AE;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+8], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004217BA;
// LINE 215:
	__asm        jmp    _Taa;
// LINE 217:
// Block end:
_T2a5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 218:
	__asm        jmp    near ptr 0x004217CF;
}

// FUNCTION: COPTER_D 0x004217d6
class SoundQueue& SoundQueue::operator+=(class Sound* newSoundItem) {
// LINE 225:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T76;
// LINE 226:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 228:
	__asm        push   0x18;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T58;

	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, newSoundItem;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   SoundQueueItem::SoundQueueItem;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5f;
_T58:
	__asm        mov    dword ptr [ebp-8], 0;
_T5f:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   SoundQueue::operator+=;
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 231:
_T76:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x00421854;
// LINE 232:
}

// FUNCTION: COPTER_D 0x0042185b
class SoundQueue& SoundQueue::operator+=(struct SoundQueueItem* newSoundQueueItem) {
// LINE 240:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T31a;
// LINE 241:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 243:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00421898;

	__asm        jmp    near ptr 0x0042189D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<SoundQueueItem *>::free_list, 0;
	__asm        je     _T74;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T251;
_T74:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        cmp    list<SoundQueueItem *>::last, eax;
	__asm        jne    _T23c;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Td3;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421924;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Td3:
	__asm        jmp    near ptr 0x00421933;

	__asm        jmp    near ptr 0x00421938;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T118;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T11e;
_T118:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T11e:
	__asm        jmp    near ptr 0x0042197E;

	__asm        jmp    near ptr 0x00421983;

	__asm        jmp    near ptr 0x00421988;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T18b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004219DC;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T18b:
	__asm        jmp    near ptr 0x004219EB;

	__asm        jmp    near ptr 0x004219F0;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<SoundQueueItem *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f2;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1f8;
_T1f2:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1f8:
	__asm        jmp    near ptr 0x00421A58;

	__asm        jmp    near ptr 0x00421A5D;

	__asm        jmp    near ptr 0x00421A62;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    list<SoundQueueItem *>::last, eax;
	__asm        jmp    near ptr 0x00421A7D;

	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T251;
_T23c:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T251:
	__asm        jmp    near ptr 0x00421AB1;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00421ABC;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00421ACA;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T286;

	__asm        mov    eax, newSoundQueueItem;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T286;
_T286:
	__asm        jmp    near ptr 0x00421AE6;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+8];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00421B1F;

	__asm        jmp    near ptr 0x00421B24;

	__asm        jmp    near ptr 0x00421B29;
// LINE 244:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 245:
	__asm        jmp    near ptr 0x00421B39;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jne    _T31a;
// LINE 246:
	__asm        mov    eax, newSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T30f;
// LINE 247:
	__asm        mov    eax, newSoundQueueItem;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 248:
	__asm        jmp    _T31a;
// LINE 249:
_T30f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 252:
_T31a:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x00421B7D;
// LINE 253:
}

// FUNCTION: COPTER_D 0x00421b84
int32_t SoundQueue::StartPauseCallback(long lMillisecondsToPause) {
// LINE 267:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x421F23;
	__asm        push   0x32;
	__asm        mov    eax, lMillisecondsToPause;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        jmp    near ptr 0x00421BB8;
// LINE 270:
}

// FUNCTION: COPTER_D 0x00421bbf
void SoundQueue::EndPauseCallback() {
// LINE 279:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T30;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
// LINE 281:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 284:
_T30:
	__asm        jmp    near ptr 0x00421BF4;
}

// FUNCTION: COPTER_D 0x00421bf9
void SoundQueue::PlayNextSoundInQueue() {
	struct SoundQueueItem* currentSoundQueueItem;

// LINE 302:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 304:
	__asm        jmp    near ptr 0x00421C1A;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T10b;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00421C3D;

	__asm        jmp    near ptr 0x00421C42;

	__asm        jmp    near ptr 0x00421C47;

	__asm        jmp    near ptr 0x00421C4C;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 306:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T88;
// LINE 307:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+0x10], eax;
// LINE 308:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax];
	__asm        mov    dword ptr [eax+4], 0;
// LINE 310:
	__asm        jmp    _Tb3;
_T88:
	__asm        jmp    near ptr 0x00421C86;

	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb3;
// LINE 311:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+4];
// LINE 313:
_Tb3:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x421F41;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x14];
// LINE 314:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+8];
// LINE 315:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T10b;
// LINE 316:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 320:
_T10b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 321:
	__asm        jmp    near ptr 0x00421D14;
}

// FUNCTION: COPTER_D 0x00421d19
void SoundQueue::RemoveNextSoundInQueue() {
	struct SoundQueueItem* currentSoundQueueItem;

// LINE 336:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00421D4B;

	__asm        jmp    near ptr 0x00421D50;

	__asm        jmp    near ptr 0x00421D55;

	__asm        jmp    near ptr 0x00421D5A;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 340:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T80;
// LINE 341:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T80;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T80;
// LINE 342:
_T80:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T16f;

	__asm        jmp    near ptr 0x00421DB4;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T127;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T127;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T107;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T107:
	__asm        jmp    near ptr 0x00421E25;

	__asm        jmp    near ptr 0x00421E2A;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421E3B;

	__asm        jmp    _T127;
_T127:
	__asm        jmp    near ptr 0x00421E45;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T154;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T154:
	__asm        jmp    near ptr 0x00421E72;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00421E83;

	__asm        jmp    _T16f;
// LINE 343:
_T16f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00421E9E;

	__asm        jmp    near ptr 0x00421EA3;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00421EC9;

	__asm        jmp    near ptr 0x00421ECE;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    near ptr 0x00421EE5;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
	__asm        jmp    near ptr 0x00421EF0;
// LINE 344:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 345:
	__asm        jmp    near ptr 0x00421F00;
}

// FUNCTION: COPTER_D 0x00421f05
void SoundQueue::WindowsStaticSoundQueueCompletionCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 356:
	__asm        mov    eax, dwUser;
	__asm        push   eax;
	__asm        call   SoundQueue::StaticSoundQueueCompletionCallback;
	__asm        add    esp, 4;
// LINE 357:
	__asm        jmp    near ptr 0x00421F1C;
}

// FUNCTION: COPTER_D 0x00421f23
void SoundQueue::WindowsStaticSoundQueueWaitTimeCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 368:
	__asm        mov    eax, dwUser;
	__asm        push   eax;
	__asm        call   SoundQueue::StaticSoundQueueWaitTimeCallback;
	__asm        add    esp, 4;
// LINE 369:
	__asm        jmp    near ptr 0x00421F3A;
}

// FUNCTION: COPTER_D 0x00421f41
void SoundQueue::StaticSoundQueueCompletionCallback(long lData) {
// LINE 377:
	__asm        mov    eax, lData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lData;
	__asm        call   dword ptr [eax+0x1C];
// LINE 378:
	__asm        jmp    near ptr 0x00421F57;
}

// FUNCTION: COPTER_D 0x00421f5c
void SoundQueue::SoundQueueCompletionCallback() {
	struct SoundQueueItem* currentSoundQueueItem;

// LINE 390:
	__asm        jmp    near ptr 0x00421F6D;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 392:
	__asm        jmp    near ptr 0x00421F8A;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;
// LINE 393:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00421FAD;

	__asm        jmp    near ptr 0x00421FB2;

	__asm        jmp    near ptr 0x00421FB7;

	__asm        jmp    near ptr 0x00421FBC;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 394:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T8d;
// LINE 395:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 396:
	__asm        jmp    _T98;
// LINE 397:
_T8d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 400:
_T98:
	__asm        jmp    near ptr 0x00421FF9;
}

// FUNCTION: COPTER_D 0x00421ffe
void SoundQueue::StaticSoundQueueWaitTimeCallback(long lData) {
// LINE 407:
	__asm        mov    eax, lData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lData;
	__asm        call   dword ptr [eax+0x20];
// LINE 408:
	__asm        jmp    near ptr 0x00422014;
}

// FUNCTION: COPTER_D 0x00422019
void SoundQueue::SoundQueueWaitTimeCallback() {
// LINE 415:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 416:
	__asm        jmp    near ptr 0x00422034;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T33;
// LINE 419:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 421:
_T33:
	__asm        jmp    near ptr 0x00422051;
}

// FUNCTION: COPTER_D 0x00422056
int32_t SoundQueue::GetMutex(unsigned long lTimeoutValue) {
	const class SoundQueue& soundQueueReference;
	class MTimer timeoutTimer;

// LINE 429:
	__asm        mov    eax, this;
	__asm        mov    soundQueueReference, eax;
// LINE 430:
	__asm        mov    timeoutTimer.nTimerResolution, 1;
	__asm        mov    timeoutTimer.lStartTime, 0;
	__asm        mov    timeoutTimer.lTotalElapsedTime, 0;
	__asm        mov    timeoutTimer.lFrequency, 0;
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T53;

	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    timeoutTimer.lFrequency, eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    near ptr 0x004220AE;
// LINE 432:
	__asm        cmp    lTimeoutValue, 0;
	__asm        je     _Td9;
// LINE 433:
	__asm        jmp    near ptr 0x004220BD;

	__asm        cmp    timeoutTimer.lStartTime, 0;
	__asm        je     _T76;

	__asm        jmp    _Td9;
_T76:
	__asm        cmp    timeoutTimer.nTimerResolution, 1;
	__asm        jne    _T93;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;

	__asm        jmp    _Td4;
_T93:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _Tbd;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;

	__asm        jmp    _Td4;
_Tbd:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;
_Td4:
	__asm        jmp    _Td9;
// LINE 435:
WeDidNotGetIt:
_Td9:
	__asm        cmp    lTimeoutValue, 0;
	__asm        je     _T1dc;
// LINE 436:
	__asm        mov    eax, timeoutTimer.lTotalElapsedTime;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00422144;

	__asm        cmp    timeoutTimer.lStartTime, 0;
	__asm        je     _T165;

	__asm        cmp    timeoutTimer.nTimerResolution, 1;
	__asm        jne    _T115;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;

	__asm        jmp    _T156;
_T115:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T13f;

	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;

	__asm        jmp    _T156;
_T13f:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;
_T156:
	__asm        mov    eax, [ebp-0x4C];
	__asm        sub    eax, timeoutTimer.lStartTime;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    [ebp-0x3C], eax;
_T165:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T1a0;

	__asm        cmp    timeoutTimer.lFrequency, 0;
	__asm        je     _T1a0;

	__asm        mov    eax, timeoutTimer.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, lTimeoutValue;
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jbe    _T1dc;

	__asm        jmp    _T1bd;
_T1a0:
	__asm        mov    eax, lTimeoutValue;
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jbe    _T1dc;

	__asm        jmp    _T1bd;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    lTimeoutValue, eax;
	__asm        jae    _T1dc;
// LINE 438:
_T1bd:
	__asm        push   0x597318;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 440:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0042222A;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _T1fb;
// LINE 445:
_T1dc:
	__asm        bts    timeoutTimer.lFrequency, 0;
// LINE 446:
	__asm        jb     _Td9;
// LINE 448:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x00422249;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    _T1fb;
// LINE 449:
_T1fb:
}

// FUNCTION: COPTER_D 0x00422258
void SoundQueue::ReleaseMutex() {
// LINE 456:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 457:
	__asm        jmp    near ptr 0x00422273;
}



// Contribution: 2:000003f0-0000041b Module: 71, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f3f0
// GLOBAL: COPTER_D 0x0058f3f0
// ??_7SoundQueue@@6B@


// Contribution: 3:00000318-00000353 Module: 71, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00000354-00000357 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597354
uint32_t list<SoundQueueItem *>::number_of_lists = { /* <data@0x00597354> */ };



// Contribution: 3:00000358-0000035b Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597358
struct list<SoundQueueItem *>::list_node* list<SoundQueueItem *>::last = { /* <data@0x00597358> */ };



// Contribution: 3:0000035c-0000035f Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059735c
struct list<SoundQueueItem *>::list_node* list<SoundQueueItem *>::next_avail = { /* <data@0x0059735c> */ };



// Contribution: 3:00000360-00000363 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597360
struct list<SoundQueueItem *>::list_node* list<SoundQueueItem *>::free_list = { /* <data@0x00597360> */ };



// Contribution: 3:00000364-00000367 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597364
struct list<SoundQueueItem *>::list_node_buffer* list<SoundQueueItem *>::buffer_list = { /* <data@0x00597364> */ };

