// Module: soundq.obj
// Source: C:\Copter\source\sparkal\soundq.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ struct list<SoundQueueItem *>::list_node_buffer (forward reference);
struct list<SoundQueueItem *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x25ea
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<SoundQueueItem *>::list_node *buffer;
};

// Type: /*packed*/ struct list<SoundQueueItem *>::list_node (forward reference);
struct list<SoundQueueItem *>::list_node{ // packed(0xc bytes) TI: 0x25ec
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ struct SoundQueueItem *data;
};

// Type: uint32_t;

// Type: void;

// Type: /*packed*/ struct SoundQueueItem (forward reference);
struct SoundQueueItem{ // packed(0x18 bytes) TI: 0x24b1
	void SoundQueueItem(/*packed*/ class Sound*, char *, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, const /*packed*/ class basic_string<char>&, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, long, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, long, int32_t);
	void SoundQueueItem();
	/*+0x0*/   /*packed*/ class Sound *mySound;
	/*+0x4*/   long lSoundResourceID;
	/*+0x8*/   /*packed*/ class basic_string<char> sSoundFile; // 0x8 bytes
	/*+0x10*/  long lTimeToWaitBeforePlaying;
	/*+0x14*/  int32_t bDeleteSoundWhenFinished;
};

// Type: /*packed*/ class Sound (forward reference);
// VTABLE: COPTER_D 0x0058f458
class Sound{ // packed(0x34 bytes) TI: 0x4335
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	/*+0x4*/   enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	/*+0x8*/   enum Sound::SoundDuplicateType nSoundDuplicateType;
	/*+0xc*/   long lID;
	/*+0x10*/  long lResID;
	/*+0x14*/  /*packed*/ class basic_string<char> sSoundFile; // 0x8 bytes
	/*+0x1c*/  long bLooping;
	/*+0x20*/  long bStreaming;
	/*+0x24*/  long lVolume;
	/*+0x28*/  void (*soundCompletionFunction)(long);
	/*+0x2c*/  long lSoundCompletionData;
	/*+0x30*/  int32_t bUnloadBeforeNextPlay;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	/*packed*/ class Sound& operator=(const /*packed*/ class Sound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: long;

// Type: int32_t;

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char *;

// Type: /*packed*/ struct DigitalSoundQueueItem (forward reference);
struct DigitalSoundQueueItem : public SoundQueueItem
{ // packed(0x18 bytes) TI: 0x2ba7
	void DigitalSoundQueueItem(long, long);
	void DigitalSoundQueueItem(char *, long);
	void DigitalSoundQueueItem(const /*packed*/ class basic_string<char>&, long);
};

// Type: /*packed*/ class SoundQueue (forward reference);
// VTABLE: COPTER_D 0x0058f3f0
class SoundQueue{ // packed(0x18 bytes) TI: 0x24ef
public:
	void SoundQueue();
	void ~SoundQueue();
	virtual int32_t Initialize(); // vtable+0x0
	virtual void DeInitialize(int32_t); // vtable+0x4
	virtual void ClearQueue(int32_t); // vtable+0x8
	/*packed*/ class SoundQueue& operator+=(/*packed*/ struct SoundQueueItem*);
	/*packed*/ class SoundQueue& operator+=(/*packed*/ class Sound*);
	virtual int32_t StartPauseCallback(long); // vtable+0xc
	virtual void EndPauseCallback(); // vtable+0x10
	virtual void PlayNextSoundInQueue(); // vtable+0x14
	virtual void RemoveNextSoundInQueue(); // vtable+0x18
	virtual void SoundQueueCompletionCallback(); // vtable+0x1c
	// calltype: NearC
	static void StaticSoundQueueCompletionCallback(long);
	virtual void SoundQueueWaitTimeCallback(); // vtable+0x20
	// calltype: NearC
	static void StaticSoundQueueWaitTimeCallback(long);
	virtual int32_t GetMutex(unsigned long); // vtable+0x24
	virtual void ReleaseMutex(); // vtable+0x28
protected:
	/*+0x4*/   /*packed*/ class list<SoundQueueItem *> mySoundQueueItemList; // 0x8 bytes
	/*+0xc*/   int32_t bOK;
	/*+0x10*/  long bMutex;
	/*+0x14*/  int32_t nWaitTimerSet;
	// calltype: NearStd
	static void WindowsStaticSoundQueueCompletionCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
	// calltype: NearStd
	static void WindowsStaticSoundQueueWaitTimeCallback(uint32_t, uint32_t, unsigned long, unsigned long, unsigned long);
};

// Type: /*packed*/ class list<SoundQueueItem *>::iterator;
class list<SoundQueueItem *>::iterator : public bidirectional_iterator<SoundQueueItem *,int>
{ // packed(0x4 bytes) TI: 0x25e8
protected:
	/*+0x0*/   /*packed*/ struct list<SoundQueueItem *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<SoundQueueItem *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<SoundQueueItem *>::iterator&);
	/*packed*/ struct SoundQueueItem*& operator*();
	/*packed*/ class list<SoundQueueItem *>::iterator operator++(int32_t);
	/*packed*/ class list<SoundQueueItem *>::iterator& operator++();
	/*packed*/ class list<SoundQueueItem *>::iterator operator--(int32_t);
	/*packed*/ class list<SoundQueueItem *>::iterator& operator--();
};

// Type: unsigned long;

// Type: /*packed*/ class MTimer;
class MTimer{ // packed(0x10 bytes) TI: 0x1968
	enum TimerResolution {
		nTimerResolutionMicroseconds = 0,
		nTimerResolutionMilliseconds = 1,
		nTimerResolutionSeconds = 2,
	};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	/*+0x0*/   enum MTimer::TimerResolution nTimerResolution;
	/*+0x4*/   unsigned long lStartTime;
	/*+0x8*/   unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	/*+0xc*/   unsigned long lFrequency;
};

// Type: /*packed*/ struct bidirectional_iterator<SoundQueueItem *,int>;
struct bidirectional_iterator<SoundQueueItem *,int>{ // packed(0x1 bytes) TI: 0x24ff
};

// Type: /*packed*/ struct SoundQueueItem;
struct SoundQueueItem{ // packed(0x18 bytes) TI: 0x24b1
	void SoundQueueItem(/*packed*/ class Sound*, char *, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, const /*packed*/ class basic_string<char>&, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, long, long, int32_t);
	void SoundQueueItem(/*packed*/ class Sound*, long, int32_t);
	void SoundQueueItem();
	/*+0x0*/   /*packed*/ class Sound *mySound;
	/*+0x4*/   long lSoundResourceID;
	/*+0x8*/   /*packed*/ class basic_string<char> sSoundFile; // 0x8 bytes
	/*+0x10*/  long lTimeToWaitBeforePlaying;
	/*+0x14*/  int32_t bDeleteSoundWhenFinished;
};



// Contribution: 1:0001f5f0-00021277 Module: 71, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004205f0
void SoundQueueItem::SoundQueueItem() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T78;
// LINE 22:
_T78:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420675
void SoundQueueItem::SoundQueueItem(/*packed*/ class Sound *sound, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T78;
// LINE 30:
_T78:
	this->mySound = sound;
// LINE 31:
	this->lSoundResourceID = 0x0;
// LINE 32:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 33:
	this->bDeleteSoundWhenFinished = bNewDeleteSoundWhenFinished;
// LINE 34:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420720
void SoundQueueItem::SoundQueueItem(/*packed*/ class Sound *sound, long lNewSoundResourceID, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T78;
// LINE 42:
_T78:
	this->mySound = sound;
// LINE 43:
	this->lSoundResourceID = lNewSoundResourceID;
// LINE 44:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 45:
	this->bDeleteSoundWhenFinished = bNewDeleteSoundWhenFinished;
// LINE 46:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004207ca
void SoundQueueItem::SoundQueueItem(/*packed*/ class Sound *sound, const /*packed*/ class basic_string<char>& sNewSoundFile, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T78;
// LINE 54:
_T78:
	this->mySound = sound;
// LINE 55:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewSoundFile;
	__asm        je     _T242;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T11b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T11b;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tfb;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_Tfb:
	__asm        jmp    _T100;
_T100:
	__asm        jmp    _T105;
_T105:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T116;
_T116:
	__asm        jmp    _T11b;
_T11b:
	__asm        jmp    _T120;
_T120:
	__asm        jmp    _T125;
_T125:
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T14f;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T242;
_T14f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T238;

	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T212;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1d7;

	__asm        mov    eax, sNewSoundFile;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1e3;

	__asm        jmp    _T1e3;
_T1d7:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T1e3;
_T1e3:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T20d;
_T20d:
	__asm        jmp    _T21b;
_T212:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T21b:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T242;
_T238:
	this->sSoundFile.reference = 0x0;
_T242:
	__asm        jmp    _T247;
// LINE 56:
_T247:
	this->lSoundResourceID = 0x0;
// LINE 57:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 58:
	this->bDeleteSoundWhenFinished = bNewDeleteSoundWhenFinished;
// LINE 59:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420a3c
void SoundQueueItem::SoundQueueItem(/*packed*/ class Sound *sound, char * szNewSoundFile, long lNewTimeToWaitBeforePlaying, int32_t bNewDeleteSoundWhenFinished) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T69;
_T5f:
	this->sSoundFile.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T78;
// LINE 68:
_T78:
	this->mySound = sound;
// LINE 69:
	__asm        jmp    _T85;
_T85:
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _Td0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc1;
_Tc1:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T106;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T287;

	__asm        jmp    _Tf4;
_Tf4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T287;
_T106:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e1;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T159;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T14a;
_T14a:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T159;
_T159:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1be;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1b9;
_T1b9:
	__asm        jmp    _T1c7;
_T1be:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1d6;
_T1d6:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1e8;
_T1e1:
	__asm        mov    dword ptr [ebp-4], 0;
_T1e8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T274;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T274;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T254;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T254:
	__asm        jmp    _T259;
_T259:
	__asm        jmp    _T25e;
_T25e:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T26f;
_T26f:
	__asm        jmp    _T274;
_T274:
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T2ba;
_T287:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ba;

	__asm        jmp    _T296;
_T296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2cb;
_T2cb:
	__asm        jmp    _T2d0;
// LINE 70:
_T2d0:
	this->lSoundResourceID = 0x0;
// LINE 71:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 72:
	this->bDeleteSoundWhenFinished = bNewDeleteSoundWhenFinished;
// LINE 73:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420d37
void DigitalSoundQueueItem::DigitalSoundQueueItem(const /*packed*/ class basic_string<char>& sNewDigitalSoundFile, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 90:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T43;

	__asm        push   2;
	__asm        mov    eax, sNewDigitalSoundFile;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T4c;
_T43:
	this->mySound = 0x0;
// LINE 91:
_T4c:
	this->lSoundResourceID = 0x0;
// LINE 92:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 93:
	this->bDeleteSoundWhenFinished = 0x1;
// LINE 94:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420daf
void DigitalSoundQueueItem::DigitalSoundQueueItem(char * szNewSoundFile, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 103:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T114;

	__asm        or     dword ptr [ebp-0x10], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _Te3;

	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T64;
_T64:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, szNewSoundFile;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc9;
_Tc0:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_Tc9:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Td8;
_Td8:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tea;
_Te3:
	__asm        mov    dword ptr [ebp-8], 0;
_Tea:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    _Tf6;
_Tf6:
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T11d;
_T114:
	this->mySound = 0x0;
_T11d:
	__asm        test   byte ptr [ebp-0x10], 1;
	__asm        je     _T1df;

	__asm        and    dword ptr [ebp-0x10], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ae;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1ae;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T18e;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T18e:
	__asm        jmp    _T193;
_T193:
	__asm        jmp    _T198;
_T198:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1a9;
_T1a9:
	__asm        jmp    _T1ae;
_T1ae:
	__asm        jmp    _T1b3;
_T1b3:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1d5;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1d5:
	__asm        jmp    _T1da;
_T1da:
	__asm        jmp    _T1df;
// LINE 104:
_T1df:
	this->lSoundResourceID = 0x0;
// LINE 105:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 106:
	this->bDeleteSoundWhenFinished = 0x1;
// LINE 107:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00420fba
void DigitalSoundQueueItem::DigitalSoundQueueItem(long lNewDigitalSoundResourceID, long lNewTimeToWaitBeforePlaying) {

	__asm        mov    ecx, this;
	__asm        call   SoundQueueItem::SoundQueueItem;
// LINE 117:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T41;

	__asm        mov    eax, lNewDigitalSoundResourceID;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T4a;
_T41:
	this->mySound = 0x0;
// LINE 118:
_T4a:
	this->lSoundResourceID = 0x0;
// LINE 119:
	this->lTimeToWaitBeforePlaying = lNewTimeToWaitBeforePlaying;
// LINE 120:
	this->bDeleteSoundWhenFinished = 0x1;
// LINE 121:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00421030
void SoundQueue::SoundQueue() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        inc    list<SoundQueueItem *>::number_of_lists;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<SoundQueueItem *>::free_list, 0;
	__asm        je     _T48;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T48:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        cmp    list<SoundQueueItem *>::last, eax;
	__asm        jne    _T210;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9d;
_T9d:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tec;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tf2;
_Tec:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        jmp    _Tfc;
_Tfc:
	__asm        jmp    _T101;
_T101:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T155;
_T155:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15f:
	__asm        jmp    _T164;
_T164:
	__asm        jmp    _T169;
_T169:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<SoundQueueItem *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1cc;
_T1c6:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1cc:
	__asm        jmp    _T1d1;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        jmp    _T1db;
_T1db:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    list<SoundQueueItem *>::last, eax;
	__asm        jmp    _T1f6;
_T1f6:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T225;
_T210:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T225:
	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3F0;
// LINE 146:
	this->nWaitTimerSet = 0x0;
// LINE 148:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004212b9
void SoundQueue::~SoundQueue() {

	this-><vftable> = 0x58f3f0;
// LINE 156:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   SoundQueue::DeInitialize;
// LINE 157:
	__asm        jmp    _T24;
_T24:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T38;
_T38:
	__asm        jmp    _T3d;
_T3d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T64:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T8e;

	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T8e;
_T89:
	__asm        jmp    _T93;
_T8e:
	__asm        jmp    _T112;
_T93:
	__asm        jmp    _Ta2;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;
_Ta2:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Te6;
_Te6:
	__asm        jmp    _Teb;
_Teb:
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    _T102;
_T102:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
	__asm        jmp    _T10d;
_T10d:
	__asm        jmp    _T64;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    _T137;
_T137:
	__asm        dec    list<SoundQueueItem *>::number_of_lists;
	__asm        jne    _T1c1;
_T143:
	__asm        cmp    list<SoundQueueItem *>::buffer_list, 0;
	__asm        je     _T19e;

	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T17e;
_T17e:
	__asm        jmp    _T183;
_T183:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T194;
_T194:
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T143;
_T19e:
	__asm        mov    list<SoundQueueItem *>::free_list, 0;
	__asm        mov    list<SoundQueueItem *>::next_avail, 0;
	__asm        mov    list<SoundQueueItem *>::last, 0;
	__asm        jmp    _T1c1;
_T1c1:
	return;
}

// FUNCTION: COPTER_D 0x00421484
int32_t SoundQueue::Initialize() {
// LINE 165:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T36;
// LINE 167:
	__asm        push   0x64;
	__asm        call   dword ptr ds:[0x6C3918];
// LINE 169:
	this->bOK = 0x1;
// LINE 170:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 172:
_T36:
	return 0x1;
// LINE 173:
}

// FUNCTION: COPTER_D 0x004214c9
void SoundQueue::DeInitialize(int32_t bStopCurrentlyPlayingSound) {
// LINE 180:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T36;
// LINE 182:
	__asm        push   0x64;
	__asm        call   dword ptr ds:[0x6C3914];
// LINE 183:
	this->bOK = 0x0;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 186:
_T36:
	__asm        mov    eax, bStopCurrentlyPlayingSound;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 187:
	return;
}

// FUNCTION: COPTER_D 0x0042151a
void SoundQueue::ClearQueue(int32_t bStopCurrentlyPlayingSound) {
	/*bp-0x4*/   /*packed*/ struct SoundQueueItem *currentSoundQueueItem;

// LINE 199:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 201:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 202:
	__asm        jmp    _T2c;
_T2c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2a5;
// LINE 203:
// Block start:
	/*bp-0x8*/   /*packed*/ class list<SoundQueueItem *>::iterator iterator;
	__asm        cmp    bStopCurrentlyPlayingSound, 0;
	__asm        je     _T80;
// LINE 204:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
_T5e:
	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 205:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0xC];
// LINE 207:
_T80:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x18];
// LINE 208:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _Ta5;
_Ta5:
	__asm        jmp    _Taa;
// LINE 209:
_Taa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Tbe;
_Tbe:
	__asm        jmp    _Tc3;
_Tc3:
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _Td9;

	__asm        jmp    _Ted;

	__asm        jmp    _Td9;
_Td9:
	__asm        jmp    _Te8;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        jne    _Ted;
_Te8:
	__asm        jmp    _Tf2;
_Ted:
	__asm        jmp    _T2a5;
_Tf2:
	__asm        jmp    _T101;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2a5;
// LINE 210:
_T101:
	__asm        jmp    _T106;
_T106:
	currentSoundQueueItem = iterator.node->data;
// LINE 211:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T145;
// LINE 212:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T145;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T145;
// LINE 213:
_T145:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T234;

	__asm        jmp    _T160;
_T160:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ec;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T1ec;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1cc;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T1cc:
	__asm        jmp    _T1d1;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1e7;
_T1e7:
	__asm        jmp    _T1ec;
_T1ec:
	__asm        jmp    _T1f1;
_T1f1:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T219:
	__asm        jmp    _T21e;
_T21e:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T22f;
_T22f:
	__asm        jmp    _T234;
// LINE 214:
_T234:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T247;
_T247:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T252;
_T252:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T278;
_T278:
	__asm        jmp    _T27d;
_T27d:
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    _T294;
_T294:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+8], 0xFFFFFFFF;
	__asm        jmp    _T2a0;
// LINE 215:
_T2a0:
	__asm        jmp    _Taa;
// LINE 217:
// Block end:
_T2a5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 218:
	return;
}

// FUNCTION: COPTER_D 0x004217d6
/*packed*/ class SoundQueue& SoundQueue::operator+=(/*packed*/ class Sound *newSoundItem) {
// LINE 225:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T76;
// LINE 226:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 228:
	__asm        push   0x18;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T58;

	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, newSoundItem;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   SoundQueueItem::SoundQueueItem;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5f;
_T58:
	__asm        mov    dword ptr [ebp-8], 0;
_T5f:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   SoundQueue::operator+=;
// LINE 229:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 231:
_T76:
	return this;
// LINE 232:
}

// FUNCTION: COPTER_D 0x0042185b
/*packed*/ class SoundQueue& SoundQueue::operator+=(/*packed*/ struct SoundQueueItem *newSoundQueueItem) {
// LINE 240:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T31a;
// LINE 241:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 243:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T3d;
_T3d:
	__asm        jmp    _T42;
_T42:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<SoundQueueItem *>::free_list, 0;
	__asm        je     _T74;

	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T251;
_T74:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        cmp    list<SoundQueueItem *>::last, eax;
	__asm        jne    _T23c;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Td3;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc9;
_Tc9:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Td3:
	__asm        jmp    _Td8;
_Td8:
	__asm        jmp    _Tdd;
_Tdd:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T118;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T11e;
_T118:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T11e:
	__asm        jmp    _T123;
_T123:
	__asm        jmp    _T128;
_T128:
	__asm        jmp    _T12d;
_T12d:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T18b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T181;
_T181:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T18b:
	__asm        jmp    _T190;
_T190:
	__asm        jmp    _T195;
_T195:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<SoundQueueItem *>::buffer_list, eax;
	__asm        mov    eax, list<SoundQueueItem *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<SoundQueueItem *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f2;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1f8;
_T1f2:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1f8:
	__asm        jmp    _T1fd;
_T1fd:
	__asm        jmp    _T202;
_T202:
	__asm        jmp    _T207;
_T207:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    list<SoundQueueItem *>::last, eax;
	__asm        jmp    _T222;
_T222:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T251;
_T23c:
	__asm        mov    eax, list<SoundQueueItem *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<SoundQueueItem *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T251:
	__asm        jmp    _T256;
_T256:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T261;
_T261:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T26f;
_T26f:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T286;

	__asm        mov    eax, newSoundQueueItem;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T286;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+8];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2c9;
_T2c9:
	__asm        jmp    _T2ce;
// LINE 244:
_T2ce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 245:
	__asm        jmp    _T2de;
_T2de:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jne    _T31a;
// LINE 246:
	__asm        mov    eax, newSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T30f;
// LINE 247:
	__asm        mov    eax, newSoundQueueItem;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 248:
	__asm        jmp    _T31a;
// LINE 249:
_T30f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 252:
_T31a:
	return this;
// LINE 253:
}

// FUNCTION: COPTER_D 0x00421b84
int32_t SoundQueue::StartPauseCallback(long lMillisecondsToPause) {
// LINE 267:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x421F23;
	__asm        push   0x32;
	__asm        mov    eax, lMillisecondsToPause;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3910];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 268:
	return this->nWaitTimerSet;
// LINE 270:
}

// FUNCTION: COPTER_D 0x00421bbf
void SoundQueue::EndPauseCallback() {
// LINE 279:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T30;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C390C];
// LINE 281:
	this->nWaitTimerSet = 0x0;
// LINE 284:
_T30:
	return;
}

// FUNCTION: COPTER_D 0x00421bf9
void SoundQueue::PlayNextSoundInQueue() {
	/*bp-0x4*/   /*packed*/ struct SoundQueueItem *currentSoundQueueItem;

// LINE 302:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 304:
	__asm        jmp    _T21;
_T21:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T10b;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T44;
_T44:
	__asm        jmp    _T49;
_T49:
	__asm        jmp    _T4e;
_T4e:
	__asm        jmp    _T53;
_T53:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 306:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T88;
// LINE 307:
	currentSoundQueueItem->mySound->lResID = currentSoundQueueItem->lSoundResourceID;
// LINE 308:
	currentSoundQueueItem->mySound->nSoundSourceType = 0x0;
// LINE 310:
	__asm        jmp    _Tb3;
_T88:
	__asm        jmp    _T8d;
_T8d:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb3;
// LINE 311:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+4];
// LINE 313:
_Tb3:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x421F41;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x14];
// LINE 314:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+8];
// LINE 315:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    ecx, currentSoundQueueItem;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T10b;
// LINE 316:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 320:
_T10b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 321:
	return;
}

// FUNCTION: COPTER_D 0x00421d19
void SoundQueue::RemoveNextSoundInQueue() {
	/*bp-0x4*/   /*packed*/ struct SoundQueueItem *currentSoundQueueItem;

// LINE 336:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T32;
_T32:
	__asm        jmp    _T37;
_T37:
	__asm        jmp    _T3c;
_T3c:
	__asm        jmp    _T41;
_T41:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 340:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T80;
// LINE 341:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T80;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T80;
// LINE 342:
_T80:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T16f;

	__asm        jmp    _T9b;
_T9b:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T127;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T127;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T107;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T107:
	__asm        jmp    _T10c;
_T10c:
	__asm        jmp    _T111;
_T111:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T122;
_T122:
	__asm        jmp    _T127;
_T127:
	__asm        jmp    _T12c;
_T12c:
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T154;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T154:
	__asm        jmp    _T159;
_T159:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T16a;
_T16a:
	__asm        jmp    _T16f;
// LINE 343:
_T16f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T185;
_T185:
	__asm        jmp    _T18a;
_T18a:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1b0;
_T1b0:
	__asm        jmp    _T1b5;
_T1b5:
	__asm        mov    eax, list<SoundQueueItem *>::free_list;
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    list<SoundQueueItem *>::free_list, eax;
	__asm        jmp    _T1cc;
_T1cc:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
	__asm        jmp    _T1d7;
// LINE 344:
_T1d7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 345:
	return;
}

// FUNCTION: COPTER_D 0x00421f05
void SoundQueue::WindowsStaticSoundQueueCompletionCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 356:
	__asm        mov    eax, dwUser;
	__asm        push   eax;
	__asm        call   SoundQueue::StaticSoundQueueCompletionCallback;
	__asm        add    esp, 4;
// LINE 357:
	return;
}

// FUNCTION: COPTER_D 0x00421f23
void SoundQueue::WindowsStaticSoundQueueWaitTimeCallback(uint32_t nTimerID, uint32_t __formal, unsigned long dwUser, unsigned long __formal, unsigned long __formal) {
// LINE 368:
	__asm        mov    eax, dwUser;
	__asm        push   eax;
	__asm        call   SoundQueue::StaticSoundQueueWaitTimeCallback;
	__asm        add    esp, 4;
// LINE 369:
	return;
}

// FUNCTION: COPTER_D 0x00421f41
void SoundQueue::StaticSoundQueueCompletionCallback(long lData) {
// LINE 377:
	__asm        mov    eax, lData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lData;
	__asm        call   dword ptr [eax+0x1C];
// LINE 378:
	return;
}

// FUNCTION: COPTER_D 0x00421f5c
void SoundQueue::SoundQueueCompletionCallback() {
	/*bp-0x4*/   /*packed*/ struct SoundQueueItem *currentSoundQueueItem;

// LINE 390:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 392:
	__asm        jmp    _T2e;
_T2e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;
// LINE 393:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    _T60;
_T60:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    currentSoundQueueItem, eax;
// LINE 394:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T8d;
// LINE 395:
	__asm        mov    eax, currentSoundQueueItem;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 396:
	__asm        jmp    _T98;
// LINE 397:
_T8d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 400:
_T98:
	return;
}

// FUNCTION: COPTER_D 0x00421ffe
void SoundQueue::StaticSoundQueueWaitTimeCallback(long lData) {
// LINE 407:
	__asm        mov    eax, lData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lData;
	__asm        call   dword ptr [eax+0x20];
// LINE 408:
	return;
}

// FUNCTION: COPTER_D 0x00422019
void SoundQueue::SoundQueueWaitTimeCallback() {
// LINE 415:
	this->nWaitTimerSet = 0x0;
// LINE 416:
	__asm        jmp    _T1b;
_T1b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T33;
// LINE 419:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 421:
_T33:
	return;
}

// FUNCTION: COPTER_D 0x00422056
int32_t SoundQueue::GetMutex(unsigned long lTimeoutValue) {
	/*bp-0x10*/  /*packed*/ class MTimer timeoutTimer; // 0x10 bytes
	/*bp-0x14*/  const /*packed*/ class SoundQueue& soundQueueReference;

// LINE 429:
	soundQueueReference = this;
// LINE 430:
	__asm        mov    timeoutTimer.nTimerResolution, 1;
	__asm        mov    timeoutTimer.lStartTime, 0;
	__asm        mov    timeoutTimer.lTotalElapsedTime, 0;
	__asm        mov    timeoutTimer.lFrequency, 0;
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T53;

	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    timeoutTimer.lFrequency, eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
// LINE 432:
_T58:
	__asm        cmp    lTimeoutValue, 0;
	__asm        je     WeDidNotGetIt;
// LINE 433:
	__asm        jmp    _T67;
_T67:
	__asm        cmp    timeoutTimer.lStartTime, 0;
	__asm        je     _T76;

	__asm        jmp    WeDidNotGetIt;
_T76:
	__asm        cmp    timeoutTimer.nTimerResolution, 1;
	__asm        jne    _T93;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;

	__asm        jmp    _Td4;
_T93:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _Tbd;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;

	__asm        jmp    _Td4;
_Tbd:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timeoutTimer.lStartTime, eax;
	__asm        jmp    _Td4;
_Td4:
	__asm        jmp    WeDidNotGetIt;
// LINE 435:
WeDidNotGetIt:
	__asm        cmp    lTimeoutValue, 0;
	__asm        je     _T1dc;
// LINE 436:
	__asm        mov    eax, timeoutTimer.lTotalElapsedTime;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Tee;
_Tee:
	__asm        cmp    timeoutTimer.lStartTime, 0;
	__asm        je     _T165;

	__asm        cmp    timeoutTimer.nTimerResolution, 1;
	__asm        jne    _T115;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;

	__asm        jmp    _T156;
_T115:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T13f;

	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;

	__asm        jmp    _T156;
_T13f:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T156;
_T156:
	__asm        mov    eax, [ebp-0x4C];
	__asm        sub    eax, timeoutTimer.lStartTime;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    [ebp-0x3C], eax;
_T165:
	__asm        cmp    timeoutTimer.nTimerResolution, 0;
	__asm        jne    _T1a0;

	__asm        cmp    timeoutTimer.lFrequency, 0;
	__asm        je     _T1a0;

	__asm        mov    eax, timeoutTimer.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, lTimeoutValue;
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jbe    _T1dc;

	__asm        jmp    _T1bd;
_T1a0:
	__asm        mov    eax, lTimeoutValue;
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jbe    _T1dc;

	__asm        jmp    _T1bd;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    lTimeoutValue, eax;
	__asm        jae    _T1dc;
// LINE 438:
_T1bd:
	__asm        push   0x597318;
	__asm        call   dword ptr ds:[0x6C378C];
// LINE 440:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T1d4;
_T1d4:
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _T1fb;
// LINE 445:
_T1dc:
	__asm        bts    timeoutTimer.lFrequency, 0;
// LINE 446:
	__asm        jb     WeDidNotGetIt;
// LINE 448:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    _T1f3;
_T1f3:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    _T1fb;
// LINE 449:
_T1fb:
}

// FUNCTION: COPTER_D 0x00422258
void SoundQueue::ReleaseMutex() {
// LINE 456:
	this->bMutex = 0x0;
// LINE 457:
	return;
}



// Contribution: 2:000003f0-0000041b Module: 71, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundQueue @ 0x0058f3f0
//   00: SoundQueue::Initialize @ 0x00421484
//   01: SoundQueue::DeInitialize @ 0x004214c9
//   02: SoundQueue::ClearQueue @ 0x0042151a
//   03: SoundQueue::StartPauseCallback @ 0x00421b84
//   04: SoundQueue::EndPauseCallback @ 0x00421bbf
//   05: SoundQueue::PlayNextSoundInQueue @ 0x00421bf9
//   06: SoundQueue::RemoveNextSoundInQueue @ 0x00421d19
//   07: SoundQueue::SoundQueueCompletionCallback @ 0x00421f5c
//   08: SoundQueue::SoundQueueWaitTimeCallback @ 0x00422019
//   09: SoundQueue::GetMutex @ 0x00422056
//   10: SoundQueue::ReleaseMutex @ 0x00422258
//   11 entries



// Contribution: 3:00000318-00000353 Module: 71, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00000354-00000357 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597354
uint32_t list<SoundQueueItem *>::number_of_lists = 0;



// Contribution: 3:00000358-0000035b Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597358
/*packed*/ struct list<SoundQueueItem *>::list_node *list<SoundQueueItem *>::last = { 0 /* todo */ };



// Contribution: 3:0000035c-0000035f Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059735c
/*packed*/ struct list<SoundQueueItem *>::list_node *list<SoundQueueItem *>::next_avail = { 0 /* todo */ };



// Contribution: 3:00000360-00000363 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597360
/*packed*/ struct list<SoundQueueItem *>::list_node *list<SoundQueueItem *>::free_list = { 0 /* todo */ };



// Contribution: 3:00000364-00000367 Module: 71, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597364
/*packed*/ struct list<SoundQueueItem *>::list_node_buffer *list<SoundQueueItem *>::buffer_list = { 0 /* todo */ };

