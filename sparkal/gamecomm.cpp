// Module: Gamecomm.obj
// Source: C:\Copter\source\sparkal\Gamecomm.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct CommandSystem (forward reference);
class CommandSystem{
public:
	struct Command[100] keyboardCommands;
	class CharList keyboardCommandList;
	class list<Shortcut> commandShortcuts;
	unsigned char[2048] chCommandKeyboardArray;
	unsigned char[14][4] chCommandJoystickArray;
	long[100] joystickCommands;
	void CommandSystem();
	void Initialize();
	void ClearAllCommands();
	void ClearAllCommandsDevice(long);
	void TurnOnCommand(int32_t);
	void TurnOffCommand(int32_t);
	void TurnOnCommandDevice(int32_t, long);
	void TurnOffCommandDevice(int32_t, long);
	int32_t IsCommandSet(int32_t);
	int32_t IsCommandPush(int32_t);
	void SetUpCommandArraysFromShortcuts();
	// calltype: NearC
	static int32_t GetKeystateIndexForChar(long, char);
	long GetJoystickCommandValue(int32_t);
	void PollJoysticksForCommands();
};

// Type: void;

// Type: int32_t;

// Type: long;

// Type: unsigned char;

// Type: class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{
protected:
	struct list<Shortcut>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};

// Type: class CGameCommander (forward reference);
class CGameCommander : public ICommander, public CDefaultCommander
{
public:
	void ICommander();
	// vtable: 0
	intro void ~ICommander();
	// vtable: 4
	intro unsigned long Idle();
	// vtable: 8
	intro unsigned long OnCharacter(char, int32_t);
	// vtable: 12
	intro unsigned long OnMouseDown(int32_t, int32_t);
	// vtable: 16
	intro unsigned long OnMouseUp(int32_t, int32_t);
	// vtable: 20
	intro unsigned long OnMouseMove(int32_t, int32_t);
	// vtable: 24
	intro unsigned long OnWindowActivate();
	// vtable: 28
	intro unsigned long OnWindowDeactivate();
	// vtable: 32
	intro class CSparkalWindow* SetWindow(class CSparkalWindow*);
	class CSparkalWindow* GetWindow();
protected:
	class CSparkalWindow* mpWindow;
public:
	void CDefaultCommander();
	virtual void ~CDefaultCommander();
	virtual unsigned long Idle();
	virtual unsigned long OnCharacter(char, int32_t);
	virtual unsigned long OnMouseDown(int32_t, int32_t);
	virtual unsigned long OnMouseUp(int32_t, int32_t);
	virtual unsigned long OnMouseMove(int32_t, int32_t);
	virtual unsigned long OnWindowActivate();
	virtual unsigned long OnWindowDeactivate();
	void CGameCommander();
	virtual void ~CGameCommander();
	virtual unsigned long Idle();
	// vtable: 36
	intro void ProcessSetFocus();
	// vtable: 40
	intro void ProcessKeyDown(long, struct CommandSystem&, int32_t&, int32_t&);
	// vtable: 44
	intro void ProcessKeyDown(long);
	// vtable: 48
	intro void ProcessKeyUp(long, struct CommandSystem&);
	// vtable: 52
	intro void ProcessKeyUp(long);
	// vtable: 56
	intro unsigned long OnCharacter(long);
	// vtable: 60
	intro unsigned long OnLMouseDown(int32_t, int32_t);
	// vtable: 64
	intro unsigned long OnLMouseUp(int32_t, int32_t);
	// vtable: 68
	intro unsigned long OnRMouseDown(int32_t, int32_t);
	// vtable: 72
	intro unsigned long OnRMouseUp(int32_t, int32_t);
	virtual unsigned long OnMouseMove(int32_t, int32_t);
	virtual unsigned long OnWindowActivate();
	virtual unsigned long OnWindowDeactivate();
	// vtable: 76
	intro void ProcessSystemCloseRequest();
	// vtable: 80
	intro void SetNewGameApp(class CGameApp*);
	class CGameApp* myGameApp;
};

// Type: unsigned long;

// Type: class CharData (forward reference);
class CharData{
public:
	unsigned char chValue;
	class CharData* previousCharData;
	class CharData* nextCharData;
	void CharData(unsigned char);
	void CharData();
};

// Type: class list<Shortcut> (forward reference);
class list<Shortcut>{
	using void_pointer = void * __ptr32;
	class list<Shortcut>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		struct Shortcut data;
	};
protected:
	static class allocator<list<Shortcut>::list_node> list_node_allocator;
	static class allocator<Shortcut> value_allocator;
	using value_type = struct Shortcut;
	using value_allocator_type = class allocator<Shortcut>;
	using pointer = struct Shortcut*;
	using reference = struct Shortcut&;
	using const_reference = const struct Shortcut&;
	using list_node_allocator_type = class allocator<list<Shortcut>::list_node>;
	using link_type = struct list<Shortcut>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<Shortcut>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<Shortcut>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<Shortcut>::list_node_buffer>;
	using buffer_pointer = struct list<Shortcut>::list_node_buffer*;
protected:
	static class allocator<list<Shortcut>::list_node_buffer> buffer_allocator;
	static struct list<Shortcut>::list_node_buffer* buffer_list;
	static struct list<Shortcut>::list_node* free_list;
	static struct list<Shortcut>::list_node* next_avail;
	static struct list<Shortcut>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<Shortcut>::list_node* get_node();
	void put_node(struct list<Shortcut>::list_node*);
	struct list<Shortcut>::list_node* node;
	uint32_t length;
	class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
	{
	protected:
		struct list<Shortcut>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const class list<Shortcut>::iterator&);
		struct Shortcut& operator*();
		class list<Shortcut>::iterator operator++(int32_t);
		class list<Shortcut>::iterator& operator++();
		class list<Shortcut>::iterator operator--(int32_t);
		class list<Shortcut>::iterator& operator--();
	};
	class list<Shortcut>::const_iterator : public bidirectional_iterator<Shortcut,int>
	{
	protected:
		struct list<Shortcut>::list_node* node;
	public:
		void const_iterator(const class list<Shortcut>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const class list<Shortcut>::const_iterator&);
		const struct Shortcut& operator*();
		class list<Shortcut>::const_iterator operator++(int32_t);
		class list<Shortcut>::const_iterator& operator++();
		class list<Shortcut>::const_iterator operator--(int32_t);
		class list<Shortcut>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int>;
public:
	void list<Shortcut>(const class list<Shortcut>&);
	void list<Shortcut>(const struct Shortcut*, const struct Shortcut*);
	void list<Shortcut>(uint32_t, const struct Shortcut&);
	void list<Shortcut>();
	class list<Shortcut>::const_iterator begin();
	class list<Shortcut>::iterator begin();
	class list<Shortcut>::const_iterator end();
	class list<Shortcut>::iterator end();
	class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rbegin();
	class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rbegin();
	class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rend();
	class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const struct Shortcut& front();
	struct Shortcut& front();
	const struct Shortcut& back();
	struct Shortcut& back();
	void swap(class list<Shortcut>&);
	void insert(class list<Shortcut>::iterator, uint32_t, const struct Shortcut&);
	void insert(class list<Shortcut>::iterator, class list<Shortcut>::const_iterator, class list<Shortcut>::const_iterator);
	void insert(class list<Shortcut>::iterator, const struct Shortcut*, const struct Shortcut*);
	class list<Shortcut>::iterator insert(class list<Shortcut>::iterator, const struct Shortcut&);
	void push_front(const struct Shortcut&);
	void push_back(const struct Shortcut&);
	void erase(class list<Shortcut>::iterator, class list<Shortcut>::iterator);
	void erase(class list<Shortcut>::iterator);
	void pop_front();
	void pop_back();
	void ~list<Shortcut>();
	class list<Shortcut>& operator=(const class list<Shortcut>&);
protected:
	void transfer(class list<Shortcut>::iterator, class list<Shortcut>::iterator, class list<Shortcut>::iterator);
public:
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&, class list<Shortcut>::iterator, class list<Shortcut>::iterator);
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&, class list<Shortcut>::iterator);
	void splice(class list<Shortcut>::iterator, class list<Shortcut>&);
	void remove(const struct Shortcut&);
	void unique();
	void merge(class list<Shortcut>&);
	void reverse();
	void sort();
};

// Type: class MIFF;
class MIFF : public PFile
{
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char[260] szFilePath;
	int32_t Handle;
private:
	int32_t ShouldClose;
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF();
	// vtable: 4
	intro long OpenForReading();
	// vtable: 8
	intro long OpenForWriting(long, long, long);
	// vtable: 12
	intro long OpenForAppending();
	// vtable: 16
	intro long Close();
	// vtable: 20
	intro long GetPresentRecordType();
	// vtable: 24
	intro long GetPresentRecordSize();
	// vtable: 28
	intro long GetPresentRecordDataSize();
	// vtable: 32
	intro long GetPresentRecordIndex();
	// vtable: 36
	intro long VerifyFile();
	// vtable: 40
	intro long ReadMIFFHeader();
	// vtable: 44
	intro long ReadRecordHeader();
	// vtable: 48
	intro long ReadFileCreator();
	// vtable: 52
	intro long ReadFileType();
	// vtable: 56
	intro long ReadFileVersion();
	// vtable: 60
	intro long ReadPresentRecord(struct MIFFRecord*, long);
	// vtable: 64
	intro long ReadPresentRecordData(char *, long);
	// vtable: 68
	intro long GoToFirstRecord();
	// vtable: 72
	intro long GoToNextRecord();
	// vtable: 76
	intro long GoToPreviousRecord();
	// vtable: 80
	intro long GoToFirstRecordOfGivenType(long);
	// vtable: 84
	intro long GoToNextRecordOfGivenType(long);
	// vtable: 88
	intro long GoToNthRecord(long);
	// vtable: 92
	intro long CountRecords();
	// vtable: 96
	intro long WriteMIFFRecord(struct MIFFRecord*, long);
	// vtable: 100
	intro long WriteDataRecord(long, char *, long);
	// vtable: 104
	intro long WriteFileHeader(long, long, long);
	// vtable: 108
	intro long WriteEnd();
	long lPresentRecordStart;
	long lPresentRecordType;
	long lPresentRecordLength;
	long lPresentRecordIndex;
	long lReadWriteMode;
	long bFileEndWritten;
	long bFileAppearsCorrupt;
	struct MIFFHeader myMIFFHeader;
};

// Type: struct Shortcut;
class Shortcut{
public:
	long lDeviceID;
	long lCommand;
	long lKey;
	long lModifiers;
	long lPush;
	long lIgnoreModifiers;
};

// Type: char[260];

// Type: struct Shortcut (forward reference);

// Type: long *;

// Type: class CGameApp (forward reference);

// Type: uint32_t;

// Type: struct list<Shortcut>::list_node (forward reference);

// Type: class list<Shortcut>::iterator (forward reference);
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{
protected:
	struct list<Shortcut>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};



// Contribution: 1:0008a2b0-0008d894 Module: 26, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048b2b0
void CommandSystem::CommandSystem() {
// LINE 31:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D432;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDC], 0;
	__asm        inc    dword ptr ds:[0x597218];
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0048B309;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0048B4E0;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0048B4CB;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x0048B368;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048B35E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048B36D;
	__asm        jmp    near ptr 0x0048B372;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x80;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0048B3AD;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0048B3B3;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0048B3B8;
	__asm        jmp    near ptr 0x0048B3BD;
	__asm        jmp    near ptr 0x0048B3C2;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x0048B41D;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048B413;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048B422;
	__asm        jmp    near ptr 0x0048B427;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x80;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0048B484;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0048B48A;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0048B48F;
	__asm        jmp    near ptr 0x0048B494;
	__asm        jmp    near ptr 0x0048B499;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x0048B4B1;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0048B4E0;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0048B4E5;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0048B51F;
// LINE 32:
	__asm        mov    ecx, this;
	__asm        call   0x0048B534;
// LINE 33:
	__asm        jmp    near ptr 0x0048B52C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b534
void CommandSystem::Initialize() {
	int32_t j;
	int32_t i;

// LINE 43:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 46:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B54F;
	__asm        inc    i;
	__asm        cmp    i, 0x64;
	__asm        jge    near ptr 0x0048B573;
// LINE 47:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
// LINE 48:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2+1], 0;
// LINE 49:
	__asm        jmp    near ptr 0x0048B54C;
// LINE 50:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B582;
	__asm        inc    i;
	__asm        cmp    i, 0x800;
	__asm        jge    near ptr 0x0048B5A2;
// LINE 51:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0xE0], 0;
	__asm        jmp    near ptr 0x0048B57F;
// LINE 54:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B5B1;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0048B5F8;
// LINE 55:
	__asm        mov    j, 0;
	__asm        jmp    near ptr 0x0048B5CA;
	__asm        inc    j;
	__asm        cmp    j, 0xE;
	__asm        jge    near ptr 0x0048B5F3;
// LINE 56:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x8E0], 0;
	__asm        jmp    near ptr 0x0048B5C7;
// LINE 57:
	__asm        jmp    near ptr 0x0048B5AE;
// LINE 58:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B607;
	__asm        inc    i;
	__asm        cmp    i, 0x64;
	__asm        jge    near ptr 0x0048B627;
// LINE 59:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x918], 0;
	__asm        jmp    near ptr 0x0048B604;
// LINE 61:
	__asm        jmp    near ptr 0x0048B62C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b631
void CommandSystem::ClearAllCommands() {
	int32_t i;

// LINE 71:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 74:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B64C;
	__asm        inc    i;
	__asm        cmp    i, 0x64;
	__asm        jge    near ptr 0x0048B66A;
// LINE 75:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
	__asm        jmp    near ptr 0x0048B665;
	__asm        jmp    near ptr 0x0048B649;
// LINE 76:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D703;
// LINE 77:
	__asm        jmp    near ptr 0x0048B67D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b682
void CommandSystem::ClearAllCommandsDevice(long lDevice) {
	int32_t i;

// LINE 86:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 89:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B69D;
	__asm        inc    i;
	__asm        cmp    i, 0x64;
	__asm        jge    near ptr 0x0048B6D3;
// LINE 90:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lDevice);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        and    edx, eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048B6CE;
	__asm        jmp    near ptr 0x0048B69A;
// LINE 91:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D703;
// LINE 92:
	__asm        jmp    near ptr 0x0048B6E6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0048b6ed
void CommandSystem::SetUpCommandArraysFromShortcuts() {
	unsigned char chCurrentCommand;
	unsigned char chCurrentModifiers;
	int32_t nTempIndex;
	class list<Shortcut>::iterator tempShortcutListIterator;
	unsigned char chCurrentChar;
	long lCurrentIgnoreModifiers;

// LINE 124:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0048B712;
	__asm        jmp    near ptr 0x0048B717;
// LINE 133:
	__asm        mov    ecx, this;
	__asm        call   0x0048B534;
// LINE 134:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0048B682;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0048B740;
	__asm        jmp    near ptr 0x0048B745;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    near ptr 0x0048B75B;
	__asm        jmp    near ptr 0x0048B76F;
	__asm        jmp    near ptr 0x0048B75B;
	__asm        jmp    near ptr 0x0048B76A;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x0048B76F;
	__asm        jmp    near ptr 0x0048B774;
	__asm        jmp    near ptr 0x0048B99F;
	__asm        jmp    near ptr 0x0048B783;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0048B99F;
// LINE 138:
	__asm        jmp    near ptr 0x0048B788;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0048B912;
// LINE 139:
	__asm        jmp    near ptr 0x0048B79A;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x10];
	__asm        mov    chCurrentChar, al;
// LINE 140:
	__asm        jmp    near ptr 0x0048B7A8;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0xC];
	__asm        mov    chCurrentCommand, al;
// LINE 141:
	__asm        jmp    near ptr 0x0048B7B6;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x14];
	__asm        mov    chCurrentModifiers, al;
// LINE 143:
	__asm        xor    eax, eax;
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
// LINE 144:
	__asm        jmp    near ptr 0x0048B7D0;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*2+1], al;
// LINE 146:
	__asm        jmp    near ptr 0x0048B7E7;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lCurrentIgnoreModifiers, eax;
// LINE 147:
	__asm        cmp    lCurrentIgnoreModifiers, 0;
	__asm        je     near ptr 0x0048B8E4;
// LINE 150:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0xE0], al;
// LINE 151:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 1;
	__asm        je     near ptr 0x0048B828;
// LINE 152:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x1E0], al;
// LINE 153:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 2;
	__asm        je     near ptr 0x0048B844;
// LINE 154:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x2E0], al;
// LINE 155:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    near ptr 0x0048B863;
// LINE 156:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x3E0], al;
// LINE 157:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 4;
	__asm        je     near ptr 0x0048B87F;
// LINE 158:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x4E0], al;
// LINE 159:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 5;
	__asm        cmp    al, 5;
	__asm        jne    near ptr 0x0048B89E;
// LINE 160:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x5E0], al;
// LINE 161:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 6;
	__asm        cmp    al, 6;
	__asm        jne    near ptr 0x0048B8BD;
// LINE 162:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x6E0], al;
// LINE 163:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    near ptr 0x0048B8DF;
// LINE 164:
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, 0;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x7E0], al;
// LINE 166:
	__asm        jmp    near ptr 0x0048B90D;
// LINE 167:
	__asm        movsx  eax, chCurrentModifiers;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        add    eax, ecx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    near ptr 0x0048B8FD;
// LINE 168:
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, nTempIndex;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0xE0], al;
// LINE 171:
	__asm        jmp    near ptr 0x0048B97C;
// LINE 172:
	__asm        jmp    near ptr 0x0048B917;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jl     near ptr 0x0048B97C;
	__asm        jmp    near ptr 0x0048B929;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jg     near ptr 0x0048B97C;
// LINE 177:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0048B944;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0048B952;
	__asm        jmp    near ptr 0x0048B957;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0xC];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        dec    ecx;
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 3;
	__asm        sub    ecx, edx;
	__asm        add    ecx, ecx;
	__asm        mov    edx, [ebp-0x28];
	__asm        add    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x8E0], al;
// LINE 180:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0048B98F;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0048B99A;
// LINE 181:
	__asm        jmp    near ptr 0x0048B729;
// LINE 182:
	__asm        jmp    near ptr 0x0048B9A4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b9a9
void CommandSystem::PollJoysticksForCommands() {
	long lValue;
	int32_t j;
	int32_t i;
	int32_t iEnd;
	int32_t nCommand;

// LINE 190:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 199:
	__asm        mov    eax, ds:[0x604C78];
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x0048B9C2;
// LINE 200:
	__asm        cmp    iEnd, 4;
	__asm        jle    near ptr 0x0048B9D3;
// LINE 201:
	__asm        mov    iEnd, 4;
// LINE 205:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B9E2;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0048BA3A;
// LINE 206:
	__asm        mov    j, 0;
	__asm        jmp    near ptr 0x0048B9FD;
	__asm        inc    j;
	__asm        cmp    j, 0xE;
	__asm        jge    near ptr 0x0048BA35;
// LINE 207:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+edx*4+0x918], 0;
	__asm        jmp    near ptr 0x0048B9FA;
// LINE 208:
	__asm        jmp    near ptr 0x0048B9DF;
// LINE 211:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048BA49;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0048BB7E;
// LINE 212:
	__asm        mov    j, 0;
	__asm        jmp    near ptr 0x0048BA64;
	__asm        inc    j;
	__asm        cmp    j, 5;
	__asm        jg     near ptr 0x0048BAF8;
// LINE 213:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    nCommand, edx;
// LINE 214:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x0048BAF3;
// LINE 215:
	__asm        push   1;
	__asm        mov    eax, j;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A836;
	__asm        mov    lValue, eax;
// LINE 216:
	__asm        cmp    lValue, 0;
	__asm        je     near ptr 0x0048BAF3;
	__asm        mov    eax, nCommand;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x918];
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        mov    ebx, eax;
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        cmp    ebx, eax;
	__asm        jge    near ptr 0x0048BAF3;
// LINE 217:
	__asm        mov    eax, lValue;
	__asm        mov    ecx, nCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x918], eax;
// LINE 219:
	__asm        jmp    near ptr 0x0048BA61;
// LINE 220:
	__asm        mov    j, 6;
	__asm        jmp    near ptr 0x0048BB07;
	__asm        inc    j;
	__asm        cmp    j, 0xD;
	__asm        jg     near ptr 0x0048BB79;
// LINE 221:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    nCommand, edx;
// LINE 222:
	__asm        cmp    nCommand, 0;
	__asm        je     near ptr 0x0048BB74;
// LINE 223:
	__asm        push   1;
	__asm        mov    eax, j;
	__asm        sub    eax, 6;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   0x0049A9DD;
	__asm        mov    lValue, eax;
// LINE 224:
	__asm        cmp    lValue, 0;
	__asm        je     near ptr 0x0048BB74;
// LINE 225:
	__asm        mov    eax, ds:[0x604CD0];
	__asm        mov    ecx, nCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x918], eax;
	__asm        jmp    near ptr 0x0048BB74;
// LINE 227:
	__asm        jmp    near ptr 0x0048BB04;
// LINE 228:
	__asm        jmp    near ptr 0x0048BA46;
// LINE 233:
	__asm        jmp    near ptr 0x0048BB83;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bb88
void CGameCommander::CGameCommander() {
// LINE 248:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0049ADC3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590FF8;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 252:
	__asm        jmp    near ptr 0x0048BBB4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bbbc
void CGameCommander::~CGameCommander() {
// LINE 255:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590FF8;
// LINE 256:
	__asm        jmp    near ptr 0x0048BBD6;
	__asm        mov    ecx, this;
	__asm        call   0x0049ADED;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bbe3
unsigned long CGameCommander::Idle() {
// LINE 263:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 264:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BBF6;
// LINE 265:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bbfb
unsigned long CGameCommander::OnLMouseDown(int32_t x, int32_t y) {
// LINE 273:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 274:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xAC];
// LINE 275:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BC2C;
// LINE 276:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048bc33
unsigned long CGameCommander::OnLMouseUp(int32_t x, int32_t y) {
// LINE 283:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 284:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB0];
// LINE 285:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BC64;
// LINE 286:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048bc6b
unsigned long CGameCommander::OnRMouseDown(int32_t x, int32_t y) {
// LINE 292:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 293:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xAC];
// LINE 294:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BC9C;
// LINE 295:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048bca3
unsigned long CGameCommander::OnRMouseUp(int32_t x, int32_t y) {
// LINE 302:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 303:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB0];
// LINE 304:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BCD4;
// LINE 305:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048bcdb
unsigned long CGameCommander::OnMouseMove(int32_t x, int32_t y) {
// LINE 312:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 313:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB4];
// LINE 314:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BD0A;
// LINE 315:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048bd11
unsigned long CGameCommander::OnWindowActivate() {
// LINE 322:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 323:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x42C4], 1;
	__asm        jmp    near ptr 0x0048BD38;
// LINE 325:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BD3F;
// LINE 326:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bd44
unsigned long CGameCommander::OnWindowDeactivate() {
// LINE 332:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 333:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x42C4], 0;
	__asm        jmp    near ptr 0x0048BD6B;
// LINE 335:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BD72;
// LINE 336:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bd77
void CGameCommander::ProcessSetFocus() {
// LINE 351:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 354:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431E19;
// LINE 355:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x98];
// LINE 356:
	__asm        jmp    near ptr 0x0048BDA6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048bdab
unsigned long CGameCommander::OnCharacter(long lCharacter) {
// LINE 363:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 364:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA8];
// LINE 365:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048BDD6;
// LINE 366:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0048bddd
void CGameCommander::ProcessKeyDown(long lKey) {
// LINE 373:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 374:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431D8D;
// LINE 375:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA0];
// LINE 376:
	__asm        jmp    near ptr 0x0048BE1F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0048be26
void CGameCommander::ProcessKeyUp(long lKey) {
// LINE 385:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 386:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431DD3;
// LINE 387:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA4];
// LINE 388:
	__asm        jmp    near ptr 0x0048BE68;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0048be6f
void CGameCommander::ProcessKeyDown(long lKey, struct CommandSystem& commandSystem, int32_t& nCommand, int32_t& bPushCommand) {
	int32_t nTempCommand;
	int32_t nTempIndex;
	unsigned char chTempModifierState;

// LINE 402:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 408:
	__asm        mov    eax, nCommand;
	__asm        mov    dword ptr [eax], 0;
// LINE 409:
	__asm        mov    eax, bPushCommand;
	__asm        mov    dword ptr [eax], 0;
// LINE 421:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431E63;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048BFAA;
// LINE 426:
// Block start:
	class CharData* currentCharData;
	__asm        mov    eax, commandSystem;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    currentCharData, eax;
// LINE 428:
	__asm        cmp    currentCharData, 0;
	__asm        je     near ptr 0x0048BEED;
	__asm        mov    eax, currentCharData;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x14], ecx;
// LINE 429:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048BEDF;
// LINE 430:
	__asm        mov    eax, currentCharData;
	__asm        mov    eax, [eax+5];
	__asm        mov    currentCharData, eax;
// LINE 431:
	__asm        jmp    near ptr 0x0048BEAF;
// LINE 432:
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D703;
// LINE 434:
	__asm        mov    eax, ds:[0x5C34F4];
	__asm        mov    currentCharData, eax;
// LINE 435:
	__asm        cmp    currentCharData, 0;
	__asm        je     near ptr 0x0048BFA5;
// LINE 436:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        mov    chTempModifierState, al;
// LINE 438:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        mov    ecx, currentCharData;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        add    eax, edx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    near ptr 0x0048BF35;
// LINE 439:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 440:
	__asm        cmp    nTempCommand, 0;
	__asm        je     near ptr 0x0048BF97;
	__asm        jmp    near ptr 0x0048BF56;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x0048BF97;
// LINE 441:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048BF85;
// LINE 442:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D4EB;
// LINE 444:
	__asm        mov    eax, currentCharData;
	__asm        mov    eax, [eax+5];
	__asm        mov    currentCharData, eax;
// LINE 445:
	__asm        jmp    near ptr 0x0048BF03;
// LINE 447:
// Block end:
	__asm        jmp    near ptr 0x0048C058;
// LINE 448:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        mov    chTempModifierState, al;
// LINE 449:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        add    eax, lKey;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    near ptr 0x0048BFCC;
// LINE 450:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 451:
	__asm        cmp    nTempCommand, 0;
	__asm        je     near ptr 0x0048C058;
// LINE 452:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, nCommand;
	__asm        mov    [ecx], eax;
// LINE 453:
	__asm        jmp    near ptr 0x0048BFF5;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2+1];
	__asm        test   edx, edx;
	__asm        je     near ptr 0x0048C012;
// LINE 456:
	__asm        mov    eax, bPushCommand;
	__asm        mov    dword ptr [eax], 1;
// LINE 458:
	__asm        jmp    near ptr 0x0048C017;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x0048C058;
// LINE 461:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048C046;
// LINE 462:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D4EB;
// LINE 466:
	__asm        jmp    near ptr 0x0048C05D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0048c064
void CGameCommander::ProcessKeyUp(long lKey, struct CommandSystem& commandSystem) {
	int32_t nTempCommand;
	int32_t nTempIndex;
	unsigned char chTempModifierState;

// LINE 478:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 483:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431E63;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048C18D;
// LINE 488:
// Block start:
	class CharData* currentCharData;
	__asm        mov    eax, commandSystem;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    currentCharData, eax;
// LINE 490:
	__asm        cmp    currentCharData, 0;
	__asm        je     near ptr 0x0048C0D0;
	__asm        mov    eax, currentCharData;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x14], ecx;
// LINE 491:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048C0C2;
// LINE 492:
	__asm        mov    eax, currentCharData;
	__asm        mov    eax, [eax+5];
	__asm        mov    currentCharData, eax;
// LINE 493:
	__asm        jmp    near ptr 0x0048C092;
// LINE 494:
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D703;
// LINE 496:
	__asm        mov    eax, ds:[0x5C34F4];
	__asm        mov    currentCharData, eax;
// LINE 497:
	__asm        cmp    currentCharData, 0;
	__asm        je     near ptr 0x0048C188;
// LINE 498:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        mov    chTempModifierState, al;
// LINE 500:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        mov    ecx, currentCharData;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        add    eax, edx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    near ptr 0x0048C118;
// LINE 501:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 504:
	__asm        cmp    nTempCommand, 0;
	__asm        je     near ptr 0x0048C17A;
	__asm        jmp    near ptr 0x0048C139;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x0048C17A;
// LINE 505:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048C168;
// LINE 506:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D4EB;
// LINE 508:
	__asm        mov    eax, currentCharData;
	__asm        mov    eax, [eax+5];
	__asm        mov    currentCharData, eax;
// LINE 509:
	__asm        jmp    near ptr 0x0048C0E6;
// LINE 511:
// Block end:
	__asm        jmp    near ptr 0x0048C207;
// LINE 512:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        mov    chTempModifierState, al;
// LINE 513:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        add    eax, lKey;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    near ptr 0x0048C1AF;
// LINE 514:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 515:
	__asm        jmp    near ptr 0x0048C1C6;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        je     near ptr 0x0048C207;
// LINE 516:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    near ptr 0x0048C1F5;
// LINE 517:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   0x0043D67F;
// LINE 520:
	__asm        jmp    near ptr 0x0048C20C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048c213
void CGameCommander::ProcessSystemCloseRequest() {
// LINE 527:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 528:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+8];
	__asm        call   0x00464D1A;
// LINE 529:
	__asm        jmp    near ptr 0x0048C22F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048c234
int32_t ReadShortcutPrefsFile(class list<Shortcut>& shortcutList) {
	class MIFF myMIFF;
	struct Shortcut tempShortcut;
	char[260] szFilePath;

// LINE 552:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2D4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 553:
	__asm        mov    al, ds:[0x599D94];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 556:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599D84];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   9;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 557:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB6F5;
// LINE 558:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB878;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048C6CC;
// LINE 561:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004ABB95;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048C6A1;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004ABCBA;
	__asm        cmp    eax, 0x53435554;
	__asm        jne    near ptr 0x0048C6A1;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004ABD6E;
	__asm        cmp    eax, 0x53435554;
	__asm        jne    near ptr 0x0048C6A1;
// LINE 563:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AC0B4;
// LINE 565:
	__asm        push   0x18;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AC544;
// LINE 566:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        call   0x0048E515;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048C68E;
// LINE 567:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x270], eax;
	__asm        jmp    near ptr 0x0048C32C;
	__asm        jmp    near ptr 0x0048C331;
	__asm        mov    eax, [ebp-0x270];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x284], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x0048C372;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    near ptr 0x0048C5D9;
	__asm        mov    eax, ds:[0x597220];
	__asm        cmp    ds:[0x59721C], eax;
	__asm        jne    near ptr 0x0048C5BB;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2BC], eax;
	__asm        cmp    dword ptr [ebp-0x2BC], 0;
	__asm        jne    near ptr 0x0048C3DD;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C0], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048C3D3;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048C3E2;
	__asm        jmp    near ptr 0x0048C3E7;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    dword ptr [ebp-0x294], 0x80;
	__asm        lea    eax, [ebp-0x294];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    dword ptr [ebp-0x298], 1;
	__asm        lea    eax, [ebp-0x298];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0048C446;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        jmp    near ptr 0x0048C452;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        jmp    near ptr 0x0048C457;
	__asm        jmp    near ptr 0x0048C45C;
	__asm        jmp    near ptr 0x0048C461;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C4], eax;
	__asm        cmp    dword ptr [ebp-0x2C4], 0;
	__asm        jne    near ptr 0x0048C4D1;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048C4C7;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048C4D6;
	__asm        jmp    near ptr 0x0048C4DB;
	__asm        mov    eax, [ebp-0x2C4];
	__asm        mov    ecx, [ebp-0x290];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x290];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x2A8], 0x80;
	__asm        lea    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    dword ptr [ebp-0x2AC], 1;
	__asm        lea    eax, [ebp-0x2AC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    ecx, [ebp-0x2B0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0048C562;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        jmp    near ptr 0x0048C56E;
	__asm        mov    eax, [ebp-0x2B0];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        jmp    near ptr 0x0048C573;
	__asm        jmp    near ptr 0x0048C578;
	__asm        jmp    near ptr 0x0048C57D;
	__asm        mov    eax, [ebp-0x2B8];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x0048C598;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x288], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x288];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    near ptr 0x0048C5D9;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x28C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    near ptr 0x0048C5DE;
	__asm        mov    eax, [ebp-0x2D0];
	__asm        mov    [ebp-0x27C], eax;
	__asm        jmp    near ptr 0x0048C5EF;
	__asm        mov    eax, [ebp-0x27C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x280], eax;
	__asm        jmp    near ptr 0x0048C603;
	__asm        cmp    dword ptr [ebp-0x280], 0;
	__asm        je     near ptr 0x0048C628;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x280];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048C628;
	__asm        jmp    near ptr 0x0048C62D;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    ecx, [ebp-0x2D4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    ecx, [ebp-0x2D4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    near ptr 0x0048C684;
	__asm        jmp    near ptr 0x0048C689;
	__asm        jmp    near ptr 0x0048C68E;
// LINE 573:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AC14F;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0048C2E5;
// LINE 575:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004ABB47;
// LINE 576:
	__asm        mov    dword ptr [ebp-0x268], 1;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB7CF;
	__asm        mov    eax, [ebp-0x268];
	__asm        jmp    near ptr 0x0048C6EC;
// LINE 578:
	__asm        mov    dword ptr [ebp-0x26C], 0;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB7CF;
	__asm        mov    eax, [ebp-0x26C];
	__asm        jmp    near ptr 0x0048C6EC;
// LINE 579:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048c6f1
int32_t WriteShortcutPrefsFile(class list<Shortcut>& shortcutList) {
	int32_t nReturnValue;
	class MIFF myMIFF;
	struct Shortcut tempShortcut;
	char[260] szFilePath;

// LINE 586:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x290;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 587:
	__asm        mov    al, ds:[0x599D98];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 589:
	__asm        mov    nReturnValue, 0;
// LINE 591:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599D84];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   9;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 592:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB6F5;
// LINE 593:
	__asm        push   1;
	__asm        push   0x53435554;
	__asm        push   0x53435554;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB937;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048C898;
// LINE 594:
// Block start:
	class list<Shortcut>::iterator tempShortcutListIterator;
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28C], eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0048C78C;
	__asm        jmp    near ptr 0x0048C791;
// LINE 595:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x270], eax;
	__asm        jmp    near ptr 0x0048C7AD;
	__asm        jmp    near ptr 0x0048C7B2;
	__asm        mov    eax, [ebp-0x270];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    near ptr 0x0048C7CE;
	__asm        jmp    near ptr 0x0048C7E5;
	__asm        jmp    near ptr 0x0048C7CE;
	__asm        jmp    near ptr 0x0048C7E0;
	__asm        cmp    dword ptr [ebp-0x284], 0;
	__asm        jne    near ptr 0x0048C7E5;
	__asm        jmp    near ptr 0x0048C7EA;
	__asm        jmp    near ptr 0x0048C862;
	__asm        jmp    near ptr 0x0048C7FC;
	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     near ptr 0x0048C862;
// LINE 596:
	__asm        jmp    near ptr 0x0048C801;
	__asm        mov    esi, tempShortcutListIterator.node;
	__asm        lea    edi, tempShortcut.lDeviceID;
	__asm        add    esi, 8;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 597:
	__asm        push   0x18;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AC811;
// LINE 598:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x0048C84C;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    near ptr 0x0048C85D;
// LINE 599:
	__asm        jmp    near ptr 0x0048C791;
// LINE 600:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AC8FB;
// LINE 601:
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004ABB47;
// LINE 602:
	__asm        mov    dword ptr [ebp-0x278], 1;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB7CF;
	__asm        mov    eax, [ebp-0x278];
	__asm        jmp    near ptr 0x0048C8B8;
// LINE 604:
// Block end:
	__asm        mov    dword ptr [ebp-0x27C], 0;
	__asm        lea    ecx, myMIFF.<vftable>;
	__asm        call   0x004AB7CF;
	__asm        mov    eax, [ebp-0x27C];
	__asm        jmp    near ptr 0x0048C8B8;
// LINE 605:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048c8bd
void MakeDefaultConfigurableShortcuts(class list<Shortcut>& shortcutList) {
	int32_t i;
	struct Shortcut tempShortcut;

// LINE 611:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2E0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 616:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 618:
	__asm        mov    tempShortcut.lCommand, 2;
// LINE 619:
	__asm        mov    tempShortcut.lKey, 0x4D;
// LINE 620:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 622:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 623:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0048C90C;
	__asm        jmp    near ptr 0x0048C911;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048C92A;
// LINE 625:
	__asm        mov    tempShortcut.lCommand, 3;
// LINE 626:
	__asm        mov    tempShortcut.lKey, 0x45;
// LINE 627:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 629:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 630:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0048C966;
	__asm        jmp    near ptr 0x0048C96B;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048C984;
// LINE 632:
	__asm        mov    tempShortcut.lCommand, 0x1B;
// LINE 633:
	__asm        mov    tempShortcut.lKey, 0x49;
// LINE 634:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 636:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 637:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0048C9C0;
	__asm        jmp    near ptr 0x0048C9C5;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048C9DE;
// LINE 639:
	__asm        mov    tempShortcut.lCommand, 0x1C;
// LINE 640:
	__asm        mov    tempShortcut.lKey, 0x4B;
// LINE 641:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 643:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 644:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0048CA1A;
	__asm        jmp    near ptr 0x0048CA1F;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CA38;
// LINE 646:
	__asm        mov    tempShortcut.lCommand, 0x1D;
// LINE 647:
	__asm        mov    tempShortcut.lKey, 0x4A;
// LINE 648:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 650:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 651:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0048CA74;
	__asm        jmp    near ptr 0x0048CA79;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CA92;
// LINE 653:
	__asm        mov    tempShortcut.lCommand, 0x1E;
// LINE 654:
	__asm        mov    tempShortcut.lKey, 0x4C;
// LINE 655:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 657:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 658:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0048CACE;
	__asm        jmp    near ptr 0x0048CAD3;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CAEC;
// LINE 660:
	__asm        mov    tempShortcut.lCommand, 0x1F;
// LINE 661:
	__asm        mov    tempShortcut.lKey, 0x4F;
// LINE 662:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 664:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 665:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x0048CB28;
	__asm        jmp    near ptr 0x0048CB2D;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CB46;
// LINE 667:
	__asm        mov    tempShortcut.lCommand, 0x20;
// LINE 668:
	__asm        mov    tempShortcut.lKey, 0x50;
// LINE 669:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 671:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 672:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0048CB82;
	__asm        jmp    near ptr 0x0048CB87;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CBA0;
// LINE 674:
	__asm        mov    tempShortcut.lCommand, 4;
// LINE 675:
	__asm        mov    tempShortcut.lKey, 0x4E;
// LINE 676:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 678:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 679:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x0048CBE2;
	__asm        jmp    near ptr 0x0048CBE7;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CC03;
// LINE 681:
	__asm        mov    tempShortcut.lCommand, 5;
// LINE 682:
	__asm        mov    tempShortcut.lKey, 0x52;
// LINE 683:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 685:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 686:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0048CC48;
	__asm        jmp    near ptr 0x0048CC4D;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CC6C;
// LINE 688:
	__asm        mov    tempShortcut.lCommand, 8;
// LINE 689:
	__asm        mov    tempShortcut.lKey, 0x26;
// LINE 690:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 692:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 693:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x0048CCB1;
	__asm        jmp    near ptr 0x0048CCB6;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CCD5;
// LINE 695:
	__asm        mov    tempShortcut.lCommand, 9;
// LINE 696:
	__asm        mov    tempShortcut.lKey, 0x28;
// LINE 697:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 699:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 700:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x0048CD1A;
	__asm        jmp    near ptr 0x0048CD1F;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CD3E;
// LINE 702:
	__asm        mov    tempShortcut.lCommand, 8;
// LINE 703:
	__asm        mov    tempShortcut.lKey, 0x58;
// LINE 704:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 706:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 707:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x0048CD83;
	__asm        jmp    near ptr 0x0048CD88;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CDA7;
// LINE 709:
	__asm        mov    tempShortcut.lCommand, 9;
// LINE 710:
	__asm        mov    tempShortcut.lKey, 0x5A;
// LINE 711:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 713:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 714:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x0048CDEC;
	__asm        jmp    near ptr 0x0048CDF1;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CE10;
// LINE 716:
	__asm        mov    tempShortcut.lCommand, 7;
// LINE 717:
	__asm        mov    tempShortcut.lKey, 0x27;
// LINE 718:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 720:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 721:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    near ptr 0x0048CE55;
	__asm        jmp    near ptr 0x0048CE5A;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CE79;
// LINE 723:
	__asm        mov    tempShortcut.lCommand, 6;
// LINE 724:
	__asm        mov    tempShortcut.lKey, 0x25;
// LINE 725:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 727:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 728:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x0048CEBE;
	__asm        jmp    near ptr 0x0048CEC3;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CEE2;
// LINE 730:
	__asm        mov    tempShortcut.lCommand, 0xC;
// LINE 731:
	__asm        mov    tempShortcut.lKey, 0x6B;
// LINE 732:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 734:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 735:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x0048CF27;
	__asm        jmp    near ptr 0x0048CF2C;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CF4B;
// LINE 737:
	__asm        mov    tempShortcut.lCommand, 0xD;
// LINE 738:
	__asm        mov    tempShortcut.lKey, 0x6D;
// LINE 739:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 741:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 742:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x0048CF90;
	__asm        jmp    near ptr 0x0048CF95;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048CFB4;
// LINE 744:
	__asm        mov    tempShortcut.lCommand, 0xC;
// LINE 745:
	__asm        mov    tempShortcut.lKey, 0x51;
// LINE 746:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 748:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 749:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x0048CFF9;
	__asm        jmp    near ptr 0x0048CFFE;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048D01D;
// LINE 751:
	__asm        mov    tempShortcut.lCommand, 0xD;
// LINE 752:
	__asm        mov    tempShortcut.lKey, 0x57;
// LINE 753:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 755:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 756:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    near ptr 0x0048D062;
	__asm        jmp    near ptr 0x0048D067;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x0048D086;
	__asm        mov    eax, [ebp-0x110];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x114], eax;
	__asm        jmp    near ptr 0x0048D09A;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     near ptr 0x0048D0BC;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x114];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D0BC;
	__asm        jmp    near ptr 0x0048D0C1;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    near ptr 0x0048D118;
	__asm        jmp    near ptr 0x0048D11D;
	__asm        jmp    near ptr 0x0048D122;
// LINE 758:
	__asm        mov    tempShortcut.lCommand, 0xF;
// LINE 759:
	__asm        mov    tempShortcut.lKey, 0x43;
// LINE 760:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 762:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 763:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x0048D167;
	__asm        jmp    near ptr 0x0048D16C;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048D18B;
// LINE 765:
	__asm        mov    tempShortcut.lCommand, 0xE;
// LINE 766:
	__asm        mov    tempShortcut.lKey, 0x56;
// LINE 767:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 769:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 770:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x0048D1D0;
	__asm        jmp    near ptr 0x0048D1D5;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x0048D1F4;
	__asm        mov    eax, [ebp-0x134];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x138], eax;
	__asm        jmp    near ptr 0x0048D208;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x0048D22A;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x138];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D22A;
	__asm        jmp    near ptr 0x0048D22F;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x12C], eax;
	__asm        jmp    near ptr 0x0048D286;
	__asm        jmp    near ptr 0x0048D28B;
	__asm        jmp    near ptr 0x0048D290;
// LINE 772:
	__asm        mov    tempShortcut.lCommand, 0x10;
// LINE 773:
	__asm        mov    tempShortcut.lKey, 0x42;
// LINE 774:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 776:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 777:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x140], eax;
	__asm        jmp    near ptr 0x0048D2D5;
	__asm        jmp    near ptr 0x0048D2DA;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x0048D2F9;
	__asm        mov    eax, [ebp-0x14C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x150], eax;
	__asm        jmp    near ptr 0x0048D30D;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     near ptr 0x0048D32F;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x150];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D32F;
	__asm        jmp    near ptr 0x0048D334;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    near ptr 0x0048D38B;
	__asm        jmp    near ptr 0x0048D390;
	__asm        jmp    near ptr 0x0048D395;
// LINE 779:
	__asm        mov    tempShortcut.lCommand, 0x11;
// LINE 780:
	__asm        mov    tempShortcut.lKey, 0x47;
// LINE 781:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 783:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 784:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    near ptr 0x0048D3DA;
	__asm        jmp    near ptr 0x0048D3DF;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048D3FE;
// LINE 786:
	__asm        mov    tempShortcut.lCommand, 0x12;
// LINE 787:
	__asm        mov    tempShortcut.lKey, 0x46;
// LINE 788:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 790:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 791:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x164], eax;
	__asm        jmp    near ptr 0x0048D443;
	__asm        jmp    near ptr 0x0048D448;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    near ptr 0x0048D467;
	__asm        mov    eax, [ebp-0x170];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x174], eax;
	__asm        jmp    near ptr 0x0048D47B;
	__asm        cmp    dword ptr [ebp-0x174], 0;
	__asm        je     near ptr 0x0048D49D;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x174];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D49D;
	__asm        jmp    near ptr 0x0048D4A2;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x178];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x178];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    near ptr 0x0048D4F9;
	__asm        jmp    near ptr 0x0048D4FE;
	__asm        jmp    near ptr 0x0048D503;
// LINE 793:
	__asm        mov    tempShortcut.lCommand, 0x13;
// LINE 794:
	__asm        mov    tempShortcut.lKey, 0x20;
// LINE 795:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 797:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 798:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    near ptr 0x0048D548;
	__asm        jmp    near ptr 0x0048D54D;
	__asm        mov    eax, [ebp-0x17C];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x0048D56C;
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18C], eax;
	__asm        jmp    near ptr 0x0048D580;
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     near ptr 0x0048D5A2;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x18C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D5A2;
	__asm        jmp    near ptr 0x0048D5A7;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x180], eax;
	__asm        jmp    near ptr 0x0048D5FE;
	__asm        jmp    near ptr 0x0048D603;
	__asm        jmp    near ptr 0x0048D608;
// LINE 800:
	__asm        mov    tempShortcut.lCommand, 0x14;
// LINE 801:
	__asm        mov    tempShortcut.lKey, 0x54;
// LINE 802:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 804:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 805:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x0048D64D;
	__asm        jmp    near ptr 0x0048D652;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x198];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048D671;
// LINE 807:
	__asm        mov    tempShortcut.lCommand, 0x15;
// LINE 808:
	__asm        mov    tempShortcut.lKey, 0x70;
// LINE 809:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 811:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 812:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    near ptr 0x0048D6B6;
	__asm        jmp    near ptr 0x0048D6BB;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    near ptr 0x0048D6DA;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1B0], eax;
	__asm        jmp    near ptr 0x0048D6EE;
	__asm        cmp    dword ptr [ebp-0x1B0], 0;
	__asm        je     near ptr 0x0048D710;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1B0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D710;
	__asm        jmp    near ptr 0x0048D715;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        jmp    near ptr 0x0048D76C;
	__asm        jmp    near ptr 0x0048D771;
	__asm        jmp    near ptr 0x0048D776;
// LINE 814:
	__asm        mov    tempShortcut.lCommand, 0x16;
// LINE 815:
	__asm        mov    tempShortcut.lKey, 0x71;
// LINE 816:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 818:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 819:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    near ptr 0x0048D7BB;
	__asm        jmp    near ptr 0x0048D7C0;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1BC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048D7DF;
// LINE 821:
	__asm        mov    tempShortcut.lCommand, 0x17;
// LINE 822:
	__asm        mov    tempShortcut.lKey, 0x72;
// LINE 823:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 825:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 826:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    near ptr 0x0048D824;
	__asm        jmp    near ptr 0x0048D829;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    near ptr 0x0048D848;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1D4], eax;
	__asm        jmp    near ptr 0x0048D85C;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     near ptr 0x0048D87E;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1D4];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D87E;
	__asm        jmp    near ptr 0x0048D883;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    ecx, [ebp-0x1D8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    ecx, [ebp-0x1D8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    near ptr 0x0048D8DA;
	__asm        jmp    near ptr 0x0048D8DF;
	__asm        jmp    near ptr 0x0048D8E4;
// LINE 828:
	__asm        mov    tempShortcut.lCommand, 0x18;
// LINE 829:
	__asm        mov    tempShortcut.lKey, 0x73;
// LINE 830:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 832:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 833:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1E4], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    near ptr 0x0048D929;
	__asm        jmp    near ptr 0x0048D92E;
	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x1F0], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        jmp    near ptr 0x0048D94D;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1EC], eax;
	__asm        jmp    near ptr 0x0048D961;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     near ptr 0x0048D983;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1EC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048D983;
	__asm        jmp    near ptr 0x0048D988;
	__asm        mov    eax, [ebp-0x1F0];
	__asm        mov    ecx, [ebp-0x1E8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1E8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        jmp    near ptr 0x0048D9DF;
	__asm        jmp    near ptr 0x0048D9E4;
	__asm        jmp    near ptr 0x0048D9E9;
// LINE 835:
	__asm        mov    tempShortcut.lCommand, 0x19;
// LINE 836:
	__asm        mov    tempShortcut.lKey, 0x74;
// LINE 837:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 839:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 840:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        mov    eax, [ebp-0x1FC];
	__asm        mov    [ebp-0x1F4], eax;
	__asm        jmp    near ptr 0x0048DA2E;
	__asm        jmp    near ptr 0x0048DA33;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1F8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048DA52;
// LINE 842:
	__asm        mov    tempShortcut.lCommand, 0xB;
// LINE 843:
	__asm        mov    tempShortcut.lKey, 0x41;
// LINE 844:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 846:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 847:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        mov    [ebp-0x200], eax;
	__asm        jmp    near ptr 0x0048DA97;
	__asm        jmp    near ptr 0x0048DA9C;
	__asm        mov    eax, [ebp-0x200];
	__asm        mov    [ebp-0x214], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x20C], eax;
	__asm        jmp    near ptr 0x0048DABB;
	__asm        mov    eax, [ebp-0x20C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x210], eax;
	__asm        jmp    near ptr 0x0048DACF;
	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     near ptr 0x0048DAF1;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x210];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048DAF1;
	__asm        jmp    near ptr 0x0048DAF6;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x20C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x204], eax;
	__asm        jmp    near ptr 0x0048DB4D;
	__asm        jmp    near ptr 0x0048DB52;
	__asm        jmp    near ptr 0x0048DB57;
// LINE 849:
	__asm        mov    tempShortcut.lCommand, 0xA;
// LINE 850:
	__asm        mov    tempShortcut.lKey, 0x53;
// LINE 851:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 853:
	__asm        lea    eax, tempShortcut.lIgnoreModifiers;
	__asm        push   eax;
	__asm        lea    eax, tempShortcut.lPush;
	__asm        push   eax;
	__asm        mov    eax, tempShortcut.lCommand;
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 854:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x220], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    [ebp-0x218], eax;
	__asm        jmp    near ptr 0x0048DB9C;
	__asm        jmp    near ptr 0x0048DBA1;
	__asm        mov    eax, [ebp-0x218];
	__asm        mov    [ebp-0x22C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    near ptr 0x0048DBC0;
	__asm        mov    eax, [ebp-0x224];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x228], eax;
	__asm        jmp    near ptr 0x0048DBD4;
	__asm        cmp    dword ptr [ebp-0x228], 0;
	__asm        je     near ptr 0x0048DBF6;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x228];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048DBF6;
	__asm        jmp    near ptr 0x0048DBFB;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    ecx, [ebp-0x224];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x224];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x22C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x22C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    [ebp-0x21C], eax;
	__asm        jmp    near ptr 0x0048DC53;
	__asm        jmp    near ptr 0x0048DC58;
	__asm        jmp    near ptr 0x0048DC5D;
// LINE 858:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x0048DC6C;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jg     near ptr 0x0048E3AA;
// LINE 859:
	__asm        mov    eax, i;
	__asm        mov    tempShortcut.lDeviceID, eax;
// LINE 861:
	__asm        mov    tempShortcut.lCommand, 6;
// LINE 862:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 863:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 864:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 865:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 866:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x238], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    [ebp-0x230], eax;
	__asm        jmp    near ptr 0x0048DCBB;
	__asm        jmp    near ptr 0x0048DCC0;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048DCDF;
// LINE 867:
	__asm        mov    tempShortcut.lCommand, 7;
// LINE 868:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 869:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 870:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 871:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 872:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    near ptr 0x0048DD1E;
	__asm        jmp    near ptr 0x0048DD23;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x248], eax;
	__asm        jmp    near ptr 0x0048DD42;
	__asm        mov    eax, [ebp-0x248];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24C], eax;
	__asm        jmp    near ptr 0x0048DD56;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        je     near ptr 0x0048DD78;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x24C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048DD78;
	__asm        jmp    near ptr 0x0048DD7D;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    ecx, [ebp-0x248];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x248];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x250];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x250];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    [ebp-0x240], eax;
	__asm        jmp    near ptr 0x0048DDD5;
	__asm        jmp    near ptr 0x0048DDDA;
	__asm        jmp    near ptr 0x0048DDDF;
// LINE 874:
	__asm        mov    tempShortcut.lCommand, 8;
// LINE 875:
	__asm        mov    tempShortcut.lKey, 1;
// LINE 876:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 877:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 878:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 879:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x254], eax;
	__asm        jmp    near ptr 0x0048DE1E;
	__asm        jmp    near ptr 0x0048DE23;
	__asm        mov    eax, [ebp-0x254];
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x260], eax;
	__asm        jmp    near ptr 0x0048DE42;
	__asm        mov    eax, [ebp-0x260];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x264], eax;
	__asm        jmp    near ptr 0x0048DE56;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     near ptr 0x0048DE78;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x264];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048DE78;
	__asm        jmp    near ptr 0x0048DE7D;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [ebp-0x260];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x260];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    [ebp-0x258], eax;
	__asm        jmp    near ptr 0x0048DED5;
	__asm        jmp    near ptr 0x0048DEDA;
	__asm        jmp    near ptr 0x0048DEDF;
// LINE 880:
	__asm        mov    tempShortcut.lCommand, 9;
// LINE 881:
	__asm        mov    tempShortcut.lKey, 1;
// LINE 882:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 883:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 884:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 885:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    [ebp-0x26C], eax;
	__asm        jmp    near ptr 0x0048DF1E;
	__asm        jmp    near ptr 0x0048DF23;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048DF42;
// LINE 888:
	__asm        mov    tempShortcut.lCommand, 0x13;
// LINE 889:
	__asm        mov    tempShortcut.lKey, 6;
// LINE 890:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 891:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 892:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 893:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x278], eax;
	__asm        jmp    near ptr 0x0048DF81;
	__asm        jmp    near ptr 0x0048DF86;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x28C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x284], eax;
	__asm        jmp    near ptr 0x0048DFA5;
	__asm        mov    eax, [ebp-0x284];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x288], eax;
	__asm        jmp    near ptr 0x0048DFB9;
	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     near ptr 0x0048DFDB;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x288];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048DFDB;
	__asm        jmp    near ptr 0x0048DFE0;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    ecx, [ebp-0x284];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x284];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    ecx, [ebp-0x28C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    ecx, [ebp-0x28C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    [ebp-0x27C], eax;
	__asm        jmp    near ptr 0x0048E038;
	__asm        jmp    near ptr 0x0048E03D;
	__asm        jmp    near ptr 0x0048E042;
// LINE 895:
	__asm        mov    tempShortcut.lCommand, 2;
// LINE 896:
	__asm        mov    tempShortcut.lKey, 7;
// LINE 897:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 898:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 899:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 900:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    [ebp-0x290], eax;
	__asm        jmp    near ptr 0x0048E081;
	__asm        jmp    near ptr 0x0048E086;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x29C], eax;
	__asm        jmp    near ptr 0x0048E0A5;
	__asm        mov    eax, [ebp-0x29C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2A0], eax;
	__asm        jmp    near ptr 0x0048E0B9;
	__asm        cmp    dword ptr [ebp-0x2A0], 0;
	__asm        je     near ptr 0x0048E0DB;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2A0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048E0DB;
	__asm        jmp    near ptr 0x0048E0E0;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x2A4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x2A4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x294], eax;
	__asm        jmp    near ptr 0x0048E138;
	__asm        jmp    near ptr 0x0048E13D;
	__asm        jmp    near ptr 0x0048E142;
// LINE 902:
	__asm        mov    tempShortcut.lCommand, 0xC;
// LINE 903:
	__asm        mov    tempShortcut.lKey, 8;
// LINE 904:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 905:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 906:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 907:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    eax, [ebp-0x2B0];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        jmp    near ptr 0x0048E181;
	__asm        jmp    near ptr 0x0048E186;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2AC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048E910;
	__asm        jmp    near ptr 0x0048E1A5;
// LINE 908:
	__asm        mov    tempShortcut.lCommand, 0xD;
// LINE 909:
	__asm        mov    tempShortcut.lKey, 9;
// LINE 910:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 911:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 912:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 913:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        jmp    near ptr 0x0048E1E4;
	__asm        jmp    near ptr 0x0048E1E9;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x2C0], eax;
	__asm        jmp    near ptr 0x0048E208;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C4], eax;
	__asm        jmp    near ptr 0x0048E21C;
	__asm        cmp    dword ptr [ebp-0x2C4], 0;
	__asm        je     near ptr 0x0048E23E;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2C4];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048E23E;
	__asm        jmp    near ptr 0x0048E243;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    ecx, [ebp-0x2C0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        jmp    near ptr 0x0048E29B;
	__asm        jmp    near ptr 0x0048E2A0;
	__asm        jmp    near ptr 0x0048E2A5;
// LINE 915:
	__asm        mov    tempShortcut.lCommand, 0x1A;
// LINE 916:
	__asm        mov    tempShortcut.lKey, 0xA;
// LINE 917:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 918:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 919:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 920:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        jmp    near ptr 0x0048E2E4;
	__asm        jmp    near ptr 0x0048E2E9;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        mov    [ebp-0x2E0], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   0x0048ACD0;
	__asm        mov    [ebp-0x2D8], eax;
	__asm        jmp    near ptr 0x0048E308;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2DC], eax;
	__asm        jmp    near ptr 0x0048E31C;
	__asm        cmp    dword ptr [ebp-0x2DC], 0;
	__asm        je     near ptr 0x0048E33E;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2DC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x0048E33E;
	__asm        jmp    near ptr 0x0048E343;
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    ecx, [ebp-0x2E0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    ecx, [ebp-0x2E0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    near ptr 0x0048E39B;
	__asm        jmp    near ptr 0x0048E3A0;
	__asm        jmp    near ptr 0x0048E3A5;
// LINE 921:
	__asm        jmp    near ptr 0x0048DC69;
// LINE 922:
	__asm        jmp    near ptr 0x0048E3AF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e3b4
int32_t GetPushAndIgnoreSettingsForCommand(long lCommand, long& lPush, long& lIgnoreModifiers) {
// LINE 928:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 937:
	__asm        cmp    lCommand, 3;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 4;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 5;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x14;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x15;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x16;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x17;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x18;
	__asm        je     near ptr 0x0048E414;
	__asm        cmp    lCommand, 0x19;
	__asm        jne    near ptr 0x0048E422;
// LINE 939:
	__asm        mov    eax, lPush;
	__asm        mov    dword ptr [eax], 1;
// LINE 941:
	__asm        jmp    near ptr 0x0048E42B;
// LINE 942:
	__asm        mov    eax, lPush;
	__asm        mov    dword ptr [eax], 0;
// LINE 954:
	__asm        cmp    lCommand, 8;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 9;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 7;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 6;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 0xB;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 0xA;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 0xC;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 0xD;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 0x13;
	__asm        je     near ptr 0x0048E48F;
	__asm        cmp    lCommand, 2;
	__asm        jne    near ptr 0x0048E49D;
// LINE 956:
	__asm        mov    eax, lIgnoreModifiers;
	__asm        mov    dword ptr [eax], 1;
// LINE 958:
	__asm        jmp    near ptr 0x0048E4A6;
// LINE 959:
	__asm        mov    eax, lIgnoreModifiers;
	__asm        mov    dword ptr [eax], 0;
// LINE 961:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048E4B0;
// LINE 962:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e4b5
void DeleteShortcutPrefsFile() {
	char[260] szFilePath;

// LINE 968:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x104;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 969:
	__asm        mov    al, ds:[0x599D9C];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 971:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599D84];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   9;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 972:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        call   0x0056FA70;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048E50B;
// LINE 973:
	__asm        jmp    near ptr 0x0048E510;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e515
int32_t ValidateConfigurableShortcut(struct Shortcut& shortcutToValidate) {
// LINE 979:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 982:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0048E546;
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jl     near ptr 0x0048E53F;
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 4;
	__asm        jle    near ptr 0x0048E546;
// LINE 984:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 987:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x0048E570;
	__asm        mov    eax, shortcutToValidate;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0048E5FA;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0048E570;
// LINE 989:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 993:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jl     near ptr 0x0048E59C;
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 4;
	__asm        jg     near ptr 0x0048E59C;
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax+8], 0xE;
	__asm        jl     near ptr 0x0048E59C;
// LINE 995:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 997:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0048E5B0;
// LINE 998:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 999:
	__asm        mov    eax, shortcutToValidate;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x0048E696;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0048E5CE;
// LINE 1000:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 1005:
	__asm        mov    eax, shortcutToValidate;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        mov    eax, shortcutToValidate;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, shortcutToValidate;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x0048E3B4;
	__asm        add    esp, 0xC;
// LINE 1006:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048E5F5;
// LINE 1007:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e5fa
int32_t IsKeyReserved(long lKey) {
// LINE 1013:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1018:
	__asm        cmp    lKey, 0x90;
	__asm        je     near ptr 0x0048E635;
	__asm        cmp    lKey, 0x2C;
	__asm        je     near ptr 0x0048E635;
	__asm        cmp    lKey, 0x1B;
	__asm        je     near ptr 0x0048E635;
	__asm        cmp    lKey, 0x11;
	__asm        je     near ptr 0x0048E635;
	__asm        cmp    lKey, 0x12;
	__asm        jne    near ptr 0x0048E63F;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048E641;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E646;
// LINE 1019:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e64b
void GetReservedKeyArray(long * lKeys) {
// LINE 1029:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1030:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax], 0x90;
// LINE 1031:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax+4], 0x2C;
// LINE 1032:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax+8], 0x1B;
// LINE 1033:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax+0xC], 0x11;
// LINE 1034:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax+0x10], 0x12;
// LINE 1035:
	__asm        mov    eax, lKeys;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1036:
	__asm        jmp    near ptr 0x0048E691;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e696
int32_t IsCommandConfigurable(long lCommand) {
// LINE 1043:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1045:
	__asm        cmp    lCommand, 2;
	__asm        jl     near ptr 0x0048E6BA;
	__asm        cmp    lCommand, 0x20;
	__asm        jg     near ptr 0x0048E6BA;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048E6BC;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E6C1;
// LINE 1046:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048e6c6
long GetJoystickCommandTwin(long lCommand) {
// LINE 1056:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1057:
	__asm        cmp    lCommand, 6;
	__asm        jne    near ptr 0x0048E6E5;
// LINE 1058:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1059:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 7;
	__asm        jne    near ptr 0x0048E6FE;
// LINE 1060:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1061:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 8;
	__asm        jne    near ptr 0x0048E717;
// LINE 1062:
	__asm        mov    eax, 9;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1063:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 9;
	__asm        jne    near ptr 0x0048E730;
// LINE 1064:
	__asm        mov    eax, 8;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1065:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xA;
	__asm        jne    near ptr 0x0048E749;
// LINE 1066:
	__asm        mov    eax, 0xB;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1067:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xB;
	__asm        jne    near ptr 0x0048E762;
// LINE 1068:
	__asm        mov    eax, 0xA;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1069:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xC;
	__asm        jne    near ptr 0x0048E77B;
// LINE 1070:
	__asm        mov    eax, 0xD;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1071:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xD;
	__asm        jne    near ptr 0x0048E794;
// LINE 1072:
	__asm        mov    eax, 0xC;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1073:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xE;
	__asm        jne    near ptr 0x0048E7AD;
// LINE 1074:
	__asm        mov    eax, 0xF;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1075:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0xF;
	__asm        jne    near ptr 0x0048E7C6;
// LINE 1076:
	__asm        mov    eax, 0xE;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1077:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x11;
	__asm        jne    near ptr 0x0048E7DF;
// LINE 1078:
	__asm        mov    eax, 0x12;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1079:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x12;
	__asm        jne    near ptr 0x0048E7F8;
// LINE 1080:
	__asm        mov    eax, 0x11;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1081:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x1B;
	__asm        jne    near ptr 0x0048E811;
// LINE 1082:
	__asm        mov    eax, 0x1C;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1083:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x1C;
	__asm        jne    near ptr 0x0048E82A;
// LINE 1084:
	__asm        mov    eax, 0x1B;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1085:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x1D;
	__asm        jne    near ptr 0x0048E843;
// LINE 1086:
	__asm        mov    eax, 0x1E;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1087:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x1E;
	__asm        jne    near ptr 0x0048E85C;
// LINE 1088:
	__asm        mov    eax, 0x1D;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1089:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x1F;
	__asm        jne    near ptr 0x0048E875;
// LINE 1090:
	__asm        mov    eax, 0x20;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1091:
	__asm        jmp    near ptr 0x0048E889;
	__asm        cmp    lCommand, 0x20;
	__asm        jne    near ptr 0x0048E889;
// LINE 1092:
	__asm        mov    eax, 0x1F;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1093:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048E890;
// LINE 1094:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:0008d8a0-0008d8c0 Module: 26, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0008d8d0-0008d908 Module: 26, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0048e8d0
// CGameCommander::`scalar deleting destructor'



// Contribution: 1:0008d910-0008dba7 Module: 26, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048e910
// list<Shortcut>::insert



// Contribution: 2:00001ff8-0000204b Module: 26, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590ff8
// ??_7CGameCommander@@6B@


// Contribution: 3:00002d84-00002d9c Module: 26, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599d84
// SZ_SHORTCUT_PREFS_FILE_NAME
