// Module: Gamecomm.obj
// Source: C:\Copter\source\sparkal\Gamecomm.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ struct CommandSystem (forward reference);
struct CommandSystem{ // packed(0xaa8 bytes) TI: 0x12e4
	/*+0x0*/   /*packed*/ struct Command keyboardCommands[100]; // 0xc8 bytes
	/*+0xc8*/  /*packed*/ class CharList keyboardCommandList; // 0x10 bytes
	/*+0xd8*/  /*packed*/ class list<Shortcut> commandShortcuts; // 0x8 bytes
	/*+0xe0*/  unsigned char chCommandKeyboardArray[2048]; // 0x800 bytes
	/*+0x8e0*/ unsigned char chCommandJoystickArray[4][14]; // 0x38 bytes
	/*+0x918*/ long joystickCommands[100]; // 0x190 bytes
	void CommandSystem();
	void Initialize();
	void ClearAllCommands();
	void ClearAllCommandsDevice(long);
	void TurnOnCommand(int32_t);
	void TurnOffCommand(int32_t);
	void TurnOnCommandDevice(int32_t, long);
	void TurnOffCommandDevice(int32_t, long);
	int32_t IsCommandSet(int32_t);
	int32_t IsCommandPush(int32_t);
	void SetUpCommandArraysFromShortcuts();
	// calltype: NearC
	static int32_t GetKeystateIndexForChar(long, char);
	long GetJoystickCommandValue(int32_t);
	void PollJoysticksForCommands();
};

// Type: void;

// Type: int32_t;

// Type: long;

// Type: unsigned char;

// Type: /*packed*/ class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{ // packed(0x4 bytes) TI: 0x1081
protected:
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
	/*packed*/ struct Shortcut& operator*();
	/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator++();
	/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator--();
};

// Type: /*packed*/ class CGameCommander (forward reference);
// VTABLE: COPTER_D 0x00590ff8
class CGameCommander : public CDefaultCommander
{ // packed(0xc bytes) TI: 0x1d27
public:
	void CGameCommander();
	virtual void ~CGameCommander() /* override */;
	virtual unsigned long Idle() /* override */;
	virtual void ProcessSetFocus(); // vtable+0x24
	virtual void ProcessKeyDown(long, /*packed*/ struct CommandSystem&, int32_t&, int32_t&); // vtable+0x28
	virtual void ProcessKeyDown(long); // vtable+0x2c
	virtual void ProcessKeyUp(long, /*packed*/ struct CommandSystem&); // vtable+0x30
	virtual void ProcessKeyUp(long); // vtable+0x34
	virtual unsigned long OnCharacter(long); // vtable+0x38
	virtual unsigned long OnLMouseDown(int32_t, int32_t); // vtable+0x3c
	virtual unsigned long OnLMouseUp(int32_t, int32_t); // vtable+0x40
	virtual unsigned long OnRMouseDown(int32_t, int32_t); // vtable+0x44
	virtual unsigned long OnRMouseUp(int32_t, int32_t); // vtable+0x48
	virtual unsigned long OnMouseMove(int32_t, int32_t) /* override */;
	virtual unsigned long OnWindowActivate() /* override */;
	virtual unsigned long OnWindowDeactivate() /* override */;
	virtual void ProcessSystemCloseRequest(); // vtable+0x4c
	virtual void SetNewGameApp(/*unpacked*/ class CGameApp*); // vtable+0x50
	/*+0x8*/   /*unpacked*/ class CGameApp *myGameApp;
};

// Type: unsigned long;

// Type: /*packed*/ class CharData (forward reference);
class CharData{ // packed(0x9 bytes) TI: 0x4578
public:
	/*+0x0*/   unsigned char chValue; // 0x1 bytes
	/*+0x1*/   /*packed*/ class CharData *previousCharData;
	/*+0x5*/   /*packed*/ class CharData *nextCharData;
	void CharData(unsigned char);
	void CharData();
};

// Type: /*packed*/ class list<Shortcut> (forward reference);
class list<Shortcut>{ // packed(0x8 bytes) TI: 0x1b79
	using void_pointer = void * __ptr32;
	struct list<Shortcut>::list_node{ // packed(0x20 bytes) TI: 0x1b8e
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ struct Shortcut data; // 0x18 bytes
	};
protected:
	static /*packed*/ class allocator<list<Shortcut>::list_node> list_node_allocator;
	static /*packed*/ class allocator<Shortcut> value_allocator;
	using value_type = /*packed*/ struct Shortcut;
	using value_allocator_type = /*packed*/ class allocator<Shortcut>;
	using pointer = /*packed*/ struct Shortcut*;
	using reference = /*packed*/ struct Shortcut&;
	using const_reference = const /*packed*/ struct Shortcut&;
	using list_node_allocator_type = /*packed*/ class allocator<list<Shortcut>::list_node>;
	using link_type = /*packed*/ struct list<Shortcut>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<Shortcut>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1b8c
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<Shortcut>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<Shortcut>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<Shortcut>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<Shortcut>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<Shortcut>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<Shortcut>::list_node *free_list;
	static /*packed*/ struct list<Shortcut>::list_node *next_avail;
	static /*packed*/ struct list<Shortcut>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<Shortcut>::list_node* get_node();
	void put_node(/*packed*/ struct list<Shortcut>::list_node*);
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
	{ // packed(0x4 bytes) TI: 0x1081
	protected:
		/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
		/*packed*/ struct Shortcut& operator*();
		/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
		/*packed*/ class list<Shortcut>::iterator& operator++();
		/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
		/*packed*/ class list<Shortcut>::iterator& operator--();
	};
	class list<Shortcut>::const_iterator : public bidirectional_iterator<Shortcut,int>
	{ // packed(0x4 bytes) TI: 0x1b8a
	protected:
		/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<Shortcut>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<Shortcut>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<Shortcut>::const_iterator&);
		const /*packed*/ struct Shortcut& operator*();
		/*packed*/ class list<Shortcut>::const_iterator operator++(int32_t);
		/*packed*/ class list<Shortcut>::const_iterator& operator++();
		/*packed*/ class list<Shortcut>::const_iterator operator--(int32_t);
		/*packed*/ class list<Shortcut>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int>;
public:
	void list<Shortcut>(const /*packed*/ class list<Shortcut>&);
	void list<Shortcut>(const /*packed*/ struct Shortcut*, const /*packed*/ struct Shortcut*);
	void list<Shortcut>(uint32_t, const /*packed*/ struct Shortcut&);
	void list<Shortcut>();
	/*packed*/ class list<Shortcut>::const_iterator begin();
	/*packed*/ class list<Shortcut>::iterator begin();
	/*packed*/ class list<Shortcut>::const_iterator end();
	/*packed*/ class list<Shortcut>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::const_iterator,Shortcut,Shortcut const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<Shortcut>::iterator,Shortcut,Shortcut &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ struct Shortcut& front();
	/*packed*/ struct Shortcut& front();
	const /*packed*/ struct Shortcut& back();
	/*packed*/ struct Shortcut& back();
	void swap(/*packed*/ class list<Shortcut>&);
	void insert(/*packed*/ class list<Shortcut>::iterator, uint32_t, const /*packed*/ struct Shortcut&);
	void insert(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::const_iterator, /*packed*/ class list<Shortcut>::const_iterator);
	void insert(/*packed*/ class list<Shortcut>::iterator, const /*packed*/ struct Shortcut*, const /*packed*/ struct Shortcut*);
	/*packed*/ class list<Shortcut>::iterator insert(/*packed*/ class list<Shortcut>::iterator, const /*packed*/ struct Shortcut&);
	void push_front(const /*packed*/ struct Shortcut&);
	void push_back(const /*packed*/ struct Shortcut&);
	void erase(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
	void erase(/*packed*/ class list<Shortcut>::iterator);
	void pop_front();
	void pop_back();
	void ~list<Shortcut>();
	/*packed*/ class list<Shortcut>& operator=(const /*packed*/ class list<Shortcut>&);
protected:
	void transfer(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
public:
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&, /*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>::iterator);
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&, /*packed*/ class list<Shortcut>::iterator);
	void splice(/*packed*/ class list<Shortcut>::iterator, /*packed*/ class list<Shortcut>&);
	void remove(const /*packed*/ struct Shortcut&);
	void unique();
	void merge(/*packed*/ class list<Shortcut>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class MIFF;
// VTABLE: COPTER_D 0x00591950
class MIFF : public PFile
{ // packed(0x148 bytes) TI: 0x428e
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF() /* override */;
	virtual long OpenForReading(); // vtable+0x4
	virtual long OpenForWriting(long, long, long); // vtable+0x8
	virtual long OpenForAppending(); // vtable+0xc
	virtual long Close(); // vtable+0x10
	virtual long GetPresentRecordType(); // vtable+0x14
	virtual long GetPresentRecordSize(); // vtable+0x18
	virtual long GetPresentRecordDataSize(); // vtable+0x1c
	virtual long GetPresentRecordIndex(); // vtable+0x20
	virtual long VerifyFile(); // vtable+0x24
	virtual long ReadMIFFHeader(); // vtable+0x28
	virtual long ReadRecordHeader(); // vtable+0x2c
	virtual long ReadFileCreator(); // vtable+0x30
	virtual long ReadFileType(); // vtable+0x34
	virtual long ReadFileVersion(); // vtable+0x38
	virtual long ReadPresentRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x3c
	virtual long ReadPresentRecordData(char *, long); // vtable+0x40
	virtual long GoToFirstRecord(); // vtable+0x44
	virtual long GoToNextRecord(); // vtable+0x48
	virtual long GoToPreviousRecord(); // vtable+0x4c
	virtual long GoToFirstRecordOfGivenType(long); // vtable+0x50
	virtual long GoToNextRecordOfGivenType(long); // vtable+0x54
	virtual long GoToNthRecord(long); // vtable+0x58
	virtual long CountRecords(); // vtable+0x5c
	virtual long WriteMIFFRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x60
	virtual long WriteDataRecord(long, char *, long); // vtable+0x64
	virtual long WriteFileHeader(long, long, long); // vtable+0x68
	virtual long WriteEnd(); // vtable+0x6c
	/*+0x110*/ long lPresentRecordStart;
	/*+0x114*/ long lPresentRecordType;
	/*+0x118*/ long lPresentRecordLength;
	/*+0x11c*/ long lPresentRecordIndex;
	/*+0x120*/ long lReadWriteMode;
	/*+0x124*/ long bFileEndWritten;
	/*+0x128*/ long bFileAppearsCorrupt;
	/*+0x12c*/ /*packed*/ struct MIFFHeader myMIFFHeader; // 0x1c bytes
};

// Type: /*packed*/ struct Shortcut;
struct Shortcut{ // packed(0x18 bytes) TI: 0x1083
	/*+0x0*/   long lDeviceID;
	/*+0x4*/   long lCommand;
	/*+0x8*/   long lKey;
	/*+0xc*/   long lModifiers;
	/*+0x10*/  long lPush;
	/*+0x14*/  long lIgnoreModifiers;
};

// Type: char;

// Type: /*packed*/ struct Shortcut (forward reference);
struct Shortcut{ // packed(0x18 bytes) TI: 0x1083
	/*+0x0*/   long lDeviceID;
	/*+0x4*/   long lCommand;
	/*+0x8*/   long lKey;
	/*+0xc*/   long lModifiers;
	/*+0x10*/  long lPush;
	/*+0x14*/  long lIgnoreModifiers;
};

// Type: long *;

// Type: /*unpacked*/ class CGameApp (forward reference);
// CGameApp Class implementation not found

// Type: uint32_t;

// Type: /*packed*/ struct list<Shortcut>::list_node (forward reference);
struct list<Shortcut>::list_node{ // packed(0x20 bytes) TI: 0x1b8e
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ struct Shortcut data; // 0x18 bytes
};

// Type: /*packed*/ class list<Shortcut>::iterator (forward reference);
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{ // packed(0x4 bytes) TI: 0x1081
protected:
	/*+0x0*/   /*packed*/ struct list<Shortcut>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<Shortcut>::iterator&);
	/*packed*/ struct Shortcut& operator*();
	/*packed*/ class list<Shortcut>::iterator operator++(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator++();
	/*packed*/ class list<Shortcut>::iterator operator--(int32_t);
	/*packed*/ class list<Shortcut>::iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<Shortcut,int>;
struct bidirectional_iterator<Shortcut,int>{ // packed(0x1 bytes) TI: 0x1ee7
};

// Type: /*packed*/ class PFile;
// VTABLE: COPTER_D 0x00590468
class PFile{ // packed(0x110 bytes) TI: 0x453c
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const /*packed*/ class PFile&);
	void PFile(int32_t);
	void PFile();
	virtual void ~PFile(); // vtable+0x0
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	/*+0x4*/   char szFilePath[260]; // 0x104 bytes
	/*+0x108*/ int32_t Handle;
private:
	/*+0x10c*/ int32_t ShouldClose;
};

// Type: /*packed*/ class CDefaultCommander;
// VTABLE: COPTER_D 0x005912d0
class CDefaultCommander : public ICommander
{ // packed(0x8 bytes) TI: 0x20ed
public:
	void CDefaultCommander();
	virtual void ~CDefaultCommander() /* override */;
	virtual unsigned long Idle() /* override */;
	virtual unsigned long OnCharacter(char, int32_t) /* override */;
	virtual unsigned long OnMouseDown(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseUp(int32_t, int32_t) /* override */;
	virtual unsigned long OnMouseMove(int32_t, int32_t) /* override */;
	virtual unsigned long OnWindowActivate() /* override */;
	virtual unsigned long OnWindowDeactivate() /* override */;
};

// Type: /*unpacked*/ class ICommander (forward reference);
// ICommander Class implementation not found



// Contribution: 1:0008a2b0-0008d894 Module: 26, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048b2b0
void CommandSystem::CommandSystem() {

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC8;
	__asm        call   CharList::CharList;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDC], 0;
	__asm        inc    list<Shortcut>::number_of_lists;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T59;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T230;
_T59:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        cmp    list<Shortcut>::last, eax;
	__asm        jne    _T21b;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tb8;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tae;
_Tae:
	exit(0x1);
_Tb8:
	__asm        jmp    _Tbd;
_Tbd:
	__asm        jmp    _Tc2;
_Tc2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x80;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tfd;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T103;
_Tfd:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T103:
	__asm        jmp    _T108;
_T108:
	__asm        jmp    _T10d;
_T10d:
	__asm        jmp    _T112;
_T112:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T16d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T163;
_T163:
	exit(0x1);
_T16d:
	__asm        jmp    _T172;
_T172:
	__asm        jmp    _T177;
_T177:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x80;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d4;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1da;
_T1d4:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1da:
	__asm        jmp    _T1df;
_T1df:
	__asm        jmp    _T1e4;
_T1e4:
	__asm        jmp    _T1e9;
_T1e9:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    _T201;
_T201:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T230;
_T21b:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T230:
	__asm        jmp    _T235;
_T235:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T26f;
// LINE 32:
_T26f:
	this->CommandSystem::Initialize();
// LINE 33:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048b534
void CommandSystem::Initialize() {
	/*bp-0x4*/   int32_t i;
	/*bp-0x8*/   int32_t j;

// LINE 46:
	i = 0x0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 0x64;
	__asm        jge    _T3f;
// LINE 47:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
// LINE 48:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2+1], 0;
// LINE 49:
	__asm        jmp    _T18;
// LINE 50:
_T3f:
	i = 0x0;
	__asm        jmp    _T4e;
_T4b:
	i++;
_T4e:
	__asm        cmp    i, 0x800;
	__asm        jge    _T6e;
// LINE 51:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0xE0], 0;
	__asm        jmp    _T4b;
// LINE 54:
_T6e:
	i = 0x0;
	__asm        jmp    _T7d;
_T7a:
	i++;
_T7d:
	__asm        cmp    i, 4;
	__asm        jge    _Tc4;
// LINE 55:
	j = 0x0;
	__asm        jmp    _T96;
_T93:
	j++;
_T96:
	__asm        cmp    j, 0xE;
	__asm        jge    _Tbf;
// LINE 56:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x8E0], 0;
	__asm        jmp    _T93;
// LINE 57:
_Tbf:
	__asm        jmp    _T7a;
// LINE 58:
_Tc4:
	i = 0x0;
	__asm        jmp    _Td3;
_Td0:
	i++;
_Td3:
	__asm        cmp    i, 0x64;
	__asm        jge    _Tf3;
// LINE 59:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x918], 0;
	__asm        jmp    _Td0;
// LINE 61:
_Tf3:
	return;
}

// FUNCTION: COPTER_D 0x0048b631
void CommandSystem::ClearAllCommands() {
	/*bp-0x4*/   int32_t i;

// LINE 74:
	i = 0x0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 0x64;
	__asm        jge    _T39;
// LINE 75:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
	__asm        jmp    _T34;
_T34:
	__asm        jmp    _T18;
// LINE 76:
_T39:
	(this + 0xc8)->CharList::DeleteAllItems();
// LINE 77:
	return;
}

// FUNCTION: COPTER_D 0x0048b682
void CommandSystem::ClearAllCommandsDevice(long lDevice) {
	/*bp-0x4*/   int32_t i;

// LINE 89:
	i = 0x0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 0x64;
	__asm        jge    _T51;
// LINE 90:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lDevice);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        and    edx, eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T4c;
_T4c:
	__asm        jmp    _T18;
// LINE 91:
_T51:
	(this + 0xc8)->CharList::DeleteAllItems();
// LINE 92:
	return;
}

// FUNCTION: COPTER_D 0x0048b6ed
void CommandSystem::SetUpCommandArraysFromShortcuts() {
	/*bp-0x4*/   long lCurrentIgnoreModifiers;
	/*bp-0x8*/   unsigned char chCurrentChar;
	/*bp-0xc*/   /*packed*/ class list<Shortcut>::iterator tempShortcutListIterator;
	/*bp-0x10*/  int32_t nTempIndex;
	/*bp-0x14*/  unsigned char chCurrentModifiers;
	/*bp-0x18*/  unsigned char chCurrentCommand;

// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    _T25;
_T25:
	__asm        jmp    _T2a;
// LINE 133:
_T2a:
	this->CommandSystem::Initialize();
// LINE 134:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CommandSystem::ClearAllCommandsDevice;
// LINE 137:
_T3c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    _T6e;

	__asm        jmp    _T82;

	__asm        jmp    _T6e;
_T6e:
	__asm        jmp    _T7d;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T82;
_T7d:
	__asm        jmp    _T87;
_T82:
	__asm        jmp    _T2b2;
_T87:
	__asm        jmp    _T96;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2b2;
// LINE 138:
_T96:
	__asm        jmp    _T9b;
_T9b:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T225;
// LINE 139:
	__asm        jmp    _Tad;
_Tad:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x10];
	__asm        mov    chCurrentChar, al;
// LINE 140:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0xC];
	__asm        mov    chCurrentCommand, al;
// LINE 141:
	__asm        jmp    _Tc9;
_Tc9:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x14];
	__asm        mov    chCurrentModifiers, al;
// LINE 143:
	__asm        xor    eax, eax;
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [ecx+eax*2], 0;
// LINE 144:
	__asm        jmp    _Te3;
_Te3:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*2+1], al;
// LINE 146:
	__asm        jmp    _Tfa;
_Tfa:
	lCurrentIgnoreModifiers = tempShortcutListIterator.node->data.lIgnoreModifiers;
// LINE 147:
	__asm        cmp    lCurrentIgnoreModifiers, 0;
	__asm        je     _T1f7;
// LINE 150:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0xE0], al;
// LINE 151:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 1;
	__asm        je     _T13b;
// LINE 152:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x1E0], al;
// LINE 153:
_T13b:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 2;
	__asm        je     _T157;
// LINE 154:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x2E0], al;
// LINE 155:
_T157:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    _T176;
// LINE 156:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x3E0], al;
// LINE 157:
_T176:
	__asm        test   reinterpret_cast<uint8_t>(lCurrentIgnoreModifiers), 4;
	__asm        je     _T192;
// LINE 158:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x4E0], al;
// LINE 159:
_T192:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 5;
	__asm        cmp    al, 5;
	__asm        jne    _T1b1;
// LINE 160:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x5E0], al;
// LINE 161:
_T1b1:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 6;
	__asm        cmp    al, 6;
	__asm        jne    _T1d0;
// LINE 162:
	__asm        mov    al, chCurrentCommand;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x6E0], al;
// LINE 163:
_T1d0:
	__asm        mov    eax, lCurrentIgnoreModifiers;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T1f2;
// LINE 164:
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, 0;
	__asm        mov    cl, chCurrentChar;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x7E0], al;
// LINE 166:
_T1f2:
	__asm        jmp    _T220;
// LINE 167:
_T1f7:
	__asm        movsx  eax, chCurrentModifiers;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chCurrentChar;
	__asm        add    eax, ecx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    _T210;
// LINE 168:
_T210:
	__asm        mov    al, chCurrentCommand;
	__asm        mov    ecx, nTempIndex;
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0xE0], al;
// LINE 171:
_T220:
	__asm        jmp    _T28f;
// LINE 172:
_T225:
	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jl     _T28f;

	__asm        jmp    _T23c;
_T23c:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        cmp    dword ptr [eax+8], 4;
	__asm        jg     _T28f;
// LINE 177:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T257;
_T257:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T265;
_T265:
	__asm        jmp    _T26a;
_T26a:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    al, [eax+0xC];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        dec    ecx;
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 3;
	__asm        sub    ecx, edx;
	__asm        add    ecx, ecx;
	__asm        mov    edx, [ebp-0x28];
	__asm        add    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    [ecx+edx+0x8E0], al;
// LINE 180:
_T28f:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    _T2a2;
_T2a2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T2ad;
// LINE 181:
_T2ad:
	__asm        jmp    _T3c;
// LINE 182:
_T2b2:
	return;
}

// FUNCTION: COPTER_D 0x0048b9a9
void CommandSystem::PollJoysticksForCommands() {
	/*bp-0x4*/   int32_t nCommand;
	/*bp-0x8*/   int32_t iEnd;
	/*bp-0xc*/   int32_t i;
	/*bp-0x10*/  int32_t j;
	/*bp-0x14*/  long lValue;

// LINE 199:
	iEnd = gJoystickManager.nJoystickCount;
	__asm        jmp    _T19;
// LINE 200:
_T19:
	__asm        cmp    iEnd, 4;
	__asm        jle    _T2a;
// LINE 201:
	iEnd = 0x4;
// LINE 205:
_T2a:
	i = 0x0;
	__asm        jmp    _T39;
_T36:
	i++;
_T39:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T91;
// LINE 206:
	j = 0x0;
	__asm        jmp    _T54;
_T51:
	j++;
_T54:
	__asm        cmp    j, 0xE;
	__asm        jge    _T8c;
// LINE 207:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+edx*4+0x918], 0;
	__asm        jmp    _T51;
// LINE 208:
_T8c:
	__asm        jmp    _T36;
// LINE 211:
_T91:
	i = 0x0;
	__asm        jmp    _Ta0;
_T9d:
	i++;
_Ta0:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T1d5;
// LINE 212:
	j = 0x0;
	__asm        jmp    _Tbb;
_Tb8:
	j++;
_Tbb:
	__asm        cmp    j, 5;
	__asm        jg     _T14f;
// LINE 213:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    nCommand, edx;
// LINE 214:
	__asm        cmp    nCommand, 0;
	__asm        je     _T14a;
// LINE 215:
	__asm        push   1;
	__asm        mov    eax, j;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::GetPositionQuantitative;
	__asm        mov    lValue, eax;
// LINE 216:
	__asm        cmp    lValue, 0;
	__asm        je     _T14a;

	__asm        mov    eax, nCommand;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x918];
	__asm        push   eax;
	__asm        call   abs;
	__asm        add    esp, 4;
	__asm        mov    ebx, eax;
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        call   abs;
	__asm        add    esp, 4;
	__asm        cmp    ebx, eax;
	__asm        jge    _T14a;
// LINE 217:
	__asm        mov    eax, lValue;
	__asm        mov    ecx, nCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x918], eax;
// LINE 219:
_T14a:
	__asm        jmp    _Tb8;
// LINE 220:
_T14f:
	j = 0x6;
	__asm        jmp    _T15e;
_T15b:
	j++;
_T15e:
	__asm        cmp    j, 0xD;
	__asm        jg     _T1d0;
// LINE 221:
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, j;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x8E0];
	__asm        mov    nCommand, edx;
// LINE 222:
	__asm        cmp    nCommand, 0;
	__asm        je     _T1cb;
// LINE 223:
	__asm        push   1;
	__asm        mov    eax, j;
	__asm        sub    eax, 6;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::GetButtonState;
	__asm        mov    lValue, eax;
// LINE 224:
	__asm        cmp    lValue, 0;
	__asm        je     _T1cb;
// LINE 225:
	__asm        mov    eax, gJoystickManager.lNormalizedMaximum;
	__asm        mov    ecx, nCommand;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x918], eax;
	__asm        jmp    _T1cb;
// LINE 227:
_T1cb:
	__asm        jmp    _T15b;
// LINE 228:
_T1d0:
	__asm        jmp    _T9d;
// LINE 233:
_T1d5:
	return;
}

// FUNCTION: COPTER_D 0x0048bb88
void CGameCommander::CGameCommander() {

	this->CDefaultCommander::CDefaultCommander();
	this-><CGameCommander+0x00> = 0x590ff8;
// LINE 249:
	this->myGameApp = 0x0;
// LINE 252:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048bbbc
void CGameCommander::~CGameCommander() {

	this-><CGameCommander+0x00> = 0x590ff8;
// LINE 256:
	return;

	this->CDefaultCommander::~CDefaultCommander();
}

// FUNCTION: COPTER_D 0x0048bbe3
unsigned long CGameCommander::Idle() {
// LINE 264:
	return 0x0;
// LINE 265:
}

// FUNCTION: COPTER_D 0x0048bbfb
unsigned long CGameCommander::OnLMouseDown(int32_t x, int32_t y) {
// LINE 274:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xAC];
// LINE 275:
	return 0x0;
// LINE 276:
}

// FUNCTION: COPTER_D 0x0048bc33
unsigned long CGameCommander::OnLMouseUp(int32_t x, int32_t y) {
// LINE 284:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB0];
// LINE 285:
	return 0x0;
// LINE 286:
}

// FUNCTION: COPTER_D 0x0048bc6b
unsigned long CGameCommander::OnRMouseDown(int32_t x, int32_t y) {
// LINE 293:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xAC];
// LINE 294:
	return 0x0;
// LINE 295:
}

// FUNCTION: COPTER_D 0x0048bca3
unsigned long CGameCommander::OnRMouseUp(int32_t x, int32_t y) {
// LINE 303:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB0];
// LINE 304:
	return 0x0;
// LINE 305:
}

// FUNCTION: COPTER_D 0x0048bcdb
unsigned long CGameCommander::OnMouseMove(int32_t x, int32_t y) {
// LINE 313:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xB4];
// LINE 314:
	return 0x0;
// LINE 315:
}

// FUNCTION: COPTER_D 0x0048bd11
unsigned long CGameCommander::OnWindowActivate() {

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 323:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x42C4], 1;
	__asm        jmp    _T27;
// LINE 325:
_T27:
	return 0x0;
// LINE 326:
}

// FUNCTION: COPTER_D 0x0048bd44
unsigned long CGameCommander::OnWindowDeactivate() {

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 333:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x42C4], 0;
	__asm        jmp    _T27;
// LINE 335:
_T27:
	return 0x0;
// LINE 336:
}

// FUNCTION: COPTER_D 0x0048bd77
void CGameCommander::ProcessSetFocus() {
// LINE 354:
	0x5c34f0->Keyboard::ClearSettings();
// LINE 355:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x98];
// LINE 356:
	return;
}

// FUNCTION: COPTER_D 0x0048bdab
unsigned long CGameCommander::OnCharacter(long lCharacter) {
// LINE 364:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA8];
// LINE 365:
	return 0x0;
// LINE 366:
}

// FUNCTION: COPTER_D 0x0048bddd
void CGameCommander::ProcessKeyDown(long lKey) {
// LINE 374:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::ProcessKeyDown;
// LINE 375:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::GetCurrentModifierState;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA0];
// LINE 376:
	return;
}

// FUNCTION: COPTER_D 0x0048be26
void CGameCommander::ProcessKeyUp(long lKey) {
// LINE 386:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::ProcessKeyUp;
// LINE 387:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::GetCurrentModifierState;
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0xA4];
// LINE 388:
	return;
}

// FUNCTION: COPTER_D 0x0048be6f
void CGameCommander::ProcessKeyDown(long lKey, /*packed*/ struct CommandSystem& commandSystem, int32_t& nCommand, int32_t& bPushCommand) {
	/*bp-0x4*/   unsigned char chTempModifierState;
	/*bp-0x8*/   int32_t nTempIndex;
	/*bp-0xc*/   int32_t nTempCommand;

// LINE 408:
	nCommand. = 0x0;
// LINE 409:
	bPushCommand. = 0x0;
// LINE 421:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::CharIsModifier;
	__asm        test   eax, eax;
	__asm        je     _T13b;
// LINE 426:
// Block start:
	/*bp-0x10*/  /*packed*/ class CharData *currentCharData;
	currentCharData = commandSystem.keyboardCommandList.firstCharData;
// LINE 428:
_T40:
	__asm        cmp    currentCharData, 0;
	__asm        je     _T7e;

	__asm        mov    eax, currentCharData;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x14], ecx;
// LINE 429:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T70;
// LINE 430:
_T70:
	currentCharData = currentCharData->nextCharData;
// LINE 431:
	__asm        jmp    _T40;
// LINE 432:
_T7e:
	(commandSystem + 0xc8)->CharList::DeleteAllItems();
// LINE 434:
	currentCharData = gKeyboard.myCharDownList.firstCharData;
// LINE 435:
_T94:
	__asm        cmp    currentCharData, 0;
	__asm        je     _T136;
// LINE 436:
	chTempModifierState = 0x5c34f0->Keyboard::GetCurrentModifierState();
// LINE 438:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        mov    ecx, currentCharData;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        add    eax, edx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    _Tc6;
// LINE 439:
_Tc6:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 440:
	__asm        cmp    nTempCommand, 0;
	__asm        je     _T128;

	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    _T128;
// LINE 441:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T116;
// LINE 442:
_T116:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   CharList::AddItem;
// LINE 444:
_T128:
	currentCharData = currentCharData->nextCharData;
// LINE 445:
	__asm        jmp    _T94;
// LINE 447:
// Block end:
_T136:
	__asm        jmp    _T1e9;
// LINE 448:
_T13b:
	chTempModifierState = 0x5c34f0->Keyboard::GetCurrentModifierState();
// LINE 449:
	nTempIndex = (((reinterpret_cast<int16_t>(chTempModifierState) & 0x7) << 0x8) + lKey);
	__asm        jmp    _T15d;
// LINE 450:
_T15d:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 451:
	__asm        cmp    nTempCommand, 0;
	__asm        je     _T1e9;
// LINE 452:
	nCommand. = nTempCommand;
// LINE 453:
	__asm        jmp    _T186;
_T186:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2+1];
	__asm        test   edx, edx;
	__asm        je     _T1a3;
// LINE 456:
	bPushCommand. = 0x1;
// LINE 458:
_T1a3:
	__asm        jmp    _T1a8;
_T1a8:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    _T1e9;
// LINE 461:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T1d7;
// LINE 462:
_T1d7:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   CharList::AddItem;
// LINE 466:
_T1e9:
	return;
}

// FUNCTION: COPTER_D 0x0048c064
void CGameCommander::ProcessKeyUp(long lKey, /*packed*/ struct CommandSystem& commandSystem) {
	/*bp-0x4*/   unsigned char chTempModifierState;
	/*bp-0x8*/   int32_t nTempIndex;
	/*bp-0xc*/   int32_t nTempCommand;

// LINE 483:
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::CharIsModifier;
	__asm        test   eax, eax;
	__asm        je     _T129;
// LINE 488:
// Block start:
	/*bp-0x10*/  /*packed*/ class CharData *currentCharData;
	currentCharData = commandSystem.keyboardCommandList.firstCharData;
// LINE 490:
_T2e:
	__asm        cmp    currentCharData, 0;
	__asm        je     _T6c;

	__asm        mov    eax, currentCharData;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x14], ecx;
// LINE 491:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T5e;
// LINE 492:
_T5e:
	currentCharData = currentCharData->nextCharData;
// LINE 493:
	__asm        jmp    _T2e;
// LINE 494:
_T6c:
	(commandSystem + 0xc8)->CharList::DeleteAllItems();
// LINE 496:
	currentCharData = gKeyboard.myCharDownList.firstCharData;
// LINE 497:
_T82:
	__asm        cmp    currentCharData, 0;
	__asm        je     _T124;
// LINE 498:
	chTempModifierState = 0x5c34f0->Keyboard::GetCurrentModifierState();
// LINE 500:
	__asm        movsx  eax, chTempModifierState;
	__asm        and    eax, 7;
	__asm        shl    eax, 8;
	__asm        mov    ecx, currentCharData;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        add    eax, edx;
	__asm        mov    nTempIndex, eax;
	__asm        jmp    _Tb4;
// LINE 501:
_Tb4:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 504:
	__asm        cmp    nTempCommand, 0;
	__asm        je     _T116;

	__asm        jmp    _Td5;
_Td5:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        jne    _T116;
// LINE 505:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        or     dl, 1;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T104;
// LINE 506:
_T104:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   CharList::AddItem;
// LINE 508:
_T116:
	currentCharData = currentCharData->nextCharData;
// LINE 509:
	__asm        jmp    _T82;
// LINE 511:
// Block end:
_T124:
	__asm        jmp    _T1a3;
// LINE 512:
_T129:
	chTempModifierState = 0x5c34f0->Keyboard::GetCurrentModifierState();
// LINE 513:
	nTempIndex = (((reinterpret_cast<int16_t>(chTempModifierState) & 0x7) << 0x8) + lKey);
	__asm        jmp    _T14b;
// LINE 514:
_T14b:
	__asm        mov    eax, nTempIndex;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0xE0];
	__asm        mov    nTempCommand, edx;
// LINE 515:
	__asm        jmp    _T162;
_T162:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        test   edx, edx;
	__asm        je     _T1a3;
// LINE 516:
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2];
	__asm        and    dl, 0xFE;
	__asm        mov    eax, nTempCommand;
	__asm        mov    ecx, commandSystem;
	__asm        mov    [ecx+eax*2], dl;
	__asm        jmp    _T191;
// LINE 517:
_T191:
	__asm        mov    eax, nTempCommand;
	__asm        push   eax;
	__asm        mov    ecx, commandSystem;
	__asm        add    ecx, 0xC8;
	__asm        call   CharList::DeleteItem;
// LINE 520:
_T1a3:
	return;
}

// FUNCTION: COPTER_D 0x0048c213
void CGameCommander::ProcessSystemCloseRequest() {
// LINE 528:
	this->myGameApp->CGameApp::ProcessSystemCloseRequest();
// LINE 529:
	return;
}

// FUNCTION: COPTER_D 0x0048c234
int32_t ReadShortcutPrefsFile(/*packed*/ class list<Shortcut>& shortcutList) {
	/*bp-0x104*/ char szFilePath[260]; // 0x104 bytes
	/*bp-0x11c*/ /*packed*/ struct Shortcut tempShortcut; // 0x18 bytes
	/*bp-0x264*/ /*packed*/ class MIFF myMIFF; // 0x148 bytes

// LINE 553:
	__asm        mov    al, ds:[0x599D94];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 556:
	GetPathForFile(szFilePath[0], SZ_SHORTCUT_PREFS_FILE_NAME, 0x0, 0x9);
// LINE 557:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 558:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForReading;
	__asm        test   eax, eax;
	__asm        je     _T498;
// LINE 561:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::VerifyFile;
	__asm        test   eax, eax;
	__asm        je     _T46d;

	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::ReadFileCreator;
	__asm        cmp    eax, 0x53435554;
	__asm        jne    _T46d;

	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::ReadFileType;
	__asm        cmp    eax, 0x53435554;
	__asm        jne    _T46d;
// LINE 563:
	myMIFF<MIFF+0x00>->MIFF::GoToFirstRecord();
// LINE 565:
_Tb1:
	__asm        push   0x18;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::ReadPresentRecordData;
// LINE 566:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        call   ValidateConfigurableShortcut;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T45a;
// LINE 567:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x270], eax;
	__asm        jmp    _Tf8;
_Tf8:
	__asm        jmp    _Tfd;
_Tfd:
	__asm        mov    eax, [ebp-0x270];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x284], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T13e;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    _T3a5;
_T13e:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        cmp    list<Shortcut>::last, eax;
	__asm        jne    _T387;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2BC], eax;
	__asm        cmp    dword ptr [ebp-0x2BC], 0;
	__asm        jne    _T1a9;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C0], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T19f;
_T19f:
	exit(0x1);
_T1a9:
	__asm        jmp    _T1ae;
_T1ae:
	__asm        jmp    _T1b3;
_T1b3:
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    dword ptr [ebp-0x294], 0x80;
	__asm        lea    eax, [ebp-0x294];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    dword ptr [ebp-0x298], 1;
	__asm        lea    eax, [ebp-0x298];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T212;

	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        jmp    _T21e;
_T212:
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A4], eax;
_T21e:
	__asm        jmp    _T223;
_T223:
	__asm        jmp    _T228;
_T228:
	__asm        jmp    _T22d;
_T22d:
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        shl    eax, 5;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C4], eax;
	__asm        cmp    dword ptr [ebp-0x2C4], 0;
	__asm        jne    _T29d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T293;
_T293:
	exit(0x1);
_T29d:
	__asm        jmp    _T2a2;
_T2a2:
	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    eax, [ebp-0x2C4];
	__asm        mov    ecx, [ebp-0x290];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0x290];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x2A8], 0x80;
	__asm        lea    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    dword ptr [ebp-0x2AC], 1;
	__asm        lea    eax, [ebp-0x2AC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    ecx, [ebp-0x2B0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T32e;

	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        jmp    _T33a;
_T32e:
	__asm        mov    eax, [ebp-0x2B0];
	__asm        mov    [ebp-0x2B8], eax;
_T33a:
	__asm        jmp    _T33f;
_T33f:
	__asm        jmp    _T344;
_T344:
	__asm        jmp    _T349;
_T349:
	__asm        mov    eax, [ebp-0x2B8];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    _T364;
_T364:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x288], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x288];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    _T3a5;
_T387:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x28C], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    [ebp-0x2D0], eax;
_T3a5:
	__asm        jmp    _T3aa;
_T3aa:
	__asm        mov    eax, [ebp-0x2D0];
	__asm        mov    [ebp-0x27C], eax;
	__asm        jmp    _T3bb;
_T3bb:
	__asm        mov    eax, [ebp-0x27C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x280], eax;
	__asm        jmp    _T3cf;
_T3cf:
	__asm        cmp    dword ptr [ebp-0x280], 0;
	__asm        je     _T3f4;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x280];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T3f4;
_T3f4:
	__asm        jmp    _T3f9;
_T3f9:
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    ecx, [ebp-0x2D4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    ecx, [ebp-0x2D4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    _T450;
_T450:
	__asm        jmp    _T455;
_T455:
	__asm        jmp    _T45a;
// LINE 573:
_T45a:
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::GoToNextRecord;
	__asm        test   eax, eax;
	__asm        jne    _Tb1;
// LINE 575:
_T46d:
	myMIFF<MIFF+0x00>->MIFF::Close();
// LINE 576:
	__asm        mov    dword ptr [ebp-0x268], 1;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x268];
	__asm        jmp    __RETURN;
// LINE 578:
_T498:
	__asm        mov    dword ptr [ebp-0x26C], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x26C];
	__asm        jmp    __RETURN;
// LINE 579:
__RETURN:
}

// FUNCTION: COPTER_D 0x0048c6f1
int32_t WriteShortcutPrefsFile(/*packed*/ class list<Shortcut>& shortcutList) {
	/*bp-0x104*/ char szFilePath[260]; // 0x104 bytes
	/*bp-0x11c*/ /*packed*/ struct Shortcut tempShortcut; // 0x18 bytes
	/*bp-0x264*/ /*packed*/ class MIFF myMIFF; // 0x148 bytes
	/*bp-0x268*/ int32_t nReturnValue;

// LINE 587:
	__asm        mov    al, ds:[0x599D98];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 589:
	nReturnValue = 0x0;
// LINE 591:
	GetPathForFile(szFilePath[0], SZ_SHORTCUT_PREFS_FILE_NAME, 0x0, 0x9);
// LINE 592:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 593:
	__asm        push   1;
	__asm        push   0x53435554;
	__asm        push   0x53435554;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForWriting;
	__asm        test   eax, eax;
	__asm        je     _T1a7;
// LINE 594:
// Block start:
	/*bp-0x26c*/ /*packed*/ class list<Shortcut>::iterator tempShortcutListIterator;
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28C], eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    _T9b;
_T9b:
	__asm        jmp    _Ta0;
// LINE 595:
_Ta0:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x270], eax;
	__asm        jmp    _Tbc;
_Tbc:
	__asm        jmp    _Tc1;
_Tc1:
	__asm        mov    eax, [ebp-0x270];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    _Tdd;

	__asm        jmp    _Tf4;

	__asm        jmp    _Tdd;
_Tdd:
	__asm        jmp    _Tef;

	__asm        cmp    dword ptr [ebp-0x284], 0;
	__asm        jne    _Tf4;
_Tef:
	__asm        jmp    _Tf9;
_Tf4:
	__asm        jmp    _T171;
_Tf9:
	__asm        jmp    _T10b;

	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     _T171;
// LINE 596:
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        mov    esi, tempShortcutListIterator.node;
	__asm        lea    edi, tempShortcut.lDeviceID;
	__asm        add    esi, 8;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 597:
	__asm        push   0x18;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::WriteDataRecord;
// LINE 598:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    _T15b;
_T15b:
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    _T16c;
// LINE 599:
_T16c:
	__asm        jmp    _Ta0;
// LINE 600:
_T171:
	myMIFF<MIFF+0x00>->MIFF::WriteEnd();
// LINE 601:
	myMIFF<MIFF+0x00>->MIFF::Close();
// LINE 602:
	__asm        mov    dword ptr [ebp-0x278], 1;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x278];
	__asm        jmp    __RETURN;
// LINE 604:
// Block end:
_T1a7:
	__asm        mov    dword ptr [ebp-0x27C], 0;
	__asm        lea    ecx, myMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x27C];
	__asm        jmp    __RETURN;
// LINE 605:
__RETURN:
}

// FUNCTION: COPTER_D 0x0048c8bd
void MakeDefaultConfigurableShortcuts(/*packed*/ class list<Shortcut>& shortcutList) {
	/*bp-0x18*/  /*packed*/ struct Shortcut tempShortcut; // 0x18 bytes
	/*bp-0x1c*/  int32_t i;

// LINE 616:
	tempShortcut.lDeviceID = 0x0;
// LINE 618:
	tempShortcut.lCommand = 0x2;
// LINE 619:
	tempShortcut.lKey = 0x4d;
// LINE 620:
	tempShortcut.lModifiers = 0x0;
// LINE 622:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 623:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T4f;
_T4f:
	__asm        jmp    _T54;
_T54:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T6d;
// LINE 625:
_T6d:
	tempShortcut.lCommand = 0x3;
// LINE 626:
	tempShortcut.lKey = 0x45;
// LINE 627:
	tempShortcut.lModifiers = 0x0;
// LINE 629:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 630:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _Ta9;
_Ta9:
	__asm        jmp    _Tae;
_Tae:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _Tc7;
// LINE 632:
_Tc7:
	tempShortcut.lCommand = 0x1b;
// LINE 633:
	tempShortcut.lKey = 0x49;
// LINE 634:
	tempShortcut.lModifiers = 0x0;
// LINE 636:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 637:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T103;
_T103:
	__asm        jmp    _T108;
_T108:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T121;
// LINE 639:
_T121:
	tempShortcut.lCommand = 0x1c;
// LINE 640:
	tempShortcut.lKey = 0x4b;
// LINE 641:
	tempShortcut.lModifiers = 0x0;
// LINE 643:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 644:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T15d;
_T15d:
	__asm        jmp    _T162;
_T162:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T17b;
// LINE 646:
_T17b:
	tempShortcut.lCommand = 0x1d;
// LINE 647:
	tempShortcut.lKey = 0x4a;
// LINE 648:
	tempShortcut.lModifiers = 0x0;
// LINE 650:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 651:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T1b7;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T1d5;
// LINE 653:
_T1d5:
	tempShortcut.lCommand = 0x1e;
// LINE 654:
	tempShortcut.lKey = 0x4c;
// LINE 655:
	tempShortcut.lModifiers = 0x0;
// LINE 657:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 658:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T211;
_T211:
	__asm        jmp    _T216;
_T216:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T22f;
// LINE 660:
_T22f:
	tempShortcut.lCommand = 0x1f;
// LINE 661:
	tempShortcut.lKey = 0x4f;
// LINE 662:
	tempShortcut.lModifiers = 0x0;
// LINE 664:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 665:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T26b;
_T26b:
	__asm        jmp    _T270;
_T270:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T289;
// LINE 667:
_T289:
	tempShortcut.lCommand = 0x20;
// LINE 668:
	tempShortcut.lKey = 0x50;
// LINE 669:
	tempShortcut.lModifiers = 0x0;
// LINE 671:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 672:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2c5;
_T2c5:
	__asm        jmp    _T2ca;
_T2ca:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T2e3;
// LINE 674:
_T2e3:
	tempShortcut.lCommand = 0x4;
// LINE 675:
	tempShortcut.lKey = 0x4e;
// LINE 676:
	tempShortcut.lModifiers = 0x0;
// LINE 678:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 679:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T325;
_T325:
	__asm        jmp    _T32a;
_T32a:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T346;
// LINE 681:
_T346:
	tempShortcut.lCommand = 0x5;
// LINE 682:
	tempShortcut.lKey = 0x52;
// LINE 683:
	tempShortcut.lModifiers = 0x0;
// LINE 685:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 686:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T38b;
_T38b:
	__asm        jmp    _T390;
_T390:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T3af;
// LINE 688:
_T3af:
	tempShortcut.lCommand = 0x8;
// LINE 689:
	tempShortcut.lKey = 0x26;
// LINE 690:
	tempShortcut.lModifiers = 0x0;
// LINE 692:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 693:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T3f4;
_T3f4:
	__asm        jmp    _T3f9;
_T3f9:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T418;
// LINE 695:
_T418:
	tempShortcut.lCommand = 0x9;
// LINE 696:
	tempShortcut.lKey = 0x28;
// LINE 697:
	tempShortcut.lModifiers = 0x0;
// LINE 699:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 700:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T45d;
_T45d:
	__asm        jmp    _T462;
_T462:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T481;
// LINE 702:
_T481:
	tempShortcut.lCommand = 0x8;
// LINE 703:
	tempShortcut.lKey = 0x58;
// LINE 704:
	tempShortcut.lModifiers = 0x0;
// LINE 706:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 707:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T4c6;
_T4c6:
	__asm        jmp    _T4cb;
_T4cb:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T4ea;
// LINE 709:
_T4ea:
	tempShortcut.lCommand = 0x9;
// LINE 710:
	tempShortcut.lKey = 0x5a;
// LINE 711:
	tempShortcut.lModifiers = 0x0;
// LINE 713:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 714:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    _T52f;
_T52f:
	__asm        jmp    _T534;
_T534:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T553;
// LINE 716:
_T553:
	tempShortcut.lCommand = 0x7;
// LINE 717:
	tempShortcut.lKey = 0x27;
// LINE 718:
	tempShortcut.lModifiers = 0x0;
// LINE 720:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 721:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        jmp    _T598;
_T598:
	__asm        jmp    _T59d;
_T59d:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T5bc;
// LINE 723:
_T5bc:
	tempShortcut.lCommand = 0x6;
// LINE 724:
	tempShortcut.lKey = 0x25;
// LINE 725:
	tempShortcut.lModifiers = 0x0;
// LINE 727:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 728:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T601;
_T601:
	__asm        jmp    _T606;
_T606:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xD8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T625;
// LINE 730:
_T625:
	tempShortcut.lCommand = 0xc;
// LINE 731:
	tempShortcut.lKey = 0x6b;
// LINE 732:
	tempShortcut.lModifiers = 0x0;
// LINE 734:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 735:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    _T66a;
_T66a:
	__asm        jmp    _T66f;
_T66f:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T68e;
// LINE 737:
_T68e:
	tempShortcut.lCommand = 0xd;
// LINE 738:
	tempShortcut.lKey = 0x6d;
// LINE 739:
	tempShortcut.lModifiers = 0x0;
// LINE 741:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 742:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    _T6d3;
_T6d3:
	__asm        jmp    _T6d8;
_T6d8:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T6f7;
// LINE 744:
_T6f7:
	tempShortcut.lCommand = 0xc;
// LINE 745:
	tempShortcut.lKey = 0x51;
// LINE 746:
	tempShortcut.lModifiers = 0x0;
// LINE 748:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 749:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    _T73c;
_T73c:
	__asm        jmp    _T741;
_T741:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T760;
// LINE 751:
_T760:
	tempShortcut.lCommand = 0xd;
// LINE 752:
	tempShortcut.lKey = 0x57;
// LINE 753:
	tempShortcut.lModifiers = 0x0;
// LINE 755:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 756:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    _T7a5;
_T7a5:
	__asm        jmp    _T7aa;
_T7aa:
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    _T7c9;
_T7c9:
	__asm        mov    eax, [ebp-0x110];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x114], eax;
	__asm        jmp    _T7dd;
_T7dd:
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _T7ff;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x114];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T7ff;
_T7ff:
	__asm        jmp    _T804;
_T804:
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    _T85b;
_T85b:
	__asm        jmp    _T860;
_T860:
	__asm        jmp    _T865;
// LINE 758:
_T865:
	tempShortcut.lCommand = 0xf;
// LINE 759:
	tempShortcut.lKey = 0x43;
// LINE 760:
	tempShortcut.lModifiers = 0x0;
// LINE 762:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 763:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    _T8aa;
_T8aa:
	__asm        jmp    _T8af;
_T8af:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T8ce;
// LINE 765:
_T8ce:
	tempShortcut.lCommand = 0xe;
// LINE 766:
	tempShortcut.lKey = 0x56;
// LINE 767:
	tempShortcut.lModifiers = 0x0;
// LINE 769:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 770:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    _T913;
_T913:
	__asm        jmp    _T918;
_T918:
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    _T937;
_T937:
	__asm        mov    eax, [ebp-0x134];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x138], eax;
	__asm        jmp    _T94b;
_T94b:
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T96d;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x138];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T96d;
_T96d:
	__asm        jmp    _T972;
_T972:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x12C], eax;
	__asm        jmp    _T9c9;
_T9c9:
	__asm        jmp    _T9ce;
_T9ce:
	__asm        jmp    _T9d3;
// LINE 772:
_T9d3:
	tempShortcut.lCommand = 0x10;
// LINE 773:
	tempShortcut.lKey = 0x42;
// LINE 774:
	tempShortcut.lModifiers = 0x0;
// LINE 776:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 777:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x140], eax;
	__asm        jmp    _Ta18;
_Ta18:
	__asm        jmp    _Ta1d;
_Ta1d:
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    _Ta3c;
_Ta3c:
	__asm        mov    eax, [ebp-0x14C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x150], eax;
	__asm        jmp    _Ta50;
_Ta50:
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Ta72;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x150];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Ta72;
_Ta72:
	__asm        jmp    _Ta77;
_Ta77:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    _Tace;
_Tace:
	__asm        jmp    _Tad3;
_Tad3:
	__asm        jmp    _Tad8;
// LINE 779:
_Tad8:
	tempShortcut.lCommand = 0x11;
// LINE 780:
	tempShortcut.lKey = 0x47;
// LINE 781:
	tempShortcut.lModifiers = 0x0;
// LINE 783:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 784:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    _Tb1d;
_Tb1d:
	__asm        jmp    _Tb22;
_Tb22:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _Tb41;
// LINE 786:
_Tb41:
	tempShortcut.lCommand = 0x12;
// LINE 787:
	tempShortcut.lKey = 0x46;
// LINE 788:
	tempShortcut.lModifiers = 0x0;
// LINE 790:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 791:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x164], eax;
	__asm        jmp    _Tb86;
_Tb86:
	__asm        jmp    _Tb8b;
_Tb8b:
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    _Tbaa;
_Tbaa:
	__asm        mov    eax, [ebp-0x170];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x174], eax;
	__asm        jmp    _Tbbe;
_Tbbe:
	__asm        cmp    dword ptr [ebp-0x174], 0;
	__asm        je     _Tbe0;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x174];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tbe0;
_Tbe0:
	__asm        jmp    _Tbe5;
_Tbe5:
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x178];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x178];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    _Tc3c;
_Tc3c:
	__asm        jmp    _Tc41;
_Tc41:
	__asm        jmp    _Tc46;
// LINE 793:
_Tc46:
	tempShortcut.lCommand = 0x13;
// LINE 794:
	tempShortcut.lKey = 0x20;
// LINE 795:
	tempShortcut.lModifiers = 0x0;
// LINE 797:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 798:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    _Tc8b;
_Tc8b:
	__asm        jmp    _Tc90;
_Tc90:
	__asm        mov    eax, [ebp-0x17C];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    _Tcaf;
_Tcaf:
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18C], eax;
	__asm        jmp    _Tcc3;
_Tcc3:
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     _Tce5;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x18C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tce5;
_Tce5:
	__asm        jmp    _Tcea;
_Tcea:
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x180], eax;
	__asm        jmp    _Td41;
_Td41:
	__asm        jmp    _Td46;
_Td46:
	__asm        jmp    _Td4b;
// LINE 800:
_Td4b:
	tempShortcut.lCommand = 0x14;
// LINE 801:
	tempShortcut.lKey = 0x54;
// LINE 802:
	tempShortcut.lModifiers = 0x0;
// LINE 804:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 805:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    _Td90;
_Td90:
	__asm        jmp    _Td95;
_Td95:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x198];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _Tdb4;
// LINE 807:
_Tdb4:
	tempShortcut.lCommand = 0x15;
// LINE 808:
	tempShortcut.lKey = 0x70;
// LINE 809:
	tempShortcut.lModifiers = 0x0;
// LINE 811:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 812:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    _Tdf9;
_Tdf9:
	__asm        jmp    _Tdfe;
_Tdfe:
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    _Te1d;
_Te1d:
	__asm        mov    eax, [ebp-0x1AC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1B0], eax;
	__asm        jmp    _Te31;
_Te31:
	__asm        cmp    dword ptr [ebp-0x1B0], 0;
	__asm        je     _Te53;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1B0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Te53;
_Te53:
	__asm        jmp    _Te58;
_Te58:
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        jmp    _Teaf;
_Teaf:
	__asm        jmp    _Teb4;
_Teb4:
	__asm        jmp    _Teb9;
// LINE 814:
_Teb9:
	tempShortcut.lCommand = 0x16;
// LINE 815:
	tempShortcut.lKey = 0x71;
// LINE 816:
	tempShortcut.lModifiers = 0x0;
// LINE 818:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 819:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    _Tefe;
_Tefe:
	__asm        jmp    _Tf03;
_Tf03:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1BC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _Tf22;
// LINE 821:
_Tf22:
	tempShortcut.lCommand = 0x17;
// LINE 822:
	tempShortcut.lKey = 0x72;
// LINE 823:
	tempShortcut.lModifiers = 0x0;
// LINE 825:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 826:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    _Tf67;
_Tf67:
	__asm        jmp    _Tf6c;
_Tf6c:
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    _Tf8b;
_Tf8b:
	__asm        mov    eax, [ebp-0x1D0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1D4], eax;
	__asm        jmp    _Tf9f;
_Tf9f:
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     _Tfc1;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1D4];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tfc1;
_Tfc1:
	__asm        jmp    _Tfc6;
_Tfc6:
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    ecx, [ebp-0x1D8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    ecx, [ebp-0x1D8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1D0];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    _T101d;
_T101d:
	__asm        jmp    _T1022;
_T1022:
	__asm        jmp    _T1027;
// LINE 828:
_T1027:
	tempShortcut.lCommand = 0x18;
// LINE 829:
	tempShortcut.lKey = 0x73;
// LINE 830:
	tempShortcut.lModifiers = 0x0;
// LINE 832:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 833:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1E4], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    _T106c;
_T106c:
	__asm        jmp    _T1071;
_T1071:
	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x1F0], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        jmp    _T1090;
_T1090:
	__asm        mov    eax, [ebp-0x1E8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1EC], eax;
	__asm        jmp    _T10a4;
_T10a4:
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     _T10c6;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x1EC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T10c6;
_T10c6:
	__asm        jmp    _T10cb;
_T10cb:
	__asm        mov    eax, [ebp-0x1F0];
	__asm        mov    ecx, [ebp-0x1E8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1E8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        jmp    _T1122;
_T1122:
	__asm        jmp    _T1127;
_T1127:
	__asm        jmp    _T112c;
// LINE 835:
_T112c:
	tempShortcut.lCommand = 0x19;
// LINE 836:
	tempShortcut.lKey = 0x74;
// LINE 837:
	tempShortcut.lModifiers = 0x0;
// LINE 839:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 840:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        mov    eax, [ebp-0x1FC];
	__asm        mov    [ebp-0x1F4], eax;
	__asm        jmp    _T1171;
_T1171:
	__asm        jmp    _T1176;
_T1176:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1F8];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T1195;
// LINE 842:
_T1195:
	tempShortcut.lCommand = 0xb;
// LINE 843:
	tempShortcut.lKey = 0x41;
// LINE 844:
	tempShortcut.lModifiers = 0x0;
// LINE 846:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 847:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        mov    [ebp-0x200], eax;
	__asm        jmp    _T11da;
_T11da:
	__asm        jmp    _T11df;
_T11df:
	__asm        mov    eax, [ebp-0x200];
	__asm        mov    [ebp-0x214], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x20C], eax;
	__asm        jmp    _T11fe;
_T11fe:
	__asm        mov    eax, [ebp-0x20C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x210], eax;
	__asm        jmp    _T1212;
_T1212:
	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     _T1234;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x210];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T1234;
_T1234:
	__asm        jmp    _T1239;
_T1239:
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x20C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x204], eax;
	__asm        jmp    _T1290;
_T1290:
	__asm        jmp    _T1295;
_T1295:
	__asm        jmp    _T129a;
// LINE 849:
_T129a:
	tempShortcut.lCommand = 0xa;
// LINE 850:
	tempShortcut.lKey = 0x53;
// LINE 851:
	tempShortcut.lModifiers = 0x0;
// LINE 853:
	GetPushAndIgnoreSettingsForCommand(tempShortcut.lIgnoreModifiers, tempShortcut.lPush, tempShortcut.lCommand);
// LINE 854:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x220], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    [ebp-0x218], eax;
	__asm        jmp    _T12df;
_T12df:
	__asm        jmp    _T12e4;
_T12e4:
	__asm        mov    eax, [ebp-0x218];
	__asm        mov    [ebp-0x22C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    _T1303;
_T1303:
	__asm        mov    eax, [ebp-0x224];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x228], eax;
	__asm        jmp    _T1317;
_T1317:
	__asm        cmp    dword ptr [ebp-0x228], 0;
	__asm        je     _T1339;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x228];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T1339;
_T1339:
	__asm        jmp    _T133e;
_T133e:
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    ecx, [ebp-0x224];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x224];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x22C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x22C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    [ebp-0x21C], eax;
	__asm        jmp    _T1396;
_T1396:
	__asm        jmp    _T139b;
_T139b:
	__asm        jmp    _T13a0;
// LINE 858:
_T13a0:
	i = 0x1;
	__asm        jmp    _T13af;
_T13ac:
	i++;
_T13af:
	__asm        cmp    i, 4;
	__asm        jg     _T1aed;
// LINE 859:
	tempShortcut.lDeviceID = i;
// LINE 861:
	tempShortcut.lCommand = 0x6;
// LINE 862:
	tempShortcut.lKey = 0x0;
// LINE 863:
	tempShortcut.lModifiers = 0x0;
// LINE 864:
	tempShortcut.lPush = 0x0;
// LINE 865:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 866:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x238], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    [ebp-0x230], eax;
	__asm        jmp    _T13fe;
_T13fe:
	__asm        jmp    _T1403;
_T1403:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T1422;
// LINE 867:
_T1422:
	tempShortcut.lCommand = 0x7;
// LINE 868:
	tempShortcut.lKey = 0x0;
// LINE 869:
	tempShortcut.lModifiers = 0x0;
// LINE 870:
	tempShortcut.lPush = 0x0;
// LINE 871:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 872:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x23C], eax;
	__asm        jmp    _T1461;
_T1461:
	__asm        jmp    _T1466;
_T1466:
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x248], eax;
	__asm        jmp    _T1485;
_T1485:
	__asm        mov    eax, [ebp-0x248];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24C], eax;
	__asm        jmp    _T1499;
_T1499:
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        je     _T14bb;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x24C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T14bb;
_T14bb:
	__asm        jmp    _T14c0;
_T14c0:
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    ecx, [ebp-0x248];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x248];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x250];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x250];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    [ebp-0x240], eax;
	__asm        jmp    _T1518;
_T1518:
	__asm        jmp    _T151d;
_T151d:
	__asm        jmp    _T1522;
// LINE 874:
_T1522:
	tempShortcut.lCommand = 0x8;
// LINE 875:
	tempShortcut.lKey = 0x1;
// LINE 876:
	tempShortcut.lModifiers = 0x0;
// LINE 877:
	tempShortcut.lPush = 0x0;
// LINE 878:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 879:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x254], eax;
	__asm        jmp    _T1561;
_T1561:
	__asm        jmp    _T1566;
_T1566:
	__asm        mov    eax, [ebp-0x254];
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x260], eax;
	__asm        jmp    _T1585;
_T1585:
	__asm        mov    eax, [ebp-0x260];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x264], eax;
	__asm        jmp    _T1599;
_T1599:
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     _T15bb;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x264];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T15bb;
_T15bb:
	__asm        jmp    _T15c0;
_T15c0:
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [ebp-0x260];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x260];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x260];
	__asm        mov    [ebp-0x258], eax;
	__asm        jmp    _T1618;
_T1618:
	__asm        jmp    _T161d;
_T161d:
	__asm        jmp    _T1622;
// LINE 880:
_T1622:
	tempShortcut.lCommand = 0x9;
// LINE 881:
	tempShortcut.lKey = 0x1;
// LINE 882:
	tempShortcut.lModifiers = 0x0;
// LINE 883:
	tempShortcut.lPush = 0x0;
// LINE 884:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 885:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    [ebp-0x26C], eax;
	__asm        jmp    _T1661;
_T1661:
	__asm        jmp    _T1666;
_T1666:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T1685;
// LINE 888:
_T1685:
	tempShortcut.lCommand = 0x13;
// LINE 889:
	tempShortcut.lKey = 0x6;
// LINE 890:
	tempShortcut.lModifiers = 0x0;
// LINE 891:
	tempShortcut.lPush = 0x0;
// LINE 892:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 893:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x278], eax;
	__asm        jmp    _T16c4;
_T16c4:
	__asm        jmp    _T16c9;
_T16c9:
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x28C], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x284], eax;
	__asm        jmp    _T16e8;
_T16e8:
	__asm        mov    eax, [ebp-0x284];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x288], eax;
	__asm        jmp    _T16fc;
_T16fc:
	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     _T171e;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x288];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T171e;
_T171e:
	__asm        jmp    _T1723;
_T1723:
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    ecx, [ebp-0x284];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x284];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    ecx, [ebp-0x28C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    ecx, [ebp-0x28C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    [ebp-0x27C], eax;
	__asm        jmp    _T177b;
_T177b:
	__asm        jmp    _T1780;
_T1780:
	__asm        jmp    _T1785;
// LINE 895:
_T1785:
	tempShortcut.lCommand = 0x2;
// LINE 896:
	tempShortcut.lKey = 0x7;
// LINE 897:
	tempShortcut.lModifiers = 0x0;
// LINE 898:
	tempShortcut.lPush = 0x0;
// LINE 899:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 900:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    [ebp-0x290], eax;
	__asm        jmp    _T17c4;
_T17c4:
	__asm        jmp    _T17c9;
_T17c9:
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x29C], eax;
	__asm        jmp    _T17e8;
_T17e8:
	__asm        mov    eax, [ebp-0x29C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2A0], eax;
	__asm        jmp    _T17fc;
_T17fc:
	__asm        cmp    dword ptr [ebp-0x2A0], 0;
	__asm        je     _T181e;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2A0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T181e;
_T181e:
	__asm        jmp    _T1823;
_T1823:
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x29C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x2A4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x2A4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x294], eax;
	__asm        jmp    _T187b;
_T187b:
	__asm        jmp    _T1880;
_T1880:
	__asm        jmp    _T1885;
// LINE 902:
_T1885:
	tempShortcut.lCommand = 0xc;
// LINE 903:
	tempShortcut.lKey = 0x8;
// LINE 904:
	tempShortcut.lModifiers = 0x0;
// LINE 905:
	tempShortcut.lPush = 0x0;
// LINE 906:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 907:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    eax, [ebp-0x2B0];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        jmp    _T18c4;
_T18c4:
	__asm        jmp    _T18c9;
_T18c9:
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2AC];
	__asm        push   eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    _T18e8;
// LINE 908:
_T18e8:
	tempShortcut.lCommand = 0xd;
// LINE 909:
	tempShortcut.lKey = 0x9;
// LINE 910:
	tempShortcut.lModifiers = 0x0;
// LINE 911:
	tempShortcut.lPush = 0x0;
// LINE 912:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 913:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        jmp    _T1927;
_T1927:
	__asm        jmp    _T192c;
_T192c:
	__asm        mov    eax, [ebp-0x2B4];
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x2C0], eax;
	__asm        jmp    _T194b;
_T194b:
	__asm        mov    eax, [ebp-0x2C0];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C4], eax;
	__asm        jmp    _T195f;
_T195f:
	__asm        cmp    dword ptr [ebp-0x2C4], 0;
	__asm        je     _T1981;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2C4];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T1981;
_T1981:
	__asm        jmp    _T1986;
_T1986:
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    ecx, [ebp-0x2C0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        jmp    _T19de;
_T19de:
	__asm        jmp    _T19e3;
_T19e3:
	__asm        jmp    _T19e8;
// LINE 915:
_T19e8:
	tempShortcut.lCommand = 0x1a;
// LINE 916:
	tempShortcut.lKey = 0xa;
// LINE 917:
	tempShortcut.lModifiers = 0x0;
// LINE 918:
	tempShortcut.lPush = 0x0;
// LINE 919:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 920:
	__asm        mov    eax, shortcutList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        jmp    _T1a27;
_T1a27:
	__asm        jmp    _T1a2c;
_T1a2c:
	__asm        mov    eax, [ebp-0x2CC];
	__asm        mov    [ebp-0x2E0], eax;
	__asm        mov    ecx, shortcutList;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x2D8], eax;
	__asm        jmp    _T1a4b;
_T1a4b:
	__asm        mov    eax, [ebp-0x2D8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2DC], eax;
	__asm        jmp    _T1a5f;
_T1a5f:
	__asm        cmp    dword ptr [ebp-0x2DC], 0;
	__asm        je     _T1a81;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x2DC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T1a81;
_T1a81:
	__asm        jmp    _T1a86;
_T1a86:
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    ecx, [ebp-0x2E0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    ecx, [ebp-0x2E0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, shortcutList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        jmp    _T1ade;
_T1ade:
	__asm        jmp    _T1ae3;
_T1ae3:
	__asm        jmp    _T1ae8;
// LINE 921:
_T1ae8:
	__asm        jmp    _T13ac;
// LINE 922:
_T1aed:
	return;
}

// FUNCTION: COPTER_D 0x0048e3b4
int32_t GetPushAndIgnoreSettingsForCommand(long lCommand, long& lPush, long& lIgnoreModifiers) {
// LINE 937:
	__asm        cmp    lCommand, 3;
	__asm        je     _T60;

	__asm        cmp    lCommand, 4;
	__asm        je     _T60;

	__asm        cmp    lCommand, 5;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x14;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x15;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x16;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x17;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x18;
	__asm        je     _T60;

	__asm        cmp    lCommand, 0x19;
	__asm        jne    _T6e;
// LINE 939:
_T60:
	lPush. = 0x1;
// LINE 941:
	__asm        jmp    _T77;
// LINE 942:
_T6e:
	lPush. = 0x0;
// LINE 954:
_T77:
	__asm        cmp    lCommand, 8;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 9;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 7;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 6;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 0xB;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 0xA;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 0xC;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 0xD;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 0x13;
	__asm        je     _Tdb;

	__asm        cmp    lCommand, 2;
	__asm        jne    _Te9;
// LINE 956:
_Tdb:
	lIgnoreModifiers. = 0x1;
// LINE 958:
	__asm        jmp    _Tf2;
// LINE 959:
_Te9:
	lIgnoreModifiers. = 0x0;
// LINE 961:
_Tf2:
	return 0x1;
// LINE 962:
}

// FUNCTION: COPTER_D 0x0048e4b5
void DeleteShortcutPrefsFile() {
	/*bp-0x104*/ char szFilePath[260]; // 0x104 bytes

// LINE 969:
	__asm        mov    al, ds:[0x599D9C];
	__asm        mov    szFilePath[0], al;
	__asm        lea    edi, szFilePath[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x40;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 971:
	GetPathForFile(szFilePath[0], SZ_SHORTCUT_PREFS_FILE_NAME, 0x0, 0x9);
// LINE 972:
	remove(szFilePath[0]);
	__asm        jmp    _T56;
// LINE 973:
_T56:
	return;
}

// FUNCTION: COPTER_D 0x0048e515
int32_t ValidateConfigurableShortcut(/*packed*/ struct Shortcut& shortcutToValidate) {
// LINE 982:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T31;

	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jl     _T2a;

	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 4;
	__asm        jle    _T31;
// LINE 984:
_T2a:
	return 0x0;
// LINE 987:
_T31:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T5b;

	__asm        mov    eax, shortcutToValidate;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   IsKeyReserved;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T5b;
// LINE 989:
	return 0x0;
// LINE 993:
_T5b:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jl     _T87;

	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax], 4;
	__asm        jg     _T87;

	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax+8], 0xE;
	__asm        jl     _T87;
// LINE 995:
	return 0x0;
// LINE 997:
_T87:
	__asm        mov    eax, shortcutToValidate;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T9b;
// LINE 998:
	return 0x0;
// LINE 999:
_T9b:
	__asm        mov    eax, shortcutToValidate;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   IsCommandConfigurable;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _Tb9;
// LINE 1000:
	return 0x0;
// LINE 1005:
_Tb9:
	GetPushAndIgnoreSettingsForCommand((shortcutToValidate + 0x14), (shortcutToValidate + 0x10), shortcutToValidate.lCommand);
// LINE 1006:
	return 0x1;
// LINE 1007:
}

// FUNCTION: COPTER_D 0x0048e5fa
int32_t IsKeyReserved(long lKey) {
// LINE 1018:
	__asm        cmp    lKey, 0x90;
	__asm        je     _T3b;

	__asm        cmp    lKey, 0x2C;
	__asm        je     _T3b;

	__asm        cmp    lKey, 0x1B;
	__asm        je     _T3b;

	__asm        cmp    lKey, 0x11;
	__asm        je     _T3b;
_T3b:
_T45:
_T47:
	return (lKey != 0x12);
// LINE 1019:
}

// FUNCTION: COPTER_D 0x0048e64b
void GetReservedKeyArray(long * lKeys) {
// LINE 1030:
	lKeys[0] = 0x90;
// LINE 1031:
	lKeys[4] = 0x2c;
// LINE 1032:
	lKeys[8] = 0x1b;
// LINE 1033:
	lKeys[12] = 0x11;
// LINE 1034:
	lKeys[16] = 0x12;
// LINE 1035:
	lKeys[20] = 0x0;
// LINE 1036:
	return;
}

// FUNCTION: COPTER_D 0x0048e696
int32_t IsCommandConfigurable(long lCommand) {
// LINE 1045:
	__asm        cmp    lCommand, 2;
	__asm        jl     _T24;

	__asm        cmp    lCommand, 0x20;
	__asm        jg     _T24;

	__asm        mov    eax, 1;
	__asm        jmp    _T26;
_T24:
	__asm        xor    eax, eax;
_T26:
	__asm        jmp    __RETURN;
// LINE 1046:
__RETURN:
}

// FUNCTION: COPTER_D 0x0048e6c6
long GetJoystickCommandTwin(long lCommand) {
// LINE 1057:
	__asm        cmp    lCommand, 6;
	__asm        jne    _T1f;
// LINE 1058:
	return 0x7;
// LINE 1059:
	__asm        jmp    _T1c3;
_T1f:
	__asm        cmp    lCommand, 7;
	__asm        jne    _T38;
// LINE 1060:
	return 0x6;
// LINE 1061:
	__asm        jmp    _T1c3;
_T38:
	__asm        cmp    lCommand, 8;
	__asm        jne    _T51;
// LINE 1062:
	return 0x9;
// LINE 1063:
	__asm        jmp    _T1c3;
_T51:
	__asm        cmp    lCommand, 9;
	__asm        jne    _T6a;
// LINE 1064:
	return 0x8;
// LINE 1065:
	__asm        jmp    _T1c3;
_T6a:
	__asm        cmp    lCommand, 0xA;
	__asm        jne    _T83;
// LINE 1066:
	return 0xb;
// LINE 1067:
	__asm        jmp    _T1c3;
_T83:
	__asm        cmp    lCommand, 0xB;
	__asm        jne    _T9c;
// LINE 1068:
	return 0xa;
// LINE 1069:
	__asm        jmp    _T1c3;
_T9c:
	__asm        cmp    lCommand, 0xC;
	__asm        jne    _Tb5;
// LINE 1070:
	return 0xd;
// LINE 1071:
	__asm        jmp    _T1c3;
_Tb5:
	__asm        cmp    lCommand, 0xD;
	__asm        jne    _Tce;
// LINE 1072:
	return 0xc;
// LINE 1073:
	__asm        jmp    _T1c3;
_Tce:
	__asm        cmp    lCommand, 0xE;
	__asm        jne    _Te7;
// LINE 1074:
	return 0xf;
// LINE 1075:
	__asm        jmp    _T1c3;
_Te7:
	__asm        cmp    lCommand, 0xF;
	__asm        jne    _T100;
// LINE 1076:
	return 0xe;
// LINE 1077:
	__asm        jmp    _T1c3;
_T100:
	__asm        cmp    lCommand, 0x11;
	__asm        jne    _T119;
// LINE 1078:
	return 0x12;
// LINE 1079:
	__asm        jmp    _T1c3;
_T119:
	__asm        cmp    lCommand, 0x12;
	__asm        jne    _T132;
// LINE 1080:
	return 0x11;
// LINE 1081:
	__asm        jmp    _T1c3;
_T132:
	__asm        cmp    lCommand, 0x1B;
	__asm        jne    _T14b;
// LINE 1082:
	return 0x1c;
// LINE 1083:
	__asm        jmp    _T1c3;
_T14b:
	__asm        cmp    lCommand, 0x1C;
	__asm        jne    _T164;
// LINE 1084:
	return 0x1b;
// LINE 1085:
	__asm        jmp    _T1c3;
_T164:
	__asm        cmp    lCommand, 0x1D;
	__asm        jne    _T17d;
// LINE 1086:
	return 0x1e;
// LINE 1087:
	__asm        jmp    _T1c3;
_T17d:
	__asm        cmp    lCommand, 0x1E;
	__asm        jne    _T196;
// LINE 1088:
	return 0x1d;
// LINE 1089:
	__asm        jmp    _T1c3;
_T196:
	__asm        cmp    lCommand, 0x1F;
	__asm        jne    _T1af;
// LINE 1090:
	return 0x20;
// LINE 1091:
	__asm        jmp    _T1c3;
_T1af:
	__asm        cmp    lCommand, 0x20;
	__asm        jne    _T1c3;
// LINE 1092:
	return 0x1f;
// LINE 1093:
_T1c3:
	return 0x0;
// LINE 1094:
}



// Contribution: 1:0008d8a0-0008d8c0 Module: 26, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0008d8d0-0008d908 Module: 26, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0048e8d0
// CGameCommander::`scalar deleting destructor'



// Contribution: 1:0008d910-0008dba7 Module: 26, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0048e910
// list<Shortcut>::insert



// Contribution: 2:00001ff8-0000204b Module: 26, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CGameCommander @ 0x00590ff8
//   00: CGameCommander::`scalar deleting destructor' @ 0x0048e8d0
//   01: CGameCommander::Idle @ 0x0048bbe3
//   02: CDefaultCommander::OnCharacter @ 0x0049ae2c
//   03: CDefaultCommander::OnMouseDown @ 0x0049ae46
//   04: CDefaultCommander::OnMouseUp @ 0x0049ae60
//   05: CGameCommander::OnMouseMove @ 0x0048bcdb
//   06: CGameCommander::OnWindowActivate @ 0x0048bd11
//   07: CGameCommander::OnWindowDeactivate @ 0x0048bd44
//   08: ICommander::SetWindow @ 0x0049ad7b
//   09: CGameCommander::ProcessSetFocus @ 0x0048bd77
//   10: CGameCommander::ProcessKeyDown @ 0x0048be6f
//   11: CGameCommander::ProcessKeyDown @ 0x0048bddd
//   12: CGameCommander::ProcessKeyUp @ 0x0048c064
//   13: CGameCommander::ProcessKeyUp @ 0x0048be26
//   14: CGameCommander::OnCharacter @ 0x0048bdab
//   15: CGameCommander::OnLMouseDown @ 0x0048bbfb
//   16: CGameCommander::OnLMouseUp @ 0x0048bc33
//   17: CGameCommander::OnRMouseDown @ 0x0048bc6b
//   18: CGameCommander::OnRMouseUp @ 0x0048bca3
//   19: CGameCommander::ProcessSystemCloseRequest @ 0x0048c213
//   20: CGameCommander::SetNewGameApp @ 0x0048e8a0
//   21 entries



// Contribution: 3:00002d84-00002d9c Module: 26, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599d84
char * SZ_SHORTCUT_PREFS_FILE_NAME = { 0 /* todo */ };

