// Module: Winmain.obj
// Source: C:\Copter\source\sparkal\Winmain.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void * __ptr32;

// Type: char *;

// Type: int32_t;

// Type: struct tagMSG;
struct tagMSG{
	void * __ptr32 hwnd;
	uint32_t message;
	uint32_t wParam;
	long lParam;
	unsigned long time;
	struct tagPOINT pt;
};

// Type: union _LARGE_INTEGER;



// Contribution: 1:0001e870-0001eac1 Module: 73, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041f870
int32_t WinMain(void * __ptr32 hInstance, void * __ptr32 __formal, char * CommandLine, int32_t __formal) {
	struct tagMSG Message;
	union _LARGE_INTEGER TimerFrequency;

// LINE 33:
	__asm        mov    eax, hInstance;
	__asm        mov    ds:[0x5C28C8], eax;
// LINE 40:
	__asm        mov    byte ptr ds:[0x5C2848], 0;
// LINE 41:
	__asm        push   0x80;
	__asm        mov    eax, CommandLine;
	__asm        push   eax;
	__asm        push   0x5C2848;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 43:
	__asm        lea    eax, TimerFrequency<_LARGE_INTEGER+0x00:None>;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
// LINE 45:
	__asm        mov    eax, TimerFrequency<_LARGE_INTEGER+0x04:4>;
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   dword ptr ds:[0x58F3C8];
	__asm        mov    eax, TimerFrequency<_LARGE_INTEGER+0x00:4>;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        fild   qword ptr [ebp-0x54];
	__asm        faddp;
	__asm        fstp   dword ptr ds:[0x5C28CC];
// LINE 48:
	__asm        jmp    near ptr 0x0041F8D4;
// LINE 49:
	__asm        push   0x4348;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T90;

	__asm        mov    ecx, [ebp-0x28];
	__asm        call   CGameApp::CGameApp;
	__asm        mov    ds:[0x598580], eax;
	__asm        jmp    _T9a;
_T90:
	__asm        mov    dword ptr ds:[0x598580], 0;
// LINE 50:
_T9a:
	__asm        cmp    dword ptr ds:[0x598580], 0;
	__asm        jne    _Tb3;
// LINE 52:
	__asm        jmp    near ptr 0x0041F91C;
// LINE 53:
	__asm        xor    eax, eax;
	__asm        jmp    _T24b;
// LINE 56:
_Tb3:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x598580];
	__asm        call   dword ptr [eax+0x14];
	__asm        test   eax, eax;
	__asm        je     _T100;
// LINE 57:
	__asm        jmp    near ptr 0x0041F940;
// LINE 58:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tf9;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   dword ptr [eax];
	__asm        jmp    _Tf9;
// LINE 59:
_Tf9:
	__asm        xor    eax, eax;
	__asm        jmp    _T24b;
// LINE 62:
_T100:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        or     dword ptr [eax+0xC], 2;
	__asm        jmp    near ptr 0x0041F984;
// LINE 63:
	__asm        call   ClearWindowsSystemPalette;
// LINE 64:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x598580];
	__asm        call   dword ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     _T166;
// LINE 65:
	__asm        jmp    near ptr 0x0041F9A6;
// LINE 66:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T15f;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T15f;
// LINE 67:
_T15f:
	__asm        xor    eax, eax;
	__asm        jmp    _T24b;
// LINE 70:
_T166:
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, ds:[0x598580];
	__asm        test   byte ptr [eax+0xC], 1;
	__asm        je     _T201;
// LINE 71:
_T17a:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, Message.hwnd;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3800];
	__asm        test   eax, eax;
	__asm        je     _T1d5;
// LINE 72:
	__asm        cmp    Message.message, 0x12;
	__asm        jne    _T1bc;

	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x48], eax;
// LINE 73:
	__asm        mov    eax, [ebp-0x48];
	__asm        and    dword ptr [eax+0xC], 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0041FA22;
// LINE 74:
	__asm        jmp    _T246;

	__asm        jmp    _T201;
// LINE 76:
_T1bc:
	__asm        lea    eax, Message.hwnd;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37F8];
// LINE 77:
	__asm        lea    eax, Message.hwnd;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37EC];
// LINE 78:
	__asm        jmp    _T17a;
// LINE 82:
_T1d5:
	__asm        jmp    near ptr 0x0041FA4A;

	__asm        mov    eax, ds:[0x598580];
	__asm        mov    eax, [eax+0xC];
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    _T1fc;
// LINE 84:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x598580];
	__asm        call   dword ptr [eax+0xC];
// LINE 86:
_T1fc:
	__asm        jmp    _T16b;
// LINE 89:
Cleanup:
_T201:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x598580];
	__asm        call   dword ptr [eax+0x10];
// LINE 90:
	__asm        jmp    near ptr 0x0041FA86;
// LINE 91:
	__asm        mov    eax, ds:[0x598580];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T23f;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T23f;
// LINE 92:
_T23f:
	__asm        xor    eax, eax;
	__asm        jmp    _T24b;
// LINE 93:
_T246:
	__asm        jmp    _T201;
_T24b:
}



// Contribution: 2:000003c8-000003cb Module: 73, 4 byte alignment, initialized_data, read, 


// Contribution: 3:0002b848-0002b8cf Module: 73, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2848
// gszCommandLine
// GLOBAL: COPTER_D 0x005c28c8
// _ghWindowsInstance
// GLOBAL: COPTER_D 0x005c28cc
// _gTimerFrequency


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
