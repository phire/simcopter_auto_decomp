// Module: joystick.obj
// Source: C:\Copter\source\sparkal\joystick.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class JoystickManager (forward reference);
class JoystickManager{
public:
	void JoystickManager();
	int32_t Initialize();
	int32_t Normalize(int32_t);
	int32_t GetPositionQualitative(int32_t, int32_t, int32_t);
	int32_t GetPositionQuantitative(int32_t, int32_t, int32_t);
	int32_t GetButtonState(int32_t, int32_t, int32_t);
	int32_t GetCompleteState(int32_t);
	int32_t GetPointOfView(int32_t, int32_t);
	int32_t Calibrate(int32_t);
	int32_t GetWindowsThreshold(int32_t, long *);
	int32_t SetWindowsThreshold(int32_t, long);
	int32_t GetNormalizedThreshold(long *);
	int32_t SetNormalizedThreshold(long);
	long GetNormalizedMin();
	long GetNormalizedMax();
	void SetNormalizedMinMax(long, long);
	int32_t IsJoystickPresent(char *);
	int32_t IsJoystickPresent(uint32_t);
	int32_t GetJoystickName(uint32_t, char *);
	int32_t GetJoystickIndex(char *, int32_t *);
	int32_t GetJoystickCount();
	int32_t GetVirtualJoystickIndex(int32_t);
protected:
	int32_t nJoystickCount;
	char bJoystickPresent[16];
	int32_t nJoystickIndexAssociation[16];
	long lNormalizedMinimum;
	long lNormalizedMaximum;
	long lNormalizedCenter;
	long lJoystickThreshold;
	struct tagJOYCAPSA joystickCaps[16];
	struct joyinfoex_tag joystickInfoCache[16];
};

// Type: int32_t;

// Type: struct joyinfo_tag;
class joyinfo_tag{
public:
	uint32_t wXpos;
	uint32_t wYpos;
	uint32_t wZpos;
	uint32_t wButtons;
};

// Type: uint32_t;

// Type: char *;

// Type: int32_t *;

// Type: struct joyinfoex_tag;
class joyinfoex_tag{
public:
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwXpos;
	unsigned long dwYpos;
	unsigned long dwZpos;
	unsigned long dwRpos;
	unsigned long dwUpos;
	unsigned long dwVpos;
	unsigned long dwButtons;
	unsigned long dwButtonNumber;
	unsigned long dwPOV;
	unsigned long dwReserved1;
	unsigned long dwReserved2;
};

// Type: unsigned long;

// Type: struct joyinfoex_tag (forward reference);

// Type: unsigned long *;

// Type: long *;

// Type: long;



// Contribution: 1:00099480-00099d21 Module: 15, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0049a480
void $E2() {
	__asm        call   $E1;
	__asm        jmp    near ptr 0x0049A490;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0049a495
void $E1() {
	__asm        mov    ecx, 0x604C78;
	__asm        call   JoystickManager::JoystickManager;
	__asm        jmp    near ptr 0x0049A4AA;
}

// FUNCTION: COPTER_D 0x0049a4af
void JoystickManager::JoystickManager() {
	int32_t i;

// LINE 29:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0xFFFFFF9C;
// LINE 30:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0x64;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 32:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 33:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049A4F2;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0049A51A;
// LINE 34:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 0;
// LINE 35:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x14], 0;
// LINE 36:
	__asm        jmp    near ptr 0x0049A4EF;
// LINE 38:
	__asm        jmp    near ptr 0x0049A51F;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049a527
int32_t JoystickManager::Initialize() {
	int32_t nMaxJoysticks;
	struct joyinfo_tag joyInfo;
	int32_t i;
	uint32_t mmResult;

// LINE 51:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 61:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049A554;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0049A57C;
// LINE 62:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 0;
// LINE 63:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x14], 0;
// LINE 64:
	__asm        jmp    near ptr 0x0049A551;
// LINE 66:
	__asm        call   dword ptr ds:[0x6C38DC];
	__asm        mov    nMaxJoysticks, eax;
// LINE 67:
	__asm        cmp    nMaxJoysticks, 0x10;
	__asm        jle    near ptr 0x0049A596;
// LINE 68:
	__asm        mov    nMaxJoysticks, 0x10;
// LINE 70:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049A5A5;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    nMaxJoysticks, eax;
	__asm        jle    near ptr 0x0049A61A;
// LINE 71:
	__asm        lea    eax, joyInfo.wXpos;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38E0];
	__asm        mov    mmResult, eax;
// LINE 72:
	__asm        cmp    mmResult, 0;
	__asm        jne    near ptr 0x0049A615;
// LINE 73:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x14], eax;
// LINE 74:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 1;
// LINE 75:
	__asm        push   0x194;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*8];
	__asm        sub    eax, ecx;
	__asm        add    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38E4];
// LINE 76:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax];
// LINE 78:
	__asm        jmp    near ptr 0x0049A5A2;
// LINE 82:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        jmp    near ptr 0x0049A624;
// LINE 83:
}

// FUNCTION: COPTER_D 0x0049a629
int32_t JoystickManager::IsJoystickPresent(char * szJoystickName) {
	int32_t i;

// LINE 93:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049A644;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0049A688;
// LINE 95:
	__asm        mov    eax, szJoystickName;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*8];
	__asm        sub    eax, ecx;
	__asm        add    eax, this;
	__asm        add    eax, 0x68;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0049A683;
// LINE 96:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049A68F;
// LINE 98:
	__asm        jmp    near ptr 0x0049A641;
// LINE 99:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A68F;
// LINE 100:
}

// FUNCTION: COPTER_D 0x0049a696
int32_t JoystickManager::GetJoystickName(uint32_t nJoystick, char * szJoystickName) {
// LINE 107:
	__asm        cmp    nJoystick, 0x10;
	__asm        jb     near ptr 0x0049A6B3;
// LINE 108:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A6FA;
// LINE 109:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0049A6CD;
// LINE 110:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A6FA;
// LINE 112:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*8];
	__asm        sub    eax, ecx;
	__asm        add    eax, this;
	__asm        add    eax, 0x68;
	__asm        push   eax;
	__asm        mov    eax, szJoystickName;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 113:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049A6FA;
// LINE 115:
}

// FUNCTION: COPTER_D 0x0049a701
int32_t JoystickManager::GetJoystickIndex(char * szJoystickName, int32_t * nJoystick) {
	int32_t i;

// LINE 127:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049A71C;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0049A768;
// LINE 129:
	__asm        mov    eax, szJoystickName;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*8];
	__asm        sub    eax, ecx;
	__asm        add    eax, this;
	__asm        add    eax, 0x68;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0049A763;
// LINE 130:
	__asm        mov    eax, i;
	__asm        mov    ecx, nJoystick;
	__asm        mov    [ecx], eax;
// LINE 131:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049A772;
// LINE 134:
	__asm        jmp    near ptr 0x0049A719;
// LINE 135:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0049A772;
// LINE 136:
}

// FUNCTION: COPTER_D 0x0049a779
int32_t JoystickManager::Normalize(int32_t nPosition) {
// LINE 160:
	__asm        push   0xFFFF;
	__asm        mov    eax, nPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x54];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        add    ecx, eax;
	__asm        mov    nPosition, ecx;
// LINE 167:
	__asm        mov    eax, nPosition;
	__asm        jmp    near ptr 0x0049A7B4;
// LINE 168:
}

// FUNCTION: COPTER_D 0x0049a7bb
int32_t JoystickManager::GetPositionQualitative(int32_t nJoystick, int32_t nAxis, int32_t bUseCache) {
	int32_t nOneQuarterOfTheRange;
	int32_t nValue;

// LINE 191:
	__asm        mov    eax, bUseCache;
	__asm        push   eax;
	__asm        mov    eax, nAxis;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   JoystickManager::GetPositionQuantitative;
	__asm        mov    nValue, eax;
// LINE 192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x54];
	__asm        sar    eax, 2;
	__asm        mov    nOneQuarterOfTheRange, eax;
// LINE 193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        sub    eax, nOneQuarterOfTheRange;
	__asm        cmp    eax, nValue;
	__asm        jle    near ptr 0x0049A80C;
// LINE 194:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0049A82F;
// LINE 195:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        add    eax, nOneQuarterOfTheRange;
	__asm        cmp    eax, nValue;
	__asm        jge    near ptr 0x0049A828;
// LINE 196:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049A82F;
// LINE 199:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A82F;
// LINE 200:
}

// FUNCTION: COPTER_D 0x0049a836
int32_t JoystickManager::GetPositionQuantitative(int32_t nJoystick, int32_t nAxis, int32_t bUseCache) {
	int32_t nReturnValue;
	struct joyinfoex_tag joyInfoEx;
	unsigned long dwFlagToUse;
	struct joyinfoex_tag* joyInfoExToUse;
	uint32_t mmResult;
	unsigned long * dwResultToUse;

// LINE 227:
	__asm        cmp    nJoystick, 0x10;
	__asm        jle    near ptr 0x0049A853;
// LINE 228:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A9D6;
// LINE 230:
	__asm        cmp    bUseCache, 0;
	__asm        je     near ptr 0x0049A87B;
// LINE 231:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        shl    eax, 2;
	__asm        add    eax, this;
	__asm        add    eax, 0x19A4;
	__asm        mov    joyInfoExToUse, eax;
// LINE 232:
	__asm        jmp    near ptr 0x0049A881;
// LINE 233:
	__asm        lea    eax, joyInfoEx.dwSize;
	__asm        mov    joyInfoExToUse, eax;
// LINE 235:
	__asm        mov    eax, nAxis;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0049A916;
// LINE 237:
	__asm        mov    dwFlagToUse, 1;
// LINE 238:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 8;
	__asm        mov    dwResultToUse, eax;
// LINE 239:
	__asm        jmp    near ptr 0x0049A942;
// LINE 241:
	__asm        mov    dwFlagToUse, 2;
// LINE 242:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 0xC;
	__asm        mov    dwResultToUse, eax;
// LINE 243:
	__asm        jmp    near ptr 0x0049A942;
// LINE 245:
	__asm        mov    dwFlagToUse, 4;
// LINE 246:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 0x10;
	__asm        mov    dwResultToUse, eax;
// LINE 247:
	__asm        jmp    near ptr 0x0049A942;
// LINE 249:
	__asm        mov    dwFlagToUse, 8;
// LINE 250:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 0x14;
	__asm        mov    dwResultToUse, eax;
// LINE 251:
	__asm        jmp    near ptr 0x0049A942;
// LINE 253:
	__asm        mov    dwFlagToUse, 0x10;
// LINE 254:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 0x18;
	__asm        mov    dwResultToUse, eax;
// LINE 255:
	__asm        jmp    near ptr 0x0049A942;
// LINE 257:
	__asm        mov    dwFlagToUse, 0x20;
// LINE 258:
	__asm        mov    eax, joyInfoExToUse;
	__asm        add    eax, 0x1C;
	__asm        mov    dwResultToUse, eax;
// LINE 259:
	__asm        jmp    near ptr 0x0049A942;
// LINE 261:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A9D6;
// LINE 262:
	__asm        jmp    near ptr 0x0049A942;
	__asm        cmp    dword ptr [ebp-0x50], 5;
	__asm        ja     near ptr 0x0049A90A;
	__asm        mov    eax, [ebp-0x50];
	__asm        jmp    dword ptr [eax*4+0x49A92A];
// Switch pointers
// LINE 263:
	__asm        cmp    bUseCache, 0;
	__asm        jne    near ptr 0x0049A98C;
// LINE 264:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    dword ptr [eax], 0x34;
// LINE 265:
	__asm        mov    eax, dwFlagToUse;
	__asm        mov    ecx, joyInfoExToUse;
	__asm        mov    [ecx+4], eax;
// LINE 266:
	__asm        jmp    near ptr 0x0049A963;
	__asm        mov    eax, joyInfoExToUse;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D8];
	__asm        mov    mmResult, eax;
// LINE 267:
	__asm        cmp    mmResult, 0;
	__asm        je     near ptr 0x0049A98C;
// LINE 268:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A9D6;
// LINE 270:
	__asm        mov    eax, dwResultToUse;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   JoystickManager::Normalize;
	__asm        mov    nReturnValue, eax;
// LINE 272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x60];
	__asm        cmp    eax, nReturnValue;
	__asm        jle    near ptr 0x0049A9CE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x60];
	__asm        cmp    eax, nReturnValue;
	__asm        jge    near ptr 0x0049A9CE;
// LINE 273:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049A9D6;
// LINE 274:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0049A9D6;
// LINE 279:
}

// FUNCTION: COPTER_D 0x0049a9dd
int32_t JoystickManager::GetButtonState(int32_t nJoystick, int32_t nButton, int32_t bUseCache) {
	struct joyinfoex_tag joyInfoEx;
	struct joyinfoex_tag* joyInfoExToUse;
	uint32_t mmResult;

// LINE 304:
	__asm        cmp    nJoystick, 0x10;
	__asm        jg     near ptr 0x0049A9FD;
	__asm        cmp    nButton, 0x20;
	__asm        jle    near ptr 0x0049AA04;
// LINE 305:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AA92;
// LINE 306:
	__asm        cmp    bUseCache, 0;
	__asm        je     near ptr 0x0049AA2C;
// LINE 307:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        shl    eax, 2;
	__asm        add    eax, this;
	__asm        add    eax, 0x19A4;
	__asm        mov    joyInfoExToUse, eax;
// LINE 308:
	__asm        jmp    near ptr 0x0049AA32;
// LINE 309:
	__asm        lea    eax, joyInfoEx.dwSize;
	__asm        mov    joyInfoExToUse, eax;
// LINE 311:
	__asm        cmp    bUseCache, 0;
	__asm        jne    near ptr 0x0049AA7D;
// LINE 312:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    dword ptr [eax], 0x34;
// LINE 313:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    dword ptr [eax+4], 0x80;
// LINE 314:
	__asm        jmp    near ptr 0x0049AA54;
	__asm        mov    eax, joyInfoExToUse;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D8];
	__asm        mov    mmResult, eax;
// LINE 315:
	__asm        cmp    mmResult, 0;
	__asm        je     near ptr 0x0049AA7D;
// LINE 316:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AA92;
// LINE 318:
	__asm        mov    eax, nButton;
	__asm        mov    eax, [eax*4+0x591228];
	__asm        mov    ecx, joyInfoExToUse;
	__asm        and    eax, [ecx+0x20];
	__asm        jmp    near ptr 0x0049AA92;
// LINE 323:
}

// FUNCTION: COPTER_D 0x0049aa99
int32_t JoystickManager::GetCompleteState(int32_t nJoystick) {
	uint32_t mmResult;

// LINE 341:
	__asm        cmp    nJoystick, 0x10;
	__asm        jle    near ptr 0x0049AAB6;
// LINE 342:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AB33;
// LINE 343:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x19A4], 0x34;
// LINE 344:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x19A8], 0xFF;
// LINE 345:
	__asm        jmp    near ptr 0x0049AAED;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        shl    eax, 2;
	__asm        add    eax, this;
	__asm        add    eax, 0x19A4;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D8];
	__asm        mov    mmResult, eax;
// LINE 346:
	__asm        cmp    mmResult, 0;
	__asm        jne    near ptr 0x0049AB2C;
// LINE 347:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049AB33;
// LINE 349:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AB33;
// LINE 351:
}

// FUNCTION: COPTER_D 0x0049ab3a
int32_t JoystickManager::GetPointOfView(int32_t nJoystick, int32_t bUseCache) {
	struct joyinfoex_tag joyInfoEx;
	struct joyinfoex_tag* joyInfoExToUse;
	uint32_t mmResult;

// LINE 382:
	__asm        cmp    nJoystick, 0x10;
	__asm        jle    near ptr 0x0049AB57;
// LINE 383:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049ABDB;
// LINE 384:
	__asm        cmp    bUseCache, 0;
	__asm        je     near ptr 0x0049AB7F;
// LINE 385:
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        shl    eax, 2;
	__asm        add    eax, this;
	__asm        add    eax, 0x19A4;
	__asm        mov    joyInfoExToUse, eax;
// LINE 386:
	__asm        jmp    near ptr 0x0049AB85;
// LINE 387:
	__asm        lea    eax, joyInfoEx.dwSize;
	__asm        mov    joyInfoExToUse, eax;
// LINE 389:
	__asm        cmp    bUseCache, 0;
	__asm        jne    near ptr 0x0049ABD0;
// LINE 390:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    dword ptr [eax], 0x34;
// LINE 391:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    dword ptr [eax+4], 0x40;
// LINE 392:
	__asm        jmp    near ptr 0x0049ABA7;
	__asm        mov    eax, joyInfoExToUse;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D8];
	__asm        mov    mmResult, eax;
// LINE 393:
	__asm        cmp    mmResult, 0;
	__asm        je     near ptr 0x0049ABD0;
// LINE 394:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049ABDB;
// LINE 396:
	__asm        mov    eax, joyInfoExToUse;
	__asm        mov    eax, [eax+0x28];
	__asm        jmp    near ptr 0x0049ABDB;
// LINE 401:
}

// FUNCTION: COPTER_D 0x0049abe2
int32_t JoystickManager::Calibrate(int32_t nJoystick) {
	uint32_t nReturnValue;

// LINE 419:
	__asm        push   1;
	__asm        push   0x59A28C;
	__asm        call   dword ptr ds:[0x6C35DC];
	__asm        mov    nReturnValue, eax;
// LINE 420:
	__asm        cmp    nReturnValue, 0x1F;
	__asm        jbe    near ptr 0x0049AC12;
// LINE 421:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049AC19;
// LINE 422:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AC19;
// LINE 427:
}

// FUNCTION: COPTER_D 0x0049ac20
int32_t JoystickManager::GetWindowsThreshold(int32_t nJoystick, long * lThreshold) {
	uint32_t mmResult;

// LINE 453:
	__asm        cmp    nJoystick, 0x10;
	__asm        jle    near ptr 0x0049AC3D;
// LINE 454:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AC75;
// LINE 455:
	__asm        jmp    near ptr 0x0049AC42;
	__asm        mov    eax, lThreshold;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D4];
	__asm        mov    mmResult, eax;
// LINE 456:
	__asm        cmp    mmResult, 0;
	__asm        jne    near ptr 0x0049AC6E;
// LINE 457:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049AC75;
// LINE 458:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049AC75;
// LINE 463:
}

// FUNCTION: COPTER_D 0x0049ac7c
int32_t JoystickManager::SetWindowsThreshold(int32_t nJoystick, long lThreshold) {
	uint32_t mmResult;

// LINE 477:
	__asm        cmp    nJoystick, 0x10;
	__asm        jle    near ptr 0x0049AC99;
// LINE 478:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049ACD1;
// LINE 479:
	__asm        jmp    near ptr 0x0049AC9E;
	__asm        mov    eax, lThreshold;
	__asm        push   eax;
	__asm        mov    eax, nJoystick;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38D0];
	__asm        mov    mmResult, eax;
// LINE 480:
	__asm        cmp    mmResult, 0;
	__asm        jne    near ptr 0x0049ACCA;
// LINE 481:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049ACD1;
// LINE 482:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049ACD1;
// LINE 487:
}

// FUNCTION: COPTER_D 0x0049acd8
void JoystickManager::SetNormalizedMinMax(long lNewMin, long lNewMax) {
// LINE 499:
	__asm        mov    eax, lNewMin;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
// LINE 500:
	__asm        mov    eax, lNewMax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 501:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x54];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x5C], ecx;
// LINE 503:
	__asm        jmp    near ptr 0x0049AD1B;
}



// Contribution: 2:00002228-000022a7 Module: 15, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00591228
// dwJoystickButtonConstants


// Contribution: 3:0000008c-0000008f Module: 15, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x0059708c
// $S3


// Contribution: 3:0000328c-0000329b Module: 15, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0006dc78-0006f95b Module: 15, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604c78
// gJoystickManager
