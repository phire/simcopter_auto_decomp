// Module: Hotspot.obj
// Source: C:\Copter\source\sparkal\Hotspot.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class HotSpot (forward reference);
class HotSpot{
public:
	void HotSpot(long, struct SparkalRect&);
	void HotSpot(struct HotSpotResourceRecord*);
	void HotSpot(long, long, long, long[2]*);
	void HotSpot(const class HotSpot&);
	void HotSpot();
	class HotSpot& operator=(const class HotSpot&);
	int32_t IsPointInHotspot(long, long);
	void GetBoundingRect(class MRect&);
	long lID;
	long lType;
protected:
	int32_t PointInRect(long, long);
	int32_t PointInCircle(long, long);
	int32_t PointInPolygon(long, long);
	class vector<MPoint> pointArray;
};

// Type: void;

// Type: long;

// Type: long[2];

// Type: int32_t;

// Type: struct HotSpotResourceRecord (forward reference);

// Type: struct SparkalRect (forward reference);
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class list<HotSpot> (forward reference);
class list<HotSpot>{
	using void_pointer = void * __ptr32;
	struct list<HotSpot>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class HotSpot data;
	};
protected:
	static class allocator<list<HotSpot>::list_node> list_node_allocator;
	static class allocator<HotSpot> value_allocator;
	using value_type = class HotSpot;
	using value_allocator_type = class allocator<HotSpot>;
	using pointer = class HotSpot*;
	using reference = class HotSpot&;
	using const_reference = const class HotSpot&;
	using list_node_allocator_type = class allocator<list<HotSpot>::list_node>;
	using link_type = struct list<HotSpot>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<HotSpot>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<HotSpot>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<HotSpot>::list_node_buffer>;
	using buffer_pointer = struct list<HotSpot>::list_node_buffer*;
protected:
	static class allocator<list<HotSpot>::list_node_buffer> buffer_allocator;
	static struct list<HotSpot>::list_node_buffer* buffer_list;
	static struct list<HotSpot>::list_node* free_list;
	static struct list<HotSpot>::list_node* next_avail;
	static struct list<HotSpot>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<HotSpot>::list_node* get_node();
	void put_node(struct list<HotSpot>::list_node*);
	struct list<HotSpot>::list_node* node;
	uint32_t length;
	class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
	{
	protected:
		struct list<HotSpot>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const class list<HotSpot>::iterator&);
		class HotSpot& operator*();
		class list<HotSpot>::iterator operator++(int32_t);
		class list<HotSpot>::iterator& operator++();
		class list<HotSpot>::iterator operator--(int32_t);
		class list<HotSpot>::iterator& operator--();
	};
	class list<HotSpot>::const_iterator : public bidirectional_iterator<HotSpot,int>
	{
	protected:
		struct list<HotSpot>::list_node* node;
	public:
		void const_iterator(const class list<HotSpot>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const class list<HotSpot>::const_iterator&);
		const class HotSpot& operator*();
		class list<HotSpot>::const_iterator operator++(int32_t);
		class list<HotSpot>::const_iterator& operator++();
		class list<HotSpot>::const_iterator operator--(int32_t);
		class list<HotSpot>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int>;
public:
	void list<HotSpot>(const class list<HotSpot>&);
	void list<HotSpot>(const class HotSpot*, const class HotSpot*);
	void list<HotSpot>(uint32_t, const class HotSpot&);
	void list<HotSpot>();
	class list<HotSpot>::const_iterator begin();
	class list<HotSpot>::iterator begin();
	class list<HotSpot>::const_iterator end();
	class list<HotSpot>::iterator end();
	class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rbegin();
	class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rbegin();
	class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rend();
	class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class HotSpot& front();
	class HotSpot& front();
	const class HotSpot& back();
	class HotSpot& back();
	void swap(class list<HotSpot>&);
	void insert(class list<HotSpot>::iterator, uint32_t, const class HotSpot&);
	void insert(class list<HotSpot>::iterator, class list<HotSpot>::const_iterator, class list<HotSpot>::const_iterator);
	void insert(class list<HotSpot>::iterator, const class HotSpot*, const class HotSpot*);
	class list<HotSpot>::iterator insert(class list<HotSpot>::iterator, const class HotSpot&);
	void push_front(const class HotSpot&);
	void push_back(const class HotSpot&);
	void erase(class list<HotSpot>::iterator, class list<HotSpot>::iterator);
	void erase(class list<HotSpot>::iterator);
	void pop_front();
	void pop_back();
	void ~list<HotSpot>();
	class list<HotSpot>& operator=(const class list<HotSpot>&);
protected:
	void transfer(class list<HotSpot>::iterator, class list<HotSpot>::iterator, class list<HotSpot>::iterator);
public:
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&, class list<HotSpot>::iterator, class list<HotSpot>::iterator);
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&, class list<HotSpot>::iterator);
	void splice(class list<HotSpot>::iterator, class list<HotSpot>&);
	void remove(const class HotSpot&);
	void unique();
	void merge(class list<HotSpot>&);
	void reverse();
	void sort();
};

// Type: char *;

// Type: struct HotSpotResourceFileHeader (forward reference);

// Type: class ResourceRCData;
class ResourceRCData{
public:
	void ResourceRCData(class ResourceRCData&);
	void ResourceRCData(int32_t, int32_t);
	void ResourceRCData();
	void ~ResourceRCData();
	class ResourceRCData& operator=(class ResourceRCData&);
	// vtable: 0
	intro void Reset();
	// vtable: 4
	intro int32_t ReadResource();
	unsigned long DataSize();
	char * DataReference();
protected:
	int32_t nResource;
	char * chData;
	int32_t bWeOwnTheData;
	void * __ptr32 hFoundResource;
	void * __ptr32 hInstance;
	void * __ptr32 hResource;
};

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:000b8040-000ba946 Module: 4, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004b9040
void HotSpot::HotSpot() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x004B9082;
// LINE 26:
	__asm        jmp    near ptr 0x004B9087;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b908f
void HotSpot::HotSpot(const class HotSpot& newHotSpot) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x004B90BE;
// LINE 35:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 36:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 37:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, newHotSpot;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        jne    _T5e;

	__asm        jmp    _T3ec;
_T5e:
	__asm        jmp    near ptr 0x004B90F2;

	__asm        jmp    near ptr 0x004B90F7;

	__asm        jmp    near ptr 0x004B90FC;

	__asm        jmp    near ptr 0x004B9101;

	__asm        jmp    near ptr 0x004B9106;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jbe    _T1a8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
_Ta6:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tc3;

	__asm        jmp    near ptr 0x004B9149;

	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _Ta6;
_Tc3:
	__asm        jmp    near ptr 0x004B9157;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B9171;

	__asm        jmp    near ptr 0x004B9176;

	__asm        jmp    near ptr 0x004B917B;

	__asm        jmp    near ptr 0x004B9180;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B9197;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004B91B0;

	__asm        jmp    near ptr 0x004B91B5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x44], eax;
_T141:
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    [ebp-0x44], eax;
	__asm        je     _T195;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr [ebp-0x44], 8;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr [ebp-0x3C], 8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004B91FB;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T18b;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x38];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T18b;
_T18b:
	__asm        jmp    near ptr 0x004B921F;

	__asm        jmp    _T141;
_T195:
	__asm        jmp    near ptr 0x004B9229;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T3b5;
_T1a8:
	__asm        jmp    near ptr 0x004B923C;

	__asm        jmp    near ptr 0x004B9241;

	__asm        jmp    near ptr 0x004B9246;

	__asm        jmp    near ptr 0x004B924B;

	__asm        jmp    near ptr 0x004B9250;

	__asm        jmp    near ptr 0x004B9255;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        ja     _T277;

	__asm        jmp    near ptr 0x004B9280;

	__asm        jmp    near ptr 0x004B9285;

	__asm        jmp    near ptr 0x004B928A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
_T216:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     _T23f;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    _T216;
_T23f:
	__asm        jmp    near ptr 0x004B92D3;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
_T250:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T26d;

	__asm        jmp    near ptr 0x004B92F3;

	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        jmp    _T250;
_T26d:
	__asm        jmp    near ptr 0x004B9301;

	__asm        jmp    _T3b5;
_T277:
	__asm        jmp    near ptr 0x004B930B;

	__asm        jmp    near ptr 0x004B9310;

	__asm        jmp    near ptr 0x004B9315;

	__asm        jmp    near ptr 0x004B931A;

	__asm        jmp    near ptr 0x004B931F;

	__asm        jmp    near ptr 0x004B9324;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T2c2:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     _T2eb;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T2c2;
_T2eb:
	__asm        jmp    near ptr 0x004B937F;

	__asm        jmp    near ptr 0x004B9384;

	__asm        jmp    near ptr 0x004B9389;

	__asm        jmp    near ptr 0x004B938E;

	__asm        jmp    near ptr 0x004B9393;

	__asm        jmp    near ptr 0x004B9398;

	__asm        jmp    near ptr 0x004B939D;

	__asm        jmp    near ptr 0x004B93A2;

	__asm        jmp    near ptr 0x004B93A7;

	__asm        jmp    near ptr 0x004B93AC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x5C], eax;
_T35c:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        je     _T3b0;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr [ebp-0x5C], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B9416;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    near ptr 0x004B943A;

	__asm        jmp    _T35c;
_T3b0:
	__asm        jmp    _T3b5;
_T3b5:
	__asm        jmp    near ptr 0x004B9449;

	__asm        jmp    near ptr 0x004B944E;

	__asm        jmp    near ptr 0x004B9453;

	__asm        jmp    near ptr 0x004B9458;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3ec;
// LINE 38:
_T3ec:
	__asm        jmp    near ptr 0x004B9480;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b948a
void HotSpot::HotSpot(long lNewID, long lNewType, long lNewCount, long[2]* lCoordinates) {
	int32_t i;


	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, lNewType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x004B94DF;
// LINE 50:
	__asm        mov    i, 0;
	__asm        jmp    _T64;
_T61:
	__asm        inc    i;
_T64:
	__asm        mov    eax, lNewCount;
	__asm        cmp    i, eax;
	__asm        jge    _T4d7;

	__asm        mov    eax, i;
	__asm        mov    ecx, lCoordinates;
	__asm        mov    eax, [ecx+eax*8+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, lCoordinates;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    [ebp-0x14], eax;
// LINE 52:
	__asm        jmp    near ptr 0x004B9518;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004B9529;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tff;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004B9558;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Teb;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Teb;
_Teb:
	__asm        jmp    near ptr 0x004B957A;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4cd;
_Tff:
	__asm        jmp    near ptr 0x004B958E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004B95DB;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T170;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x4C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T170;
_T170:
	__asm        jmp    near ptr 0x004B95FF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x48], eax;
_T190:
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T1bc;

	__asm        sub    dword ptr [ebp-0x44], 8;
	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x44];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T190;
_T1bc:
	__asm        jmp    near ptr 0x004B964B;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x8C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4c8;
_T1e1:
	__asm        jmp    near ptr 0x004B9670;

	__asm        jmp    near ptr 0x004B9675;

	__asm        jmp    near ptr 0x004B967A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T23b;

	__asm        jmp    near ptr 0x004B969C;

	__asm        jmp    near ptr 0x004B96A1;

	__asm        jmp    near ptr 0x004B96A6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T288;
_T23b:
	__asm        mov    dword ptr [ebp-0x30], 0x200;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T270;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T276;
_T270:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
_T276:
	__asm        jmp    near ptr 0x004B9705;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T288;
_T288:
	__asm        jmp    near ptr 0x004B9717;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004B972D;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x70], eax;
_T2b5:
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T30c;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x60], eax;
	__asm        add    dword ptr [ebp-0x70], 8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x6C], 8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004B976D;

	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T302;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x68];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T302;
_T302:
	__asm        jmp    near ptr 0x004B9791;

	__asm        jmp    _T2b5;
_T30c:
	__asm        jmp    near ptr 0x004B979B;

	__asm        jmp    near ptr 0x004B97A0;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x20];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004B97CC;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T35f;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x58];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T35f;
_T35f:
	__asm        jmp    near ptr 0x004B97EE;

	__asm        jmp    near ptr 0x004B97F3;

	__asm        jmp    near ptr 0x004B97F8;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x20];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x88], eax;
_T3ad:
	__asm        mov    eax, [ebp-0x84];
	__asm        cmp    [ebp-0x88], eax;
	__asm        je     _T40d;

	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x74], eax;
	__asm        add    dword ptr [ebp-0x88], 8;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x78], eax;
	__asm        add    dword ptr [ebp-0x80], 8;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004B986E;

	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T403;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x7C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T403;
_T403:
	__asm        jmp    near ptr 0x004B9892;

	__asm        jmp    _T3ad;
_T40d:
	__asm        jmp    near ptr 0x004B989C;

	__asm        jmp    near ptr 0x004B98A1;

	__asm        jmp    near ptr 0x004B98A6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T428:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T448;

	__asm        jmp    near ptr 0x004B98C9;

	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T428;
_T448:
	__asm        jmp    near ptr 0x004B98D7;

	__asm        jmp    near ptr 0x004B98DC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B98F9;

	__asm        jmp    near ptr 0x004B98FE;

	__asm        mov    eax, [ebp-0x24];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x004B9915;

	__asm        jmp    near ptr 0x004B991A;

	__asm        jmp    near ptr 0x004B991F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x20];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4c8:
	__asm        jmp    _T4cd;
_T4cd:
	__asm        jmp    near ptr 0x004B995C;
// LINE 53:
	__asm        jmp    _T61;
// LINE 54:
_T4d7:
	__asm        jmp    near ptr 0x004B9966;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b9973
void HotSpot::HotSpot(struct HotSpotResourceRecord* hotSpotResourceRecord) {
	int32_t i;
	long lCount;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x004B99B1;
// LINE 66:
	__asm        mov    eax, hotSpotResourceRecord;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 67:
	__asm        mov    eax, hotSpotResourceRecord;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 68:
	__asm        mov    eax, hotSpotResourceRecord;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCount, eax;
// LINE 70:
	__asm        mov    i, 0;
	__asm        jmp    _T73;
_T70:
	__asm        inc    i;
_T73:
	__asm        mov    eax, lCount;
	__asm        cmp    i, eax;
	__asm        jge    _T4f0;

	__asm        mov    eax, i;
	__asm        mov    ecx, hotSpotResourceRecord;
	__asm        mov    eax, [ecx+eax*8+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, hotSpotResourceRecord;
	__asm        mov    eax, [ecx+eax*8+0x10];
	__asm        mov    [ebp-0x18], eax;
// LINE 72:
	__asm        jmp    near ptr 0x004B9A11;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004B9A22;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T10f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004B9A51;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tfb;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x1C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Tfb;
_Tfb:
	__asm        jmp    near ptr 0x004B9A73;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4e6;
_T10f:
	__asm        jmp    near ptr 0x004B9A87;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1f1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004B9AD4;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T180;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T180;
_T180:
	__asm        jmp    near ptr 0x004B9AF8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x4C], eax;
_T1a0:
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x4C], eax;
	__asm        je     _T1cc;

	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        sub    dword ptr [ebp-0x4C], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x48];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T1a0;
_T1cc:
	__asm        jmp    near ptr 0x004B9B44;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x90];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4e1;
_T1f1:
	__asm        jmp    near ptr 0x004B9B69;

	__asm        jmp    near ptr 0x004B9B6E;

	__asm        jmp    near ptr 0x004B9B73;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T24b;

	__asm        jmp    near ptr 0x004B9B95;

	__asm        jmp    near ptr 0x004B9B9A;

	__asm        jmp    near ptr 0x004B9B9F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T298;
_T24b:
	__asm        mov    dword ptr [ebp-0x34], 0x200;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T280;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T286;
_T280:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
_T286:
	__asm        jmp    near ptr 0x004B9BFE;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T298;
_T298:
	__asm        jmp    near ptr 0x004B9C10;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B9C26;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x74], eax;
_T2c5:
	__asm        mov    eax, [ebp-0x74];
	__asm        cmp    [ebp-0x90], eax;
	__asm        je     _T31c;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x74], 8;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        add    dword ptr [ebp-0x70], 8;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004B9C66;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T312;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x6C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T312;
_T312:
	__asm        jmp    near ptr 0x004B9C8A;

	__asm        jmp    _T2c5;
_T31c:
	__asm        jmp    near ptr 0x004B9C94;

	__asm        jmp    near ptr 0x004B9C99;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004B9CC5;

	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T36f;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x5C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T36f;
_T36f:
	__asm        jmp    near ptr 0x004B9CE7;

	__asm        jmp    near ptr 0x004B9CEC;

	__asm        jmp    near ptr 0x004B9CF1;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
_T3c0:
	__asm        mov    eax, [ebp-0x88];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T426;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x78], eax;
	__asm        add    dword ptr [ebp-0x8C], 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    dword ptr [ebp-0x84], 8;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004B9D70;

	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T41c;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x80];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T41c;
_T41c:
	__asm        jmp    near ptr 0x004B9D94;

	__asm        jmp    _T3c0;
_T426:
	__asm        jmp    near ptr 0x004B9D9E;

	__asm        jmp    near ptr 0x004B9DA3;

	__asm        jmp    near ptr 0x004B9DA8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x30], eax;
_T441:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T461;

	__asm        jmp    near ptr 0x004B9DCB;

	__asm        add    dword ptr [ebp-0x30], 8;
	__asm        jmp    _T441;
_T461:
	__asm        jmp    near ptr 0x004B9DD9;

	__asm        jmp    near ptr 0x004B9DDE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004B9DFB;

	__asm        jmp    near ptr 0x004B9E00;

	__asm        mov    eax, [ebp-0x28];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x004B9E17;

	__asm        jmp    near ptr 0x004B9E1C;

	__asm        jmp    near ptr 0x004B9E21;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4e1:
	__asm        jmp    _T4e6;
_T4e6:
	__asm        jmp    near ptr 0x004B9E5E;
// LINE 73:
	__asm        jmp    _T70;
// LINE 74:
_T4f0:
	__asm        jmp    near ptr 0x004B9E68;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b9e75
void HotSpot::HotSpot(long lNewID, struct SparkalRect& rectHotspot) {

	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x004B9ECB;

	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
// LINE 89:
	__asm        jmp    near ptr 0x004B9EE1;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004B9EF2;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tdd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004B9F21;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tc9;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Tc9;
_Tc9:
	__asm        jmp    near ptr 0x004B9F43;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4c3;
_Tdd:
	__asm        jmp    near ptr 0x004B9F57;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1bf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004B9FA4;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T14e;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x58];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T14e;
_T14e:
	__asm        jmp    near ptr 0x004B9FC8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x54], eax;
_T16e:
	__asm        mov    eax, [ebp-0x98];
	__asm        cmp    [ebp-0x54], eax;
	__asm        je     _T19a;

	__asm        sub    dword ptr [ebp-0x50], 8;
	__asm        sub    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T16e;
_T19a:
	__asm        jmp    near ptr 0x004BA014;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x98];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4be;
_T1bf:
	__asm        jmp    near ptr 0x004BA039;

	__asm        jmp    near ptr 0x004BA03E;

	__asm        jmp    near ptr 0x004BA043;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T219;

	__asm        jmp    near ptr 0x004BA065;

	__asm        jmp    near ptr 0x004BA06A;

	__asm        jmp    near ptr 0x004BA06F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T266;
_T219:
	__asm        mov    dword ptr [ebp-0x3C], 0x200;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T24e;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T254;
_T24e:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T254:
	__asm        jmp    near ptr 0x004BA0CE;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T266;
_T266:
	__asm        jmp    near ptr 0x004BA0E0;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004BA0F6;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x7C], eax;
_T293:
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    [ebp-0x98], eax;
	__asm        je     _T2ea;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        add    dword ptr [ebp-0x7C], 8;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        add    dword ptr [ebp-0x78], 8;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004BA136;

	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T2e0;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x74];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T2e0;
_T2e0:
	__asm        jmp    near ptr 0x004BA15A;

	__asm        jmp    _T293;
_T2ea:
	__asm        jmp    near ptr 0x004BA164;

	__asm        jmp    near ptr 0x004BA169;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004BA195;

	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T33d;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x64];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T33d;
_T33d:
	__asm        jmp    near ptr 0x004BA1B7;

	__asm        jmp    near ptr 0x004BA1BC;

	__asm        jmp    near ptr 0x004BA1C1;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x94], eax;
_T38e:
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x94], eax;
	__asm        je     _T403;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x80], eax;
	__asm        add    dword ptr [ebp-0x94], 8;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        add    dword ptr [ebp-0x8C], 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004BA249;

	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T3f9;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x88];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T3f9;
_T3f9:
	__asm        jmp    near ptr 0x004BA273;

	__asm        jmp    _T38e;
_T403:
	__asm        jmp    near ptr 0x004BA27D;

	__asm        jmp    near ptr 0x004BA282;

	__asm        jmp    near ptr 0x004BA287;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x38], eax;
_T41e:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T43e;

	__asm        jmp    near ptr 0x004BA2AA;

	__asm        add    dword ptr [ebp-0x38], 8;
	__asm        jmp    _T41e;
_T43e:
	__asm        jmp    near ptr 0x004BA2B8;

	__asm        jmp    near ptr 0x004BA2BD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BA2DA;

	__asm        jmp    near ptr 0x004BA2DF;

	__asm        mov    eax, [ebp-0x30];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x004BA2F6;

	__asm        jmp    near ptr 0x004BA2FB;

	__asm        jmp    near ptr 0x004BA300;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4be:
	__asm        jmp    _T4c3;
_T4c3:
	__asm        jmp    near ptr 0x004BA33D;

	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
// LINE 90:
	__asm        jmp    near ptr 0x004BA354;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004BA365;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T55f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004BA39D;

	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T54b;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x9C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T54b;
_T54b:
	__asm        jmp    near ptr 0x004BA3C5;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T903;
_T55f:
	__asm        jmp    near ptr 0x004BA3D9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T66b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004BA432;

	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _T5e5;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0xD0];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T5e5;
_T5e5:
	__asm        jmp    near ptr 0x004BA45F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0xCC], eax;
_T60b:
	__asm        mov    eax, [ebp-0xE4];
	__asm        cmp    [ebp-0xCC], eax;
	__asm        je     _T646;

	__asm        sub    dword ptr [ebp-0xC8], 8;
	__asm        sub    dword ptr [ebp-0xCC], 8;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0xC8];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T60b;
_T646:
	__asm        jmp    near ptr 0x004BA4C0;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0xE4];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T8fe;
_T66b:
	__asm        jmp    near ptr 0x004BA4E5;

	__asm        jmp    near ptr 0x004BA4EA;

	__asm        jmp    near ptr 0x004BA4EF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T6c8;

	__asm        jmp    near ptr 0x004BA511;

	__asm        jmp    near ptr 0x004BA516;

	__asm        jmp    near ptr 0x004BA51B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T73f;
_T6c8:
	__asm        mov    dword ptr [ebp-0xB4], 0x200;
	__asm        lea    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    dword ptr [ebp-0xB8], 1;
	__asm        lea    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, [ebp-0xBC];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T71b;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T727;
_T71b:
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
_T727:
	__asm        jmp    near ptr 0x004BA5A1;

	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T73f;
_T73f:
	__asm        jmp    near ptr 0x004BA5B9;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004BA5D5;

	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   uninitialized_copy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004BA5FA;

	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004BA632;

	__asm        cmp    dword ptr [ebp-0xDC], 0;
	__asm        je     _T7e0;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0xDC];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T7e0;
_T7e0:
	__asm        jmp    near ptr 0x004BA65A;

	__asm        jmp    near ptr 0x004BA65F;

	__asm        jmp    near ptr 0x004BA664;

	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xA4];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   uninitialized_copy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004BA6A7;

	__asm        jmp    near ptr 0x004BA6AC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB0], eax;
_T846:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xB0];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T86c;

	__asm        jmp    near ptr 0x004BA6D5;

	__asm        add    dword ptr [ebp-0xB0], 8;
	__asm        jmp    _T846;
_T86c:
	__asm        jmp    near ptr 0x004BA6E6;

	__asm        jmp    near ptr 0x004BA6EB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BA70E;

	__asm        jmp    near ptr 0x004BA713;

	__asm        mov    eax, [ebp-0xA8];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0xA4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x004BA730;

	__asm        jmp    near ptr 0x004BA735;

	__asm        jmp    near ptr 0x004BA73A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0xA4];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T8fe:
	__asm        jmp    _T903;
_T903:
	__asm        jmp    near ptr 0x004BA77D;
// LINE 91:
	__asm        jmp    near ptr 0x004BA782;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ba78f
class HotSpot& HotSpot::operator=(const class HotSpot& newHotSpot) {
// LINE 102:
	__asm        mov    eax, newHotSpot;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 103:
	__asm        mov    eax, this;
	__asm        jmp    _T3e5;
// LINE 105:
_T20:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 106:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 107:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, newHotSpot;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        jne    _T4f;

	__asm        jmp    _T3dd;
_T4f:
	__asm        jmp    near ptr 0x004BA7E3;

	__asm        jmp    near ptr 0x004BA7E8;

	__asm        jmp    near ptr 0x004BA7ED;

	__asm        jmp    near ptr 0x004BA7F2;

	__asm        jmp    near ptr 0x004BA7F7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, newHotSpot;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jae    _T199;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
_T97:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tb4;

	__asm        jmp    near ptr 0x004BA83A;

	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T97;
_Tb4:
	__asm        jmp    near ptr 0x004BA848;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BA862;

	__asm        jmp    near ptr 0x004BA867;

	__asm        jmp    near ptr 0x004BA86C;

	__asm        jmp    near ptr 0x004BA871;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004BA888;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004BA8A1;

	__asm        jmp    near ptr 0x004BA8A6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x44], eax;
_T132:
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    [ebp-0x44], eax;
	__asm        je     _T186;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr [ebp-0x44], 8;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr [ebp-0x3C], 8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004BA8EC;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T17c;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x38];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T17c;
_T17c:
	__asm        jmp    near ptr 0x004BA910;

	__asm        jmp    _T132;
_T186:
	__asm        jmp    near ptr 0x004BA91A;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T3a6;
_T199:
	__asm        jmp    near ptr 0x004BA92D;

	__asm        jmp    near ptr 0x004BA932;

	__asm        jmp    near ptr 0x004BA937;

	__asm        jmp    near ptr 0x004BA93C;

	__asm        jmp    near ptr 0x004BA941;

	__asm        jmp    near ptr 0x004BA946;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, newHotSpot;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jb     _T268;

	__asm        jmp    near ptr 0x004BA971;

	__asm        jmp    near ptr 0x004BA976;

	__asm        jmp    near ptr 0x004BA97B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
_T207:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     _T230;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    _T207;
_T230:
	__asm        jmp    near ptr 0x004BA9C4;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
_T241:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T25e;

	__asm        jmp    near ptr 0x004BA9E4;

	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        jmp    _T241;
_T25e:
	__asm        jmp    near ptr 0x004BA9F2;

	__asm        jmp    _T3a6;
_T268:
	__asm        jmp    near ptr 0x004BA9FC;

	__asm        jmp    near ptr 0x004BAA01;

	__asm        jmp    near ptr 0x004BAA06;

	__asm        jmp    near ptr 0x004BAA0B;

	__asm        jmp    near ptr 0x004BAA10;

	__asm        jmp    near ptr 0x004BAA15;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T2b3:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     _T2dc;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T2b3;
_T2dc:
	__asm        jmp    near ptr 0x004BAA70;

	__asm        jmp    near ptr 0x004BAA75;

	__asm        jmp    near ptr 0x004BAA7A;

	__asm        jmp    near ptr 0x004BAA7F;

	__asm        jmp    near ptr 0x004BAA84;

	__asm        jmp    near ptr 0x004BAA89;

	__asm        jmp    near ptr 0x004BAA8E;

	__asm        jmp    near ptr 0x004BAA93;

	__asm        jmp    near ptr 0x004BAA98;

	__asm        jmp    near ptr 0x004BAA9D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x5C], eax;
_T34d:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        je     _T3a1;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr [ebp-0x5C], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004BAB07;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T397;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T397;
_T397:
	__asm        jmp    near ptr 0x004BAB2B;

	__asm        jmp    _T34d;
_T3a1:
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    near ptr 0x004BAB3A;

	__asm        jmp    near ptr 0x004BAB3F;

	__asm        jmp    near ptr 0x004BAB44;

	__asm        jmp    near ptr 0x004BAB49;

	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3dd;
// LINE 108:
_T3dd:
	__asm        mov    eax, this;
	__asm        jmp    _T3e5;
// LINE 109:
_T3e5:
}

// FUNCTION: COPTER_D 0x004bab7b
int32_t operator==(const class HotSpot& hs1, const class HotSpot& hs2) {
// LINE 117:
	__asm        mov    eax, hs2;
	__asm        mov    ecx, hs1;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        je     _T20;
// LINE 118:
	__asm        xor    eax, eax;
	__asm        jmp    _T185;
// LINE 119:
_T20:
	__asm        mov    eax, hs1;
	__asm        mov    ecx, hs2;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        je     _T39;
// LINE 120:
	__asm        xor    eax, eax;
	__asm        jmp    _T185;
// LINE 121:
_T39:
	__asm        jmp    near ptr 0x004BABB9;

	__asm        jmp    near ptr 0x004BABBE;

	__asm        jmp    near ptr 0x004BABC3;

	__asm        jmp    near ptr 0x004BABC8;

	__asm        jmp    near ptr 0x004BABCD;

	__asm        jmp    near ptr 0x004BABD2;

	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, hs1;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, hs2;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, hs2;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jne    _T14c;

	__asm        jmp    near ptr 0x004BABFD;

	__asm        jmp    near ptr 0x004BAC02;

	__asm        jmp    near ptr 0x004BAC07;

	__asm        mov    eax, hs2;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x14], eax;
_Tb3:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x14], eax;
	__asm        je     _T107;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jne    _Te6;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Te6;

	__asm        jmp    _Teb;
_Te6:
	__asm        jmp    _T107;
_Teb:
	__asm        jmp    _Tfa;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T107;
_Tfa:
	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _Tb3;
_T107:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004BAC93;

	__asm        jmp    near ptr 0x004BAC98;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T12e;

	__asm        jmp    _T133;
_T12e:
	__asm        jmp    _T14c;
_T133:
	__asm        jmp    _T142;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T14c;
_T142:
	__asm        jmp    _T160;

	__asm        jmp    _T14c;
_T14c:
	__asm        jmp    _T15b;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T160;
_T15b:
	__asm        jmp    _T165;
_T160:
	__asm        jmp    _T17b;
_T165:
	__asm        jmp    _T174;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T17b;
// LINE 122:
_T174:
	__asm        xor    eax, eax;
	__asm        jmp    _T185;
// LINE 123:
_T17b:
	__asm        mov    eax, 1;
	__asm        jmp    _T185;
// LINE 124:
_T185:
}

// FUNCTION: COPTER_D 0x004bad05
int32_t HotSpot::IsPointInHotspot(long lXPosition, long lYPosition) {
// LINE 133:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _Ta1;
// LINE 134:
	__asm        jmp    near ptr 0x004BAD23;

	__asm        jmp    near ptr 0x004BAD28;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax], ecx;
	__asm        jg     _T92;

	__asm        jmp    near ptr 0x004BAD3E;

	__asm        jmp    near ptr 0x004BAD43;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+8], ecx;
	__asm        jl     _T92;

	__asm        jmp    near ptr 0x004BAD5A;

	__asm        jmp    near ptr 0x004BAD5F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jg     _T92;

	__asm        jmp    near ptr 0x004BAD76;

	__asm        jmp    near ptr 0x004BAD7B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jl     _T92;

	__asm        mov    eax, 1;
	__asm        jmp    _T94;
_T92:
	__asm        xor    eax, eax;
_T94:
	__asm        jmp    _T9c;

	__asm        mov    eax, [ebp-4];
_T9c:
	__asm        jmp    _Tec;
// LINE 135:
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _Tc3;
// LINE 136:
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HotSpot::PointInCircle;
	__asm        jmp    _Tec;
// LINE 137:
_Tc3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _Te5;
// LINE 138:
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HotSpot::PointInPolygon;
	__asm        jmp    _Tec;
// LINE 139:
_Te5:
	__asm        xor    eax, eax;
	__asm        jmp    _Tec;
// LINE 140:
_Tec:
}

// FUNCTION: COPTER_D 0x004badf8
int32_t HotSpot::PointInCircle(long lXPosition, long lYPosition) {
	int32_t nDistanceToPosition;
	int32_t nRadiusOfCircle;

// LINE 160:
	__asm        jmp    near ptr 0x004BAE09;

	__asm        jmp    near ptr 0x004BAE0E;

	__asm        jmp    near ptr 0x004BAE13;

	__asm        jmp    near ptr 0x004BAE18;

	__asm        jmp    near ptr 0x004BAE1D;

	__asm        jmp    near ptr 0x004BAE22;

	__asm        jmp    near ptr 0x004BAE27;

	__asm        jmp    near ptr 0x004BAE2C;

	__asm        jmp    near ptr 0x004BAE31;

	__asm        jmp    near ptr 0x004BAE36;

	__asm        jmp    near ptr 0x004BAE3B;

	__asm        jmp    near ptr 0x004BAE40;

	__asm        jmp    near ptr 0x004BAE45;

	__asm        jmp    near ptr 0x004BAE4A;

	__asm        jmp    near ptr 0x004BAE4F;

	__asm        jmp    near ptr 0x004BAE54;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+0xC];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx];
	__asm        mov    ebx, this;
	__asm        mov    ebx, [ebx+8];
	__asm        sub    edx, [ebx+8];
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    nRadiusOfCircle, eax;
// LINE 165:
	__asm        jmp    near ptr 0x004BAEAA;

	__asm        jmp    near ptr 0x004BAEAF;

	__asm        jmp    near ptr 0x004BAEB4;

	__asm        jmp    near ptr 0x004BAEB9;

	__asm        jmp    near ptr 0x004BAEBE;

	__asm        jmp    near ptr 0x004BAEC3;

	__asm        jmp    near ptr 0x004BAEC8;

	__asm        jmp    near ptr 0x004BAECD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        sub    eax, lXPosition;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        sub    ecx, lXPosition;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        sub    ecx, lYPosition;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx+4];
	__asm        sub    edx, lYPosition;
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    nDistanceToPosition, eax;
// LINE 167:
	__asm        mov    eax, nRadiusOfCircle;
	__asm        cmp    nDistanceToPosition, eax;
	__asm        jg     _T124;

	__asm        mov    eax, 1;
	__asm        jmp    _T126;
_T124:
	__asm        xor    eax, eax;
_T126:
	__asm        jmp    near ptr 0x004BAF23;
// LINE 168:
}

// FUNCTION: COPTER_D 0x004baf2a
int32_t HotSpot::PointInPolygon(long lXPosition, long lYPosition) {
	int32_t j;
	int32_t i;
	int32_t nVertices;
	int32_t c;

// LINE 184:
	__asm        jmp    near ptr 0x004BAF3B;

	__asm        jmp    near ptr 0x004BAF40;

	__asm        jmp    near ptr 0x004BAF45;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    nVertices, eax;
// LINE 186:
	__asm        mov    i, 0;
	__asm        mov    c, 0;
	__asm        mov    eax, nVertices;
	__asm        dec    eax;
	__asm        mov    j, eax;
	__asm        jmp    _T50;
_T47:
	__asm        mov    eax, i;
	__asm        mov    j, eax;
	__asm        inc    i;
_T50:
	__asm        mov    eax, i;
	__asm        cmp    nVertices, eax;
	__asm        jle    _T199;
// LINE 191:
	__asm        jmp    near ptr 0x004BAF8B;

	__asm        jmp    near ptr 0x004BAF90;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _T9c;

	__asm        jmp    near ptr 0x004BAFAB;

	__asm        jmp    near ptr 0x004BAFB0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _Tdc;
_T9c:
	__asm        jmp    near ptr 0x004BAFCB;

	__asm        jmp    near ptr 0x004BAFD0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _T194;

	__asm        jmp    near ptr 0x004BAFEB;

	__asm        jmp    near ptr 0x004BAFF0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jle    _T194;
_Tdc:
	__asm        jmp    near ptr 0x004BB00B;

	__asm        jmp    near ptr 0x004BB010;

	__asm        jmp    near ptr 0x004BB015;

	__asm        jmp    near ptr 0x004BB01A;

	__asm        jmp    near ptr 0x004BB01F;

	__asm        jmp    near ptr 0x004BB024;

	__asm        jmp    near ptr 0x004BB029;

	__asm        jmp    near ptr 0x004BB02E;

	__asm        jmp    near ptr 0x004BB033;

	__asm        jmp    near ptr 0x004BB038;

	__asm        jmp    near ptr 0x004BB03D;

	__asm        jmp    near ptr 0x004BB042;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        sub    eax, [ecx+edx*8];
	__asm        mov    ecx, lYPosition;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, i;
	__asm        sub    ecx, [edx+ebx*8+4];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, j;
	__asm        mov    ecx, [ecx+edx*8+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, i;
	__asm        sub    ecx, [edx+ebx*8+4];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    ecx, [ecx+edx*8];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, lXPosition;
	__asm        jle    _T194;
// LINE 192:
	__asm        cmp    c, 0;
	__asm        jne    _T18d;

	__asm        mov    c, 1;
	__asm        jmp    _T194;
_T18d:
	__asm        mov    c, 0;
// LINE 193:
_T194:
	__asm        jmp    _T47;
// LINE 194:
_T199:
	__asm        mov    eax, c;
	__asm        jmp    near ptr 0x004BB0CB;
// LINE 195:
}

// FUNCTION: COPTER_D 0x004bb0d2
void HotSpot::GetBoundingRect(class MRect& rectBounds) {
	int32_t nMaxY;
	int32_t nMaxX;
	int32_t nMinY;
	int32_t i;
	int32_t nMinX;
	int32_t nRadiusOfCircle;
	int32_t nPointCount;

// LINE 211:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T80;
// LINE 212:
	__asm        jmp    near ptr 0x004BB0F0;

	__asm        jmp    near ptr 0x004BB0F5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
// LINE 213:
	__asm        jmp    near ptr 0x004BB107;

	__asm        jmp    near ptr 0x004BB10C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
// LINE 214:
	__asm        jmp    near ptr 0x004BB120;

	__asm        jmp    near ptr 0x004BB125;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
// LINE 215:
	__asm        jmp    near ptr 0x004BB139;

	__asm        jmp    near ptr 0x004BB13E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+0xC], eax;
// LINE 216:
	__asm        jmp    _T3c2;
// LINE 219:
_T80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T1b9;
// LINE 224:
	__asm        jmp    near ptr 0x004BB164;

	__asm        jmp    near ptr 0x004BB169;

	__asm        jmp    near ptr 0x004BB16E;

	__asm        jmp    near ptr 0x004BB173;

	__asm        jmp    near ptr 0x004BB178;

	__asm        jmp    near ptr 0x004BB17D;

	__asm        jmp    near ptr 0x004BB182;

	__asm        jmp    near ptr 0x004BB187;

	__asm        jmp    near ptr 0x004BB18C;

	__asm        jmp    near ptr 0x004BB191;

	__asm        jmp    near ptr 0x004BB196;

	__asm        jmp    near ptr 0x004BB19B;

	__asm        jmp    near ptr 0x004BB1A0;

	__asm        jmp    near ptr 0x004BB1A5;

	__asm        jmp    near ptr 0x004BB1AA;

	__asm        jmp    near ptr 0x004BB1AF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+0xC];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx];
	__asm        mov    ebx, this;
	__asm        mov    ebx, [ebx+8];
	__asm        sub    edx, [ebx+8];
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        fild   dword ptr [ebp-0x24];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        call   0x0056EBE8;
	__asm        mov    nRadiusOfCircle, eax;
// LINE 226:
	__asm        jmp    near ptr 0x004BB21E;

	__asm        jmp    near ptr 0x004BB223;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        sub    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
// LINE 227:
	__asm        jmp    near ptr 0x004BB238;

	__asm        jmp    near ptr 0x004BB23D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
// LINE 228:
	__asm        jmp    near ptr 0x004BB254;

	__asm        jmp    near ptr 0x004BB259;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        add    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
// LINE 229:
	__asm        jmp    near ptr 0x004BB26F;

	__asm        jmp    near ptr 0x004BB274;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+0xC], eax;
// LINE 230:
	__asm        jmp    _T3c2;
// LINE 233:
_T1b9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T38b;
// LINE 234:
	__asm        jmp    near ptr 0x004BB29D;

	__asm        jmp    near ptr 0x004BB2A2;

	__asm        jmp    near ptr 0x004BB2A7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    nPointCount, eax;
// LINE 235:
	__asm        cmp    nPointCount, 0;
	__asm        jg     _T228;
// LINE 236:
	__asm        mov    eax, rectBounds;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004BB2F5;
// LINE 237:
	__asm        jmp    _T3c2;
// LINE 239:
_T228:
	__asm        jmp    near ptr 0x004BB2FF;

	__asm        jmp    near ptr 0x004BB304;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    nMaxX, eax;
	__asm        mov    eax, nMaxX;
	__asm        mov    nMinX, eax;
// LINE 240:
	__asm        jmp    near ptr 0x004BB31A;

	__asm        jmp    near ptr 0x004BB31F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    nMaxY, eax;
	__asm        mov    eax, nMaxY;
	__asm        mov    nMinY, eax;
// LINE 242:
	__asm        mov    i, 1;
	__asm        jmp    _T26e;
_T26b:
	__asm        inc    i;
_T26e:
	__asm        mov    eax, i;
	__asm        cmp    nPointCount, eax;
	__asm        jle    _T363;
// LINE 243:
	__asm        jmp    near ptr 0x004BB351;

	__asm        jmp    near ptr 0x004BB356;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinX;
	__asm        cmp    [eax+ecx*8], edx;
	__asm        jge    _T2b2;
// LINE 244:
	__asm        jmp    near ptr 0x004BB370;

	__asm        jmp    near ptr 0x004BB375;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    nMinX, eax;
// LINE 245:
_T2b2:
	__asm        jmp    near ptr 0x004BB389;

	__asm        jmp    near ptr 0x004BB38E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinX;
	__asm        cmp    [eax+ecx*8], edx;
	__asm        jle    _T2ea;
// LINE 246:
	__asm        jmp    near ptr 0x004BB3A8;

	__asm        jmp    near ptr 0x004BB3AD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    nMaxX, eax;
// LINE 248:
_T2ea:
	__asm        jmp    near ptr 0x004BB3C1;

	__asm        jmp    near ptr 0x004BB3C6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinY;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jge    _T324;
// LINE 249:
	__asm        jmp    near ptr 0x004BB3E1;

	__asm        jmp    near ptr 0x004BB3E6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    nMinY, eax;
// LINE 250:
_T324:
	__asm        jmp    near ptr 0x004BB3FB;

	__asm        jmp    near ptr 0x004BB400;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinY;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jle    _T35e;
// LINE 251:
	__asm        jmp    near ptr 0x004BB41B;

	__asm        jmp    near ptr 0x004BB420;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    nMaxY, eax;
// LINE 252:
_T35e:
	__asm        jmp    _T26b;
// LINE 253:
_T363:
	__asm        mov    eax, nMinX;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
// LINE 254:
	__asm        mov    eax, nMinY;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
// LINE 255:
	__asm        mov    eax, nMaxX;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
// LINE 256:
	__asm        mov    eax, nMaxY;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+0xC], eax;
// LINE 257:
	__asm        jmp    _T3c2;
// LINE 261:
_T38b:
	__asm        mov    eax, rectBounds;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004BB48F;
// LINE 262:
	__asm        jmp    _T3c2;
_T3c2:
}

// FUNCTION: COPTER_D 0x004bb49b
int32_t LoadListFromResource(class list<HotSpot>& hotSpotList, int32_t nResourceID) {
	int32_t i;
	int32_t nHotspotRecordCount;
	char * chFileImage;
	struct HotSpotResourceRecord* currentHotspotRecord;
	int32_t nCurrentRecordStart;
	struct HotSpotResourceFileHeader* fileImage;
	class ResourceRCData resourceHangarHotspots;

// LINE 270:
	__asm        push   1;
	__asm        mov    eax, nResourceID;
	__asm        push   eax;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::ResourceRCData;
// LINE 278:
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::DataReference;
	__asm        mov    fileImage, eax;
// LINE 279:
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::DataReference;
	__asm        mov    chFileImage, eax;
// LINE 280:
	__asm        cmp    fileImage, 0;
	__asm        jne    _T51;
// LINE 281:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x38];
	__asm        jmp    _T4a7;
// LINE 282:
_T51:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        je     _T75;
// LINE 283:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    _T4a7;
// LINE 284:
_T75:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax], 0x54505348;
	__asm        je     _T9b;
// LINE 285:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x40];
	__asm        jmp    _T4a7;
// LINE 286:
_T9b:
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    nHotspotRecordCount, eax;
// LINE 287:
	__asm        mov    nCurrentRecordStart, 0x10;
// LINE 288:
	__asm        mov    i, 0;
	__asm        jmp    _Tba;
_Tb7:
	__asm        inc    i;
_Tba:
	__asm        mov    eax, nHotspotRecordCount;
	__asm        cmp    i, eax;
	__asm        jge    _T490;
// LINE 289:
	__asm        mov    eax, nCurrentRecordStart;
	__asm        add    eax, chFileImage;
	__asm        mov    currentHotspotRecord, eax;
	__asm        mov    eax, currentHotspotRecord;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x54];
	__asm        call   HotSpot::HotSpot;
	__asm        mov    [ebp-0xCC], eax;
// LINE 290:
	__asm        mov    eax, hotSpotList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004BB58F;

	__asm        jmp    near ptr 0x004BB594;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    list<HotSpot>::free_list, 0;
	__asm        je     _T131;

	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T39a;
_T131:
	__asm        mov    eax, list<HotSpot>::last;
	__asm        cmp    list<HotSpot>::next_avail, eax;
	__asm        jne    _T382;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB0], eax;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        jne    _T19c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BB62D;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T19c:
	__asm        jmp    near ptr 0x004BB63C;

	__asm        jmp    near ptr 0x004BB641;

	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    dword ptr [ebp-0x88], 0x92;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    dword ptr [ebp-0x8C], 1;
	__asm        lea    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T205;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T211;
_T205:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x98], eax;
_T211:
	__asm        jmp    near ptr 0x004BB6B1;

	__asm        jmp    near ptr 0x004BB6B6;

	__asm        jmp    near ptr 0x004BB6BB;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC0], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        jne    _T297;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BB728;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T297:
	__asm        jmp    near ptr 0x004BB737;

	__asm        jmp    near ptr 0x004BB73C;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    list<HotSpot>::buffer_list, eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<HotSpot>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x9C], 0x92;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA0], 1;
	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T328;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T334;
_T328:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
_T334:
	__asm        jmp    near ptr 0x004BB7D4;

	__asm        jmp    near ptr 0x004BB7D9;

	__asm        jmp    near ptr 0x004BB7DE;

	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, list<HotSpot>::next_avail;
	__asm        mov    list<HotSpot>::last, eax;
	__asm        jmp    near ptr 0x004BB800;

	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T39a;
_T382:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x80], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0xC4], eax;
_T39a:
	__asm        jmp    near ptr 0x004BB83A;

	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x004BB848;

	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004BB856;

	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T3d9;

	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   HotSpot::HotSpot;
	__asm        jmp    _T3d9;
_T3d9:
	__asm        jmp    near ptr 0x004BB879;

	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, hotSpotList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004BB8BF;

	__asm        jmp    near ptr 0x004BB8C4;

	__asm        jmp    near ptr 0x004BB8C9;

	__asm        jmp    near ptr 0x004BB8CE;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x60], eax;
_T439:
	__asm        mov    eax, [ebp-0x60];
	__asm        cmp    [ebp-0x48], eax;
	__asm        je     _T453;

	__asm        jmp    near ptr 0x004BB8E5;

	__asm        add    dword ptr [ebp-0x60], 8;
	__asm        jmp    _T439;
_T453:
	__asm        jmp    near ptr 0x004BB8F3;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BB90A;

	__asm        jmp    near ptr 0x004BB90F;

	__asm        jmp    near ptr 0x004BB914;
// LINE 291:
	__asm        mov    eax, currentHotspotRecord;
	__asm        mov    eax, [eax+0xC];
	__asm        shl    eax, 3;
	__asm        add    eax, nCurrentRecordStart;
	__asm        add    eax, 0x10;
	__asm        mov    nCurrentRecordStart, eax;
// LINE 292:
	__asm        jmp    _Tb7;
// LINE 293:
_T490:
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x58];
	__asm        jmp    _T4a7;
// LINE 294:
_T4a7:
}



// Contribution: 1:000ba950-000ba9b8 Module: 4, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004bb950
// allocate



// Contribution: 1:000ba9c0-000baa29 Module: 4, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004bb9c0
// uninitialized_copy

