// Module: Hotspot.obj
// Source: C:\Copter\source\sparkal\Hotspot.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: /*packed*/ class HotSpot (forward reference);
class HotSpot{ // packed(0x14 bytes) TI: 0x1e12
public:
	void HotSpot(long, /*packed*/ struct SparkalRect&);
	void HotSpot(/*packed*/ struct HotSpotResourceRecord*);
	void HotSpot(long, long, long, long[2]*);
	void HotSpot(const /*packed*/ class HotSpot&);
	void HotSpot();
	/*packed*/ class HotSpot& operator=(const /*packed*/ class HotSpot&);
	int32_t IsPointInHotspot(long, long);
	void GetBoundingRect(/*packed*/ class MRect&);
	/*+0x0*/   long lID;
	/*+0x4*/   long lType;
protected:
	int32_t PointInRect(long, long);
	int32_t PointInCircle(long, long);
	int32_t PointInPolygon(long, long);
	/*+0x8*/   /*packed*/ class vector<MPoint> pointArray; // 0xc bytes
};

// Type: long;

// Type: int32_t;

// Type: /*packed*/ struct HotSpotResourceRecord (forward reference);
struct HotSpotResourceRecord{ // packed(0x18 bytes) TI: 0x13c2
	/*+0x0*/   long lGroup;
	/*+0x4*/   long lID;
	/*+0x8*/   long lType;
	/*+0xc*/   long lCount;
	/*+0x10*/  long lCoordinates[1][2]; // 0x8 bytes
};

// Type: /*packed*/ struct SparkalRect (forward reference);
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class list<HotSpot> (forward reference);
class list<HotSpot>{ // packed(0x8 bytes) TI: 0x121e
	using void_pointer = void * __ptr32;
	struct list<HotSpot>::list_node{ // packed(0x1c bytes) TI: 0x1244
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class HotSpot data; // 0x14 bytes
	};
protected:
	static /*packed*/ class allocator<list<HotSpot>::list_node> list_node_allocator;
	static /*packed*/ class allocator<HotSpot> value_allocator;
	using value_type = /*packed*/ class HotSpot;
	using value_allocator_type = /*packed*/ class allocator<HotSpot>;
	using pointer = /*packed*/ class HotSpot*;
	using reference = /*packed*/ class HotSpot&;
	using const_reference = const /*packed*/ class HotSpot&;
	using list_node_allocator_type = /*packed*/ class allocator<list<HotSpot>::list_node>;
	using link_type = /*packed*/ struct list<HotSpot>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<HotSpot>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1242
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<HotSpot>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<HotSpot>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<HotSpot>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<HotSpot>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<HotSpot>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<HotSpot>::list_node *free_list;
	static /*packed*/ struct list<HotSpot>::list_node *next_avail;
	static /*packed*/ struct list<HotSpot>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<HotSpot>::list_node* get_node();
	void put_node(/*packed*/ struct list<HotSpot>::list_node*);
	/*+0x0*/   /*packed*/ struct list<HotSpot>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
	{ // packed(0x4 bytes) TI: 0x1240
	protected:
		/*+0x0*/   /*packed*/ struct list<HotSpot>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<HotSpot>::iterator&);
		/*packed*/ class HotSpot& operator*();
		/*packed*/ class list<HotSpot>::iterator operator++(int32_t);
		/*packed*/ class list<HotSpot>::iterator& operator++();
		/*packed*/ class list<HotSpot>::iterator operator--(int32_t);
		/*packed*/ class list<HotSpot>::iterator& operator--();
	};
	class list<HotSpot>::const_iterator : public bidirectional_iterator<HotSpot,int>
	{ // packed(0x4 bytes) TI: 0x1233
	protected:
		/*+0x0*/   /*packed*/ struct list<HotSpot>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<HotSpot>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<HotSpot>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<HotSpot>::const_iterator&);
		const /*packed*/ class HotSpot& operator*();
		/*packed*/ class list<HotSpot>::const_iterator operator++(int32_t);
		/*packed*/ class list<HotSpot>::const_iterator& operator++();
		/*packed*/ class list<HotSpot>::const_iterator operator--(int32_t);
		/*packed*/ class list<HotSpot>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int>;
public:
	void list<HotSpot>(const /*packed*/ class list<HotSpot>&);
	void list<HotSpot>(const /*packed*/ class HotSpot*, const /*packed*/ class HotSpot*);
	void list<HotSpot>(uint32_t, const /*packed*/ class HotSpot&);
	void list<HotSpot>();
	/*packed*/ class list<HotSpot>::const_iterator begin();
	/*packed*/ class list<HotSpot>::iterator begin();
	/*packed*/ class list<HotSpot>::const_iterator end();
	/*packed*/ class list<HotSpot>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::const_iterator,HotSpot,HotSpot const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<HotSpot>::iterator,HotSpot,HotSpot &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class HotSpot& front();
	/*packed*/ class HotSpot& front();
	const /*packed*/ class HotSpot& back();
	/*packed*/ class HotSpot& back();
	void swap(/*packed*/ class list<HotSpot>&);
	void insert(/*packed*/ class list<HotSpot>::iterator, uint32_t, const /*packed*/ class HotSpot&);
	void insert(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>::const_iterator, /*packed*/ class list<HotSpot>::const_iterator);
	void insert(/*packed*/ class list<HotSpot>::iterator, const /*packed*/ class HotSpot*, const /*packed*/ class HotSpot*);
	/*packed*/ class list<HotSpot>::iterator insert(/*packed*/ class list<HotSpot>::iterator, const /*packed*/ class HotSpot&);
	void push_front(const /*packed*/ class HotSpot&);
	void push_back(const /*packed*/ class HotSpot&);
	void erase(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>::iterator);
	void erase(/*packed*/ class list<HotSpot>::iterator);
	void pop_front();
	void pop_back();
	void ~list<HotSpot>();
	/*packed*/ class list<HotSpot>& operator=(const /*packed*/ class list<HotSpot>&);
protected:
	void transfer(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>::iterator);
public:
	void splice(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>&, /*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>::iterator);
	void splice(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>&, /*packed*/ class list<HotSpot>::iterator);
	void splice(/*packed*/ class list<HotSpot>::iterator, /*packed*/ class list<HotSpot>&);
	void remove(const /*packed*/ class HotSpot&);
	void unique();
	void merge(/*packed*/ class list<HotSpot>&);
	void reverse();
	void sort();
};

// Type: char *;

// Type: /*packed*/ struct HotSpotResourceFileHeader (forward reference);
struct HotSpotResourceFileHeader{ // packed(0x10 bytes) TI: 0x211c
	/*+0x0*/   long lType;
	/*+0x4*/   long lGroupCount;
	/*+0x8*/   long lLittleEndian;
	/*+0xc*/   long lRecordCount;
};

// Type: /*packed*/ class ResourceRCData;
// VTABLE: COPTER_D 0x0058f648
class ResourceRCData{ // packed(0x1c bytes) TI: 0x2113
public:
	void ResourceRCData(/*packed*/ class ResourceRCData&);
	void ResourceRCData(int32_t, int32_t);
	void ResourceRCData();
	void ~ResourceRCData();
	/*packed*/ class ResourceRCData& operator=(/*packed*/ class ResourceRCData&);
	virtual void Reset(); // vtable+0x0
	virtual int32_t ReadResource(); // vtable+0x4
	unsigned long DataSize();
	char * DataReference();
protected:
	/*+0x4*/   int32_t nResource;
	/*+0x8*/   char * chData;
	/*+0xc*/   int32_t bWeOwnTheData;
	/*+0x10*/  void * __ptr32 hFoundResource;
	/*+0x14*/  void * __ptr32 hInstance;
	/*+0x18*/  void * __ptr32 hResource;
};

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:000b8040-000ba946 Module: 4, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004b9040
void HotSpot::HotSpot() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T42;
// LINE 26:
_T42:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b908f
void HotSpot::HotSpot(const /*packed*/ class HotSpot& newHotSpot) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T2f;
// LINE 35:
_T2f:
	this->lID = newHotSpot.lID;
// LINE 36:
	this->lType = newHotSpot.lType;
// LINE 37:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, newHotSpot;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        jne    _T5e;

	__asm        jmp    _T3ec;
_T5e:
	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        jmp    _T6d;
_T6d:
	__asm        jmp    _T72;
_T72:
	__asm        jmp    _T77;
_T77:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jbe    _T1a8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
_Ta6:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tc3;

	__asm        jmp    _Tba;
_Tba:
	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _Ta6;
_Tc3:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Te2;
_Te2:
	__asm        jmp    _Te7;
_Te7:
	__asm        jmp    _Tec;
_Tec:
	__asm        jmp    _Tf1;
_Tf1:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T108;
_T108:
	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T121;
_T121:
	__asm        jmp    _T126;
_T126:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x44], eax;
_T141:
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    [ebp-0x44], eax;
	__asm        je     _T195;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr [ebp-0x44], 8;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr [ebp-0x3C], 8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T16c;
_T16c:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T18b;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x38];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T18b;
_T18b:
	__asm        jmp    _T190;
_T190:
	__asm        jmp    _T141;
_T195:
	__asm        jmp    _T19a;
_T19a:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T3b5;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        jmp    _T1b7;
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        jmp    _T1c1;
_T1c1:
	__asm        jmp    _T1c6;
_T1c6:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        ja     _T277;

	__asm        jmp    _T1f1;
_T1f1:
	__asm        jmp    _T1f6;
_T1f6:
	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
_T216:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     _T23f;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    _T216;
_T23f:
	__asm        jmp    _T244;
_T244:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
_T250:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T26d;

	__asm        jmp    _T264;
_T264:
	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        jmp    _T250;
_T26d:
	__asm        jmp    _T272;
_T272:
	__asm        jmp    _T3b5;
_T277:
	__asm        jmp    _T27c;
_T27c:
	__asm        jmp    _T281;
_T281:
	__asm        jmp    _T286;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        jmp    _T290;
_T290:
	__asm        jmp    _T295;
_T295:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T2c2:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     _T2eb;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T2c2;
_T2eb:
	__asm        jmp    _T2f0;
_T2f0:
	__asm        jmp    _T2f5;
_T2f5:
	__asm        jmp    _T2fa;
_T2fa:
	__asm        jmp    _T2ff;
_T2ff:
	__asm        jmp    _T304;
_T304:
	__asm        jmp    _T309;
_T309:
	__asm        jmp    _T30e;
_T30e:
	__asm        jmp    _T313;
_T313:
	__asm        jmp    _T318;
_T318:
	__asm        jmp    _T31d;
_T31d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x5C], eax;
_T35c:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        je     _T3b0;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr [ebp-0x5C], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T387;
_T387:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    _T3ab;
_T3ab:
	__asm        jmp    _T35c;
_T3b0:
	__asm        jmp    _T3b5;
_T3b5:
	__asm        jmp    _T3ba;
_T3ba:
	__asm        jmp    _T3bf;
_T3bf:
	__asm        jmp    _T3c4;
_T3c4:
	__asm        jmp    _T3c9;
_T3c9:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3ec;
// LINE 38:
_T3ec:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b948a
void HotSpot::HotSpot(long lNewID, long lNewType, long lNewCount, long *lCoordinates[2]) {
	/*bp-0x4*/   int32_t i;


	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, lNewType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T55;
// LINE 50:
_T55:
	__asm        mov    i, 0;
	__asm        jmp    _T64;
_T61:
	i++;
_T64:
	__asm        mov    eax, lNewCount;
	__asm        cmp    i, eax;
	__asm        jge    _T4d7;

	__asm        mov    eax, i;
	__asm        mov    ecx, lCoordinates;
	__asm        mov    eax, [ecx+eax*8+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, lCoordinates;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    [ebp-0x14], eax;
// LINE 52:
	__asm        jmp    _T8e;
_T8e:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tff;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tce;
_Tce:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Teb;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Teb;
_Teb:
	__asm        jmp    _Tf0;
_Tf0:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4cd;
_Tff:
	__asm        jmp    _T104;
_T104:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T151;
_T151:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T170;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x4C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x48], eax;
_T190:
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T1bc;

	__asm        sub    dword ptr [ebp-0x44], 8;
	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x44];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T190;
_T1bc:
	__asm        jmp    _T1c1;
_T1c1:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x8C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4c8;
_T1e1:
	__asm        jmp    _T1e6;
_T1e6:
	__asm        jmp    _T1eb;
_T1eb:
	__asm        jmp    _T1f0;
_T1f0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T23b;

	__asm        jmp    _T212;
_T212:
	__asm        jmp    _T217;
_T217:
	__asm        jmp    _T21c;
_T21c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T288;
_T23b:
	__asm        mov    dword ptr [ebp-0x30], 0x200;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T270;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T276;
_T270:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
_T276:
	__asm        jmp    _T27b;
_T27b:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T288;
_T288:
	__asm        jmp    _T28d;
_T28d:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T2a3;
_T2a3:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x70], eax;
_T2b5:
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T30c;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x60], eax;
	__asm        add    dword ptr [ebp-0x70], 8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x6C], 8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T2e3;
_T2e3:
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T302;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x68];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T302;
_T302:
	__asm        jmp    _T307;
_T307:
	__asm        jmp    _T2b5;
_T30c:
	__asm        jmp    _T311;
_T311:
	__asm        jmp    _T316;
_T316:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x20];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T342;
_T342:
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T35f;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    edx, [ebp-0x58];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T35f;
_T35f:
	__asm        jmp    _T364;
_T364:
	__asm        jmp    _T369;
_T369:
	__asm        jmp    _T36e;
_T36e:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x20];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x88], eax;
_T3ad:
	__asm        mov    eax, [ebp-0x84];
	__asm        cmp    [ebp-0x88], eax;
	__asm        je     _T40d;

	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x74], eax;
	__asm        add    dword ptr [ebp-0x88], 8;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x78], eax;
	__asm        add    dword ptr [ebp-0x80], 8;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T3e4;
_T3e4:
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T403;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x7C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T403;
_T403:
	__asm        jmp    _T408;
_T408:
	__asm        jmp    _T3ad;
_T40d:
	__asm        jmp    _T412;
_T412:
	__asm        jmp    _T417;
_T417:
	__asm        jmp    _T41c;
_T41c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T428:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T448;

	__asm        jmp    _T43f;
_T43f:
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T428;
_T448:
	__asm        jmp    _T44d;
_T44d:
	__asm        jmp    _T452;
_T452:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T46f;
_T46f:
	__asm        jmp    _T474;
_T474:
	__asm        mov    eax, [ebp-0x24];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T48b;
_T48b:
	__asm        jmp    _T490;
_T490:
	__asm        jmp    _T495;
_T495:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x20];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4c8:
	__asm        jmp    _T4cd;
_T4cd:
	__asm        jmp    _T4d2;
// LINE 53:
_T4d2:
	__asm        jmp    _T61;
// LINE 54:
_T4d7:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b9973
void HotSpot::HotSpot(/*packed*/ struct HotSpotResourceRecord *hotSpotResourceRecord) {
	/*bp-0x4*/   long lCount;
	/*bp-0x8*/   int32_t i;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T3e;
// LINE 66:
_T3e:
	this->lID = hotSpotResourceRecord->lID;
// LINE 67:
	this->lType = hotSpotResourceRecord->lType;
// LINE 68:
	lCount = hotSpotResourceRecord->lCount;
// LINE 70:
	__asm        mov    i, 0;
	__asm        jmp    _T73;
_T70:
	i++;
_T73:
	__asm        mov    eax, lCount;
	__asm        cmp    i, eax;
	__asm        jge    _T4f0;

	__asm        mov    eax, i;
	__asm        mov    ecx, hotSpotResourceRecord;
	__asm        mov    eax, [ecx+eax*8+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, hotSpotResourceRecord;
	__asm        mov    eax, [ecx+eax*8+0x10];
	__asm        mov    [ebp-0x18], eax;
// LINE 72:
	__asm        jmp    _T9e;
_T9e:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Taf;
_Taf:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T10f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tde;
_Tde:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tfb;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x1C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Tfb;
_Tfb:
	__asm        jmp    _T100;
_T100:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4e6;
_T10f:
	__asm        jmp    _T114;
_T114:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1f1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T161;
_T161:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T180;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T180;
_T180:
	__asm        jmp    _T185;
_T185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x4C], eax;
_T1a0:
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x4C], eax;
	__asm        je     _T1cc;

	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        sub    dword ptr [ebp-0x4C], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x48];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T1a0;
_T1cc:
	__asm        jmp    _T1d1;
_T1d1:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x90];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4e1;
_T1f1:
	__asm        jmp    _T1f6;
_T1f6:
	__asm        jmp    _T1fb;
_T1fb:
	__asm        jmp    _T200;
_T200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T24b;

	__asm        jmp    _T222;
_T222:
	__asm        jmp    _T227;
_T227:
	__asm        jmp    _T22c;
_T22c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T298;
_T24b:
	__asm        mov    dword ptr [ebp-0x34], 0x200;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T280;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T286;
_T280:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T298;
_T298:
	__asm        jmp    _T29d;
_T29d:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T2b3;
_T2b3:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x74], eax;
_T2c5:
	__asm        mov    eax, [ebp-0x74];
	__asm        cmp    [ebp-0x90], eax;
	__asm        je     _T31c;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x64], eax;
	__asm        add    dword ptr [ebp-0x74], 8;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        add    dword ptr [ebp-0x70], 8;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T2f3;
_T2f3:
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T312;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x6C];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T312;
_T312:
	__asm        jmp    _T317;
_T317:
	__asm        jmp    _T2c5;
_T31c:
	__asm        jmp    _T321;
_T321:
	__asm        jmp    _T326;
_T326:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T352;
_T352:
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T36f;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x5C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T36f;
_T36f:
	__asm        jmp    _T374;
_T374:
	__asm        jmp    _T379;
_T379:
	__asm        jmp    _T37e;
_T37e:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
_T3c0:
	__asm        mov    eax, [ebp-0x88];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        je     _T426;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x78], eax;
	__asm        add    dword ptr [ebp-0x8C], 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    dword ptr [ebp-0x84], 8;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T3fd;
_T3fd:
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T41c;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x80];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T41c;
_T41c:
	__asm        jmp    _T421;
_T421:
	__asm        jmp    _T3c0;
_T426:
	__asm        jmp    _T42b;
_T42b:
	__asm        jmp    _T430;
_T430:
	__asm        jmp    _T435;
_T435:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x30], eax;
_T441:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T461;

	__asm        jmp    _T458;
_T458:
	__asm        add    dword ptr [ebp-0x30], 8;
	__asm        jmp    _T441;
_T461:
	__asm        jmp    _T466;
_T466:
	__asm        jmp    _T46b;
_T46b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T488;
_T488:
	__asm        jmp    _T48d;
_T48d:
	__asm        mov    eax, [ebp-0x28];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T4a4;
_T4a4:
	__asm        jmp    _T4a9;
_T4a9:
	__asm        jmp    _T4ae;
_T4ae:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x24];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4e1:
	__asm        jmp    _T4e6;
_T4e6:
	__asm        jmp    _T4eb;
// LINE 73:
_T4eb:
	__asm        jmp    _T70;
// LINE 74:
_T4f0:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004b9e75
void HotSpot::HotSpot(long lNewID, /*packed*/ struct SparkalRect& rectHotspot) {

	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T56;
_T56:
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
// LINE 89:
	__asm        jmp    _T6c;
_T6c:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T7d;
_T7d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tdd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tac;
_Tac:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tc9;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _Tc9;
_Tc9:
	__asm        jmp    _Tce;
_Tce:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4c3;
_Tdd:
	__asm        jmp    _Te2;
_Te2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T1bf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T12f;
_T12f:
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T14e;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x58];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T14e;
_T14e:
	__asm        jmp    _T153;
_T153:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0x54], eax;
_T16e:
	__asm        mov    eax, [ebp-0x98];
	__asm        cmp    [ebp-0x54], eax;
	__asm        je     _T19a;

	__asm        sub    dword ptr [ebp-0x50], 8;
	__asm        sub    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T16e;
_T19a:
	__asm        jmp    _T19f;
_T19f:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x98];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T4be;
_T1bf:
	__asm        jmp    _T1c4;
_T1c4:
	__asm        jmp    _T1c9;
_T1c9:
	__asm        jmp    _T1ce;
_T1ce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T219;

	__asm        jmp    _T1f0;
_T1f0:
	__asm        jmp    _T1f5;
_T1f5:
	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T266;
_T219:
	__asm        mov    dword ptr [ebp-0x3C], 0x200;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T24e;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T254;
_T24e:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T254:
	__asm        jmp    _T259;
_T259:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T266;
_T266:
	__asm        jmp    _T26b;
_T26b:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T281;
_T281:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x7C], eax;
_T293:
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    [ebp-0x98], eax;
	__asm        je     _T2ea;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        add    dword ptr [ebp-0x7C], 8;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        add    dword ptr [ebp-0x78], 8;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2c1;
_T2c1:
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T2e0;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x74];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T2e0;
_T2e0:
	__asm        jmp    _T2e5;
_T2e5:
	__asm        jmp    _T293;
_T2ea:
	__asm        jmp    _T2ef;
_T2ef:
	__asm        jmp    _T2f4;
_T2f4:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T320;
_T320:
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T33d;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    edx, [ebp-0x64];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T33d;
_T33d:
	__asm        jmp    _T342;
_T342:
	__asm        jmp    _T347;
_T347:
	__asm        jmp    _T34c;
_T34c:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x94], eax;
_T38e:
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x94], eax;
	__asm        je     _T403;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x80], eax;
	__asm        add    dword ptr [ebp-0x94], 8;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        add    dword ptr [ebp-0x8C], 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T3d4;
_T3d4:
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T3f9;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x88];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T3f9;
_T3f9:
	__asm        jmp    _T3fe;
_T3fe:
	__asm        jmp    _T38e;
_T403:
	__asm        jmp    _T408;
_T408:
	__asm        jmp    _T40d;
_T40d:
	__asm        jmp    _T412;
_T412:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x38], eax;
_T41e:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T43e;

	__asm        jmp    _T435;
_T435:
	__asm        add    dword ptr [ebp-0x38], 8;
	__asm        jmp    _T41e;
_T43e:
	__asm        jmp    _T443;
_T443:
	__asm        jmp    _T448;
_T448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T465;
_T465:
	__asm        jmp    _T46a;
_T46a:
	__asm        mov    eax, [ebp-0x30];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T481;
_T481:
	__asm        jmp    _T486;
_T486:
	__asm        jmp    _T48b;
_T48b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T4be:
	__asm        jmp    _T4c3;
_T4c3:
	__asm        jmp    _T4c8;
_T4c8:
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, rectHotspot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
// LINE 90:
	__asm        jmp    _T4df;
_T4df:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T4f0;
_T4f0:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T55f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    _T528;
_T528:
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T54b;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0x9C];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T54b;
_T54b:
	__asm        jmp    _T550;
_T550:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T903;
_T55f:
	__asm        jmp    _T564;
_T564:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T66b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    _T5bd;
_T5bd:
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _T5e5;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0xD0];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T5e5;
_T5e5:
	__asm        jmp    _T5ea;
_T5ea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 8;
	__asm        mov    [ebp-0xCC], eax;
_T60b:
	__asm        mov    eax, [ebp-0xE4];
	__asm        cmp    [ebp-0xCC], eax;
	__asm        je     _T646;

	__asm        sub    dword ptr [ebp-0xC8], 8;
	__asm        sub    dword ptr [ebp-0xCC], 8;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0xC8];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T60b;
_T646:
	__asm        jmp    _T64b;
_T64b:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0xE4];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xC], 8;
	__asm        jmp    _T8fe;
_T66b:
	__asm        jmp    _T670;
_T670:
	__asm        jmp    _T675;
_T675:
	__asm        jmp    _T67a;
_T67a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        test   eax, eax;
	__asm        je     _T6c8;

	__asm        jmp    _T69c;
_T69c:
	__asm        jmp    _T6a1;
_T6a1:
	__asm        jmp    _T6a6;
_T6a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T73f;
_T6c8:
	__asm        mov    dword ptr [ebp-0xB4], 0x200;
	__asm        lea    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    dword ptr [ebp-0xB8], 1;
	__asm        lea    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, [ebp-0xBC];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T71b;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T727;
_T71b:
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
_T727:
	__asm        jmp    _T72c;
_T72c:
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T73f;
_T73f:
	__asm        jmp    _T744;
_T744:
	__asm        push   0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T760;
_T760:
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   uninitialized_copy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T785;
_T785:
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    _T7bd;
_T7bd:
	__asm        cmp    dword ptr [ebp-0xDC], 0;
	__asm        je     _T7e0;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    edx, [ebp-0xDC];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
	__asm        jmp    _T7e0;
_T7e0:
	__asm        jmp    _T7e5;
_T7e5:
	__asm        jmp    _T7ea;
_T7ea:
	__asm        jmp    _T7ef;
_T7ef:
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        and    eax, 0xFFFFFFF8;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0xA4];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   uninitialized_copy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T832;
_T832:
	__asm        jmp    _T837;
_T837:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xB0], eax;
_T846:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xB0];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T86c;

	__asm        jmp    _T860;
_T860:
	__asm        add    dword ptr [ebp-0xB0], 8;
	__asm        jmp    _T846;
_T86c:
	__asm        jmp    _T871;
_T871:
	__asm        jmp    _T876;
_T876:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T899;
_T899:
	__asm        jmp    _T89e;
_T89e:
	__asm        mov    eax, [ebp-0xA8];
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0xA4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T8bb;
_T8bb:
	__asm        jmp    _T8c0;
_T8c0:
	__asm        jmp    _T8c5;
_T8c5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0xA4];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
_T8fe:
	__asm        jmp    _T903;
_T903:
	__asm        jmp    _T908;
// LINE 91:
_T908:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ba78f
/*packed*/ class HotSpot& HotSpot::operator=(const /*packed*/ class HotSpot& newHotSpot) {
// LINE 102:
	__asm        mov    eax, newHotSpot;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 103:
	return this;
// LINE 105:
_T20:
	this->lID = newHotSpot.lID;
// LINE 106:
	this->lType = newHotSpot.lType;
// LINE 107:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, newHotSpot;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        jne    _T4f;

	__asm        jmp    _T3dd;
_T4f:
	__asm        jmp    _T54;
_T54:
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
_T5e:
	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, newHotSpot;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jae    _T199;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
_T97:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Tb4;

	__asm        jmp    _Tab;
_Tab:
	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T97;
_Tb4:
	__asm        jmp    _Tb9;
_Tb9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Td3;
_Td3:
	__asm        jmp    _Td8;
_Td8:
	__asm        jmp    _Tdd;
_Tdd:
	__asm        jmp    _Te2;
_Te2:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Tf9;
_Tf9:
	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T112;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x44], eax;
_T132:
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    [ebp-0x44], eax;
	__asm        je     _T186;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr [ebp-0x44], 8;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr [ebp-0x3C], 8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T15d;
_T15d:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T17c;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x38];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T17c;
_T17c:
	__asm        jmp    _T181;
_T181:
	__asm        jmp    _T132;
_T186:
	__asm        jmp    _T18b;
_T18b:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T3a6;
_T199:
	__asm        jmp    _T19e;
_T19e:
	__asm        jmp    _T1a3;
_T1a3:
	__asm        jmp    _T1a8;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        jmp    _T1b7;
_T1b7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, newHotSpot;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jb     _T268;

	__asm        jmp    _T1e2;
_T1e2:
	__asm        jmp    _T1e7;
_T1e7:
	__asm        jmp    _T1ec;
_T1ec:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
_T207:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     _T230;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x18];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    _T207;
_T230:
	__asm        jmp    _T235;
_T235:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
_T241:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _T25e;

	__asm        jmp    _T255;
_T255:
	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        jmp    _T241;
_T25e:
	__asm        jmp    _T263;
_T263:
	__asm        jmp    _T3a6;
_T268:
	__asm        jmp    _T26d;
_T26d:
	__asm        jmp    _T272;
_T272:
	__asm        jmp    _T277;
_T277:
	__asm        jmp    _T27c;
_T27c:
	__asm        jmp    _T281;
_T281:
	__asm        jmp    _T286;
_T286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
_T2b3:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        je     _T2dc;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T2b3;
_T2dc:
	__asm        jmp    _T2e1;
_T2e1:
	__asm        jmp    _T2e6;
_T2e6:
	__asm        jmp    _T2eb;
_T2eb:
	__asm        jmp    _T2f0;
_T2f0:
	__asm        jmp    _T2f5;
_T2f5:
	__asm        jmp    _T2fa;
_T2fa:
	__asm        jmp    _T2ff;
_T2ff:
	__asm        jmp    _T304;
_T304:
	__asm        jmp    _T309;
_T309:
	__asm        jmp    _T30e;
_T30e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, newHotSpot;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x5C], eax;
_T34d:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        je     _T3a1;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr [ebp-0x5C], 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        add    dword ptr [ebp-0x54], 8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T378;
_T378:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T397;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, [ebp-0x50];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        jmp    _T397;
_T397:
	__asm        jmp    _T39c;
_T39c:
	__asm        jmp    _T34d;
_T3a1:
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    _T3ab;
_T3ab:
	__asm        jmp    _T3b0;
_T3b0:
	__asm        jmp    _T3b5;
_T3b5:
	__asm        jmp    _T3ba;
_T3ba:
	__asm        mov    eax, newHotSpot;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, newHotSpot;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3dd;
// LINE 108:
_T3dd:
	return this;
// LINE 109:
}

// FUNCTION: COPTER_D 0x004bab7b
int32_t operator==(const /*packed*/ class HotSpot& hs1, const /*packed*/ class HotSpot& hs2) {
// LINE 117:
	__asm        mov    eax, hs2;
	__asm        mov    ecx, hs1;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        je     _T20;
// LINE 118:
	return 0x0;
// LINE 119:
_T20:
	__asm        mov    eax, hs1;
	__asm        mov    ecx, hs2;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        je     _T39;
// LINE 120:
	return 0x0;
// LINE 121:
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        jmp    _T43;
_T43:
	__asm        jmp    _T48;
_T48:
	__asm        jmp    _T4d;
_T4d:
	__asm        jmp    _T52;
_T52:
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, hs1;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    ecx, hs2;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, hs2;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 3;
	__asm        cmp    eax, ecx;
	__asm        jne    _T14c;

	__asm        jmp    _T82;
_T82:
	__asm        jmp    _T87;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        mov    eax, hs2;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, hs1;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x14], eax;
_Tb3:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-0x14], eax;
	__asm        je     _T107;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jne    _Te6;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Te6;

	__asm        jmp    _Teb;
_Te6:
	__asm        jmp    _T107;
_Teb:
	__asm        jmp    _Tfa;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T107;
_Tfa:
	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _Tb3;
_T107:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T118;
_T118:
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T12e;

	__asm        jmp    _T133;
_T12e:
	__asm        jmp    _T14c;
_T133:
	__asm        jmp    _T142;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T14c;
_T142:
	__asm        jmp    _T160;

	__asm        jmp    _T14c;
_T14c:
	__asm        jmp    _T15b;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T160;
_T15b:
	__asm        jmp    _T165;
_T160:
	__asm        jmp    _T17b;
_T165:
	__asm        jmp    _T174;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T17b;
// LINE 122:
_T174:
	return 0x0;
// LINE 123:
_T17b:
	return 0x1;
// LINE 124:
}

// FUNCTION: COPTER_D 0x004bad05
int32_t HotSpot::IsPointInHotspot(long lXPosition, long lYPosition) {
// LINE 133:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _Ta1;
// LINE 134:
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _T23;
_T23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax], ecx;
	__asm        jg     _T92;

	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+8], ecx;
	__asm        jl     _T92;

	__asm        jmp    _T55;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jg     _T92;

	__asm        jmp    _T71;
_T71:
	__asm        jmp    _T76;
_T76:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jl     _T92;

	__asm        mov    eax, 1;
	__asm        jmp    _T94;
_T92:
	__asm        xor    eax, eax;
_T94:
	__asm        jmp    _T9c;

	__asm        mov    eax, [ebp-4];
_T9c:
	__asm        jmp    __RETURN;
// LINE 135:
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _Tc3;
// LINE 136:
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HotSpot::PointInCircle;
	__asm        jmp    __RETURN;
// LINE 137:
_Tc3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _Te5;
// LINE 138:
	__asm        mov    eax, lYPosition;
	__asm        push   eax;
	__asm        mov    eax, lXPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HotSpot::PointInPolygon;
	__asm        jmp    __RETURN;
// LINE 139:
_Te5:
	return 0x0;
// LINE 140:
__RETURN:
}

// FUNCTION: COPTER_D 0x004badf8
int32_t HotSpot::PointInCircle(long lXPosition, long lYPosition) {
	/*bp-0x4*/   int32_t nRadiusOfCircle;
	/*bp-0x8*/   int32_t nDistanceToPosition;

// LINE 160:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        jmp    _T2a;
_T2a:
	__asm        jmp    _T2f;
_T2f:
	__asm        jmp    _T34;
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        jmp    _T43;
_T43:
	__asm        jmp    _T48;
_T48:
	__asm        jmp    _T4d;
_T4d:
	__asm        jmp    _T52;
_T52:
	__asm        jmp    _T57;
_T57:
	__asm        jmp    _T5c;
_T5c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+0xC];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx];
	__asm        mov    ebx, this;
	__asm        mov    ebx, [ebx+8];
	__asm        sub    edx, [ebx+8];
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    nRadiusOfCircle, eax;
// LINE 165:
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        jmp    _Tc1;
_Tc1:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        jmp    _Tcb;
_Tcb:
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        sub    eax, lXPosition;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        sub    ecx, lXPosition;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        sub    ecx, lYPosition;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx+4];
	__asm        sub    edx, lYPosition;
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    nDistanceToPosition, eax;
// LINE 167:
	__asm        mov    eax, nRadiusOfCircle;
	__asm        cmp    nDistanceToPosition, eax;
	__asm        jg     _T124;

	__asm        mov    eax, 1;
	__asm        jmp    _T126;
_T124:
	__asm        xor    eax, eax;
_T126:
	__asm        jmp    __RETURN;
// LINE 168:
__RETURN:
}

// FUNCTION: COPTER_D 0x004baf2a
int32_t HotSpot::PointInPolygon(long lXPosition, long lYPosition) {
	/*bp-0x4*/   int32_t c;
	/*bp-0x8*/   int32_t nVertices;
	/*bp-0xc*/   int32_t i;
	/*bp-0x10*/  int32_t j;

// LINE 184:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    nVertices, eax;
// LINE 186:
	__asm        mov    i, 0;
	__asm        mov    c, 0;
	__asm        mov    eax, nVertices;
	__asm        dec    eax;
	__asm        mov    j, eax;
	__asm        jmp    _T50;
_T47:
	__asm        mov    eax, i;
	__asm        mov    j, eax;
	__asm        inc    i;
_T50:
	__asm        mov    eax, i;
	__asm        cmp    nVertices, eax;
	__asm        jle    _T199;
// LINE 191:
	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T66;
_T66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _T9c;

	__asm        jmp    _T81;
_T81:
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _Tdc;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        jmp    _Ta6;
_Ta6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jg     _T194;

	__asm        jmp    _Tc1;
_Tc1:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, lYPosition;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jle    _T194;
_Tdc:
	__asm        jmp    _Te1;
_Te1:
	__asm        jmp    _Te6;
_Te6:
	__asm        jmp    _Teb;
_Teb:
	__asm        jmp    _Tf0;
_Tf0:
	__asm        jmp    _Tf5;
_Tf5:
	__asm        jmp    _Tfa;
_Tfa:
	__asm        jmp    _Tff;
_Tff:
	__asm        jmp    _T104;
_T104:
	__asm        jmp    _T109;
_T109:
	__asm        jmp    _T10e;
_T10e:
	__asm        jmp    _T113;
_T113:
	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, j;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        sub    eax, [ecx+edx*8];
	__asm        mov    ecx, lYPosition;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, i;
	__asm        sub    ecx, [edx+ebx*8+4];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, j;
	__asm        mov    ecx, [ecx+edx*8+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, i;
	__asm        sub    ecx, [edx+ebx*8+4];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    ecx, [ecx+edx*8];
	__asm        add    ecx, eax;
	__asm        cmp    ecx, lXPosition;
	__asm        jle    _T194;
// LINE 192:
	__asm        cmp    c, 0;
	__asm        jne    _T18d;

	__asm        mov    c, 1;
	__asm        jmp    _T194;
_T18d:
	c = 0x0;
// LINE 193:
_T194:
	__asm        jmp    _T47;
// LINE 194:
_T199:
	return c;
// LINE 195:
}

// FUNCTION: COPTER_D 0x004bb0d2
void HotSpot::GetBoundingRect(/*packed*/ class MRect& rectBounds) {
	/*bp-0x4*/   int32_t nPointCount;
	/*bp-0x8*/   int32_t nRadiusOfCircle;
	/*bp-0xc*/   int32_t nMinX;
	/*bp-0x10*/  int32_t i;
	/*bp-0x14*/  int32_t nMinY;
	/*bp-0x18*/  int32_t nMaxX;
	/*bp-0x1c*/  int32_t nMaxY;

// LINE 211:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T80;
// LINE 212:
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _T23;
_T23:
	rectBounds.left = this->pointArray.start->x;
// LINE 213:
	__asm        jmp    _T35;
_T35:
	__asm        jmp    _T3a;
_T3a:
	rectBounds.top = this->pointArray.start->y;
// LINE 214:
	__asm        jmp    _T4e;
_T4e:
	__asm        jmp    _T53;
_T53:
	rectBounds.right = this->pointArray.start-><MPoint+0x08>;
// LINE 215:
	__asm        jmp    _T67;
_T67:
	__asm        jmp    _T6c;
_T6c:
	rectBounds.bottom = this->pointArray.start-><MPoint+0x0c>;
// LINE 216:
	return;
// LINE 219:
_T80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T1b9;
// LINE 224:
	__asm        jmp    _T92;
_T92:
	__asm        jmp    _T97;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        jmp    _Ta6;
_Ta6:
	__asm        jmp    _Tab;
_Tab:
	__asm        jmp    _Tb0;
_Tb0:
	__asm        jmp    _Tb5;
_Tb5:
	__asm        jmp    _Tba;
_Tba:
	__asm        jmp    _Tbf;
_Tbf:
	__asm        jmp    _Tc4;
_Tc4:
	__asm        jmp    _Tc9;
_Tc9:
	__asm        jmp    _Tce;
_Tce:
	__asm        jmp    _Td3;
_Td3:
	__asm        jmp    _Td8;
_Td8:
	__asm        jmp    _Tdd;
_Tdd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+0xC];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        sub    ecx, [edx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    edx, [edx];
	__asm        mov    ebx, this;
	__asm        mov    ebx, [ebx+8];
	__asm        sub    edx, [ebx+8];
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        fild   dword ptr [ebp-0x24];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        call   0x0056EBE8;
	__asm        mov    nRadiusOfCircle, eax;
// LINE 226:
	__asm        jmp    _T14c;
_T14c:
	__asm        jmp    _T151;
_T151:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        sub    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
// LINE 227:
	__asm        jmp    _T166;
_T166:
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
// LINE 228:
	__asm        jmp    _T182;
_T182:
	__asm        jmp    _T187;
_T187:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        add    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
// LINE 229:
	__asm        jmp    _T19d;
_T19d:
	__asm        jmp    _T1a2;
_T1a2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, nRadiusOfCircle;
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+0xC], eax;
// LINE 230:
	return;
// LINE 233:
_T1b9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T38b;
// LINE 234:
	__asm        jmp    _T1cb;
_T1cb:
	__asm        jmp    _T1d0;
_T1d0:
	__asm        jmp    _T1d5;
_T1d5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 3;
	__asm        mov    nPointCount, eax;
// LINE 235:
	__asm        cmp    nPointCount, 0;
	__asm        jg     _T228;
// LINE 236:
	__asm        mov    eax, rectBounds;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T223;
// LINE 237:
_T223:
	return;
// LINE 239:
_T228:
	__asm        jmp    _T22d;
_T22d:
	__asm        jmp    _T232;
_T232:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    nMaxX, eax;
	__asm        mov    eax, nMaxX;
	__asm        mov    nMinX, eax;
// LINE 240:
	__asm        jmp    _T248;
_T248:
	__asm        jmp    _T24d;
_T24d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    nMaxY, eax;
	__asm        mov    eax, nMaxY;
	__asm        mov    nMinY, eax;
// LINE 242:
	__asm        mov    i, 1;
	__asm        jmp    _T26e;
_T26b:
	i++;
_T26e:
	__asm        mov    eax, i;
	__asm        cmp    nPointCount, eax;
	__asm        jle    _T363;
// LINE 243:
	__asm        jmp    _T27f;
_T27f:
	__asm        jmp    _T284;
_T284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinX;
	__asm        cmp    [eax+ecx*8], edx;
	__asm        jge    _T2b2;
// LINE 244:
	__asm        jmp    _T29e;
_T29e:
	__asm        jmp    _T2a3;
_T2a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    nMinX, eax;
// LINE 245:
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        jmp    _T2bc;
_T2bc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinX;
	__asm        cmp    [eax+ecx*8], edx;
	__asm        jle    _T2ea;
// LINE 246:
	__asm        jmp    _T2d6;
_T2d6:
	__asm        jmp    _T2db;
_T2db:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8];
	__asm        mov    nMaxX, eax;
// LINE 248:
_T2ea:
	__asm        jmp    _T2ef;
_T2ef:
	__asm        jmp    _T2f4;
_T2f4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinY;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jge    _T324;
// LINE 249:
	__asm        jmp    _T30f;
_T30f:
	__asm        jmp    _T314;
_T314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    nMinY, eax;
// LINE 250:
_T324:
	__asm        jmp    _T329;
_T329:
	__asm        jmp    _T32e;
_T32e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    edx, nMinY;
	__asm        cmp    [eax+ecx*8+4], edx;
	__asm        jle    _T35e;
// LINE 251:
	__asm        jmp    _T349;
_T349:
	__asm        jmp    _T34e;
_T34e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*8+4];
	__asm        mov    nMaxY, eax;
// LINE 252:
_T35e:
	__asm        jmp    _T26b;
// LINE 253:
_T363:
	rectBounds.left = nMinX;
// LINE 254:
	rectBounds.top = nMinY;
// LINE 255:
	rectBounds.right = nMaxX;
// LINE 256:
	rectBounds.bottom = nMaxY;
// LINE 257:
	return;
// LINE 261:
_T38b:
	__asm        mov    eax, rectBounds;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, rectBounds;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, rectBounds;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3bd;
// LINE 262:
_T3bd:
	return;
}

// FUNCTION: COPTER_D 0x004bb49b
int32_t LoadListFromResource(/*packed*/ class list<HotSpot>& hotSpotList, int32_t nResourceID) {
	/*bp-0x1c*/  /*packed*/ class ResourceRCData resourceHangarHotspots; // 0x1c bytes
	/*bp-0x20*/  /*packed*/ struct HotSpotResourceFileHeader *fileImage;
	/*bp-0x24*/  int32_t nCurrentRecordStart;
	/*bp-0x28*/  /*packed*/ struct HotSpotResourceRecord *currentHotspotRecord;
	/*bp-0x2c*/  char * chFileImage;
	/*bp-0x30*/  int32_t nHotspotRecordCount;
	/*bp-0x34*/  int32_t i;

// LINE 270:
	__asm        push   1;
	__asm        mov    eax, nResourceID;
	__asm        push   eax;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::ResourceRCData;
// LINE 278:
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::DataReference;
	__asm        mov    fileImage, eax;
// LINE 279:
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::DataReference;
	__asm        mov    chFileImage, eax;
// LINE 280:
	__asm        cmp    fileImage, 0;
	__asm        jne    _T51;
// LINE 281:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x38];
	__asm        jmp    __RETURN;
// LINE 282:
_T51:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        je     _T75;
// LINE 283:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    __RETURN;
// LINE 284:
_T75:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax], 0x54505348;
	__asm        je     _T9b;
// LINE 285:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x40];
	__asm        jmp    __RETURN;
// LINE 286:
_T9b:
	nHotspotRecordCount = fileImage->lRecordCount;
// LINE 287:
	nCurrentRecordStart = 0x10;
// LINE 288:
	__asm        mov    i, 0;
	__asm        jmp    _Tba;
_Tb7:
	i++;
_Tba:
	__asm        mov    eax, nHotspotRecordCount;
	__asm        cmp    i, eax;
	__asm        jge    _T490;
// LINE 289:
	__asm        mov    eax, nCurrentRecordStart;
	__asm        add    eax, chFileImage;
	__asm        mov    currentHotspotRecord, eax;
	__asm        mov    eax, currentHotspotRecord;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x54];
	__asm        call   HotSpot::HotSpot;
	__asm        mov    [ebp-0xCC], eax;
// LINE 290:
	__asm        mov    eax, hotSpotList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    list<HotSpot>::free_list, 0;
	__asm        je     _T131;

	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T39a;
_T131:
	__asm        mov    eax, list<HotSpot>::last;
	__asm        cmp    list<HotSpot>::next_avail, eax;
	__asm        jne    _T382;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB0], eax;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        jne    _T19c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T192;
_T192:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T19c:
	__asm        jmp    _T1a1;
_T1a1:
	__asm        jmp    _T1a6;
_T1a6:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    dword ptr [ebp-0x88], 0x92;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    dword ptr [ebp-0x8C], 1;
	__asm        lea    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T205;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T211;
_T205:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x98], eax;
_T211:
	__asm        jmp    _T216;
_T216:
	__asm        jmp    _T21b;
_T21b:
	__asm        jmp    _T220;
_T220:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC0], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        jne    _T297;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T28d;
_T28d:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        jmp    _T2a1;
_T2a1:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    list<HotSpot>::buffer_list, eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<HotSpot>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x9C], 0x92;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA0], 1;
	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T328;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T334;
_T328:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
_T334:
	__asm        jmp    _T339;
_T339:
	__asm        jmp    _T33e;
_T33e:
	__asm        jmp    _T343;
_T343:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, list<HotSpot>::next_avail;
	__asm        mov    list<HotSpot>::last, eax;
	__asm        jmp    _T365;
_T365:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T39a;
_T382:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x80], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0xC4], eax;
_T39a:
	__asm        jmp    _T39f;
_T39f:
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T3ad;
_T3ad:
	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T3bb;
_T3bb:
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T3d9;

	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   HotSpot::HotSpot;
	__asm        jmp    _T3d9;
_T3d9:
	__asm        jmp    _T3de;
_T3de:
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0xC8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, hotSpotList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T424;
_T424:
	__asm        jmp    _T429;
_T429:
	__asm        jmp    _T42e;
_T42e:
	__asm        jmp    _T433;
_T433:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x60], eax;
_T439:
	__asm        mov    eax, [ebp-0x60];
	__asm        cmp    [ebp-0x48], eax;
	__asm        je     _T453;

	__asm        jmp    _T44a;
_T44a:
	__asm        add    dword ptr [ebp-0x60], 8;
	__asm        jmp    _T439;
_T453:
	__asm        jmp    _T458;
_T458:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T46f;
_T46f:
	__asm        jmp    _T474;
_T474:
	__asm        jmp    _T479;
// LINE 291:
_T479:
	__asm        mov    eax, currentHotspotRecord;
	__asm        mov    eax, [eax+0xC];
	__asm        shl    eax, 3;
	__asm        add    eax, nCurrentRecordStart;
	__asm        add    eax, 0x10;
	__asm        mov    nCurrentRecordStart, eax;
// LINE 292:
	__asm        jmp    _Tb7;
// LINE 293:
_T490:
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    ecx, resourceHangarHotspots<vftable>;
	__asm        call   ResourceRCData::~ResourceRCData;
	__asm        mov    eax, [ebp-0x58];
	__asm        jmp    __RETURN;
// LINE 294:
__RETURN:
}



// Contribution: 1:000ba950-000ba9b8 Module: 4, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004bb950
// allocate



// Contribution: 1:000ba9c0-000baa29 Module: 4, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004bb9c0
// uninitialized_copy

