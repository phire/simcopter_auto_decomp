// Module: Hangar.obj
// Source: C:\Copter\source\sparkal\Hangar.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class HangarWindow (forward reference);
// VTABLE: COPTER_D 0x00590c20
class HangarWindow : public GraphicWindow
{
public:
	void HangarWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~HangarWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	int32_t ReadPalette(struct SparkalColor*);
	void ScrollHangarView(long);
	int32_t IsDaytime();
	int32_t IsNighttime();
protected:
	virtual void GetImagePath() /* override */;
	void LoadHotSpots();
	void ConvertWindowToHangar(class MRect&);
	void ConvertWindowToHangar(class MPoint&);
	void ConvertHangarToWindow(class MRect&);
	void ConvertHangarToWindow(class MPoint&);
	int32_t IsHangarRectVisibleInWindow(class MRect&);
	void ClipRectToWindow(class MRect&);
	long GetHangarVisiblePosition();
	void ResetPopupTimer();
	int32_t HasPopupTimerExpired();
	void DisplayHelp(int32_t, class MPoint&);
	void HideHelp();
	int32_t GetSoundFileNameFromHelpID(long, class basic_string<char>&);
	int32_t GetHotspotFromPosition(long&, class MPoint&);
	class TextWindow *myTextHelpWindow;
	class DigitalSound myHelpSound;
	int32_t bDaytime;
	int32_t bUsingGraphicHelp;
	int32_t bUsingAudioHelp;
	int32_t bTestedHotspotsAlready;
	int32_t nScrollingHangar;
	class MTimer myTimer;
	class list<HotSpot> myHotSpots;
	class CBackBuffer *mySecondImage;
	class MPoint ptSavedCursorPosition;
	long lWindowPositionInHangar;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{
public:
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: void;

// Type: class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const struct SparkalColor*, const struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: long;

// Type: void * __ptr32;

// Type: char;

// Type: unsigned long;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class list<HotSpot>::iterator;
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node *node;
public:
	void iterator();
protected:
	void iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator operator++(int32_t);
	class list<HotSpot>::iterator& operator++();
	class list<HotSpot>::iterator operator--(int32_t);
	class list<HotSpot>::iterator& operator--();
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: uint32_t;

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: struct bidirectional_iterator<HotSpot,int>;
struct bidirectional_iterator<HotSpot,int>{
};



// Contribution: 1:00070f70-00073776 Module: 36, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00471f70
void HangarWindow::HangarWindow(int32_t nNewID, class GraphicWindow *windowNewParent, class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        jmp    near ptr 0x00471F81;

	__asm        jmp    near ptr 0x00471F86;

	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00471FA9;

	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00471FC8;

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFA], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x112], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    _T12f;

	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
	__asm        jmp    _T12f;
_T12f:
	__asm        jmp    near ptr 0x004720A4;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11A], 0;
	__asm        inc    list<HotSpot>::number_of_lists;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    list<HotSpot>::free_list, 0;
	__asm        je     _T173;

	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T358;
_T173:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        cmp    list<HotSpot>::last, eax;
	__asm        jne    _T343;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    _T1d2;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472138;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T1d2:
	__asm        jmp    near ptr 0x00472147;

	__asm        jmp    near ptr 0x0047214C;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    dword ptr [ebp-0x38], 0x92;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T217;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T21d;
_T217:
	None = None;
_T21d:
	__asm        jmp    near ptr 0x00472192;

	__asm        jmp    near ptr 0x00472197;

	__asm        jmp    near ptr 0x0047219C;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T28e;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004721F4;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T28e:
	__asm        jmp    near ptr 0x00472203;

	__asm        jmp    near ptr 0x00472208;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    list<HotSpot>::buffer_list, eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<HotSpot>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x4C], 0x92;
	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    dword ptr [ebp-0x50], 1;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2f5;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T2fb;
_T2f5:
	None = None;
_T2fb:
	__asm        jmp    near ptr 0x00472270;

	__asm        jmp    near ptr 0x00472275;

	__asm        jmp    near ptr 0x0047227A;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, list<HotSpot>::next_avail;
	__asm        mov    list<HotSpot>::last, eax;
	__asm        jmp    near ptr 0x00472299;

	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x2C], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T358;
_T343:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x30], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x74], eax;
_T358:
	__asm        jmp    near ptr 0x004722CD;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x116], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x116];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x116];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472307;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
	__asm        jmp    near ptr 0x00472319;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x122], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x126], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00472338;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590C20;
// LINE 54:
	__asm        cmp    G_daynight, 0;
	__asm        jne    _T3fd;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 1;
	__asm        jmp    _T40a;
_T3fd:
	this->nScrollingHangar = 0x0;
// LINE 55:
_T40a:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::LoadHotSpots;
// LINE 56:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::CreateImage;
// LINE 57:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 58:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 59:
	__asm        jmp    near ptr 0x004723A5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004723af
void HangarWindow::~HangarWindow() {

	this-><HangarWindow+0x00> = 0x590c20;
// LINE 66:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::DestroyImage;
// LINE 67:
	__asm        jmp    near ptr 0x004723D1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004723E8;

	__asm        jmp    near ptr 0x004723ED;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00472406;

	__asm        jmp    near ptr 0x0047240B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x3C], eax;
_T68:
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jne    _T7e;

	__asm        jmp    _T92;

	__asm        jmp    _T7e;
_T7e:
	__asm        jmp    _T8d;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T92;
_T8d:
	__asm        jmp    _T97;
_T92:
	__asm        jmp    _T18e;
_T97:
	__asm        jmp    _Ta6;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T18e;
_Ta6:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00472468;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00472473;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472499;

	__asm        jmp    near ptr 0x0047249E;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x30], eax;
_T101:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        je     _T122;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   destroy;
	__asm        add    esp, 4;
	__asm        add    dword ptr [ebp-0x30], 8;
	__asm        jmp    _T101;
_T122:
	__asm        jmp    near ptr 0x004724D6;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   deallocate;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004724F0;

	__asm        jmp    near ptr 0x004724F5;

	__asm        jmp    _T15a;

	__asm        mov    eax, [ebp-0x34];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T15a:
	__asm        jmp    near ptr 0x0047250E;

	__asm        jmp    near ptr 0x00472513;

	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        jmp    near ptr 0x0047252A;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x11A];
	__asm        jmp    near ptr 0x00472538;

	__asm        jmp    _T68;
_T18e:
	__asm        jmp    near ptr 0x00472542;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        jmp    near ptr 0x00472565;

	__asm        dec    list<HotSpot>::number_of_lists;
	__asm        jne    _T240;
_T1c2:
	__asm        cmp    list<HotSpot>::buffer_list, 0;
	__asm        je     _T21d;

	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<HotSpot>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004725AC;

	__asm        jmp    near ptr 0x004725B1;

	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004725C2;

	__asm        jmp    near ptr 0x004725C7;

	__asm        jmp    _T1c2;
_T21d:
	__asm        mov    list<HotSpot>::free_list, 0;
	__asm        mov    list<HotSpot>::next_avail, 0;
	__asm        mov    list<HotSpot>::last, 0;
	__asm        jmp    _T240;
_T240:
	__asm        jmp    near ptr 0x004725F4;

	__asm        jmp    near ptr 0x004725F9;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00472611
int32_t HangarWindow::Initialize() {
	class ButtonWindow *tempButtonWindow;
	char * szButtonFileName;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 76:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00472681;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004726A2;
// LINE 78:
	__asm        jmp    near ptr 0x004726A7;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     _Tb6;

	__asm        mov    eax, SZ_HANGAR_DAY_BUTTON_FILE_NAME;
	__asm        mov    szButtonFileName, eax;
	__asm        jmp    _Tbe;
_Tb6:
	szButtonFileName = SZ_HANGAR_NIGHT_BUTTON_FILE_NAME;
// LINE 80:
_Tbe:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 81:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T137;

	__asm        jmp    near ptr 0x004726F9;

	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    near ptr 0x0047271A;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T144;
_T137:
	this->myTextHelpWindow = 0x0;
// LINE 82:
_T144:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
// LINE 83:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x28];
// LINE 84:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD8];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x80], eax;
// LINE 85:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004727C5;
// LINE 86:
	this-><HangarWindow+0x12a> = 0x152;
// LINE 88:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T22e;

	__asm        jmp    near ptr 0x004727F4;

	__asm        mov    dword ptr [ebp-0x3C], 0x16;
	__asm        mov    dword ptr [ebp-0x38], 0x1AA;
	__asm        mov    dword ptr [ebp-0x34], 0x17;
	__asm        mov    dword ptr [ebp-0x30], 0x1AB;
	__asm        jmp    near ptr 0x00472815;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T235;
_T22e:
	tempButtonWindow = 0x0;
// LINE 89:
_T235:
	__asm        push   0;
	__asm        push   0x7D;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 90:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1098], eax;
	__asm        cmp    dword ptr [ebp-0x1098], 0;
	__asm        jne    _T2f1;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1098], eax;
	__asm        jmp    near ptr 0x004728B4;

	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004728D8;

	__asm        jmp    near ptr 0x004728DD;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004728FD;

	__asm        jmp    _T31f;
_T2f1:
	__asm        jmp    near ptr 0x00472907;

	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047292B;

	__asm        jmp    _T31f;
// LINE 91:
_T31f:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 92:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 94:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T3a3;

	__asm        jmp    near ptr 0x00472969;

	__asm        mov    dword ptr [ebp-0x50], 0xAE;
	__asm        mov    dword ptr [ebp-0x4C], 0x1AA;
	__asm        mov    dword ptr [ebp-0x48], 0xAF;
	__asm        mov    dword ptr [ebp-0x44], 0x1AB;
	__asm        jmp    near ptr 0x0047298A;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T3aa;
_T3a3:
	tempButtonWindow = 0x0;
// LINE 95:
_T3aa:
	__asm        push   0;
	__asm        push   0x7E;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 96:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x209C], eax;
	__asm        cmp    dword ptr [ebp-0x209C], 0;
	__asm        jne    _T466;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x209C], eax;
	__asm        jmp    near ptr 0x00472A29;

	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472A4D;

	__asm        jmp    near ptr 0x00472A52;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472A72;

	__asm        jmp    _T5b6;
_T466:
	__asm        jmp    near ptr 0x00472A7C;

	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20B0], eax;
	__asm        cmp    dword ptr [ebp-0x20B0], 0xFFFFFFFF;
	__asm        jne    _T4c5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x20AC], eax;
	__asm        mov    eax, [ebp-0x20AC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472AC7;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T4c5;
_T4c5:
	__asm        jmp    near ptr 0x00472ADB;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T4fb;

	__asm        cmp    dword ptr [ebp-0x20B0], 0;
	__asm        je     _T55c;

	__asm        jmp    near ptr 0x00472AFA;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x20B0];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T55c;
_T4fb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20A4], eax;
	__asm        cmp    dword ptr [ebp-0x20A4], 0;
	__asm        je     _T53c;

	__asm        mov    eax, [ebp-0x20B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20A4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x20A0], eax;
	__asm        jmp    _T546;
_T53c:
	None = 0x0;
_T546:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x20A0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T59b;
_T55c:
	__asm        cmp    dword ptr [ebp-0x20B0], 0;
	__asm        je     _T59b;

	__asm        jmp    near ptr 0x00472B7F;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20A8], eax;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T59b;
_T59b:
	__asm        mov    eax, [ebp-0x20B0];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472BBD;

	__asm        jmp    near ptr 0x00472BC2;

	__asm        jmp    _T5b6;
// LINE 97:
_T5b6:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 98:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 100:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T63a;

	__asm        jmp    near ptr 0x00472C00;

	__asm        mov    dword ptr [ebp-0x64], 0x146;
	__asm        mov    dword ptr [ebp-0x60], 0x1AA;
	__asm        mov    dword ptr [ebp-0x5C], 0x147;
	__asm        mov    dword ptr [ebp-0x58], 0x1AB;
	__asm        jmp    near ptr 0x00472C21;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T641;
_T63a:
	tempButtonWindow = 0x0;
// LINE 101:
_T641:
	__asm        push   0;
	__asm        push   0x7F;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 102:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30B4], eax;
	__asm        cmp    dword ptr [ebp-0x30B4], 0;
	__asm        jne    _T6fd;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30B4], eax;
	__asm        jmp    near ptr 0x00472CC0;

	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472CE4;

	__asm        jmp    near ptr 0x00472CE9;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472D09;

	__asm        jmp    _T72b;
_T6fd:
	__asm        jmp    near ptr 0x00472D13;

	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472D37;

	__asm        jmp    _T72b;
// LINE 103:
_T72b:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 104:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 106:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T7af;

	__asm        jmp    near ptr 0x00472D75;

	__asm        mov    dword ptr [ebp-0x78], 0x1DE;
	__asm        mov    dword ptr [ebp-0x74], 0x1AA;
	__asm        mov    dword ptr [ebp-0x70], 0x1DF;
	__asm        mov    dword ptr [ebp-0x6C], 0x1AB;
	__asm        jmp    near ptr 0x00472D96;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T7b6;
_T7af:
	tempButtonWindow = 0x0;
// LINE 107:
_T7b6:
	__asm        push   0;
	__asm        push   0x80;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 108:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x40B8], eax;
	__asm        cmp    dword ptr [ebp-0x40B8], 0;
	__asm        jne    _T875;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x40B8], eax;
	__asm        jmp    near ptr 0x00472E38;

	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472E5C;

	__asm        jmp    near ptr 0x00472E61;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472E81;

	__asm        jmp    _T8a3;
_T875:
	__asm        jmp    near ptr 0x00472E8B;

	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472EAF;

	__asm        jmp    _T8a3;
// LINE 109:
_T8a3:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 110:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 112:
	__asm        mov    dword ptr [ebp-0x7C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T90b;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T90b;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T90b;
_T90b:
	__asm        jmp    near ptr 0x00472F21;

	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T93e;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T93e:
	__asm        jmp    near ptr 0x00472F54;

	__asm        mov    eax, [ebp-0x7C];
	__asm        jmp    near ptr 0x00472F5C;
// LINE 113:
}

// FUNCTION: COPTER_D 0x00472f61
int32_t HangarWindow::ReadPalette(struct SparkalColor *pColorTable) {
// LINE 122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    near ptr 0x00472F9A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x00472FB8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    near ptr 0x00472FCD;

	__asm        jmp    near ptr 0x00472FD2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    near ptr 0x00473036;

	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0047303F;

	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047304A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0047306B;

	__asm        jmp    near ptr 0x00473070;

	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T134;

	__asm        mov    eax, 1;
	__asm        jmp    _T136;
_T134:
	__asm        xor    eax, eax;
_T136:
	__asm        jmp    near ptr 0x0047309C;
// LINE 123:
}

// FUNCTION: COPTER_D 0x004730a3
int32_t HangarWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 133:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 0;
	__asm        jne    _T171;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB4];
// LINE 135:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T164;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T6c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T6c:
	__asm        jmp    near ptr 0x00473114;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x00473132;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T108;

	__asm        jmp    near ptr 0x00473147;

	__asm        jmp    near ptr 0x0047314C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tda;

	__asm        jmp    _Tda;
_Tce:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _Tda;
_Tda:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T108;
_T108:
	__asm        jmp    near ptr 0x004731B0;

	__asm        mov    byte ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x004731B9;

	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004731C4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004731E5;

	__asm        jmp    near ptr 0x004731EA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11E], eax;
	__asm        jmp    _T171;
_T164:
	this-><HangarWindow+0x11e> = 0x0;
// LINE 137:
_T171:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        jmp    near ptr 0x00473222;
// LINE 138:
}

// FUNCTION: COPTER_D 0x00473229
void HangarWindow::DestroyImage() {
// LINE 144:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 0;
	__asm        je     _T63;
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047327A;

	__asm        jmp    _T56;
// LINE 146:
_T56:
	this-><HangarWindow+0x11e> = 0x0;
// LINE 148:
_T63:
	__asm        jmp    near ptr 0x00473291;
}

// FUNCTION: COPTER_D 0x00473296
int32_t HangarWindow::ComposeSelf() {
	long lHelpID;

// LINE 156:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T2d;
// LINE 157:
_T26:
	__asm        xor    eax, eax;
	__asm        jmp    _T252;
// LINE 159:
_T2d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x102], 0;
	__asm        je     _T4f;
// LINE 160:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x102];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 161:
_T4f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004732F6;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     _Tef;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    _T93;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tda;

	__asm        jmp    _Tda;
_T93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    _Tc3;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tda;

	__asm        jmp    _Tda;
_Tc3:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tda;
_Tda:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10A];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        add    [ebp-0x10], eax;
_Tef:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    _T136;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x112], 0;
	__asm        je     _T136;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T141;
_T136:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T141;
_T141:
	__asm        cmp    dword ptr [ebp-8], 0x3E8;
	__asm        jb     _T153;

	__asm        jmp    _T158;
_T153:
	__asm        jmp    _T1b6;
_T158:
	__asm        jmp    _T167;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T1b6;
_T167:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jne    _T1b6;
// LINE 162:
	__asm        mov    eax, this;
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        lea    eax, lHelpID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetHotspotFromPosition;
	__asm        test   eax, eax;
	__asm        je     _T1a9;
// LINE 163:
	__asm        mov    eax, this;
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        mov    eax, lHelpID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::DisplayHelp;
// LINE 164:
_T1a9:
	this->myTimer.lTotalElapsedTime = 0x1;
// LINE 167:
_T1b6:
	__asm        jmp    near ptr 0x00473451;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T248;
// LINE 168:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
// LINE 170:
	__asm        jmp    near ptr 0x00473470;

	__asm        jmp    near ptr 0x00473475;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x12A];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11E];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x11E];
	__asm        call   dword ptr [edx+0xC];
// LINE 171:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 176:
_T248:
	__asm        mov    eax, 1;
	__asm        jmp    _T252;
// LINE 177:
_T252:
}

// FUNCTION: COPTER_D 0x004734ed
int32_t HangarWindow::DoMessage(class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lOwnerMessage;

// LINE 186:
	__asm        cmp    lWindowID, 0;
	__asm        jne    _T43;
// LINE 187:
	lOwnerMessage = 0x0;
// LINE 188:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 190:
	__asm        jmp    _Te3;
_T43:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T7a;
// LINE 191:
	lOwnerMessage = 0x1;
// LINE 192:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 194:
	__asm        jmp    _Te3;
_T7a:
	__asm        cmp    lWindowID, 2;
	__asm        jne    _Tb1;
// LINE 195:
	lOwnerMessage = 0x2;
// LINE 196:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 198:
	__asm        jmp    _Te3;
_Tb1:
	__asm        cmp    lWindowID, 3;
	__asm        jne    _Te3;
// LINE 199:
	lOwnerMessage = 0x63;
// LINE 200:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 202:
_Te3:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004735DA;
// LINE 203:
}

// FUNCTION: COPTER_D 0x004735e1
long HangarWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 216:
	__asm        cmp    lKey, 0x25;
	__asm        jne    _T2f;
// LINE 217:
	__asm        push   0xFFFFFFE8;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 218:
	__asm        mov    eax, 1;
	__asm        jmp    _T54;
// LINE 220:
	__asm        jmp    _T4d;
_T2f:
	__asm        cmp    lKey, 0x27;
	__asm        jne    _T4d;
// LINE 221:
	__asm        push   0x18;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 222:
	__asm        mov    eax, 1;
	__asm        jmp    _T54;
// LINE 224:
_T4d:
	__asm        xor    eax, eax;
	__asm        jmp    _T54;
// LINE 225:
_T54:
}

// FUNCTION: COPTER_D 0x0047363c
long HangarWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lHotspotID;

// LINE 236:
	__asm        jmp    near ptr 0x0047364D;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047365E;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        lea    eax, lHotspotID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetHotspotFromPosition;
	__asm        test   eax, eax;
	__asm        je     _T5b;
// LINE 239:
	__asm        lea    eax, lHotspotID;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 241:
_T5b:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004736A1;
// LINE 242:
}

// FUNCTION: COPTER_D 0x004736a8
long HangarWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 251:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004736BE;
// LINE 252:
}

// FUNCTION: COPTER_D 0x004736c5
long HangarWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 262:
	__asm        cmp    nCursorX, 8;
	__asm        jge    _T28;
// LINE 263:
	this->myTimer.lFrequency = 0xffffffe8;
// LINE 264:
	__asm        jmp    _T64;
_T28:
	__asm        jmp    near ptr 0x004736F2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, 8;
	__asm        cmp    eax, nCursorX;
	__asm        jge    _T57;
// LINE 265:
	this->myTimer.lFrequency = 0x18;
// LINE 266:
	__asm        jmp    _T64;
// LINE 267:
_T57:
	this->myTimer.lFrequency = 0x0;
// LINE 268:
_T64:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        jmp    near ptr 0x00473755;

	__asm        jmp    near ptr 0x0047375A;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     _Taa;

	__asm        jmp    _T12b;
_Taa:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    _Td3;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T126;

	__asm        jmp    _T126;
_Td3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    _T109;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T126;

	__asm        jmp    _T126;
_T109:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T126;
_T126:
	__asm        jmp    _T12b;
_T12b:
	__asm        jmp    near ptr 0x004737F5;
// LINE 269:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::HideHelp;
// LINE 270:
	this-><HangarWindow+0x122> = nCursorX;
// LINE 271:
	this-><HangarWindow+0x126> = nCursorY;
// LINE 272:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047381F;
// LINE 273:
}

// FUNCTION: COPTER_D 0x00473826
void HangarWindow::GetImagePath() {
// LINE 280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     _T196;
// LINE 281:
	__asm        mov    eax, SZ_HANGAR_DAY_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0047384F;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T74;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047388B;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T74;
_T74:
	__asm        jmp    near ptr 0x0047389F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Taa;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T148;

	__asm        jmp    near ptr 0x004738BE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T148;
_Taa:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Td9;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _Te0;
_Td9:
	None = 0x0;
_Te0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T135;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T135;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00473945;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473956;

	__asm        jmp    _T135;
_T135:
	__asm        jmp    near ptr 0x00473960;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T17b;
_T148:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T17b;

	__asm        jmp    near ptr 0x0047397D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004739B2;

	__asm        jmp    near ptr 0x004739B7;
// LINE 282:
	__asm        jmp    _T30b;
// LINE 283:
_T196:
	__asm        mov    eax, SZ_HANGAR_NIGHT_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004739C9;

	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    _T1ee;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473A05;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1ee;
_T1ee:
	__asm        jmp    near ptr 0x00473A19;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T224;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2c2;

	__asm        jmp    near ptr 0x00473A38;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2c2;
_T224:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T253;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T25a;
_T253:
	None = 0x0;
_T25a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2af;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2af;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00473ABF;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473AD0;

	__asm        jmp    _T2af;
_T2af:
	__asm        jmp    near ptr 0x00473ADA;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T2f5;
_T2c2:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2f5;

	__asm        jmp    near ptr 0x00473AF7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2f5;
_T2f5:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00473B2C;

	__asm        jmp    _T30b;
// LINE 284:
_T30b:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00473B52;
// LINE 285:
	__asm        jmp    near ptr 0x00473B57;
}

// FUNCTION: COPTER_D 0x00473b5c
int32_t HangarWindow::GetHotspotFromPosition(long& lHelpID, class MPoint& ptPosition) {
	class list<HotSpot>::iterator iterator;
	int32_t i;

// LINE 293:
	i = 0x0;
// LINE 294:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00473B88;

	__asm        jmp    _T31;
// LINE 296:
_T31:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00473BA4;

	__asm        jmp    near ptr 0x00473BA9;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T63;

	__asm        jmp    _T77;

	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T72;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T77;
_T72:
	__asm        jmp    _T7c;
_T77:
	__asm        jmp    _Tf9;
_T7c:
	__asm        jmp    _T8b;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tf9;
// LINE 297:
_T8b:
	__asm        jmp    near ptr 0x00473BEC;

	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12A];
	__asm        mov    ecx, ptPosition;
	__asm        add    eax, [ecx];
	__asm        push   eax;
	__asm        mov    ecx, iterator.node;
	__asm        add    ecx, 8;
	__asm        call   HotSpot::IsPointInHotspot;
	__asm        test   eax, eax;
	__asm        je     _Td3;
// LINE 298:
	__asm        jmp    near ptr 0x00473C1A;

	lHelpID. = iterator.node->data.lID;
// LINE 299:
	__asm        mov    eax, 1;
	__asm        jmp    _T109;
// LINE 301:
_Td3:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00473C42;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00473C4D;
// LINE 302:
	__asm        inc    i;
// LINE 303:
	__asm        jmp    _T31;
// LINE 304:
_Tf9:
	lHelpID. = 0x0;
// LINE 305:
	__asm        xor    eax, eax;
	__asm        jmp    _T109;
// LINE 306:
_T109:
}

// FUNCTION: COPTER_D 0x00473c6c
void HangarWindow::ScrollHangarView(long lDistance) {
	long lHangarGraphicWidth;
	long lHangarWindowWidth;

// LINE 314:
	__asm        jmp    near ptr 0x00473C7D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    lHangarWindowWidth, eax;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    eax, [eax+8];
	__asm        mov    lHangarGraphicWidth, eax;
	__asm        jmp    near ptr 0x00473CA0;
// LINE 317:
	__asm        mov    eax, lDistance;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x12A], eax;
// LINE 318:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x12A], 0;
	__asm        jge    _T62;
// LINE 319:
	this-><HangarWindow+0x12a> = 0x0;
// LINE 320:
	__asm        jmp    _T86;
_T62:
	__asm        mov    eax, lHangarGraphicWidth;
	__asm        sub    eax, lHangarWindowWidth;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x12A];
	__asm        jge    _T86;
// LINE 321:
	__asm        mov    eax, lHangarGraphicWidth;
	__asm        sub    eax, lHangarWindowWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x12A], eax;
// LINE 322:
_T86:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 323:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        jmp    near ptr 0x00473D2D;

	__asm        jmp    near ptr 0x00473D32;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     _Tdb;

	__asm        jmp    _T15c;
_Tdb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    _T104;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T157;

	__asm        jmp    _T157;
_T104:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    _T13a;

	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T157;

	__asm        jmp    _T157;
_T13a:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    _T157;
_T157:
	__asm        jmp    _T15c;
_T15c:
	__asm        jmp    near ptr 0x00473DCD;
// LINE 324:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::HideHelp;
// LINE 325:
	__asm        jmp    near ptr 0x00473DDA;
}

// FUNCTION: COPTER_D 0x00473de1
int32_t HangarWindow::IsHangarRectVisibleInWindow(class MRect& rectHangar) {
	class MRect rectCompare;
	class MRect rectWindowLocal;

// LINE 367:
	__asm        mov    eax, rectHangar;
	__asm        lea    ecx, rectCompare.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 368:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowLocal.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 369:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x12A];
	__asm        neg    eax;
	__asm        sub    rectCompare.left, eax;
// LINE 370:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x12A];
	__asm        neg    eax;
	__asm        sub    rectCompare.right, eax;
// LINE 371:
	__asm        xor    eax, eax;
	__asm        sub    eax, rectWindowLocal.left;
	__asm        mov    [ebp-0x2C], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, rectWindowLocal.top;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    rectWindowLocal.left, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    rectWindowLocal.right, eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    rectWindowLocal.top, eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    rectWindowLocal.bottom, eax;
	__asm        jmp    near ptr 0x00473E75;
// LINE 373:
	__asm        mov    eax, rectWindowLocal.left;
	__asm        cmp    rectCompare.right, eax;
	__asm        jl     _Tce;

	__asm        mov    eax, rectWindowLocal.right;
	__asm        cmp    rectCompare.left, eax;
	__asm        jg     _Tce;

	__asm        mov    eax, rectWindowLocal.top;
	__asm        cmp    rectCompare.bottom, eax;
	__asm        jl     _Tce;

	__asm        mov    eax, rectWindowLocal.bottom;
	__asm        cmp    rectCompare.top, eax;
	__asm        jl     _Tce;

	__asm        mov    eax, 1;
	__asm        jmp    _Td0;
_Tce:
	__asm        xor    eax, eax;
_Td0:
	__asm        jmp    _Td8;

	__asm        mov    eax, [ebp-0x24];
_Td8:
	__asm        jmp    near ptr 0x00473EBE;
// LINE 374:
}

// FUNCTION: COPTER_D 0x00473ec5
void HangarWindow::ClipRectToWindow(class MRect& rectToClip) {
// LINE 384:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T28;
// LINE 385:
	rectToClip.left = this-><HangarWindow+0x10>;
// LINE 386:
_T28:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    _T46;
// LINE 387:
	rectToClip.top = this-><HangarWindow+0x14>;
// LINE 388:
_T46:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jge    _T64;
// LINE 389:
	rectToClip.right = this-><HangarWindow+0x18>;
// LINE 390:
_T64:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jge    _T82;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, rectToClip;
	__asm        add    [ecx+0xC], eax;
// LINE 392:
_T82:
	__asm        jmp    near ptr 0x00473F4C;
}

// FUNCTION: COPTER_D 0x00473f53
void HangarWindow::DisplayHelp(int32_t nHelp, class MPoint& ptHelp) {
	class MRect rectTempChildWindow;
	class basic_string<char> sHelp;
	int32_t nFullStringID;

// LINE 440:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00473FAE;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    sHelp.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sHelp.reference = 0x0;
_T6d:
	__asm        mov    sHelp.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00473FCC;
// LINE 441:
	__asm        jmp    near ptr 0x00473FD1;

	__asm        jmp    near ptr 0x00473FD6;
// LINE 443:
	__asm        cmp    nHelp, 0x19;
	__asm        jle    _T10a;
// LINE 444:
	__asm        mov    eax, sHelp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Td9;

	__asm        mov    eax, sHelp.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _Td9;

	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00474016;

	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00474027;

	__asm        jmp    _Td9;
_Td9:
	__asm        jmp    near ptr 0x00474031;

	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     _T100;

	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T100:
	__asm        jmp    near ptr 0x00474058;

	__asm        jmp    _T61d;
// LINE 446:
_T10a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        je     _T309;
// LINE 447:
	__asm        push   0;
	__asm        mov    eax, nHelp;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 448:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1090], eax;
	__asm        cmp    dword ptr [ebp-0x1090], 0;
	__asm        jne    _T1de;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1090], eax;
	__asm        jmp    near ptr 0x004740E3;

	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00474107;

	__asm        jmp    near ptr 0x0047410C;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047412C;

	__asm        jmp    _T20c;
_T1de:
	__asm        jmp    near ptr 0x00474136;

	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047415A;

	__asm        jmp    _T20c;
// LINE 449:
_T20c:
	__asm        lea    eax, sHelp.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xC4];
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xE0];
// LINE 451:
	__asm        mov    eax, ptHelp;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptHelp;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x34];
// LINE 454:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectTempChildWindow.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 455:
	__asm        lea    eax, rectTempChildWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::FitRectToWindow;
// LINE 458:
	__asm        jmp    near ptr 0x004741F4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, rectTempChildWindow.top;
	__asm        jle    _T2cb;
// LINE 459:
	__asm        add    rectTempChildWindow.top, 0x22;
// LINE 460:
	__asm        jmp    _T2cf;
// LINE 461:
_T2cb:
	__asm        sub    rectTempChildWindow.top, 0x22;
// LINE 462:
_T2cf:
	__asm        mov    eax, rectTempChildWindow.top;
	__asm        push   eax;
	__asm        mov    eax, rectTempChildWindow.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x68], eax;
// LINE 465:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T309;
// LINE 467:
_T309:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        je     _T5b4;
// LINE 468:
	__asm        lea    eax, sHelp.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, nHelp;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetSoundFileNameFromHelpID;
// LINE 469:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x3C];
// LINE 470:
	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     _T366;

	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T366:
	__asm        jmp    near ptr 0x004742BE;

	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sHelp.c_str_ptr, eax;
	__asm        jmp    near ptr 0x004742D6;

	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3ed;

	__asm        jmp    near ptr 0x004742E8;

	__asm        jmp    near ptr 0x004742ED;

	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3b9;

	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T3c5;

	__asm        jmp    _T3c5;
_T3b9:
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    _T3c5;
_T3c5:
	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3ed;
_T3ed:
	__asm        jmp    near ptr 0x00474345;

	__asm        mov    byte ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x0047434E;

	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00474359;

	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00474374;

	__asm        jmp    near ptr 0x00474379;

	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x8C], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T4ee;

	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004743B3;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T4cb;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00474419;

	__asm        jmp    _T4d4;
_T4cb:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax], 0;
_T4d4:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474436;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T4f5;
_T4ee:
	None = 0x0;
_T4f5:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00474454;

	__asm        push   2;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    eax, [ebp-0x20];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T554;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T554;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T554;
_T554:
	__asm        jmp    near ptr 0x004744AC;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T57b;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T57b:
	__asm        jmp    near ptr 0x004744D3;
// LINE 471:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x24];
// LINE 472:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+8];
// LINE 474:
_T5b4:
	__asm        mov    eax, sHelp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5ec;

	__asm        mov    eax, sHelp.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T5ec;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T5ec;
_T5ec:
	__asm        jmp    near ptr 0x00474544;

	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     _T613;

	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T613:
	__asm        jmp    near ptr 0x0047456B;

	__asm        jmp    _T61d;
_T61d:
}

// FUNCTION: COPTER_D 0x00474577
void HangarWindow::HideHelp() {

	None = this->myTextHelpWindow;
// LINE 486:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x0047459B;
// LINE 487:
	__asm        jmp    near ptr 0x004745A0;
}

// FUNCTION: COPTER_D 0x004745a5
int32_t HangarWindow::GetSoundFileNameFromHelpID(long __formal, class basic_string<char>& sSoundFileName) {
// LINE 496:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tbb;

	__asm        push   0x599810;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004745E0;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T98;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0x599810;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00474638;

	__asm        jmp    _Ta1;
_T98:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_Ta1:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474655;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _Tc2;
_Tbb:
	None = 0x0;
_Tc2:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x00474673;

	__asm        mov    eax, sSoundFileName;
	__asm        push   eax;
	__asm        lea    eax, [ebp-8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0047468E;

	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T16c;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T16c;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T14c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T14c:
	__asm        jmp    near ptr 0x004746F6;

	__asm        jmp    near ptr 0x004746FB;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047470C;

	__asm        jmp    _T16c;
_T16c:
	__asm        jmp    near ptr 0x00474716;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T193;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T193:
	__asm        jmp    near ptr 0x0047473D;
// LINE 497:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00474747;
// LINE 498:
}

// FUNCTION: COPTER_D 0x0047474e
void HangarWindow::LoadHotSpots() {
// LINE 505:
	__asm        push   0x6A;
	__asm        mov    eax, this;
	__asm        add    eax, 0x116;
	__asm        push   eax;
	__asm        call   LoadListFromResource;
	__asm        add    esp, 8;
// LINE 506:
	__asm        jmp    near ptr 0x00474772;
}



// Contribution: 1:00073780-000737b8 Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00474780
// HangarWindow::`scalar deleting destructor'



// Contribution: 1:000737c0-000737db Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004747c0
// deallocate



// Contribution: 1:000737e0-000737ef Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004747e0
// destroy



// Contribution: 2:00001c20-00001ce3 Module: 36, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for HangarWindow @ 0x00590c20
//   00: HangarWindow::DoMessage @ 0x004734ed
//   01: HangarWindow::Initialize @ 0x00472611
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: HangarWindow::CreateImage @ 0x004730a3
//   05: HangarWindow::DestroyImage @ 0x00473229
//   06: HangarWindow::ComposeSelf @ 0x00473296
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: HangarWindow::DoKeyDown @ 0x004735e1
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: HangarWindow::DoCursorDown @ 0x0047363c
//   36: HangarWindow::DoCursorUp @ 0x004736a8
//   37: HangarWindow::DoCursorMove @ 0x004736c5
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: HangarWindow::`scalar deleting destructor' @ 0x00474780
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: HangarWindow::GetImagePath @ 0x00473826
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 3:000027c8-00002818 Module: 36, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005997c8
char * SZ_HANGAR_DAY_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005997cc
char * SZ_HANGAR_NIGHT_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005997d0
char * SZ_HANGAR_DAY_BUTTON_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005997d4
char * SZ_HANGAR_NIGHT_BUTTON_FILE_NAME = { 0 /* todo */ };

