// Module: Hangar.obj
// Source: C:\Copter\source\sparkal\Hangar.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class HangarWindow (forward reference);
class HangarWindow : public GraphicWindow
{
public:
	void HangarWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~HangarWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	int32_t ReadPalette(struct SparkalColor*);
	void ScrollHangarView(long);
	int32_t IsDaytime();
	int32_t IsNighttime();
protected:
	virtual void GetImagePath();
	void LoadHotSpots();
	void ConvertWindowToHangar(class MRect&);
	void ConvertWindowToHangar(class MPoint&);
	void ConvertHangarToWindow(class MRect&);
	void ConvertHangarToWindow(class MPoint&);
	int32_t IsHangarRectVisibleInWindow(class MRect&);
	void ClipRectToWindow(class MRect&);
	long GetHangarVisiblePosition();
	void ResetPopupTimer();
	int32_t HasPopupTimerExpired();
	void DisplayHelp(int32_t, class MPoint&);
	void HideHelp();
	int32_t GetSoundFileNameFromHelpID(long, class basic_string<char>&);
	int32_t GetHotspotFromPosition(long&, class MPoint&);
	class TextWindow* myTextHelpWindow;
	class DigitalSound myHelpSound;
	int32_t bDaytime;
	int32_t bUsingGraphicHelp;
	int32_t bUsingAudioHelp;
	int32_t bTestedHotspotsAlready;
	int32_t nScrollingHangar;
	class MTimer myTimer;
	class list<HotSpot> myHotSpots;
	class CBackBuffer* mySecondImage;
	class MPoint ptSavedCursorPosition;
	long lWindowPositionInHangar;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: void;

// Type: class ButtonWindow (forward reference);
class ButtonWindow : public GraphicWindow
{
		enum ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: char *;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: long;

// Type: void * __ptr32;

// Type: char;

// Type: unsigned long;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class list<HotSpot>::iterator;
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator operator++(int32_t);
	class list<HotSpot>::iterator& operator++();
	class list<HotSpot>::iterator operator--(int32_t);
	class list<HotSpot>::iterator& operator--();
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: uint32_t;

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: struct bidirectional_iterator<HotSpot,int>;
struct bidirectional_iterator<HotSpot,int>{
};



// Contribution: 1:00070f70-00073776 Module: 36, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00471f70
void HangarWindow::HangarWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        jmp    near ptr 0x00471F81;
	__asm        jmp    near ptr 0x00471F86;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00471FA9;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00471FC8;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFA], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x112], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    near ptr 0x0047209F;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
	__asm        jmp    near ptr 0x0047209F;
	__asm        jmp    near ptr 0x004720A4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11A], 0;
	__asm        inc    dword ptr ds:[0x5971CC];
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr ds:[0x5971D8], 0;
	__asm        je     near ptr 0x004720E3;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004722C8;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        cmp    ds:[0x5971D0], eax;
	__asm        jne    near ptr 0x004722B3;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x00472142;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472138;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472147;
	__asm        jmp    near ptr 0x0047214C;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    dword ptr [ebp-0x38], 0x92;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00472187;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0047218D;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00472192;
	__asm        jmp    near ptr 0x00472197;
	__asm        jmp    near ptr 0x0047219C;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004721FE;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004721F4;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472203;
	__asm        jmp    near ptr 0x00472208;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5971D4], eax;
	__asm        mov    dword ptr [ebp-0x4C], 0x92;
	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    dword ptr [ebp-0x50], 1;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00472265;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0047226B;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00472270;
	__asm        jmp    near ptr 0x00472275;
	__asm        jmp    near ptr 0x0047227A;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x5971D4];
	__asm        mov    ds:[0x5971D0], eax;
	__asm        jmp    near ptr 0x00472299;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004722C8;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004722CD;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x116], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x116];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x116];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472307;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
	__asm        jmp    near ptr 0x00472319;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x122], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x126], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00472338;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590C20;
// LINE 54:
	__asm        cmp    dword ptr ds:[0x598E90], 0;
	__asm        jne    near ptr 0x0047236D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 1;
	__asm        jmp    near ptr 0x0047237A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF2], 0;
// LINE 55:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::LoadHotSpots;
// LINE 56:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::CreateImage;
// LINE 57:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 58:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 59:
	__asm        jmp    near ptr 0x004723A5;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004723af
void HangarWindow::~HangarWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590C20;
// LINE 66:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::DestroyImage;
// LINE 67:
	__asm        jmp    near ptr 0x004723D1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004723E8;
	__asm        jmp    near ptr 0x004723ED;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00472406;
	__asm        jmp    near ptr 0x0047240B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    [ebp-0x3C], eax;
	__asm        jne    near ptr 0x0047242D;
	__asm        jmp    near ptr 0x00472441;
	__asm        jmp    near ptr 0x0047242D;
	__asm        jmp    near ptr 0x0047243C;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00472441;
	__asm        jmp    near ptr 0x00472446;
	__asm        jmp    near ptr 0x0047253D;
	__asm        jmp    near ptr 0x00472455;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0047253D;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00472468;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00472473;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472499;
	__asm        jmp    near ptr 0x0047249E;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        je     near ptr 0x004724D1;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   destroy;
	__asm        add    esp, 4;
	__asm        add    dword ptr [ebp-0x30], 8;
	__asm        jmp    near ptr 0x004724B0;
	__asm        jmp    near ptr 0x004724D6;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   deallocate;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004724F0;
	__asm        jmp    near ptr 0x004724F5;
	__asm        jmp    near ptr 0x00472509;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047250E;
	__asm        jmp    near ptr 0x00472513;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x0047252A;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x11A];
	__asm        jmp    near ptr 0x00472538;
	__asm        jmp    near ptr 0x00472417;
	__asm        jmp    near ptr 0x00472542;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x00472565;
	__asm        dec    dword ptr ds:[0x5971CC];
	__asm        jne    near ptr 0x004725EF;
	__asm        cmp    dword ptr ds:[0x5971DC], 0;
	__asm        je     near ptr 0x004725CC;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004725AC;
	__asm        jmp    near ptr 0x004725B1;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004725C2;
	__asm        jmp    near ptr 0x004725C7;
	__asm        jmp    near ptr 0x00472571;
	__asm        mov    dword ptr ds:[0x5971D8], 0;
	__asm        mov    dword ptr ds:[0x5971D4], 0;
	__asm        mov    dword ptr ds:[0x5971D0], 0;
	__asm        jmp    near ptr 0x004725EF;
	__asm        jmp    near ptr 0x004725F4;
	__asm        jmp    near ptr 0x004725F9;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00472611
int32_t HangarWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	char * szButtonFileName;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 76:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x0047268F;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00472681;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00472696;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004726A2;
// LINE 78:
	__asm        jmp    near ptr 0x004726A7;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     near ptr 0x004726C7;
	__asm        mov    eax, ds:[0x5997D0];
	__asm        mov    szButtonFileName, eax;
	__asm        jmp    near ptr 0x004726CF;
	__asm        mov    eax, ds:[0x5997D4];
	__asm        mov    szButtonFileName, eax;
// LINE 80:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 81:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00472748;
	__asm        jmp    near ptr 0x004726F9;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    near ptr 0x0047271A;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x00472755;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 82:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xCC];
// LINE 83:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x28];
// LINE 84:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xD8];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x80], eax;
// LINE 85:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004727C5;
// LINE 86:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12A], 0x152;
// LINE 88:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0047283F;
	__asm        jmp    near ptr 0x004727F4;
	__asm        mov    dword ptr [ebp-0x3C], 0x16;
	__asm        mov    dword ptr [ebp-0x38], 0x1AA;
	__asm        mov    dword ptr [ebp-0x34], 0x17;
	__asm        mov    dword ptr [ebp-0x30], 0x1AB;
	__asm        jmp    near ptr 0x00472815;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00472846;
	__asm        mov    tempButtonWindow, 0;
// LINE 89:
	__asm        push   0;
	__asm        push   0x7D;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 90:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1098], eax;
	__asm        cmp    dword ptr [ebp-0x1098], 0;
	__asm        jne    near ptr 0x00472902;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1098], eax;
	__asm        jmp    near ptr 0x004728B4;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004728D8;
	__asm        jmp    near ptr 0x004728DD;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004728FD;
	__asm        jmp    near ptr 0x00472930;
	__asm        jmp    near ptr 0x00472907;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047292B;
	__asm        jmp    near ptr 0x00472930;
// LINE 91:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 92:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 94:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004729B4;
	__asm        jmp    near ptr 0x00472969;
	__asm        mov    dword ptr [ebp-0x50], 0xAE;
	__asm        mov    dword ptr [ebp-0x4C], 0x1AA;
	__asm        mov    dword ptr [ebp-0x48], 0xAF;
	__asm        mov    dword ptr [ebp-0x44], 0x1AB;
	__asm        jmp    near ptr 0x0047298A;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x004729BB;
	__asm        mov    tempButtonWindow, 0;
// LINE 95:
	__asm        push   0;
	__asm        push   0x7E;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 96:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x209C], eax;
	__asm        cmp    dword ptr [ebp-0x209C], 0;
	__asm        jne    near ptr 0x00472A77;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x209C], eax;
	__asm        jmp    near ptr 0x00472A29;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472A4D;
	__asm        jmp    near ptr 0x00472A52;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472A72;
	__asm        jmp    near ptr 0x00472BC7;
	__asm        jmp    near ptr 0x00472A7C;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20B0], eax;
	__asm        cmp    dword ptr [ebp-0x20B0], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00472AD6;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x20AC], eax;
	__asm        mov    eax, [ebp-0x20AC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472AC7;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472AD6;
	__asm        jmp    near ptr 0x00472ADB;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00472B0C;
	__asm        cmp    dword ptr [ebp-0x20B0], 0;
	__asm        je     near ptr 0x00472B6D;
	__asm        jmp    near ptr 0x00472AFA;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x20B0];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00472B6D;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20A4], eax;
	__asm        cmp    dword ptr [ebp-0x20A4], 0;
	__asm        je     near ptr 0x00472B4D;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20A4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x20A0], eax;
	__asm        jmp    near ptr 0x00472B57;
	__asm        mov    dword ptr [ebp-0x20A0], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x20A0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00472BAC;
	__asm        cmp    dword ptr [ebp-0x20B0], 0;
	__asm        je     near ptr 0x00472BAC;
	__asm        jmp    near ptr 0x00472B7F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20A8], eax;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2098];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00472BAC;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00472BBD;
	__asm        jmp    near ptr 0x00472BC2;
	__asm        jmp    near ptr 0x00472BC7;
// LINE 97:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 98:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 100:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00472C4B;
	__asm        jmp    near ptr 0x00472C00;
	__asm        mov    dword ptr [ebp-0x64], 0x146;
	__asm        mov    dword ptr [ebp-0x60], 0x1AA;
	__asm        mov    dword ptr [ebp-0x5C], 0x147;
	__asm        mov    dword ptr [ebp-0x58], 0x1AB;
	__asm        jmp    near ptr 0x00472C21;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00472C52;
	__asm        mov    tempButtonWindow, 0;
// LINE 101:
	__asm        push   0;
	__asm        push   0x7F;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 102:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30B4], eax;
	__asm        cmp    dword ptr [ebp-0x30B4], 0;
	__asm        jne    near ptr 0x00472D0E;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x30B4], eax;
	__asm        jmp    near ptr 0x00472CC0;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472CE4;
	__asm        jmp    near ptr 0x00472CE9;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472D09;
	__asm        jmp    near ptr 0x00472D3C;
	__asm        jmp    near ptr 0x00472D13;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x30B0];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472D37;
	__asm        jmp    near ptr 0x00472D3C;
// LINE 103:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 104:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 106:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x00472DC0;
	__asm        jmp    near ptr 0x00472D75;
	__asm        mov    dword ptr [ebp-0x78], 0x1DE;
	__asm        mov    dword ptr [ebp-0x74], 0x1AA;
	__asm        mov    dword ptr [ebp-0x70], 0x1DF;
	__asm        mov    dword ptr [ebp-0x6C], 0x1AB;
	__asm        jmp    near ptr 0x00472D96;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, szButtonFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00472DC7;
	__asm        mov    tempButtonWindow, 0;
// LINE 107:
	__asm        push   0;
	__asm        push   0x80;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 108:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x40B8], eax;
	__asm        cmp    dword ptr [ebp-0x40B8], 0;
	__asm        jne    near ptr 0x00472E86;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x40B8], eax;
	__asm        jmp    near ptr 0x00472E38;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472E5C;
	__asm        jmp    near ptr 0x00472E61;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00472E81;
	__asm        jmp    near ptr 0x00472EB4;
	__asm        jmp    near ptr 0x00472E8B;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x40B4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00472EAF;
	__asm        jmp    near ptr 0x00472EB4;
// LINE 109:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 110:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 112:
	__asm        mov    dword ptr [ebp-0x7C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00472F1C;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x00472F1C;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00472F1C;
	__asm        jmp    near ptr 0x00472F21;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x00472F4F;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472F54;
	__asm        mov    eax, [ebp-0x7C];
	__asm        jmp    near ptr 0x00472F5C;
// LINE 113:
}

// FUNCTION: COPTER_D 0x00472f61
int32_t HangarWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x00472F95;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00472F9A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x00472FB8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00473031;
	__asm        jmp    near ptr 0x00472FCD;
	__asm        jmp    near ptr 0x00472FD2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00472FF7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00473003;
	__asm        jmp    near ptr 0x00473003;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00473003;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00473031;
	__asm        jmp    near ptr 0x00473036;
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0047303F;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047304A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0047306B;
	__asm        jmp    near ptr 0x00473070;
	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00473095;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00473097;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0047309C;
// LINE 123:
}

// FUNCTION: COPTER_D 0x004730a3
int32_t HangarWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 133:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 0;
	__asm        jne    near ptr 0x00473214;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB4];
// LINE 135:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00473207;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x0047310F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473114;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x00473132;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004731AB;
	__asm        jmp    near ptr 0x00473147;
	__asm        jmp    near ptr 0x0047314C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00473171;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0047317D;
	__asm        jmp    near ptr 0x0047317D;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0047317D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004731AB;
	__asm        jmp    near ptr 0x004731B0;
	__asm        mov    byte ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x004731B9;
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004731C4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004731E5;
	__asm        jmp    near ptr 0x004731EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11E], eax;
	__asm        jmp    near ptr 0x00473214;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        jmp    near ptr 0x00473222;
// LINE 138:
}

// FUNCTION: COPTER_D 0x00473229
void HangarWindow::DestroyImage() {
// LINE 144:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 0;
	__asm        je     near ptr 0x0047328C;
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0047327F;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047327A;
	__asm        jmp    near ptr 0x0047327F;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
// LINE 148:
	__asm        jmp    near ptr 0x00473291;
}

// FUNCTION: COPTER_D 0x00473296
int32_t HangarWindow::ComposeSelf() {
	long lHelpID;

// LINE 156:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x004732BC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004732C3;
// LINE 157:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004734E8;
// LINE 159:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x102], 0;
	__asm        je     near ptr 0x004732E5;
// LINE 160:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x102];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 161:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004732F6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     near ptr 0x00473385;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    near ptr 0x00473329;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00473370;
	__asm        jmp    near ptr 0x00473370;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    near ptr 0x00473359;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00473370;
	__asm        jmp    near ptr 0x00473370;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00473370;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10A];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        add    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    near ptr 0x004733CC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x112], 0;
	__asm        je     near ptr 0x004733CC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004733D7;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004733D7;
	__asm        cmp    dword ptr [ebp-8], 0x3E8;
	__asm        jb     near ptr 0x004733E9;
	__asm        jmp    near ptr 0x004733EE;
	__asm        jmp    near ptr 0x0047344C;
	__asm        jmp    near ptr 0x004733FD;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0047344C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jne    near ptr 0x0047344C;
// LINE 162:
	__asm        mov    eax, this;
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        lea    eax, lHelpID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetHotspotFromPosition;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0047343F;
// LINE 163:
	__asm        mov    eax, this;
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        mov    eax, lHelpID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::DisplayHelp;
// LINE 164:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 1;
// LINE 167:
	__asm        jmp    near ptr 0x00473451;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x004734DE;
// LINE 168:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
// LINE 170:
	__asm        jmp    near ptr 0x00473470;
	__asm        jmp    near ptr 0x00473475;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x12A];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11E];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x11E];
	__asm        call   dword ptr [edx+0xC];
// LINE 171:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 176:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004734E8;
// LINE 177:
}

// FUNCTION: COPTER_D 0x004734ed
int32_t HangarWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lOwnerMessage;

// LINE 186:
	__asm        cmp    lWindowID, 0;
	__asm        jne    near ptr 0x00473530;
// LINE 187:
	__asm        mov    lOwnerMessage, 0;
// LINE 188:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 190:
	__asm        jmp    near ptr 0x004735D0;
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x00473567;
// LINE 191:
	__asm        mov    lOwnerMessage, 1;
// LINE 192:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 194:
	__asm        jmp    near ptr 0x004735D0;
	__asm        cmp    lWindowID, 2;
	__asm        jne    near ptr 0x0047359E;
// LINE 195:
	__asm        mov    lOwnerMessage, 2;
// LINE 196:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 198:
	__asm        jmp    near ptr 0x004735D0;
	__asm        cmp    lWindowID, 3;
	__asm        jne    near ptr 0x004735D0;
// LINE 199:
	__asm        mov    lOwnerMessage, 0x63;
// LINE 200:
	__asm        lea    eax, lOwnerMessage;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 202:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004735DA;
// LINE 203:
}

// FUNCTION: COPTER_D 0x004735e1
long HangarWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 216:
	__asm        cmp    lKey, 0x25;
	__asm        jne    near ptr 0x00473610;
// LINE 217:
	__asm        push   0xFFFFFFE8;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 218:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00473635;
// LINE 220:
	__asm        jmp    near ptr 0x0047362E;
	__asm        cmp    lKey, 0x27;
	__asm        jne    near ptr 0x0047362E;
// LINE 221:
	__asm        push   0x18;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::ScrollHangarView;
// LINE 222:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00473635;
// LINE 224:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00473635;
// LINE 225:
}

// FUNCTION: COPTER_D 0x0047363c
long HangarWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lHotspotID;

// LINE 236:
	__asm        jmp    near ptr 0x0047364D;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047365E;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        lea    eax, lHotspotID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetHotspotFromPosition;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00473697;
// LINE 239:
	__asm        lea    eax, lHotspotID;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 241:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004736A1;
// LINE 242:
}

// FUNCTION: COPTER_D 0x004736a8
long HangarWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 251:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004736BE;
// LINE 252:
}

// FUNCTION: COPTER_D 0x004736c5
long HangarWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 262:
	__asm        cmp    nCursorX, 8;
	__asm        jge    near ptr 0x004736ED;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0xFFFFFFE8;
// LINE 264:
	__asm        jmp    near ptr 0x00473729;
	__asm        jmp    near ptr 0x004736F2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, 8;
	__asm        cmp    eax, nCursorX;
	__asm        jge    near ptr 0x0047371C;
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0x18;
// LINE 266:
	__asm        jmp    near ptr 0x00473729;
// LINE 267:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        jmp    near ptr 0x00473755;
	__asm        jmp    near ptr 0x0047375A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     near ptr 0x0047376F;
	__asm        jmp    near ptr 0x004737F0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    near ptr 0x00473798;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x004737EB;
	__asm        jmp    near ptr 0x004737EB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    near ptr 0x004737CE;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x004737EB;
	__asm        jmp    near ptr 0x004737EB;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x004737EB;
	__asm        jmp    near ptr 0x004737F0;
	__asm        jmp    near ptr 0x004737F5;
// LINE 269:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::HideHelp;
// LINE 270:
	__asm        mov    eax, nCursorX;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x122], eax;
// LINE 271:
	__asm        mov    eax, nCursorY;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x126], eax;
// LINE 272:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047381F;
// LINE 273:
}

// FUNCTION: COPTER_D 0x00473826
void HangarWindow::GetImagePath() {
// LINE 280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     near ptr 0x004739BC;
// LINE 281:
	__asm        mov    eax, ds:[0x5997C8];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0047384F;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0047389A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047388B;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047389A;
	__asm        jmp    near ptr 0x0047389F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004738D0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0047396E;
	__asm        jmp    near ptr 0x004738BE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0047396E;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004738FF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00473906;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0047395B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0047395B;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00473945;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473956;
	__asm        jmp    near ptr 0x0047395B;
	__asm        jmp    near ptr 0x00473960;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004739A1;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004739A1;
	__asm        jmp    near ptr 0x0047397D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004739A1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004739B2;
	__asm        jmp    near ptr 0x004739B7;
// LINE 282:
	__asm        jmp    near ptr 0x00473B31;
// LINE 283:
	__asm        mov    eax, ds:[0x5997CC];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004739C9;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00473A14;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473A05;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473A14;
	__asm        jmp    near ptr 0x00473A19;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00473A4A;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00473AE8;
	__asm        jmp    near ptr 0x00473A38;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00473AE8;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00473A79;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00473A80;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00473AD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00473AD5;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00473ABF;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00473AD0;
	__asm        jmp    near ptr 0x00473AD5;
	__asm        jmp    near ptr 0x00473ADA;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x00473B1B;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00473B1B;
	__asm        jmp    near ptr 0x00473AF7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00473B1B;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00473B2C;
	__asm        jmp    near ptr 0x00473B31;
// LINE 284:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00473B52;
// LINE 285:
	__asm        jmp    near ptr 0x00473B57;
}

// FUNCTION: COPTER_D 0x00473b5c
int32_t HangarWindow::GetHotspotFromPosition(long& lHelpID, class MPoint& ptPosition) {
	class list<HotSpot>::iterator iterator;
	int32_t i;

// LINE 293:
	__asm        mov    i, 0;
// LINE 294:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00473B88;
	__asm        jmp    near ptr 0x00473B8D;
// LINE 296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00473BA4;
	__asm        jmp    near ptr 0x00473BA9;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x00473BBF;
	__asm        jmp    near ptr 0x00473BD3;
	__asm        jmp    near ptr 0x00473BBF;
	__asm        jmp    near ptr 0x00473BCE;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x00473BD3;
	__asm        jmp    near ptr 0x00473BD8;
	__asm        jmp    near ptr 0x00473C55;
	__asm        jmp    near ptr 0x00473BE7;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00473C55;
// LINE 297:
	__asm        jmp    near ptr 0x00473BEC;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12A];
	__asm        mov    ecx, ptPosition;
	__asm        add    eax, [ecx];
	__asm        push   eax;
	__asm        mov    ecx, iterator.node;
	__asm        add    ecx, 8;
	__asm        call   HotSpot::IsPointInHotspot;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00473C2F;
// LINE 298:
	__asm        jmp    near ptr 0x00473C1A;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lHelpID;
	__asm        mov    [ecx], eax;
// LINE 299:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00473C65;
// LINE 301:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00473C42;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00473C4D;
// LINE 302:
	__asm        inc    i;
// LINE 303:
	__asm        jmp    near ptr 0x00473B8D;
// LINE 304:
	__asm        mov    eax, lHelpID;
	__asm        mov    dword ptr [eax], 0;
// LINE 305:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00473C65;
// LINE 306:
}

// FUNCTION: COPTER_D 0x00473c6c
void HangarWindow::ScrollHangarView(long lDistance) {
	long lHangarGraphicWidth;
	long lHangarWindowWidth;

// LINE 314:
	__asm        jmp    near ptr 0x00473C7D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    lHangarWindowWidth, eax;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    eax, [eax+8];
	__asm        mov    lHangarGraphicWidth, eax;
	__asm        jmp    near ptr 0x00473CA0;
// LINE 317:
	__asm        mov    eax, lDistance;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x12A], eax;
// LINE 318:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x12A], 0;
	__asm        jge    near ptr 0x00473CCE;
// LINE 319:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12A], 0;
// LINE 320:
	__asm        jmp    near ptr 0x00473CF2;
	__asm        mov    eax, lHangarGraphicWidth;
	__asm        sub    eax, lHangarWindowWidth;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x12A];
	__asm        jge    near ptr 0x00473CF2;
// LINE 321:
	__asm        mov    eax, lHangarGraphicWidth;
	__asm        sub    eax, lHangarWindowWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x12A], eax;
// LINE 322:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 323:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
	__asm        jmp    near ptr 0x00473D2D;
	__asm        jmp    near ptr 0x00473D32;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10A], 0;
	__asm        je     near ptr 0x00473D47;
	__asm        jmp    near ptr 0x00473DC8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 1;
	__asm        jne    near ptr 0x00473D70;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x00473DC3;
	__asm        jmp    near ptr 0x00473DC3;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jne    near ptr 0x00473DA6;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x00473DC3;
	__asm        jmp    near ptr 0x00473DC3;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
	__asm        jmp    near ptr 0x00473DC3;
	__asm        jmp    near ptr 0x00473DC8;
	__asm        jmp    near ptr 0x00473DCD;
// LINE 324:
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::HideHelp;
// LINE 325:
	__asm        jmp    near ptr 0x00473DDA;
}

// FUNCTION: COPTER_D 0x00473de1
int32_t HangarWindow::IsHangarRectVisibleInWindow(class MRect& rectHangar) {
	class MRect rectCompare;
	class MRect rectWindowLocal;

// LINE 367:
	__asm        mov    eax, rectHangar;
	__asm        lea    ecx, rectCompare.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 368:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowLocal.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 369:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x12A];
	__asm        neg    eax;
	__asm        sub    rectCompare.left, eax;
// LINE 370:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x12A];
	__asm        neg    eax;
	__asm        sub    rectCompare.right, eax;
// LINE 371:
	__asm        xor    eax, eax;
	__asm        sub    eax, rectWindowLocal.left;
	__asm        mov    [ebp-0x2C], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, rectWindowLocal.top;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    rectWindowLocal.left, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    rectWindowLocal.right, eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    rectWindowLocal.top, eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    rectWindowLocal.bottom, eax;
	__asm        jmp    near ptr 0x00473E75;
// LINE 373:
	__asm        mov    eax, rectWindowLocal.left;
	__asm        cmp    rectCompare.right, eax;
	__asm        jl     near ptr 0x00473EAF;
	__asm        mov    eax, rectWindowLocal.right;
	__asm        cmp    rectCompare.left, eax;
	__asm        jg     near ptr 0x00473EAF;
	__asm        mov    eax, rectWindowLocal.top;
	__asm        cmp    rectCompare.bottom, eax;
	__asm        jl     near ptr 0x00473EAF;
	__asm        mov    eax, rectWindowLocal.bottom;
	__asm        cmp    rectCompare.top, eax;
	__asm        jl     near ptr 0x00473EAF;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00473EB1;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00473EB9;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    near ptr 0x00473EBE;
// LINE 374:
}

// FUNCTION: COPTER_D 0x00473ec5
void HangarWindow::ClipRectToWindow(class MRect& rectToClip) {
// LINE 384:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00473EED;
// LINE 385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, rectToClip;
	__asm        mov    [ecx], eax;
// LINE 386:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x00473F0B;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, rectToClip;
	__asm        mov    [ecx+4], eax;
// LINE 388:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jge    near ptr 0x00473F29;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, rectToClip;
	__asm        mov    [ecx+8], eax;
// LINE 390:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToClip;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jge    near ptr 0x00473F47;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, rectToClip;
	__asm        add    [ecx+0xC], eax;
// LINE 392:
	__asm        jmp    near ptr 0x00473F4C;
}

// FUNCTION: COPTER_D 0x00473f53
void HangarWindow::DisplayHelp(int32_t nHelp, class MPoint& ptHelp) {
	class MRect rectTempChildWindow;
	class basic_string<char> sHelp;
	int32_t nFullStringID;

// LINE 440:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x00473FB9;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00473FAE;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    sHelp.reference, eax;
	__asm        jmp    near ptr 0x00473FC0;
	__asm        mov    sHelp.reference, 0;
	__asm        mov    sHelp.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00473FCC;
// LINE 441:
	__asm        jmp    near ptr 0x00473FD1;
	__asm        jmp    near ptr 0x00473FD6;
// LINE 443:
	__asm        cmp    nHelp, 0x19;
	__asm        jle    near ptr 0x0047405D;
// LINE 444:
	__asm        mov    eax, sHelp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0047402C;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x0047402C;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00474016;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00474027;
	__asm        jmp    near ptr 0x0047402C;
	__asm        jmp    near ptr 0x00474031;
	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     near ptr 0x00474053;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00474058;
	__asm        jmp    near ptr 0x00474570;
// LINE 446:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        je     near ptr 0x0047425C;
// LINE 447:
	__asm        push   0;
	__asm        mov    eax, nHelp;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 448:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1090], eax;
	__asm        cmp    dword ptr [ebp-0x1090], 0;
	__asm        jne    near ptr 0x00474131;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1090], eax;
	__asm        jmp    near ptr 0x004740E3;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00474107;
	__asm        jmp    near ptr 0x0047410C;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047412C;
	__asm        jmp    near ptr 0x0047415F;
	__asm        jmp    near ptr 0x00474136;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108C];
	__asm        push   eax;
	__asm        lea    ecx, sHelp.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047415A;
	__asm        jmp    near ptr 0x0047415F;
// LINE 449:
	__asm        lea    eax, sHelp.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xC4];
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0xE0];
// LINE 451:
	__asm        mov    eax, ptHelp;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptHelp;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x34];
// LINE 454:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectTempChildWindow.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 455:
	__asm        lea    eax, rectTempChildWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::FitRectToWindow;
// LINE 458:
	__asm        jmp    near ptr 0x004741F4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, rectTempChildWindow.top;
	__asm        jle    near ptr 0x0047421E;
// LINE 459:
	__asm        add    rectTempChildWindow.top, 0x22;
// LINE 460:
	__asm        jmp    near ptr 0x00474222;
// LINE 461:
	__asm        sub    rectTempChildWindow.top, 0x22;
// LINE 462:
	__asm        mov    eax, rectTempChildWindow.top;
	__asm        push   eax;
	__asm        mov    eax, rectTempChildWindow.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x68], eax;
// LINE 465:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x0047425C;
// LINE 467:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        je     near ptr 0x00474507;
// LINE 468:
	__asm        lea    eax, sHelp.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, nHelp;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   HangarWindow::GetSoundFileNameFromHelpID;
// LINE 469:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x3C];
// LINE 470:
	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     near ptr 0x004742B9;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004742BE;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sHelp.c_str_ptr, eax;
	__asm        jmp    near ptr 0x004742D6;
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00474340;
	__asm        jmp    near ptr 0x004742E8;
	__asm        jmp    near ptr 0x004742ED;
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0047430C;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00474318;
	__asm        jmp    near ptr 0x00474318;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    near ptr 0x00474318;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00474340;
	__asm        jmp    near ptr 0x00474345;
	__asm        mov    byte ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x0047434E;
	__asm        lea    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00474359;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00474374;
	__asm        jmp    near ptr 0x00474379;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x8C], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00474441;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004743B3;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0047441E;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00474419;
	__asm        jmp    near ptr 0x00474427;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474436;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00474448;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00474454;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    eax, [ebp-0x20];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004744A7;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004744A7;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x004744A7;
	__asm        jmp    near ptr 0x004744AC;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004744CE;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004744D3;
// LINE 471:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+0x24];
// LINE 472:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    ecx, 0x78;
	__asm        call   dword ptr [eax+8];
// LINE 474:
	__asm        mov    eax, sHelp.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sHelp.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0047453F;
	__asm        mov    eax, sHelp.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0047453F;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x0047453F;
	__asm        jmp    near ptr 0x00474544;
	__asm        cmp    sHelp.c_str_ptr, 0;
	__asm        je     near ptr 0x00474566;
	__asm        mov    eax, sHelp.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047456B;
	__asm        jmp    near ptr 0x00474570;
}

// FUNCTION: COPTER_D 0x00474577
void HangarWindow::HideHelp() {
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
// LINE 486:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x0047459B;
// LINE 487:
	__asm        jmp    near ptr 0x004745A0;
}

// FUNCTION: COPTER_D 0x004745a5
int32_t HangarWindow::GetSoundFileNameFromHelpID(long __formal, class basic_string<char>& sSoundFileName) {
// LINE 496:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00474660;
	__asm        push   0x599810;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004745E0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0047463D;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0x599810;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00474638;
	__asm        jmp    near ptr 0x00474646;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474655;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00474667;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x00474673;
	__asm        mov    eax, sSoundFileName;
	__asm        push   eax;
	__asm        lea    eax, [ebp-8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0047468E;
	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00474711;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00474711;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004746F1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004746F6;
	__asm        jmp    near ptr 0x004746FB;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047470C;
	__asm        jmp    near ptr 0x00474711;
	__asm        jmp    near ptr 0x00474716;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00474738;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047473D;
// LINE 497:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00474747;
// LINE 498:
}

// FUNCTION: COPTER_D 0x0047474e
void HangarWindow::LoadHotSpots() {
// LINE 505:
	__asm        push   0x6A;
	__asm        mov    eax, this;
	__asm        add    eax, 0x116;
	__asm        push   eax;
	__asm        call   LoadListFromResource;
	__asm        add    esp, 8;
// LINE 506:
	__asm        jmp    near ptr 0x00474772;
}



// Contribution: 1:00073780-000737b8 Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00474780
// HangarWindow::`scalar deleting destructor'



// Contribution: 1:000737c0-000737db Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004747c0
// deallocate



// Contribution: 1:000737e0-000737ef Module: 36, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004747e0
// destroy



// Contribution: 2:00001c20-00001ce3 Module: 36, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590c20
// ??_7HangarWindow@@6B@


// Contribution: 3:000027c8-00002818 Module: 36, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005997c8
// SZ_HANGAR_DAY_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x005997cc
// SZ_HANGAR_NIGHT_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x005997d0
// SZ_HANGAR_DAY_BUTTON_FILE_NAME
// GLOBAL: COPTER_D 0x005997d4
// SZ_HANGAR_NIGHT_BUTTON_FILE_NAME
