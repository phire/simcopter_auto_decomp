// Module: Graphwin.obj
// Source: C:\Copter\source\sparkal\Graphwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct GraphicWindowColorConstants;
struct GraphicWindowColorConstants{
	int32_t nPaletteIndexBlack;
	int32_t nPaletteIndexDarkGray;
	int32_t nPaletteIndexLightGray;
	int32_t nPaletteIndexWhite;
	int32_t nPaletteIndexRed;
	int32_t nPaletteIndexBlue;
	int32_t nPaletteIndexGreen;
	int32_t nPaletteIndexBlueGreen;
	int32_t nPaletteIndexTransparent;
	void GraphicWindowColorConstants();
};

// Type: class GraphicWindow (forward reference);

// Type: class list<GraphicWindow *>;
class list<GraphicWindow *>{
	using void_pointer = void * __ptr32;
	struct list<GraphicWindow *>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class GraphicWindow* data;
	};
protected:
	static class allocator<list<GraphicWindow *>::list_node> list_node_allocator;
	static class allocator<GraphicWindow *> value_allocator;
	using value_type = class GraphicWindow*;
	using value_allocator_type = class allocator<GraphicWindow *>;
	using pointer = class GraphicWindow**;
	using reference = class GraphicWindow*&;
	using const_reference = const class GraphicWindow*&;
	using list_node_allocator_type = class allocator<list<GraphicWindow *>::list_node>;
	using link_type = struct list<GraphicWindow *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<GraphicWindow *>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<GraphicWindow *>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<GraphicWindow *>::list_node_buffer>;
	using buffer_pointer = struct list<GraphicWindow *>::list_node_buffer*;
protected:
	static class allocator<list<GraphicWindow *>::list_node_buffer> buffer_allocator;
	static struct list<GraphicWindow *>::list_node_buffer* buffer_list;
	static struct list<GraphicWindow *>::list_node* free_list;
	static struct list<GraphicWindow *>::list_node* next_avail;
	static struct list<GraphicWindow *>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<GraphicWindow *>::list_node* get_node();
	void put_node(struct list<GraphicWindow *>::list_node*);
	struct list<GraphicWindow *>::list_node* node;
	uint32_t length;
	class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::iterator&);
		class GraphicWindow*& operator*();
		class list<GraphicWindow *>::iterator operator++(int32_t);
		class list<GraphicWindow *>::iterator& operator++();
		class list<GraphicWindow *>::iterator operator--(int32_t);
		class list<GraphicWindow *>::iterator& operator--();
	};
	class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void const_iterator(const class list<GraphicWindow *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
		const class GraphicWindow*& operator*();
		class list<GraphicWindow *>::const_iterator operator++(int32_t);
		class list<GraphicWindow *>::const_iterator& operator++();
		class list<GraphicWindow *>::const_iterator operator--(int32_t);
		class list<GraphicWindow *>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int>;
public:
	void list<GraphicWindow *>(const class list<GraphicWindow *>&);
	void list<GraphicWindow *>(const class GraphicWindow**, const class GraphicWindow**);
	void list<GraphicWindow *>(uint32_t, const class GraphicWindow*&);
	void list<GraphicWindow *>();
	class list<GraphicWindow *>::const_iterator begin();
	class list<GraphicWindow *>::iterator begin();
	class list<GraphicWindow *>::const_iterator end();
	class list<GraphicWindow *>::iterator end();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rend();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class GraphicWindow*& front();
	class GraphicWindow*& front();
	const class GraphicWindow*& back();
	class GraphicWindow*& back();
	void swap(class list<GraphicWindow *>&);
	void insert(class list<GraphicWindow *>::iterator, uint32_t, const class GraphicWindow*&);
	void insert(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::const_iterator, class list<GraphicWindow *>::const_iterator);
	void insert(class list<GraphicWindow *>::iterator, const class GraphicWindow**, const class GraphicWindow**);
	class list<GraphicWindow *>::iterator insert(class list<GraphicWindow *>::iterator, const class GraphicWindow*&);
	void push_front(const class GraphicWindow*&);
	void push_back(const class GraphicWindow*&);
	void erase(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void erase(class list<GraphicWindow *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<GraphicWindow *>();
	class list<GraphicWindow *>& operator=(const class list<GraphicWindow *>&);
protected:
	void transfer(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
public:
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&);
	void remove(const class GraphicWindow*&);
	void unique();
	void merge(class list<GraphicWindow *>&);
	void reverse();
	void sort();
};

// Type: class GraphicWindowManager (forward reference);
class GraphicWindowManager{
public:
	void GraphicWindowManager(class GraphicWindow*);
	void ~GraphicWindowManager();
	// vtable: 0
	intro void SetNewBaseWindow(class GraphicWindow*);
	// vtable: 4
	intro int32_t DeleteWindow(class GraphicWindow*);
	// vtable: 8
	intro long DoCharacter(long);
	// vtable: 12
	intro long DoKeyDown(long, char);
	// vtable: 16
	intro long DoKeyUp(long, char);
	// vtable: 20
	intro long DoCursorDown(long, long, unsigned long);
	// vtable: 24
	intro long DoCursorUp(long, long, unsigned long);
	// vtable: 28
	intro long DoCursorMove(long, long);
	// vtable: 32
	intro int32_t SendCursorMessageToChildWindow(class GraphicWindow*, int32_t, long, long, unsigned long);
	// vtable: 36
	intro int32_t ComposeAllWindows();
	// vtable: 40
	intro int32_t IsWindowValid(class GraphicWindow*);
	// vtable: 44
	intro int32_t IsWindowOrParentInDeletionList(class GraphicWindow*);
	// vtable: 48
	intro int32_t IncrementBusyCount();
	// vtable: 52
	intro int32_t DecrementBusyCount();
protected:
	int32_t DeleteWindowAndRemoveItsTraces(class GraphicWindow*);
	int32_t DeleteAllWindowsInDeletionList();
	int32_t nBusyIteratingCount;
	class GraphicWindow* baseWindow;
	class list<GraphicWindow *> listWindowsToDelete;
};

// Type: void ();

// Type: struct list<GraphicWindow *>::list_node_buffer (forward reference);

// Type: struct list<GraphicWindow *>::list_node (forward reference);

// Type: uint32_t;

// Type: void;

// Type: struct GraphicWindowColorConstants (forward reference);
struct GraphicWindowColorConstants{
	int32_t nPaletteIndexBlack;
	int32_t nPaletteIndexDarkGray;
	int32_t nPaletteIndexLightGray;
	int32_t nPaletteIndexWhite;
	int32_t nPaletteIndexRed;
	int32_t nPaletteIndexBlue;
	int32_t nPaletteIndexGreen;
	int32_t nPaletteIndexBlueGreen;
	int32_t nPaletteIndexTransparent;
	void GraphicWindowColorConstants();
};

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: long;

// Type: void * __ptr32;

// Type: int32_t;

// Type: class list<GraphicWindow *>::iterator;
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::iterator&);
	class GraphicWindow*& operator*();
	class list<GraphicWindow *>::iterator operator++(int32_t);
	class list<GraphicWindow *>::iterator& operator++();
	class list<GraphicWindow *>::iterator operator--(int32_t);
	class list<GraphicWindow *>::iterator& operator--();
};

// Type: char;

// Type: unsigned long;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char *;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char[261];

// Type: class CBackBuffer (forward reference);

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class ScreenWindow (forward reference);
class ScreenWindow : public GraphicWindow
{
public:
	void ScreenWindow(class MRect&, int32_t, class CBackBuffer*, class GraphicWindowOwner*, int32_t);
	void ScreenWindow(const class ScreenWindow&);
	void ScreenWindow();
	virtual void ~ScreenWindow();
	class ScreenWindow& operator=(const class ScreenWindow&);
	virtual int32_t ComposeSelf();
	virtual int32_t DrawSelf();
	void SetParentBuffer(class CBackBuffer*);
protected:
	class CBackBuffer* bufferParent;
};

// Type: class list<GraphicWindow *> (forward reference);
class list<GraphicWindow *>{
	using void_pointer = void * __ptr32;
	struct list<GraphicWindow *>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class GraphicWindow* data;
	};
protected:
	static class allocator<list<GraphicWindow *>::list_node> list_node_allocator;
	static class allocator<GraphicWindow *> value_allocator;
	using value_type = class GraphicWindow*;
	using value_allocator_type = class allocator<GraphicWindow *>;
	using pointer = class GraphicWindow**;
	using reference = class GraphicWindow*&;
	using const_reference = const class GraphicWindow*&;
	using list_node_allocator_type = class allocator<list<GraphicWindow *>::list_node>;
	using link_type = struct list<GraphicWindow *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<GraphicWindow *>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<GraphicWindow *>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<GraphicWindow *>::list_node_buffer>;
	using buffer_pointer = struct list<GraphicWindow *>::list_node_buffer*;
protected:
	static class allocator<list<GraphicWindow *>::list_node_buffer> buffer_allocator;
	static struct list<GraphicWindow *>::list_node_buffer* buffer_list;
	static struct list<GraphicWindow *>::list_node* free_list;
	static struct list<GraphicWindow *>::list_node* next_avail;
	static struct list<GraphicWindow *>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<GraphicWindow *>::list_node* get_node();
	void put_node(struct list<GraphicWindow *>::list_node*);
	struct list<GraphicWindow *>::list_node* node;
	uint32_t length;
	class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::iterator&);
		class GraphicWindow*& operator*();
		class list<GraphicWindow *>::iterator operator++(int32_t);
		class list<GraphicWindow *>::iterator& operator++();
		class list<GraphicWindow *>::iterator operator--(int32_t);
		class list<GraphicWindow *>::iterator& operator--();
	};
	class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void const_iterator(const class list<GraphicWindow *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
		const class GraphicWindow*& operator*();
		class list<GraphicWindow *>::const_iterator operator++(int32_t);
		class list<GraphicWindow *>::const_iterator& operator++();
		class list<GraphicWindow *>::const_iterator operator--(int32_t);
		class list<GraphicWindow *>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int>;
public:
	void list<GraphicWindow *>(const class list<GraphicWindow *>&);
	void list<GraphicWindow *>(const class GraphicWindow**, const class GraphicWindow**);
	void list<GraphicWindow *>(uint32_t, const class GraphicWindow*&);
	void list<GraphicWindow *>();
	class list<GraphicWindow *>::const_iterator begin();
	class list<GraphicWindow *>::iterator begin();
	class list<GraphicWindow *>::const_iterator end();
	class list<GraphicWindow *>::iterator end();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rend();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class GraphicWindow*& front();
	class GraphicWindow*& front();
	const class GraphicWindow*& back();
	class GraphicWindow*& back();
	void swap(class list<GraphicWindow *>&);
	void insert(class list<GraphicWindow *>::iterator, uint32_t, const class GraphicWindow*&);
	void insert(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::const_iterator, class list<GraphicWindow *>::const_iterator);
	void insert(class list<GraphicWindow *>::iterator, const class GraphicWindow**, const class GraphicWindow**);
	class list<GraphicWindow *>::iterator insert(class list<GraphicWindow *>::iterator, const class GraphicWindow*&);
	void push_front(const class GraphicWindow*&);
	void push_back(const class GraphicWindow*&);
	void erase(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void erase(class list<GraphicWindow *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<GraphicWindow *>();
	class list<GraphicWindow *>& operator=(const class list<GraphicWindow *>&);
protected:
	void transfer(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
public:
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&);
	void remove(const class GraphicWindow*&);
	void unique();
	void merge(class list<GraphicWindow *>&);
	void reverse();
	void sort();
};

// Type: class list<GraphicWindow *>::iterator (forward reference);
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::iterator&);
	class GraphicWindow*& operator*();
	class list<GraphicWindow *>::iterator operator++(int32_t);
	class list<GraphicWindow *>::iterator& operator++();
	class list<GraphicWindow *>::iterator operator--(int32_t);
	class list<GraphicWindow *>::iterator& operator--();
};

// Type: class list<GraphicWindow *>::const_iterator (forward reference);
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void const_iterator(const class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
	const class GraphicWindow*& operator*();
	class list<GraphicWindow *>::const_iterator operator++(int32_t);
	class list<GraphicWindow *>::const_iterator& operator++();
	class list<GraphicWindow *>::const_iterator operator--(int32_t);
	class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: class list<GraphicWindow *>::const_iterator;
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void const_iterator(const class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
	const class GraphicWindow*& operator*();
	class list<GraphicWindow *>::const_iterator operator++(int32_t);
	class list<GraphicWindow *>::const_iterator& operator++();
	class list<GraphicWindow *>::const_iterator operator--(int32_t);
	class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: struct bidirectional_iterator<GraphicWindow *,int>;
struct bidirectional_iterator<GraphicWindow *,int>{
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:0009fa00-000a6b52 Module: 9, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0a00
void $E48() {

	__asm        call   $E44;
	__asm        call   $E47;
	__asm        jmp    near ptr 0x004A0A15;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0a1a
void $E44() {

	__asm        mov    GraphicWindow::listModalWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0AB4;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta4:
	__asm        jmp    near ptr 0x004A0AC3;

	__asm        jmp    near ptr 0x004A0AC8;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    near ptr 0x004A0B0E;

	__asm        jmp    near ptr 0x004A0B13;

	__asm        jmp    near ptr 0x004A0B18;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0B6C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15c:
	__asm        jmp    near ptr 0x004A0B7B;

	__asm        jmp    near ptr 0x004A0B80;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    near ptr 0x004A0BE8;

	__asm        jmp    near ptr 0x004A0BED;

	__asm        jmp    near ptr 0x004A0BF2;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A0C0D;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    near ptr 0x004A0C41;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listModalWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    ecx, GraphicWindow::listModalWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    ecx, GraphicWindow::listModalWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A0C69;

	__asm        jmp    near ptr 0x004A0C6E;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0c73
void $E47() {

	__asm        push   0x4A0C90;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0C8B;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0c90
void $E45() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 1;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 1;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A0CC9;

	__asm        jmp    near ptr 0x004A0CCE;

	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A0CE3;

	__asm        jmp    near ptr 0x004A0CE8;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T64:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T8e;

	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T8e;
_T89:
	__asm        jmp    _T93;
_T8e:
	__asm        jmp    _T112;
_T93:
	__asm        jmp    _Ta2;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;
_Ta2:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A0D45;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A0D50;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A0D76;

	__asm        jmp    near ptr 0x004A0D7B;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A0D92;

	__asm        dec    GraphicWindow::listModalWindows.length;
	__asm        jmp    near ptr 0x004A0D9D;

	__asm        jmp    _T64;
_T112:
	__asm        jmp    near ptr 0x004A0DA7;

	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A0DC6;

	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
_T142:
	__asm        cmp    list<GraphicWindow *>::buffer_list, 0;
	__asm        je     _T19d;

	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0E0D;

	__asm        jmp    near ptr 0x004A0E12;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0E23;

	__asm        jmp    near ptr 0x004A0E28;

	__asm        jmp    _T142;
_T19d:
	__asm        mov    list<GraphicWindow *>::free_list, 0;
	__asm        mov    list<GraphicWindow *>::next_avail, 0;
	__asm        mov    list<GraphicWindow *>::last, 0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	__asm        jmp    near ptr 0x004A0E5A;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0e5f
void $E53() {

	__asm        call   $E50;
	__asm        call   $E52;
	__asm        jmp    near ptr 0x004A0E74;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a0e79
void $E50() {

	__asm        mov    GraphicWindow::listFocusWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0F13;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta4:
	__asm        jmp    near ptr 0x004A0F22;

	__asm        jmp    near ptr 0x004A0F27;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    near ptr 0x004A0F6D;

	__asm        jmp    near ptr 0x004A0F72;

	__asm        jmp    near ptr 0x004A0F77;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0FCB;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15c:
	__asm        jmp    near ptr 0x004A0FDA;

	__asm        jmp    near ptr 0x004A0FDF;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    near ptr 0x004A1047;

	__asm        jmp    near ptr 0x004A104C;

	__asm        jmp    near ptr 0x004A1051;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A106C;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    near ptr 0x004A10A0;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listFocusWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    ecx, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    ecx, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A10C8;

	__asm        jmp    near ptr 0x004A10CD;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a10d2
void $E52() {

	__asm        push   0x4A10EF;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A10EA;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a10ef
void $E51() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 2;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 2;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1128;

	__asm        jmp    near ptr 0x004A112D;

	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A1142;

	__asm        jmp    near ptr 0x004A1147;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T64:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T8e;

	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T8e;
_T89:
	__asm        jmp    _T93;
_T8e:
	__asm        jmp    _T112;
_T93:
	__asm        jmp    _Ta2;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;
_Ta2:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A11A4;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A11AF;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A11D5;

	__asm        jmp    near ptr 0x004A11DA;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A11F1;

	__asm        dec    GraphicWindow::listFocusWindows.length;
	__asm        jmp    near ptr 0x004A11FC;

	__asm        jmp    _T64;
_T112:
	__asm        jmp    near ptr 0x004A1206;

	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A1225;

	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
_T142:
	__asm        cmp    list<GraphicWindow *>::buffer_list, 0;
	__asm        je     _T19d;

	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A126C;

	__asm        jmp    near ptr 0x004A1271;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1282;

	__asm        jmp    near ptr 0x004A1287;

	__asm        jmp    _T142;
_T19d:
	__asm        mov    list<GraphicWindow *>::free_list, 0;
	__asm        mov    list<GraphicWindow *>::next_avail, 0;
	__asm        mov    list<GraphicWindow *>::last, 0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	__asm        jmp    near ptr 0x004A12B9;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a12be
void $E58() {

	__asm        call   $E55;
	__asm        call   $E57;
	__asm        jmp    near ptr 0x004A12D3;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a12d8
void $E55() {

	__asm        mov    GraphicWindow::listValidWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1372;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta4:
	__asm        jmp    near ptr 0x004A1381;

	__asm        jmp    near ptr 0x004A1386;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    near ptr 0x004A13CC;

	__asm        jmp    near ptr 0x004A13D1;

	__asm        jmp    near ptr 0x004A13D6;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A142A;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15c:
	__asm        jmp    near ptr 0x004A1439;

	__asm        jmp    near ptr 0x004A143E;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    near ptr 0x004A14A6;

	__asm        jmp    near ptr 0x004A14AB;

	__asm        jmp    near ptr 0x004A14B0;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A14CB;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    near ptr 0x004A14FF;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listValidWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    ecx, GraphicWindow::listValidWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    ecx, GraphicWindow::listValidWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1527;

	__asm        jmp    near ptr 0x004A152C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a1531
void $E57() {

	__asm        push   0x4A154E;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1549;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a154e
void $E56() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 4;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 4;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1587;

	__asm        jmp    near ptr 0x004A158C;

	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A15A1;

	__asm        jmp    near ptr 0x004A15A6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T64:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T8e;

	__asm        jmp    _T7a;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T8e;
_T89:
	__asm        jmp    _T93;
_T8e:
	__asm        jmp    _T112;
_T93:
	__asm        jmp    _Ta2;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;
_Ta2:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A1603;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A160E;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1634;

	__asm        jmp    near ptr 0x004A1639;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A1650;

	__asm        dec    GraphicWindow::listValidWindows.length;
	__asm        jmp    near ptr 0x004A165B;

	__asm        jmp    _T64;
_T112:
	__asm        jmp    near ptr 0x004A1665;

	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A1684;

	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
_T142:
	__asm        cmp    list<GraphicWindow *>::buffer_list, 0;
	__asm        je     _T19d;

	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A16CB;

	__asm        jmp    near ptr 0x004A16D0;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A16E1;

	__asm        jmp    near ptr 0x004A16E6;

	__asm        jmp    _T142;
_T19d:
	__asm        mov    list<GraphicWindow *>::free_list, 0;
	__asm        mov    list<GraphicWindow *>::next_avail, 0;
	__asm        mov    list<GraphicWindow *>::last, 0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	__asm        jmp    near ptr 0x004A1718;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a171d
void $E61() {

	__asm        call   $E60;
	__asm        jmp    near ptr 0x004A172D;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004a1732
void $E60() {

	__asm        mov    ecx, 0x606968;
	__asm        call   GraphicWindowColorConstants::GraphicWindowColorConstants;
	__asm        jmp    near ptr 0x004A1747;
}

// FUNCTION: COPTER_D 0x004a174c
void GraphicWindowColorConstants::GraphicWindowColorConstants() {
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 37:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0xF8;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 7;
// LINE 39:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0xFF;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 1;
// LINE 41:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 4;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 2;
// LINE 43:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 6;
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0xFFFFFFFF;
// LINE 48:
	__asm        jmp    near ptr 0x004A17B6;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a17be
int32_t GraphicWindowOwner::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 62:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A17D1;
// LINE 63:
}

// FUNCTION: COPTER_D 0x004a17d8
void GraphicWindowManager::GraphicWindowManager(class GraphicWindow* newBaseWindow) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, newBaseWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T5b;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T238;
_T5b:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T223;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tba;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1888;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tba:
	__asm        jmp    near ptr 0x004A1897;

	__asm        jmp    near ptr 0x004A189C;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tff;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T105;
_Tff:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T105:
	__asm        jmp    near ptr 0x004A18E2;

	__asm        jmp    near ptr 0x004A18E7;

	__asm        jmp    near ptr 0x004A18EC;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T172;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1940;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T172:
	__asm        jmp    near ptr 0x004A194F;

	__asm        jmp    near ptr 0x004A1954;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d9;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1df;
_T1d9:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1df:
	__asm        jmp    near ptr 0x004A19BC;

	__asm        jmp    near ptr 0x004A19C1;

	__asm        jmp    near ptr 0x004A19C6;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A19E1;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T238;
_T223:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T238:
	__asm        jmp    near ptr 0x004A1A15;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1A40;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591648;
// LINE 78:
	__asm        mov    eax, this;
	__asm        mov    GraphicWindow::windowManager, eax;
// LINE 79:
	__asm        jmp    near ptr 0x004A1A56;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a1a60
void GraphicWindowManager::~GraphicWindowManager() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591648;
// LINE 87:
	__asm        jmp    near ptr 0x004A1A7A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1A8E;

	__asm        jmp    near ptr 0x004A1A93;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A1AA9;

	__asm        jmp    near ptr 0x004A1AAE;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_T5a:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _T70;

	__asm        jmp    _T84;

	__asm        jmp    _T70;
_T70:
	__asm        jmp    _T7f;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T84;
_T7f:
	__asm        jmp    _T89;
_T84:
	__asm        jmp    _T108;
_T89:
	__asm        jmp    _T98;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T108;
_T98:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A1B0B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A1B16;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1B3C;

	__asm        jmp    near ptr 0x004A1B41;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A1B58;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x004A1B63;

	__asm        jmp    _T5a;
_T108:
	__asm        jmp    near ptr 0x004A1B6D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A1B8D;

	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1b7;
_T139:
	__asm        cmp    list<GraphicWindow *>::buffer_list, 0;
	__asm        je     _T194;

	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1BD4;

	__asm        jmp    near ptr 0x004A1BD9;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1BEA;

	__asm        jmp    near ptr 0x004A1BEF;

	__asm        jmp    _T139;
_T194:
	__asm        mov    list<GraphicWindow *>::free_list, 0;
	__asm        mov    list<GraphicWindow *>::next_avail, 0;
	__asm        mov    list<GraphicWindow *>::last, 0;
	__asm        jmp    _T1b7;
_T1b7:
	__asm        jmp    near ptr 0x004A1C1C;
}

// FUNCTION: COPTER_D 0x004a1c21
void GraphicWindowManager::SetNewBaseWindow(class GraphicWindow* newBaseWindow) {
// LINE 98:
	__asm        mov    eax, newBaseWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 99:
	__asm        jmp    near ptr 0x004A1C3B;
}

// FUNCTION: COPTER_D 0x004a1c42
int32_t GraphicWindowManager::DeleteWindow(class GraphicWindow* windowToDelete) {
// LINE 114:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jle    _T2e5;
// LINE 115:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        jne    _T2d6;
// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1C86;

	__asm        jmp    near ptr 0x004A1C8B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T7b;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T258;
_T7b:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T243;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tda;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1D12;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tda:
	__asm        jmp    near ptr 0x004A1D21;

	__asm        jmp    near ptr 0x004A1D26;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T11f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T125;
_T11f:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T125:
	__asm        jmp    near ptr 0x004A1D6C;

	__asm        jmp    near ptr 0x004A1D71;

	__asm        jmp    near ptr 0x004A1D76;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T192;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1DCA;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T192:
	__asm        jmp    near ptr 0x004A1DD9;

	__asm        jmp    near ptr 0x004A1DDE;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f9;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1ff;
_T1f9:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1ff:
	__asm        jmp    near ptr 0x004A1E46;

	__asm        jmp    near ptr 0x004A1E4B;

	__asm        jmp    near ptr 0x004A1E50;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A1E6B;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T258;
_T243:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T258:
	__asm        jmp    near ptr 0x004A1E9F;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A1EAA;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A1EB8;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T28d;

	__asm        mov    eax, windowToDelete;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T28d;
_T28d:
	__asm        jmp    near ptr 0x004A1ED4;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x10], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A1F0E;

	__asm        jmp    near ptr 0x004A1F13;

	__asm        jmp    _T2d6;
// LINE 123:
_T2d6:
	__asm        mov    eax, 2;
	__asm        jmp    _T305;
// LINE 125:
	__asm        jmp    _T2ef;
// LINE 126:
_T2e5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 129:
_T2ef:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteWindowAndRemoveItsTraces;
// LINE 130:
	__asm        mov    eax, 1;
	__asm        jmp    _T305;
// LINE 131:
_T305:
}

// FUNCTION: COPTER_D 0x004a1f4e
int32_t GraphicWindowManager::DeleteWindowAndRemoveItsTraces(class GraphicWindow* windowToDelete) {
	class GraphicWindow* windowParent;

// LINE 139:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        jne    _T2a;
// LINE 140:
	__asm        xor    eax, eax;
	__asm        jmp    _T9d;
// LINE 144:
_T2a:
	__asm        mov    eax, windowToDelete;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    windowParent, eax;
// LINE 145:
	__asm        cmp    windowParent, 0;
	__asm        je     _T68;
// LINE 146:
	__asm        mov    eax, windowParent;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T63;
// LINE 147:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, windowParent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowParent;
	__asm        call   dword ptr [eax+0x5C];
// LINE 149:
_T63:
	__asm        jmp    _T93;
// LINE 150:
_T68:
	__asm        mov    eax, windowToDelete;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T93;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T93;
// LINE 155:
_T93:
	__asm        mov    eax, 1;
	__asm        jmp    _T9d;
// LINE 156:
_T9d:
}

// FUNCTION: COPTER_D 0x004a1ff2
int32_t GraphicWindowManager::DeleteAllWindowsInDeletionList() {
	static const int32_t nReentrancyCount = { /* <data@0x0059a96c> */ };
	class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;

// LINE 165:
	__asm        cmp    nReentrancyCount, 0;
	__asm        jle    _T20;
// LINE 166:
	__asm        xor    eax, eax;
	__asm        jmp    _T1df;
// LINE 167:
_T20:
	__asm        inc    nReentrancyCount;
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A202E;

	__asm        jmp    near ptr 0x004A2033;
// LINE 170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T1cf;
// LINE 171:
_T4e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A2054;

	__asm        jmp    near ptr 0x004A2059;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jne    _T7d;

	__asm        jmp    _T91;

	__asm        jmp    _T7d;
_T7d:
	__asm        jmp    _T8c;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T91;
_T8c:
	__asm        jmp    _T96;
_T91:
	__asm        jmp    _Tdc;
_T96:
	__asm        jmp    _Ta5;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _Tdc;
// LINE 172:
_Ta5:
	__asm        jmp    near ptr 0x004A209C;

	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteWindowAndRemoveItsTraces;
// LINE 173:
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A20BE;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A20C9;
// LINE 174:
	__asm        jmp    _T4e;
// LINE 175:
_Tdc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A20E2;

	__asm        jmp    near ptr 0x004A20E7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A20FD;

	__asm        jmp    near ptr 0x004A2102;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x48], eax;
_T11c:
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    [ebp-0x48], eax;
	__asm        jne    _T132;

	__asm        jmp    _T146;

	__asm        jmp    _T132;
_T132:
	__asm        jmp    _T141;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    _T146;
_T141:
	__asm        jmp    _T14b;
_T146:
	__asm        jmp    _T1ca;
_T14b:
	__asm        jmp    _T15a;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T1ca;
_T15a:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004A215F;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A216A;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A2190;

	__asm        jmp    near ptr 0x004A2195;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A21AC;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x004A21B7;

	__asm        jmp    _T11c;
_T1ca:
	__asm        jmp    _T1cf;
// LINE 177:
_T1cf:
	__asm        dec    nReentrancyCount;
// LINE 178:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 179:
_T1df:
}

// FUNCTION: COPTER_D 0x004a21d6
int32_t GraphicWindowManager::IsWindowOrParentInDeletionList(class GraphicWindow* windowToCheck) {
	class GraphicWindow* currentGraphicWindowToCheck;
	class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;

// LINE 192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A21F8;

	__asm        jmp    _T27;
// LINE 195:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2211;

	__asm        jmp    near ptr 0x004A2216;

	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tdd;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tdd;
// LINE 196:
_T7e:
	__asm        mov    eax, windowToCheck;
	__asm        mov    currentGraphicWindowToCheck, eax;
// LINE 197:
_T84:
	__asm        cmp    currentGraphicWindowToCheck, 0;
	__asm        je     _Tba;
// LINE 198:
	__asm        jmp    near ptr 0x004A2269;

	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    ecx, currentGraphicWindowToCheck;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tac;
// LINE 199:
	__asm        mov    eax, 1;
	__asm        jmp    _Te4;
// LINE 201:
_Tac:
	__asm        mov    eax, currentGraphicWindowToCheck;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    currentGraphicWindowToCheck, eax;
// LINE 202:
	__asm        jmp    _T84;
// LINE 203:
_Tba:
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A22A3;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A22AE;
// LINE 204:
	__asm        jmp    _T27;
// LINE 205:
_Tdd:
	__asm        xor    eax, eax;
	__asm        jmp    _Te4;
// LINE 206:
_Te4:
}

// FUNCTION: COPTER_D 0x004a22c1
long GraphicWindowManager::DoKeyDown(long lKey, char chModifiers) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 219:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A22E2;

	__asm        jmp    near ptr 0x004A22E7;
// LINE 220:
	__asm        mov    nReturnValue, 0;
// LINE 222:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 223:
_T33:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2307;

	__asm        jmp    near ptr 0x004A230C;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    _T61;

	__asm        jmp    _T75;

	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T70;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T75;
_T70:
	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Te5;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Te5;
// LINE 224:
_T89:
	__asm        jmp    near ptr 0x004A234F;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 225:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _Tc2;
// LINE 226:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x84];
	__asm        mov    nReturnValue, eax;
// LINE 227:
	__asm        jmp    _Te5;
// LINE 229:
_Tc2:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A2396;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A23A1;
// LINE 230:
	__asm        jmp    _T33;
// LINE 231:
_Te5:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T10a;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 234:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 237:
_T10a:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A23D3;
// LINE 238:
}

// FUNCTION: COPTER_D 0x004a23da
long GraphicWindowManager::DoKeyUp(long lKey, char chModifiers) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 251:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A23FB;

	__asm        jmp    near ptr 0x004A2400;
// LINE 252:
	__asm        mov    nReturnValue, 0;
// LINE 254:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 255:
_T33:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2420;

	__asm        jmp    near ptr 0x004A2425;

	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T61;

	__asm        jmp    _T75;

	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T70;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T75;
_T70:
	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Te5;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Te5;
// LINE 256:
_T89:
	__asm        jmp    near ptr 0x004A2468;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 257:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _Tc2;
// LINE 258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x88];
	__asm        mov    nReturnValue, eax;
// LINE 259:
	__asm        jmp    _Te5;
// LINE 261:
_Tc2:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A24AF;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A24BA;
// LINE 262:
	__asm        jmp    _T33;
// LINE 263:
_Te5:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 264:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T10a;
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 266:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 269:
_T10a:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A24EC;
// LINE 270:
}

// FUNCTION: COPTER_D 0x004a24f3
long GraphicWindowManager::DoCharacter(long lCharacter) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 278:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A2514;

	__asm        jmp    near ptr 0x004A2519;
// LINE 279:
	__asm        mov    nReturnValue, 0;
// LINE 281:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 282:
_T33:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2539;

	__asm        jmp    near ptr 0x004A253E;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    _T61;

	__asm        jmp    _T75;

	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T70;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T75;
_T70:
	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Te1;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Te1;
// LINE 283:
_T89:
	__asm        jmp    near ptr 0x004A2581;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 284:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _Tbe;
// LINE 285:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x80];
	__asm        mov    nReturnValue, eax;
// LINE 286:
	__asm        jmp    _Te1;
// LINE 288:
_Tbe:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A25C4;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A25CF;
// LINE 289:
	__asm        jmp    _T33;
// LINE 290:
_Te1:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T106;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 293:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 296:
_T106:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A2601;
// LINE 297:
}

// FUNCTION: COPTER_D 0x004a2608
long GraphicWindowManager::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 308:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T58;
// LINE 314:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 315:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    _T7d;
// LINE 320:
_T58:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    _T7d;
// LINE 321:
_T7d:
}

// FUNCTION: COPTER_D 0x004a268c
long GraphicWindowManager::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 330:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T58;
// LINE 331:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 332:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    _T7d;
// LINE 336:
_T58:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    _T7d;
// LINE 337:
_T7d:
}

// FUNCTION: COPTER_D 0x004a2710
long GraphicWindowManager::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 344:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T54;
// LINE 345:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 346:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    _T77;
// LINE 350:
_T54:
	__asm        push   0;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    _T77;
// LINE 351:
_T77:
}

// FUNCTION: COPTER_D 0x004a278e
int32_t GraphicWindowManager::SendCursorMessageToChildWindow(class GraphicWindow* childWindow, int32_t nMessage, long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 361:
	__asm        jmp    near ptr 0x004A279F;

	__asm        mov    eax, childWindow;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _T196;
// LINE 363:
// Block start:
	class list<GraphicWindow *>::iterator iterator;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A27C0;

	__asm        jmp    _T37;
// LINE 365:
_T37:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+4];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A27D9;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A27E4;
// LINE 367:
	__asm        jmp    near ptr 0x004A27E9;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _T13d;

	__asm        jmp    near ptr 0x004A27FE;

	__asm        jmp    near ptr 0x004A2803;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2814;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jle    _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    _Td3;

	__asm        jmp    _Td8;
_Td3:
	__asm        jmp    _T13d;
_Td8:
	__asm        jmp    _Te7;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T13d;
// LINE 369:
_Te7:
	__asm        jmp    near ptr 0x004A287A;

	__asm        xor    eax, eax;
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0x10];
	__asm        neg    eax;
	__asm        sub    nCursorX, eax;
// LINE 370:
	__asm        jmp    near ptr 0x004A288F;

	__asm        xor    eax, eax;
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    nCursorY, eax;
// LINE 373:
	__asm        jmp    near ptr 0x004A28A4;

	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, nMessage;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    _T238;
// LINE 375:
_T13d:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A28E1;

	__asm        jmp    near ptr 0x004A28E6;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _T16e;

	__asm        jmp    _T187;

	__asm        jmp    _T16e;
_T16e:
	__asm        jmp    _T17d;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T187;
_T17d:
	__asm        jmp    _T37;

	__asm        jmp    _T187;
_T187:
	__asm        jmp    _T196;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T37;
// LINE 377:
// Block end:
_T196:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x7C];
	__asm        test   eax, eax;
	__asm        jne    _T1b0;
// LINE 378:
	__asm        xor    eax, eax;
	__asm        jmp    _T238;
// LINE 380:
_T1b0:
	__asm        cmp    nMessage, 1;
	__asm        jne    _T1de;
// LINE 381:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    _T238;
// LINE 382:
	__asm        jmp    _T231;
_T1de:
	__asm        cmp    nMessage, 2;
	__asm        jne    _T20c;
// LINE 383:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    _T238;
// LINE 384:
	__asm        jmp    _T231;
_T20c:
	__asm        cmp    nMessage, 4;
	__asm        jne    _T231;
// LINE 385:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    _T238;
// LINE 386:
_T231:
	__asm        xor    eax, eax;
	__asm        jmp    _T238;
// LINE 387:
_T238:
}

// FUNCTION: COPTER_D 0x004a29cd
int32_t GraphicWindowManager::ComposeAllWindows() {
	int32_t nReturnValue;

// LINE 401:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x18];
	__asm        mov    nReturnValue, eax;
// LINE 403:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 404:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T41;
// LINE 405:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 406:
_T41:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A2A16;
// LINE 407:
}

// FUNCTION: COPTER_D 0x004a2a1b
int32_t GraphicWindowManager::IsWindowValid(class GraphicWindow* windowToTestForValidity) {
// LINE 415:
	__asm        mov    eax, windowToTestForValidity;
	__asm        push   eax;
	__asm        call   GraphicWindow::FindWindowA;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2A38;
// LINE 416:
}

// FUNCTION: COPTER_D 0x004a2a3f
 GraphicWindow::GraphicWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A2A59;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T6d;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2A9E;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T77;
_T6d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T77:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A2AC5;

	__asm        jmp    near ptr 0x004A2ACA;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        jmp    near ptr 0x004A2AF7;

	__asm        jmp    near ptr 0x004A2AFC;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        jmp    near ptr 0x004A2B29;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T126;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T303;
_T126:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2ee;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        jne    _T185;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2BBA;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T185:
	__asm        jmp    near ptr 0x004A2BC9;

	__asm        jmp    near ptr 0x004A2BCE;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1ca;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1d0;
_T1ca:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1d0:
	__asm        jmp    near ptr 0x004A2C14;

	__asm        jmp    near ptr 0x004A2C19;

	__asm        jmp    near ptr 0x004A2C1E;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x74];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    _T23d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2C72;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T23d:
	__asm        jmp    near ptr 0x004A2C81;

	__asm        jmp    near ptr 0x004A2C86;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2a4;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T2aa;
_T2a4:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
_T2aa:
	__asm        jmp    near ptr 0x004A2CEE;

	__asm        jmp    near ptr 0x004A2CF3;

	__asm        jmp    near ptr 0x004A2CF8;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A2D13;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x30], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T303;
_T2ee:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x78], eax;
_T303:
	__asm        jmp    near ptr 0x004A2D47;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A2D72;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T386;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2DB7;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T390;
_T386:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
_T390:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A2DDE;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T3f2;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2E23;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3fc;
_T3f2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
_T3fc:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A2E4A;

	__asm        jmp    near ptr 0x004A2E4F;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 445:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2E77;

	__asm        jmp    near ptr 0x004A2E7C;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A2E94;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listValidWindows.length, 1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2EE1;

	__asm        jmp    near ptr 0x004A2EE6;

	__asm        jmp    near ptr 0x004A2EEB;
// LINE 446:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 449:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 451:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 454:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 455:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0xFFFFFFFF;
// LINE 456:
	__asm        jmp    near ptr 0x004A2F54;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a2f5c
 GraphicWindow::GraphicWindow(const class GraphicWindow& copyGraphicWindow) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A2F79;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T70;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2FBE;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T7a;
_T70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T7a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A2FE5;

	__asm        jmp    near ptr 0x004A2FEA;

	__asm        jmp    near ptr 0x004A2FEF;

	__asm        jmp    near ptr 0x004A2FF4;

	__asm        jmp    near ptr 0x004A2FF9;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _Td9;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2b6;
_Td9:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2a1;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T138;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A308A;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T138:
	__asm        jmp    near ptr 0x004A3099;

	__asm        jmp    near ptr 0x004A309E;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T17d;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T183;
_T17d:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
_T183:
	__asm        jmp    near ptr 0x004A30E4;

	__asm        jmp    near ptr 0x004A30E9;

	__asm        jmp    near ptr 0x004A30EE;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    _T1f0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3142;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T1f0:
	__asm        jmp    near ptr 0x004A3151;

	__asm        jmp    near ptr 0x004A3156;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T257;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T25d;
_T257:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
_T25d:
	__asm        jmp    near ptr 0x004A31BE;

	__asm        jmp    near ptr 0x004A31C3;

	__asm        jmp    near ptr 0x004A31C8;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A31E3;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2b6;
_T2a1:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
_T2b6:
	__asm        jmp    near ptr 0x004A3217;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3242;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T339;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3287;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T343;
_T339:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
_T343:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A32AE;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T3a5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A32F3;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3af;
_T3a5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
_T3af:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A331A;

	__asm        jmp    near ptr 0x004A331F;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A3347;

	__asm        jmp    near ptr 0x004A334C;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A3364;

	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A3372;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T42f;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T42f;
_T42f:
	__asm        jmp    near ptr 0x004A3390;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    GraphicWindow::listValidWindows.length;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A33C9;

	__asm        jmp    near ptr 0x004A33CE;

	__asm        jmp    near ptr 0x004A33D3;
// LINE 466:
	__asm        mov    eax, copyGraphicWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::operator=;
// LINE 467:
	__asm        jmp    near ptr 0x004A33E4;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a33ee
 GraphicWindow::GraphicWindow(class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A340B;

	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T79;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3459;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T83;
_T79:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T83:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A3480;

	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T10c;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2e9;
_T10c:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2d4;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T16b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A354F;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T16b:
	__asm        jmp    near ptr 0x004A355E;

	__asm        jmp    near ptr 0x004A3563;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1b0;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T1b6;
_T1b0:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
_T1b6:
	__asm        jmp    near ptr 0x004A35A9;

	__asm        jmp    near ptr 0x004A35AE;

	__asm        jmp    near ptr 0x004A35B3;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    _T223;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3607;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T223:
	__asm        jmp    near ptr 0x004A3616;

	__asm        jmp    near ptr 0x004A361B;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T28a;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T290;
_T28a:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
_T290:
	__asm        jmp    near ptr 0x004A3683;

	__asm        jmp    near ptr 0x004A3688;

	__asm        jmp    near ptr 0x004A368D;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A36A8;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2e9;
_T2d4:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
_T2e9:
	__asm        jmp    near ptr 0x004A36DC;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3707;

	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T37e;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A375E;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T388;
_T37e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
_T388:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A3785;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T3ea;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A37CA;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3f4;
_T3ea:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
_T3f4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A37F1;

	__asm        jmp    near ptr 0x004A37F6;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A381E;

	__asm        jmp    near ptr 0x004A3823;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A383B;

	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A3849;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T474;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T474;
_T474:
	__asm        jmp    near ptr 0x004A3867;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    GraphicWindow::listValidWindows.length;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A38A0;

	__asm        jmp    near ptr 0x004A38A5;

	__asm        jmp    near ptr 0x004A38AA;
// LINE 482:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 483:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 484:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 485:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 486:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 487:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 488:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 489:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0xFFFFFFFF;
// LINE 490:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     _T538;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T538;
// LINE 491:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 492:
_T538:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 493:
	__asm        jmp    near ptr 0x004A3933;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a393d
 GraphicWindow::GraphicWindow(char * szImageFileName, class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t nNewTransparentIndex) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A3960;

	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T85;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A39B1;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T92;
_T85:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T92:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A39E1;

	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T12a;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T319;
_T12a:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T301;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        jne    _T189;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3ABC;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T189:
	__asm        jmp    near ptr 0x004A3ACB;

	__asm        jmp    near ptr 0x004A3AD0;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1ce;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T1d4;
_T1ce:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
_T1d4:
	__asm        jmp    near ptr 0x004A3B16;

	__asm        jmp    near ptr 0x004A3B1B;

	__asm        jmp    near ptr 0x004A3B20;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x88];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    _T24d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3B80;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T24d:
	__asm        jmp    near ptr 0x004A3B8F;

	__asm        jmp    near ptr 0x004A3B94;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x64], 0x155;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2b4;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2ba;
_T2b4:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
_T2ba:
	__asm        jmp    near ptr 0x004A3BFC;

	__asm        jmp    near ptr 0x004A3C01;

	__asm        jmp    near ptr 0x004A3C06;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A3C21;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x44], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T319;
_T301:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x48], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x8C], eax;
_T319:
	__asm        jmp    near ptr 0x004A3C5B;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3C98;

	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, nNewTransparentIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3d5;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3D01;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T3e2;
_T3d5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
_T3e2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A3D31;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T44a;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3D76;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T457;
_T44a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
_T457:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A3DA6;

	__asm        jmp    near ptr 0x004A3DAB;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004A3DD9;

	__asm        jmp    near ptr 0x004A3DDE;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004A3DF6;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listValidWindows.length, 1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004A3E43;

	__asm        jmp    near ptr 0x004A3E48;

	__asm        jmp    near ptr 0x004A3E4D;
// LINE 515:
	__asm        jmp    near ptr 0x004A3E52;

	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T560;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3E8E;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T560;
_T560:
	__asm        jmp    near ptr 0x004A3EA2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T59c;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T5f1;

	__asm        jmp    near ptr 0x004A3EC4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T5f1;
_T59c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T5cb;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T5d2;
_T5cb:
	__asm        mov    dword ptr [ebp-0xC], 0;
_T5d2:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T627;
_T5f1:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T627;

	__asm        jmp    near ptr 0x004A3F3D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T627;
_T627:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3F78;

	__asm        jmp    near ptr 0x004A3F7D;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 518:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 521:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 522:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 523:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     _T6d3;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T6d3;
// LINE 524:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 525:
_T6d3:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GetImagePath;
// LINE 526:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 527:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 528:
	__asm        jmp    near ptr 0x004A4038;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a4045
 GraphicWindow::~GraphicWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A408D;

	__asm        jmp    near ptr 0x004A4092;

	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004A40AB;

	__asm        jmp    _T6b;
_T6b:
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    [ebp-0x78], eax;
	__asm        jne    _T81;

	__asm        jmp    _T98;

	__asm        jmp    _T81;
_T81:
	__asm        jmp    _T93;

	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        jne    _T98;
_T93:
	__asm        jmp    _T9d;
_T98:
	__asm        jmp    _Tf1;
_T9d:
	__asm        jmp    _Taf;

	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _Tf1;
_Taf:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004A4107;

	__asm        jmp    near ptr 0x004A410C;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Te6;

	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::erase;
_Te6:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T6b;
_Tf1:
	__asm        jmp    near ptr 0x004A413B;
// LINE 539:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T10c;

	__asm        jmp    _T111;
_T10c:
	__asm        jmp    _T132;
_T111:
	__asm        jmp    _T120;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T132;
// LINE 540:
_T120:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CaptureCursorEnd;
// LINE 541:
_T132:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveFocus;
	__asm        add    esp, 4;
// LINE 542:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveModal;
	__asm        add    esp, 4;
// LINE 543:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DeleteAllChildren;
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 554:
	__asm        jmp    near ptr 0x004A41B0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T200;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T200;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e0;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
_T1e0:
	__asm        jmp    near ptr 0x004A422A;

	__asm        jmp    near ptr 0x004A422F;

	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4240;

	__asm        jmp    _T200;
_T200:
	__asm        jmp    near ptr 0x004A424A;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T233;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T233:
	__asm        jmp    near ptr 0x004A427D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2cd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2cd;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ad;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T2ad:
	__asm        jmp    near ptr 0x004A42F7;

	__asm        jmp    near ptr 0x004A42FC;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A430D;

	__asm        jmp    _T2cd;
_T2cd:
	__asm        jmp    near ptr 0x004A4317;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T300;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T300:
	__asm        jmp    near ptr 0x004A434A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A4361;

	__asm        jmp    near ptr 0x004A4366;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004A437F;

	__asm        jmp    near ptr 0x004A4384;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x74], eax;
_T34b:
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x74], eax;
	__asm        jne    _T361;

	__asm        jmp    _T375;

	__asm        jmp    _T361;
_T361:
	__asm        jmp    _T370;

	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T375;
_T370:
	__asm        jmp    _T37a;
_T375:
	__asm        jmp    _T3ad;
_T37a:
	__asm        jmp    _T389;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T3ad;
_T389:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   list<GraphicWindow *>::iterator::operator++;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::erase;
	__asm        jmp    _T34b;
_T3ad:
	__asm        jmp    near ptr 0x004A43F7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A441A;

	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T3ef;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::deallocate_buffers;
_T3ef:
	__asm        jmp    near ptr 0x004A4439;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T452;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T452;

	__asm        mov    ecx, [ebp-0x48];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A4481;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4492;

	__asm        jmp    _T452;
_T452:
	__asm        jmp    near ptr 0x004A449C;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T485;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T485:
	__asm        jmp    near ptr 0x004A44CF;
}

// FUNCTION: COPTER_D 0x004a44d4
int  GraphicWindow::Initialize() {
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A44EA;
// LINE 562:
}

// FUNCTION: COPTER_D 0x004a44ef
class GraphicWindow &  GraphicWindow::operator=(const class GraphicWindow& copyGraphicWindow) {
// LINE 605:
	__asm        mov    eax, copyGraphicWindow;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 606:
	__asm        mov    eax, this;
	__asm        jmp    _T5aa;
// LINE 608:
_T20:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 609:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 610:
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        cmp    eax, ecx;
	__asm        je     _T249;

	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::begin;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A458A;

	__asm        jmp    near ptr 0x004A458F;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::begin;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004A45B2;

	__asm        jmp    _Tc8;
_Tc8:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    _Tde;

	__asm        jmp    _Tf2;

	__asm        jmp    _Tde;
_Tde:
	__asm        jmp    _Ted;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    _Tf2;
_Ted:
	__asm        jmp    _Tf7;
_Tf2:
	__asm        jmp    _T198;
_Tf7:
	__asm        jmp    _T106;

	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T198;
_T106:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    _T11c;

	__asm        jmp    _T130;

	__asm        jmp    _T11c;
_T11c:
	__asm        jmp    _T12b;

	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T130;
_T12b:
	__asm        jmp    _T135;
_T130:
	__asm        jmp    _T198;
_T135:
	__asm        jmp    _T144;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T198;
_T144:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   list<GraphicWindow *>::iterator::operator++;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004A4654;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004A4667;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004A4672;

	__asm        jmp    near ptr 0x004A4677;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        jmp    _Tc8;
_T198:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    _T1a9;

	__asm        jmp    _T1ae;
_T1a9:
	__asm        jmp    _T232;
_T1ae:
	__asm        jmp    _T1bd;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T232;
_T1bd:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x58], eax;
_T1c9:
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    [ebp-0x58], eax;
	__asm        jne    _T1df;

	__asm        jmp    _T1f3;

	__asm        jmp    _T1df;
_T1df:
	__asm        jmp    _T1ee;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _T1f3;
_T1ee:
	__asm        jmp    _T1f8;
_T1f3:
	__asm        jmp    _T228;
_T1f8:
	__asm        jmp    _T207;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T228;
_T207:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   list<GraphicWindow *>::iterator::operator++;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::erase;
	__asm        jmp    _T1c9;
_T228:
	__asm        jmp    near ptr 0x004A471C;

	__asm        jmp    _T249;
_T232:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::insert;
_T249:
	__asm        jmp    near ptr 0x004A473D;
// LINE 611:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 612:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
// LINE 613:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
// LINE 614:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
// LINE 615:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
// LINE 616:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 617:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
// LINE 618:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
// LINE 619:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 620:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x70], eax;
// LINE 621:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 622:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x64;
	__asm        cmp    eax, ecx;
	__asm        je     _T3c1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T341;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T341;

	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A481A;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A482B;

	__asm        jmp    _T341;
_T341:
	__asm        jmp    near ptr 0x004A4835;

	__asm        jmp    near ptr 0x004A483A;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T375;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T3c1;
_T375:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3b7;

	__asm        jmp    near ptr 0x004A4880;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3c1;
_T3b7:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
_T3c1:
	__asm        jmp    near ptr 0x004A48B5;
// LINE 623:
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x5C;
	__asm        cmp    eax, ecx;
	__asm        je     _T4af;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T42f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T42f;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A4908;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4919;

	__asm        jmp    _T42f;
_T42f:
	__asm        jmp    near ptr 0x004A4923;

	__asm        jmp    near ptr 0x004A4928;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T463;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T4af;
_T463:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T4a5;

	__asm        jmp    near ptr 0x004A496E;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T4af;
_T4a5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
_T4af:
	__asm        jmp    near ptr 0x004A49A3;
// LINE 624:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        je     _T59d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T51d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T51d;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A49F6;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4A07;

	__asm        jmp    _T51d;
_T51d:
	__asm        jmp    near ptr 0x004A4A11;

	__asm        jmp    near ptr 0x004A4A16;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T551;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T59d;
_T551:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T593;

	__asm        jmp    near ptr 0x004A4A5C;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T59d;
_T593:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T59d:
	__asm        jmp    near ptr 0x004A4A91;
// LINE 625:
	__asm        mov    eax, this;
	__asm        jmp    _T5aa;
// LINE 626:
_T5aa:
}

// FUNCTION: COPTER_D 0x004a4aa0
int  GraphicWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 642:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    _T2e;

	__asm        jmp    near ptr 0x004A4ABE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T38;
// LINE 643:
_T2e:
	__asm        mov    eax, 1;
	__asm        jmp    _T204;
// LINE 645:
_T38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB4];
// LINE 646:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T17d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T88;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T88:
	__asm        jmp    near ptr 0x004A4B2D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A4B4B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T124;

	__asm        jmp    near ptr 0x004A4B60;

	__asm        jmp    near ptr 0x004A4B65;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tf6;

	__asm        jmp    _Tf6;
_Tea:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T124;
_T124:
	__asm        jmp    near ptr 0x004A4BC9;

	__asm        mov    byte ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x004A4BD2;

	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A4BDD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A4BFE;

	__asm        jmp    near ptr 0x004A4C03;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T187;
_T17d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 647:
_T187:
	__asm        cmp    bResizeWindowToFitImage, 0;
	__asm        je     _T1f9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T1f9;
// LINE 648:
	__asm        jmp    near ptr 0x004A4C43;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 649:
	__asm        jmp    near ptr 0x004A4C5D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 650:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T1f9;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 653:
_T1f9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    _T204;
// LINE 654:
_T204:
}

// FUNCTION: COPTER_D 0x004a4cab
void  GraphicWindow::DestroyImage() {
// LINE 664:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T67;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _T67;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5d;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4D03;

	__asm        jmp    _T5d;
// LINE 666:
_T5d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 668:
_T67:
	__asm        jmp    near ptr 0x004A4D17;
}

// FUNCTION: COPTER_D 0x004a4d1c
void  GraphicWindow::SetTransparentColor(int32_t nPaletteIndex) {
// LINE 677:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T41;
// LINE 679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 680:
	__asm        jmp    _T56;
// LINE 681:
_T41:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 682:
_T56:
	__asm        jmp    near ptr 0x004A4D77;
}

// FUNCTION: COPTER_D 0x004a4d7e
void  GraphicWindow::MoveWindow(int32_t nXPosition, int32_t nYPosition) {
// LINE 691:
	__asm        mov    eax, nXPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, nYPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x10], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x18], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x1C], eax;
	__asm        jmp    near ptr 0x004A4DCB;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 693:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 694:
	__asm        jmp    near ptr 0x004A4DEA;
}

// FUNCTION: COPTER_D 0x004a4df1
void  GraphicWindow::SetWidthAndHeight(int32_t nNewWidth, int32_t nNewHeight) {
// LINE 702:
	__asm        cmp    nNewWidth, 0xFFFFFFFF;
	__asm        je     _T25;
// LINE 703:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, nNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 704:
_T25:
	__asm        cmp    nNewHeight, 0xFFFFFFFF;
	__asm        je     _T3e;
// LINE 705:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    eax, nNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 706:
_T3e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 707:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 708:
	__asm        jmp    near ptr 0x004A4E4E;
}

// FUNCTION: COPTER_D 0x004a4e55
void  GraphicWindow::CenterWindow(class GraphicWindow* windowToCenterOn) {
// LINE 716:
	__asm        jmp    near ptr 0x004A4E66;

	__asm        jmp    near ptr 0x004A4E6B;

	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 717:
	__asm        jmp    near ptr 0x004A4EA1;
}

// FUNCTION: COPTER_D 0x004a4ea8
void  GraphicWindow::CenterWindow(int32_t nXPosition, int32_t nYPosition) {
	int32_t nNewXPosition;
	int32_t nNewYPosition;

// LINE 733:
	__asm        cmp    nXPosition, 0xFFFFFFFF;
	__asm        je     _T5a;
// LINE 734:
	__asm        jmp    near ptr 0x004A4EC3;

	__asm        mov    ecx, nXPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewXPosition, ecx;
// LINE 735:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewXPosition;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     _T5a;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, nNewXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 738:
_T5a:
	__asm        cmp    nYPosition, 0xFFFFFFFF;
	__asm        je     _Ta8;
// LINE 739:
	__asm        jmp    near ptr 0x004A4F11;

	__asm        mov    ecx, nYPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewYPosition, ecx;
// LINE 740:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewYPosition;
	__asm        cmp    [eax+0x14], ecx;
	__asm        je     _Ta8;
// LINE 741:
	__asm        mov    eax, nNewYPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 743:
_Ta8:
	__asm        jmp    near ptr 0x004A4F55;
}

// FUNCTION: COPTER_D 0x004a4f5c
int  GraphicWindow::FitRectToWindow(class MRect& rectToFit) {
	class MRect rectTempCurrentWindow;

// LINE 756:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectTempCurrentWindow.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 759:
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    [ebp-0x18], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.left, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.right, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.top, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.bottom, eax;
	__asm        jmp    near ptr 0x004A4FB4;
// LINE 760:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.left;
	__asm        cmp    [eax], ecx;
	__asm        jge    _T87;
// LINE 761:
	__asm        mov    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx], eax;
// LINE 762:
	__asm        mov    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+8], eax;
// LINE 764:
_T87:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.top;
	__asm        cmp    [eax+4], ecx;
	__asm        jge    _Tba;
// LINE 765:
	__asm        mov    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+4];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+4], eax;
// LINE 766:
	__asm        mov    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+4];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+0xC], eax;
// LINE 768:
_Tba:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.right;
	__asm        cmp    [eax+8], ecx;
	__asm        jle    _Tec;
// LINE 769:
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+8];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx], eax;
// LINE 770:
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+8];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+8], eax;
// LINE 772:
_Tec:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.bottom;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    _T11f;
// LINE 773:
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+0xC];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+4], eax;
// LINE 774:
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+0xC];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+0xC], eax;
// LINE 777:
_T11f:
	__asm        jmp    near ptr 0x004A5080;

	__asm        jmp    near ptr 0x004A5085;

	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     _T176;

	__asm        jmp    near ptr 0x004A50A6;

	__asm        jmp    near ptr 0x004A50AB;

	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx+4];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     _T176;

	__asm        mov    eax, 1;
	__asm        jmp    _T178;
_T176:
	__asm        xor    eax, eax;
_T178:
	__asm        jmp    near ptr 0x004A50D9;
// LINE 778:
}

// FUNCTION: COPTER_D 0x004a50e0
void  GraphicWindow::SetChanged(int32_t bChanged, int32_t bRecursive) {
// LINE 787:
	__asm        mov    eax, bChanged;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
// LINE 788:
	__asm        cmp    bRecursive, 0;
	__asm        je     _Te4;
// LINE 789:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _Te4;
// LINE 790:
// Block start:
	class list<GraphicWindow *>::iterator i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5122;

	__asm        jmp    _T47;
// LINE 791:
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A513B;

	__asm        jmp    near ptr 0x004A5140;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T76;

	__asm        jmp    _T8a;

	__asm        jmp    _T76;
_T76:
	__asm        jmp    _T85;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T8a;
_T85:
	__asm        jmp    _T8f;
_T8a:
	__asm        jmp    _Te4;
_T8f:
	__asm        jmp    _T9e;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Te4;
// LINE 792:
_T9e:
	__asm        jmp    near ptr 0x004A5183;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x30];
// LINE 793:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A51B4;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A51BF;
// LINE 794:
	__asm        jmp    _T47;
// LINE 797:
// Block end:
_Te4:
	__asm        jmp    near ptr 0x004A51C9;
}

// FUNCTION: COPTER_D 0x004a51d0
void  GraphicWindow::SetWindowTitle(class basic_string<char>& sNewWindowTitle) {
// LINE 809:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    near ptr 0x004A525C;

	__asm        jmp    near ptr 0x004A5261;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5272;

	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    near ptr 0x004A527C;

	__asm        jmp    near ptr 0x004A5281;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    near ptr 0x004A52C7;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A530E;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A5369;

	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A5386;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1ce;
_T1c4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
_T1ce:
	__asm        jmp    near ptr 0x004A53A3;
// LINE 810:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 811:
	__asm        jmp    near ptr 0x004A53B7;
}

// FUNCTION: COPTER_D 0x004a53be
int  GraphicWindow::AddChild(class GraphicWindow* windowNewChild) {
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A53DE;

	__asm        jmp    near ptr 0x004A53E3;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T57;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T234;
_T57:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T21f;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tb6;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A546A;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tb6:
	__asm        jmp    near ptr 0x004A5479;

	__asm        jmp    near ptr 0x004A547E;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tfb;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T101;
_Tfb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T101:
	__asm        jmp    near ptr 0x004A54C4;

	__asm        jmp    near ptr 0x004A54C9;

	__asm        jmp    near ptr 0x004A54CE;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T16e;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5522;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T16e:
	__asm        jmp    near ptr 0x004A5531;

	__asm        jmp    near ptr 0x004A5536;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d5;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1db;
_T1d5:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1db:
	__asm        jmp    near ptr 0x004A559E;

	__asm        jmp    near ptr 0x004A55A3;

	__asm        jmp    near ptr 0x004A55A8;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A55C3;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T234;
_T21f:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T234:
	__asm        jmp    near ptr 0x004A55F7;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5602;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A5610;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T269;

	__asm        mov    eax, windowNewChild;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T269;
_T269:
	__asm        jmp    near ptr 0x004A562C;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x34];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5665;

	__asm        jmp    near ptr 0x004A566A;

	__asm        jmp    near ptr 0x004A566F;
// LINE 819:
	__asm        mov    eax, windowNewChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowNewChild;
	__asm        call   dword ptr [eax+0x1C];
// LINE 820:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 821:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A5693;
// LINE 822:
}

// FUNCTION: COPTER_D 0x004a569a
int  GraphicWindow::DeleteChild(class GraphicWindow* windowChild) {
	int32_t nReturnValue;
	class list<GraphicWindow *>::iterator i;

// LINE 831:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A56BC;

	__asm        jmp    near ptr 0x004A56C1;
// LINE 832:
	__asm        mov    nReturnValue, 0;
// LINE 835:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A56DC;

	__asm        jmp    near ptr 0x004A56E1;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T5d;

	__asm        jmp    _T71;

	__asm        jmp    _T5d;
_T5d:
	__asm        jmp    _T6c;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T71;
_T6c:
	__asm        jmp    _T76;
_T71:
	__asm        jmp    _T18e;
_T76:
	__asm        jmp    _T85;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T18e;
// LINE 836:
_T85:
	__asm        jmp    near ptr 0x004A5724;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowChild;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T16b;
// LINE 840:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5746;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5751;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5777;

	__asm        jmp    near ptr 0x004A577C;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A5793;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A579E;
// LINE 841:
	__asm        mov    eax, windowChild;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T14b;
// LINE 842:
	__asm        mov    eax, windowChild;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T14b;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T14b;
// LINE 843:
_T14b:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 844:
	__asm        mov    nReturnValue, 1;
// LINE 845:
	__asm        jmp    _T18e;
// LINE 847:
	__asm        jmp    _T189;
// LINE 848:
_T16b:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5818;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T189;
// LINE 849:
_T189:
	__asm        jmp    _T2e;
// LINE 852:
_T18e:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A5830;
// LINE 853:
}

// FUNCTION: COPTER_D 0x004a5837
class GraphicWindow *  GraphicWindow::DeleteChild(long lChildID) {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* windowFound;

// LINE 862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5859;

	__asm        jmp    near ptr 0x004A585E;
// LINE 863:
	__asm        mov    windowFound, 0;
// LINE 865:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x30];
// LINE 866:
_T3e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5889;

	__asm        jmp    near ptr 0x004A588E;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    _T6d;

	__asm        jmp    _T81;

	__asm        jmp    _T6d;
_T6d:
	__asm        jmp    _T7c;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T81;
_T7c:
	__asm        jmp    _T86;
_T81:
	__asm        jmp    _T1a8;
_T86:
	__asm        jmp    _T95;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1a8;
// LINE 867:
_T95:
	__asm        jmp    near ptr 0x004A58D1;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lChildID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T185;
// LINE 871:
	__asm        jmp    near ptr 0x004A58E8;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowFound, eax;
// LINE 872:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5904;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A590F;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5935;

	__asm        jmp    near ptr 0x004A593A;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A5951;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A595C;
// LINE 873:
	__asm        mov    eax, windowFound;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T16c;
// LINE 874:
	__asm        mov    eax, windowFound;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T16c;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T16c;
// LINE 875:
_T16c:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 876:
	__asm        jmp    _T1a8;
// LINE 878:
	__asm        jmp    _T1a3;
// LINE 879:
_T185:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A59CF;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1a3;
// LINE 880:
_T1a3:
	__asm        jmp    _T3e;
// LINE 881:
_T1a8:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     _T1cb;
// LINE 882:
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 883:
_T1cb:
	__asm        mov    eax, windowFound;
	__asm        jmp    near ptr 0x004A5A0A;
// LINE 884:
}

// FUNCTION: COPTER_D 0x004a5a11
int  GraphicWindow::RemoveChild(class GraphicWindow* windowNewChild) {
	int32_t nReturnValue;
	class list<GraphicWindow *>::iterator i;

// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5A33;

	__asm        jmp    near ptr 0x004A5A38;
// LINE 894:
	__asm        mov    nReturnValue, 0;
// LINE 896:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5A53;

	__asm        jmp    near ptr 0x004A5A58;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T5d;

	__asm        jmp    _T71;

	__asm        jmp    _T5d;
_T5d:
	__asm        jmp    _T6c;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T71;
_T6c:
	__asm        jmp    _T76;
_T71:
	__asm        jmp    _T138;
_T76:
	__asm        jmp    _T85;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T138;
// LINE 897:
_T85:
	__asm        jmp    near ptr 0x004A5A9B;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowNewChild;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T115;
// LINE 898:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5ABD;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5AC8;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5AEE;

	__asm        jmp    near ptr 0x004A5AF3;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A5B0A;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A5B15;
// LINE 899:
	__asm        mov    nReturnValue, 1;
// LINE 900:
	__asm        jmp    _T138;
// LINE 902:
	__asm        jmp    _T133;
// LINE 903:
_T115:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5B39;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T133;
// LINE 904:
_T133:
	__asm        jmp    _T2e;
// LINE 905:
_T138:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A5B51;
// LINE 906:
}

// FUNCTION: COPTER_D 0x004a5b58
void  GraphicWindow::DeleteAllChildren() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* windowToDelete;

// LINE 914:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5B7A;

	__asm        jmp    near ptr 0x004A5B7F;
// LINE 917:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x30];
// LINE 918:
_T37:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5BA3;

	__asm        jmp    near ptr 0x004A5BA8;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T66;

	__asm        jmp    _T7a;

	__asm        jmp    _T66;
_T66:
	__asm        jmp    _T75;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T7a;
_T75:
	__asm        jmp    _T7f;
_T7a:
	__asm        jmp    _T153;
_T7f:
	__asm        jmp    _T8e;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T153;
// LINE 922:
_T8e:
	__asm        jmp    near ptr 0x004A5BEB;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowToDelete, eax;
// LINE 923:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5C07;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5C12;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5C38;

	__asm        jmp    near ptr 0x004A5C3D;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A5C54;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A5C5F;
// LINE 924:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T14e;
// LINE 925:
	__asm        mov    eax, windowToDelete;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T14e;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T14e;
// LINE 926:
_T14e:
	__asm        jmp    _T37;
// LINE 927:
_T153:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     _T176;
// LINE 928:
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   GraphicWindowManager::DeleteAllWindowsInDeletionList;
// LINE 929:
_T176:
	__asm        jmp    near ptr 0x004A5CD3;
}

// FUNCTION: COPTER_D 0x004a5cd8
void  GraphicWindow::RemoveAllChildren() {
	class list<GraphicWindow *>::iterator i;

// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5CFA;

	__asm        jmp    _T27;
// LINE 938:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5D13;

	__asm        jmp    near ptr 0x004A5D18;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tef;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tef;
// LINE 939:
_T7e:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5D69;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5D74;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5D9A;

	__asm        jmp    near ptr 0x004A5D9F;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A5DB6;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x34], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A5DC2;

	__asm        jmp    _T27;
// LINE 940:
_Tef:
	__asm        jmp    near ptr 0x004A5DCC;
}

// FUNCTION: COPTER_D 0x004a5dd1
class GraphicWindow *  GraphicWindow::FindChild(long lChildID) {
	class list<GraphicWindow *>::iterator i;

// LINE 951:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5DF3;

	__asm        jmp    _T27;
// LINE 953:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5E0C;

	__asm        jmp    near ptr 0x004A5E11;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tc8;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tc8;
// LINE 954:
_T7e:
	__asm        jmp    near ptr 0x004A5E54;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lChildID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Ta5;
// LINE 955:
	__asm        jmp    near ptr 0x004A5E6B;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _Tcf;
// LINE 956:
_Ta5:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5E89;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5E94;
// LINE 957:
	__asm        jmp    _T27;
// LINE 958:
_Tc8:
	__asm        xor    eax, eax;
	__asm        jmp    _Tcf;
// LINE 959:
_Tcf:
}

// FUNCTION: COPTER_D 0x004a5ea7
class GraphicWindow *  GraphicWindow::FindWindowA(long lID) {
	class list<GraphicWindow *>::iterator i;

// LINE 969:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5EC5;

	__asm        jmp    _T23;
// LINE 971:
_T23:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5EDD;

	__asm        jmp    near ptr 0x004A5EE2;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T51;

	__asm        jmp    _T65;

	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T60;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T65;
_T60:
	__asm        jmp    _T6a;
_T65:
	__asm        jmp    _Tc3;
_T6a:
	__asm        jmp    _T79;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tc3;
// LINE 972:
_T79:
	__asm        jmp    near ptr 0x004A5F25;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Ta0;
// LINE 973:
	__asm        jmp    near ptr 0x004A5F3C;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _Tca;
// LINE 974:
_Ta0:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5F5A;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5F65;
// LINE 975:
	__asm        jmp    _T23;
// LINE 976:
_Tc3:
	__asm        xor    eax, eax;
	__asm        jmp    _Tca;
// LINE 977:
_Tca:
}

// FUNCTION: COPTER_D 0x004a5f76
int  GraphicWindow::FindWindowA(class GraphicWindow* windowToFind) {
	class list<GraphicWindow *>::iterator i;

// LINE 984:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5F94;

	__asm        jmp    _T23;
// LINE 986:
_T23:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5FAC;

	__asm        jmp    near ptr 0x004A5FB1;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T51;

	__asm        jmp    _T65;

	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T60;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T65;
_T60:
	__asm        jmp    _T6a;
_T65:
	__asm        jmp    _Tba;
_T6a:
	__asm        jmp    _T79;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tba;
// LINE 987:
_T79:
	__asm        jmp    near ptr 0x004A5FF4;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowToFind;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T97;
// LINE 988:
	__asm        mov    eax, 1;
	__asm        jmp    _Tc1;
// LINE 989:
_T97:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6020;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A602B;
// LINE 990:
	__asm        jmp    _T23;
// LINE 991:
_Tba:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc1;
// LINE 992:
_Tc1:
}

// FUNCTION: COPTER_D 0x004a603c
int  GraphicWindow::DeleteSelf() {
// LINE 1000:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+4];
// LINE 1001:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6066;
// LINE 1002:
}

// FUNCTION: COPTER_D 0x004a606b
void  GraphicWindow::RemoveSelf() {
// LINE 1011:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T2e;
// LINE 1012:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x60];
// LINE 1013:
_T2e:
	__asm        jmp    near ptr 0x004A609E;
}

// FUNCTION: COPTER_D 0x004a60a3
int  GraphicWindow::ComposeSelf() {
// LINE 1028:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1029:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc0;
// LINE 1032:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     _T61;
// LINE 1033:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1034:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xBC];
// LINE 1035:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 1037:
_T61:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _Tb6;
// LINE 1039:
	__asm        jmp    near ptr 0x004A6116;

	__asm        jmp    near ptr 0x004A611B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1041:
_Tb6:
	__asm        mov    eax, 1;
	__asm        jmp    _Tc0;
// LINE 1042:
_Tc0:
}

// FUNCTION: COPTER_D 0x004a6168
int  GraphicWindow::DrawSelf() {
// LINE 1060:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A617B;
// LINE 1061:
}

// FUNCTION: COPTER_D 0x004a6180
void  GraphicWindow::DrawChildren() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* gwCurrentChild;

// LINE 1078:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T1e;
// LINE 1079:
	__asm        jmp    _Td1;
// LINE 1081:
_T1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A61B4;

	__asm        jmp    _T39;
// LINE 1082:
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A61CD;

	__asm        jmp    near ptr 0x004A61D2;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    _T68;

	__asm        jmp    _T7c;

	__asm        jmp    _T68;
_T68:
	__asm        jmp    _T77;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T7c;
_T77:
	__asm        jmp    _T81;
_T7c:
	__asm        jmp    _Tcc;
_T81:
	__asm        jmp    _T90;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tcc;
// LINE 1088:
_T90:
	__asm        jmp    near ptr 0x004A6215;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    gwCurrentChild, eax;
// LINE 1089:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6231;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A623C;
// LINE 1090:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentChild;
	__asm        call   dword ptr [eax+0x18];
// LINE 1091:
	__asm        jmp    _T39;
// LINE 1092:
_Tcc:
	__asm        jmp    _Td1;
_Td1:
}

// FUNCTION: COPTER_D 0x004a6256
void  GraphicWindow::InvalidateAllOverlaps(class list<GraphicWindow *>::iterator windowChildListItem) {
	class GraphicWindow* windowNextChild;
	class GraphicWindow* windowCurrentChild;

// LINE 1117:
	__asm        jmp    near ptr 0x004A6267;

	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrentChild, eax;
// LINE 1119:
	__asm        add    windowNextChild, 0x74;
// LINE 1120:
_T1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6288;

	__asm        jmp    near ptr 0x004A628D;

	__asm        mov    eax, windowChildListItem.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T4d;

	__asm        jmp    _T61;

	__asm        jmp    _T4d;
_T4d:
	__asm        jmp    _T5c;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T61;
_T5c:
	__asm        jmp    _T66;
_T61:
	__asm        jmp    _T137;
_T66:
	__asm        jmp    _T75;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T137;
// LINE 1121:
_T75:
	__asm        jmp    near ptr 0x004A62D0;

	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowNextChild, eax;
// LINE 1122:
	__asm        mov    eax, windowNextChild;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    _T114;
// LINE 1123:
	__asm        jmp    near ptr 0x004A62EB;

	__asm        mov    eax, windowNextChild;
	__asm        mov    ecx, windowCurrentChild;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jl     _Te2;

	__asm        mov    eax, windowCurrentChild;
	__asm        mov    ecx, windowNextChild;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jl     _Te2;

	__asm        mov    eax, windowCurrentChild;
	__asm        mov    ecx, windowNextChild;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     _Te2;

	__asm        mov    eax, windowNextChild;
	__asm        mov    ecx, windowCurrentChild;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jl     _Te2;

	__asm        jmp    _Te7;
_Te2:
	__asm        jmp    _T114;
_Te7:
	__asm        jmp    _Tf6;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T114;
// LINE 1124:
_Tf6:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, windowNextChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowNextChild;
	__asm        call   dword ptr [eax+0x30];
// LINE 1125:
	__asm        mov    eax, windowChildListItem.node;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
// LINE 1128:
_T114:
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax];
	__asm        mov    windowChildListItem.node, eax;
	__asm        jmp    near ptr 0x004A637D;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A6388;
// LINE 1129:
	__asm        jmp    _T1e;
// LINE 1130:
_T137:
	__asm        jmp    near ptr 0x004A6392;
}

// FUNCTION: COPTER_D 0x004a6399
void  GraphicWindow::InvalidateAllChildren(int32_t bRecursive) {
	class list<GraphicWindow *>::iterator i;

// LINE 1137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A63BB;

	__asm        jmp    _T27;
// LINE 1138:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A63D4;

	__asm        jmp    near ptr 0x004A63D9;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tc6;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tc6;
// LINE 1139:
_T7e:
	__asm        jmp    near ptr 0x004A641C;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, bRecursive;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x30];
// LINE 1140:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A644F;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A645A;
// LINE 1141:
	__asm        jmp    _T27;
// LINE 1142:
_Tc6:
	__asm        jmp    near ptr 0x004A6464;
}

// FUNCTION: COPTER_D 0x004a646b
int  GraphicWindow::DoesWindowNeedUpdating() {
	class list<GraphicWindow *>::iterator i;

// LINE 1163:
	__asm        jmp    near ptr 0x004A647C;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T28;
// LINE 1164:
	__asm        mov    eax, 1;
	__asm        jmp    _Tf8;
// LINE 1168:
_T28:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A64A9;

	__asm        jmp    _T43;
// LINE 1169:
_T43:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A64C2;

	__asm        jmp    near ptr 0x004A64C7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T72;

	__asm        jmp    _T86;

	__asm        jmp    _T72;
_T72:
	__asm        jmp    _T81;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T86;
_T81:
	__asm        jmp    _T8b;
_T86:
	__asm        jmp    _Tf1;
_T8b:
	__asm        jmp    _T9a;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tf1;
// LINE 1170:
_T9a:
	__asm        jmp    near ptr 0x004A650A;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     _Tce;
// LINE 1171:
	__asm        mov    eax, 1;
	__asm        jmp    _Tf8;
// LINE 1172:
_Tce:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A654C;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6557;
// LINE 1173:
	__asm        jmp    _T43;
// LINE 1174:
_Tf1:
	__asm        xor    eax, eax;
	__asm        jmp    _Tf8;
// LINE 1175:
_Tf8:
}

// FUNCTION: COPTER_D 0x004a6568
long  GraphicWindow::DoCharacter(long lCharacter) {
// LINE 1187:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A657B;
// LINE 1188:
}

// FUNCTION: COPTER_D 0x004a6582
long  GraphicWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1200:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6595;
// LINE 1201:
}

// FUNCTION: COPTER_D 0x004a659c
long  GraphicWindow::DoKeyUp(long lKey, char chModifiers) {
// LINE 1214:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A65AF;
// LINE 1215:
}

// FUNCTION: COPTER_D 0x004a65b6
long  GraphicWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1231:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A65C9;
// LINE 1232:
}

// FUNCTION: COPTER_D 0x004a65d0
long  GraphicWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1244:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A65E6;
// LINE 1245:
}

// FUNCTION: COPTER_D 0x004a65ed
long  GraphicWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1257:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6600;
// LINE 1258:
}

// FUNCTION: COPTER_D 0x004a6607
int  GraphicWindow::CaptureCursorStart(class GraphicWindow* windowCapture) {
// LINE 1270:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T20;
// LINE 1271:
	__asm        xor    eax, eax;
	__asm        jmp    _T32;
// LINE 1272:
_T20:
	__asm        mov    eax, windowCapture;
	__asm        mov    GraphicWindow::windowCursorCapture, eax;
// LINE 1273:
	__asm        mov    eax, 1;
	__asm        jmp    _T32;
// LINE 1274:
_T32:
}

// FUNCTION: COPTER_D 0x004a6640
int  GraphicWindow::CaptureCursorEnd(class GraphicWindow* windowCapture) {
// LINE 1282:
	__asm        mov    eax, windowCapture;
	__asm        cmp    GraphicWindow::windowCursorCapture, eax;
	__asm        je     _T22;
// LINE 1283:
	__asm        xor    eax, eax;
	__asm        jmp    _T36;
// LINE 1284:
_T22:
	__asm        mov    GraphicWindow::windowCursorCapture, 0;
// LINE 1285:
	__asm        mov    eax, 1;
	__asm        jmp    _T36;
// LINE 1286:
_T36:
}

// FUNCTION: COPTER_D 0x004a667d
void  GraphicWindow::WindowToScreenCoordinates(long& nXPosition, long& nYPosition) {
	class GraphicWindow* currentWindow;

// LINE 1299:
	__asm        mov    eax, this;
	__asm        mov    currentWindow, eax;
// LINE 1301:
_T12:
	__asm        mov    eax, currentWindow;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T43;
// LINE 1302:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, nXPosition;
	__asm        add    [ecx], eax;
// LINE 1303:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nYPosition;
	__asm        add    [ecx], eax;
// LINE 1304:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    currentWindow, eax;
// LINE 1305:
	__asm        jmp    _T12;
// LINE 1307:
_T43:
	__asm        jmp    near ptr 0x004A66C5;
}

// FUNCTION: COPTER_D 0x004a66cc
void  GraphicWindow::ScreenToWindowCoordinates(long& nXPosition, long& nYPosition) {
	long nYFactor;
	long nXFactor;

// LINE 1320:
	__asm        mov    nXFactor, 0;
// LINE 1321:
	__asm        mov    nYFactor, 0;
// LINE 1324:
	__asm        lea    eax, nYFactor;
	__asm        push   eax;
	__asm        lea    eax, nXFactor;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1325:
	__asm        xor    eax, eax;
	__asm        sub    eax, nXFactor;
	__asm        neg    eax;
	__asm        mov    ecx, nXPosition;
	__asm        sub    [ecx], eax;
// LINE 1326:
	__asm        xor    eax, eax;
	__asm        sub    eax, nYFactor;
	__asm        neg    eax;
	__asm        mov    ecx, nYPosition;
	__asm        sub    [ecx], eax;
// LINE 1327:
	__asm        jmp    near ptr 0x004A6719;
}

// FUNCTION: COPTER_D 0x004a6720
class CBackBuffer *  GraphicWindow::GetImage() {
// LINE 1341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x004A6737;
// LINE 1342:
}

// FUNCTION: COPTER_D 0x004a673c
void  GraphicWindow::GetImagePath() {
	char szFullImagePath[261];

// LINE 1356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T4c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4c:
	__asm        jmp    near ptr 0x004A678D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    near ptr 0x004A67B1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T112;

	__asm        jmp    near ptr 0x004A67C9;

	__asm        jmp    near ptr 0x004A67CE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        jmp    _Tcf;

	__asm        jmp    _Tcf;
_Tc0:
	__asm        mov    dword ptr [ebp-0x150], 0;
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T112;
_T112:
	__asm        jmp    near ptr 0x004A6853;

	__asm        mov    byte ptr [ebp-0x140], 0;
	__asm        jmp    near ptr 0x004A685F;

	__asm        lea    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004A6870;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x5C];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A68A0;

	__asm        jmp    near ptr 0x004A68A5;

	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1357:
	__asm        jmp    near ptr 0x004A68C7;

	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    _T1e5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A6912;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1e5;
_T1e5:
	__asm        jmp    near ptr 0x004A6926;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T227;

	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T426;

	__asm        jmp    near ptr 0x004A694B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, [ebp-0x138];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T426;
_T227:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T347;

	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    _T289;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A69B6;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T289;
_T289:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T318;

	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A6A4F;

	__asm        jmp    _T324;
_T318:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax], 0;
_T324:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A6A72;

	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    _T351;
_T347:
	__asm        mov    dword ptr [ebp-0x10C], 0;
_T351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T40d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _T40d;

	__asm        mov    eax, [ebp-0x11C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3ea;

	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax], 0;
_T3ea:
	__asm        jmp    near ptr 0x004A6B2B;

	__asm        jmp    near ptr 0x004A6B30;

	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A6B44;

	__asm        jmp    _T40d;
_T40d:
	__asm        jmp    near ptr 0x004A6B4E;

	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T46b;
_T426:
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T46b;

	__asm        jmp    near ptr 0x004A6B74;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T46b;
_T46b:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A6BBE;

	__asm        jmp    near ptr 0x004A6BC3;
// LINE 1358:
	__asm        jmp    near ptr 0x004A6BC8;
}

// FUNCTION: COPTER_D 0x004a6bcd
int  GraphicWindow::SetImageToDrawOnto() {
	class MRect rectNewPosition;
	class GraphicWindow* gwCurrentParent;
	class CBackBuffer* imageCurrentParent;

// LINE 1367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        lea    ecx, rectNewPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1368:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentParent, eax;
// LINE 1371:
_T5c:
	__asm        cmp    gwCurrentParent, 0;
	__asm        je     _T117;
// LINE 1372:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentParent;
	__asm        call   dword ptr [eax+0xB0];
	__asm        mov    imageCurrentParent, eax;
// LINE 1373:
	__asm        cmp    imageCurrentParent, 0;
	__asm        je     _Tb3;
// LINE 1374:
	__asm        mov    eax, imageCurrentParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
// LINE 1375:
	__asm        lea    eax, rectNewPosition.left;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1376:
	__asm        mov    eax, 1;
	__asm        jmp    _T11e;
// LINE 1381:
_Tb3:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004A6C97;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A6CA8;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    [ebp-0x30], ecx;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    rectNewPosition.left, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    rectNewPosition.right, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    rectNewPosition.top, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    rectNewPosition.bottom, eax;
	__asm        jmp    near ptr 0x004A6CD1;

	__asm        jmp    near ptr 0x004A6CD6;
// LINE 1382:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentParent, eax;
// LINE 1383:
	__asm        jmp    _T5c;
// LINE 1384:
_T117:
	__asm        xor    eax, eax;
	__asm        jmp    _T11e;
// LINE 1385:
_T11e:
}

// FUNCTION: COPTER_D 0x004a6cf0
void  GraphicWindow::SetAllImagesToDrawOnto() {
	class list<GraphicWindow *>::iterator i;

// LINE 1403:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1405:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6D1D;

	__asm        jmp    _T32;
// LINE 1406:
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6D36;

	__asm        jmp    near ptr 0x004A6D3B;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T61;

	__asm        jmp    _T75;

	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T70;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T75;
_T70:
	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Tcb;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tcb;
// LINE 1407:
_T89:
	__asm        jmp    near ptr 0x004A6D7E;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x20];
// LINE 1408:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6DAB;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6DB6;
// LINE 1409:
	__asm        jmp    _T32;
// LINE 1410:
_Tcb:
	__asm        jmp    near ptr 0x004A6DC0;
}

// FUNCTION: COPTER_D 0x004a6dc5
void  GraphicWindow::CreateAllImages() {
	class list<GraphicWindow *>::iterator i;

// LINE 1422:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1425:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6DFF;

	__asm        jmp    _T3f;
// LINE 1426:
_T3f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6E18;

	__asm        jmp    near ptr 0x004A6E1D;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T6e;

	__asm        jmp    _T82;

	__asm        jmp    _T6e;
_T6e:
	__asm        jmp    _T7d;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T82;
_T7d:
	__asm        jmp    _T87;
_T82:
	__asm        jmp    _Td8;
_T87:
	__asm        jmp    _T96;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Td8;
// LINE 1427:
_T96:
	__asm        jmp    near ptr 0x004A6E60;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+8];
// LINE 1428:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6E8D;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6E98;
// LINE 1429:
	__asm        jmp    _T3f;
// LINE 1430:
_Td8:
	__asm        jmp    near ptr 0x004A6EA2;
}

// FUNCTION: COPTER_D 0x004a6ea7
void  GraphicWindow::DestroyAllImages() {
	class list<GraphicWindow *>::iterator i;

// LINE 1442:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6ED4;

	__asm        jmp    _T32;
// LINE 1445:
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6EED;

	__asm        jmp    near ptr 0x004A6EF2;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T61;

	__asm        jmp    _T75;

	__asm        jmp    _T61;
_T61:
	__asm        jmp    _T70;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T75;
_T70:
	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Tcb;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tcb;
// LINE 1446:
_T89:
	__asm        jmp    near ptr 0x004A6F35;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC];
// LINE 1447:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6F62;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6F6D;
// LINE 1448:
	__asm        jmp    _T32;
// LINE 1449:
_Tcb:
	__asm        jmp    near ptr 0x004A6F77;
}

// FUNCTION: COPTER_D 0x004a6f7c
void  GraphicWindow::DrawBorder(struct SparkalColor* colorBorder) {
// LINE 1456:
	__asm        cmp    colorBorder, 0;
	__asm        je     _T2f;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, colorBorder;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T2f;
// LINE 1461:
_T2f:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1463:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1465:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1467:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1468:
	__asm        jmp    near ptr 0x004A706E;
}

// FUNCTION: COPTER_D 0x004a7075
int  GraphicWindow::MakeModal(class GraphicWindow* windowModal) {
// LINE 1485:
	__asm        mov    eax, windowModal;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveModal;
	__asm        add    esp, 4;
// LINE 1486:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A709F;

	__asm        jmp    near ptr 0x004A70A4;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T61;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T61:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T229;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A712B;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tc0:
	__asm        jmp    near ptr 0x004A713A;

	__asm        jmp    near ptr 0x004A713F;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T105;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T10b;
_T105:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T10b:
	__asm        jmp    near ptr 0x004A7185;

	__asm        jmp    near ptr 0x004A718A;

	__asm        jmp    near ptr 0x004A718F;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T178;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A71E3;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T178:
	__asm        jmp    near ptr 0x004A71F2;

	__asm        jmp    near ptr 0x004A71F7;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1df;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1e5;
_T1df:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1e5:
	__asm        jmp    near ptr 0x004A725F;

	__asm        jmp    near ptr 0x004A7264;

	__asm        jmp    near ptr 0x004A7269;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A7284;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T229:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T23e:
	__asm        jmp    near ptr 0x004A72B8;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A72C3;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A72D1;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T273;

	__asm        mov    eax, windowModal;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T273;
_T273:
	__asm        jmp    near ptr 0x004A72ED;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listModalWindows.length, 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7327;

	__asm        jmp    near ptr 0x004A732C;

	__asm        jmp    near ptr 0x004A7331;
// LINE 1487:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A733B;
// LINE 1488:
}

// FUNCTION: COPTER_D 0x004a7340
int  GraphicWindow::RemoveModal(class GraphicWindow* windowModal) {
	class list<GraphicWindow *>::iterator i;

// LINE 1500:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A735E;

	__asm        jmp    _T23;
// LINE 1501:
_T23:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7376;

	__asm        jmp    near ptr 0x004A737B;

	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T51;

	__asm        jmp    _T65;

	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T60;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T65;
_T60:
	__asm        jmp    _T6a;
_T65:
	__asm        jmp    _T121;
_T6a:
	__asm        jmp    _T79;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T121;
// LINE 1502:
_T79:
	__asm        jmp    near ptr 0x004A73BE;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowModal;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tfe;
// LINE 1503:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A73E0;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A73EB;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A7411;

	__asm        jmp    near ptr 0x004A7416;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A742D;

	__asm        add    GraphicWindow::listModalWindows.length, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A7439;
// LINE 1504:
	__asm        jmp    _T11c;
// LINE 1505:
_Tfe:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7451;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T11c;
// LINE 1506:
_T11c:
	__asm        jmp    _T23;
// LINE 1507:
_T121:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A746B;
// LINE 1508:
}

// FUNCTION: COPTER_D 0x004a7470
int  GraphicWindow::MakeFocus(class GraphicWindow* windowFocus) {
// LINE 1531:
	__asm        mov    eax, windowFocus;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveFocus;
	__asm        add    esp, 4;
// LINE 1532:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A749A;

	__asm        jmp    near ptr 0x004A749F;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T61;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T61:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T229;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A7526;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Tc0:
	__asm        jmp    near ptr 0x004A7535;

	__asm        jmp    near ptr 0x004A753A;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T105;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T10b;
_T105:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T10b:
	__asm        jmp    near ptr 0x004A7580;

	__asm        jmp    near ptr 0x004A7585;

	__asm        jmp    near ptr 0x004A758A;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T178;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A75DE;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T178:
	__asm        jmp    near ptr 0x004A75ED;

	__asm        jmp    near ptr 0x004A75F2;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1df;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1e5;
_T1df:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1e5:
	__asm        jmp    near ptr 0x004A765A;

	__asm        jmp    near ptr 0x004A765F;

	__asm        jmp    near ptr 0x004A7664;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    near ptr 0x004A767F;

	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T229:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T23e:
	__asm        jmp    near ptr 0x004A76B3;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A76BE;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A76CC;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T273;

	__asm        mov    eax, windowFocus;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T273;
_T273:
	__asm        jmp    near ptr 0x004A76E8;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listFocusWindows.length, 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7722;

	__asm        jmp    near ptr 0x004A7727;

	__asm        jmp    near ptr 0x004A772C;
// LINE 1533:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7736;
// LINE 1534:
}

// FUNCTION: COPTER_D 0x004a773b
int  GraphicWindow::RemoveFocus(class GraphicWindow* windowFocus) {
	class list<GraphicWindow *>::iterator i;

// LINE 1545:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7759;

	__asm        jmp    _T23;
// LINE 1546:
_T23:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7771;

	__asm        jmp    near ptr 0x004A7776;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T51;

	__asm        jmp    _T65;

	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T60;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T65;
_T60:
	__asm        jmp    _T6a;
_T65:
	__asm        jmp    _T121;
_T6a:
	__asm        jmp    _T79;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T121;
// LINE 1547:
_T79:
	__asm        jmp    near ptr 0x004A77B9;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowFocus;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tfe;
// LINE 1548:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A77DB;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A77E6;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A780C;

	__asm        jmp    near ptr 0x004A7811;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    near ptr 0x004A7828;

	__asm        add    GraphicWindow::listFocusWindows.length, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A7834;
// LINE 1549:
	__asm        jmp    _T11c;
// LINE 1550:
_Tfe:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A784C;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T11c;
// LINE 1551:
_T11c:
	__asm        jmp    _T23;
// LINE 1552:
_T121:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7866;
// LINE 1553:
}

// FUNCTION: COPTER_D 0x004a786b
int  GraphicWindow::CanWeRespondToMessage() {
	class GraphicWindow* gwModal;
	class GraphicWindow* gwCurrentTest;
	int32_t nModalWindowCount;

// LINE 1572:
	__asm        jmp    near ptr 0x004A787C;

	__asm        mov    eax, GraphicWindow::listModalWindows.length;
	__asm        mov    nModalWindowCount, eax;
// LINE 1573:
	__asm        cmp    nModalWindowCount, 0;
	__asm        je     _T95;
// LINE 1574:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A78A3;

	__asm        jmp    near ptr 0x004A78A8;

	__asm        jmp    near ptr 0x004A78AD;

	__asm        jmp    near ptr 0x004A78B2;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    gwModal, eax;
// LINE 1575:
	__asm        mov    eax, this;
	__asm        mov    gwCurrentTest, eax;
// LINE 1576:
_T56:
	__asm        mov    eax, gwModal;
	__asm        cmp    gwCurrentTest, eax;
	__asm        je     _T7a;

	__asm        cmp    gwCurrentTest, 0;
	__asm        je     _T7a;
// LINE 1577:
	__asm        mov    eax, gwCurrentTest;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentTest, eax;
	__asm        jmp    _T56;
// LINE 1578:
_T7a:
	__asm        cmp    gwModal, 0;
	__asm        jne    _T8b;
// LINE 1579:
	__asm        xor    eax, eax;
	__asm        jmp    _T9f;
// LINE 1580:
_T8b:
	__asm        mov    eax, 1;
	__asm        jmp    _T9f;
// LINE 1582:
_T95:
	__asm        mov    eax, 1;
	__asm        jmp    _T9f;
// LINE 1583:
_T9f:
}

// FUNCTION: COPTER_D 0x004a790f
void ScreenWindow::ScreenWindow() {

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1601:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1602:
	__asm        jmp    near ptr 0x004A7945;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a794d
void ScreenWindow::ScreenWindow(const class ScreenWindow& copyScreenWindow) {

	__asm        mov    eax, copyScreenWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1612:
	__asm        mov    eax, copyScreenWindow;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1613:
	__asm        jmp    near ptr 0x004A797F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a7989
void ScreenWindow::ScreenWindow(class MRect& rectNewWindow, int32_t nNewID, class CBackBuffer* bufferNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1625:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1626:
	__asm        mov    eax, bufferNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1627:
	__asm        mov    eax, bufferNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
// LINE 1628:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 1629:
	__asm        jmp    near ptr 0x004A79E3;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a79ed
void ScreenWindow::~ScreenWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1637:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 1638:
	__asm        jmp    near ptr 0x004A7A11;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x004a7a1e
class ScreenWindow& ScreenWindow::operator=(const class ScreenWindow& copyScreenWindow) {
// LINE 1646:
	__asm        mov    eax, copyScreenWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::operator=;
// LINE 1647:
	__asm        mov    eax, copyScreenWindow;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1649:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004A7A4A;
// LINE 1650:
}

// FUNCTION: COPTER_D 0x004a7a51
int32_t ScreenWindow::ComposeSelf() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* gwCurrentChild;

// LINE 1665:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1666:
	__asm        xor    eax, eax;
	__asm        jmp    _Te2;
// LINE 1668:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7A87;

	__asm        jmp    _T3b;
// LINE 1669:
_T3b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A7AA0;

	__asm        jmp    near ptr 0x004A7AA5;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    _T6a;

	__asm        jmp    _T7e;

	__asm        jmp    _T6a;
_T6a:
	__asm        jmp    _T79;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T7e;
_T79:
	__asm        jmp    _T83;
_T7e:
	__asm        jmp    _Td8;
_T83:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Td8;
// LINE 1670:
_T92:
	__asm        jmp    near ptr 0x004A7AE8;

	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    gwCurrentChild, eax;
// LINE 1671:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7B04;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A7B0F;
// LINE 1672:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 1673:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentChild;
	__asm        call   dword ptr [eax+0x18];
// LINE 1674:
	__asm        jmp    _T3b;
// LINE 1680:
_Td8:
	__asm        mov    eax, 1;
	__asm        jmp    _Te2;
// LINE 1681:
_Te2:
}

// FUNCTION: COPTER_D 0x004a7b38
int32_t ScreenWindow::DrawSelf() {
// LINE 1695:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7B4E;
// LINE 1696:
}



// Contribution: 1:000a6b60-000a6b81 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6b90-000a6bb1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6bc0-000a6dd5 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7bc0
// list<GraphicWindow *>::get_node



// Contribution: 1:000a6de0-000a6e18 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7de0
// GraphicWindow::`scalar deleting destructor'



// Contribution: 1:000a6e20-000a6e5b Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e20
// list<GraphicWindow *>::iterator::operator++



// Contribution: 1:000a6e60-000a6eb9 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e60
// list<GraphicWindow *>::erase



// Contribution: 1:000a6ec0-000a6ef1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7ec0
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f00-000a6f31 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f00
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f40-000a6f78 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7f40
// ScreenWindow::`scalar deleting destructor'



// Contribution: 1:000a6f80-000a6fb6 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f80
// construct



// Contribution: 1:000a6fc0-000a704e Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7fc0
// list<GraphicWindow *>::deallocate_buffers



// Contribution: 1:000a7050-000a7359 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a8050
// list<GraphicWindow *>::insert



// Contribution: 2:00002648-0000267f Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591648
// GLOBAL: COPTER_D 0x00591648
// ??_7GraphicWindowManager@@6B@


// Contribution: 2:00002680-00002743 Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591680
// GLOBAL: COPTER_D 0x00591680
// ??_7GraphicWindow@@6B@


// Contribution: 2:00002748-0000280b Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591748
// GLOBAL: COPTER_D 0x00591748
// ??_7ScreenWindow@@6B@


// Contribution: 3:00000090-0000009f Module: 9, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597090
void (*$S49)() = { /* <data@0x00597090> */ };

// GLOBAL: COPTER_D 0x00597094
void (*$S54)() = { /* <data@0x00597094> */ };

// GLOBAL: COPTER_D 0x00597098
void (*$S59)() = { /* <data@0x00597098> */ };

// GLOBAL: COPTER_D 0x0059709c
void (*$S62)() = { /* <data@0x0059709c> */ };



// Contribution: 3:00003960-0000396f Module: 9, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a960
class GraphicWindow* GraphicWindow::windowCursorCapture = { /* <data@0x0059a960> */ };

// GLOBAL: COPTER_D 0x0059a964
class GraphicWindowManager* GraphicWindow::windowManager = { /* <data@0x0059a964> */ };

// GLOBAL: COPTER_D 0x0059a968
class GraphicWindow* GraphicWindow::screenWindow = { /* <data@0x0059a968> */ };



// Contribution: 3:00003970-00003973 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a970
uint32_t list<GraphicWindow *>::number_of_lists = { /* <data@0x0059a970> */ };



// Contribution: 3:00003974-00003977 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a974
struct list<GraphicWindow *>::list_node* list<GraphicWindow *>::last = { /* <data@0x0059a974> */ };



// Contribution: 3:00003978-0000397b Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a978
struct list<GraphicWindow *>::list_node* list<GraphicWindow *>::next_avail = { /* <data@0x0059a978> */ };



// Contribution: 3:0000397c-0000397f Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a97c
struct list<GraphicWindow *>::list_node* list<GraphicWindow *>::free_list = { /* <data@0x0059a97c> */ };



// Contribution: 3:00003980-00003983 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a980
struct list<GraphicWindow *>::list_node_buffer* list<GraphicWindow *>::buffer_list = { /* <data@0x0059a980> */ };



// Contribution: 3:0006f960-0006f9a7 Module: 9, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00606960
class list<GraphicWindow *> GraphicWindow::listFocusWindows = { /* <data@0x00606960> */ };

// GLOBAL: COPTER_D 0x00606968
struct GraphicWindowColorConstants GraphicWindow::colorConstants = { /* <data@0x00606968> */ };

// GLOBAL: COPTER_D 0x00606990
class list<GraphicWindow *> GraphicWindow::listModalWindows = { /* <data@0x00606990> */ };

// GLOBAL: COPTER_D 0x00606998
// LOCAL: COPTER_D 0x00606998
// $S46
// GLOBAL: COPTER_D 0x006069a0
class list<GraphicWindow *> GraphicWindow::listValidWindows = { /* <data@0x006069a0> */ };

