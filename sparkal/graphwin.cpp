// Module: Graphwin.obj
// Source: C:\Copter\source\sparkal\Graphwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: struct GraphicWindowColorConstants (forward reference);
class GraphicWindowColorConstants{
public:
	int32_t nPaletteIndexBlack;
	int32_t nPaletteIndexDarkGray;
	int32_t nPaletteIndexLightGray;
	int32_t nPaletteIndexWhite;
	int32_t nPaletteIndexRed;
	int32_t nPaletteIndexBlue;
	int32_t nPaletteIndexGreen;
	int32_t nPaletteIndexBlueGreen;
	int32_t nPaletteIndexTransparent;
	void GraphicWindowColorConstants();
};

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class GraphicWindow (forward reference);

// Type: long;

// Type: void * __ptr32;

// Type: int32_t;

// Type: class GraphicWindowManager (forward reference);
class GraphicWindowManager{
public:
	void GraphicWindowManager(class GraphicWindow*);
	void ~GraphicWindowManager();
	// vtable: 0
	intro void SetNewBaseWindow(class GraphicWindow*);
	// vtable: 4
	intro int32_t DeleteWindow(class GraphicWindow*);
	// vtable: 8
	intro long DoCharacter(long);
	// vtable: 12
	intro long DoKeyDown(long, char);
	// vtable: 16
	intro long DoKeyUp(long, char);
	// vtable: 20
	intro long DoCursorDown(long, long, unsigned long);
	// vtable: 24
	intro long DoCursorUp(long, long, unsigned long);
	// vtable: 28
	intro long DoCursorMove(long, long);
	// vtable: 32
	intro int32_t SendCursorMessageToChildWindow(class GraphicWindow*, int32_t, long, long, unsigned long);
	// vtable: 36
	intro int32_t ComposeAllWindows();
	// vtable: 40
	intro int32_t IsWindowValid(class GraphicWindow*);
	// vtable: 44
	intro int32_t IsWindowOrParentInDeletionList(class GraphicWindow*);
	// vtable: 48
	intro int32_t IncrementBusyCount();
	// vtable: 52
	intro int32_t DecrementBusyCount();
protected:
	int32_t DeleteWindowAndRemoveItsTraces(class GraphicWindow*);
	int32_t DeleteAllWindowsInDeletionList();
	int32_t nBusyIteratingCount;
	class GraphicWindow* baseWindow;
	class list<GraphicWindow *> listWindowsToDelete;
};

// Type: class list<GraphicWindow *>::iterator;
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::iterator&);
	class GraphicWindow*& operator*();
	class list<GraphicWindow *>::iterator operator++(int32_t);
	class list<GraphicWindow *>::iterator& operator++();
	class list<GraphicWindow *>::iterator operator--(int32_t);
	class list<GraphicWindow *>::iterator& operator--();
};

// Type: char;

// Type: unsigned long;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char *;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char[261];

// Type: class CBackBuffer (forward reference);

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class ScreenWindow (forward reference);
class ScreenWindow : public GraphicWindow
{
public:
	void ScreenWindow(class MRect&, int32_t, class CBackBuffer*, class GraphicWindowOwner*, int32_t);
	void ScreenWindow(const class ScreenWindow&);
	void ScreenWindow();
	virtual void ~ScreenWindow();
	class ScreenWindow& operator=(const class ScreenWindow&);
	virtual int32_t ComposeSelf();
	virtual int32_t DrawSelf();
	void SetParentBuffer(class CBackBuffer*);
protected:
	class CBackBuffer* bufferParent;
};

// Type: class list<GraphicWindow *> (forward reference);
class list<GraphicWindow *>{
	using void_pointer = void * __ptr32;
	class list<GraphicWindow *>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class GraphicWindow* data;
	};
protected:
	static class allocator<list<GraphicWindow *>::list_node> list_node_allocator;
	static class allocator<GraphicWindow *> value_allocator;
	using value_type = class GraphicWindow*;
	using value_allocator_type = class allocator<GraphicWindow *>;
	using pointer = class GraphicWindow**;
	using reference = class GraphicWindow*&;
	using const_reference = const class GraphicWindow*&;
	using list_node_allocator_type = class allocator<list<GraphicWindow *>::list_node>;
	using link_type = struct list<GraphicWindow *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<GraphicWindow *>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<GraphicWindow *>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<GraphicWindow *>::list_node_buffer>;
	using buffer_pointer = struct list<GraphicWindow *>::list_node_buffer*;
protected:
	static class allocator<list<GraphicWindow *>::list_node_buffer> buffer_allocator;
	static struct list<GraphicWindow *>::list_node_buffer* buffer_list;
	static struct list<GraphicWindow *>::list_node* free_list;
	static struct list<GraphicWindow *>::list_node* next_avail;
	static struct list<GraphicWindow *>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<GraphicWindow *>::list_node* get_node();
	void put_node(struct list<GraphicWindow *>::list_node*);
	struct list<GraphicWindow *>::list_node* node;
	uint32_t length;
	class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::iterator&);
		class GraphicWindow*& operator*();
		class list<GraphicWindow *>::iterator operator++(int32_t);
		class list<GraphicWindow *>::iterator& operator++();
		class list<GraphicWindow *>::iterator operator--(int32_t);
		class list<GraphicWindow *>::iterator& operator--();
	};
	class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
	{
	protected:
		struct list<GraphicWindow *>::list_node* node;
	public:
		void const_iterator(const class list<GraphicWindow *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
		const class GraphicWindow*& operator*();
		class list<GraphicWindow *>::const_iterator operator++(int32_t);
		class list<GraphicWindow *>::const_iterator& operator++();
		class list<GraphicWindow *>::const_iterator operator--(int32_t);
		class list<GraphicWindow *>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int>;
public:
	void list<GraphicWindow *>(const class list<GraphicWindow *>&);
	void list<GraphicWindow *>(const class GraphicWindow**, const class GraphicWindow**);
	void list<GraphicWindow *>(uint32_t, const class GraphicWindow*&);
	void list<GraphicWindow *>();
	class list<GraphicWindow *>::const_iterator begin();
	class list<GraphicWindow *>::iterator begin();
	class list<GraphicWindow *>::const_iterator end();
	class list<GraphicWindow *>::iterator end();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rbegin();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rend();
	class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class GraphicWindow*& front();
	class GraphicWindow*& front();
	const class GraphicWindow*& back();
	class GraphicWindow*& back();
	void swap(class list<GraphicWindow *>&);
	void insert(class list<GraphicWindow *>::iterator, uint32_t, const class GraphicWindow*&);
	void insert(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::const_iterator, class list<GraphicWindow *>::const_iterator);
	void insert(class list<GraphicWindow *>::iterator, const class GraphicWindow**, const class GraphicWindow**);
	class list<GraphicWindow *>::iterator insert(class list<GraphicWindow *>::iterator, const class GraphicWindow*&);
	void push_front(const class GraphicWindow*&);
	void push_back(const class GraphicWindow*&);
	void erase(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void erase(class list<GraphicWindow *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<GraphicWindow *>();
	class list<GraphicWindow *>& operator=(const class list<GraphicWindow *>&);
protected:
	void transfer(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
public:
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&, class list<GraphicWindow *>::iterator);
	void splice(class list<GraphicWindow *>::iterator, class list<GraphicWindow *>&);
	void remove(const class GraphicWindow*&);
	void unique();
	void merge(class list<GraphicWindow *>&);
	void reverse();
	void sort();
};

// Type: struct list<GraphicWindow *>::list_node (forward reference);

// Type: uint32_t;

// Type: class list<GraphicWindow *>::iterator (forward reference);
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::iterator&);
	class GraphicWindow*& operator*();
	class list<GraphicWindow *>::iterator operator++(int32_t);
	class list<GraphicWindow *>::iterator& operator++();
	class list<GraphicWindow *>::iterator operator--(int32_t);
	class list<GraphicWindow *>::iterator& operator--();
};

// Type: class list<GraphicWindow *>::const_iterator (forward reference);
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void const_iterator(const class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
	const class GraphicWindow*& operator*();
	class list<GraphicWindow *>::const_iterator operator++(int32_t);
	class list<GraphicWindow *>::const_iterator& operator++();
	class list<GraphicWindow *>::const_iterator operator--(int32_t);
	class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: struct list<GraphicWindow *>::list_node_buffer (forward reference);

// Type: class list<GraphicWindow *>::const_iterator;
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{
protected:
	struct list<GraphicWindow *>::list_node* node;
public:
	void const_iterator(const class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const class list<GraphicWindow *>::const_iterator&);
	const class GraphicWindow*& operator*();
	class list<GraphicWindow *>::const_iterator operator++(int32_t);
	class list<GraphicWindow *>::const_iterator& operator++();
	class list<GraphicWindow *>::const_iterator operator--(int32_t);
	class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: struct bidirectional_iterator<GraphicWindow *,int>;
class bidirectional_iterator<GraphicWindow *,int>{
};

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:0009fa00-000a6b52 Module: 9, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004a0a00
// $E48

// FUNCTION: COPTER_D 0x004a0a1a
// $E44

// FUNCTION: COPTER_D 0x004a0c73
// $E47

// FUNCTION: COPTER_D 0x004a0c90
// $E45

// FUNCTION: COPTER_D 0x004a0e5f
// $E53

// FUNCTION: COPTER_D 0x004a0e79
// $E50

// FUNCTION: COPTER_D 0x004a10d2
// $E52

// FUNCTION: COPTER_D 0x004a10ef
// $E51

// FUNCTION: COPTER_D 0x004a12be
// $E58

// FUNCTION: COPTER_D 0x004a12d8
// $E55

// FUNCTION: COPTER_D 0x004a1531
// $E57

// FUNCTION: COPTER_D 0x004a154e
// $E56

// FUNCTION: COPTER_D 0x004a171d
// $E61

// FUNCTION: COPTER_D 0x004a1732
// $E60

// FUNCTION: COPTER_D 0x004a174c
void GraphicWindowColorConstants::GraphicWindowColorConstants() {
// LINE 33:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 37:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0xF8;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 7;
// LINE 39:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0xFF;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 1;
// LINE 41:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 4;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 2;
// LINE 43:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 6;
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0xFFFFFFFF;
// LINE 48:
	__asm        jmp    near ptr 0x004A17B6;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a17be
int32_t GraphicWindowOwner::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 61:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 62:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A17D1;
// LINE 63:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004a17d8
void GraphicWindowManager::GraphicWindowManager(class GraphicWindow* newBaseWindow) {
// LINE 77:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, newBaseWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        inc    dword ptr ds:[0x59A970];
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A1833;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A1A10;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A19FB;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x004A1892;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1888;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1897;
	__asm        jmp    near ptr 0x004A189C;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A18D7;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004A18DD;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004A18E2;
	__asm        jmp    near ptr 0x004A18E7;
	__asm        jmp    near ptr 0x004A18EC;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x004A194A;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1940;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A194F;
	__asm        jmp    near ptr 0x004A1954;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A19B1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A19B7;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A19BC;
	__asm        jmp    near ptr 0x004A19C1;
	__asm        jmp    near ptr 0x004A19C6;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A19E1;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-8], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A1A10;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0xC], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A1A15;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1A40;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591648;
// LINE 78:
	__asm        mov    eax, this;
	__asm        mov    ds:[0x59A964], eax;
// LINE 79:
	__asm        jmp    near ptr 0x004A1A56;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a1a60
void GraphicWindowManager::~GraphicWindowManager() {
// LINE 85:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591648;
// LINE 87:
	__asm        jmp    near ptr 0x004A1A7A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1A8E;
	__asm        jmp    near ptr 0x004A1A93;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A1AA9;
	__asm        jmp    near ptr 0x004A1AAE;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    near ptr 0x004A1AD0;
	__asm        jmp    near ptr 0x004A1AE4;
	__asm        jmp    near ptr 0x004A1AD0;
	__asm        jmp    near ptr 0x004A1ADF;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004A1AE4;
	__asm        jmp    near ptr 0x004A1AE9;
	__asm        jmp    near ptr 0x004A1B68;
	__asm        jmp    near ptr 0x004A1AF8;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A1B68;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A1B0B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A1B16;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A1B3C;
	__asm        jmp    near ptr 0x004A1B41;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A1B58;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x004A1B63;
	__asm        jmp    near ptr 0x004A1ABA;
	__asm        jmp    near ptr 0x004A1B6D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A1B8D;
	__asm        dec    dword ptr ds:[0x59A970];
	__asm        jne    near ptr 0x004A1C17;
	__asm        cmp    dword ptr ds:[0x59A980], 0;
	__asm        je     near ptr 0x004A1BF4;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1BD4;
	__asm        jmp    near ptr 0x004A1BD9;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1BEA;
	__asm        jmp    near ptr 0x004A1BEF;
	__asm        jmp    near ptr 0x004A1B99;
	__asm        mov    dword ptr ds:[0x59A97C], 0;
	__asm        mov    dword ptr ds:[0x59A978], 0;
	__asm        mov    dword ptr ds:[0x59A974], 0;
	__asm        jmp    near ptr 0x004A1C17;
	__asm        jmp    near ptr 0x004A1C1C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a1c21
void GraphicWindowManager::SetNewBaseWindow(class GraphicWindow* newBaseWindow) {
// LINE 97:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 98:
	__asm        mov    eax, newBaseWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 99:
	__asm        jmp    near ptr 0x004A1C3B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a1c42
int32_t GraphicWindowManager::DeleteWindow(class GraphicWindow* windowToDelete) {
// LINE 113:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x6C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 114:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jle    near ptr 0x004A1F27;
// LINE 115:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004A1F18;
// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A1C86;
	__asm        jmp    near ptr 0x004A1C8B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A1CBD;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A1E9A;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A1E85;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004A1D1C;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1D12;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1D21;
	__asm        jmp    near ptr 0x004A1D26;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A1D61;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A1D67;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A1D6C;
	__asm        jmp    near ptr 0x004A1D71;
	__asm        jmp    near ptr 0x004A1D76;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x004A1DD4;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1DCA;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A1DD9;
	__asm        jmp    near ptr 0x004A1DDE;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A1E3B;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A1E41;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A1E46;
	__asm        jmp    near ptr 0x004A1E4B;
	__asm        jmp    near ptr 0x004A1E50;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A1E6B;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A1E9A;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x20], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A1E9F;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A1EAA;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A1EB8;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A1ECF;
	__asm        mov    eax, windowToDelete;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A1ECF;
	__asm        jmp    near ptr 0x004A1ED4;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x10], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A1F0E;
	__asm        jmp    near ptr 0x004A1F13;
	__asm        jmp    near ptr 0x004A1F18;
// LINE 123:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x004A1F47;
// LINE 125:
	__asm        jmp    near ptr 0x004A1F31;
// LINE 126:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 129:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A1F4E;
// LINE 130:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A1F47;
// LINE 131:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a1f4e
int32_t GraphicWindowManager::DeleteWindowAndRemoveItsTraces(class GraphicWindow* windowToDelete) {
	class GraphicWindow* windowParent;

// LINE 138:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 139:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004A1F78;
// LINE 140:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A1FEB;
// LINE 144:
	__asm        mov    eax, windowToDelete;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    windowParent, eax;
// LINE 145:
	__asm        cmp    windowParent, 0;
	__asm        je     near ptr 0x004A1FB6;
// LINE 146:
	__asm        mov    eax, windowParent;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A1FB1;
// LINE 147:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, windowParent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowParent;
	__asm        call   dword ptr [eax+0x5C];
// LINE 149:
	__asm        jmp    near ptr 0x004A1FE1;
// LINE 150:
	__asm        mov    eax, windowToDelete;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004A1FE1;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    near ptr 0x004A1FE1;
// LINE 155:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A1FEB;
// LINE 156:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a1ff2
int32_t GraphicWindowManager::DeleteAllWindowsInDeletionList() {
	static const int32_t nReentrancyCount = { /* <data@0x0059a96c> */ };
	class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;

// LINE 162:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 165:
	__asm        cmp    dword ptr ds:[0x59A96C], 0;
	__asm        jle    near ptr 0x004A2012;
// LINE 166:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A21D1;
// LINE 167:
	__asm        inc    dword ptr ds:[0x59A96C];
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A202E;
	__asm        jmp    near ptr 0x004A2033;
// LINE 170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     near ptr 0x004A21C1;
// LINE 171:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A2054;
	__asm        jmp    near ptr 0x004A2059;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jne    near ptr 0x004A206F;
	__asm        jmp    near ptr 0x004A2083;
	__asm        jmp    near ptr 0x004A206F;
	__asm        jmp    near ptr 0x004A207E;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x004A2083;
	__asm        jmp    near ptr 0x004A2088;
	__asm        jmp    near ptr 0x004A20CE;
	__asm        jmp    near ptr 0x004A2097;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A20CE;
// LINE 172:
	__asm        jmp    near ptr 0x004A209C;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A1F4E;
// LINE 173:
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A20BE;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A20C9;
// LINE 174:
	__asm        jmp    near ptr 0x004A2040;
// LINE 175:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A20E2;
	__asm        jmp    near ptr 0x004A20E7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A20FD;
	__asm        jmp    near ptr 0x004A2102;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    [ebp-0x48], eax;
	__asm        jne    near ptr 0x004A2124;
	__asm        jmp    near ptr 0x004A2138;
	__asm        jmp    near ptr 0x004A2124;
	__asm        jmp    near ptr 0x004A2133;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    near ptr 0x004A2138;
	__asm        jmp    near ptr 0x004A213D;
	__asm        jmp    near ptr 0x004A21BC;
	__asm        jmp    near ptr 0x004A214C;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004A21BC;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004A215F;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A216A;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A2190;
	__asm        jmp    near ptr 0x004A2195;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A21AC;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x004A21B7;
	__asm        jmp    near ptr 0x004A210E;
	__asm        jmp    near ptr 0x004A21C1;
// LINE 177:
	__asm        dec    dword ptr ds:[0x59A96C];
// LINE 178:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A21D1;
// LINE 179:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a21d6
int32_t GraphicWindowManager::IsWindowOrParentInDeletionList(class GraphicWindow* windowToCheck) {
	class GraphicWindow* currentGraphicWindowToCheck;
	class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;

// LINE 191:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A21F8;
	__asm        jmp    near ptr 0x004A21FD;
// LINE 195:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2211;
	__asm        jmp    near ptr 0x004A2216;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004A222C;
	__asm        jmp    near ptr 0x004A2240;
	__asm        jmp    near ptr 0x004A222C;
	__asm        jmp    near ptr 0x004A223B;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004A2240;
	__asm        jmp    near ptr 0x004A2245;
	__asm        jmp    near ptr 0x004A22B3;
	__asm        jmp    near ptr 0x004A2254;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A22B3;
// LINE 196:
	__asm        mov    eax, windowToCheck;
	__asm        mov    currentGraphicWindowToCheck, eax;
// LINE 197:
	__asm        cmp    currentGraphicWindowToCheck, 0;
	__asm        je     near ptr 0x004A2290;
// LINE 198:
	__asm        jmp    near ptr 0x004A2269;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    ecx, currentGraphicWindowToCheck;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A2282;
// LINE 199:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A22BA;
// LINE 201:
	__asm        mov    eax, currentGraphicWindowToCheck;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    currentGraphicWindowToCheck, eax;
// LINE 202:
	__asm        jmp    near ptr 0x004A225A;
// LINE 203:
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    near ptr 0x004A22A3;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A22AE;
// LINE 204:
	__asm        jmp    near ptr 0x004A21FD;
// LINE 205:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A22BA;
// LINE 206:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a22c1
long GraphicWindowManager::DoKeyDown(long lKey, char chModifiers) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 217:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 219:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A22E2;
	__asm        jmp    near ptr 0x004A22E7;
// LINE 220:
	__asm        mov    nReturnValue, 0;
// LINE 222:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 223:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2307;
	__asm        jmp    near ptr 0x004A230C;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    near ptr 0x004A2322;
	__asm        jmp    near ptr 0x004A2336;
	__asm        jmp    near ptr 0x004A2322;
	__asm        jmp    near ptr 0x004A2331;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A2336;
	__asm        jmp    near ptr 0x004A233B;
	__asm        jmp    near ptr 0x004A23A6;
	__asm        jmp    near ptr 0x004A234A;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A23A6;
// LINE 224:
	__asm        jmp    near ptr 0x004A234F;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 225:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004A2383;
// LINE 226:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x84];
	__asm        mov    nReturnValue, eax;
// LINE 227:
	__asm        jmp    near ptr 0x004A23A6;
// LINE 229:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A2396;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A23A1;
// LINE 230:
	__asm        jmp    near ptr 0x004A22F4;
// LINE 231:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     near ptr 0x004A23CB;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 234:
	__asm        mov    ecx, this;
	__asm        call   0x004A1FF2;
// LINE 237:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A23D3;
// LINE 238:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a23da
long GraphicWindowManager::DoKeyUp(long lKey, char chModifiers) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 249:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 251:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A23FB;
	__asm        jmp    near ptr 0x004A2400;
// LINE 252:
	__asm        mov    nReturnValue, 0;
// LINE 254:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 255:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2420;
	__asm        jmp    near ptr 0x004A2425;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    iterator.node, eax;
	__asm        jne    near ptr 0x004A243B;
	__asm        jmp    near ptr 0x004A244F;
	__asm        jmp    near ptr 0x004A243B;
	__asm        jmp    near ptr 0x004A244A;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A244F;
	__asm        jmp    near ptr 0x004A2454;
	__asm        jmp    near ptr 0x004A24BF;
	__asm        jmp    near ptr 0x004A2463;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A24BF;
// LINE 256:
	__asm        jmp    near ptr 0x004A2468;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 257:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004A249C;
// LINE 258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
	__asm        push   eax;
	__asm        mov    eax, lKey;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x88];
	__asm        mov    nReturnValue, eax;
// LINE 259:
	__asm        jmp    near ptr 0x004A24BF;
// LINE 261:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A24AF;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A24BA;
// LINE 262:
	__asm        jmp    near ptr 0x004A240D;
// LINE 263:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 264:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     near ptr 0x004A24E4;
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 266:
	__asm        mov    ecx, this;
	__asm        call   0x004A1FF2;
// LINE 269:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A24EC;
// LINE 270:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a24f3
long GraphicWindowManager::DoCharacter(long lCharacter) {
	class list<GraphicWindow *>::iterator iterator;
	int32_t nReturnValue;
	class GraphicWindow* windowCurrent;

// LINE 276:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 278:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A2514;
	__asm        jmp    near ptr 0x004A2519;
// LINE 279:
	__asm        mov    nReturnValue, 0;
// LINE 281:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 282:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2539;
	__asm        jmp    near ptr 0x004A253E;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x10], eax;
	__asm        jne    near ptr 0x004A2554;
	__asm        jmp    near ptr 0x004A2568;
	__asm        jmp    near ptr 0x004A2554;
	__asm        jmp    near ptr 0x004A2563;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A2568;
	__asm        jmp    near ptr 0x004A256D;
	__asm        jmp    near ptr 0x004A25D4;
	__asm        jmp    near ptr 0x004A257C;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A25D4;
// LINE 283:
	__asm        jmp    near ptr 0x004A2581;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrent, eax;
// LINE 284:
	__asm        mov    eax, windowCurrent;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004A25B1;
// LINE 285:
	__asm        mov    eax, lCharacter;
	__asm        push   eax;
	__asm        mov    eax, windowCurrent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowCurrent;
	__asm        call   dword ptr [eax+0x80];
	__asm        mov    nReturnValue, eax;
// LINE 286:
	__asm        jmp    near ptr 0x004A25D4;
// LINE 288:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A25C4;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A25CF;
// LINE 289:
	__asm        jmp    near ptr 0x004A2526;
// LINE 290:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     near ptr 0x004A25F9;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 293:
	__asm        mov    ecx, this;
	__asm        call   0x004A1FF2;
// LINE 296:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A2601;
// LINE 297:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a2608
long GraphicWindowManager::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 303:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 308:
	__asm        cmp    dword ptr ds:[0x59A960], 0;
	__asm        je     near ptr 0x004A2660;
// LINE 314:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0xA4];
// LINE 315:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    near ptr 0x004A2685;
// LINE 320:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    near ptr 0x004A2685;
// LINE 321:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004a268c
long GraphicWindowManager::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 329:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 330:
	__asm        cmp    dword ptr ds:[0x59A960], 0;
	__asm        je     near ptr 0x004A26E4;
// LINE 331:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0xA4];
// LINE 332:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    near ptr 0x004A2709;
// LINE 336:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    near ptr 0x004A2709;
// LINE 337:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004a2710
long GraphicWindowManager::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 343:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 344:
	__asm        cmp    dword ptr ds:[0x59A960], 0;
	__asm        je     near ptr 0x004A2764;
// LINE 345:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0xA4];
// LINE 346:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A960];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A960];
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    near ptr 0x004A2787;
// LINE 350:
	__asm        push   0;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    near ptr 0x004A2787;
// LINE 351:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a278e
int32_t GraphicWindowManager::SendCursorMessageToChildWindow(class GraphicWindow* childWindow, int32_t nMessage, long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 359:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 361:
	__asm        jmp    near ptr 0x004A279F;
	__asm        mov    eax, childWindow;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x004A2924;
// LINE 363:
// Block start:
	class list<GraphicWindow *>::iterator iterator;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A27C0;
	__asm        jmp    near ptr 0x004A27C5;
// LINE 365:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+4];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004A27D9;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A27E4;
// LINE 367:
	__asm        jmp    near ptr 0x004A27E9;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004A28CB;
	__asm        jmp    near ptr 0x004A27FE;
	__asm        jmp    near ptr 0x004A2803;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2814;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     near ptr 0x004A2861;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     near ptr 0x004A2861;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jle    near ptr 0x004A2861;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    near ptr 0x004A2861;
	__asm        jmp    near ptr 0x004A2866;
	__asm        jmp    near ptr 0x004A28CB;
	__asm        jmp    near ptr 0x004A2875;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A28CB;
// LINE 369:
	__asm        jmp    near ptr 0x004A287A;
	__asm        xor    eax, eax;
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0x10];
	__asm        neg    eax;
	__asm        sub    nCursorX, eax;
// LINE 370:
	__asm        jmp    near ptr 0x004A288F;
	__asm        xor    eax, eax;
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    nCursorY, eax;
// LINE 373:
	__asm        jmp    near ptr 0x004A28A4;
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, nMessage;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    near ptr 0x004A29C6;
// LINE 375:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A28E1;
	__asm        jmp    near ptr 0x004A28E6;
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    near ptr 0x004A28FC;
	__asm        jmp    near ptr 0x004A2915;
	__asm        jmp    near ptr 0x004A28FC;
	__asm        jmp    near ptr 0x004A290B;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A2915;
	__asm        jmp    near ptr 0x004A27C5;
	__asm        jmp    near ptr 0x004A2915;
	__asm        jmp    near ptr 0x004A2924;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004A27C5;
// LINE 377:
// Block end:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x7C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004A293E;
// LINE 378:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A29C6;
// LINE 380:
	__asm        cmp    nMessage, 1;
	__asm        jne    near ptr 0x004A296C;
// LINE 381:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    near ptr 0x004A29C6;
// LINE 382:
	__asm        jmp    near ptr 0x004A29BF;
	__asm        cmp    nMessage, 2;
	__asm        jne    near ptr 0x004A299A;
// LINE 383:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    near ptr 0x004A29C6;
// LINE 384:
	__asm        jmp    near ptr 0x004A29BF;
	__asm        cmp    nMessage, 4;
	__asm        jne    near ptr 0x004A29BF;
// LINE 385:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    near ptr 0x004A29C6;
// LINE 386:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A29C6;
// LINE 387:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004a29cd
int32_t GraphicWindowManager::ComposeAllWindows() {
	int32_t nReturnValue;

// LINE 396:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 401:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x18];
	__asm        mov    nReturnValue, eax;
// LINE 403:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 404:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004A2A0E;
// LINE 405:
	__asm        mov    ecx, this;
	__asm        call   0x004A1FF2;
// LINE 406:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A2A16;
// LINE 407:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a2a1b
int32_t GraphicWindowManager::IsWindowValid(class GraphicWindow* windowToTestForValidity) {
// LINE 414:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 415:
	__asm        mov    eax, windowToTestForValidity;
	__asm        push   eax;
	__asm        call   0x004A5F76;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2A38;
// LINE 416:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a2a3f
 GraphicWindow::GraphicWindow() {
// LINE 444:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A2A59;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A2AAC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2A9E;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A2AB6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A2AC5;
	__asm        jmp    near ptr 0x004A2ACA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        jmp    near ptr 0x004A2AF7;
	__asm        jmp    near ptr 0x004A2AFC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        jmp    near ptr 0x004A2B29;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    dword ptr ds:[0x59A970];
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A2B65;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004A2D42;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A2D2D;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        jne    near ptr 0x004A2BC4;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2BBA;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2BC9;
	__asm        jmp    near ptr 0x004A2BCE;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A2C09;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A2C0F;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A2C14;
	__asm        jmp    near ptr 0x004A2C19;
	__asm        jmp    near ptr 0x004A2C1E;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x74];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    near ptr 0x004A2C7C;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2C72;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A2C81;
	__asm        jmp    near ptr 0x004A2C86;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A2CE3;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004A2CE9;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004A2CEE;
	__asm        jmp    near ptr 0x004A2CF3;
	__asm        jmp    near ptr 0x004A2CF8;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A2D13;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x30], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004A2D42;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004A2D47;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A2D72;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A2DC5;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2DB7;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A2DCF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A2DDE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A2E31;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2E23;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A2E3B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A2E4A;
	__asm        jmp    near ptr 0x004A2E4F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 445:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A2E77;
	__asm        jmp    near ptr 0x004A2E7C;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   0x004A7BC0;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A2E94;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x004A7F80;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+4], eax;
	__asm        add    dword ptr ds:[0x6069A4], 1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A2EE1;
	__asm        jmp    near ptr 0x004A2EE6;
	__asm        jmp    near ptr 0x004A2EEB;
// LINE 446:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 449:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 451:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 454:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 455:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0xFFFFFFFF;
// LINE 456:
	__asm        jmp    near ptr 0x004A2F54;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a2f5c
 GraphicWindow::GraphicWindow(const class GraphicWindow& copyGraphicWindow) {
// LINE 464:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x80;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A2F79;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A2FCC;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A2FBE;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A2FD6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A2FE5;
	__asm        jmp    near ptr 0x004A2FEA;
	__asm        jmp    near ptr 0x004A2FEF;
	__asm        jmp    near ptr 0x004A2FF4;
	__asm        jmp    near ptr 0x004A2FF9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    dword ptr ds:[0x59A970];
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A3035;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A3212;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A31FD;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004A3094;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A308A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3099;
	__asm        jmp    near ptr 0x004A309E;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A30D9;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A30DF;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A30E4;
	__asm        jmp    near ptr 0x004A30E9;
	__asm        jmp    near ptr 0x004A30EE;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    near ptr 0x004A314C;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3142;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3151;
	__asm        jmp    near ptr 0x004A3156;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A31B3;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A31B9;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A31BE;
	__asm        jmp    near ptr 0x004A31C3;
	__asm        jmp    near ptr 0x004A31C8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A31E3;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A3212;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x38], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A3217;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3242;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A3295;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3287;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A329F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A32AE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A3301;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A32F3;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A330B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A331A;
	__asm        jmp    near ptr 0x004A331F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A3347;
	__asm        jmp    near ptr 0x004A334C;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   0x004A7BC0;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A3364;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A3372;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A338B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A338B;
	__asm        jmp    near ptr 0x004A3390;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    dword ptr ds:[0x6069A4];
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A33C9;
	__asm        jmp    near ptr 0x004A33CE;
	__asm        jmp    near ptr 0x004A33D3;
// LINE 466:
	__asm        mov    eax, copyGraphicWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A44EF;
// LINE 467:
	__asm        jmp    near ptr 0x004A33E4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a33ee
 GraphicWindow::GraphicWindow(class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 480:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x80;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A340B;
	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A3467;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3459;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A3471;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A3480;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    dword ptr ds:[0x59A970];
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A34FA;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A36D7;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A36C2;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004A3559;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A354F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A355E;
	__asm        jmp    near ptr 0x004A3563;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A359E;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A35A4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A35A9;
	__asm        jmp    near ptr 0x004A35AE;
	__asm        jmp    near ptr 0x004A35B3;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    near ptr 0x004A3611;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3607;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3616;
	__asm        jmp    near ptr 0x004A361B;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A3678;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A367E;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A3683;
	__asm        jmp    near ptr 0x004A3688;
	__asm        jmp    near ptr 0x004A368D;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A36A8;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x34], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A36D7;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x38], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A36DC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3707;
	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A376C;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A375E;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A3776;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A3785;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A37D8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A37CA;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A37E2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A37F1;
	__asm        jmp    near ptr 0x004A37F6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A381E;
	__asm        jmp    near ptr 0x004A3823;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   0x004A7BC0;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A383B;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A3849;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A3862;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A3862;
	__asm        jmp    near ptr 0x004A3867;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    dword ptr ds:[0x6069A4];
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A38A0;
	__asm        jmp    near ptr 0x004A38A5;
	__asm        jmp    near ptr 0x004A38AA;
// LINE 482:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 483:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 484:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 485:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 486:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 487:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 488:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 489:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0xFFFFFFFF;
// LINE 490:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     near ptr 0x004A3926;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x004A3926;
// LINE 491:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 492:
	__asm        mov    ecx, this;
	__asm        call   0x004A6BCD;
// LINE 493:
	__asm        jmp    near ptr 0x004A3933;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004a393d
 GraphicWindow::GraphicWindow(char * szImageFileName, class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t nNewTransparentIndex) {
// LINE 513:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x90;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590F2C;
	__asm        jmp    near ptr 0x004A3960;
	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004A39C2;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A39B1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A39CF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004A39E1;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    dword ptr ds:[0x59A970];
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A3A67;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004A3C56;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A3C3E;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        jne    near ptr 0x004A3AC6;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3ABC;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3ACB;
	__asm        jmp    near ptr 0x004A3AD0;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A3B0B;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004A3B11;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004A3B16;
	__asm        jmp    near ptr 0x004A3B1B;
	__asm        jmp    near ptr 0x004A3B20;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x88];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x004A3B8A;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3B80;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3B8F;
	__asm        jmp    near ptr 0x004A3B94;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x64], 0x155;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A3BF1;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004A3BF7;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004A3BFC;
	__asm        jmp    near ptr 0x004A3C01;
	__asm        jmp    near ptr 0x004A3C06;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A3C21;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x44], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004A3C56;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004A3C5B;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3C98;
	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, nNewTransparentIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004A3D12;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3D01;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A3D1F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x004A3D31;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004A3D87;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A3D76;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A3D94;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
	__asm        jmp    near ptr 0x004A3DA6;
	__asm        jmp    near ptr 0x004A3DAB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004A3DD9;
	__asm        jmp    near ptr 0x004A3DDE;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   0x004A7BC0;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004A3DF6;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x004A7F80;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        add    dword ptr ds:[0x6069A4], 1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004A3E43;
	__asm        jmp    near ptr 0x004A3E48;
	__asm        jmp    near ptr 0x004A3E4D;
// LINE 515:
	__asm        jmp    near ptr 0x004A3E52;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A3E9D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3E8E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A3E9D;
	__asm        jmp    near ptr 0x004A3EA2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004A3ED9;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A3F2E;
	__asm        jmp    near ptr 0x004A3EC4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004A3F2E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004A3F08;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A3F0F;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A3F64;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A3F64;
	__asm        jmp    near ptr 0x004A3F3D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A3F64;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A3F78;
	__asm        jmp    near ptr 0x004A3F7D;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 518:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 1;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 521:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
// LINE 522:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 523:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     near ptr 0x004A4010;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x004A4010;
// LINE 524:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 525:
	__asm        mov    ecx, this;
	__asm        call   0x004A673C;
// LINE 526:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 527:
	__asm        mov    ecx, this;
	__asm        call   0x004A6BCD;
// LINE 528:
	__asm        jmp    near ptr 0x004A4038;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x004a4045
 GraphicWindow::~GraphicWindow() {
// LINE 537:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x94;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591680;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A408D;
	__asm        jmp    near ptr 0x004A4092;
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004A40AB;
	__asm        jmp    near ptr 0x004A40B0;
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    [ebp-0x78], eax;
	__asm        jne    near ptr 0x004A40C6;
	__asm        jmp    near ptr 0x004A40DD;
	__asm        jmp    near ptr 0x004A40C6;
	__asm        jmp    near ptr 0x004A40D8;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        jne    near ptr 0x004A40DD;
	__asm        jmp    near ptr 0x004A40E2;
	__asm        jmp    near ptr 0x004A4136;
	__asm        jmp    near ptr 0x004A40F4;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x004A4136;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004A4107;
	__asm        jmp    near ptr 0x004A410C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A412B;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   0x004A7E60;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004A40B0;
	__asm        jmp    near ptr 0x004A413B;
// LINE 539:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004A4151;
	__asm        jmp    near ptr 0x004A4156;
	__asm        jmp    near ptr 0x004A4177;
	__asm        jmp    near ptr 0x004A4165;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004A4177;
// LINE 540:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A6640;
// LINE 541:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A773B;
	__asm        add    esp, 4;
// LINE 542:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7340;
	__asm        add    esp, 4;
// LINE 543:
	__asm        mov    ecx, this;
	__asm        call   0x004A5B58;
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 554:
	__asm        jmp    near ptr 0x004A41B0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A4245;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004A4245;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A4225;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004A422A;
	__asm        jmp    near ptr 0x004A422F;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4240;
	__asm        jmp    near ptr 0x004A4245;
	__asm        jmp    near ptr 0x004A424A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004A4278;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A427D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A4312;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004A4312;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A42F2;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004A42F7;
	__asm        jmp    near ptr 0x004A42FC;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A430D;
	__asm        jmp    near ptr 0x004A4312;
	__asm        jmp    near ptr 0x004A4317;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004A4345;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A434A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A4361;
	__asm        jmp    near ptr 0x004A4366;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004A437F;
	__asm        jmp    near ptr 0x004A4384;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        cmp    [ebp-0x74], eax;
	__asm        jne    near ptr 0x004A43A6;
	__asm        jmp    near ptr 0x004A43BA;
	__asm        jmp    near ptr 0x004A43A6;
	__asm        jmp    near ptr 0x004A43B5;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004A43BA;
	__asm        jmp    near ptr 0x004A43BF;
	__asm        jmp    near ptr 0x004A43F2;
	__asm        jmp    near ptr 0x004A43CE;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x004A43F2;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x74];
	__asm        call   0x004A7E20;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A7E60;
	__asm        jmp    near ptr 0x004A4390;
	__asm        jmp    near ptr 0x004A43F7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A441A;
	__asm        dec    dword ptr ds:[0x59A970];
	__asm        jne    near ptr 0x004A4434;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A7FC0;
	__asm        jmp    near ptr 0x004A4439;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A4497;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004A4497;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A4481;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4492;
	__asm        jmp    near ptr 0x004A4497;
	__asm        jmp    near ptr 0x004A449C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A44CA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A44CF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a44d4
int  GraphicWindow::Initialize() {
// LINE 560:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A44EA;
// LINE 562:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a44ef
class GraphicWindow &  GraphicWindow::operator=(const class GraphicWindow& copyGraphicWindow) {
// LINE 604:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 605:
	__asm        mov    eax, copyGraphicWindow;
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x004A450F;
// LINE 606:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004A4A99;
// LINE 608:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 609:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 610:
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004A4738;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A7EC0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004A458A;
	__asm        jmp    near ptr 0x004A458F;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A7F00;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004A45B2;
	__asm        jmp    near ptr 0x004A45B7;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    [ebp-0x30], eax;
	__asm        jne    near ptr 0x004A45CD;
	__asm        jmp    near ptr 0x004A45E1;
	__asm        jmp    near ptr 0x004A45CD;
	__asm        jmp    near ptr 0x004A45DC;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x004A45E1;
	__asm        jmp    near ptr 0x004A45E6;
	__asm        jmp    near ptr 0x004A4687;
	__asm        jmp    near ptr 0x004A45F5;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004A4687;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    near ptr 0x004A460B;
	__asm        jmp    near ptr 0x004A461F;
	__asm        jmp    near ptr 0x004A460B;
	__asm        jmp    near ptr 0x004A461A;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    near ptr 0x004A461F;
	__asm        jmp    near ptr 0x004A4624;
	__asm        jmp    near ptr 0x004A4687;
	__asm        jmp    near ptr 0x004A4633;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x004A4687;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x2C];
	__asm        call   0x004A7E20;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004A4654;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004A4667;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004A4672;
	__asm        jmp    near ptr 0x004A4677;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A45B7;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    near ptr 0x004A4698;
	__asm        jmp    near ptr 0x004A469D;
	__asm        jmp    near ptr 0x004A4721;
	__asm        jmp    near ptr 0x004A46AC;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004A4721;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    [ebp-0x58], eax;
	__asm        jne    near ptr 0x004A46CE;
	__asm        jmp    near ptr 0x004A46E2;
	__asm        jmp    near ptr 0x004A46CE;
	__asm        jmp    near ptr 0x004A46DD;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    near ptr 0x004A46E2;
	__asm        jmp    near ptr 0x004A46E7;
	__asm        jmp    near ptr 0x004A4717;
	__asm        jmp    near ptr 0x004A46F6;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x004A4717;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   0x004A7E20;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A7E60;
	__asm        jmp    near ptr 0x004A46B8;
	__asm        jmp    near ptr 0x004A471C;
	__asm        jmp    near ptr 0x004A4738;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x004A8050;
	__asm        jmp    near ptr 0x004A473D;
// LINE 611:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 612:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
// LINE 613:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
// LINE 614:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
// LINE 615:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
// LINE 616:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 617:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
// LINE 618:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
// LINE 619:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 620:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x70], eax;
// LINE 621:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 622:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x64;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004A48B0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A4830;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004A4830;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A481A;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A482B;
	__asm        jmp    near ptr 0x004A4830;
	__asm        jmp    near ptr 0x004A4835;
	__asm        jmp    near ptr 0x004A483A;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4864;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004A48B0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A48A6;
	__asm        jmp    near ptr 0x004A4880;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A48B0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        jmp    near ptr 0x004A48B5;
// LINE 623:
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x5C;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004A499E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A491E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A491E;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A4908;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4919;
	__asm        jmp    near ptr 0x004A491E;
	__asm        jmp    near ptr 0x004A4923;
	__asm        jmp    near ptr 0x004A4928;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4952;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004A499E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004A4994;
	__asm        jmp    near ptr 0x004A496E;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004A499E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        jmp    near ptr 0x004A49A3;
// LINE 624:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004A4A8C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A4A0C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A4A0C;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A49F6;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4A07;
	__asm        jmp    near ptr 0x004A4A0C;
	__asm        jmp    near ptr 0x004A4A11;
	__asm        jmp    near ptr 0x004A4A16;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4A40;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004A4A8C;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A4A82;
	__asm        jmp    near ptr 0x004A4A5C;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A4A8C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x004A4A91;
// LINE 625:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004A4A99;
// LINE 626:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a4aa0
int  GraphicWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 641:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 642:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    near ptr 0x004A4ACE;
	__asm        jmp    near ptr 0x004A4ABE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004A4AD8;
// LINE 643:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A4CA4;
// LINE 645:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB4];
// LINE 646:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A4C1D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004A4B28;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4B2D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A4B4B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A4BC4;
	__asm        jmp    near ptr 0x004A4B60;
	__asm        jmp    near ptr 0x004A4B65;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A4B8A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A4B96;
	__asm        jmp    near ptr 0x004A4B96;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x004A4B96;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A4BC4;
	__asm        jmp    near ptr 0x004A4BC9;
	__asm        mov    byte ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x004A4BD2;
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A4BDD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A4BFE;
	__asm        jmp    near ptr 0x004A4C03;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x004A4C27;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 647:
	__asm        cmp    bResizeWindowToFitImage, 0;
	__asm        je     near ptr 0x004A4C99;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x004A4C99;
// LINE 648:
	__asm        jmp    near ptr 0x004A4C43;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 649:
	__asm        jmp    near ptr 0x004A4C5D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 650:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4C99;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 653:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x004A4CA4;
// LINE 654:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a4cab
void  GraphicWindow::DestroyImage() {
// LINE 663:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 664:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x004A4D12;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     near ptr 0x004A4D12;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A4D08;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A4D03;
	__asm        jmp    near ptr 0x004A4D08;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 668:
	__asm        jmp    near ptr 0x004A4D17;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a4d1c
void  GraphicWindow::SetTransparentColor(int32_t nPaletteIndex) {
// LINE 676:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 677:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4D5D;
// LINE 679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 680:
	__asm        jmp    near ptr 0x004A4D72;
// LINE 681:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 682:
	__asm        jmp    near ptr 0x004A4D77;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a4d7e
void  GraphicWindow::MoveWindow(int32_t nXPosition, int32_t nYPosition) {
// LINE 690:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 691:
	__asm        mov    eax, nXPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, nYPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x10], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x18], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x1C], eax;
	__asm        jmp    near ptr 0x004A4DCB;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 693:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 694:
	__asm        jmp    near ptr 0x004A4DEA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a4df1
void  GraphicWindow::SetWidthAndHeight(int32_t nNewWidth, int32_t nNewHeight) {
// LINE 701:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 702:
	__asm        cmp    nNewWidth, 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4E16;
// LINE 703:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, nNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 704:
	__asm        cmp    nNewHeight, 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4E2F;
// LINE 705:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    eax, nNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 706:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 707:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 708:
	__asm        jmp    near ptr 0x004A4E4E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a4e55
void  GraphicWindow::CenterWindow(class GraphicWindow* windowToCenterOn) {
// LINE 714:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 716:
	__asm        jmp    near ptr 0x004A4E66;
	__asm        jmp    near ptr 0x004A4E6B;
	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 717:
	__asm        jmp    near ptr 0x004A4EA1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a4ea8
void  GraphicWindow::CenterWindow(int32_t nXPosition, int32_t nYPosition) {
	int32_t nNewXPosition;
	int32_t nNewYPosition;

// LINE 729:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 733:
	__asm        cmp    nXPosition, 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4F02;
// LINE 734:
	__asm        jmp    near ptr 0x004A4EC3;
	__asm        mov    ecx, nXPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewXPosition, ecx;
// LINE 735:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewXPosition;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x004A4F02;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, nNewXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 738:
	__asm        cmp    nYPosition, 0xFFFFFFFF;
	__asm        je     near ptr 0x004A4F50;
// LINE 739:
	__asm        jmp    near ptr 0x004A4F11;
	__asm        mov    ecx, nYPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewYPosition, ecx;
// LINE 740:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewYPosition;
	__asm        cmp    [eax+0x14], ecx;
	__asm        je     near ptr 0x004A4F50;
// LINE 741:
	__asm        mov    eax, nNewYPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 743:
	__asm        jmp    near ptr 0x004A4F55;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a4f5c
int  GraphicWindow::FitRectToWindow(class MRect& rectToFit) {
	class MRect rectTempCurrentWindow;

// LINE 755:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 756:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectTempCurrentWindow.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 759:
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    [ebp-0x18], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.left, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.right, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.top, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.bottom, eax;
	__asm        jmp    near ptr 0x004A4FB4;
// LINE 760:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.left;
	__asm        cmp    [eax], ecx;
	__asm        jge    near ptr 0x004A4FE3;
// LINE 761:
	__asm        mov    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx], eax;
// LINE 762:
	__asm        mov    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+8], eax;
// LINE 764:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.top;
	__asm        cmp    [eax+4], ecx;
	__asm        jge    near ptr 0x004A5016;
// LINE 765:
	__asm        mov    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+4];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+4], eax;
// LINE 766:
	__asm        mov    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+4];
	__asm        add    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+0xC], eax;
// LINE 768:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.right;
	__asm        cmp    [eax+8], ecx;
	__asm        jle    near ptr 0x004A5048;
// LINE 769:
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+8];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx], eax;
// LINE 770:
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+8];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+8], eax;
// LINE 772:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.bottom;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    near ptr 0x004A507B;
// LINE 773:
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+0xC];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+4], eax;
// LINE 774:
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        mov    ecx, rectToFit;
	__asm        sub    eax, [ecx+0xC];
	__asm        sub    eax, 5;
	__asm        mov    ecx, rectToFit;
	__asm        add    [ecx+0xC], eax;
// LINE 777:
	__asm        jmp    near ptr 0x004A5080;
	__asm        jmp    near ptr 0x004A5085;
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x004A50D2;
	__asm        jmp    near ptr 0x004A50A6;
	__asm        jmp    near ptr 0x004A50AB;
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx+4];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x004A50D2;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A50D4;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A50D9;
// LINE 778:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a50e0
void  GraphicWindow::SetChanged(int32_t bChanged, int32_t bRecursive) {
// LINE 786:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 787:
	__asm        mov    eax, bChanged;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
// LINE 788:
	__asm        cmp    bRecursive, 0;
	__asm        je     near ptr 0x004A51C4;
// LINE 789:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x004A51C4;
// LINE 790:
// Block start:
	class list<GraphicWindow *>::iterator i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5122;
	__asm        jmp    near ptr 0x004A5127;
// LINE 791:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A513B;
	__asm        jmp    near ptr 0x004A5140;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A5156;
	__asm        jmp    near ptr 0x004A516A;
	__asm        jmp    near ptr 0x004A5156;
	__asm        jmp    near ptr 0x004A5165;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A516A;
	__asm        jmp    near ptr 0x004A516F;
	__asm        jmp    near ptr 0x004A51C4;
	__asm        jmp    near ptr 0x004A517E;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A51C4;
// LINE 792:
	__asm        jmp    near ptr 0x004A5183;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x30];
// LINE 793:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A51B4;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A51BF;
// LINE 794:
	__asm        jmp    near ptr 0x004A5127;
// LINE 797:
// Block end:
	__asm        jmp    near ptr 0x004A51C9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a51d0
void  GraphicWindow::SetWindowTitle(class basic_string<char>& sNewWindowTitle) {
// LINE 808:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 809:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     near ptr 0x004A539E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A5277;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004A5277;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A5257;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004A525C;
	__asm        jmp    near ptr 0x004A5261;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5272;
	__asm        jmp    near ptr 0x004A5277;
	__asm        jmp    near ptr 0x004A527C;
	__asm        jmp    near ptr 0x004A5281;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004A52AB;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004A539E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A5394;
	__asm        jmp    near ptr 0x004A52C7;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A536E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A530E;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A5333;
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A533F;
	__asm        jmp    near ptr 0x004A533F;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004A533F;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A5369;
	__asm        jmp    near ptr 0x004A5377;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A5386;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004A539E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x004A53A3;
// LINE 810:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 811:
	__asm        jmp    near ptr 0x004A53B7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a53be
int  GraphicWindow::AddChild(class GraphicWindow* windowNewChild) {
// LINE 817:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x6C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A53DE;
	__asm        jmp    near ptr 0x004A53E3;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A5415;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A55F2;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A55DD;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004A5474;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A546A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5479;
	__asm        jmp    near ptr 0x004A547E;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A54B9;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A54BF;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A54C4;
	__asm        jmp    near ptr 0x004A54C9;
	__asm        jmp    near ptr 0x004A54CE;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x004A552C;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5522;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A5531;
	__asm        jmp    near ptr 0x004A5536;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A5593;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A5599;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A559E;
	__asm        jmp    near ptr 0x004A55A3;
	__asm        jmp    near ptr 0x004A55A8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A55C3;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A55F2;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x20], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A55F7;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5602;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A5610;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A5627;
	__asm        mov    eax, windowNewChild;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A5627;
	__asm        jmp    near ptr 0x004A562C;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x34];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5665;
	__asm        jmp    near ptr 0x004A566A;
	__asm        jmp    near ptr 0x004A566F;
// LINE 819:
	__asm        mov    eax, windowNewChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowNewChild;
	__asm        call   dword ptr [eax+0x1C];
// LINE 820:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 821:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A5693;
// LINE 822:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a569a
int  GraphicWindow::DeleteChild(class GraphicWindow* windowChild) {
	int32_t nReturnValue;
	class list<GraphicWindow *>::iterator i;

// LINE 830:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 831:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A56BC;
	__asm        jmp    near ptr 0x004A56C1;
// LINE 832:
	__asm        mov    nReturnValue, 0;
// LINE 835:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A56DC;
	__asm        jmp    near ptr 0x004A56E1;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004A56F7;
	__asm        jmp    near ptr 0x004A570B;
	__asm        jmp    near ptr 0x004A56F7;
	__asm        jmp    near ptr 0x004A5706;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x004A570B;
	__asm        jmp    near ptr 0x004A5710;
	__asm        jmp    near ptr 0x004A5828;
	__asm        jmp    near ptr 0x004A571F;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A5828;
// LINE 836:
	__asm        jmp    near ptr 0x004A5724;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowChild;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A5805;
// LINE 840:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5746;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5751;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5777;
	__asm        jmp    near ptr 0x004A577C;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A5793;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A579E;
// LINE 841:
	__asm        mov    eax, windowChild;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A57E5;
// LINE 842:
	__asm        mov    eax, windowChild;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A57E5;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    near ptr 0x004A57E5;
// LINE 843:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 844:
	__asm        mov    nReturnValue, 1;
// LINE 845:
	__asm        jmp    near ptr 0x004A5828;
// LINE 847:
	__asm        jmp    near ptr 0x004A5823;
// LINE 848:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5818;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A5823;
// LINE 849:
	__asm        jmp    near ptr 0x004A56C8;
// LINE 852:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A5830;
// LINE 853:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a5837
class GraphicWindow *  GraphicWindow::DeleteChild(long lChildID) {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* windowFound;

// LINE 861:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5859;
	__asm        jmp    near ptr 0x004A585E;
// LINE 863:
	__asm        mov    windowFound, 0;
// LINE 865:
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x30];
// LINE 866:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5889;
	__asm        jmp    near ptr 0x004A588E;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A58A4;
	__asm        jmp    near ptr 0x004A58B8;
	__asm        jmp    near ptr 0x004A58A4;
	__asm        jmp    near ptr 0x004A58B3;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x004A58B8;
	__asm        jmp    near ptr 0x004A58BD;
	__asm        jmp    near ptr 0x004A59DF;
	__asm        jmp    near ptr 0x004A58CC;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A59DF;
// LINE 867:
	__asm        jmp    near ptr 0x004A58D1;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lChildID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004A59BC;
// LINE 871:
	__asm        jmp    near ptr 0x004A58E8;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowFound, eax;
// LINE 872:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5904;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A590F;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5935;
	__asm        jmp    near ptr 0x004A593A;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A5951;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A595C;
// LINE 873:
	__asm        mov    eax, windowFound;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A59A3;
// LINE 874:
	__asm        mov    eax, windowFound;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A59A3;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    near ptr 0x004A59A3;
// LINE 875:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 876:
	__asm        jmp    near ptr 0x004A59DF;
// LINE 878:
	__asm        jmp    near ptr 0x004A59DA;
// LINE 879:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A59CF;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A59DA;
// LINE 880:
	__asm        jmp    near ptr 0x004A5875;
// LINE 881:
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x004A5A02;
// LINE 882:
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   0x004A1FF2;
// LINE 883:
	__asm        mov    eax, windowFound;
	__asm        jmp    near ptr 0x004A5A0A;
// LINE 884:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a5a11
int  GraphicWindow::RemoveChild(class GraphicWindow* windowNewChild) {
	int32_t nReturnValue;
	class list<GraphicWindow *>::iterator i;

// LINE 892:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5A33;
	__asm        jmp    near ptr 0x004A5A38;
// LINE 894:
	__asm        mov    nReturnValue, 0;
// LINE 896:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5A53;
	__asm        jmp    near ptr 0x004A5A58;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004A5A6E;
	__asm        jmp    near ptr 0x004A5A82;
	__asm        jmp    near ptr 0x004A5A6E;
	__asm        jmp    near ptr 0x004A5A7D;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004A5A82;
	__asm        jmp    near ptr 0x004A5A87;
	__asm        jmp    near ptr 0x004A5B49;
	__asm        jmp    near ptr 0x004A5A96;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A5B49;
// LINE 897:
	__asm        jmp    near ptr 0x004A5A9B;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowNewChild;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A5B26;
// LINE 898:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5ABD;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5AC8;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5AEE;
	__asm        jmp    near ptr 0x004A5AF3;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A5B0A;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A5B15;
// LINE 899:
	__asm        mov    nReturnValue, 1;
// LINE 900:
	__asm        jmp    near ptr 0x004A5B49;
// LINE 902:
	__asm        jmp    near ptr 0x004A5B44;
// LINE 903:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5B39;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A5B44;
// LINE 904:
	__asm        jmp    near ptr 0x004A5A3F;
// LINE 905:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A5B51;
// LINE 906:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a5b58
void  GraphicWindow::DeleteAllChildren() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* windowToDelete;

// LINE 913:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 914:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5B7A;
	__asm        jmp    near ptr 0x004A5B7F;
// LINE 917:
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x30];
// LINE 918:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5BA3;
	__asm        jmp    near ptr 0x004A5BA8;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004A5BBE;
	__asm        jmp    near ptr 0x004A5BD2;
	__asm        jmp    near ptr 0x004A5BBE;
	__asm        jmp    near ptr 0x004A5BCD;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x004A5BD2;
	__asm        jmp    near ptr 0x004A5BD7;
	__asm        jmp    near ptr 0x004A5CAB;
	__asm        jmp    near ptr 0x004A5BE6;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A5CAB;
// LINE 922:
	__asm        jmp    near ptr 0x004A5BEB;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowToDelete, eax;
// LINE 923:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5C07;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A5C12;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5C38;
	__asm        jmp    near ptr 0x004A5C3D;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A5C54;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x004A5C5F;
// LINE 924:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A5CA6;
// LINE 925:
	__asm        mov    eax, windowToDelete;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A5CA6;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    near ptr 0x004A5CA6;
// LINE 926:
	__asm        jmp    near ptr 0x004A5B8F;
// LINE 927:
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x004A5CCE;
// LINE 928:
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   0x004A1FF2;
// LINE 929:
	__asm        jmp    near ptr 0x004A5CD3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a5cd8
void  GraphicWindow::RemoveAllChildren() {
	class list<GraphicWindow *>::iterator i;

// LINE 935:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5CFA;
	__asm        jmp    near ptr 0x004A5CFF;
// LINE 938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5D13;
	__asm        jmp    near ptr 0x004A5D18;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A5D2E;
	__asm        jmp    near ptr 0x004A5D42;
	__asm        jmp    near ptr 0x004A5D2E;
	__asm        jmp    near ptr 0x004A5D3D;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004A5D42;
	__asm        jmp    near ptr 0x004A5D47;
	__asm        jmp    near ptr 0x004A5DC7;
	__asm        jmp    near ptr 0x004A5D56;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A5DC7;
// LINE 939:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5D69;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5D74;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A5D9A;
	__asm        jmp    near ptr 0x004A5D9F;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A5DB6;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x34], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A5DC2;
	__asm        jmp    near ptr 0x004A5CFF;
// LINE 940:
	__asm        jmp    near ptr 0x004A5DCC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a5dd1
class GraphicWindow *  GraphicWindow::FindChild(long lChildID) {
	class list<GraphicWindow *>::iterator i;

// LINE 950:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 951:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5DF3;
	__asm        jmp    near ptr 0x004A5DF8;
// LINE 953:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5E0C;
	__asm        jmp    near ptr 0x004A5E11;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A5E27;
	__asm        jmp    near ptr 0x004A5E3B;
	__asm        jmp    near ptr 0x004A5E27;
	__asm        jmp    near ptr 0x004A5E36;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004A5E3B;
	__asm        jmp    near ptr 0x004A5E40;
	__asm        jmp    near ptr 0x004A5E99;
	__asm        jmp    near ptr 0x004A5E4F;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004A5E99;
// LINE 954:
	__asm        jmp    near ptr 0x004A5E54;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lChildID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004A5E76;
// LINE 955:
	__asm        jmp    near ptr 0x004A5E6B;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x004A5EA0;
// LINE 956:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5E89;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5E94;
// LINE 957:
	__asm        jmp    near ptr 0x004A5DF8;
// LINE 958:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A5EA0;
// LINE 959:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a5ea7
class GraphicWindow *  GraphicWindow::FindWindowA(long lID) {
	class list<GraphicWindow *>::iterator i;

// LINE 968:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 969:
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5EC5;
	__asm        jmp    near ptr 0x004A5ECA;
// LINE 971:
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5EDD;
	__asm        jmp    near ptr 0x004A5EE2;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A5EF8;
	__asm        jmp    near ptr 0x004A5F0C;
	__asm        jmp    near ptr 0x004A5EF8;
	__asm        jmp    near ptr 0x004A5F07;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004A5F0C;
	__asm        jmp    near ptr 0x004A5F11;
	__asm        jmp    near ptr 0x004A5F6A;
	__asm        jmp    near ptr 0x004A5F20;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004A5F6A;
// LINE 972:
	__asm        jmp    near ptr 0x004A5F25;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, lID;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004A5F47;
// LINE 973:
	__asm        jmp    near ptr 0x004A5F3C;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x004A5F71;
// LINE 974:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5F5A;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A5F65;
// LINE 975:
	__asm        jmp    near ptr 0x004A5ECA;
// LINE 976:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A5F71;
// LINE 977:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a5f76
int  GraphicWindow::FindWindowA(class GraphicWindow* windowToFind) {
	class list<GraphicWindow *>::iterator i;

// LINE 983:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 984:
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A5F94;
	__asm        jmp    near ptr 0x004A5F99;
// LINE 986:
	__asm        mov    eax, ds:[0x6069A0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A5FAC;
	__asm        jmp    near ptr 0x004A5FB1;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A5FC7;
	__asm        jmp    near ptr 0x004A5FDB;
	__asm        jmp    near ptr 0x004A5FC7;
	__asm        jmp    near ptr 0x004A5FD6;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004A5FDB;
	__asm        jmp    near ptr 0x004A5FE0;
	__asm        jmp    near ptr 0x004A6030;
	__asm        jmp    near ptr 0x004A5FEF;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004A6030;
// LINE 987:
	__asm        jmp    near ptr 0x004A5FF4;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowToFind;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A600D;
// LINE 988:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6037;
// LINE 989:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6020;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A602B;
// LINE 990:
	__asm        jmp    near ptr 0x004A5F99;
// LINE 991:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6037;
// LINE 992:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a603c
int  GraphicWindow::DeleteSelf() {
// LINE 999:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1000:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A964];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x59A964];
	__asm        call   dword ptr [eax+4];
// LINE 1001:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6066;
// LINE 1002:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a606b
void  GraphicWindow::RemoveSelf() {
// LINE 1010:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1011:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x004A6099;
// LINE 1012:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x60];
// LINE 1013:
	__asm        jmp    near ptr 0x004A609E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a60a3
int  GraphicWindow::ComposeSelf() {
// LINE 1027:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1028:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004A60C3;
// LINE 1029:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6163;
// LINE 1032:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A6104;
// LINE 1033:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1034:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xBC];
// LINE 1035:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 1037:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x004A6159;
// LINE 1039:
	__asm        jmp    near ptr 0x004A6116;
	__asm        jmp    near ptr 0x004A611B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1041:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6163;
// LINE 1042:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6168
int  GraphicWindow::DrawSelf() {
// LINE 1059:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1060:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A617B;
// LINE 1061:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6180
void  GraphicWindow::DrawChildren() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* gwCurrentChild;

// LINE 1075:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1078:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004A619E;
// LINE 1079:
	__asm        jmp    near ptr 0x004A6251;
// LINE 1081:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A61B4;
	__asm        jmp    near ptr 0x004A61B9;
// LINE 1082:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A61CD;
	__asm        jmp    near ptr 0x004A61D2;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A61E8;
	__asm        jmp    near ptr 0x004A61FC;
	__asm        jmp    near ptr 0x004A61E8;
	__asm        jmp    near ptr 0x004A61F7;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004A61FC;
	__asm        jmp    near ptr 0x004A6201;
	__asm        jmp    near ptr 0x004A624C;
	__asm        jmp    near ptr 0x004A6210;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A624C;
// LINE 1088:
	__asm        jmp    near ptr 0x004A6215;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    gwCurrentChild, eax;
// LINE 1089:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6231;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A623C;
// LINE 1090:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentChild;
	__asm        call   dword ptr [eax+0x18];
// LINE 1091:
	__asm        jmp    near ptr 0x004A61B9;
// LINE 1092:
	__asm        jmp    near ptr 0x004A6251;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6256
void  GraphicWindow::InvalidateAllOverlaps(class list<GraphicWindow *>::iterator windowChildListItem) {
	class GraphicWindow* windowNextChild;
	class GraphicWindow* windowCurrentChild;

// LINE 1115:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1117:
	__asm        jmp    near ptr 0x004A6267;
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowCurrentChild, eax;
// LINE 1119:
	__asm        add    windowNextChild, 0x74;
// LINE 1120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6288;
	__asm        jmp    near ptr 0x004A628D;
	__asm        mov    eax, windowChildListItem.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    near ptr 0x004A62A3;
	__asm        jmp    near ptr 0x004A62B7;
	__asm        jmp    near ptr 0x004A62A3;
	__asm        jmp    near ptr 0x004A62B2;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004A62B7;
	__asm        jmp    near ptr 0x004A62BC;
	__asm        jmp    near ptr 0x004A638D;
	__asm        jmp    near ptr 0x004A62CB;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A638D;
// LINE 1121:
	__asm        jmp    near ptr 0x004A62D0;
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    windowNextChild, eax;
// LINE 1122:
	__asm        mov    eax, windowNextChild;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    near ptr 0x004A636A;
// LINE 1123:
	__asm        jmp    near ptr 0x004A62EB;
	__asm        mov    eax, windowNextChild;
	__asm        mov    ecx, windowCurrentChild;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jl     near ptr 0x004A6338;
	__asm        mov    eax, windowCurrentChild;
	__asm        mov    ecx, windowNextChild;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jl     near ptr 0x004A6338;
	__asm        mov    eax, windowCurrentChild;
	__asm        mov    ecx, windowNextChild;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     near ptr 0x004A6338;
	__asm        mov    eax, windowNextChild;
	__asm        mov    ecx, windowCurrentChild;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jl     near ptr 0x004A6338;
	__asm        jmp    near ptr 0x004A633D;
	__asm        jmp    near ptr 0x004A636A;
	__asm        jmp    near ptr 0x004A634C;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004A636A;
// LINE 1124:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, windowNextChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowNextChild;
	__asm        call   dword ptr [eax+0x30];
// LINE 1125:
	__asm        mov    eax, windowChildListItem.node;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
// LINE 1128:
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, windowChildListItem.node;
	__asm        mov    eax, [eax];
	__asm        mov    windowChildListItem.node, eax;
	__asm        jmp    near ptr 0x004A637D;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A6388;
// LINE 1129:
	__asm        jmp    near ptr 0x004A6274;
// LINE 1130:
	__asm        jmp    near ptr 0x004A6392;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a6399
void  GraphicWindow::InvalidateAllChildren(int32_t bRecursive) {
	class list<GraphicWindow *>::iterator i;

// LINE 1136:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A63BB;
	__asm        jmp    near ptr 0x004A63C0;
// LINE 1138:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A63D4;
	__asm        jmp    near ptr 0x004A63D9;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A63EF;
	__asm        jmp    near ptr 0x004A6403;
	__asm        jmp    near ptr 0x004A63EF;
	__asm        jmp    near ptr 0x004A63FE;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A6403;
	__asm        jmp    near ptr 0x004A6408;
	__asm        jmp    near ptr 0x004A645F;
	__asm        jmp    near ptr 0x004A6417;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A645F;
// LINE 1139:
	__asm        jmp    near ptr 0x004A641C;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, bRecursive;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x30];
// LINE 1140:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A644F;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A645A;
// LINE 1141:
	__asm        jmp    near ptr 0x004A63C0;
// LINE 1142:
	__asm        jmp    near ptr 0x004A6464;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a646b
int  GraphicWindow::DoesWindowNeedUpdating() {
	class list<GraphicWindow *>::iterator i;

// LINE 1161:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1163:
	__asm        jmp    near ptr 0x004A647C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x004A6493;
// LINE 1164:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6563;
// LINE 1168:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A64A9;
	__asm        jmp    near ptr 0x004A64AE;
// LINE 1169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A64C2;
	__asm        jmp    near ptr 0x004A64C7;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A64DD;
	__asm        jmp    near ptr 0x004A64F1;
	__asm        jmp    near ptr 0x004A64DD;
	__asm        jmp    near ptr 0x004A64EC;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A64F1;
	__asm        jmp    near ptr 0x004A64F6;
	__asm        jmp    near ptr 0x004A655C;
	__asm        jmp    near ptr 0x004A6505;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A655C;
// LINE 1170:
	__asm        jmp    near ptr 0x004A650A;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004A6539;
// LINE 1171:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6563;
// LINE 1172:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A654C;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6557;
// LINE 1173:
	__asm        jmp    near ptr 0x004A64AE;
// LINE 1174:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6563;
// LINE 1175:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6568
long  GraphicWindow::DoCharacter(long lCharacter) {
// LINE 1186:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1187:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A657B;
// LINE 1188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a6582
long  GraphicWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1199:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1200:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6595;
// LINE 1201:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a659c
long  GraphicWindow::DoKeyUp(long lKey, char chModifiers) {
// LINE 1213:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1214:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A65AF;
// LINE 1215:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a65b6
long  GraphicWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1230:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1231:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A65C9;
// LINE 1232:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004a65d0
long  GraphicWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1243:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1244:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A65E6;
// LINE 1245:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004a65ed
long  GraphicWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1256:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1257:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6600;
// LINE 1258:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a6607
int  GraphicWindow::CaptureCursorStart(class GraphicWindow* windowCapture) {
// LINE 1269:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1270:
	__asm        cmp    dword ptr ds:[0x59A960], 0;
	__asm        je     near ptr 0x004A6627;
// LINE 1271:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6639;
// LINE 1272:
	__asm        mov    eax, windowCapture;
	__asm        mov    ds:[0x59A960], eax;
// LINE 1273:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6639;
// LINE 1274:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a6640
int  GraphicWindow::CaptureCursorEnd(class GraphicWindow* windowCapture) {
// LINE 1281:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1282:
	__asm        mov    eax, windowCapture;
	__asm        cmp    ds:[0x59A960], eax;
	__asm        je     near ptr 0x004A6662;
// LINE 1283:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6676;
// LINE 1284:
	__asm        mov    dword ptr ds:[0x59A960], 0;
// LINE 1285:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6676;
// LINE 1286:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a667d
void  GraphicWindow::WindowToScreenCoordinates(long& nXPosition, long& nYPosition) {
	class GraphicWindow* currentWindow;

// LINE 1298:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1299:
	__asm        mov    eax, this;
	__asm        mov    currentWindow, eax;
// LINE 1301:
	__asm        mov    eax, currentWindow;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x004A66C0;
// LINE 1302:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, nXPosition;
	__asm        add    [ecx], eax;
// LINE 1303:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nYPosition;
	__asm        add    [ecx], eax;
// LINE 1304:
	__asm        mov    eax, currentWindow;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    currentWindow, eax;
// LINE 1305:
	__asm        jmp    near ptr 0x004A668F;
// LINE 1307:
	__asm        jmp    near ptr 0x004A66C5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a66cc
void  GraphicWindow::ScreenToWindowCoordinates(long& nXPosition, long& nYPosition) {
	long nYFactor;
	long nXFactor;

// LINE 1319:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1320:
	__asm        mov    nXFactor, 0;
// LINE 1321:
	__asm        mov    nYFactor, 0;
// LINE 1324:
	__asm        lea    eax, nYFactor;
	__asm        push   eax;
	__asm        lea    eax, nXFactor;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1325:
	__asm        xor    eax, eax;
	__asm        sub    eax, nXFactor;
	__asm        neg    eax;
	__asm        mov    ecx, nXPosition;
	__asm        sub    [ecx], eax;
// LINE 1326:
	__asm        xor    eax, eax;
	__asm        sub    eax, nYFactor;
	__asm        neg    eax;
	__asm        mov    ecx, nYPosition;
	__asm        sub    [ecx], eax;
// LINE 1327:
	__asm        jmp    near ptr 0x004A6719;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004a6720
class CBackBuffer *  GraphicWindow::GetImage() {
// LINE 1340:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x004A6737;
// LINE 1342:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a673c
void  GraphicWindow::GetImagePath() {
	char szFullImagePath[261];

// LINE 1353:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x15C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004A6788;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A678D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    near ptr 0x004A67B1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A684E;
	__asm        jmp    near ptr 0x004A67C9;
	__asm        jmp    near ptr 0x004A67CE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A67FC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        jmp    near ptr 0x004A680B;
	__asm        jmp    near ptr 0x004A680B;
	__asm        mov    dword ptr [ebp-0x150], 0;
	__asm        jmp    near ptr 0x004A680B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A684E;
	__asm        jmp    near ptr 0x004A6853;
	__asm        mov    byte ptr [ebp-0x140], 0;
	__asm        jmp    near ptr 0x004A685F;
	__asm        lea    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004A6870;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x5C];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A68A0;
	__asm        jmp    near ptr 0x004A68A5;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 1357:
	__asm        jmp    near ptr 0x004A68C7;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A6921;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A6912;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A6921;
	__asm        jmp    near ptr 0x004A6926;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004A6963;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x004A6B62;
	__asm        jmp    near ptr 0x004A694B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, [ebp-0x138];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004A6B62;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     near ptr 0x004A6A83;
	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A69C5;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A69B6;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A69C5;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A6A54;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A6A4F;
	__asm        jmp    near ptr 0x004A6A60;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A6A72;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    near ptr 0x004A6A8D;
	__asm        mov    dword ptr [ebp-0x10C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A6B49;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x004A6B49;
	__asm        mov    eax, [ebp-0x11C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A6B26;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004A6B2B;
	__asm        jmp    near ptr 0x004A6B30;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A6B44;
	__asm        jmp    near ptr 0x004A6B49;
	__asm        jmp    near ptr 0x004A6B4E;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004A6BA7;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x004A6BA7;
	__asm        jmp    near ptr 0x004A6B74;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A6BA7;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A6BBE;
	__asm        jmp    near ptr 0x004A6BC3;
// LINE 1358:
	__asm        jmp    near ptr 0x004A6BC8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6bcd
int  GraphicWindow::SetImageToDrawOnto() {
	class MRect rectNewPosition;
	class GraphicWindow* gwCurrentParent;
	class CBackBuffer* imageCurrentParent;

// LINE 1366:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        lea    ecx, rectNewPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1368:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentParent, eax;
// LINE 1371:
	__asm        cmp    gwCurrentParent, 0;
	__asm        je     near ptr 0x004A6CE4;
// LINE 1372:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentParent;
	__asm        call   dword ptr [eax+0xB0];
	__asm        mov    imageCurrentParent, eax;
// LINE 1373:
	__asm        cmp    imageCurrentParent, 0;
	__asm        je     near ptr 0x004A6C80;
// LINE 1374:
	__asm        mov    eax, imageCurrentParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
// LINE 1375:
	__asm        lea    eax, rectNewPosition.left;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1376:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A6CEB;
// LINE 1381:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004A6C97;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004A6CA8;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    [ebp-0x30], ecx;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    rectNewPosition.left, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        add    rectNewPosition.right, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    rectNewPosition.top, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    rectNewPosition.bottom, eax;
	__asm        jmp    near ptr 0x004A6CD1;
	__asm        jmp    near ptr 0x004A6CD6;
// LINE 1382:
	__asm        mov    eax, gwCurrentParent;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentParent, eax;
// LINE 1383:
	__asm        jmp    near ptr 0x004A6C29;
// LINE 1384:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A6CEB;
// LINE 1385:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6cf0
void  GraphicWindow::SetAllImagesToDrawOnto() {
	class list<GraphicWindow *>::iterator i;

// LINE 1402:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1403:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1405:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6D1D;
	__asm        jmp    near ptr 0x004A6D22;
// LINE 1406:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6D36;
	__asm        jmp    near ptr 0x004A6D3B;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A6D51;
	__asm        jmp    near ptr 0x004A6D65;
	__asm        jmp    near ptr 0x004A6D51;
	__asm        jmp    near ptr 0x004A6D60;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A6D65;
	__asm        jmp    near ptr 0x004A6D6A;
	__asm        jmp    near ptr 0x004A6DBB;
	__asm        jmp    near ptr 0x004A6D79;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A6DBB;
// LINE 1407:
	__asm        jmp    near ptr 0x004A6D7E;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0x20];
// LINE 1408:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6DAB;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6DB6;
// LINE 1409:
	__asm        jmp    near ptr 0x004A6D22;
// LINE 1410:
	__asm        jmp    near ptr 0x004A6DC0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6dc5
void  GraphicWindow::CreateAllImages() {
	class list<GraphicWindow *>::iterator i;

// LINE 1421:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1422:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1425:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6DFF;
	__asm        jmp    near ptr 0x004A6E04;
// LINE 1426:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6E18;
	__asm        jmp    near ptr 0x004A6E1D;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A6E33;
	__asm        jmp    near ptr 0x004A6E47;
	__asm        jmp    near ptr 0x004A6E33;
	__asm        jmp    near ptr 0x004A6E42;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A6E47;
	__asm        jmp    near ptr 0x004A6E4C;
	__asm        jmp    near ptr 0x004A6E9D;
	__asm        jmp    near ptr 0x004A6E5B;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A6E9D;
// LINE 1427:
	__asm        jmp    near ptr 0x004A6E60;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+8];
// LINE 1428:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6E8D;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6E98;
// LINE 1429:
	__asm        jmp    near ptr 0x004A6E04;
// LINE 1430:
	__asm        jmp    near ptr 0x004A6EA2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6ea7
void  GraphicWindow::DestroyAllImages() {
	class list<GraphicWindow *>::iterator i;

// LINE 1441:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1442:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6ED4;
	__asm        jmp    near ptr 0x004A6ED9;
// LINE 1445:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A6EED;
	__asm        jmp    near ptr 0x004A6EF2;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A6F08;
	__asm        jmp    near ptr 0x004A6F1C;
	__asm        jmp    near ptr 0x004A6F08;
	__asm        jmp    near ptr 0x004A6F17;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A6F1C;
	__asm        jmp    near ptr 0x004A6F21;
	__asm        jmp    near ptr 0x004A6F72;
	__asm        jmp    near ptr 0x004A6F30;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A6F72;
// LINE 1446:
	__asm        jmp    near ptr 0x004A6F35;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+0xC];
// LINE 1447:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A6F62;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A6F6D;
// LINE 1448:
	__asm        jmp    near ptr 0x004A6ED9;
// LINE 1449:
	__asm        jmp    near ptr 0x004A6F77;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a6f7c
void  GraphicWindow::DrawBorder(struct SparkalColor* colorBorder) {
// LINE 1455:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1456:
	__asm        cmp    colorBorder, 0;
	__asm        je     near ptr 0x004A6FAB;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, colorBorder;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x004A6FAB;
// LINE 1461:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1463:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1465:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1467:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1468:
	__asm        jmp    near ptr 0x004A706E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a7075
int  GraphicWindow::MakeModal(class GraphicWindow* windowModal) {
// LINE 1484:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x68;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1485:
	__asm        mov    eax, windowModal;
	__asm        push   eax;
	__asm        call   0x004A7340;
	__asm        add    esp, 4;
// LINE 1486:
	__asm        mov    eax, ds:[0x606990];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A709F;
	__asm        jmp    near ptr 0x004A70A4;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A70D6;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A72B3;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A729E;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004A7135;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A712B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A713A;
	__asm        jmp    near ptr 0x004A713F;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A717A;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A7180;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A7185;
	__asm        jmp    near ptr 0x004A718A;
	__asm        jmp    near ptr 0x004A718F;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x004A71ED;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A71E3;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A71F2;
	__asm        jmp    near ptr 0x004A71F7;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A7254;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A725A;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A725F;
	__asm        jmp    near ptr 0x004A7264;
	__asm        jmp    near ptr 0x004A7269;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A7284;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A72B3;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x20], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A72B8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A72C3;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A72D1;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A72E8;
	__asm        mov    eax, windowModal;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A72E8;
	__asm        jmp    near ptr 0x004A72ED;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    dword ptr ds:[0x606994], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7327;
	__asm        jmp    near ptr 0x004A732C;
	__asm        jmp    near ptr 0x004A7331;
// LINE 1487:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A733B;
// LINE 1488:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a7340
int  GraphicWindow::RemoveModal(class GraphicWindow* windowModal) {
	class list<GraphicWindow *>::iterator i;

// LINE 1499:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1500:
	__asm        mov    eax, ds:[0x606990];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A735E;
	__asm        jmp    near ptr 0x004A7363;
// LINE 1501:
	__asm        mov    eax, ds:[0x606990];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7376;
	__asm        jmp    near ptr 0x004A737B;
	__asm        mov    eax, i.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    near ptr 0x004A7391;
	__asm        jmp    near ptr 0x004A73A5;
	__asm        jmp    near ptr 0x004A7391;
	__asm        jmp    near ptr 0x004A73A0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A73A5;
	__asm        jmp    near ptr 0x004A73AA;
	__asm        jmp    near ptr 0x004A7461;
	__asm        jmp    near ptr 0x004A73B9;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A7461;
// LINE 1502:
	__asm        jmp    near ptr 0x004A73BE;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowModal;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A743E;
// LINE 1503:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A73E0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A73EB;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A7411;
	__asm        jmp    near ptr 0x004A7416;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A742D;
	__asm        add    dword ptr ds:[0x606994], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A7439;
// LINE 1504:
	__asm        jmp    near ptr 0x004A745C;
// LINE 1505:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7451;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A745C;
// LINE 1506:
	__asm        jmp    near ptr 0x004A7363;
// LINE 1507:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A746B;
// LINE 1508:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a7470
int  GraphicWindow::MakeFocus(class GraphicWindow* windowFocus) {
// LINE 1530:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x68;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1531:
	__asm        mov    eax, windowFocus;
	__asm        push   eax;
	__asm        call   0x004A773B;
	__asm        add    esp, 4;
// LINE 1532:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A749A;
	__asm        jmp    near ptr 0x004A749F;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr ds:[0x59A97C], 0;
	__asm        je     near ptr 0x004A74D1;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A76AE;
	__asm        mov    eax, ds:[0x59A978];
	__asm        cmp    ds:[0x59A974], eax;
	__asm        jne    near ptr 0x004A7699;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x004A7530;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A7526;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A7535;
	__asm        jmp    near ptr 0x004A753A;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A7575;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A757B;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A7580;
	__asm        jmp    near ptr 0x004A7585;
	__asm        jmp    near ptr 0x004A758A;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x004A75E8;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A75DE;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A75ED;
	__asm        jmp    near ptr 0x004A75F2;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x59A980], eax;
	__asm        mov    eax, ds:[0x59A980];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x59A978], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A764F;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A7655;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004A765A;
	__asm        jmp    near ptr 0x004A765F;
	__asm        jmp    near ptr 0x004A7664;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x59A978];
	__asm        mov    ds:[0x59A974], eax;
	__asm        jmp    near ptr 0x004A767F;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A76AE;
	__asm        mov    eax, ds:[0x59A978];
	__asm        mov    [ebp-0x20], eax;
	__asm        add    dword ptr ds:[0x59A978], 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004A76B3;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A76BE;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004A76CC;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004A76E3;
	__asm        mov    eax, windowFocus;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004A76E3;
	__asm        jmp    near ptr 0x004A76E8;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    dword ptr ds:[0x606964], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7722;
	__asm        jmp    near ptr 0x004A7727;
	__asm        jmp    near ptr 0x004A772C;
// LINE 1533:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7736;
// LINE 1534:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a773b
int  GraphicWindow::RemoveFocus(class GraphicWindow* windowFocus) {
	class list<GraphicWindow *>::iterator i;

// LINE 1544:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1545:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7759;
	__asm        jmp    near ptr 0x004A775E;
// LINE 1546:
	__asm        mov    eax, ds:[0x606960];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004A7771;
	__asm        jmp    near ptr 0x004A7776;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A778C;
	__asm        jmp    near ptr 0x004A77A0;
	__asm        jmp    near ptr 0x004A778C;
	__asm        jmp    near ptr 0x004A779B;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x004A77A0;
	__asm        jmp    near ptr 0x004A77A5;
	__asm        jmp    near ptr 0x004A785C;
	__asm        jmp    near ptr 0x004A77B4;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004A785C;
// LINE 1547:
	__asm        jmp    near ptr 0x004A77B9;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, windowFocus;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004A7839;
// LINE 1548:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A77DB;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A77E6;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A780C;
	__asm        jmp    near ptr 0x004A7811;
	__asm        mov    eax, ds:[0x59A97C];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ds:[0x59A97C], eax;
	__asm        jmp    near ptr 0x004A7828;
	__asm        add    dword ptr ds:[0x606964], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004A7834;
// LINE 1549:
	__asm        jmp    near ptr 0x004A7857;
// LINE 1550:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A784C;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A7857;
// LINE 1551:
	__asm        jmp    near ptr 0x004A775E;
// LINE 1552:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7866;
// LINE 1553:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a786b
int  GraphicWindow::CanWeRespondToMessage() {
	class GraphicWindow* gwModal;
	class GraphicWindow* gwCurrentTest;
	int32_t nModalWindowCount;

// LINE 1567:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1572:
	__asm        jmp    near ptr 0x004A787C;
	__asm        mov    eax, ds:[0x606994];
	__asm        mov    nModalWindowCount, eax;
// LINE 1573:
	__asm        cmp    nModalWindowCount, 0;
	__asm        je     near ptr 0x004A7900;
// LINE 1574:
	__asm        mov    eax, ds:[0x606990];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A78A3;
	__asm        jmp    near ptr 0x004A78A8;
	__asm        jmp    near ptr 0x004A78AD;
	__asm        jmp    near ptr 0x004A78B2;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    gwModal, eax;
// LINE 1575:
	__asm        mov    eax, this;
	__asm        mov    gwCurrentTest, eax;
// LINE 1576:
	__asm        mov    eax, gwModal;
	__asm        cmp    gwCurrentTest, eax;
	__asm        je     near ptr 0x004A78E5;
	__asm        cmp    gwCurrentTest, 0;
	__asm        je     near ptr 0x004A78E5;
// LINE 1577:
	__asm        mov    eax, gwCurrentTest;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    gwCurrentTest, eax;
	__asm        jmp    near ptr 0x004A78C1;
// LINE 1578:
	__asm        cmp    gwModal, 0;
	__asm        jne    near ptr 0x004A78F6;
// LINE 1579:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A790A;
// LINE 1580:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A790A;
// LINE 1582:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A790A;
// LINE 1583:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a790f
void ScreenWindow::ScreenWindow() {
// LINE 1600:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1601:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1602:
	__asm        jmp    near ptr 0x004A7945;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a794d
void ScreenWindow::ScreenWindow(const class ScreenWindow& copyScreenWindow) {
// LINE 1611:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, copyScreenWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A2F5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1612:
	__asm        mov    eax, copyScreenWindow;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1613:
	__asm        jmp    near ptr 0x004A797F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a7989
void ScreenWindow::ScreenWindow(class MRect& rectNewWindow, int32_t nNewID, class CBackBuffer* bufferNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 1624:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1625:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 1626:
	__asm        mov    eax, bufferNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1627:
	__asm        mov    eax, bufferNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
// LINE 1628:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 1629:
	__asm        jmp    near ptr 0x004A79E3;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004a79ed
void ScreenWindow::~ScreenWindow() {
// LINE 1636:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591748;
// LINE 1637:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 1638:
	__asm        jmp    near ptr 0x004A7A11;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a7a1e
class ScreenWindow& ScreenWindow::operator=(const class ScreenWindow& copyScreenWindow) {
// LINE 1645:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1646:
	__asm        mov    eax, copyScreenWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A44EF;
// LINE 1647:
	__asm        mov    eax, copyScreenWindow;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1649:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004A7A4A;
// LINE 1650:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a7a51
int32_t ScreenWindow::ComposeSelf() {
	class list<GraphicWindow *>::iterator i;
	class GraphicWindow* gwCurrentChild;

// LINE 1662:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1665:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004A7A71;
// LINE 1666:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A7B33;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7A87;
	__asm        jmp    near ptr 0x004A7A8C;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004A7AA0;
	__asm        jmp    near ptr 0x004A7AA5;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004A7ABB;
	__asm        jmp    near ptr 0x004A7ACF;
	__asm        jmp    near ptr 0x004A7ABB;
	__asm        jmp    near ptr 0x004A7ACA;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x004A7ACF;
	__asm        jmp    near ptr 0x004A7AD4;
	__asm        jmp    near ptr 0x004A7B29;
	__asm        jmp    near ptr 0x004A7AE3;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A7B29;
// LINE 1670:
	__asm        jmp    near ptr 0x004A7AE8;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    gwCurrentChild, eax;
// LINE 1671:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004A7B04;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A7B0F;
// LINE 1672:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    dword ptr [eax+0x48], 1;
// LINE 1673:
	__asm        mov    eax, gwCurrentChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gwCurrentChild;
	__asm        call   dword ptr [eax+0x18];
// LINE 1674:
	__asm        jmp    near ptr 0x004A7A8C;
// LINE 1680:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7B33;
// LINE 1681:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a7b38
int32_t ScreenWindow::DrawSelf() {
// LINE 1694:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1695:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A7B4E;
// LINE 1696:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:000a6b60-000a6b81 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6b90-000a6bb1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6bc0-000a6dd5 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7bc0
// list<GraphicWindow *>::get_node



// Contribution: 1:000a6de0-000a6e18 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7de0
// GraphicWindow::`scalar deleting destructor'



// Contribution: 1:000a6e20-000a6e5b Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e20
// list<GraphicWindow *>::iterator::operator++



// Contribution: 1:000a6e60-000a6eb9 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e60
// list<GraphicWindow *>::erase



// Contribution: 1:000a6ec0-000a6ef1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7ec0
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f00-000a6f31 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f00
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f40-000a6f78 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7f40
// ScreenWindow::`scalar deleting destructor'



// Contribution: 1:000a6f80-000a6fb6 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f80
// construct



// Contribution: 1:000a6fc0-000a704e Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7fc0
// list<GraphicWindow *>::deallocate_buffers



// Contribution: 1:000a7050-000a7359 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a8050
// list<GraphicWindow *>::insert



// Contribution: 2:00002648-0000267f Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591648
// ??_7GraphicWindowManager@@6B@


// Contribution: 2:00002680-00002743 Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591680
// ??_7GraphicWindow@@6B@


// Contribution: 2:00002748-0000280b Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591748
// ??_7ScreenWindow@@6B@


// Contribution: 3:00000090-0000009f Module: 9, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597090
// $S49
// LOCAL: COPTER_D 0x00597094
// $S54
// LOCAL: COPTER_D 0x00597098
// $S59
// LOCAL: COPTER_D 0x0059709c
// $S62


// Contribution: 3:00003960-0000396f Module: 9, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a960
// GraphicWindow::windowCursorCapture
// GLOBAL: COPTER_D 0x0059a964
// GraphicWindow::windowManager
// GLOBAL: COPTER_D 0x0059a968
// GraphicWindow::screenWindow


// Contribution: 3:00003970-00003973 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a970
// list<GraphicWindow *>::number_of_lists


// Contribution: 3:00003974-00003977 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a974
// list<GraphicWindow *>::last


// Contribution: 3:00003978-0000397b Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a978
// list<GraphicWindow *>::next_avail


// Contribution: 3:0000397c-0000397f Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a97c
// list<GraphicWindow *>::free_list


// Contribution: 3:00003980-00003983 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a980
// list<GraphicWindow *>::buffer_list


// Contribution: 3:0006f960-0006f9a7 Module: 9, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00606960
// GraphicWindow::listFocusWindows
// GLOBAL: COPTER_D 0x00606968
// GraphicWindow::colorConstants
// GLOBAL: COPTER_D 0x00606990
// GraphicWindow::listModalWindows
// LOCAL: COPTER_D 0x00606998
// $S46
// GLOBAL: COPTER_D 0x006069a0
// GraphicWindow::listValidWindows
