// Module: Graphwin.obj
// Source: C:\Copter\source\sparkal\Graphwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ struct GraphicWindowColorConstants;
struct GraphicWindowColorConstants{ // packed(0x24 bytes) TI: 0x10f2
	/*+0x0*/   int32_t nPaletteIndexBlack;
	/*+0x4*/   int32_t nPaletteIndexDarkGray;
	/*+0x8*/   int32_t nPaletteIndexLightGray;
	/*+0xc*/   int32_t nPaletteIndexWhite;
	/*+0x10*/  int32_t nPaletteIndexRed;
	/*+0x14*/  int32_t nPaletteIndexBlue;
	/*+0x18*/  int32_t nPaletteIndexGreen;
	/*+0x1c*/  int32_t nPaletteIndexBlueGreen;
	/*+0x20*/  int32_t nPaletteIndexTransparent;
	void GraphicWindowColorConstants();
};

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class list<GraphicWindow *>;
class list<GraphicWindow *>{ // packed(0x8 bytes) TI: 0x1ec0
	using void_pointer = void * __ptr32;
	struct list<GraphicWindow *>::list_node{ // packed(0xc bytes) TI: 0x1ee6
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*unpacked*/ class GraphicWindow *data;
	};
protected:
	static /*packed*/ class allocator<list<GraphicWindow *>::list_node> list_node_allocator;
	static /*packed*/ class allocator<GraphicWindow *> value_allocator;
	using value_type = /*unpacked*/ class GraphicWindow*;
	using value_allocator_type = /*packed*/ class allocator<GraphicWindow *>;
	using pointer = /*unpacked*/ class GraphicWindow**;
	using reference = /*unpacked*/ class GraphicWindow*&;
	using const_reference = const /*unpacked*/ class GraphicWindow*&;
	using list_node_allocator_type = /*packed*/ class allocator<list<GraphicWindow *>::list_node>;
	using link_type = /*packed*/ struct list<GraphicWindow *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<GraphicWindow *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1ee4
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<GraphicWindow *>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<GraphicWindow *>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<GraphicWindow *>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<GraphicWindow *>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<GraphicWindow *>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<GraphicWindow *>::list_node *free_list;
	static /*packed*/ struct list<GraphicWindow *>::list_node *next_avail;
	static /*packed*/ struct list<GraphicWindow *>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<GraphicWindow *>::list_node* get_node();
	void put_node(/*packed*/ struct list<GraphicWindow *>::list_node*);
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
	{ // packed(0x4 bytes) TI: 0x1ee2
	protected:
		/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<GraphicWindow *>::iterator&);
		/*unpacked*/ class GraphicWindow*& operator*();
		/*packed*/ class list<GraphicWindow *>::iterator operator++(int32_t);
		/*packed*/ class list<GraphicWindow *>::iterator& operator++();
		/*packed*/ class list<GraphicWindow *>::iterator operator--(int32_t);
		/*packed*/ class list<GraphicWindow *>::iterator& operator--();
	};
	class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
	{ // packed(0x4 bytes) TI: 0x1ed5
	protected:
		/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<GraphicWindow *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<GraphicWindow *>::const_iterator&);
		const /*unpacked*/ class GraphicWindow*& operator*();
		/*packed*/ class list<GraphicWindow *>::const_iterator operator++(int32_t);
		/*packed*/ class list<GraphicWindow *>::const_iterator& operator++();
		/*packed*/ class list<GraphicWindow *>::const_iterator operator--(int32_t);
		/*packed*/ class list<GraphicWindow *>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int>;
public:
	void list<GraphicWindow *>(const /*packed*/ class list<GraphicWindow *>&);
	void list<GraphicWindow *>(const /*unpacked*/ class GraphicWindow**, const /*unpacked*/ class GraphicWindow**);
	void list<GraphicWindow *>(uint32_t, const /*unpacked*/ class GraphicWindow*&);
	void list<GraphicWindow *>();
	/*packed*/ class list<GraphicWindow *>::const_iterator begin();
	/*packed*/ class list<GraphicWindow *>::iterator begin();
	/*packed*/ class list<GraphicWindow *>::const_iterator end();
	/*packed*/ class list<GraphicWindow *>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*unpacked*/ class GraphicWindow*& front();
	/*unpacked*/ class GraphicWindow*& front();
	const /*unpacked*/ class GraphicWindow*& back();
	/*unpacked*/ class GraphicWindow*& back();
	void swap(/*packed*/ class list<GraphicWindow *>&);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, uint32_t, const /*unpacked*/ class GraphicWindow*&);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::const_iterator, /*packed*/ class list<GraphicWindow *>::const_iterator);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, const /*unpacked*/ class GraphicWindow**, const /*unpacked*/ class GraphicWindow**);
	/*packed*/ class list<GraphicWindow *>::iterator insert(/*packed*/ class list<GraphicWindow *>::iterator, const /*unpacked*/ class GraphicWindow*&);
	void push_front(const /*unpacked*/ class GraphicWindow*&);
	void push_back(const /*unpacked*/ class GraphicWindow*&);
	void erase(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
	void erase(/*packed*/ class list<GraphicWindow *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<GraphicWindow *>();
	/*packed*/ class list<GraphicWindow *>& operator=(const /*packed*/ class list<GraphicWindow *>&);
protected:
	void transfer(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
public:
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&, /*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&, /*packed*/ class list<GraphicWindow *>::iterator);
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&);
	void remove(const /*unpacked*/ class GraphicWindow*&);
	void unique();
	void merge(/*packed*/ class list<GraphicWindow *>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class GraphicWindowManager (forward reference);
// VTABLE: COPTER_D 0x00591648
class GraphicWindowManager{ // packed(0x14 bytes) TI: 0x41e5
public:
	void GraphicWindowManager(/*unpacked*/ class GraphicWindow*);
	void ~GraphicWindowManager();
	virtual void SetNewBaseWindow(/*unpacked*/ class GraphicWindow*); // vtable+0x0
	virtual int32_t DeleteWindow(/*unpacked*/ class GraphicWindow*); // vtable+0x4
	virtual long DoCharacter(long); // vtable+0x8
	virtual long DoKeyDown(long, char); // vtable+0xc
	virtual long DoKeyUp(long, char); // vtable+0x10
	virtual long DoCursorDown(long, long, unsigned long); // vtable+0x14
	virtual long DoCursorUp(long, long, unsigned long); // vtable+0x18
	virtual long DoCursorMove(long, long); // vtable+0x1c
	virtual int32_t SendCursorMessageToChildWindow(/*unpacked*/ class GraphicWindow*, int32_t, long, long, unsigned long); // vtable+0x20
	virtual int32_t ComposeAllWindows(); // vtable+0x24
	virtual int32_t IsWindowValid(/*unpacked*/ class GraphicWindow*); // vtable+0x28
	virtual int32_t IsWindowOrParentInDeletionList(/*unpacked*/ class GraphicWindow*); // vtable+0x2c
	virtual int32_t IncrementBusyCount(); // vtable+0x30
	virtual int32_t DecrementBusyCount(); // vtable+0x34
protected:
	int32_t DeleteWindowAndRemoveItsTraces(/*unpacked*/ class GraphicWindow*);
	int32_t DeleteAllWindowsInDeletionList();
	/*+0x4*/   int32_t nBusyIteratingCount;
	/*+0x8*/   /*unpacked*/ class GraphicWindow *baseWindow;
	/*+0xc*/   /*packed*/ class list<GraphicWindow *> listWindowsToDelete; // 0x8 bytes
};

// Type: void ();

// Type: /*packed*/ struct list<GraphicWindow *>::list_node_buffer (forward reference);
struct list<GraphicWindow *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1ee4
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<GraphicWindow *>::list_node *buffer;
};

// Type: /*packed*/ struct list<GraphicWindow *>::list_node (forward reference);
struct list<GraphicWindow *>::list_node{ // packed(0xc bytes) TI: 0x1ee6
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*unpacked*/ class GraphicWindow *data;
};

// Type: uint32_t;

// Type: void;

// Type: /*packed*/ struct GraphicWindowColorConstants (forward reference);
struct GraphicWindowColorConstants{ // packed(0x24 bytes) TI: 0x10f2
	/*+0x0*/   int32_t nPaletteIndexBlack;
	/*+0x4*/   int32_t nPaletteIndexDarkGray;
	/*+0x8*/   int32_t nPaletteIndexLightGray;
	/*+0xc*/   int32_t nPaletteIndexWhite;
	/*+0x10*/  int32_t nPaletteIndexRed;
	/*+0x14*/  int32_t nPaletteIndexBlue;
	/*+0x18*/  int32_t nPaletteIndexGreen;
	/*+0x1c*/  int32_t nPaletteIndexBlueGreen;
	/*+0x20*/  int32_t nPaletteIndexTransparent;
	void GraphicWindowColorConstants();
};

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: long;

// Type: void * __ptr32;

// Type: int32_t;

// Type: /*packed*/ class list<GraphicWindow *>::iterator;
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{ // packed(0x4 bytes) TI: 0x1ee2
protected:
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<GraphicWindow *>::iterator&);
	/*unpacked*/ class GraphicWindow*& operator*();
	/*packed*/ class list<GraphicWindow *>::iterator operator++(int32_t);
	/*packed*/ class list<GraphicWindow *>::iterator& operator++();
	/*packed*/ class list<GraphicWindow *>::iterator operator--(int32_t);
	/*packed*/ class list<GraphicWindow *>::iterator& operator--();
};

// Type: char;

// Type: unsigned long;

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: char *;

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*unpacked*/ class CBackBuffer (forward reference);
// CBackBuffer Class implementation not found

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: /*packed*/ class ScreenWindow (forward reference);
// VTABLE: COPTER_D 0x00591748
class ScreenWindow : public GraphicWindow
{ // packed(0x78 bytes) TI: 0x2149
public:
	void ScreenWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class CBackBuffer*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ScreenWindow(const /*packed*/ class ScreenWindow&);
	void ScreenWindow();
	virtual void ~ScreenWindow() /* override */;
	/*packed*/ class ScreenWindow& operator=(const /*packed*/ class ScreenWindow&);
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t DrawSelf() /* override */;
	void SetParentBuffer(/*unpacked*/ class CBackBuffer*);
protected:
	/*+0x74*/  /*unpacked*/ class CBackBuffer *bufferParent;
};

// Type: /*packed*/ class list<GraphicWindow *> (forward reference);
class list<GraphicWindow *>{ // packed(0x8 bytes) TI: 0x1ec0
	using void_pointer = void * __ptr32;
	struct list<GraphicWindow *>::list_node{ // packed(0xc bytes) TI: 0x1ee6
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*unpacked*/ class GraphicWindow *data;
	};
protected:
	static /*packed*/ class allocator<list<GraphicWindow *>::list_node> list_node_allocator;
	static /*packed*/ class allocator<GraphicWindow *> value_allocator;
	using value_type = /*unpacked*/ class GraphicWindow*;
	using value_allocator_type = /*packed*/ class allocator<GraphicWindow *>;
	using pointer = /*unpacked*/ class GraphicWindow**;
	using reference = /*unpacked*/ class GraphicWindow*&;
	using const_reference = const /*unpacked*/ class GraphicWindow*&;
	using list_node_allocator_type = /*packed*/ class allocator<list<GraphicWindow *>::list_node>;
	using link_type = /*packed*/ struct list<GraphicWindow *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<GraphicWindow *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1ee4
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<GraphicWindow *>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<GraphicWindow *>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<GraphicWindow *>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<GraphicWindow *>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<GraphicWindow *>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<GraphicWindow *>::list_node *free_list;
	static /*packed*/ struct list<GraphicWindow *>::list_node *next_avail;
	static /*packed*/ struct list<GraphicWindow *>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<GraphicWindow *>::list_node* get_node();
	void put_node(/*packed*/ struct list<GraphicWindow *>::list_node*);
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
	{ // packed(0x4 bytes) TI: 0x1ee2
	protected:
		/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<GraphicWindow *>::iterator&);
		/*unpacked*/ class GraphicWindow*& operator*();
		/*packed*/ class list<GraphicWindow *>::iterator operator++(int32_t);
		/*packed*/ class list<GraphicWindow *>::iterator& operator++();
		/*packed*/ class list<GraphicWindow *>::iterator operator--(int32_t);
		/*packed*/ class list<GraphicWindow *>::iterator& operator--();
	};
	class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
	{ // packed(0x4 bytes) TI: 0x1ed5
	protected:
		/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<GraphicWindow *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<GraphicWindow *>::const_iterator&);
		const /*unpacked*/ class GraphicWindow*& operator*();
		/*packed*/ class list<GraphicWindow *>::const_iterator operator++(int32_t);
		/*packed*/ class list<GraphicWindow *>::const_iterator& operator++();
		/*packed*/ class list<GraphicWindow *>::const_iterator operator--(int32_t);
		/*packed*/ class list<GraphicWindow *>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int>;
public:
	void list<GraphicWindow *>(const /*packed*/ class list<GraphicWindow *>&);
	void list<GraphicWindow *>(const /*unpacked*/ class GraphicWindow**, const /*unpacked*/ class GraphicWindow**);
	void list<GraphicWindow *>(uint32_t, const /*unpacked*/ class GraphicWindow*&);
	void list<GraphicWindow *>();
	/*packed*/ class list<GraphicWindow *>::const_iterator begin();
	/*packed*/ class list<GraphicWindow *>::iterator begin();
	/*packed*/ class list<GraphicWindow *>::const_iterator end();
	/*packed*/ class list<GraphicWindow *>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::const_iterator,GraphicWindow *,GraphicWindow * const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<GraphicWindow *>::iterator,GraphicWindow *,GraphicWindow * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*unpacked*/ class GraphicWindow*& front();
	/*unpacked*/ class GraphicWindow*& front();
	const /*unpacked*/ class GraphicWindow*& back();
	/*unpacked*/ class GraphicWindow*& back();
	void swap(/*packed*/ class list<GraphicWindow *>&);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, uint32_t, const /*unpacked*/ class GraphicWindow*&);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::const_iterator, /*packed*/ class list<GraphicWindow *>::const_iterator);
	void insert(/*packed*/ class list<GraphicWindow *>::iterator, const /*unpacked*/ class GraphicWindow**, const /*unpacked*/ class GraphicWindow**);
	/*packed*/ class list<GraphicWindow *>::iterator insert(/*packed*/ class list<GraphicWindow *>::iterator, const /*unpacked*/ class GraphicWindow*&);
	void push_front(const /*unpacked*/ class GraphicWindow*&);
	void push_back(const /*unpacked*/ class GraphicWindow*&);
	void erase(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
	void erase(/*packed*/ class list<GraphicWindow *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<GraphicWindow *>();
	/*packed*/ class list<GraphicWindow *>& operator=(const /*packed*/ class list<GraphicWindow *>&);
protected:
	void transfer(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
public:
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&, /*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>::iterator);
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&, /*packed*/ class list<GraphicWindow *>::iterator);
	void splice(/*packed*/ class list<GraphicWindow *>::iterator, /*packed*/ class list<GraphicWindow *>&);
	void remove(const /*unpacked*/ class GraphicWindow*&);
	void unique();
	void merge(/*packed*/ class list<GraphicWindow *>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class list<GraphicWindow *>::iterator (forward reference);
class list<GraphicWindow *>::iterator : public bidirectional_iterator<GraphicWindow *,int>
{ // packed(0x4 bytes) TI: 0x1ee2
protected:
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<GraphicWindow *>::iterator&);
	/*unpacked*/ class GraphicWindow*& operator*();
	/*packed*/ class list<GraphicWindow *>::iterator operator++(int32_t);
	/*packed*/ class list<GraphicWindow *>::iterator& operator++();
	/*packed*/ class list<GraphicWindow *>::iterator operator--(int32_t);
	/*packed*/ class list<GraphicWindow *>::iterator& operator--();
};

// Type: /*packed*/ class list<GraphicWindow *>::const_iterator (forward reference);
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{ // packed(0x4 bytes) TI: 0x1ed5
protected:
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
public:
	void const_iterator(const /*packed*/ class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<GraphicWindow *>::const_iterator&);
	const /*unpacked*/ class GraphicWindow*& operator*();
	/*packed*/ class list<GraphicWindow *>::const_iterator operator++(int32_t);
	/*packed*/ class list<GraphicWindow *>::const_iterator& operator++();
	/*packed*/ class list<GraphicWindow *>::const_iterator operator--(int32_t);
	/*packed*/ class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: /*packed*/ class list<GraphicWindow *>::const_iterator;
class list<GraphicWindow *>::const_iterator : public bidirectional_iterator<GraphicWindow *,int>
{ // packed(0x4 bytes) TI: 0x1ed5
protected:
	/*+0x0*/   /*packed*/ struct list<GraphicWindow *>::list_node *node;
public:
	void const_iterator(const /*packed*/ class list<GraphicWindow *>::iterator&);
	void const_iterator();
protected:
	void const_iterator(/*packed*/ struct list<GraphicWindow *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<GraphicWindow *>::const_iterator&);
	const /*unpacked*/ class GraphicWindow*& operator*();
	/*packed*/ class list<GraphicWindow *>::const_iterator operator++(int32_t);
	/*packed*/ class list<GraphicWindow *>::const_iterator& operator++();
	/*packed*/ class list<GraphicWindow *>::const_iterator operator--(int32_t);
	/*packed*/ class list<GraphicWindow *>::const_iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<GraphicWindow *,int>;
struct bidirectional_iterator<GraphicWindow *,int>{ // packed(0x1 bytes) TI: 0x1dad
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:0009fa00-000a6b52 Module: 9, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0a00
static void $E48() {

	$E44();
	$E47();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0a1a
static void $E44() {

	__asm        mov    GraphicWindow::listModalWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9a;
_T9a:
	exit(0x1);
_Ta4:
	__asm        jmp    _Ta9;
_Ta9:
	__asm        jmp    _Tae;
_Tae:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T152;
_T152:
	exit(0x1);
_T15c:
	__asm        jmp    _T161;
_T161:
	__asm        jmp    _T166;
_T166:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    _T1ce;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T1f3;
_T1f3:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    _T227;
_T227:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listModalWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    ecx, GraphicWindow::listModalWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    ecx, GraphicWindow::listModalWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T24f;
_T24f:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0c73
static void $E47() {

	atexit(0x4a0c90);
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0c90
static void $E45() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 1;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 1;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_LOOP_64:
	for (;;) {
_LOOP_64:
		__asm        mov    eax, [ebp-0x2C];
		__asm        cmp    [ebp-0x30], eax;
		__asm        jne    _T7a;

		__asm        jmp    _T8e;

		__asm        jmp    _T7a;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        jne    _T8e;
_T89:
		__asm        jmp    _T93;
_T8e:
		__asm        jmp    _T112;
_T93:
		__asm        jmp    _Ta2;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T112;
_Ta2:
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x30], eax;
		__asm        jmp    _Tb5;
_Tb5:
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0x18], eax;
		__asm        jmp    _Tc0;
_Tc0:
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Te6;
_Te6:
		__asm        jmp    _Teb;
_Teb:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _T102;
_T102:
GraphicWindow::listModalWindows.length--;
		__asm        jmp    _T10d;
_T10d:
	}
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    _T136;
_T136:
	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
__WHILE_142:
	while ((list<GraphicWindow *>::buffer_list != 0x0)) {

		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    eax, [eax];
		__asm        mov    list<GraphicWindow *>::buffer_list, eax;
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    eax, [eax+4];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T17d;
_T17d:
		__asm        jmp    _T182;
_T182:
		__asm        mov    eax, [ebp-0x34];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T193;
_T193:
		__asm        jmp    _T198;
_T198:
	}
_T19d:
	list<GraphicWindow *>::free_list = 0x0;
	list<GraphicWindow *>::next_avail = 0x0;
	list<GraphicWindow *>::last = 0x0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0e5f
static void $E53() {

	$E50();
	$E52();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a0e79
static void $E50() {

	__asm        mov    GraphicWindow::listFocusWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9a;
_T9a:
	exit(0x1);
_Ta4:
	__asm        jmp    _Ta9;
_Ta9:
	__asm        jmp    _Tae;
_Tae:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T152;
_T152:
	exit(0x1);
_T15c:
	__asm        jmp    _T161;
_T161:
	__asm        jmp    _T166;
_T166:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    _T1ce;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T1f3;
_T1f3:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    _T227;
_T227:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listFocusWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    ecx, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    ecx, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T24f;
_T24f:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a10d2
static void $E52() {

	atexit(0x4a10ef);
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a10ef
static void $E51() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 2;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 2;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_LOOP_64:
	for (;;) {
_LOOP_64:
		__asm        mov    eax, [ebp-0x2C];
		__asm        cmp    [ebp-0x30], eax;
		__asm        jne    _T7a;

		__asm        jmp    _T8e;

		__asm        jmp    _T7a;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        jne    _T8e;
_T89:
		__asm        jmp    _T93;
_T8e:
		__asm        jmp    _T112;
_T93:
		__asm        jmp    _Ta2;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T112;
_Ta2:
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x30], eax;
		__asm        jmp    _Tb5;
_Tb5:
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0x18], eax;
		__asm        jmp    _Tc0;
_Tc0:
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Te6;
_Te6:
		__asm        jmp    _Teb;
_Teb:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _T102;
_T102:
GraphicWindow::listFocusWindows.length--;
		__asm        jmp    _T10d;
_T10d:
	}
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    _T136;
_T136:
	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
__WHILE_142:
	while ((list<GraphicWindow *>::buffer_list != 0x0)) {

		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    eax, [eax];
		__asm        mov    list<GraphicWindow *>::buffer_list, eax;
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    eax, [eax+4];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T17d;
_T17d:
		__asm        jmp    _T182;
_T182:
		__asm        mov    eax, [ebp-0x34];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T193;
_T193:
		__asm        jmp    _T198;
_T198:
	}
_T19d:
	list<GraphicWindow *>::free_list = 0x0;
	list<GraphicWindow *>::next_avail = 0x0;
	list<GraphicWindow *>::last = 0x0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a12be
static void $E58() {

	$E55();
	$E57();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a12d8
static void $E55() {

	__asm        mov    GraphicWindow::listValidWindows.length, 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T45;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T45:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T20d;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Ta4;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9a;
_T9a:
	exit(0x1);
_Ta4:
	__asm        jmp    _Ta9;
_Ta9:
	__asm        jmp    _Tae;
_Tae:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tef;
_Te9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_Tef:
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T15c;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T152;
_T152:
	exit(0x1);
_T15c:
	__asm        jmp    _T161;
_T161:
	__asm        jmp    _T166;
_T166:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c3;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1c9;
_T1c3:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1c9:
	__asm        jmp    _T1ce;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T1f3;
_T1f3:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T222;
_T20d:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T222:
	__asm        jmp    _T227;
_T227:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    GraphicWindow::listValidWindows.node, eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    ecx, GraphicWindow::listValidWindows.node;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    ecx, GraphicWindow::listValidWindows.node;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T24f;
_T24f:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a1531
static void $E57() {

	atexit(0x4a154e);
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a154e
static void $E56() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        test   al, 4;
	__asm        jne    _T1c5;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x606998];
	__asm        or     al, 4;
	__asm        mov    ds:[0x606998], al;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_LOOP_64:
	for (;;) {
_LOOP_64:
		__asm        mov    eax, [ebp-0x2C];
		__asm        cmp    [ebp-0x30], eax;
		__asm        jne    _T7a;

		__asm        jmp    _T8e;

		__asm        jmp    _T7a;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        jne    _T8e;
_T89:
		__asm        jmp    _T93;
_T8e:
		__asm        jmp    _T112;
_T93:
		__asm        jmp    _Ta2;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T112;
_Ta2:
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x30], eax;
		__asm        jmp    _Tb5;
_Tb5:
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0x18], eax;
		__asm        jmp    _Tc0;
_Tc0:
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Te6;
_Te6:
		__asm        jmp    _Teb;
_Teb:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _T102;
_T102:
GraphicWindow::listValidWindows.length--;
		__asm        jmp    _T10d;
_T10d:
	}
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    _T136;
_T136:
	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1c0;
__WHILE_142:
	while ((list<GraphicWindow *>::buffer_list != 0x0)) {

		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    eax, [eax];
		__asm        mov    list<GraphicWindow *>::buffer_list, eax;
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    eax, [eax+4];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T17d;
_T17d:
		__asm        jmp    _T182;
_T182:
		__asm        mov    eax, [ebp-0x34];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T193;
_T193:
		__asm        jmp    _T198;
_T198:
	}
_T19d:
	list<GraphicWindow *>::free_list = 0x0;
	list<GraphicWindow *>::next_avail = 0x0;
	list<GraphicWindow *>::last = 0x0;
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a171d
static void $E61() {

	$E60();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004a1732
static void $E60() {

	0x606968->GraphicWindowColorConstants::GraphicWindowColorConstants();
	__asm        jmp    __RETURN;
__RETURN:
}

// FUNCTION: COPTER_D 0x004a174c
void GraphicWindowColorConstants::GraphicWindowColorConstants() {
// LINE 36:
	this->nPaletteIndexBlack = 0x0;
// LINE 37:
	this->nPaletteIndexDarkGray = 0xf8;
// LINE 38:
	this->nPaletteIndexLightGray = 0x7;
// LINE 39:
	this->nPaletteIndexWhite = 0xff;
// LINE 40:
	this->nPaletteIndexRed = 0x1;
// LINE 41:
	this->nPaletteIndexBlue = 0x4;
// LINE 42:
	this->nPaletteIndexGreen = 0x2;
// LINE 43:
	this->nPaletteIndexBlueGreen = 0x6;
// LINE 44:
	this->nPaletteIndexTransparent = 0xffffffff;
// LINE 48:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a17be
int32_t GraphicWindowOwner::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 62:
	return 0x0;
// LINE 63:
}

// FUNCTION: COPTER_D 0x004a17d8
void GraphicWindowManager::GraphicWindowManager(/*unpacked*/ class GraphicWindow *newBaseWindow) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, newBaseWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T5b;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T238;
_T5b:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T223;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _Tba;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb0;
_Tb0:
	exit(0x1);
_Tba:
	__asm        jmp    _Tbf;
_Tbf:
	__asm        jmp    _Tc4;
_Tc4:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    dword ptr [ebp-0x14], 0x155;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tff;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T105;
_Tff:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
_T105:
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        jmp    _T114;
_T114:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T172;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T168;
_T168:
	exit(0x1);
_T172:
	__asm        jmp    _T177;
_T177:
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d9;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1df;
_T1d9:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T1df:
	__asm        jmp    _T1e4;
_T1e4:
	__asm        jmp    _T1e9;
_T1e9:
	__asm        jmp    _T1ee;
_T1ee:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T209;
_T209:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-8], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T238;
_T223:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x50], eax;
_T238:
	__asm        jmp    _T23d;
_T23d:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T268;
_T268:
	this-><vftable> = 0x591648;
// LINE 78:
GraphicWindow::windowManager = this;
// LINE 79:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a1a60
void GraphicWindowManager::~GraphicWindowManager() {

	this-><vftable> = 0x591648;
// LINE 87:
	__asm        jmp    _T1a;
_T1a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2e;
_T2e:
	__asm        jmp    _T33;
_T33:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T49;
_T49:
	__asm        jmp    _T4e;
_T4e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x30], eax;
_LOOP_5a:
	for (;;) {
_LOOP_5a:
		__asm        mov    eax, [ebp-0x2C];
		__asm        cmp    [ebp-0x30], eax;
		__asm        jne    _T70;

		__asm        jmp    _T84;

		__asm        jmp    _T70;
_T70:
		__asm        jmp    _T7f;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        jne    _T84;
_T7f:
		__asm        jmp    _T89;
_T84:
		__asm        jmp    _T108;
_T89:
		__asm        jmp    _T98;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T108;
_T98:
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x30], eax;
		__asm        jmp    _Tab;
_Tab:
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0x18], eax;
		__asm        jmp    _Tb6;
_Tb6:
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Tdc;
_Tdc:
		__asm        jmp    _Te1;
_Te1:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x28];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Tf8;
_Tf8:
		this->listWindowsToDelete.length--;
		__asm        jmp    _T103;
_T103:
	}
_T108:
	__asm        jmp    _T10d;
_T10d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    _T12d;
_T12d:
	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T1b7;
__WHILE_139:
	while ((list<GraphicWindow *>::buffer_list != 0x0)) {

		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, list<GraphicWindow *>::buffer_list;
		__asm        mov    eax, [eax];
		__asm        mov    list<GraphicWindow *>::buffer_list, eax;
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    eax, [eax+4];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T174;
_T174:
		__asm        jmp    _T179;
_T179:
		__asm        mov    eax, [ebp-0x34];
		__asm        push   eax;
		__asm        call   operator delete;
		__asm        add    esp, 4;
		__asm        jmp    _T18a;
_T18a:
		__asm        jmp    _T18f;
_T18f:
	}
_T194:
	list<GraphicWindow *>::free_list = 0x0;
	list<GraphicWindow *>::next_avail = 0x0;
	list<GraphicWindow *>::last = 0x0;
	__asm        jmp    _T1b7;
_T1b7:
	return;
}

// FUNCTION: COPTER_D 0x004a1c21
void GraphicWindowManager::SetNewBaseWindow(/*unpacked*/ class GraphicWindow *newBaseWindow) {
// LINE 98:
	this->baseWindow = newBaseWindow;
// LINE 99:
	return;
}

// FUNCTION: COPTER_D 0x004a1c42
int32_t GraphicWindowManager::DeleteWindow(/*unpacked*/ class GraphicWindow *windowToDelete) {
// LINE 114:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jle    _T2e5;
// LINE 115:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
	__asm        test   eax, eax;
	__asm        jne    _T2d6;
// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T44;
_T44:
	__asm        jmp    _T49;
_T49:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T7b;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T258;
_T7b:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T243;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tda;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Td0;
_Td0:
	exit(0x1);
_Tda:
	__asm        jmp    _Tdf;
_Tdf:
	__asm        jmp    _Te4;
_Te4:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T11f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T125;
_T11f:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T125:
	__asm        jmp    _T12a;
_T12a:
	__asm        jmp    _T12f;
_T12f:
	__asm        jmp    _T134;
_T134:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T192;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T188;
_T188:
	exit(0x1);
_T192:
	__asm        jmp    _T197;
_T197:
	__asm        jmp    _T19c;
_T19c:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f9;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1ff;
_T1f9:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1ff:
	__asm        jmp    _T204;
_T204:
	__asm        jmp    _T209;
_T209:
	__asm        jmp    _T20e;
_T20e:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T229;
_T229:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T258;
_T243:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T258:
	__asm        jmp    _T25d;
_T25d:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T268;
_T268:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T276;
_T276:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T28d;

	__asm        mov    eax, windowToDelete;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T28d;
_T28d:
	__asm        jmp    _T292;
_T292:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x10], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2cc;
_T2cc:
	__asm        jmp    _T2d1;
_T2d1:
	__asm        jmp    _T2d6;
// LINE 123:
_T2d6:
	return 0x2;
// LINE 125:
	__asm        jmp    _T2ef;
// LINE 126:
_T2e5:
	this->nBusyIteratingCount = 0x0;
// LINE 129:
_T2ef:
	this->GraphicWindowManager::DeleteWindowAndRemoveItsTraces(windowToDelete);
// LINE 130:
	return 0x1;
// LINE 131:
}

// FUNCTION: COPTER_D 0x004a1f4e
int32_t GraphicWindowManager::DeleteWindowAndRemoveItsTraces(/*unpacked*/ class GraphicWindow *windowToDelete) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowParent;

// LINE 139:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        jne    _T2a;
// LINE 140:
	return 0x0;
// LINE 144:
_T2a:
	windowParent = windowToDelete-><GraphicWindow+0x3c:4>;
// LINE 145:
	__asm        cmp    windowParent, 0;
	__asm        je     _T68;
// LINE 146:
	__asm        mov    eax, windowParent;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T63;
// LINE 147:
	__asm        mov    eax, windowToDelete;
	__asm        push   eax;
	__asm        mov    eax, windowParent;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowParent;
	__asm        call   dword ptr [eax+0x5C];
// LINE 149:
_T63:
	__asm        jmp    _T93;
// LINE 150:
_T68:
	__asm        mov    eax, windowToDelete;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T93;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T93;
// LINE 155:
_T93:
	return 0x1;
// LINE 156:
}

// FUNCTION: COPTER_D 0x004a1ff2
int32_t GraphicWindowManager::DeleteAllWindowsInDeletionList() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;
	// StaticLocal: 0x0059a96c
	static int32_t nReentrancyCount = 0;
	;

// LINE 165:
	__asm        cmp    nReentrancyCount, 0;
	__asm        jle    _T20;
// LINE 166:
	return 0x0;
// LINE 167:
_T20:
	nReentrancyCount++;
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    _T3c;
_T3c:
	__asm        jmp    _T41;
// LINE 170:
_T41:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T1cf;
// LINE 171:
_LOOP_4e:
	for (;;) {
// LINE 171:
_LOOP_4e:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0xC];
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T62;
_T62:
		__asm        jmp    _T67;
_T67:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    tempGraphicWindowPtrListIterator.node, eax;
		__asm        jne    _T7d;

		__asm        jmp    _T91;

		__asm        jmp    _T7d;
_T7d:
		__asm        jmp    _T8c;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        jne    _T91;
_T8c:
		__asm        jmp    _T96;
_T91:
		__asm        jmp    _Tdc;
_T96:
		__asm        jmp    _Ta5;

		__asm        cmp    dword ptr [ebp-0x28], 0;
		__asm        je     _Tdc;
// LINE 172:
_Ta5:
		__asm        jmp    _Taa;
_Taa:
		this->GraphicWindowManager::DeleteWindowAndRemoveItsTraces(tempGraphicWindowPtrListIterator.node->data);
// LINE 173:
		__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
		__asm        mov    [ebp-0x4C], eax;
		__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
		__asm        mov    eax, [eax];
		__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
		__asm        jmp    _Tcc;
_Tcc:
		__asm        mov    eax, [ebp-0x4C];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Td7;
// LINE 174:
_Td7:
	}
// LINE 175:
_Tdc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Tf0;
_Tf0:
	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T10b;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x48], eax;
_LOOP_11c:
	for (;;) {
_LOOP_11c:
		__asm        mov    eax, [ebp-0x44];
		__asm        cmp    [ebp-0x48], eax;
		__asm        jne    _T132;

		__asm        jmp    _T146;

		__asm        jmp    _T132;
_T132:
		__asm        jmp    _T141;

		__asm        cmp    dword ptr [ebp-0x38], 0;
		__asm        jne    _T146;
_T141:
		__asm        jmp    _T14b;
_T146:
		__asm        jmp    _T1ca;
_T14b:
		__asm        jmp    _T15a;

		__asm        cmp    dword ptr [ebp-0x3C], 0;
		__asm        je     _T1ca;
_T15a:
		__asm        mov    eax, [ebp-0x48];
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, [ebp-0x48];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x48], eax;
		__asm        jmp    _T16d;
_T16d:
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    [ebp-0x30], eax;
		__asm        jmp    _T178;
_T178:
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    [ebp-0x40], eax;
		__asm        mov    eax, [ebp-0x40];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x40];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x40];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x40];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _T19e;
_T19e:
		__asm        jmp    _T1a3;
_T1a3:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x40];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x40];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _T1ba;
_T1ba:
		this->listWindowsToDelete.length--;
		__asm        jmp    _T1c5;
_T1c5:
	}
_T1ca:
	__asm        jmp    _T1cf;
// LINE 177:
_T1cf:
	nReentrancyCount--;
// LINE 178:
	return 0x1;
// LINE 179:
}

// FUNCTION: COPTER_D 0x004a21d6
int32_t GraphicWindowManager::IsWindowOrParentInDeletionList(/*unpacked*/ class GraphicWindow *windowToCheck) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator tempGraphicWindowPtrListIterator;
	/*bp-0x8*/   /*unpacked*/ class GraphicWindow *currentGraphicWindowToCheck;

// LINE 192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 195:
_LOOP_27:
	for (;;) {
// LINE 195:
_LOOP_27:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0xC];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T3b;
_T3b:
		__asm        jmp    _T40;
_T40:
		__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
		__asm        cmp    [ebp-0xC], eax;
		__asm        jne    _T56;

		__asm        jmp    _T6a;

		__asm        jmp    _T56;
_T56:
		__asm        jmp    _T65;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        jne    _T6a;
_T65:
		__asm        jmp    _T6f;
_T6a:
		__asm        jmp    _Tdd;
_T6f:
		__asm        jmp    _T7e;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        je     _Tdd;
// LINE 196:
_T7e:
		currentGraphicWindowToCheck = windowToCheck;
// LINE 197:
__WHILE_84:
		while ((currentGraphicWindowToCheck != 0x0)) {
// LINE 198:
			__asm        jmp    _T93;
_T93:
			__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
			__asm        mov    ecx, currentGraphicWindowToCheck;
			__asm        cmp    [eax+8], ecx;
			__asm        jne    _Tac;
// LINE 199:
			return 0x1;
// LINE 201:
_Tac:
			currentGraphicWindowToCheck = currentGraphicWindowToCheck-><GraphicWindow+0x3c:4>;
		}
// LINE 203:
_Tba:
		__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, tempGraphicWindowPtrListIterator.node;
		__asm        mov    eax, [eax];
		__asm        mov    tempGraphicWindowPtrListIterator.node, eax;
		__asm        jmp    _Tcd;
_Tcd:
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Td8;
// LINE 204:
_Td8:
	}
// LINE 205:
_Tdd:
	return 0x0;
// LINE 206:
}

// FUNCTION: COPTER_D 0x004a22c1
long GraphicWindowManager::DoKeyDown(long lKey, char chModifiers) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowCurrent;
	/*bp-0x8*/   int32_t nReturnValue;
	/*bp-0xc*/   /*packed*/ class list<GraphicWindow *>::iterator iterator;

// LINE 219:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 220:
_T26:
	nReturnValue = 0x0;
// LINE 222:
	this->nBusyIteratingCount++;
// LINE 223:
_LOOP_33:
	for (;;) {
// LINE 223:
_LOOP_33:
		__asm        mov    eax, GraphicWindow::listFocusWindows.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T46;
_T46:
		__asm        jmp    _T4b;
_T4b:
		__asm        mov    eax, iterator.node;
		__asm        cmp    [ebp-0x10], eax;
		__asm        jne    _T61;

		__asm        jmp    _T75;

		__asm        jmp    _T61;
_T61:
		__asm        jmp    _T70;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T75;
_T70:
		__asm        jmp    _T7a;
_T75:
		__asm        jmp    _Te5;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Te5;
// LINE 224:
_T89:
		__asm        jmp    _T8e;
_T8e:
		windowCurrent = iterator.node->data;
// LINE 225:
		__asm        mov    eax, windowCurrent;
		__asm        cmp    dword ptr [eax+0x54], 0;
		__asm        je     _Tc2;
// LINE 226:
		__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
		__asm        push   eax;
		__asm        mov    eax, lKey;
		__asm        push   eax;
		__asm        mov    eax, windowCurrent;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, windowCurrent;
		__asm        call   dword ptr [eax+0x84];
		__asm        mov    nReturnValue, eax;
// LINE 227:
		__asm        jmp    _Te5;
// LINE 229:
_Tc2:
		__asm        mov    eax, iterator.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, iterator.node;
		__asm        mov    eax, [eax];
		__asm        mov    iterator.node, eax;
		__asm        jmp    _Td5;
_Td5:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x14], eax;
		__asm        jmp    _Te0;
// LINE 230:
_Te0:
	}
// LINE 231:
_Te5:
	this->nBusyIteratingCount--;
// LINE 232:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T10a;
// LINE 233:
	this->nBusyIteratingCount = 0x0;
// LINE 234:
	this->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 237:
_T10a:
	return nReturnValue;
// LINE 238:
}

// FUNCTION: COPTER_D 0x004a23da
long GraphicWindowManager::DoKeyUp(long lKey, char chModifiers) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowCurrent;
	/*bp-0x8*/   int32_t nReturnValue;
	/*bp-0xc*/   /*packed*/ class list<GraphicWindow *>::iterator iterator;

// LINE 251:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 252:
_T26:
	nReturnValue = 0x0;
// LINE 254:
	this->nBusyIteratingCount++;
// LINE 255:
_LOOP_33:
	for (;;) {
// LINE 255:
_LOOP_33:
		__asm        mov    eax, GraphicWindow::listFocusWindows.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T46;
_T46:
		__asm        jmp    _T4b;
_T4b:
		__asm        mov    eax, [ebp-0x10];
		__asm        cmp    iterator.node, eax;
		__asm        jne    _T61;

		__asm        jmp    _T75;

		__asm        jmp    _T61;
_T61:
		__asm        jmp    _T70;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T75;
_T70:
		__asm        jmp    _T7a;
_T75:
		__asm        jmp    _Te5;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Te5;
// LINE 256:
_T89:
		__asm        jmp    _T8e;
_T8e:
		windowCurrent = iterator.node->data;
// LINE 257:
		__asm        mov    eax, windowCurrent;
		__asm        cmp    dword ptr [eax+0x54], 0;
		__asm        je     _Tc2;
// LINE 258:
		__asm        mov    eax, reinterpret_cast<uint32_t>(chModifiers);
		__asm        push   eax;
		__asm        mov    eax, lKey;
		__asm        push   eax;
		__asm        mov    eax, windowCurrent;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, windowCurrent;
		__asm        call   dword ptr [eax+0x88];
		__asm        mov    nReturnValue, eax;
// LINE 259:
		__asm        jmp    _Te5;
// LINE 261:
_Tc2:
		__asm        mov    eax, iterator.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, iterator.node;
		__asm        mov    eax, [eax];
		__asm        mov    iterator.node, eax;
		__asm        jmp    _Td5;
_Td5:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x14], eax;
		__asm        jmp    _Te0;
// LINE 262:
_Te0:
	}
// LINE 263:
_Te5:
	this->nBusyIteratingCount--;
// LINE 264:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T10a;
// LINE 265:
	this->nBusyIteratingCount = 0x0;
// LINE 266:
	this->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 269:
_T10a:
	return nReturnValue;
// LINE 270:
}

// FUNCTION: COPTER_D 0x004a24f3
long GraphicWindowManager::DoCharacter(long lCharacter) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowCurrent;
	/*bp-0x8*/   int32_t nReturnValue;
	/*bp-0xc*/   /*packed*/ class list<GraphicWindow *>::iterator iterator;

// LINE 278:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 279:
_T26:
	nReturnValue = 0x0;
// LINE 281:
	this->nBusyIteratingCount++;
// LINE 282:
_LOOP_33:
	for (;;) {
// LINE 282:
_LOOP_33:
		__asm        mov    eax, GraphicWindow::listFocusWindows.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T46;
_T46:
		__asm        jmp    _T4b;
_T4b:
		__asm        mov    eax, iterator.node;
		__asm        cmp    [ebp-0x10], eax;
		__asm        jne    _T61;

		__asm        jmp    _T75;

		__asm        jmp    _T61;
_T61:
		__asm        jmp    _T70;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T75;
_T70:
		__asm        jmp    _T7a;
_T75:
		__asm        jmp    _Te1;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Te1;
// LINE 283:
_T89:
		__asm        jmp    _T8e;
_T8e:
		windowCurrent = iterator.node->data;
// LINE 284:
		__asm        mov    eax, windowCurrent;
		__asm        cmp    dword ptr [eax+0x54], 0;
		__asm        je     _Tbe;
// LINE 285:
		__asm        mov    eax, lCharacter;
		__asm        push   eax;
		__asm        mov    eax, windowCurrent;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, windowCurrent;
		__asm        call   dword ptr [eax+0x80];
		__asm        mov    nReturnValue, eax;
// LINE 286:
		__asm        jmp    _Te1;
// LINE 288:
_Tbe:
		__asm        mov    eax, iterator.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, iterator.node;
		__asm        mov    eax, [eax];
		__asm        mov    iterator.node, eax;
		__asm        jmp    _Td1;
_Td1:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x14], eax;
		__asm        jmp    _Tdc;
// LINE 289:
_Tdc:
	}
// LINE 290:
_Te1:
	this->nBusyIteratingCount--;
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jg     _T106;
// LINE 292:
	this->nBusyIteratingCount = 0x0;
// LINE 293:
	this->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 296:
_T106:
	return nReturnValue;
// LINE 297:
}

// FUNCTION: COPTER_D 0x004a2608
long GraphicWindowManager::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 308:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T58;
// LINE 314:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 315:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    __RETURN;
// LINE 320:
_T58:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    __RETURN;
// LINE 321:
__RETURN:
}

// FUNCTION: COPTER_D 0x004a268c
long GraphicWindowManager::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 330:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T58;
// LINE 331:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 332:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    __RETURN;
// LINE 336:
_T58:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    __RETURN;
// LINE 337:
__RETURN:
}

// FUNCTION: COPTER_D 0x004a2710
long GraphicWindowManager::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 344:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T54;
// LINE 345:
	__asm        lea    eax, nCursorY;
	__asm        push   eax;
	__asm        lea    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0xA4];
// LINE 346:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowCursorCapture;
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    __RETURN;
// LINE 350:
_T54:
	__asm        push   0;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    __RETURN;
// LINE 351:
__RETURN:
}

// FUNCTION: COPTER_D 0x004a278e
int32_t GraphicWindowManager::SendCursorMessageToChildWindow(/*unpacked*/ class GraphicWindow *childWindow, int32_t nMessage, long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 361:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, childWindow;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _T196;
// LINE 363:
// Block start:
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator iterator;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T32;
_T32:
	__asm        jmp    __DO_37;
// LINE 365:
__DO_37:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+4];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T4b;
_T4b:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T56;
// LINE 367:
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _T13d;

	__asm        jmp    _T70;
_T70:
	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jle    _Td3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    _Td3;

	__asm        jmp    _Td8;
_Td3:
	__asm        jmp    _T13d;
_Td8:
	__asm        jmp    _Te7;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T13d;
// LINE 369:
_Te7:
	__asm        jmp    _Tec;
_Tec:
	nCursorX -= iterator.node->data-><GraphicWindow+0x10:4>;
// LINE 370:
	__asm        jmp    _T101;
_T101:
	nCursorY -= iterator.node->data-><GraphicWindow+0x14:4>;
// LINE 373:
	__asm        jmp    _T116;
_T116:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, nMessage;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
	__asm        jmp    __RETURN;
// LINE 375:
_T13d:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T153;
_T153:
	__asm        jmp    _T158;
_T158:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x14], eax;
	__asm        jne    _T16e;

	__asm        jmp    _T187;

	__asm        jmp    _T16e;
_T16e:
	__asm        jmp    _T17d;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T187;
_T17d:
	__asm        jmp    __DO_37;

	__asm        jmp    _T187;
_T187:
	__asm        jmp    _T196;
__DO_WHILE_37:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    __DO_37;
// LINE 377:
// Block end:
_T196:
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x7C];
	__asm        test   eax, eax;
	__asm        jne    _T1b0;
// LINE 378:
	return 0x0;
// LINE 380:
_T1b0:
	__asm        cmp    nMessage, 1;
	__asm        jne    _T1de;
// LINE 381:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x8C];
	__asm        jmp    __RETURN;
// LINE 382:
	__asm        jmp    _T231;
_T1de:
	__asm        cmp    nMessage, 2;
	__asm        jne    _T20c;
// LINE 383:
	__asm        mov    eax, nButton;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x90];
	__asm        jmp    __RETURN;
// LINE 384:
	__asm        jmp    _T231;
_T20c:
	__asm        cmp    nMessage, 4;
	__asm        jne    _T231;
// LINE 385:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, childWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, childWindow;
	__asm        call   dword ptr [eax+0x94];
	__asm        jmp    __RETURN;
// LINE 386:
_T231:
	return 0x0;
// LINE 387:
__RETURN:
}

// FUNCTION: COPTER_D 0x004a29cd
int32_t GraphicWindowManager::ComposeAllWindows() {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 401:
	this->nBusyIteratingCount++;
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+8];
	__asm        call   dword ptr [edx+0x18];
	__asm        mov    nReturnValue, eax;
// LINE 403:
	this->nBusyIteratingCount--;
// LINE 404:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T41;
// LINE 405:
	this->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 406:
_T41:
	return nReturnValue;
// LINE 407:
}

// FUNCTION: COPTER_D 0x004a2a1b
int32_t GraphicWindowManager::IsWindowValid(/*unpacked*/ class GraphicWindow *windowToTestForValidity) {
// LINE 415:
	return GraphicWindow::FindWindowA(windowToTestForValidity);
// LINE 416:
}

// FUNCTION: COPTER_D 0x004a2a3f
void GraphicWindow::GraphicWindow() {

	this-><GraphicWindow+0x00:4> = 0x590f2c;
	__asm        jmp    _T1a;
_T1a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T6d;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5f;
_T5f:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T77;
_T6d:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T77:
	this-><GraphicWindow+0x08:4> = 0x0;
	__asm        jmp    _T86;
_T86:
	__asm        jmp    _T8b;
_T8b:
	this-><GraphicWindow+0x10:4> = 0x0;
	this-><GraphicWindow+0x14:4> = 0x0;
	this-><GraphicWindow+0x18:4> = 0x0;
	this-><GraphicWindow+0x1c:4> = 0x0;
	__asm        jmp    _Tb8;
_Tb8:
	__asm        jmp    _Tbd;
_Tbd:
	this-><GraphicWindow+0x20:4> = 0x0;
	this-><GraphicWindow+0x24:4> = 0x0;
	this-><GraphicWindow+0x28:4> = 0x0;
	this-><GraphicWindow+0x2c:4> = 0x0;
	__asm        jmp    _Tea;
_Tea:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T126;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T303;
_T126:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2ee;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        jne    _T185;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T17b;
_T17b:
	exit(0x1);
_T185:
	__asm        jmp    _T18a;
_T18a:
	__asm        jmp    _T18f;
_T18f:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1ca;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1d0;
_T1ca:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1d0:
	__asm        jmp    _T1d5;
_T1d5:
	__asm        jmp    _T1da;
_T1da:
	__asm        jmp    _T1df;
_T1df:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x74];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    _T23d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T233;
_T233:
	exit(0x1);
_T23d:
	__asm        jmp    _T242;
_T242:
	__asm        jmp    _T247;
_T247:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2a4;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T2aa;
_T2a4:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
_T2aa:
	__asm        jmp    _T2af;
_T2af:
	__asm        jmp    _T2b4;
_T2b4:
	__asm        jmp    _T2b9;
_T2b9:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T2d4;
_T2d4:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x30], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T303;
_T2ee:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x78], eax;
_T303:
	__asm        jmp    _T308;
_T308:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T333;
_T333:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T386;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T378;
_T378:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T390;
_T386:
	this-><GraphicWindow+0x60:4> = 0x0;
_T390:
	this-><GraphicWindow+0x5c:4> = 0x0;
	__asm        jmp    _T39f;
_T39f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T3f2;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3e4;
_T3e4:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3fc;
_T3f2:
	this-><GraphicWindow+0x68:4> = 0x0;
_T3fc:
	this-><GraphicWindow+0x64:4> = 0x0;
	__asm        jmp    _T40b;
_T40b:
	__asm        jmp    _T410;
_T410:
	this-><GraphicWindow+0x00:4> = 0x591680;
// LINE 445:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T438;
_T438:
	__asm        jmp    _T43d;
_T43d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T455;
_T455:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listValidWindows.length, 1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T4a2;
_T4a2:
	__asm        jmp    _T4a7;
_T4a7:
	__asm        jmp    _T4ac;
// LINE 446:
_T4ac:
	this-><GraphicWindow+0x3c:4> = 0x0;
// LINE 447:
	this-><GraphicWindow+0x40:4> = 0x0;
// LINE 448:
	this-><GraphicWindow+0x44:4> = 0x0;
// LINE 449:
	this-><GraphicWindow+0x48:4> = 0x1;
// LINE 450:
	this-><GraphicWindow+0x4c:4> = 0x0;
// LINE 451:
	this-><GraphicWindow+0x04:4> = 0x0;
// LINE 452:
	this-><GraphicWindow+0x50:4> = 0x1;
// LINE 453:
	this-><GraphicWindow+0x54:4> = 0x1;
// LINE 454:
	this-><GraphicWindow+0x6c:4> = 0x0;
// LINE 455:
	this-><GraphicWindow+0x58:4> = 0xffffffff;
// LINE 456:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a2f5c
void GraphicWindow::GraphicWindow(const /*unpacked*/ class GraphicWindow& copyGraphicWindow) {

	this-><GraphicWindow+0x00:4> = 0x590f2c;
	__asm        jmp    _T1d;
_T1d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T70;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T62;
_T62:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T7a;
_T70:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T7a:
	this-><GraphicWindow+0x08:4> = 0x0;
	__asm        jmp    _T89;
_T89:
	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _T93;
_T93:
	__asm        jmp    _T98;
_T98:
	__asm        jmp    _T9d;
_T9d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _Td9;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2b6;
_Td9:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2a1;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T138;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T12e;
_T12e:
	exit(0x1);
_T138:
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T17d;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T183;
_T17d:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
_T183:
	__asm        jmp    _T188;
_T188:
	__asm        jmp    _T18d;
_T18d:
	__asm        jmp    _T192;
_T192:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    _T1f0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1e6;
_T1e6:
	exit(0x1);
_T1f0:
	__asm        jmp    _T1f5;
_T1f5:
	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T257;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T25d;
_T257:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
_T25d:
	__asm        jmp    _T262;
_T262:
	__asm        jmp    _T267;
_T267:
	__asm        jmp    _T26c;
_T26c:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T287;
_T287:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2b6;
_T2a1:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
_T2b6:
	__asm        jmp    _T2bb;
_T2bb:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2e6;
_T2e6:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T339;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T32b;
_T32b:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T343;
_T339:
	this-><GraphicWindow+0x60:4> = 0x0;
_T343:
	this-><GraphicWindow+0x5c:4> = 0x0;
	__asm        jmp    _T352;
_T352:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T3a5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T397;
_T397:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3af;
_T3a5:
	this-><GraphicWindow+0x68:4> = 0x0;
_T3af:
	this-><GraphicWindow+0x64:4> = 0x0;
	__asm        jmp    _T3be;
_T3be:
	__asm        jmp    _T3c3;
_T3c3:
	this-><GraphicWindow+0x00:4> = 0x591680;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T3eb;
_T3eb:
	__asm        jmp    _T3f0;
_T3f0:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T408;
_T408:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T416;
_T416:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T42f;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T42f;
_T42f:
	__asm        jmp    _T434;
_T434:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    GraphicWindow::listValidWindows.length;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T46d;
_T46d:
	__asm        jmp    _T472;
_T472:
	__asm        jmp    _T477;
// LINE 466:
_T477:
	this->GraphicWindow::operator=(copyGraphicWindow);
// LINE 467:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a33ee
void GraphicWindow::GraphicWindow(/*packed*/ class MRect& rectNewWindow, long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this-><GraphicWindow+0x00:4> = 0x590f2c;
	__asm        jmp    _T1d;
_T1d:
	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T79;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T6b;
_T6b:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T83;
_T79:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T83:
	this-><GraphicWindow+0x08:4> = 0x0;
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T10c;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2e9;
_T10c:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T2d4;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T16b;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T161;
_T161:
	exit(0x1);
_T16b:
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x40], 0x155;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        lea    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1b0;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T1b6;
_T1b0:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x50], eax;
_T1b6:
	__asm        jmp    _T1bb;
_T1bb:
	__asm        jmp    _T1c0;
_T1c0:
	__asm        jmp    _T1c5;
_T1c5:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x78];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    _T223;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T219;
_T219:
	exit(0x1);
_T223:
	__asm        jmp    _T228;
_T228:
	__asm        jmp    _T22d;
_T22d:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x54], 0x155;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    dword ptr [ebp-0x58], 1;
	__asm        lea    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T28a;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T290;
_T28a:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
_T290:
	__asm        jmp    _T295;
_T295:
	__asm        jmp    _T29a;
_T29a:
	__asm        jmp    _T29f;
_T29f:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x34], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T2e9;
_T2d4:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x38], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x7C], eax;
_T2e9:
	__asm        jmp    _T2ee;
_T2ee:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T319;
_T319:
	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T37e;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T370;
_T370:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T388;
_T37e:
	this-><GraphicWindow+0x60:4> = 0x0;
_T388:
	this-><GraphicWindow+0x5c:4> = 0x0;
	__asm        jmp    _T397;
_T397:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T3ea;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3dc;
_T3dc:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3f4;
_T3ea:
	this-><GraphicWindow+0x68:4> = 0x0;
_T3f4:
	this-><GraphicWindow+0x64:4> = 0x0;
	__asm        jmp    _T403;
_T403:
	__asm        jmp    _T408;
_T408:
	this-><GraphicWindow+0x00:4> = 0x591680;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T430;
_T430:
	__asm        jmp    _T435;
_T435:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T44d;
_T44d:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T45b;
_T45b:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T474;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T474;
_T474:
	__asm        jmp    _T479;
_T479:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        inc    GraphicWindow::listValidWindows.length;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T4b2;
_T4b2:
	__asm        jmp    _T4b7;
_T4b7:
	__asm        jmp    _T4bc;
// LINE 482:
_T4bc:
	this-><GraphicWindow+0x40:4> = 0x0;
// LINE 483:
	this-><GraphicWindow+0x44:4> = 0x0;
// LINE 484:
	this-><GraphicWindow+0x48:4> = 0x1;
// LINE 485:
	this-><GraphicWindow+0x4c:4> = 0x0;
// LINE 486:
	this-><GraphicWindow+0x50:4> = 0x1;
// LINE 487:
	this-><GraphicWindow+0x54:4> = 0x1;
// LINE 488:
	this-><GraphicWindow+0x6c:4> = 0x0;
// LINE 489:
	this-><GraphicWindow+0x58:4> = 0xffffffff;
// LINE 490:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     _T538;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T538;
// LINE 491:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 492:
_T538:
	this->GraphicWindow::SetImageToDrawOnto();
// LINE 493:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a393d
void GraphicWindow::GraphicWindow(char * szImageFileName, /*packed*/ class MRect& rectNewWindow, long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t nNewTransparentIndex) {

	this-><GraphicWindow+0x00:4> = 0x590f2c;
	__asm        jmp    _T23;
_T23:
	__asm        mov    eax, lNewID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T85;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T74;
_T74:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T92;
_T85:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T92:
	this-><GraphicWindow+0x08:4> = 0x0;
	__asm        jmp    _Ta4;
_Ta4:
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, rectNewWindow;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        inc    list<GraphicWindow *>::number_of_lists;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T12a;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T319;
_T12a:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T301;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        jne    _T189;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T17f;
_T17f:
	exit(0x1);
_T189:
	__asm        jmp    _T18e;
_T18e:
	__asm        jmp    _T193;
_T193:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x155;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1ce;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T1d4;
_T1ce:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
_T1d4:
	__asm        jmp    _T1d9;
_T1d9:
	__asm        jmp    _T1de;
_T1de:
	__asm        jmp    _T1e3;
_T1e3:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x88];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    _T24d;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T243;
_T243:
	exit(0x1);
_T24d:
	__asm        jmp    _T252;
_T252:
	__asm        jmp    _T257;
_T257:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x64], 0x155;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2b4;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2ba;
_T2b4:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
_T2ba:
	__asm        jmp    _T2bf;
_T2bf:
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2c9;
_T2c9:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T2e4;
_T2e4:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x44], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T319;
_T301:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x48], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x8C], eax;
_T319:
	__asm        jmp    _T31e;
_T31e:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T35b;
_T35b:
	__asm        mov    eax, myNewOwner;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, nNewTransparentIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3d5;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3c4;
_T3c4:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T3e2;
_T3d5:
	this-><GraphicWindow+0x60:4> = 0x0;
_T3e2:
	this-><GraphicWindow+0x5c:4> = 0x0;
	__asm        jmp    _T3f4;
_T3f4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T44a;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T439;
_T439:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T457;
_T44a:
	this-><GraphicWindow+0x68:4> = 0x0;
_T457:
	this-><GraphicWindow+0x64:4> = 0x0;
	__asm        jmp    _T469;
_T469:
	__asm        jmp    _T46e;
_T46e:
	this-><GraphicWindow+0x00:4> = 0x591680;
// LINE 514:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T49c;
_T49c:
	__asm        jmp    _T4a1;
_T4a1:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    ecx, 0x6069A0;
	__asm        call   list<GraphicWindow *>::get_node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T4b9;
_T4b9:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listValidWindows.length, 1;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T506;
_T506:
	__asm        jmp    _T50b;
_T50b:
	__asm        jmp    _T510;
// LINE 515:
_T510:
	__asm        jmp    _T515;
_T515:
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T560;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T551;
_T551:
	exit(0x1);
	__asm        jmp    _T560;
_T560:
	__asm        jmp    _T565;
_T565:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T59c;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T5f1;

	__asm        jmp    _T587;
_T587:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T5f1;
_T59c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T5cb;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T5d2;
_T5cb:
	__asm        mov    dword ptr [ebp-0xC], 0;
_T5d2:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T627;
_T5f1:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T627;

	__asm        jmp    _T600;
_T600:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T627;
_T627:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T63b;
_T63b:
	__asm        jmp    _T640;
// LINE 516:
_T640:
	this-><GraphicWindow+0x40:4> = 0x0;
// LINE 517:
	this-><GraphicWindow+0x44:4> = 0x0;
// LINE 518:
	this-><GraphicWindow+0x4c:4> = 0x0;
// LINE 519:
	this-><GraphicWindow+0x50:4> = 0x1;
// LINE 520:
	this-><GraphicWindow+0x48:4> = 0x1;
// LINE 521:
	this-><GraphicWindow+0x54:4> = 0x1;
// LINE 522:
	this-><GraphicWindow+0x6c:4> = 0x0;
// LINE 523:
	__asm        cmp    bAddToParentList, 0;
	__asm        je     _T6d3;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T6d3;
// LINE 524:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x54];
// LINE 525:
_T6d3:
	this->GraphicWindow::GetImagePath();
// LINE 526:
	this->GraphicWindow::CreateImage(0x1);
// LINE 527:
	this->GraphicWindow::SetImageToDrawOnto();
// LINE 528:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a4045
void GraphicWindow::~GraphicWindow() {

	this-><GraphicWindow+0x00:4> = 0x591680;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T48;
_T48:
	__asm        jmp    _T4d;
_T4d:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T66;
_T66:
	__asm        jmp    _LOOP_6b;
_LOOP_6b:
	for (;;) {
_LOOP_6b:
		__asm        mov    eax, [ebp-0x7C];
		__asm        cmp    [ebp-0x78], eax;
		__asm        jne    _T81;

		__asm        jmp    _T98;

		__asm        jmp    _T81;
_T81:
		__asm        jmp    _T93;

		__asm        cmp    dword ptr [ebp-0x84], 0;
		__asm        jne    _T98;
_T93:
		__asm        jmp    _T9d;
_T98:
		__asm        jmp    _Tf1;
_T9d:
		__asm        jmp    _Taf;

		__asm        cmp    dword ptr [ebp-0x88], 0;
		__asm        je     _Tf1;
_Taf:
		__asm        mov    eax, [ebp-0x7C];
		__asm        mov    [ebp-0x80], eax;
		__asm        mov    eax, [ebp-0x80];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x80], eax;
		__asm        jmp    _Tc2;
_Tc2:
		__asm        jmp    _Tc7;
_Tc7:
		__asm        mov    eax, [ebp-0x7C];
		__asm        mov    ecx, [ebp-8];
		__asm        mov    ecx, [ecx];
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _Te6;

		__asm        mov    eax, [ebp-0x7C];
		__asm        push   eax;
		__asm        mov    ecx, 0x6069A0;
		__asm        call   list<GraphicWindow *>::erase;
_Te6:
		__asm        mov    eax, [ebp-0x80];
		__asm        mov    [ebp-0x7C], eax;
		__asm        jmp    _LOOP_6b;
	}
_Tf1:
	__asm        jmp    _Tf6;
// LINE 539:
_Tf6:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T10c;

	__asm        jmp    _T111;
_T10c:
	__asm        jmp    _T132;
_T111:
	__asm        jmp    _T120;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T132;
// LINE 540:
_T120:
	this->GraphicWindow::CaptureCursorEnd(this);
// LINE 541:
_T132:
GraphicWindow::RemoveFocus(this);
// LINE 542:
GraphicWindow::RemoveModal(this);
// LINE 543:
	this->GraphicWindow::DeleteAllChildren();
// LINE 544:
	this->GraphicWindow::DestroyImage();
// LINE 554:
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T200;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T200;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e0;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
_T1e0:
	__asm        jmp    _T1e5;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1fb;
_T1fb:
	__asm        jmp    _T200;
_T200:
	__asm        jmp    _T205;
_T205:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T233;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T233:
	__asm        jmp    _T238;
_T238:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2cd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2cd;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ad;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T2ad:
	__asm        jmp    _T2b2;
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2c8;
_T2c8:
	__asm        jmp    _T2cd;
_T2cd:
	__asm        jmp    _T2d2;
_T2d2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T300;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T300:
	__asm        jmp    _T305;
_T305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T31c;
_T31c:
	__asm        jmp    _T321;
_T321:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T33a;
_T33a:
	__asm        jmp    _T33f;
_T33f:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x74], eax;
_LOOP_34b:
	for (;;) {
_LOOP_34b:
		__asm        mov    eax, [ebp-0x70];
		__asm        cmp    [ebp-0x74], eax;
		__asm        jne    _T361;

		__asm        jmp    _T375;

		__asm        jmp    _T361;
_T361:
		__asm        jmp    _T370;

		__asm        cmp    dword ptr [ebp-0x68], 0;
		__asm        jne    _T375;
_T370:
		__asm        jmp    _T37a;
_T375:
		__asm        jmp    _T3ad;
_T37a:
		__asm        jmp    _T389;

		__asm        cmp    dword ptr [ebp-0x6C], 0;
		__asm        je     _T3ad;
_T389:
		__asm        push   0;
		__asm        lea    eax, [ebp-0x64];
		__asm        push   eax;
		__asm        lea    ecx, [ebp-0x74];
		__asm        call   list<GraphicWindow *>::iterator::operator++;
		__asm        mov    eax, [eax];
		__asm        push   eax;
		__asm        mov    ecx, this;
		__asm        add    ecx, 0x30;
		__asm        call   list<GraphicWindow *>::erase;
		__asm        jmp    _LOOP_34b;
	}
_T3ad:
	__asm        jmp    _T3b2;
_T3b2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        jmp    _T3d5;
_T3d5:
	__asm        dec    list<GraphicWindow *>::number_of_lists;
	__asm        jne    _T3ef;

	(this + 0x30)->list<GraphicWindow *>::deallocate_buffers();
_T3ef:
	__asm        jmp    _T3f4;
_T3f4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T452;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T452;

	__asm        mov    ecx, [ebp-0x48];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T43c;
_T43c:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T44d;
_T44d:
	__asm        jmp    _T452;
_T452:
	__asm        jmp    _T457;
_T457:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T485;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T485:
	return;
}

// FUNCTION: COPTER_D 0x004a44d4
int32_t GraphicWindow::Initialize() {
// LINE 561:
	return 0x1;
// LINE 562:
}

// FUNCTION: COPTER_D 0x004a44ef
class GraphicWindow & GraphicWindow::operator=(const /*unpacked*/ class GraphicWindow& copyGraphicWindow) {
// LINE 605:
	__asm        mov    eax, copyGraphicWindow;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 606:
	return this;
// LINE 608:
_T20:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 609:
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 610:
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        cmp    eax, ecx;
	__asm        je     _T249;

	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::begin;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T9b;
_T9b:
	__asm        jmp    _Ta0;
_Ta0:
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::begin;
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Tc3;
_Tc3:
	__asm        jmp    _LOOP_c8;
_LOOP_c8:
	for (;;) {
_LOOP_c8:
		__asm        mov    eax, [ebp-0x2C];
		__asm        cmp    [ebp-0x30], eax;
		__asm        jne    _Tde;

		__asm        jmp    _Tf2;

		__asm        jmp    _Tde;
_Tde:
		__asm        jmp    _Ted;

		__asm        cmp    dword ptr [ebp-0x60], 0;
		__asm        jne    _Tf2;
_Ted:
		__asm        jmp    _Tf7;
_Tf2:
		__asm        jmp    _T198;
_Tf7:
		__asm        jmp    _T106;

		__asm        cmp    dword ptr [ebp-0x64], 0;
		__asm        je     _T198;
_T106:
		__asm        mov    eax, [ebp-0x28];
		__asm        cmp    [ebp-0x34], eax;
		__asm        jne    _T11c;

		__asm        jmp    _T130;

		__asm        jmp    _T11c;
_T11c:
		__asm        jmp    _T12b;

		__asm        cmp    dword ptr [ebp-0x68], 0;
		__asm        jne    _T130;
_T12b:
		__asm        jmp    _T135;
_T130:
		__asm        jmp    _T198;
_T135:
		__asm        jmp    _T144;

		__asm        cmp    dword ptr [ebp-0x6C], 0;
		__asm        je     _T198;
_T144:
		__asm        push   0;
		__asm        lea    eax, [ebp-0x38];
		__asm        push   eax;
		__asm        lea    ecx, [ebp-0x2C];
		__asm        call   list<GraphicWindow *>::iterator::operator++;
		__asm        mov    [ebp-0x70], eax;
		__asm        mov    eax, [ebp-0x70];
		__asm        mov    eax, [eax];
		__asm        add    eax, 8;
		__asm        mov    [ebp-0x40], eax;
		__asm        jmp    _T165;
_T165:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x5C], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x28], eax;
		__asm        jmp    _T178;
_T178:
		__asm        mov    eax, [ebp-0x5C];
		__asm        mov    [ebp-0x3C], eax;
		__asm        jmp    _T183;
_T183:
		__asm        jmp    _T188;
_T188:
		__asm        mov    eax, [ebp-0x3C];
		__asm        mov    eax, [eax+8];
		__asm        mov    ecx, [ebp-0x40];
		__asm        mov    [ecx], eax;
		__asm        jmp    _LOOP_c8;
	}
_T198:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x34], eax;
	__asm        jne    _T1a9;

	__asm        jmp    _T1ae;
_T1a9:
	__asm        jmp    _T232;
_T1ae:
	__asm        jmp    _T1bd;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T232;
_T1bd:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x58], eax;
_LOOP_1c9:
	for (;;) {
_LOOP_1c9:
		__asm        mov    eax, [ebp-0x54];
		__asm        cmp    [ebp-0x58], eax;
		__asm        jne    _T1df;

		__asm        jmp    _T1f3;

		__asm        jmp    _T1df;
_T1df:
		__asm        jmp    _T1ee;

		__asm        cmp    dword ptr [ebp-0x4C], 0;
		__asm        jne    _T1f3;
_T1ee:
		__asm        jmp    _T1f8;
_T1f3:
		__asm        jmp    _T228;
_T1f8:
		__asm        jmp    _T207;

		__asm        cmp    dword ptr [ebp-0x50], 0;
		__asm        je     _T228;
_T207:
		__asm        push   0;
		__asm        lea    eax, [ebp-0x48];
		__asm        push   eax;
		__asm        lea    ecx, [ebp-0x58];
		__asm        call   list<GraphicWindow *>::iterator::operator++;
		__asm        mov    eax, [eax];
		__asm        push   eax;
		__asm        mov    ecx, this;
		__asm        add    ecx, 0x30;
		__asm        call   list<GraphicWindow *>::erase;
		__asm        jmp    _LOOP_1c9;
	}
_T228:
	__asm        jmp    _T22d;
_T22d:
	__asm        jmp    _T249;
_T232:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   list<GraphicWindow *>::insert;
_T249:
	__asm        jmp    _T24e;
// LINE 611:
_T24e:
	this-><GraphicWindow+0x3c:4> = copyGraphicWindow.<GraphicWindow+0x3c:4>;
// LINE 612:
	this-><GraphicWindow+0x40:4> = copyGraphicWindow.<GraphicWindow+0x40:4>;
// LINE 613:
	this-><GraphicWindow+0x44:4> = copyGraphicWindow.<GraphicWindow+0x44:4>;
// LINE 614:
	this-><GraphicWindow+0x48:4> = copyGraphicWindow.<GraphicWindow+0x48:4>;
// LINE 615:
	this-><GraphicWindow+0x4c:4> = copyGraphicWindow.<GraphicWindow+0x4c:4>;
// LINE 616:
	this-><GraphicWindow+0x04:4> = copyGraphicWindow.<GraphicWindow+0x04:4>;
// LINE 617:
	this-><GraphicWindow+0x50:4> = copyGraphicWindow.<GraphicWindow+0x50:4>;
// LINE 618:
	this-><GraphicWindow+0x54:4> = copyGraphicWindow.<GraphicWindow+0x54:4>;
// LINE 619:
	this-><GraphicWindow+0x6c:4> = copyGraphicWindow.<GraphicWindow+0x6c:4>;
// LINE 620:
	this-><GraphicWindow+0x70:4> = copyGraphicWindow.<GraphicWindow+0x70:4>;
// LINE 621:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
// LINE 622:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x64;
	__asm        cmp    eax, ecx;
	__asm        je     _T3c1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T341;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T341;

	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T32b;
_T32b:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T33c;
_T33c:
	__asm        jmp    _T341;
_T341:
	__asm        jmp    _T346;
_T346:
	__asm        jmp    _T34b;
_T34b:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T375;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T3c1;
_T375:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3b7;

	__asm        jmp    _T391;
_T391:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T3c1;
_T3b7:
	this-><GraphicWindow+0x68:4> = 0x0;
_T3c1:
	__asm        jmp    _T3c6;
// LINE 623:
_T3c6:
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 0x5C;
	__asm        cmp    eax, ecx;
	__asm        je     _T4af;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T42f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T42f;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T419;
_T419:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T42a;
_T42a:
	__asm        jmp    _T42f;
_T42f:
	__asm        jmp    _T434;
_T434:
	__asm        jmp    _T439;
_T439:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T463;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T4af;
_T463:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T4a5;

	__asm        jmp    _T47f;
_T47f:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T4af;
_T4a5:
	this-><GraphicWindow+0x60:4> = 0x0;
_T4af:
	__asm        jmp    _T4b4;
// LINE 624:
_T4b4:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        mov    ecx, copyGraphicWindow;
	__asm        add    ecx, 8;
	__asm        cmp    eax, ecx;
	__asm        je     _T59d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T51d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T51d;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T507;
_T507:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T518;
_T518:
	__asm        jmp    _T51d;
_T51d:
	__asm        jmp    _T522;
_T522:
	__asm        jmp    _T527;
_T527:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T551;

	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T59d;
_T551:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T593;

	__asm        jmp    _T56d;
_T56d:
	__asm        mov    eax, copyGraphicWindow;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyGraphicWindow;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T59d;
_T593:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T59d:
	__asm        jmp    _T5a2;
// LINE 625:
_T5a2:
	return this;
// LINE 626:
}

// FUNCTION: COPTER_D 0x004a4aa0
int32_t GraphicWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 642:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        jne    _T2e;

	__asm        jmp    _T1e;
_T1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T38;
// LINE 643:
_T2e:
	return 0x1;
// LINE 645:
_T38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB4];
// LINE 646:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T17d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T88;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T88:
	__asm        jmp    _T8d;
_T8d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _Tab;
_Tab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T124;

	__asm        jmp    _Tc0;
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tf6;

	__asm        jmp    _Tf6;
_Tea:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T124;
_T124:
	__asm        jmp    _T129;
_T129:
	__asm        mov    byte ptr [ebp-0xC], 0;
	__asm        jmp    _T132;
_T132:
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T13d;
_T13d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    _T15e;
_T15e:
	__asm        jmp    _T163;
_T163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T187;
_T17d:
	this-><GraphicWindow+0x40:4> = 0x0;
// LINE 647:
_T187:
	__asm        cmp    bResizeWindowToFitImage, 0;
	__asm        je     _T1f9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T1f9;
// LINE 648:
	__asm        jmp    _T1a3;
_T1a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 649:
	__asm        jmp    _T1bd;
_T1bd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 650:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T1f9;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 653:
_T1f9:
	return this-><GraphicWindow+0x40:4>;
// LINE 654:
}

// FUNCTION: COPTER_D 0x004a4cab
void GraphicWindow::DestroyImage() {
// LINE 664:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T67;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _T67;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5d;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T58;
_T58:
	__asm        jmp    _T5d;
// LINE 666:
_T5d:
	this-><GraphicWindow+0x40:4> = 0x0;
// LINE 668:
_T67:
	return;
}

// FUNCTION: COPTER_D 0x004a4d1c
void GraphicWindow::SetTransparentColor(int32_t nPaletteIndex) {
// LINE 677:
	this-><GraphicWindow+0x58:4> = nPaletteIndex;
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T41;
// LINE 679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 680:
	__asm        jmp    _T56;
// LINE 681:
_T41:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 682:
_T56:
	return;
}

// FUNCTION: COPTER_D 0x004a4d7e
void GraphicWindow::MoveWindow(int32_t nXPosition, int32_t nYPosition) {
// LINE 691:
	__asm        mov    eax, nXPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, nYPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x10], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x18], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x1C], eax;
	__asm        jmp    _T4d;
// LINE 692:
_T4d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 693:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 694:
	return;
}

// FUNCTION: COPTER_D 0x004a4df1
void GraphicWindow::SetWidthAndHeight(int32_t nNewWidth, int32_t nNewHeight) {
// LINE 702:
	__asm        cmp    nNewWidth, 0xFFFFFFFF;
	__asm        je     _T25;
// LINE 703:
	this-><GraphicWindow+0x18:4> = (this-><GraphicWindow+0x10:4> + nNewWidth);
// LINE 704:
_T25:
	__asm        cmp    nNewHeight, 0xFFFFFFFF;
	__asm        je     _T3e;
// LINE 705:
	this-><GraphicWindow+0x1c:4> = (this-><GraphicWindow+0x14:4> + nNewHeight);
// LINE 706:
_T3e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 707:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 708:
	return;
}

// FUNCTION: COPTER_D 0x004a4e55
void GraphicWindow::CenterWindow(/*unpacked*/ class GraphicWindow *windowToCenterOn) {
// LINE 716:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, windowToCenterOn;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowToCenterOn;
	__asm        sub    eax, [ecx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
// LINE 717:
	return;
}

// FUNCTION: COPTER_D 0x004a4ea8
void GraphicWindow::CenterWindow(int32_t nXPosition, int32_t nYPosition) {
	/*bp-0x4*/   int32_t nNewYPosition;
	/*bp-0x8*/   int32_t nNewXPosition;

// LINE 733:
	__asm        cmp    nXPosition, 0xFFFFFFFF;
	__asm        je     _T5a;
// LINE 734:
	__asm        jmp    _T1b;
_T1b:
	__asm        mov    ecx, nXPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x10];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewXPosition, ecx;
// LINE 735:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewXPosition;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     _T5a;
// LINE 736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, nNewXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 738:
_T5a:
	__asm        cmp    nYPosition, 0xFFFFFFFF;
	__asm        je     _Ta8;
// LINE 739:
	__asm        jmp    _T69;
_T69:
	__asm        mov    ecx, nYPosition;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nNewYPosition, ecx;
// LINE 740:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewYPosition;
	__asm        cmp    [eax+0x14], ecx;
	__asm        je     _Ta8;
// LINE 741:
	__asm        mov    eax, nNewYPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 743:
_Ta8:
	return;
}

// FUNCTION: COPTER_D 0x004a4f5c
int32_t GraphicWindow::FitRectToWindow(/*packed*/ class MRect& rectToFit) {
	/*bp-0x10*/  /*packed*/ class MRect rectTempCurrentWindow; // 0x10 bytes

// LINE 756:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectTempCurrentWindow.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 759:
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    [ebp-0x18], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.left, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    rectTempCurrentWindow.right, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.top, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    rectTempCurrentWindow.bottom, eax;
	__asm        jmp    _T58;
// LINE 760:
_T58:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.left;
	__asm        cmp    [eax], ecx;
	__asm        jge    _T87;
// LINE 761:
	rectToFit.left += ((rectTempCurrentWindow.left - rectToFit.left) + 0x5);
// LINE 762:
	rectToFit.right += ((rectTempCurrentWindow.left - rectToFit.left) + 0x5);
// LINE 764:
_T87:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.top;
	__asm        cmp    [eax+4], ecx;
	__asm        jge    _Tba;
// LINE 765:
	rectToFit.top += ((rectTempCurrentWindow.top - rectToFit.top) + 0x5);
// LINE 766:
	rectToFit.bottom += ((rectTempCurrentWindow.top - rectToFit.top) + 0x5);
// LINE 768:
_Tba:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.right;
	__asm        cmp    [eax+8], ecx;
	__asm        jle    _Tec;
// LINE 769:
	rectToFit.left += ((rectTempCurrentWindow.right - rectToFit.right) - 0x5);
// LINE 770:
	rectToFit.right += ((rectTempCurrentWindow.right - rectToFit.right) - 0x5);
// LINE 772:
_Tec:
	__asm        mov    eax, rectToFit;
	__asm        mov    ecx, rectTempCurrentWindow.bottom;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    _T11f;
// LINE 773:
	rectToFit.top += ((rectTempCurrentWindow.bottom - rectToFit.bottom) - 0x5);
// LINE 774:
	rectToFit.bottom += ((rectTempCurrentWindow.bottom - rectToFit.bottom) - 0x5);
// LINE 777:
_T11f:
	__asm        jmp    _T124;
_T124:
	__asm        jmp    _T129;
_T129:
	__asm        mov    eax, rectTempCurrentWindow.right;
	__asm        sub    eax, rectTempCurrentWindow.left;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     _T176;

	__asm        jmp    _T14a;
_T14a:
	__asm        jmp    _T14f;
_T14f:
	__asm        mov    eax, rectTempCurrentWindow.bottom;
	__asm        sub    eax, rectTempCurrentWindow.top;
	__asm        mov    ecx, rectToFit;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, rectToFit;
	__asm        sub    ecx, [edx+4];
	__asm        add    ecx, 5;
	__asm        cmp    eax, ecx;
	__asm        jl     _T176;

	__asm        mov    eax, 1;
	__asm        jmp    _T178;
_T176:
	__asm        xor    eax, eax;
_T178:
	__asm        jmp    __RETURN;
// LINE 778:
__RETURN:
}

// FUNCTION: COPTER_D 0x004a50e0
void GraphicWindow::SetChanged(int32_t bChanged, int32_t bRecursive) {
// LINE 787:
	this-><GraphicWindow+0x48:4> = bChanged;
// LINE 788:
	__asm        cmp    bRecursive, 0;
	__asm        je     _Te4;
// LINE 789:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _Te4;
// LINE 790:
// Block start:
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T42;
_T42:
	__asm        jmp    _LOOP_47;
// LINE 791:
_LOOP_47:
	for (;;) {
// LINE 791:
_LOOP_47:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T5b;
_T5b:
		__asm        jmp    _T60;
_T60:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T76;

		__asm        jmp    _T8a;

		__asm        jmp    _T76;
_T76:
		__asm        jmp    _T85;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T8a;
_T85:
		__asm        jmp    _T8f;
_T8a:
		__asm        jmp    _Te4;
_T8f:
		__asm        jmp    _T9e;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Te4;
// LINE 792:
_T9e:
		__asm        jmp    _Ta3;
_Ta3:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        push   1;
		__asm        push   1;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+0x30];
// LINE 793:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Td4;
_Td4:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tdf;
// LINE 794:
_Tdf:
	}
// LINE 797:
// Block end:
_Te4:
	return;
}

// FUNCTION: COPTER_D 0x004a51d0
void GraphicWindow::SetWindowTitle(/*packed*/ class basic_string<char>& sNewWindowTitle) {
// LINE 809:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewWindowTitle;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewWindowTitle;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this-><GraphicWindow+0x0c:4> = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 810:
_T1d3:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 811:
	return;
}

// FUNCTION: COPTER_D 0x004a53be
int32_t GraphicWindow::AddChild(/*unpacked*/ class GraphicWindow *windowNewChild) {
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T57;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T234;
_T57:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T21f;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tb6;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tac;
_Tac:
	exit(0x1);
_Tb6:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tfb;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T101;
_Tfb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T101:
	__asm        jmp    _T106;
_T106:
	__asm        jmp    _T10b;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T16e;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T164;
_T164:
	exit(0x1);
_T16e:
	__asm        jmp    _T173;
_T173:
	__asm        jmp    _T178;
_T178:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1d5;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1db;
_T1d5:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1db:
	__asm        jmp    _T1e0;
_T1e0:
	__asm        jmp    _T1e5;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T205;
_T205:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T234;
_T21f:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T234:
	__asm        jmp    _T239;
_T239:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T244;
_T244:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T252;
_T252:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T269;

	__asm        mov    eax, windowNewChild;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T269;
_T269:
	__asm        jmp    _T26e;
_T26e:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x34];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2a7;
_T2a7:
	__asm        jmp    _T2ac;
_T2ac:
	__asm        jmp    _T2b1;
// LINE 819:
_T2b1:
	__asm        mov    eax, windowNewChild;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowNewChild;
	__asm        call   dword ptr [eax+0x1C];
// LINE 820:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 821:
	return 0x1;
// LINE 822:
}

// FUNCTION: COPTER_D 0x004a569a
int32_t GraphicWindow::DeleteChild(/*unpacked*/ class GraphicWindow *windowChild) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;
	/*bp-0x8*/   int32_t nReturnValue;

// LINE 831:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 832:
_T27:
	nReturnValue = 0x0;
// LINE 835:
_LOOP_2e:
	for (;;) {
// LINE 835:
_LOOP_2e:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T42;
_T42:
		__asm        jmp    _T47;
_T47:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-0xC], eax;
		__asm        jne    _T5d;

		__asm        jmp    _T71;

		__asm        jmp    _T5d;
_T5d:
		__asm        jmp    _T6c;

		__asm        cmp    dword ptr [ebp-0x28], 0;
		__asm        jne    _T71;
_T6c:
		__asm        jmp    _T76;
_T71:
		__asm        jmp    _T18e;
_T76:
		__asm        jmp    _T85;

		__asm        cmp    dword ptr [ebp-0x2C], 0;
		__asm        je     _T18e;
// LINE 836:
_T85:
		__asm        jmp    _T8a;
_T8a:
		__asm        mov    eax, i.node;
		__asm        mov    ecx, windowChild;
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _T16b;
// LINE 840:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tac;
_Tac:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Tb7;
_Tb7:
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Tdd;
_Tdd:
		__asm        jmp    _Te2;
_Te2:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Tf9;
_Tf9:
		this-><GraphicWindow+0x34:4>--;
		__asm        jmp    _T104;
// LINE 841:
_T104:
		__asm        mov    eax, windowChild;
		__asm        push   eax;
		__asm        mov    eax, GraphicWindow::windowManager;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, GraphicWindow::windowManager;
		__asm        call   dword ptr [eax+0x28];
		__asm        test   eax, eax;
		__asm        je     _T14b;
// LINE 842:
		__asm        mov    eax, windowChild;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x14], eax;
		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        je     _T14b;

		__asm        push   1;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x14];
		__asm        call   dword ptr [eax+0xAC];
		__asm        jmp    _T14b;
// LINE 843:
_T14b:
		__asm        push   1;
		__asm        push   1;
		__asm        mov    eax, this;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, this;
		__asm        call   dword ptr [eax+0x30];
// LINE 844:
		nReturnValue = 0x1;
// LINE 845:
		__asm        jmp    _T18e;
// LINE 847:
		__asm        jmp    _T189;
// LINE 848:
_T16b:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T17e;
_T17e:
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    [ebp-0x1C], eax;
		__asm        jmp    _T189;
// LINE 849:
_T189:
	}
// LINE 852:
_T18e:
	return nReturnValue;
// LINE 853:
}

// FUNCTION: COPTER_D 0x004a5837
class GraphicWindow * GraphicWindow::DeleteChild(long lChildID) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowFound;
	/*bp-0x8*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 863:
_T27:
	windowFound = 0x0;
// LINE 865:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x30];
// LINE 866:
_LOOP_3e:
	for (;;) {
// LINE 866:
_LOOP_3e:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T52;
_T52:
		__asm        jmp    _T57;
_T57:
		__asm        mov    eax, [ebp-0xC];
		__asm        cmp    i.node, eax;
		__asm        jne    _T6d;

		__asm        jmp    _T81;

		__asm        jmp    _T6d;
_T6d:
		__asm        jmp    _T7c;

		__asm        cmp    dword ptr [ebp-0x28], 0;
		__asm        jne    _T81;
_T7c:
		__asm        jmp    _T86;
_T81:
		__asm        jmp    _T1a8;
_T86:
		__asm        jmp    _T95;

		__asm        cmp    dword ptr [ebp-0x2C], 0;
		__asm        je     _T1a8;
// LINE 867:
_T95:
		__asm        jmp    _T9a;
_T9a:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    ecx, lChildID;
		__asm        cmp    [eax+4], ecx;
		__asm        jne    _T185;
// LINE 871:
		__asm        jmp    _Tb1;
_Tb1:
		windowFound = i.node->data;
// LINE 872:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tcd;
_Tcd:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Td8;
_Td8:
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-0x38], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Tfe;
_Tfe:
		__asm        jmp    _T103;
_T103:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x38];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x38];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _T11a;
_T11a:
		this-><GraphicWindow+0x34:4>--;
		__asm        jmp    _T125;
// LINE 873:
_T125:
		__asm        mov    eax, windowFound;
		__asm        push   eax;
		__asm        mov    eax, GraphicWindow::windowManager;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, GraphicWindow::windowManager;
		__asm        call   dword ptr [eax+0x28];
		__asm        test   eax, eax;
		__asm        je     _T16c;
// LINE 874:
		__asm        mov    eax, windowFound;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x14], eax;
		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        je     _T16c;

		__asm        push   1;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x14];
		__asm        call   dword ptr [eax+0xAC];
		__asm        jmp    _T16c;
// LINE 875:
_T16c:
		__asm        push   1;
		__asm        push   1;
		__asm        mov    eax, this;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, this;
		__asm        call   dword ptr [eax+0x30];
// LINE 876:
		__asm        jmp    _T1a8;
// LINE 878:
		__asm        jmp    _T1a3;
// LINE 879:
_T185:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T198;
_T198:
		__asm        mov    eax, [ebp-0x34];
		__asm        mov    [ebp-0x1C], eax;
		__asm        jmp    _T1a3;
// LINE 880:
_T1a3:
	}
// LINE 881:
_T1a8:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     _T1cb;
// LINE 882:
GraphicWindow::windowManager->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 883:
_T1cb:
	return windowFound;
// LINE 884:
}

// FUNCTION: COPTER_D 0x004a5a11
int32_t GraphicWindow::RemoveChild(/*unpacked*/ class GraphicWindow *windowNewChild) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;
	/*bp-0x8*/   int32_t nReturnValue;

// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 894:
_T27:
	nReturnValue = 0x0;
// LINE 896:
_LOOP_2e:
	for (;;) {
// LINE 896:
_LOOP_2e:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T42;
_T42:
		__asm        jmp    _T47;
_T47:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-0xC], eax;
		__asm        jne    _T5d;

		__asm        jmp    _T71;

		__asm        jmp    _T5d;
_T5d:
		__asm        jmp    _T6c;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        jne    _T71;
_T6c:
		__asm        jmp    _T76;
_T71:
		__asm        jmp    _T138;
_T76:
		__asm        jmp    _T85;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T138;
// LINE 897:
_T85:
		__asm        jmp    _T8a;
_T8a:
		__asm        mov    eax, i.node;
		__asm        mov    ecx, windowNewChild;
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _T115;
// LINE 898:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tac;
_Tac:
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Tb7;
_Tb7:
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-0x30], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Tdd;
_Tdd:
		__asm        jmp    _Te2;
_Te2:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Tf9;
_Tf9:
		this-><GraphicWindow+0x34:4>--;
		__asm        jmp    _T104;
// LINE 899:
_T104:
		nReturnValue = 0x1;
// LINE 900:
		__asm        jmp    _T138;
// LINE 902:
		__asm        jmp    _T133;
// LINE 903:
_T115:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x2C], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T128;
_T128:
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    [ebp-0x14], eax;
		__asm        jmp    _T133;
// LINE 904:
_T133:
	}
// LINE 905:
_T138:
	return nReturnValue;
// LINE 906:
}

// FUNCTION: COPTER_D 0x004a5b58
void GraphicWindow::DeleteAllChildren() {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowToDelete;
	/*bp-0x8*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 914:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
// LINE 917:
_T27:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x30];
// LINE 918:
_LOOP_37:
	for (;;) {
// LINE 918:
_LOOP_37:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T4b;
_T4b:
		__asm        jmp    _T50;
_T50:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-0xC], eax;
		__asm        jne    _T66;

		__asm        jmp    _T7a;

		__asm        jmp    _T66;
_T66:
		__asm        jmp    _T75;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        jne    _T7a;
_T75:
		__asm        jmp    _T7f;
_T7a:
		__asm        jmp    _T153;
_T7f:
		__asm        jmp    _T8e;

		__asm        cmp    dword ptr [ebp-0x28], 0;
		__asm        je     _T153;
// LINE 922:
_T8e:
		__asm        jmp    _T93;
_T93:
		windowToDelete = i.node->data;
// LINE 923:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Taf;
_Taf:
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Tba;
_Tba:
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-0x30], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Te0;
_Te0:
		__asm        jmp    _Te5;
_Te5:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x30];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Tfc;
_Tfc:
		this-><GraphicWindow+0x34:4>--;
		__asm        jmp    _T107;
// LINE 924:
_T107:
		__asm        mov    eax, windowToDelete;
		__asm        push   eax;
		__asm        mov    eax, GraphicWindow::windowManager;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, GraphicWindow::windowManager;
		__asm        call   dword ptr [eax+0x28];
		__asm        test   eax, eax;
		__asm        je     _T14e;
// LINE 925:
		__asm        mov    eax, windowToDelete;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-0x14], eax;
		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        je     _T14e;

		__asm        push   1;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x14];
		__asm        call   dword ptr [eax+0xAC];
		__asm        jmp    _T14e;
// LINE 926:
_T14e:
	}
// LINE 927:
_T153:
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+0x34];
	__asm        test   eax, eax;
	__asm        jg     _T176;
// LINE 928:
GraphicWindow::windowManager->GraphicWindowManager::DeleteAllWindowsInDeletionList();
// LINE 929:
_T176:
	return;
}

// FUNCTION: COPTER_D 0x004a5cd8
void GraphicWindow::RemoveAllChildren() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 938:
_LOOP_27:
	for (;;) {
// LINE 938:
_LOOP_27:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T3b;
_T3b:
		__asm        jmp    _T40;
_T40:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T56;

		__asm        jmp    _T6a;

		__asm        jmp    _T56;
_T56:
		__asm        jmp    _T65;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        jne    _T6a;
_T65:
		__asm        jmp    _T6f;
_T6a:
		__asm        jmp    _Tef;
_T6f:
		__asm        jmp    _T7e;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        je     _Tef;
// LINE 939:
_T7e:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T91;
_T91:
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T9c;
_T9c:
		__asm        mov    eax, [ebp-0xC];
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x24];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x24];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Tc2;
_Tc2:
		__asm        jmp    _Tc7;
_Tc7:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x24];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Tde;
_Tde:
		this-><GraphicWindow+0x34:4> += -0x1;
		__asm        jmp    _Tea;
_Tea:
	}
// LINE 940:
_Tef:
	return;
}

// FUNCTION: COPTER_D 0x004a5dd1
class GraphicWindow * GraphicWindow::FindChild(long lChildID) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 951:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 953:
_LOOP_27:
	for (;;) {
// LINE 953:
_LOOP_27:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T3b;
_T3b:
		__asm        jmp    _T40;
_T40:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T56;

		__asm        jmp    _T6a;

		__asm        jmp    _T56;
_T56:
		__asm        jmp    _T65;

		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        jne    _T6a;
_T65:
		__asm        jmp    _T6f;
_T6a:
		__asm        jmp    _Tc8;
_T6f:
		__asm        jmp    _T7e;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        je     _Tc8;
// LINE 954:
_T7e:
		__asm        jmp    _T83;
_T83:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    ecx, lChildID;
		__asm        cmp    [eax+4], ecx;
		__asm        jne    _Ta5;
// LINE 955:
		__asm        jmp    _T9a;
_T9a:
		return i.node->data;
// LINE 956:
_Ta5:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tb8;
_Tb8:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tc3;
// LINE 957:
_Tc3:
	}
// LINE 958:
_Tc8:
	return 0x0;
// LINE 959:
}

// FUNCTION: COPTER_D 0x004a5ea7
class GraphicWindow * GraphicWindow::FindWindowA(long lID) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 969:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _LOOP_23;
// LINE 971:
_LOOP_23:
	for (;;) {
// LINE 971:
_LOOP_23:
		__asm        mov    eax, GraphicWindow::listValidWindows.node;
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T36;
_T36:
		__asm        jmp    _T3b;
_T3b:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T51;

		__asm        jmp    _T65;

		__asm        jmp    _T51;
_T51:
		__asm        jmp    _T60;

		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        jne    _T65;
_T60:
		__asm        jmp    _T6a;
_T65:
		__asm        jmp    _Tc3;
_T6a:
		__asm        jmp    _T79;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        je     _Tc3;
// LINE 972:
_T79:
		__asm        jmp    _T7e;
_T7e:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    ecx, lID;
		__asm        cmp    [eax+4], ecx;
		__asm        jne    _Ta0;
// LINE 973:
		__asm        jmp    _T95;
_T95:
		return i.node->data;
// LINE 974:
_Ta0:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tb3;
_Tb3:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tbe;
// LINE 975:
_Tbe:
	}
// LINE 976:
_Tc3:
	return 0x0;
// LINE 977:
}

// FUNCTION: COPTER_D 0x004a5f76
int32_t GraphicWindow::FindWindowA(/*unpacked*/ class GraphicWindow *windowToFind) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 984:
	__asm        mov    eax, GraphicWindow::listValidWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _LOOP_23;
// LINE 986:
_LOOP_23:
	for (;;) {
// LINE 986:
_LOOP_23:
		__asm        mov    eax, GraphicWindow::listValidWindows.node;
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T36;
_T36:
		__asm        jmp    _T3b;
_T3b:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    i.node, eax;
		__asm        jne    _T51;

		__asm        jmp    _T65;

		__asm        jmp    _T51;
_T51:
		__asm        jmp    _T60;

		__asm        cmp    dword ptr [ebp-0x14], 0;
		__asm        jne    _T65;
_T60:
		__asm        jmp    _T6a;
_T65:
		__asm        jmp    _Tba;
_T6a:
		__asm        jmp    _T79;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        je     _Tba;
// LINE 987:
_T79:
		__asm        jmp    _T7e;
_T7e:
		__asm        mov    eax, i.node;
		__asm        mov    ecx, windowToFind;
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _T97;
// LINE 988:
		return 0x1;
// LINE 989:
_T97:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Taa;
_Taa:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tb5;
// LINE 990:
_Tb5:
	}
// LINE 991:
_Tba:
	return 0x0;
// LINE 992:
}

// FUNCTION: COPTER_D 0x004a603c
int32_t GraphicWindow::DeleteSelf() {
// LINE 1000:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::windowManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, GraphicWindow::windowManager;
	__asm        call   dword ptr [eax+4];
// LINE 1001:
	return 0x1;
// LINE 1002:
}

// FUNCTION: COPTER_D 0x004a606b
void GraphicWindow::RemoveSelf() {
// LINE 1011:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _T2e;
// LINE 1012:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x3C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   dword ptr [edx+0x60];
// LINE 1013:
_T2e:
	return;
}

// FUNCTION: COPTER_D 0x004a60a3
int32_t GraphicWindow::ComposeSelf() {
// LINE 1028:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1029:
	return 0x0;
// LINE 1032:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        je     _T61;
// LINE 1033:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1034:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xBC];
// LINE 1035:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xB8];
// LINE 1037:
_T61:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _Tb6;
// LINE 1039:
	__asm        jmp    _T73;
_T73:
	__asm        jmp    _T78;
_T78:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1041:
_Tb6:
	return 0x1;
// LINE 1042:
}

// FUNCTION: COPTER_D 0x004a6168
int32_t GraphicWindow::DrawSelf() {
// LINE 1060:
	return 0x0;
// LINE 1061:
}

// FUNCTION: COPTER_D 0x004a6180
void GraphicWindow::DrawChildren() {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *gwCurrentChild;
	/*bp-0x8*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1078:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T1e;
// LINE 1079:
	return;
// LINE 1081:
_T1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    _T34;
_T34:
	__asm        jmp    _LOOP_39;
// LINE 1082:
_LOOP_39:
	for (;;) {
// LINE 1082:
_LOOP_39:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T4d;
_T4d:
		__asm        jmp    _T52;
_T52:
		__asm        mov    eax, [ebp-0xC];
		__asm        cmp    i.node, eax;
		__asm        jne    _T68;

		__asm        jmp    _T7c;

		__asm        jmp    _T68;
_T68:
		__asm        jmp    _T77;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        jne    _T7c;
_T77:
		__asm        jmp    _T81;
_T7c:
		__asm        jmp    _Tcc;
_T81:
		__asm        jmp    _T90;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        je     _Tcc;
// LINE 1088:
_T90:
		__asm        jmp    _T95;
_T95:
		gwCurrentChild = i.node->data;
// LINE 1089:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tb1;
_Tb1:
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Tbc;
// LINE 1090:
_Tbc:
		__asm        mov    eax, gwCurrentChild;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, gwCurrentChild;
		__asm        call   dword ptr [eax+0x18];
	}
// LINE 1092:
_Tcc:
	return;
}

// FUNCTION: COPTER_D 0x004a6256
void GraphicWindow::InvalidateAllOverlaps(/*packed*/ class list<GraphicWindow *>::iterator windowChildListItem) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *windowCurrentChild;
	/*bp-0x8*/   /*unpacked*/ class GraphicWindow *windowNextChild;

// LINE 1117:
	__asm        jmp    _T11;
_T11:
	windowCurrentChild = windowChildListItem.node->data;
// LINE 1119:
	windowNextChild += 0x74;
// LINE 1120:
_LOOP_1e:
	for (;;) {
// LINE 1120:
_LOOP_1e:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T32;
_T32:
		__asm        jmp    _T37;
_T37:
		__asm        mov    eax, windowChildListItem.node;
		__asm        cmp    [ebp-0xC], eax;
		__asm        jne    _T4d;

		__asm        jmp    _T61;

		__asm        jmp    _T4d;
_T4d:
		__asm        jmp    _T5c;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        jne    _T61;
_T5c:
		__asm        jmp    _T66;
_T61:
		__asm        jmp    _T137;
_T66:
		__asm        jmp    _T75;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        je     _T137;
// LINE 1121:
_T75:
		__asm        jmp    _T7a;
_T7a:
		windowNextChild = windowChildListItem.node->data;
// LINE 1122:
		__asm        mov    eax, windowNextChild;
		__asm        cmp    dword ptr [eax+0x4C], 0;
		__asm        jne    _T114;
// LINE 1123:
		__asm        jmp    _T95;
_T95:
		__asm        mov    eax, windowNextChild;
		__asm        mov    ecx, windowCurrentChild;
		__asm        mov    ecx, [ecx+0x10];
		__asm        cmp    [eax+0x18], ecx;
		__asm        jl     _Te2;

		__asm        mov    eax, windowCurrentChild;
		__asm        mov    ecx, windowNextChild;
		__asm        mov    ecx, [ecx+0x10];
		__asm        cmp    [eax+0x18], ecx;
		__asm        jl     _Te2;

		__asm        mov    eax, windowCurrentChild;
		__asm        mov    ecx, windowNextChild;
		__asm        mov    ecx, [ecx+0x1C];
		__asm        cmp    [eax+0x14], ecx;
		__asm        jg     _Te2;

		__asm        mov    eax, windowNextChild;
		__asm        mov    ecx, windowCurrentChild;
		__asm        mov    ecx, [ecx+0x1C];
		__asm        cmp    [eax+0x14], ecx;
		__asm        jl     _Te2;

		__asm        jmp    _Te7;
_Te2:
		__asm        jmp    _T114;
_Te7:
		__asm        jmp    _Tf6;

		__asm        cmp    dword ptr [ebp-0x24], 0;
		__asm        je     _T114;
// LINE 1124:
_Tf6:
		__asm        push   1;
		__asm        push   1;
		__asm        mov    eax, windowNextChild;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, windowNextChild;
		__asm        call   dword ptr [eax+0x30];
// LINE 1125:
		__asm        mov    eax, windowChildListItem.node;
		__asm        push   eax;
		__asm        mov    eax, this;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, this;
		__asm        call   dword ptr [eax+0x4C];
// LINE 1128:
_T114:
		__asm        mov    eax, windowChildListItem.node;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, windowChildListItem.node;
		__asm        mov    eax, [eax];
		__asm        mov    windowChildListItem.node, eax;
		__asm        jmp    _T127;
_T127:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T132;
// LINE 1129:
_T132:
	}
// LINE 1130:
_T137:
	return;
}

// FUNCTION: COPTER_D 0x004a6399
void GraphicWindow::InvalidateAllChildren(int32_t bRecursive) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _LOOP_27;
// LINE 1138:
_LOOP_27:
	for (;;) {
// LINE 1138:
_LOOP_27:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T3b;
_T3b:
		__asm        jmp    _T40;
_T40:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T56;

		__asm        jmp    _T6a;

		__asm        jmp    _T56;
_T56:
		__asm        jmp    _T65;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T6a;
_T65:
		__asm        jmp    _T6f;
_T6a:
		__asm        jmp    _Tc6;
_T6f:
		__asm        jmp    _T7e;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Tc6;
// LINE 1139:
_T7e:
		__asm        jmp    _T83;
_T83:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, bRecursive;
		__asm        push   eax;
		__asm        push   1;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+0x30];
// LINE 1140:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tb6;
_Tb6:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tc1;
// LINE 1141:
_Tc1:
	}
// LINE 1142:
_Tc6:
	return;
}

// FUNCTION: COPTER_D 0x004a646b
int32_t GraphicWindow::DoesWindowNeedUpdating() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1163:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T28;
// LINE 1164:
	return 0x1;
// LINE 1168:
_T28:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T3e;
_T3e:
	__asm        jmp    _LOOP_43;
// LINE 1169:
_LOOP_43:
	for (;;) {
// LINE 1169:
_LOOP_43:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T57;
_T57:
		__asm        jmp    _T5c;
_T5c:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    i.node, eax;
		__asm        jne    _T72;

		__asm        jmp    _T86;

		__asm        jmp    _T72;
_T72:
		__asm        jmp    _T81;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T86;
_T81:
		__asm        jmp    _T8b;
_T86:
		__asm        jmp    _Tf1;
_T8b:
		__asm        jmp    _T9a;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Tf1;
// LINE 1170:
_T9a:
		__asm        jmp    _T9f;
_T9f:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+0xC0];
		__asm        test   eax, eax;
		__asm        je     _Tce;
// LINE 1171:
		return 0x1;
// LINE 1172:
_Tce:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Te1;
_Te1:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tec;
// LINE 1173:
_Tec:
	}
// LINE 1174:
_Tf1:
	return 0x0;
// LINE 1175:
}

// FUNCTION: COPTER_D 0x004a6568
long GraphicWindow::DoCharacter(long lCharacter) {
// LINE 1187:
	return 0x0;
// LINE 1188:
}

// FUNCTION: COPTER_D 0x004a6582
long GraphicWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1200:
	return 0x0;
// LINE 1201:
}

// FUNCTION: COPTER_D 0x004a659c
long GraphicWindow::DoKeyUp(long lKey, char chModifiers) {
// LINE 1214:
	return 0x0;
// LINE 1215:
}

// FUNCTION: COPTER_D 0x004a65b6
long GraphicWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1231:
	return 0x0;
// LINE 1232:
}

// FUNCTION: COPTER_D 0x004a65d0
long GraphicWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1244:
	return 0x1;
// LINE 1245:
}

// FUNCTION: COPTER_D 0x004a65ed
long GraphicWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1257:
	return 0x0;
// LINE 1258:
}

// FUNCTION: COPTER_D 0x004a6607
int32_t GraphicWindow::CaptureCursorStart(/*unpacked*/ class GraphicWindow *windowCapture) {
// LINE 1270:
	__asm        cmp    GraphicWindow::windowCursorCapture, 0;
	__asm        je     _T20;
// LINE 1271:
	return 0x0;
// LINE 1272:
_T20:
GraphicWindow::windowCursorCapture = windowCapture;
// LINE 1273:
	return 0x1;
// LINE 1274:
}

// FUNCTION: COPTER_D 0x004a6640
int32_t GraphicWindow::CaptureCursorEnd(/*unpacked*/ class GraphicWindow *windowCapture) {
// LINE 1282:
	__asm        mov    eax, windowCapture;
	__asm        cmp    GraphicWindow::windowCursorCapture, eax;
	__asm        je     _T22;
// LINE 1283:
	return 0x0;
// LINE 1284:
_T22:
GraphicWindow::windowCursorCapture = 0x0;
// LINE 1285:
	return 0x1;
// LINE 1286:
}

// FUNCTION: COPTER_D 0x004a667d
void GraphicWindow::WindowToScreenCoordinates(long& nXPosition, long& nYPosition) {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *currentWindow;

// LINE 1299:
	currentWindow = this;
// LINE 1301:
__WHILE_12:
	while ((currentWindow-><GraphicWindow+0x3c:4> != 0x0)) {
// LINE 1302:
		nXPosition. += currentWindow-><GraphicWindow+0x10:4>;
// LINE 1303:
		nYPosition. += currentWindow-><GraphicWindow+0x14:4>;
// LINE 1304:
		currentWindow = currentWindow-><GraphicWindow+0x3c:4>;
	}
// LINE 1307:
_T43:
	return;
}

// FUNCTION: COPTER_D 0x004a66cc
void GraphicWindow::ScreenToWindowCoordinates(long& nXPosition, long& nYPosition) {
	/*bp-0x4*/   long nXFactor;
	/*bp-0x8*/   long nYFactor;

// LINE 1320:
	nXFactor = 0x0;
// LINE 1321:
	nYFactor = 0x0;
// LINE 1324:
	__asm        lea    eax, nYFactor;
	__asm        push   eax;
	__asm        lea    eax, nXFactor;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1325:
	nXPosition. -= nXFactor;
// LINE 1326:
	nYPosition. -= nYFactor;
// LINE 1327:
	return;
}

// FUNCTION: COPTER_D 0x004a6720
class CBackBuffer * GraphicWindow::GetImage() {
// LINE 1341:
	return this-><GraphicWindow+0x40:4>;
// LINE 1342:
}

// FUNCTION: COPTER_D 0x004a673c
void GraphicWindow::GetImagePath() {
	/*bp-0x108*/ char szFullImagePath[261]; // 0x105 bytes

// LINE 1356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T4c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4c:
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T112;

	__asm        jmp    _T8d;
_T8d:
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        jmp    _Tcf;

	__asm        jmp    _Tcf;
_Tc0:
	__asm        mov    dword ptr [ebp-0x150], 0;
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T112;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        mov    byte ptr [ebp-0x140], 0;
	__asm        jmp    _T123;
_T123:
	__asm        lea    eax, [ebp-0x140];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    _T134;
_T134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x5C];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T164;
_T164:
	__asm        jmp    _T169;
_T169:
	GetPathForFile(0x6, 0x0, this-><GraphicWindow+0x5c:4>, szFullImagePath[0]);
// LINE 1357:
	__asm        jmp    _T18b;
_T18b:
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    _T1e5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1d6;
_T1d6:
	exit(0x1);
	__asm        jmp    _T1e5;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T227;

	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T426;

	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, [ebp-0x138];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T426;
_T227:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T347;

	__asm        cmp    dword ptr [ebp-0x138], 0xFFFFFFFF;
	__asm        jne    _T289;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T27a;
_T27a:
	exit(0x1);
	__asm        jmp    _T289;
_T289:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T318;

	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T313;
_T313:
	__asm        jmp    _T324;
_T318:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax], 0;
_T324:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T336;
_T336:
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    _T351;
_T347:
	__asm        mov    dword ptr [ebp-0x10C], 0;
_T351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T40d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _T40d;

	__asm        mov    eax, [ebp-0x11C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3ea;

	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    dword ptr [eax], 0;
_T3ea:
	__asm        jmp    _T3ef;
_T3ef:
	__asm        jmp    _T3f4;
_T3f4:
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T408;
_T408:
	__asm        jmp    _T40d;
_T40d:
	__asm        jmp    _T412;
_T412:
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T46b;
_T426:
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T46b;

	__asm        jmp    _T438;
_T438:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        lea    eax, szFullImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T46b;
_T46b:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T482;
_T482:
	__asm        jmp    _T487;
// LINE 1358:
_T487:
	return;
}

// FUNCTION: COPTER_D 0x004a6bcd
int32_t GraphicWindow::SetImageToDrawOnto() {
	/*bp-0x4*/   /*unpacked*/ class CBackBuffer *imageCurrentParent;
	/*bp-0x8*/   /*unpacked*/ class GraphicWindow *gwCurrentParent;
	/*bp-0x18*/  /*packed*/ class MRect rectNewPosition; // 0x10 bytes

// LINE 1367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        lea    ecx, rectNewPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1368:
	gwCurrentParent = this-><GraphicWindow+0x3c:4>;
// LINE 1371:
__WHILE_5c:
	while ((gwCurrentParent != 0x0)) {
// LINE 1372:
		__asm        mov    eax, gwCurrentParent;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, gwCurrentParent;
		__asm        call   dword ptr [eax+0xB0];
		__asm        mov    imageCurrentParent, eax;
// LINE 1373:
		__asm        cmp    imageCurrentParent, 0;
		__asm        je     _Tb3;
// LINE 1374:
		this-><GraphicWindow+0x44:4> = imageCurrentParent;
// LINE 1375:
		__asm        lea    eax, rectNewPosition.left;
		__asm        mov    ecx, this;
		__asm        add    ecx, 0x20;
		__asm        mov    edx, [eax];
		__asm        mov    [ecx], edx;
		__asm        mov    edx, [eax+4];
		__asm        mov    [ecx+4], edx;
		__asm        mov    edx, [eax+8];
		__asm        mov    [ecx+8], edx;
		__asm        mov    eax, [eax+0xC];
		__asm        mov    [ecx+0xC], eax;
// LINE 1376:
		return 0x1;
// LINE 1381:
_Tb3:
		__asm        mov    eax, gwCurrentParent;
		__asm        mov    eax, [eax+0x14];
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, gwCurrentParent;
		__asm        mov    eax, [eax+0x10];
		__asm        mov    [ebp-0x2C], eax;
		__asm        jmp    _Tca;
_Tca:
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x1C], eax;
		__asm        jmp    _Tdb;
_Tdb:
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    ecx, [ebp-0x1C];
		__asm        mov    [ebp-0x34], eax;
		__asm        mov    [ebp-0x30], ecx;
		__asm        mov    eax, [ebp-0x34];
		__asm        add    rectNewPosition.left, eax;
		__asm        mov    eax, [ebp-0x34];
		__asm        add    rectNewPosition.right, eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        add    rectNewPosition.top, eax;
		__asm        mov    eax, [ebp-0x30];
		__asm        add    rectNewPosition.bottom, eax;
		__asm        jmp    _T104;
_T104:
		__asm        jmp    _T109;
// LINE 1382:
_T109:
		gwCurrentParent = gwCurrentParent-><GraphicWindow+0x3c:4>;
	}
// LINE 1384:
_T117:
	return 0x0;
// LINE 1385:
}

// FUNCTION: COPTER_D 0x004a6cf0
void GraphicWindow::SetAllImagesToDrawOnto() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1403:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1405:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T2d;
_T2d:
	__asm        jmp    _LOOP_32;
// LINE 1406:
_LOOP_32:
	for (;;) {
// LINE 1406:
_LOOP_32:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T46;
_T46:
		__asm        jmp    _T4b;
_T4b:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T61;

		__asm        jmp    _T75;

		__asm        jmp    _T61;
_T61:
		__asm        jmp    _T70;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T75;
_T70:
		__asm        jmp    _T7a;
_T75:
		__asm        jmp    _Tcb;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Tcb;
// LINE 1407:
_T89:
		__asm        jmp    _T8e;
_T8e:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+0x20];
// LINE 1408:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tbb;
_Tbb:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tc6;
// LINE 1409:
_Tc6:
	}
// LINE 1410:
_Tcb:
	return;
}

// FUNCTION: COPTER_D 0x004a6dc5
void GraphicWindow::CreateAllImages() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1422:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 1425:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T3a;
_T3a:
	__asm        jmp    _LOOP_3f;
// LINE 1426:
_LOOP_3f:
	for (;;) {
// LINE 1426:
_LOOP_3f:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T53;
_T53:
		__asm        jmp    _T58;
_T58:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    i.node, eax;
		__asm        jne    _T6e;

		__asm        jmp    _T82;

		__asm        jmp    _T6e;
_T6e:
		__asm        jmp    _T7d;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T82;
_T7d:
		__asm        jmp    _T87;
_T82:
		__asm        jmp    _Td8;
_T87:
		__asm        jmp    _T96;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Td8;
// LINE 1427:
_T96:
		__asm        jmp    _T9b;
_T9b:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+8];
// LINE 1428:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tc8;
_Tc8:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Td3;
// LINE 1429:
_Td3:
	}
// LINE 1430:
_Td8:
	return;
}

// FUNCTION: COPTER_D 0x004a6ea7
void GraphicWindow::DestroyAllImages() {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1442:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T2d;
_T2d:
	__asm        jmp    _LOOP_32;
// LINE 1445:
_LOOP_32:
	for (;;) {
// LINE 1445:
_LOOP_32:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T46;
_T46:
		__asm        jmp    _T4b;
_T4b:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    i.node, eax;
		__asm        jne    _T61;

		__asm        jmp    _T75;

		__asm        jmp    _T61;
_T61:
		__asm        jmp    _T70;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T75;
_T70:
		__asm        jmp    _T7a;
_T75:
		__asm        jmp    _Tcb;
_T7a:
		__asm        jmp    _T89;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _Tcb;
// LINE 1446:
_T89:
		__asm        jmp    _T8e;
_T8e:
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax+8];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x10];
		__asm        mov    eax, [eax];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    ecx, [ebp-0x10];
		__asm        call   dword ptr [eax+0xC];
// LINE 1447:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tbb;
_Tbb:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tc6;
// LINE 1448:
_Tc6:
	}
// LINE 1449:
_Tcb:
	return;
}

// FUNCTION: COPTER_D 0x004a6f7c
void GraphicWindow::DrawBorder(/*packed*/ struct SparkalColor *colorBorder) {
// LINE 1456:
	__asm        cmp    colorBorder, 0;
	__asm        je     _T2f;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, colorBorder;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T2f;
// LINE 1461:
_T2f:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1463:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1465:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1467:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x40];
// LINE 1468:
	return;
}

// FUNCTION: COPTER_D 0x004a7075
int32_t GraphicWindow::MakeModal(/*unpacked*/ class GraphicWindow *windowModal) {
// LINE 1485:
GraphicWindow::RemoveModal(windowModal);
// LINE 1486:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2a;
_T2a:
	__asm        jmp    _T2f;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T61;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T61:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T229;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb6;
_Tb6:
	exit(0x1);
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        jmp    _Tca;
_Tca:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T105;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T10b;
_T105:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        jmp    _T115;
_T115:
	__asm        jmp    _T11a;
_T11a:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T178;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16e;
_T16e:
	exit(0x1);
_T178:
	__asm        jmp    _T17d;
_T17d:
	__asm        jmp    _T182;
_T182:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1df;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1e5;
_T1df:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        jmp    _T1ef;
_T1ef:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T229:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T23e:
	__asm        jmp    _T243;
_T243:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T24e;
_T24e:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T25c;
_T25c:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T273;

	__asm        mov    eax, windowModal;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T273;
_T273:
	__asm        jmp    _T278;
_T278:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listModalWindows.length, 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2b2;
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        jmp    _T2bc;
// LINE 1487:
_T2bc:
	return 0x1;
// LINE 1488:
}

// FUNCTION: COPTER_D 0x004a7340
int32_t GraphicWindow::RemoveModal(/*unpacked*/ class GraphicWindow *windowModal) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1500:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _LOOP_23;
// LINE 1501:
_LOOP_23:
	for (;;) {
// LINE 1501:
_LOOP_23:
		__asm        mov    eax, GraphicWindow::listModalWindows.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T36;
_T36:
		__asm        jmp    _T3b;
_T3b:
		__asm        mov    eax, i.node;
		__asm        cmp    [ebp-8], eax;
		__asm        jne    _T51;

		__asm        jmp    _T65;

		__asm        jmp    _T51;
_T51:
		__asm        jmp    _T60;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T65;
_T60:
		__asm        jmp    _T6a;
_T65:
		__asm        jmp    _T121;
_T6a:
		__asm        jmp    _T79;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _T121;
// LINE 1502:
_T79:
		__asm        jmp    _T7e;
_T7e:
		__asm        mov    eax, i.node;
		__asm        mov    ecx, windowModal;
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _Tfe;
// LINE 1503:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Ta0;
_Ta0:
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tab;
_Tab:
		__asm        mov    eax, [ebp-0xC];
		__asm        mov    [ebp-0x2C], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Td1;
_Td1:
		__asm        jmp    _Td6;
_Td6:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Ted;
_Ted:
GraphicWindow::listModalWindows.length += -0x1;
		__asm        jmp    _Tf9;
// LINE 1504:
_Tf9:
		__asm        jmp    _T11c;
// LINE 1505:
_Tfe:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T111;
_T111:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T11c;
// LINE 1506:
_T11c:
	}
// LINE 1507:
_T121:
	return 0x1;
// LINE 1508:
}

// FUNCTION: COPTER_D 0x004a7470
int32_t GraphicWindow::MakeFocus(/*unpacked*/ class GraphicWindow *windowFocus) {
// LINE 1531:
GraphicWindow::RemoveFocus(windowFocus);
// LINE 1532:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2a;
_T2a:
	__asm        jmp    _T2f;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    list<GraphicWindow *>::free_list, 0;
	__asm        je     _T61;

	__asm        mov    eax, list<GraphicWindow *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<GraphicWindow *>::free_list, eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T61:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        cmp    list<GraphicWindow *>::last, eax;
	__asm        jne    _T229;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    _Tc0;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb6;
_Tb6:
	exit(0x1);
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        jmp    _Tca;
_Tca:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-0x28], 0x155;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T105;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T10b;
_T105:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        jmp    _T115;
_T115:
	__asm        jmp    _T11a;
_T11a:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x60];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T178;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16e;
_T16e:
	exit(0x1);
_T178:
	__asm        jmp    _T17d;
_T17d:
	__asm        jmp    _T182;
_T182:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    list<GraphicWindow *>::buffer_list, eax;
	__asm        mov    eax, list<GraphicWindow *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<GraphicWindow *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x3C], 0x155;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1df;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T1e5;
_T1df:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x4C], eax;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        jmp    _T1ef;
_T1ef:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    list<GraphicWindow *>::last, eax;
	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T23e;
_T229:
	__asm        mov    eax, list<GraphicWindow *>::next_avail;
	__asm        mov    [ebp-0x20], eax;
	__asm        add    list<GraphicWindow *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x64], eax;
_T23e:
	__asm        jmp    _T243;
_T243:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T24e;
_T24e:
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T25c;
_T25c:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T273;

	__asm        mov    eax, windowFocus;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T273;
_T273:
	__asm        jmp    _T278;
_T278:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        add    GraphicWindow::listFocusWindows.length, 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2b2;
_T2b2:
	__asm        jmp    _T2b7;
_T2b7:
	__asm        jmp    _T2bc;
// LINE 1533:
_T2bc:
	return 0x1;
// LINE 1534:
}

// FUNCTION: COPTER_D 0x004a773b
int32_t GraphicWindow::RemoveFocus(/*unpacked*/ class GraphicWindow *windowFocus) {
	/*bp-0x4*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1545:
	__asm        mov    eax, GraphicWindow::listFocusWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    i.node, eax;
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _LOOP_23;
// LINE 1546:
_LOOP_23:
	for (;;) {
// LINE 1546:
_LOOP_23:
		__asm        mov    eax, GraphicWindow::listFocusWindows.node;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T36;
_T36:
		__asm        jmp    _T3b;
_T3b:
		__asm        mov    eax, [ebp-8];
		__asm        cmp    i.node, eax;
		__asm        jne    _T51;

		__asm        jmp    _T65;

		__asm        jmp    _T51;
_T51:
		__asm        jmp    _T60;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        jne    _T65;
_T60:
		__asm        jmp    _T6a;
_T65:
		__asm        jmp    _T121;
_T6a:
		__asm        jmp    _T79;

		__asm        cmp    dword ptr [ebp-0x20], 0;
		__asm        je     _T121;
// LINE 1547:
_T79:
		__asm        jmp    _T7e;
_T7e:
		__asm        mov    eax, i.node;
		__asm        mov    ecx, windowFocus;
		__asm        cmp    [eax+8], ecx;
		__asm        jne    _Tfe;
// LINE 1548:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Ta0;
_Ta0:
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _Tab;
_Tab:
		__asm        mov    eax, [ebp-0xC];
		__asm        mov    [ebp-0x2C], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    eax, [eax];
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    ecx, [ecx+4];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    eax, [eax+4];
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    ecx, [ecx];
		__asm        mov    [ecx+4], eax;
		__asm        jmp    _Td1;
_Td1:
		__asm        jmp    _Td6;
_Td6:
		__asm        mov    eax, list<GraphicWindow *>::free_list;
		__asm        mov    ecx, [ebp-0x2C];
		__asm        mov    [ecx], eax;
		__asm        mov    eax, [ebp-0x2C];
		__asm        mov    list<GraphicWindow *>::free_list, eax;
		__asm        jmp    _Ted;
_Ted:
GraphicWindow::listFocusWindows.length += -0x1;
		__asm        jmp    _Tf9;
// LINE 1549:
_Tf9:
		__asm        jmp    _T11c;
// LINE 1550:
_Tfe:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x28], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _T111;
_T111:
		__asm        mov    eax, [ebp-0x28];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _T11c;
// LINE 1551:
_T11c:
	}
// LINE 1552:
_T121:
	return 0x1;
// LINE 1553:
}

// FUNCTION: COPTER_D 0x004a786b
int32_t GraphicWindow::CanWeRespondToMessage() {
	/*bp-0x4*/   int32_t nModalWindowCount;
	/*bp-0x8*/   /*unpacked*/ class GraphicWindow *gwCurrentTest;
	/*bp-0xc*/   /*unpacked*/ class GraphicWindow *gwModal;

// LINE 1572:
	__asm        jmp    _T11;
_T11:
	nModalWindowCount = GraphicWindow::listModalWindows.length;
// LINE 1573:
	__asm        cmp    nModalWindowCount, 0;
	__asm        je     _T95;
// LINE 1574:
	__asm        mov    eax, GraphicWindow::listModalWindows.node;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T38;
_T38:
	__asm        jmp    _T3d;
_T3d:
	__asm        jmp    _T42;
_T42:
	__asm        jmp    _T47;
_T47:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        mov    gwModal, eax;
// LINE 1575:
	gwCurrentTest = this;
// LINE 1576:
__WHILE_56:
	while ((gwCurrentTest != gwModal)) {

		__asm        cmp    gwCurrentTest, 0;
		__asm        je     _T7a;
// LINE 1577:
		gwCurrentTest = gwCurrentTest-><GraphicWindow+0x3c:4>;
	}
// LINE 1578:
_T7a:
	__asm        cmp    gwModal, 0;
	__asm        jne    _T8b;
// LINE 1579:
	return 0x0;
// LINE 1580:
_T8b:
	return 0x1;
// LINE 1582:
_T95:
	return 0x1;
// LINE 1583:
}

// FUNCTION: COPTER_D 0x004a790f
void ScreenWindow::ScreenWindow() {

	this->GraphicWindow::GraphicWindow();
	this->bufferParent = 0x0;
	this-><ScreenWindow+0x00> = 0x591748;
// LINE 1601:
	this-><ScreenWindow+0x50> = 0x0;
// LINE 1602:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a794d
void ScreenWindow::ScreenWindow(const /*packed*/ class ScreenWindow& copyScreenWindow) {

	this->GraphicWindow::GraphicWindow(copyScreenWindow);
	this-><ScreenWindow+0x00> = 0x591748;
// LINE 1612:
	this->bufferParent = copyScreenWindow.bufferParent;
// LINE 1613:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a7989
void ScreenWindow::ScreenWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class CBackBuffer *bufferNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	this->GraphicWindow::GraphicWindow(rectNewWindow, nNewID, 0x0, myNewOwner, bAddToParentList);
	this-><ScreenWindow+0x00> = 0x591748;
// LINE 1625:
	this-><ScreenWindow+0x50> = 0x0;
// LINE 1626:
	this->bufferParent = bufferNewParent;
// LINE 1627:
	this-><ScreenWindow+0x40> = bufferNewParent;
// LINE 1628:
	this-><ScreenWindow+0x44> = 0x0;
// LINE 1629:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a79ed
void ScreenWindow::~ScreenWindow() {

	this-><ScreenWindow+0x00> = 0x591748;
// LINE 1637:
	this-><ScreenWindow+0x40> = 0x0;
// LINE 1638:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x004a7a1e
/*packed*/ class ScreenWindow& ScreenWindow::operator=(const /*packed*/ class ScreenWindow& copyScreenWindow) {
// LINE 1646:
	this->GraphicWindow::operator=(copyScreenWindow);
// LINE 1647:
	this->bufferParent = copyScreenWindow.bufferParent;
// LINE 1649:
	return this;
// LINE 1650:
}

// FUNCTION: COPTER_D 0x004a7a51
int32_t ScreenWindow::ComposeSelf() {
	/*bp-0x4*/   /*unpacked*/ class GraphicWindow *gwCurrentChild;
	/*bp-0x8*/   /*packed*/ class list<GraphicWindow *>::iterator i;

// LINE 1665:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1666:
	return 0x0;
// LINE 1668:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    i.node, eax;
	__asm        jmp    _T36;
_T36:
	__asm        jmp    _LOOP_3b;
// LINE 1669:
_LOOP_3b:
	for (;;) {
// LINE 1669:
_LOOP_3b:
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x30];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x14];
		__asm        mov    [ebp-0xC], eax;
		__asm        jmp    _T4f;
_T4f:
		__asm        jmp    _T54;
_T54:
		__asm        mov    eax, [ebp-0xC];
		__asm        cmp    i.node, eax;
		__asm        jne    _T6a;

		__asm        jmp    _T7e;

		__asm        jmp    _T6a;
_T6a:
		__asm        jmp    _T79;

		__asm        cmp    dword ptr [ebp-0x18], 0;
		__asm        jne    _T7e;
_T79:
		__asm        jmp    _T83;
_T7e:
		__asm        jmp    _Td8;
_T83:
		__asm        jmp    _T92;

		__asm        cmp    dword ptr [ebp-0x1C], 0;
		__asm        je     _Td8;
// LINE 1670:
_T92:
		__asm        jmp    _T97;
_T97:
		gwCurrentChild = i.node->data;
// LINE 1671:
		__asm        mov    eax, i.node;
		__asm        mov    [ebp-0x24], eax;
		__asm        mov    eax, i.node;
		__asm        mov    eax, [eax];
		__asm        mov    i.node, eax;
		__asm        jmp    _Tb3;
_Tb3:
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0x10], eax;
		__asm        jmp    _Tbe;
// LINE 1672:
_Tbe:
		gwCurrentChild-><GraphicWindow+0x48:4> = 0x1;
// LINE 1673:
		__asm        mov    eax, gwCurrentChild;
		__asm        mov    eax, [eax];
		__asm        mov    ecx, gwCurrentChild;
		__asm        call   dword ptr [eax+0x18];
	}
// LINE 1680:
_Td8:
	return 0x1;
// LINE 1681:
}

// FUNCTION: COPTER_D 0x004a7b38
int32_t ScreenWindow::DrawSelf() {
// LINE 1695:
	return 0x1;
// LINE 1696:
}



// Contribution: 1:000a6b60-000a6b81 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6b90-000a6bb1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000a6bc0-000a6dd5 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7bc0
// list<GraphicWindow *>::get_node



// Contribution: 1:000a6de0-000a6e18 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7de0
// GraphicWindow::`scalar deleting destructor'



// Contribution: 1:000a6e20-000a6e5b Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e20
// list<GraphicWindow *>::iterator::operator++



// Contribution: 1:000a6e60-000a6eb9 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7e60
// list<GraphicWindow *>::erase



// Contribution: 1:000a6ec0-000a6ef1 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7ec0
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f00-000a6f31 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f00
// list<GraphicWindow *>::begin



// Contribution: 1:000a6f40-000a6f78 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004a7f40
// ScreenWindow::`scalar deleting destructor'



// Contribution: 1:000a6f80-000a6fb6 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7f80
// construct



// Contribution: 1:000a6fc0-000a704e Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a7fc0
// list<GraphicWindow *>::deallocate_buffers



// Contribution: 1:000a7050-000a7359 Module: 9, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004a8050
// list<GraphicWindow *>::insert



// Contribution: 2:00002648-0000267f Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for GraphicWindowManager @ 0x00591648
//   00: GraphicWindowManager::SetNewBaseWindow @ 0x004a1c21
//   01: GraphicWindowManager::DeleteWindow @ 0x004a1c42
//   02: GraphicWindowManager::DoCharacter @ 0x004a24f3
//   03: GraphicWindowManager::DoKeyDown @ 0x004a22c1
//   04: GraphicWindowManager::DoKeyUp @ 0x004a23da
//   05: GraphicWindowManager::DoCursorDown @ 0x004a2608
//   06: GraphicWindowManager::DoCursorUp @ 0x004a268c
//   07: GraphicWindowManager::DoCursorMove @ 0x004a2710
//   08: GraphicWindowManager::SendCursorMessageToChildWindow @ 0x004a278e
//   09: GraphicWindowManager::ComposeAllWindows @ 0x004a29cd
//   10: GraphicWindowManager::IsWindowValid @ 0x004a2a1b
//   11: GraphicWindowManager::IsWindowOrParentInDeletionList @ 0x004a21d6
//   12: GraphicWindowManager::IncrementBusyCount @ 0x004a7b60
//   13: GraphicWindowManager::DecrementBusyCount @ 0x004a7b90
//   14 entries



// Contribution: 2:00002680-00002743 Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for GraphicWindow @ 0x00591680
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: GraphicWindow::`scalar deleting destructor' @ 0x004a7de0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00002748-0000280b Module: 9, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ScreenWindow @ 0x00591748
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: ScreenWindow::ComposeSelf @ 0x004a7a51
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ScreenWindow::`scalar deleting destructor' @ 0x004a7f40
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: ScreenWindow::DrawSelf @ 0x004a7b38
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 3:00000090-0000009f Module: 9, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597090
static void (*$S49)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597094
static void (*$S54)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597098
static void (*$S59)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059709c
static void (*$S62)() = { 0 /* todo */ };



// Contribution: 3:00003960-0000396f Module: 9, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a960
/*unpacked*/ class GraphicWindow *GraphicWindow::windowCursorCapture = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a964
/*packed*/ class GraphicWindowManager *GraphicWindow::windowManager = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a968
/*unpacked*/ class GraphicWindow *GraphicWindow::screenWindow = { 0 /* todo */ };



// Contribution: 3:00003970-00003973 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a970
uint32_t list<GraphicWindow *>::number_of_lists = 0;



// Contribution: 3:00003974-00003977 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a974
/*packed*/ struct list<GraphicWindow *>::list_node *list<GraphicWindow *>::last = { 0 /* todo */ };



// Contribution: 3:00003978-0000397b Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a978
/*packed*/ struct list<GraphicWindow *>::list_node *list<GraphicWindow *>::next_avail = { 0 /* todo */ };



// Contribution: 3:0000397c-0000397f Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a97c
/*packed*/ struct list<GraphicWindow *>::list_node *list<GraphicWindow *>::free_list = { 0 /* todo */ };



// Contribution: 3:00003980-00003983 Module: 9, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a980
/*packed*/ struct list<GraphicWindow *>::list_node_buffer *list<GraphicWindow *>::buffer_list = { 0 /* todo */ };



// Contribution: 3:0006f960-0006f9a7 Module: 9, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00606960
/*packed*/ class list<GraphicWindow *> GraphicWindow::listFocusWindows;

// GLOBAL: COPTER_D 0x00606968
/*packed*/ struct GraphicWindowColorConstants GraphicWindow::colorConstants;

// GLOBAL: COPTER_D 0x00606990
/*packed*/ class list<GraphicWindow *> GraphicWindow::listModalWindows;

// GLOBAL: COPTER_D 0x00606998
// $S46
// GLOBAL: COPTER_D 0x006069a0
/*packed*/ class list<GraphicWindow *> GraphicWindow::listValidWindows;

