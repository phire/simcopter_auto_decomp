// Module: Charlist.obj
// Source: C:\Copter\source\sparkal\Charlist.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class CharData (forward reference);
class CharData{ // packed(0x9 bytes) TI: 0x4578
public:
	/*+0x0*/   unsigned char chValue; // 0x1 bytes
	/*+0x1*/   /*packed*/ class CharData *previousCharData;
	/*+0x5*/   /*packed*/ class CharData *nextCharData;
	void CharData(unsigned char);
	void CharData();
};

// Type: void;

// Type: unsigned char;

// Type: /*packed*/ class CharList (forward reference);
class CharList{ // packed(0x10 bytes) TI: 0x4588
public:
	/*+0x0*/   int32_t nCharDataCount;
	/*+0x4*/   /*packed*/ class CharData *firstCharData;
	/*+0x8*/   /*packed*/ class CharData *lastCharData;
	void CharList();
	void ~CharList();
	void AddItem(/*packed*/ class CharData*);
	void AddItem(unsigned char);
	void DeleteItem(int32_t);
	void DeleteItem(unsigned char);
	void DeleteItem(/*packed*/ class CharData*);
	void DeleteAllItems();
	/*packed*/ class CharData* FindCharDataByIndex(int32_t);
	/*packed*/ class CharData* FindCharDataByValue(unsigned char);
protected:
	/*+0xc*/   /*packed*/ class CharData *presentCharData;
};

// Type: int32_t;



// Contribution: 1:0003c3f0-0003c841 Module: 57, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043d3f0
void CharData::CharData() {
// LINE 10:
	this->chValue = 0x0;
// LINE 11:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d40f
void CharData::CharData(unsigned char chNewValue) {
// LINE 15:
	this->chValue = chNewValue;
// LINE 16:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d432
void CharList::CharList() {
// LINE 25:
	this->nCharDataCount = 0x0;
// LINE 28:
	this->presentCharData = 0x0;
	this->lastCharData = this->presentCharData;
	this->firstCharData = this->lastCharData;
// LINE 29:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d476
void CharList::~CharList() {
	/*bp-0x4*/   /*packed*/ class CharData *nextCharData;

// LINE 35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T6b;
// LINE 36:
	this->presentCharData = this->firstCharData;
// LINE 38:
_FOR_29:
	for (; (this->presentCharData != 0x0); this->presentCharData = nextCharData) {
		// LINE 40:
			nextCharData = this->presentCharData->nextCharData;
		// LINE 41:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ebp-8], eax;
			__asm        mov    eax, [ebp-8];
			__asm        mov    [ebp-0xC], eax;
			__asm        mov    eax, [ebp-0xC];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
	}
// LINE 44:
_T6b:
	return;
}

// FUNCTION: COPTER_D 0x0043d4eb
void CharList::AddItem(unsigned char chNewValue) {
	/*bp-0x4*/   /*packed*/ class CharData *tempCharData;

// LINE 52:
	__asm        push   9;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T37;

	__asm        mov    eax, reinterpret_cast<uint32_t>(chNewValue);
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CharData::CharData;
	__asm        mov    tempCharData, eax;
	__asm        jmp    _T3e;
_T37:
	tempCharData = 0x0;
// LINE 53:
_T3e:
	this->CharList::AddItem(tempCharData);
// LINE 54:
	return;
}

// FUNCTION: COPTER_D 0x0043d541
void CharList::AddItem(/*packed*/ class CharData *charDataToAdd) {
// LINE 60:
	this->nCharDataCount++;
// LINE 61:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T51;
// LINE 62:
	this->firstCharData = charDataToAdd;
// LINE 63:
	this->lastCharData = charDataToAdd;
// LINE 64:
	this->presentCharData = charDataToAdd;
// LINE 65:
	charDataToAdd->nextCharData = 0x0;
// LINE 66:
	charDataToAdd->previousCharData = 0x0;
// LINE 68:
	__asm        jmp    _T7c;
// LINE 69:
_T51:
	this->lastCharData->nextCharData = charDataToAdd;
// LINE 70:
	charDataToAdd->nextCharData = 0x0;
// LINE 71:
	charDataToAdd->previousCharData = this->lastCharData;
// LINE 72:
	this->lastCharData = charDataToAdd;
// LINE 74:
_T7c:
	return;
}

// FUNCTION: COPTER_D 0x0043d5c9
void CharList::DeleteItem(/*packed*/ class CharData *charDataToDelete) {
// LINE 80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T33;
// LINE 81:
	this->lastCharData = 0x0;
	this->firstCharData = this->lastCharData;
// LINE 82:
	__asm        jmp    _T8d;
// LINE 83:
_T33:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+1], 0;
	__asm        je     _T54;
// LINE 85:
	charDataToDelete->previousCharData->nextCharData = charDataToDelete->nextCharData;
// LINE 86:
	__asm        jmp    _T60;
// LINE 87:
_T54:
	this->firstCharData = charDataToDelete->nextCharData;
// LINE 88:
_T60:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+5], 0;
	__asm        je     _T81;
// LINE 90:
	charDataToDelete->nextCharData->previousCharData = charDataToDelete->previousCharData;
// LINE 91:
	__asm        jmp    _T8d;
// LINE 92:
_T81:
	this->lastCharData = charDataToDelete->previousCharData;
// LINE 94:
_T8d:
	this->nCharDataCount--;
// LINE 95:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 96:
	return;
}

// FUNCTION: COPTER_D 0x0043d67f
void CharList::DeleteItem(unsigned char chValue) {
	/*bp-0x4*/   /*packed*/ class CharData *charDataToDelete;

// LINE 103:
	charDataToDelete = this->CharList::FindCharDataByValue(chValue);
// LINE 104:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    _T2a;
// LINE 105:
	return;
// LINE 106:
_T2a:
	this->CharList::DeleteItem(charDataToDelete);
// LINE 107:
	return;
}

// FUNCTION: COPTER_D 0x0043d6c1
void CharList::DeleteItem(int32_t nIndex) {
	/*bp-0x4*/   /*packed*/ class CharData *charDataToDelete;

// LINE 113:
	charDataToDelete = this->CharList::FindCharDataByIndex(nIndex);
// LINE 114:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    _T2a;
// LINE 115:
	return;
// LINE 116:
_T2a:
	this->CharList::DeleteItem(charDataToDelete);
// LINE 117:
	return;
}

// FUNCTION: COPTER_D 0x0043d703
void CharList::DeleteAllItems() {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 121:
	iEnd = this->nCharDataCount;
// LINE 123:
_FOR_20:
	for (i = 0x0; (iEnd > i); i++) {
		// LINE 124:
			this->CharList::DeleteItem(i);
	}
// LINE 125:
_T40:
	return;
}

// FUNCTION: COPTER_D 0x0043d74d
/*packed*/ class CharData* CharList::FindCharDataByIndex(int32_t nIndex) {
	/*bp-0x4*/   /*packed*/ class CharData *nextCharData;
	/*bp-0x8*/   int32_t nPresentIndex;

// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax], ecx;
	__asm        jg     _T21;
// LINE 134:
	return 0x0;
// LINE 136:
_T21:
	nPresentIndex = 0x0;
	this->presentCharData = this->firstCharData;
// LINE 138:
_FOR_39:
	__asm        jmp    _FOR_COND_39;
_FOR_NEXT_39:
	nPresentIndex++;
	this->presentCharData = nextCharData;
_FOR_COND_39:
	__asm        mov    eax, nIndex;
	__asm        cmp    nPresentIndex, eax;
	__asm        jge    _T6f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T6f;
// LINE 141:
	nextCharData = this->presentCharData->nextCharData;
// LINE 142:
	__asm        jmp    _FOR_NEXT_39;
// LINE 144:
_T6f:
	return this->presentCharData;
// LINE 145:
}

// FUNCTION: COPTER_D 0x0043d7ce
/*packed*/ class CharData* CharList::FindCharDataByValue(unsigned char chValue) {
	/*bp-0x4*/   /*packed*/ class CharData *nextCharData;

// LINE 152:
	this->presentCharData = this->firstCharData;
// LINE 154:
_FOR_1d:
	for (; (this->presentCharData != 0x0); this->presentCharData = nextCharData) {
		// LINE 156:
			nextCharData = this->presentCharData->nextCharData;
		// LINE 157:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC];
			__asm        xor    ecx, ecx;
			__asm        mov    cl, [eax];
			__asm        xor    eax, eax;
			__asm        mov    al, chValue;
			__asm        cmp    ecx, eax;
			__asm        jne    _T61;
		// LINE 158:
			return this->presentCharData;
		// LINE 159:
		_T61:
	}
// LINE 160:
_T66:
	return 0x0;
// LINE 161:
}

