// Module: Charlist.obj
// Source: C:\Copter\source\sparkal\Charlist.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CharData (forward reference);
class CharData{
public:
	unsigned char chValue;
	class CharData* previousCharData;
	class CharData* nextCharData;
	void CharData(unsigned char);
	void CharData();
};

// Type: void;

// Type: unsigned char;

// Type: class CharList (forward reference);
class CharList{
public:
	int32_t nCharDataCount;
	class CharData* firstCharData;
	class CharData* lastCharData;
	void CharList();
	void ~CharList();
	void AddItem(class CharData*);
	void AddItem(unsigned char);
	void DeleteItem(int32_t);
	void DeleteItem(unsigned char);
	void DeleteItem(class CharData*);
	void DeleteAllItems();
	class CharData* FindCharDataByIndex(int32_t);
	class CharData* FindCharDataByValue(unsigned char);
protected:
	class CharData* presentCharData;
};

// Type: int32_t;



// Contribution: 1:0003c3f0-0003c841 Module: 57, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043d3f0
void CharData::CharData() {
// LINE 10:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax], 0;
// LINE 11:
	__asm        jmp    near ptr 0x0043D407;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d40f
void CharData::CharData(unsigned char chNewValue) {
// LINE 15:
	__asm        mov    al, chNewValue;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], al;
// LINE 16:
	__asm        jmp    near ptr 0x0043D428;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d432
void CharList::CharList() {
// LINE 25:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 28:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 29:
	__asm        jmp    near ptr 0x0043D46E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043d476
void CharList::~CharList() {
	class CharData* nextCharData;

// LINE 35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T6b;
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 38:
	__asm        jmp    _T32;
_T29:
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T32:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T6b;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 41:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 42:
	__asm        jmp    _T29;
// LINE 44:
_T6b:
	__asm        jmp    near ptr 0x0043D4E6;
}

// FUNCTION: COPTER_D 0x0043d4eb
void CharList::AddItem(unsigned char chNewValue) {
	class CharData* tempCharData;

// LINE 52:
	__asm        push   9;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T37;

	__asm        mov    eax, reinterpret_cast<uint32_t>(chNewValue);
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CharData::CharData;
	__asm        mov    tempCharData, eax;
	__asm        jmp    _T3e;
_T37:
	__asm        mov    tempCharData, 0;
// LINE 53:
_T3e:
	__asm        mov    eax, tempCharData;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::AddItem;
// LINE 54:
	__asm        jmp    near ptr 0x0043D53A;
}

// FUNCTION: COPTER_D 0x0043d541
void CharList::AddItem(class CharData* charDataToAdd) {
// LINE 60:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax];
// LINE 61:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T51;
// LINE 62:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 63:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 64:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 65:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+5], 0;
// LINE 66:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+1], 0;
// LINE 68:
	__asm        jmp    _T7c;
// LINE 69:
_T51:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+5], eax;
// LINE 70:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+5], 0;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, charDataToAdd;
	__asm        mov    [ecx+1], eax;
// LINE 72:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 74:
_T7c:
	__asm        jmp    near ptr 0x0043D5C2;
}

// FUNCTION: COPTER_D 0x0043d5c9
void CharList::DeleteItem(class CharData* charDataToDelete) {
// LINE 80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T33;
// LINE 81:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 82:
	__asm        jmp    _T8d;
// LINE 83:
_T33:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+1], 0;
	__asm        je     _T54;
// LINE 85:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+5];
	__asm        mov    ecx, charDataToDelete;
	__asm        mov    ecx, [ecx+1];
	__asm        mov    [ecx+5], eax;
// LINE 86:
	__asm        jmp    _T60;
// LINE 87:
_T54:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+5];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 88:
_T60:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+5], 0;
	__asm        je     _T81;
// LINE 90:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+1];
	__asm        mov    ecx, charDataToDelete;
	__asm        mov    ecx, [ecx+5];
	__asm        mov    [ecx+1], eax;
// LINE 91:
	__asm        jmp    _T8d;
// LINE 92:
_T81:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+1];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 94:
_T8d:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax];
// LINE 95:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 96:
	__asm        jmp    near ptr 0x0043D678;
}

// FUNCTION: COPTER_D 0x0043d67f
void CharList::DeleteItem(unsigned char chValue) {
	class CharData* charDataToDelete;

// LINE 103:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chValue);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::FindCharDataByValue;
	__asm        mov    charDataToDelete, eax;
// LINE 104:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    _T2a;
// LINE 105:
	__asm        jmp    _T3b;
// LINE 106:
_T2a:
	__asm        mov    eax, charDataToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::DeleteItem;
// LINE 107:
	__asm        jmp    _T3b;
_T3b:
}

// FUNCTION: COPTER_D 0x0043d6c1
void CharList::DeleteItem(int32_t nIndex) {
	class CharData* charDataToDelete;

// LINE 113:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::FindCharDataByIndex;
	__asm        mov    charDataToDelete, eax;
// LINE 114:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    _T2a;
// LINE 115:
	__asm        jmp    _T3b;
// LINE 116:
_T2a:
	__asm        mov    eax, charDataToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::DeleteItem;
// LINE 117:
	__asm        jmp    _T3b;
_T3b:
}

// FUNCTION: COPTER_D 0x0043d703
void CharList::DeleteAllItems() {
	int32_t i;
	int32_t iEnd;

// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    iEnd, eax;
// LINE 123:
	__asm        mov    i, 0;
	__asm        jmp    _T23;
_T20:
	__asm        inc    i;
_T23:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T40;
// LINE 124:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::DeleteItem;
	__asm        jmp    _T20;
// LINE 125:
_T40:
	__asm        jmp    near ptr 0x0043D748;
}

// FUNCTION: COPTER_D 0x0043d74d
class CharData* CharList::FindCharDataByIndex(int32_t nIndex) {
	int32_t nPresentIndex;
	class CharData* nextCharData;

// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax], ecx;
	__asm        jg     _T21;
// LINE 134:
	__asm        xor    eax, eax;
	__asm        jmp    _T7a;
// LINE 136:
_T21:
	__asm        mov    nPresentIndex, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 138:
	__asm        jmp    _T45;
_T39:
	__asm        inc    nPresentIndex;
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T45:
	__asm        mov    eax, nIndex;
	__asm        cmp    nPresentIndex, eax;
	__asm        jge    _T6f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T6f;
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 142:
	__asm        jmp    _T39;
// LINE 144:
_T6f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    _T7a;
// LINE 145:
_T7a:
}

// FUNCTION: COPTER_D 0x0043d7ce
class CharData* CharList::FindCharDataByValue(unsigned char chValue) {
	class CharData* nextCharData;

// LINE 152:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 154:
	__asm        jmp    _T26;
_T1d:
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T66;
// LINE 156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 157:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, chValue;
	__asm        cmp    ecx, eax;
	__asm        jne    _T61;
// LINE 158:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    _T6d;
// LINE 159:
_T61:
	__asm        jmp    _T1d;
// LINE 160:
_T66:
	__asm        xor    eax, eax;
	__asm        jmp    _T6d;
// LINE 161:
_T6d:
}

