// Module: Charlist.obj
// Source: C:\Copter\source\sparkal\Charlist.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CharData (forward reference);
class CharData{
public:
	unsigned char chValue;
	class CharData* previousCharData;
	class CharData* nextCharData;
	void CharData(unsigned char);
	void CharData();
};

// Type: void;

// Type: unsigned char;

// Type: class CharList (forward reference);
class CharList{
public:
	int32_t nCharDataCount;
	class CharData* firstCharData;
	class CharData* lastCharData;
	void CharList();
	void ~CharList();
	void CharList(class CharData*);
	void CharList(unsigned char);
	void CharList(int32_t);
	void CharList(unsigned char);
	void CharList(class CharData*);
	void DeleteAllItems();
	class CharData* FindCharDataByIndex(int32_t);
	class CharData* FindCharDataByValue(unsigned char);
protected:
	class CharData* presentCharData;
};

// Type: int32_t;



// Contribution: 1:0003c3f0-0003c841 Module: 57, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043d3f0
void CharData::CharData() {
// LINE 9:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 10:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax], 0;
// LINE 11:
	__asm        jmp    near ptr 0x0043D407;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043d40f
void CharData::CharData(unsigned char chNewValue) {
// LINE 14:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 15:
	__asm        mov    al, chNewValue;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], al;
// LINE 16:
	__asm        jmp    near ptr 0x0043D428;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d432
void CharList::CharList() {
// LINE 24:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 25:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 28:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 29:
	__asm        jmp    near ptr 0x0043D46E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043d476
void CharList::~CharList() {
	class CharData* nextCharData;

// LINE 32:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 35:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0043D4E1;
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 38:
	__asm        jmp    near ptr 0x0043D4A8;
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0043D4E1;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 41:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 42:
	__asm        jmp    near ptr 0x0043D49F;
// LINE 44:
	__asm        jmp    near ptr 0x0043D4E6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043d4eb
void CharList::AddItem(unsigned char chNewValue) {
	class CharData* tempCharData;

// LINE 49:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 52:
	__asm        push   9;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0043D522;
	__asm        mov    eax, reinterpret_cast<uint32_t>(chNewValue);
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0043D40F;
	__asm        mov    tempCharData, eax;
	__asm        jmp    near ptr 0x0043D529;
	__asm        mov    tempCharData, 0;
// LINE 53:
	__asm        mov    eax, tempCharData;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D541;
// LINE 54:
	__asm        jmp    near ptr 0x0043D53A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d541
void CharList::AddItem(class CharData* charDataToAdd) {
// LINE 59:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 60:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax];
// LINE 61:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    near ptr 0x0043D592;
// LINE 62:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 63:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 64:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 65:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+5], 0;
// LINE 66:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+1], 0;
// LINE 68:
	__asm        jmp    near ptr 0x0043D5BD;
// LINE 69:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+5], eax;
// LINE 70:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    dword ptr [eax+5], 0;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, charDataToAdd;
	__asm        mov    [ecx+1], eax;
// LINE 72:
	__asm        mov    eax, charDataToAdd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 74:
	__asm        jmp    near ptr 0x0043D5C2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d5c9
void CharList::DeleteItem(class CharData* charDataToDelete) {
// LINE 79:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    near ptr 0x0043D5FC;
// LINE 81:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 82:
	__asm        jmp    near ptr 0x0043D656;
// LINE 83:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+1], 0;
	__asm        je     near ptr 0x0043D61D;
// LINE 85:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+5];
	__asm        mov    ecx, charDataToDelete;
	__asm        mov    ecx, [ecx+1];
	__asm        mov    [ecx+5], eax;
// LINE 86:
	__asm        jmp    near ptr 0x0043D629;
// LINE 87:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+5];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 88:
	__asm        mov    eax, charDataToDelete;
	__asm        cmp    dword ptr [eax+5], 0;
	__asm        je     near ptr 0x0043D64A;
// LINE 90:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+1];
	__asm        mov    ecx, charDataToDelete;
	__asm        mov    ecx, [ecx+5];
	__asm        mov    [ecx+1], eax;
// LINE 91:
	__asm        jmp    near ptr 0x0043D656;
// LINE 92:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    eax, [eax+1];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 94:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax];
// LINE 95:
	__asm        mov    eax, charDataToDelete;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 96:
	__asm        jmp    near ptr 0x0043D678;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d67f
void CharList::DeleteItem(unsigned char chValue) {
	class CharData* charDataToDelete;

// LINE 100:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 103:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chValue);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D7CE;
	__asm        mov    charDataToDelete, eax;
// LINE 104:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    near ptr 0x0043D6A9;
// LINE 105:
	__asm        jmp    near ptr 0x0043D6BA;
// LINE 106:
	__asm        mov    eax, charDataToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D5C9;
// LINE 107:
	__asm        jmp    near ptr 0x0043D6BA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d6c1
void CharList::DeleteItem(int32_t nIndex) {
	class CharData* charDataToDelete;

// LINE 110:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 113:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D74D;
	__asm        mov    charDataToDelete, eax;
// LINE 114:
	__asm        cmp    charDataToDelete, 0;
	__asm        jne    near ptr 0x0043D6EB;
// LINE 115:
	__asm        jmp    near ptr 0x0043D6FC;
// LINE 116:
	__asm        mov    eax, charDataToDelete;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D5C9;
// LINE 117:
	__asm        jmp    near ptr 0x0043D6FC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d703
void CharList::DeleteAllItems() {
	int32_t i;
	int32_t iEnd;

// LINE 120:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    iEnd, eax;
// LINE 123:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0043D726;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0043D743;
// LINE 124:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D6C1;
	__asm        jmp    near ptr 0x0043D723;
// LINE 125:
	__asm        jmp    near ptr 0x0043D748;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043d74d
class CharData* CharList::FindCharDataByIndex(int32_t nIndex) {
	int32_t nPresentIndex;
	class CharData* nextCharData;

// LINE 128:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax], ecx;
	__asm        jg     near ptr 0x0043D76E;
// LINE 134:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043D7C7;
// LINE 136:
	__asm        mov    nPresentIndex, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 138:
	__asm        jmp    near ptr 0x0043D792;
	__asm        inc    nPresentIndex;
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, nIndex;
	__asm        cmp    nPresentIndex, eax;
	__asm        jge    near ptr 0x0043D7BC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0043D7BC;
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 142:
	__asm        jmp    near ptr 0x0043D786;
// LINE 144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x0043D7C7;
// LINE 145:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d7ce
class CharData* CharList::FindCharDataByValue(unsigned char chValue) {
	class CharData* nextCharData;

// LINE 149:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 152:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 154:
	__asm        jmp    near ptr 0x0043D7F4;
	__asm        mov    eax, nextCharData;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0043D834;
// LINE 156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+5];
	__asm        mov    nextCharData, eax;
// LINE 157:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, chValue;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x0043D82F;
// LINE 158:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        jmp    near ptr 0x0043D83B;
// LINE 159:
	__asm        jmp    near ptr 0x0043D7EB;
// LINE 160:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043D83B;
// LINE 161:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

