// Module: Language.obj
// Source: C:\Copter\source\sparkal\Language.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class LanguageManager (forward reference);
class LanguageManager{
public:
	// calltype: NearC
	static int32_t Initialize();
	// calltype: NearC
	static int32_t Uninitialize();
	// calltype: NearC
	static int32_t GetCurrentSystemLocale();
	// calltype: NearC
	static int32_t SetDefaultLanguage(int32_t);
	// calltype: NearC
	static int32_t ConvertIDToName(int32_t, char *);
	// calltype: NearC
	static int32_t ConvertNameToID(char *, int32_t *);
	// calltype: NearC
	static int32_t GetFullStringID(int32_t, int32_t);
	// calltype: NearC
	static int32_t CanWeSwitchToGivenLanguage(int32_t);
	// calltype: NearC
	static int32_t GetNextLanguage(int32_t);
	// calltype: NearC
	static int32_t GetLanguageIDAlias(int32_t);
	// calltype: NearC
	static int32_t DoesLanguageUseLatinCharacters(int32_t);
	// calltype: NearC
	static int32_t GetLanguageDirectoryName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageEnglishName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageLocalName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageRuntimeLibraryName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageRoadDrivingSide(int32_t);
	// calltype: NearC
	static int32_t GetTypefaceForLanguage(int32_t, int32_t, char *);
	// calltype: NearC
	static int32_t GetFontFilePathForLanguage(int32_t, int32_t, char *);
	// calltype: NearC
	static int32_t LoadLanguageSystemFonts(int32_t);
	// calltype: NearC
	static int32_t UnloadLanguageSystemFonts(int32_t);
	// calltype: NearC
	static int32_t IsTypefaceLoaded(char *);
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char *;

// Type: int32_t *;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char[260];

// Type: struct TypefaceTestStruct;
class TypefaceTestStruct{
public:
	char * szLanguageTypefaceName;
	long bExists;
};

// Type: void * __ptr32;

// Type: unsigned short;

// Type: unsigned long;

// Type: struct tagENUMLOGFONTA (forward reference);

// Type: struct tagNEWTEXTMETRICA (forward reference);

// Type: long;

// Type: struct TypefaceTestStruct (forward reference);



// Contribution: 1:000294f0-0002c41c Module: 66, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0042a4f0
int32_t LanguageManager::Initialize() {
// LINE 44:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042A500;
// LINE 45:
}

// FUNCTION: COPTER_D 0x0042a505
int32_t LanguageManager::Uninitialize() {
// LINE 53:
	__asm        mov    eax, ds:[0x597664];
	__asm        push   eax;
	__asm        call   0x0042CF8E;
	__asm        add    esp, 4;
// LINE 54:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042A523;
// LINE 55:
}

// FUNCTION: COPTER_D 0x0042a528
int32_t LanguageManager::SetDefaultLanguage(int32_t nLanguage) {
	class basic_string<char> sLocale;

// LINE 65:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0042A584;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042A579;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    sLocale.reference, eax;
	__asm        jmp    near ptr 0x0042A58B;
	__asm        mov    sLocale.reference, 0;
	__asm        mov    sLocale.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042A597;
// LINE 67:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042A5A8;
// LINE 68:
	__asm        mov    nLanguage, 1;
// LINE 69:
	__asm        mov    eax, nLanguage;
	__asm        cmp    ds:[0x597664], eax;
	__asm        jne    near ptr 0x0042A675;
// LINE 70:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042A641;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0042A641;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042A621;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042A626;
	__asm        jmp    near ptr 0x0042A62B;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A63C;
	__asm        jmp    near ptr 0x0042A641;
	__asm        jmp    near ptr 0x0042A646;
	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     near ptr 0x0042A668;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A66D;
	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    near ptr 0x0042A927;
// LINE 72:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B1AF;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042A869;
// LINE 73:
	__asm        mov    eax, ds:[0x597664];
	__asm        push   eax;
	__asm        call   0x0042CF8E;
	__asm        add    esp, 4;
// LINE 74:
	__asm        mov    eax, nLanguage;
	__asm        mov    ds:[0x597664], eax;
// LINE 75:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042CEDA;
	__asm        add    esp, 4;
// LINE 76:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        lea    eax, sLocale.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042C776;
	__asm        add    esp, 8;
// LINE 77:
	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     near ptr 0x0042A6DD;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A6E2;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sLocale.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0042A6FA;
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042A764;
	__asm        jmp    near ptr 0x0042A70C;
	__asm        jmp    near ptr 0x0042A711;
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042A730;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x0042A73C;
	__asm        jmp    near ptr 0x0042A73C;
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    near ptr 0x0042A73C;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042A764;
	__asm        jmp    near ptr 0x0042A769;
	__asm        mov    byte ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x0042A772;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0042A77D;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042A798;
	__asm        jmp    near ptr 0x0042A79D;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x0056E040;
	__asm        add    esp, 8;
// LINE 78:
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042A835;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0042A835;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042A815;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042A81A;
	__asm        jmp    near ptr 0x0042A81F;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A830;
	__asm        jmp    near ptr 0x0042A835;
	__asm        jmp    near ptr 0x0042A83A;
	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     near ptr 0x0042A85C;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A861;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0042A927;
// LINE 80:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042A8F3;
	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x0042A8F3;
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042A8D3;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042A8D8;
	__asm        jmp    near ptr 0x0042A8DD;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A8EE;
	__asm        jmp    near ptr 0x0042A8F3;
	__asm        jmp    near ptr 0x0042A8F8;
	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     near ptr 0x0042A91A;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A91F;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x0042A927;
// LINE 81:
}

// FUNCTION: COPTER_D 0x0042a92c
int32_t LanguageManager::ConvertIDToName(int32_t nLanguage, char * szLanguageName) {
	int32_t nStringFound;
	class basic_string<char> stringLanguage;

// LINE 96:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0042A98C;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042A981;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    stringLanguage.reference, eax;
	__asm        jmp    near ptr 0x0042A993;
	__asm        mov    stringLanguage.reference, 0;
	__asm        mov    stringLanguage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042A99F;
// LINE 99:
	__asm        cmp    nLanguage, 0;
	__asm        jl     near ptr 0x0042A9B3;
	__asm        cmp    nLanguage, 0x2D;
	__asm        jle    near ptr 0x0042AA3A;
// LINE 100:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042AA06;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0042AA06;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042A9F0;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AA01;
	__asm        jmp    near ptr 0x0042AA06;
	__asm        jmp    near ptr 0x0042AA0B;
	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     near ptr 0x0042AA2D;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AA32;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0042AD90;
// LINE 101:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042AA4C;
// LINE 102:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 105:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        cmp    dword ptr [ebp-0x1050], 0;
	__asm        jne    near ptr 0x0042AB1C;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0042AAC5;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0042AAE9;
	__asm        jmp    near ptr 0x0042AAEE;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0042AB0E;
	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    nStringFound, eax;
	__asm        jmp    near ptr 0x0042AB53;
	__asm        jmp    near ptr 0x0042AB21;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0042AB45;
	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    nStringFound, eax;
	__asm        jmp    near ptr 0x0042AB53;
// LINE 106:
	__asm        cmp    nStringFound, 0;
	__asm        je     near ptr 0x0042AD09;
// LINE 107:
	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     near ptr 0x0042AB8B;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AB90;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    stringLanguage.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0042ABA8;
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042AC27;
	__asm        jmp    near ptr 0x0042ABBA;
	__asm        jmp    near ptr 0x0042ABBF;
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042ABE1;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1068], eax;
	__asm        jmp    near ptr 0x0042ABF0;
	__asm        jmp    near ptr 0x0042ABF0;
	__asm        mov    dword ptr [ebp-0x1068], 0;
	__asm        jmp    near ptr 0x0042ABF0;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x106C], eax;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042AC27;
	__asm        jmp    near ptr 0x0042AC2C;
	__asm        mov    byte ptr [ebp-0x1058], 0;
	__asm        jmp    near ptr 0x0042AC38;
	__asm        lea    eax, [ebp-0x1058];
	__asm        mov    [ebp-0x1060], eax;
	__asm        jmp    near ptr 0x0042AC49;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1064];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042AC6D;
	__asm        jmp    near ptr 0x0042AC72;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 108:
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042ACD5;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0042ACD5;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042ACBF;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042ACD0;
	__asm        jmp    near ptr 0x0042ACD5;
	__asm        jmp    near ptr 0x0042ACDA;
	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     near ptr 0x0042ACFC;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AD01;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x0042AD90;
// LINE 110:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042AD5C;
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x0042AD5C;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042AD46;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AD57;
	__asm        jmp    near ptr 0x0042AD5C;
	__asm        jmp    near ptr 0x0042AD61;
	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     near ptr 0x0042AD83;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AD88;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x0042AD90;
// LINE 111:
}

// FUNCTION: COPTER_D 0x0042ad95
int32_t LanguageManager::ConvertNameToID(char * szLanguageName, int32_t * nLanguage) {
	class basic_string<char> stringLanguageCompare;
	int32_t nStringFound;
	int32_t i;
	class basic_string<char> stringLanguageName;

// LINE 129:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0042ADEE;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042ADE3;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    stringLanguageCompare.reference, eax;
	__asm        jmp    near ptr 0x0042ADF5;
	__asm        mov    stringLanguageCompare.reference, 0;
	__asm        mov    stringLanguageCompare.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042AE01;
// LINE 130:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0042AEAE;
	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042AE2F;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042AE8B;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042AE86;
	__asm        jmp    near ptr 0x0042AE94;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042AEA3;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    stringLanguageName.reference, eax;
	__asm        jmp    near ptr 0x0042AEB5;
	__asm        mov    stringLanguageName.reference, 0;
	__asm        mov    stringLanguageName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042AEC1;
// LINE 134:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x0042AED0;
	__asm        inc    i;
	__asm        cmp    i, 0x2D;
	__asm        jg     near ptr 0x0042B083;
// LINE 137:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        lea    eax, stringLanguageCompare.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0040F710;
	__asm        add    esp, 8;
	__asm        mov    nStringFound, eax;
// LINE 138:
	__asm        cmp    nStringFound, 0;
	__asm        je     near ptr 0x0042B07E;
// LINE 139:
	__asm        jmp    near ptr 0x0042AF09;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0042AF29;
	__asm        jmp    near ptr 0x0042AF1B;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0042AF30;
	__asm        mov    dword ptr [ebp-0x74], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0042AF35;
	__asm        jmp    near ptr 0x0042AF3A;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042AF59;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x0042AF65;
	__asm        jmp    near ptr 0x0042AF65;
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    near ptr 0x0042AF65;
	__asm        jmp    near ptr 0x0042AF6A;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, stringLanguageName.c_str_ptr;
	__asm        call   0x00410C40;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042B07E;
// LINE 140:
	__asm        mov    eax, i;
	__asm        mov    ecx, nLanguage;
	__asm        mov    [ecx], eax;
// LINE 141:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042AFE6;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0042AFE6;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042AFD0;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AFE1;
	__asm        jmp    near ptr 0x0042AFE6;
	__asm        jmp    near ptr 0x0042AFEB;
	__asm        cmp    stringLanguageName.c_str_ptr, 0;
	__asm        je     near ptr 0x0042B00D;
	__asm        mov    eax, stringLanguageName.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B012;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042B04A;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0042B04A;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042B04A;
	__asm        jmp    near ptr 0x0042B04F;
	__asm        cmp    stringLanguageCompare.c_str_ptr, 0;
	__asm        je     near ptr 0x0042B071;
	__asm        mov    eax, stringLanguageCompare.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B076;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0042B15A;
// LINE 144:
	__asm        jmp    near ptr 0x0042AECD;
// LINE 145:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042B0C2;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0042B0C2;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042B0C2;
	__asm        jmp    near ptr 0x0042B0C7;
	__asm        cmp    stringLanguageName.c_str_ptr, 0;
	__asm        je     near ptr 0x0042B0E9;
	__asm        mov    eax, stringLanguageName.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B0EE;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042B126;
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x0042B126;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042B126;
	__asm        jmp    near ptr 0x0042B12B;
	__asm        cmp    stringLanguageCompare.c_str_ptr, 0;
	__asm        je     near ptr 0x0042B14D;
	__asm        mov    eax, stringLanguageCompare.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B152;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x0042B15A;
// LINE 146:
}

// FUNCTION: COPTER_D 0x0042b15f
int32_t LanguageManager::GetFullStringID(int32_t nStringID, int32_t nLanguage) {
// LINE 156:
	__asm        cmp    nLanguage, 0;
	__asm        jl     near ptr 0x0042B179;
	__asm        cmp    nLanguage, 0x2D;
	__asm        jl     near ptr 0x0042B180;
// LINE 157:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042B1AA;
// LINE 158:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042B192;
// LINE 159:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 160:
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, nStringID;
	__asm        jmp    near ptr 0x0042B1AA;
// LINE 161:
}

// FUNCTION: COPTER_D 0x0042b1af
int32_t LanguageManager::CanWeSwitchToGivenLanguage(int32_t nLanguageToSwitchTo) {
	int32_t nFullStringID;
	class basic_string<char> sMessage;

// LINE 178:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0042B20F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042B204;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0042B216;
	__asm        mov    sMessage.reference, 0;
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042B222;
// LINE 180:
	__asm        mov    eax, nLanguageToSwitchTo;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 181:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    near ptr 0x0042B550;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    near ptr 0x0042B292;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042B2EC;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B2DD;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B2EC;
	__asm        jmp    near ptr 0x0042B2F1;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042B322;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x0042B383;
	__asm        jmp    near ptr 0x0042B310;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0042B383;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042B363;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x0042B36D;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0042B3C2;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x0042B3C2;
	__asm        jmp    near ptr 0x0042B395;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042B3C2;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B3D3;
	__asm        jmp    near ptr 0x0042B3D8;
	__asm        jmp    near ptr 0x0042B3DD;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    near ptr 0x0042B3F5;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042B444;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B435;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B444;
	__asm        jmp    near ptr 0x0042B449;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042B478;
	__asm        jmp    near ptr 0x0042B45B;
	__asm        jmp    near ptr 0x0042B460;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sMessage.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    near ptr 0x0042B4ED;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0042B4D2;
	__asm        jmp    near ptr 0x0042B49A;
	__asm        jmp    near ptr 0x0042B49F;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x0042B4DC;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sMessage.reference, eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x0042B535;
	__asm        jmp    near ptr 0x0042B4FF;
	__asm        jmp    near ptr 0x0042B504;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042B535;
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B546;
	__asm        jmp    near ptr 0x0042B54B;
	__asm        jmp    near ptr 0x0042B6E4;
	__asm        jmp    near ptr 0x0042B555;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042B5AF;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B5A0;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B5AF;
	__asm        jmp    near ptr 0x0042B5B4;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042B5E5;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x0042B68A;
	__asm        jmp    near ptr 0x0042B5D3;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0042B68A;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x0042B626;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    near ptr 0x0042B630;
	__asm        mov    dword ptr [ebp-0x105C], 0;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042B677;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0042B677;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042B677;
	__asm        jmp    near ptr 0x0042B67C;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0042B6C9;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x0042B6C9;
	__asm        jmp    near ptr 0x0042B69C;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042B6C9;
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B6DA;
	__asm        jmp    near ptr 0x0042B6DF;
	__asm        jmp    near ptr 0x0042B6E4;
// LINE 182:
	__asm        jmp    near ptr 0x0042B6E9;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042B775;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0042B775;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042B755;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0042B75A;
	__asm        jmp    near ptr 0x0042B75F;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B770;
	__asm        jmp    near ptr 0x0042B775;
	__asm        jmp    near ptr 0x0042B77A;
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     near ptr 0x0042B79C;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B7A1;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0042B7A9;
// LINE 183:
}

// FUNCTION: COPTER_D 0x0042b7ae
int32_t LanguageManager::GetNextLanguage(int32_t nCurrentLanguage) {
	int32_t nInitialLanguage;

// LINE 193:
	__asm        mov    eax, nCurrentLanguage;
	__asm        mov    nInitialLanguage, eax;
// LINE 195:
	__asm        cmp    nCurrentLanguage, 0x2D;
	__asm        jge    near ptr 0x0042B7D1;
	__asm        cmp    nCurrentLanguage, 0;
	__asm        jge    near ptr 0x0042B7D8;
// LINE 196:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042B814;
// LINE 199:
	__asm        inc    nCurrentLanguage;
// LINE 200:
	__asm        cmp    nCurrentLanguage, 0x2D;
	__asm        jl     near ptr 0x0042B7EC;
// LINE 201:
	__asm        mov    nCurrentLanguage, 1;
// LINE 202:
	__asm        mov    eax, nCurrentLanguage;
	__asm        push   eax;
	__asm        call   0x0042B1AF;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042B80C;
	__asm        mov    eax, nCurrentLanguage;
	__asm        cmp    nInitialLanguage, eax;
	__asm        jne    near ptr 0x0042B7D8;
// LINE 203:
	__asm        mov    eax, nCurrentLanguage;
	__asm        jmp    near ptr 0x0042B814;
// LINE 204:
}

// FUNCTION: COPTER_D 0x0042b819
int32_t LanguageManager::GetLanguageIDAlias(int32_t nLanguage) {
// LINE 230:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042B831;
// LINE 231:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 235:
	__asm        cmp    nLanguage, 2;
	__asm        jne    near ptr 0x0042B845;
// LINE 236:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042B915;
// LINE 239:
	__asm        cmp    nLanguage, 0x20;
	__asm        je     near ptr 0x0042B863;
	__asm        cmp    nLanguage, 0x21;
	__asm        je     near ptr 0x0042B863;
	__asm        cmp    nLanguage, 0x22;
	__asm        jne    near ptr 0x0042B86D;
// LINE 240:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042B915;
// LINE 241:
	__asm        cmp    nLanguage, 0x23;
	__asm        jne    near ptr 0x0042B881;
// LINE 242:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x0042B915;
// LINE 243:
	__asm        cmp    nLanguage, 0x24;
	__asm        jne    near ptr 0x0042B895;
// LINE 244:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x0042B915;
// LINE 245:
	__asm        cmp    nLanguage, 0x25;
	__asm        jne    near ptr 0x0042B8A9;
// LINE 246:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x0042B915;
// LINE 247:
	__asm        cmp    nLanguage, 0x26;
	__asm        jne    near ptr 0x0042B8BD;
// LINE 248:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x0042B915;
// LINE 249:
	__asm        cmp    nLanguage, 0x27;
	__asm        jne    near ptr 0x0042B8D1;
// LINE 250:
	__asm        mov    eax, 0xA;
	__asm        jmp    near ptr 0x0042B915;
// LINE 251:
	__asm        cmp    nLanguage, 0x2A;
	__asm        jne    near ptr 0x0042B8E5;
// LINE 252:
	__asm        mov    eax, 0x2B;
	__asm        jmp    near ptr 0x0042B915;
// LINE 253:
	__asm        cmp    nLanguage, 0xE;
	__asm        jne    near ptr 0x0042B8F9;
// LINE 254:
	__asm        mov    eax, 0x10;
	__asm        jmp    near ptr 0x0042B915;
// LINE 255:
	__asm        cmp    nLanguage, 0xF;
	__asm        jne    near ptr 0x0042B90D;
// LINE 256:
	__asm        mov    eax, 0x10;
	__asm        jmp    near ptr 0x0042B915;
// LINE 260:
	__asm        mov    eax, nLanguage;
	__asm        jmp    near ptr 0x0042B915;
// LINE 261:
}

// FUNCTION: COPTER_D 0x0042b91a
int32_t LanguageManager::DoesLanguageUseLatinCharacters(int32_t nLanguage) {
// LINE 299:
	__asm        cmp    nLanguage, 1;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 2;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 3;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 4;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 5;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 7;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 8;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 9;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0xA;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0xB;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x14;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x15;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x16;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x17;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x18;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x19;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 6;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x26;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x20;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x21;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x22;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x23;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x24;
	__asm        je     near ptr 0x0042BA10;
	__asm        cmp    nLanguage, 0x25;
	__asm        jne    near ptr 0x0042BA1A;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042BA1C;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042BA21;
// LINE 300:
}

// FUNCTION: COPTER_D 0x0042ba26
int32_t LanguageManager::GetLanguageDirectoryName(class basic_string<char>& sLanguage, int32_t nLanguage) {
// LINE 314:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        push   eax;
	__asm        call   0x0042BA46;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0042BA41;
// LINE 315:
}

// FUNCTION: COPTER_D 0x0042ba46
int32_t LanguageManager::GetLanguageEnglishName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 328:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042BA68;
// LINE 329:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 331:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 332:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    near ptr 0x0042BC9F;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042BAD8;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0042BAFC;
	__asm        jmp    near ptr 0x0042BB01;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042BB19;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042BB6B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BB5C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BB6B;
	__asm        jmp    near ptr 0x0042BB70;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042BBA8;
	__asm        jmp    near ptr 0x0042BB85;
	__asm        jmp    near ptr 0x0042BB8A;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    near ptr 0x0042BC26;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     near ptr 0x0042BC08;
	__asm        jmp    near ptr 0x0042BBCA;
	__asm        jmp    near ptr 0x0042BBCF;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    near ptr 0x0042BC12;
	__asm        mov    dword ptr [ebp-0x103C], 0;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0042BC74;
	__asm        jmp    near ptr 0x0042BC38;
	__asm        jmp    near ptr 0x0042BC3D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042BC74;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042BC88;
	__asm        jmp    near ptr 0x0042BC8D;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042C0D2;
	__asm        jmp    near ptr 0x0042BE65;
	__asm        jmp    near ptr 0x0042BCA4;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042BCFE;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BCEF;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BCFE;
	__asm        jmp    near ptr 0x0042BD03;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042BD3A;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042BDEB;
	__asm        jmp    near ptr 0x0042BD25;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0042BDEB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     near ptr 0x0042BD7B;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0042BD85;
	__asm        mov    dword ptr [ebp-0x1050], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042BDD5;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x0042BDD5;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042BDD5;
	__asm        jmp    near ptr 0x0042BDDA;
	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042BE2D;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042BE2D;
	__asm        jmp    near ptr 0x0042BDFD;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042BE2D;
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042BE41;
	__asm        jmp    near ptr 0x0042BE46;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042C0D2;
	__asm        jmp    near ptr 0x0042BE65;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0042C0D2;
// LINE 333:
	__asm        jmp    near ptr 0x0042BE6A;
	__asm        push   0x597668;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042BE7F;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042BEC8;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BEB9;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BEC8;
	__asm        jmp    near ptr 0x0042BECD;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042BF02;
	__asm        jmp    near ptr 0x0042BEE2;
	__asm        jmp    near ptr 0x0042BEE7;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    near ptr 0x0042C070;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042C006;
	__asm        jmp    near ptr 0x0042BF1E;
	__asm        jmp    near ptr 0x0042BF23;
	__asm        jmp    near ptr 0x0042BF28;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042BF4D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042BF59;
	__asm        jmp    near ptr 0x0042BF59;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0042BF59;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042BFE3;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042BFDE;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042BFDE;
	__asm        jmp    near ptr 0x0042BFEC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042BFFB;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042C00D;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042C062;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0042C062;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042C04C;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C05D;
	__asm        jmp    near ptr 0x0042C062;
	__asm        jmp    near ptr 0x0042C067;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0042C0B2;
	__asm        jmp    near ptr 0x0042C07F;
	__asm        jmp    near ptr 0x0042C084;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x597668;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C0B2;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C0C3;
	__asm        jmp    near ptr 0x0042C0C8;
// LINE 334:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042C0D9;
// LINE 336:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042C0D9;
// LINE 337:
}

// FUNCTION: COPTER_D 0x0042c0de
int32_t LanguageManager::GetLanguageLocalName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 350:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042C100;
// LINE 351:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 353:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 354:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    near ptr 0x0042C337;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042C170;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0042C194;
	__asm        jmp    near ptr 0x0042C199;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042C1B1;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042C203;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C1F4;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C203;
	__asm        jmp    near ptr 0x0042C208;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042C240;
	__asm        jmp    near ptr 0x0042C21D;
	__asm        jmp    near ptr 0x0042C222;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    near ptr 0x0042C2BE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     near ptr 0x0042C2A0;
	__asm        jmp    near ptr 0x0042C262;
	__asm        jmp    near ptr 0x0042C267;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    near ptr 0x0042C2AA;
	__asm        mov    dword ptr [ebp-0x103C], 0;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0042C30C;
	__asm        jmp    near ptr 0x0042C2D0;
	__asm        jmp    near ptr 0x0042C2D5;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C30C;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C320;
	__asm        jmp    near ptr 0x0042C325;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042C76A;
	__asm        jmp    near ptr 0x0042C4FD;
	__asm        jmp    near ptr 0x0042C33C;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042C396;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C387;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C396;
	__asm        jmp    near ptr 0x0042C39B;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042C3D2;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042C483;
	__asm        jmp    near ptr 0x0042C3BD;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0042C483;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     near ptr 0x0042C413;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0042C41D;
	__asm        mov    dword ptr [ebp-0x1050], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042C46D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x0042C46D;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042C46D;
	__asm        jmp    near ptr 0x0042C472;
	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C4C5;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042C4C5;
	__asm        jmp    near ptr 0x0042C495;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C4C5;
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C4D9;
	__asm        jmp    near ptr 0x0042C4DE;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042C76A;
	__asm        jmp    near ptr 0x0042C4FD;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0042C76A;
// LINE 355:
	__asm        jmp    near ptr 0x0042C502;
	__asm        push   0x59766C;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042C517;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042C560;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C551;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C560;
	__asm        jmp    near ptr 0x0042C565;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042C59A;
	__asm        jmp    near ptr 0x0042C57A;
	__asm        jmp    near ptr 0x0042C57F;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    near ptr 0x0042C708;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042C69E;
	__asm        jmp    near ptr 0x0042C5B6;
	__asm        jmp    near ptr 0x0042C5BB;
	__asm        jmp    near ptr 0x0042C5C0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042C5E5;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042C5F1;
	__asm        jmp    near ptr 0x0042C5F1;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0042C5F1;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042C67B;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042C676;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C676;
	__asm        jmp    near ptr 0x0042C684;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042C693;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042C6A5;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042C6FA;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0042C6FA;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042C6E4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C6F5;
	__asm        jmp    near ptr 0x0042C6FA;
	__asm        jmp    near ptr 0x0042C6FF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0042C74A;
	__asm        jmp    near ptr 0x0042C717;
	__asm        jmp    near ptr 0x0042C71C;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x59766C;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C74A;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C75B;
	__asm        jmp    near ptr 0x0042C760;
// LINE 356:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042C771;
// LINE 358:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042C771;
// LINE 359:
}

// FUNCTION: COPTER_D 0x0042c776
int32_t LanguageManager::GetLanguageRuntimeLibraryName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 372:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042C798;
// LINE 373:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 375:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   2;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 376:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    near ptr 0x0042C9CF;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042C808;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0042C82C;
	__asm        jmp    near ptr 0x0042C831;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042C849;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042C89B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C88C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C89B;
	__asm        jmp    near ptr 0x0042C8A0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042C8D8;
	__asm        jmp    near ptr 0x0042C8B5;
	__asm        jmp    near ptr 0x0042C8BA;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    near ptr 0x0042C956;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     near ptr 0x0042C938;
	__asm        jmp    near ptr 0x0042C8FA;
	__asm        jmp    near ptr 0x0042C8FF;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    near ptr 0x0042C942;
	__asm        mov    dword ptr [ebp-0x103C], 0;
	__asm        mov    ecx, sLanguage;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0042C9A4;
	__asm        jmp    near ptr 0x0042C968;
	__asm        jmp    near ptr 0x0042C96D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042C9A4;
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C9B8;
	__asm        jmp    near ptr 0x0042C9BD;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042CE02;
	__asm        jmp    near ptr 0x0042CB95;
	__asm        jmp    near ptr 0x0042C9D4;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0042CA2E;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CA1F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CA2E;
	__asm        jmp    near ptr 0x0042CA33;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042CA6A;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042CB1B;
	__asm        jmp    near ptr 0x0042CA55;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0042CB1B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     near ptr 0x0042CAAB;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0042CAB5;
	__asm        mov    dword ptr [ebp-0x1050], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042CB05;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x0042CB05;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0042CB05;
	__asm        jmp    near ptr 0x0042CB0A;
	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042CB5D;
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     near ptr 0x0042CB5D;
	__asm        jmp    near ptr 0x0042CB2D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042CB5D;
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042CB71;
	__asm        jmp    near ptr 0x0042CB76;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0042CE02;
	__asm        jmp    near ptr 0x0042CB95;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0042CE02;
// LINE 377:
	__asm        jmp    near ptr 0x0042CB9A;
	__asm        push   0x597670;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042CBAF;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0042CBF8;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CBE9;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CBF8;
	__asm        jmp    near ptr 0x0042CBFD;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0042CC32;
	__asm        jmp    near ptr 0x0042CC12;
	__asm        jmp    near ptr 0x0042CC17;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    near ptr 0x0042CDA0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0042CD36;
	__asm        jmp    near ptr 0x0042CC4E;
	__asm        jmp    near ptr 0x0042CC53;
	__asm        jmp    near ptr 0x0042CC58;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042CC7D;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0042CC89;
	__asm        jmp    near ptr 0x0042CC89;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0042CC89;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0042CD13;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0042CD0E;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042CD0E;
	__asm        jmp    near ptr 0x0042CD1C;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042CD2B;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0042CD3D;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0042CD92;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0042CD92;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0042CD7C;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CD8D;
	__asm        jmp    near ptr 0x0042CD92;
	__asm        jmp    near ptr 0x0042CD97;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0042CDE2;
	__asm        jmp    near ptr 0x0042CDAF;
	__asm        jmp    near ptr 0x0042CDB4;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x597670;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042CDE2;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042CDF3;
	__asm        jmp    near ptr 0x0042CDF8;
// LINE 378:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CE09;
// LINE 380:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042CE09;
// LINE 381:
}

// FUNCTION: COPTER_D 0x0042ce0e
int32_t LanguageManager::GetTypefaceForLanguage(int32_t nLanguage, int32_t nType, char * szFaceName) {
// LINE 393:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042CE26;
// LINE 394:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 399:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B91A;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042CE5A;
// LINE 400:
	__asm        push   0x597674;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 401:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CE9A;
// LINE 403:
	__asm        jmp    near ptr 0x0042CE93;
// LINE 405:
	__asm        cmp    nLanguage, 0xE;
	__asm        je     near ptr 0x0042CE78;
	__asm        cmp    nLanguage, 0xF;
	__asm        je     near ptr 0x0042CE78;
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    near ptr 0x0042CE93;
// LINE 407:
	__asm        push   0x59767C;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 408:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CE9A;
// LINE 412:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042CE9A;
// LINE 413:
}

// FUNCTION: COPTER_D 0x0042ce9f
int32_t LanguageManager::GetFontFilePathForLanguage(int32_t nLanguage, int32_t nType, char * szFontFilePath) {
// LINE 427:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    near ptr 0x0042CECE;
// LINE 428:
	__asm        mov    eax, szFontFilePath;
	__asm        push   eax;
	__asm        push   0x59768C;
	__asm        push   0;
	__asm        push   8;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 429:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CED5;
// LINE 433:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042CED5;
// LINE 434:
}

// FUNCTION: COPTER_D 0x0042ceda
int32_t LanguageManager::LoadLanguageSystemFonts(int32_t nLanguage) {
	char szFontPath[260];
	int32_t nReturnValue;

// LINE 459:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B91A;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042CF04;
// LINE 460:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CF89;
// LINE 462:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B819;
	__asm        add    esp, 4;
	__asm        mov    nLanguage, eax;
// LINE 464:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    near ptr 0x0042CF82;
// LINE 465:
	__asm        push   0x597698;
	__asm        call   0x0042D023;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042CF78;
// LINE 466:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x10;
	__asm        call   0x0042CE9F;
	__asm        add    esp, 0xC;
// LINE 468:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C356C];
	__asm        mov    nReturnValue, eax;
// LINE 469:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x0042CF70;
// LINE 470:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 472:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0042CF89;
// LINE 474:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042CF89;
// LINE 476:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042CF89;
// LINE 477:
}

// FUNCTION: COPTER_D 0x0042cf8e
int32_t LanguageManager::UnloadLanguageSystemFonts(int32_t nLanguage) {
	char szFontPath[260];
	int32_t nReturnValue;

// LINE 492:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B91A;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0042CFB8;
// LINE 493:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D01E;
// LINE 495:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   0x0042B819;
	__asm        add    esp, 4;
	__asm        mov    nLanguage, eax;
// LINE 497:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    near ptr 0x0042D017;
// LINE 498:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x10;
	__asm        call   0x0042CE9F;
	__asm        add    esp, 0xC;
// LINE 500:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3564];
	__asm        mov    nReturnValue, eax;
// LINE 501:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x0042D00F;
// LINE 502:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 504:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0042D01E;
// LINE 506:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042D01E;
// LINE 507:
}

// FUNCTION: COPTER_D 0x0042d023
int32_t LanguageManager::IsTypefaceLoaded(char * szFaceName) {
	struct TypefaceTestStruct tempTypefaceTestStruct;
	void * __ptr32 hdcScreen;

// LINE 527:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 528:
	__asm        cmp    hdcScreen, 0;
	__asm        je     near ptr 0x0042D077;
// LINE 529:
	__asm        mov    eax, szFaceName;
	__asm        mov    tempTypefaceTestStruct.szLanguageTypefaceName, eax;
// LINE 530:
	__asm        mov    tempTypefaceTestStruct.bExists, 0;
// LINE 534:
	__asm        lea    eax, tempTypefaceTestStruct.szLanguageTypefaceName;
	__asm        push   eax;
	__asm        push   0x42D3C9;
	__asm        push   0;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3568];
// LINE 535:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 536:
	__asm        mov    eax, tempTypefaceTestStruct.bExists;
	__asm        jmp    near ptr 0x0042D07E;
// LINE 538:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042D07E;
// LINE 542:
}

// FUNCTION: COPTER_D 0x0042d083
int32_t LanguageManager::GetCurrentSystemLocale() {
	 // Switch table at 0x0042d309
	unsigned short currentLanguageID;
	unsigned long currentLCID;

// LINE 554:
	__asm        call   dword ptr ds:[0x6C364C];
	__asm        mov    currentLCID, eax;
// LINE 555:
	__asm        mov    eax, currentLCID;
	__asm        mov    currentLanguageID, ax;
// LINE 556:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentLanguageID);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0042D219;
// LINE 558:
	__asm        mov    eax, 8;
	__asm        jmp    near ptr 0x0042D382;
// LINE 559:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x0042D382;
// LINE 560:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042D382;
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D382;
// LINE 562:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0042D382;
// LINE 563:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0042D382;
// LINE 564:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D382;
// LINE 565:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0042D382;
// LINE 566:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0042D382;
// LINE 567:
	__asm        mov    eax, 0x15;
	__asm        jmp    near ptr 0x0042D382;
// LINE 568:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042D382;
// LINE 569:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042D382;
// LINE 570:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042D382;
// LINE 571:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0042D382;
// LINE 572:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x0042D382;
// LINE 573:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x0042D382;
// LINE 574:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x0042D382;
// LINE 575:
	__asm        mov    eax, 0x17;
	__asm        jmp    near ptr 0x0042D382;
// LINE 576:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x0042D382;
// LINE 577:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x0042D382;
// LINE 578:
	__asm        mov    eax, 0x14;
	__asm        jmp    near ptr 0x0042D382;
// LINE 579:
	__asm        mov    eax, 0x14;
	__asm        jmp    near ptr 0x0042D382;
// LINE 580:
	__asm        mov    eax, 0xA;
	__asm        jmp    near ptr 0x0042D382;
// LINE 581:
	__asm        mov    eax, 0xA;
	__asm        jmp    near ptr 0x0042D382;
// LINE 582:
	__asm        mov    eax, 0xB;
	__asm        jmp    near ptr 0x0042D382;
// LINE 583:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x0042D382;
// LINE 584:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x0042D382;
// LINE 585:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x0042D382;
// LINE 586:
	__asm        mov    eax, 0x1D;
	__asm        jmp    near ptr 0x0042D382;
// LINE 587:
	__asm        mov    eax, 9;
	__asm        jmp    near ptr 0x0042D382;
// LINE 588:
	__asm        mov    eax, 0x12;
	__asm        jmp    near ptr 0x0042D382;
// LINE 589:
	__asm        mov    eax, 0x1A;
	__asm        jmp    near ptr 0x0042D382;
// LINE 590:
	__asm        mov    eax, 0x16;
	__asm        jmp    near ptr 0x0042D382;
// LINE 591:
	__asm        mov    eax, 0x10;
	__asm        jmp    near ptr 0x0042D382;
// LINE 592:
	__asm        mov    eax, 0x13;
	__asm        jmp    near ptr 0x0042D382;
// LINE 593:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D382;
// LINE 594:
	__asm        jmp    near ptr 0x0042D382;
	__asm        cmp    dword ptr [ebp-0xC], 0x807;
	__asm        jg     near ptr 0x0042D2B3;
	__asm        je     near ptr 0x0042D142;
	__asm        sub    dword ptr [ebp-0xC], 0x405;
	__asm        cmp    dword ptr [ebp-0xC], 0x1A;
	__asm        ja     near ptr 0x0042D20A;
	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    dword ptr [eax*4+0x42D247];
// Switch pointers
// Switch table
// LINE 596:
}

// FUNCTION: COPTER_D 0x0042d387
int32_t LanguageManager::GetLanguageRoadDrivingSide(int32_t nLanguage) {
// LINE 604:
	__asm        cmp    nLanguage, 0;
	__asm        jne    near ptr 0x0042D39F;
// LINE 605:
	__asm        mov    eax, ds:[0x597664];
	__asm        mov    nLanguage, eax;
// LINE 608:
	__asm        cmp    nLanguage, 2;
	__asm        je     near ptr 0x0042D3B3;
	__asm        cmp    nLanguage, 0x2C;
	__asm        jne    near ptr 0x0042D3BA;
// LINE 610:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042D3C4;
// LINE 612:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D3C4;
// LINE 613:
}

// FUNCTION: COPTER_D 0x0042d3c9
int32_t EnumFontFamilyProcecure(struct tagENUMLOGFONTA* lpelf, struct tagNEWTEXTMETRICA* lpntm, int32_t FontType, long lParam) {
	struct TypefaceTestStruct* tempTypefaceTestStruct;
	char * szEnumeratedFaceName;

// LINE 627:
	__asm        mov    eax, lParam;
	__asm        mov    tempTypefaceTestStruct, eax;
// LINE 628:
	__asm        mov    eax, lpelf;
	__asm        add    eax, 0x1C;
	__asm        mov    szEnumeratedFaceName, eax;
// LINE 630:
	__asm        mov    eax, tempTypefaceTestStruct;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, szEnumeratedFaceName;
	__asm        push   eax;
	__asm        call   0x0056CE20;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0042D40C;
// LINE 631:
	__asm        mov    eax, tempTypefaceTestStruct;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 632:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0042D416;
// LINE 634:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042D416;
// LINE 635:
}



// Contribution: 3:00000664-000006a7 Module: 66, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597664
// gDefaultLanguage
