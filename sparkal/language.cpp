// Module: Language.obj
// Source: C:\Copter\source\sparkal\Language.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class LanguageManager (forward reference);
class LanguageManager{
public:
	// calltype: NearC
	static int32_t Initialize();
	// calltype: NearC
	static int32_t Uninitialize();
	// calltype: NearC
	static int32_t GetCurrentSystemLocale();
	// calltype: NearC
	static int32_t SetDefaultLanguage(int32_t);
	// calltype: NearC
	static int32_t ConvertIDToName(int32_t, char *);
	// calltype: NearC
	static int32_t ConvertNameToID(char *, int32_t *);
	// calltype: NearC
	static int32_t GetFullStringID(int32_t, int32_t);
	// calltype: NearC
	static int32_t CanWeSwitchToGivenLanguage(int32_t);
	// calltype: NearC
	static int32_t GetNextLanguage(int32_t);
	// calltype: NearC
	static int32_t GetLanguageIDAlias(int32_t);
	// calltype: NearC
	static int32_t DoesLanguageUseLatinCharacters(int32_t);
	// calltype: NearC
	static int32_t GetLanguageDirectoryName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageEnglishName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageLocalName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageRuntimeLibraryName(class basic_string<char>&, int32_t);
	// calltype: NearC
	static int32_t GetLanguageRoadDrivingSide(int32_t);
	// calltype: NearC
	static int32_t GetTypefaceForLanguage(int32_t, int32_t, char *);
	// calltype: NearC
	static int32_t GetFontFilePathForLanguage(int32_t, int32_t, char *);
	// calltype: NearC
	static int32_t LoadLanguageSystemFonts(int32_t);
	// calltype: NearC
	static int32_t UnloadLanguageSystemFonts(int32_t);
	// calltype: NearC
	static int32_t IsTypefaceLoaded(char *);
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char *;

// Type: int32_t *;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char[260];

// Type: struct TypefaceTestStruct;
struct TypefaceTestStruct{
	char * szLanguageTypefaceName;
	long bExists;
};

// Type: void * __ptr32;

// Type: unsigned short;

// Type: unsigned long;

// Type: struct tagENUMLOGFONTA (forward reference);

// Type: struct tagNEWTEXTMETRICA (forward reference);

// Type: long;

// Type: struct TypefaceTestStruct (forward reference);



// Contribution: 1:000294f0-0002c41c Module: 66, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0042a4f0
int32_t LanguageManager::Initialize() {
// LINE 44:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042A500;
// LINE 45:
}

// FUNCTION: COPTER_D 0x0042a505
int32_t LanguageManager::Uninitialize() {
// LINE 53:
	__asm        mov    eax, gDefaultLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::UnloadLanguageSystemFonts;
	__asm        add    esp, 4;
// LINE 54:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0042A523;
// LINE 55:
}

// FUNCTION: COPTER_D 0x0042a528
int32_t LanguageManager::SetDefaultLanguage(int32_t nLanguage) {
	class basic_string<char> sLocale;

// LINE 65:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042A579;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    sLocale.reference, eax;
	__asm        jmp    _T63;
_T5c:
	__asm        mov    sLocale.reference, 0;
_T63:
	__asm        mov    sLocale.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042A597;
// LINE 67:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T80;
// LINE 68:
	__asm        mov    nLanguage, 1;
// LINE 69:
_T80:
	__asm        mov    eax, nLanguage;
	__asm        cmp    gDefaultLanguage, eax;
	__asm        jne    _T14d;
// LINE 70:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T119;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T119;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tf9;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_Tf9:
	__asm        jmp    near ptr 0x0042A626;

	__asm        jmp    near ptr 0x0042A62B;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A63C;

	__asm        jmp    _T119;
_T119:
	__asm        jmp    near ptr 0x0042A646;

	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     _T140;

	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T140:
	__asm        jmp    near ptr 0x0042A66D;

	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    _T3ff;
// LINE 72:
_T14d:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::CanWeSwitchToGivenLanguage;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T341;
// LINE 73:
	__asm        mov    eax, gDefaultLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::UnloadLanguageSystemFonts;
	__asm        add    esp, 4;
// LINE 74:
	__asm        mov    eax, nLanguage;
	__asm        mov    gDefaultLanguage, eax;
// LINE 75:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::LoadLanguageSystemFonts;
	__asm        add    esp, 4;
// LINE 76:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        lea    eax, sLocale.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageRuntimeLibraryName;
	__asm        add    esp, 8;
// LINE 77:
	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     _T1b5;

	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b5:
	__asm        jmp    near ptr 0x0042A6E2;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sLocale.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0042A6FA;

	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T23c;

	__asm        jmp    near ptr 0x0042A70C;

	__asm        jmp    near ptr 0x0042A711;

	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T208;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T214;

	__asm        jmp    _T214;
_T208:
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    _T214;
_T214:
	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T23c;
_T23c:
	__asm        jmp    near ptr 0x0042A769;

	__asm        mov    byte ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x0042A772;

	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x0042A77D;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042A798;

	__asm        jmp    near ptr 0x0042A79D;

	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   setlocale;
	__asm        add    esp, 8;
// LINE 78:
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T30d;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T30d;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ed;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
_T2ed:
	__asm        jmp    near ptr 0x0042A81A;

	__asm        jmp    near ptr 0x0042A81F;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A830;

	__asm        jmp    _T30d;
_T30d:
	__asm        jmp    near ptr 0x0042A83A;

	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     _T334;

	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T334:
	__asm        jmp    near ptr 0x0042A861;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    _T3ff;
// LINE 80:
_T341:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    eax, sLocale.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLocale.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3cb;

	__asm        mov    eax, sLocale.reference;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T3cb;

	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3ab;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    dword ptr [eax], 0;
_T3ab:
	__asm        jmp    near ptr 0x0042A8D8;

	__asm        jmp    near ptr 0x0042A8DD;

	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042A8EE;

	__asm        jmp    _T3cb;
_T3cb:
	__asm        jmp    near ptr 0x0042A8F8;

	__asm        cmp    sLocale.c_str_ptr, 0;
	__asm        je     _T3f2;

	__asm        mov    eax, sLocale.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3f2:
	__asm        jmp    near ptr 0x0042A91F;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    _T3ff;
// LINE 81:
_T3ff:
}

// FUNCTION: COPTER_D 0x0042a92c
int32_t LanguageManager::ConvertIDToName(int32_t nLanguage, char * szLanguageName) {
	int32_t nStringFound;
	class basic_string<char> stringLanguage;

// LINE 96:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T60;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042A981;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    stringLanguage.reference, eax;
	__asm        jmp    _T67;
_T60:
	__asm        mov    stringLanguage.reference, 0;
_T67:
	__asm        mov    stringLanguage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042A99F;
// LINE 99:
	__asm        cmp    nLanguage, 0;
	__asm        jl     _T87;

	__asm        cmp    nLanguage, 0x2D;
	__asm        jle    _T10e;
// LINE 100:
_T87:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tda;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _Tda;

	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042A9F0;

	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AA01;

	__asm        jmp    _Tda;
_Tda:
	__asm        jmp    near ptr 0x0042AA0B;

	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     _T101;

	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T101:
	__asm        jmp    near ptr 0x0042AA32;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    _T464;
// LINE 101:
_T10e:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T120;
// LINE 102:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 105:
_T120:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        cmp    dword ptr [ebp-0x1050], 0;
	__asm        jne    _T1f0;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    near ptr 0x0042AAC5;

	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0042AAE9;

	__asm        jmp    near ptr 0x0042AAEE;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0042AB0E;

	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    nStringFound, eax;
	__asm        jmp    _T227;
_T1f0:
	__asm        jmp    near ptr 0x0042AB21;

	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        lea    ecx, stringLanguage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0042AB45;

	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    nStringFound, eax;
	__asm        jmp    _T227;
// LINE 106:
_T227:
	__asm        cmp    nStringFound, 0;
	__asm        je     _T3dd;
// LINE 107:
	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     _T25f;

	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T25f:
	__asm        jmp    near ptr 0x0042AB90;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    stringLanguage.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0042ABA8;

	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2fb;

	__asm        jmp    near ptr 0x0042ABBA;

	__asm        jmp    near ptr 0x0042ABBF;

	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2b5;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1068], eax;
	__asm        jmp    _T2c4;

	__asm        jmp    _T2c4;
_T2b5:
	__asm        mov    dword ptr [ebp-0x1068], 0;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x106C], eax;
	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x106C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2fb;
_T2fb:
	__asm        jmp    near ptr 0x0042AC2C;

	__asm        mov    byte ptr [ebp-0x1058], 0;
	__asm        jmp    near ptr 0x0042AC38;

	__asm        lea    eax, [ebp-0x1058];
	__asm        mov    [ebp-0x1060], eax;
	__asm        jmp    near ptr 0x0042AC49;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1060];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1064];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0042AC6D;

	__asm        jmp    near ptr 0x0042AC72;

	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 108:
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3a9;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3a9;

	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042ACBF;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042ACD0;

	__asm        jmp    _T3a9;
_T3a9:
	__asm        jmp    near ptr 0x0042ACDA;

	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     _T3d0;

	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3d0:
	__asm        jmp    near ptr 0x0042AD01;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    _T464;
// LINE 110:
_T3dd:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    eax, stringLanguage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T430;

	__asm        mov    eax, stringLanguage.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T430;

	__asm        mov    ecx, [ebp-0x48];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042AD46;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AD57;

	__asm        jmp    _T430;
_T430:
	__asm        jmp    near ptr 0x0042AD61;

	__asm        cmp    stringLanguage.c_str_ptr, 0;
	__asm        je     _T457;

	__asm        mov    eax, stringLanguage.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T457:
	__asm        jmp    near ptr 0x0042AD88;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _T464;
// LINE 111:
_T464:
}

// FUNCTION: COPTER_D 0x0042ad95
int32_t LanguageManager::ConvertNameToID(char * szLanguageName, int32_t * nLanguage) {
	class basic_string<char> stringLanguageCompare;
	int32_t nStringFound;
	int32_t i;
	class basic_string<char> stringLanguageName;

// LINE 129:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T59;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042ADE3;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    stringLanguageCompare.reference, eax;
	__asm        jmp    _T60;
_T59:
	__asm        mov    stringLanguageCompare.reference, 0;
_T60:
	__asm        mov    stringLanguageCompare.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042AE01;
// LINE 130:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T119;

	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042AE2F;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tf6;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, szLanguageName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042AE86;

	__asm        jmp    _Tff;
_Tf6:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
_Tff:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042AEA3;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    stringLanguageName.reference, eax;
	__asm        jmp    _T120;
_T119:
	__asm        mov    stringLanguageName.reference, 0;
_T120:
	__asm        mov    stringLanguageName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042AEC1;
// LINE 134:
	__asm        mov    i, 1;
	__asm        jmp    _T13b;
_T138:
	__asm        inc    i;
_T13b:
	__asm        cmp    i, 0x2D;
	__asm        jg     _T2ee;
// LINE 137:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        lea    eax, stringLanguageCompare.c_str_ptr;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
	__asm        mov    nStringFound, eax;
// LINE 138:
	__asm        cmp    nStringFound, 0;
	__asm        je     _T2e9;
// LINE 139:
	__asm        jmp    near ptr 0x0042AF09;

	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T194;

	__asm        jmp    near ptr 0x0042AF1B;

	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T19b;
_T194:
	__asm        mov    dword ptr [ebp-0x74], 0xFFFFFFFF;
_T19b:
	__asm        jmp    near ptr 0x0042AF35;

	__asm        jmp    near ptr 0x0042AF3A;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c4;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T1d0;

	__asm        jmp    _T1d0;
_T1c4:
	__asm        mov    dword ptr [ebp-0x78], 0;
	__asm        jmp    _T1d0;
_T1d0:
	__asm        jmp    near ptr 0x0042AF6A;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, stringLanguageName.c_str_ptr;
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    _T2e9;
// LINE 140:
	__asm        mov    eax, i;
	__asm        mov    ecx, nLanguage;
	__asm        mov    [ecx], eax;
// LINE 141:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T251;

	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T251;

	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042AFD0;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042AFE1;

	__asm        jmp    _T251;
_T251:
	__asm        jmp    near ptr 0x0042AFEB;

	__asm        cmp    stringLanguageName.c_str_ptr, 0;
	__asm        je     _T278;

	__asm        mov    eax, stringLanguageName.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T278:
	__asm        jmp    near ptr 0x0042B012;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2b5;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2b5;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T2b5;
_T2b5:
	__asm        jmp    near ptr 0x0042B04F;

	__asm        cmp    stringLanguageCompare.c_str_ptr, 0;
	__asm        je     _T2dc;

	__asm        mov    eax, stringLanguageCompare.c_str_ptr;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2dc:
	__asm        jmp    near ptr 0x0042B076;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    _T3c5;
// LINE 144:
_T2e9:
	__asm        jmp    _T138;
// LINE 145:
_T2ee:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, stringLanguageName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T32d;

	__asm        mov    eax, stringLanguageName.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T32d;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T32d;
_T32d:
	__asm        jmp    near ptr 0x0042B0C7;

	__asm        cmp    stringLanguageName.c_str_ptr, 0;
	__asm        je     _T354;

	__asm        mov    eax, stringLanguageName.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T354:
	__asm        jmp    near ptr 0x0042B0EE;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T391;

	__asm        mov    eax, stringLanguageCompare.reference;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T391;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T391;
_T391:
	__asm        jmp    near ptr 0x0042B12B;

	__asm        cmp    stringLanguageCompare.c_str_ptr, 0;
	__asm        je     _T3b8;

	__asm        mov    eax, stringLanguageCompare.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3b8:
	__asm        jmp    near ptr 0x0042B152;

	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    _T3c5;
// LINE 146:
_T3c5:
}

// FUNCTION: COPTER_D 0x0042b15f
int32_t LanguageManager::GetFullStringID(int32_t nStringID, int32_t nLanguage) {
// LINE 156:
	__asm        cmp    nLanguage, 0;
	__asm        jl     _T1a;

	__asm        cmp    nLanguage, 0x2D;
	__asm        jl     _T21;
// LINE 157:
_T1a:
	__asm        xor    eax, eax;
	__asm        jmp    _T4b;
// LINE 158:
_T21:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T33;
// LINE 159:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 160:
_T33:
	__asm        mov    eax, nLanguage;
	__asm        lea    eax, [eax+eax*4-5];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, nStringID;
	__asm        jmp    _T4b;
// LINE 161:
_T4b:
}

// FUNCTION: COPTER_D 0x0042b1af
int32_t LanguageManager::CanWeSwitchToGivenLanguage(int32_t nLanguageToSwitchTo) {
	int32_t nFullStringID;
	class basic_string<char> sMessage;

// LINE 178:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T60;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042B204;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T67;
_T60:
	__asm        mov    sMessage.reference, 0;
_T67:
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0042B222;
// LINE 180:
	__asm        mov    eax, nLanguageToSwitchTo;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 181:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    _T3a1;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    near ptr 0x0042B292;

	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    _T13d;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B2DD;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    near ptr 0x0042B2F1;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T173;

	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T1d4;

	__asm        jmp    near ptr 0x0042B310;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1d4;
_T173:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T1b4;

	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    _T1be;
_T1b4:
	__asm        mov    dword ptr [ebp-0x1034], 0;
_T1be:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T213;
_T1d4:
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T213;

	__asm        jmp    near ptr 0x0042B395;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T213;
_T213:
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B3D3;

	__asm        jmp    near ptr 0x0042B3D8;

	__asm        jmp    near ptr 0x0042B3DD;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    near ptr 0x0042B3F5;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T295;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B435;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T295;
_T295:
	__asm        jmp    near ptr 0x0042B449;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2c9;

	__asm        jmp    near ptr 0x0042B45B;

	__asm        jmp    near ptr 0x0042B460;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sMessage.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    _T33e;
_T2c9:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T323;

	__asm        jmp    near ptr 0x0042B49A;

	__asm        jmp    near ptr 0x0042B49F;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    _T32d;
_T323:
	__asm        mov    dword ptr [ebp-0x1048], 0;
_T32d:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sMessage.reference, eax;
_T33e:
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     _T386;

	__asm        jmp    near ptr 0x0042B4FF;

	__asm        jmp    near ptr 0x0042B504;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T386;
_T386:
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B546;

	__asm        jmp    near ptr 0x0042B54B;

	__asm        jmp    _T535;
_T3a1:
	__asm        jmp    near ptr 0x0042B555;

	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    _T400;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B5A0;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T400;
_T400:
	__asm        jmp    near ptr 0x0042B5B4;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T436;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T4db;

	__asm        jmp    near ptr 0x0042B5D3;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4db;
_T436:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T477;

	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    _T481;
_T477:
	__asm        mov    dword ptr [ebp-0x105C], 0;
_T481:
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T4c8;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T4c8;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T4c8;
_T4c8:
	__asm        jmp    near ptr 0x0042B67C;

	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T51a;
_T4db:
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T51a;

	__asm        jmp    near ptr 0x0042B69C;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T51a;
_T51a:
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042B6DA;

	__asm        jmp    near ptr 0x0042B6DF;

	__asm        jmp    _T535;
// LINE 182:
_T535:
	__asm        jmp    near ptr 0x0042B6E9;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5c6;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5c6;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T5a6;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T5a6:
	__asm        jmp    near ptr 0x0042B75A;

	__asm        jmp    near ptr 0x0042B75F;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042B770;

	__asm        jmp    _T5c6;
_T5c6:
	__asm        jmp    near ptr 0x0042B77A;

	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     _T5ed;

	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5ed:
	__asm        jmp    near ptr 0x0042B7A1;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0042B7A9;
// LINE 183:
}

// FUNCTION: COPTER_D 0x0042b7ae
int32_t LanguageManager::GetNextLanguage(int32_t nCurrentLanguage) {
	int32_t nInitialLanguage;

// LINE 193:
	__asm        mov    eax, nCurrentLanguage;
	__asm        mov    nInitialLanguage, eax;
// LINE 195:
	__asm        cmp    nCurrentLanguage, 0x2D;
	__asm        jge    _T23;

	__asm        cmp    nCurrentLanguage, 0;
	__asm        jge    _T2a;
// LINE 196:
_T23:
	__asm        xor    eax, eax;
	__asm        jmp    _T66;
// LINE 199:
_T2a:
	__asm        inc    nCurrentLanguage;
// LINE 200:
	__asm        cmp    nCurrentLanguage, 0x2D;
	__asm        jl     _T3e;
// LINE 201:
	__asm        mov    nCurrentLanguage, 1;
// LINE 202:
_T3e:
	__asm        mov    eax, nCurrentLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::CanWeSwitchToGivenLanguage;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T5e;

	__asm        mov    eax, nCurrentLanguage;
	__asm        cmp    nInitialLanguage, eax;
	__asm        jne    _T2a;
// LINE 203:
_T5e:
	__asm        mov    eax, nCurrentLanguage;
	__asm        jmp    _T66;
// LINE 204:
_T66:
}

// FUNCTION: COPTER_D 0x0042b819
int32_t LanguageManager::GetLanguageIDAlias(int32_t nLanguage) {
// LINE 230:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T18;
// LINE 231:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 235:
_T18:
	__asm        cmp    nLanguage, 2;
	__asm        jne    _T2c;
// LINE 236:
	__asm        mov    eax, 1;
	__asm        jmp    _Tfc;
// LINE 239:
_T2c:
	__asm        cmp    nLanguage, 0x20;
	__asm        je     _T4a;

	__asm        cmp    nLanguage, 0x21;
	__asm        je     _T4a;

	__asm        cmp    nLanguage, 0x22;
	__asm        jne    _T54;
// LINE 240:
_T4a:
	__asm        mov    eax, 3;
	__asm        jmp    _Tfc;
// LINE 241:
_T54:
	__asm        cmp    nLanguage, 0x23;
	__asm        jne    _T68;
// LINE 242:
	__asm        mov    eax, 4;
	__asm        jmp    _Tfc;
// LINE 243:
_T68:
	__asm        cmp    nLanguage, 0x24;
	__asm        jne    _T7c;
// LINE 244:
	__asm        mov    eax, 5;
	__asm        jmp    _Tfc;
// LINE 245:
_T7c:
	__asm        cmp    nLanguage, 0x25;
	__asm        jne    _T90;
// LINE 246:
	__asm        mov    eax, 7;
	__asm        jmp    _Tfc;
// LINE 247:
_T90:
	__asm        cmp    nLanguage, 0x26;
	__asm        jne    _Ta4;
// LINE 248:
	__asm        mov    eax, 6;
	__asm        jmp    _Tfc;
// LINE 249:
_Ta4:
	__asm        cmp    nLanguage, 0x27;
	__asm        jne    _Tb8;
// LINE 250:
	__asm        mov    eax, 0xA;
	__asm        jmp    _Tfc;
// LINE 251:
_Tb8:
	__asm        cmp    nLanguage, 0x2A;
	__asm        jne    _Tcc;
// LINE 252:
	__asm        mov    eax, 0x2B;
	__asm        jmp    _Tfc;
// LINE 253:
_Tcc:
	__asm        cmp    nLanguage, 0xE;
	__asm        jne    _Te0;
// LINE 254:
	__asm        mov    eax, 0x10;
	__asm        jmp    _Tfc;
// LINE 255:
_Te0:
	__asm        cmp    nLanguage, 0xF;
	__asm        jne    _Tf4;
// LINE 256:
	__asm        mov    eax, 0x10;
	__asm        jmp    _Tfc;
// LINE 260:
_Tf4:
	__asm        mov    eax, nLanguage;
	__asm        jmp    _Tfc;
// LINE 261:
_Tfc:
}

// FUNCTION: COPTER_D 0x0042b91a
int32_t LanguageManager::DoesLanguageUseLatinCharacters(int32_t nLanguage) {
// LINE 299:
	__asm        cmp    nLanguage, 1;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 2;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 3;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 4;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 5;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 7;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 8;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 9;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0xA;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0xB;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x14;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x15;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x16;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x17;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x18;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x19;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 6;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x26;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x20;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x21;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x22;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x23;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x24;
	__asm        je     _Tf6;

	__asm        cmp    nLanguage, 0x25;
	__asm        jne    _T100;
_Tf6:
	__asm        mov    eax, 1;
	__asm        jmp    _T102;
_T100:
	__asm        xor    eax, eax;
_T102:
	__asm        jmp    near ptr 0x0042BA21;
// LINE 300:
}

// FUNCTION: COPTER_D 0x0042ba26
int32_t LanguageManager::GetLanguageDirectoryName(class basic_string<char>& sLanguage, int32_t nLanguage) {
// LINE 314:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageEnglishName;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0042BA41;
// LINE 315:
}

// FUNCTION: COPTER_D 0x0042ba46
int32_t LanguageManager::GetLanguageEnglishName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 328:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T22;
// LINE 329:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 331:
_T22:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 332:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    _T259;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042BAD8;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0042BAFC;

	__asm        jmp    near ptr 0x0042BB01;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042BB19;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T125;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BB5C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T125;
_T125:
	__asm        jmp    near ptr 0x0042BB70;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T162;

	__asm        jmp    near ptr 0x0042BB85;

	__asm        jmp    near ptr 0x0042BB8A;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    _T1e0;
_T162:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     _T1c2;

	__asm        jmp    near ptr 0x0042BBCA;

	__asm        jmp    near ptr 0x0042BBCF;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    _T1cc;
_T1c2:
	__asm        mov    dword ptr [ebp-0x103C], 0;
_T1cc:
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T1e0:
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T22e;

	__asm        jmp    near ptr 0x0042BC38;

	__asm        jmp    near ptr 0x0042BC3D;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22e;
_T22e:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042BC88;

	__asm        jmp    near ptr 0x0042BC8D;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;
_T259:
	__asm        jmp    near ptr 0x0042BCA4;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    _T2b8;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BCEF;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2b8;
_T2b8:
	__asm        jmp    near ptr 0x0042BD03;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2f4;

	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3a5;

	__asm        jmp    near ptr 0x0042BD25;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3a5;
_T2f4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     _T335;

	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    _T33f;
_T335:
	__asm        mov    dword ptr [ebp-0x1050], 0;
_T33f:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38f;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T38f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T38f;
_T38f:
	__asm        jmp    near ptr 0x0042BDDA;

	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3e7;
_T3a5:
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3e7;

	__asm        jmp    near ptr 0x0042BDFD;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e7;
_T3e7:
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042BE41;

	__asm        jmp    near ptr 0x0042BE46;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;

	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T68c;
// LINE 333:
_T41f:
	__asm        jmp    near ptr 0x0042BE6A;

	__asm        push   0x597668;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042BE7F;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T482;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042BEB9;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T482;
_T482:
	__asm        jmp    near ptr 0x0042BECD;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T4bc;

	__asm        jmp    near ptr 0x0042BEE2;

	__asm        jmp    near ptr 0x0042BEE7;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    _T62a;
_T4bc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T5c0;

	__asm        jmp    near ptr 0x0042BF1E;

	__asm        jmp    near ptr 0x0042BF23;

	__asm        jmp    near ptr 0x0042BF28;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T507;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T513;

	__asm        jmp    _T513;
_T507:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T513;
_T513:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T59d;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T598;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T598;
_T598:
	__asm        jmp    _T5a6;
_T59d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T5a6:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042BFFB;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5c7;
_T5c0:
	__asm        mov    dword ptr [ebp-8], 0;
_T5c7:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T61c;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T61c;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042C04C;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C05D;

	__asm        jmp    _T61c;
_T61c:
	__asm        jmp    near ptr 0x0042C067;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T62a:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T66c;

	__asm        jmp    near ptr 0x0042C07F;

	__asm        jmp    near ptr 0x0042C084;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x597668;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T66c;
_T66c:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C0C3;

	__asm        jmp    near ptr 0x0042C0C8;
// LINE 334:
	__asm        mov    eax, 1;
	__asm        jmp    _T693;
// LINE 336:
_T68c:
	__asm        xor    eax, eax;
	__asm        jmp    _T693;
// LINE 337:
_T693:
}

// FUNCTION: COPTER_D 0x0042c0de
int32_t LanguageManager::GetLanguageLocalName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 350:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T22;
// LINE 351:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 353:
_T22:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 354:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    _T259;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042C170;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0042C194;

	__asm        jmp    near ptr 0x0042C199;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042C1B1;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T125;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C1F4;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T125;
_T125:
	__asm        jmp    near ptr 0x0042C208;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T162;

	__asm        jmp    near ptr 0x0042C21D;

	__asm        jmp    near ptr 0x0042C222;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    _T1e0;
_T162:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     _T1c2;

	__asm        jmp    near ptr 0x0042C262;

	__asm        jmp    near ptr 0x0042C267;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    _T1cc;
_T1c2:
	__asm        mov    dword ptr [ebp-0x103C], 0;
_T1cc:
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T1e0:
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T22e;

	__asm        jmp    near ptr 0x0042C2D0;

	__asm        jmp    near ptr 0x0042C2D5;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22e;
_T22e:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C320;

	__asm        jmp    near ptr 0x0042C325;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;
_T259:
	__asm        jmp    near ptr 0x0042C33C;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    _T2b8;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C387;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2b8;
_T2b8:
	__asm        jmp    near ptr 0x0042C39B;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2f4;

	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3a5;

	__asm        jmp    near ptr 0x0042C3BD;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3a5;
_T2f4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     _T335;

	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    _T33f;
_T335:
	__asm        mov    dword ptr [ebp-0x1050], 0;
_T33f:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38f;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T38f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T38f;
_T38f:
	__asm        jmp    near ptr 0x0042C472;

	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3e7;
_T3a5:
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3e7;

	__asm        jmp    near ptr 0x0042C495;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e7;
_T3e7:
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C4D9;

	__asm        jmp    near ptr 0x0042C4DE;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;

	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T68c;
// LINE 355:
_T41f:
	__asm        jmp    near ptr 0x0042C502;

	__asm        push   0x59766C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042C517;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T482;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C551;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T482;
_T482:
	__asm        jmp    near ptr 0x0042C565;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T4bc;

	__asm        jmp    near ptr 0x0042C57A;

	__asm        jmp    near ptr 0x0042C57F;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    _T62a;
_T4bc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T5c0;

	__asm        jmp    near ptr 0x0042C5B6;

	__asm        jmp    near ptr 0x0042C5BB;

	__asm        jmp    near ptr 0x0042C5C0;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T507;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T513;

	__asm        jmp    _T513;
_T507:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T513;
_T513:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T59d;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T598;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T598;
_T598:
	__asm        jmp    _T5a6;
_T59d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T5a6:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042C693;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5c7;
_T5c0:
	__asm        mov    dword ptr [ebp-8], 0;
_T5c7:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T61c;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T61c;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042C6E4;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C6F5;

	__asm        jmp    _T61c;
_T61c:
	__asm        jmp    near ptr 0x0042C6FF;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T62a:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T66c;

	__asm        jmp    near ptr 0x0042C717;

	__asm        jmp    near ptr 0x0042C71C;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x59766C;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T66c;
_T66c:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C75B;

	__asm        jmp    near ptr 0x0042C760;
// LINE 356:
	__asm        mov    eax, 1;
	__asm        jmp    _T693;
// LINE 358:
_T68c:
	__asm        xor    eax, eax;
	__asm        jmp    _T693;
// LINE 359:
_T693:
}

// FUNCTION: COPTER_D 0x0042c776
int32_t LanguageManager::GetLanguageRuntimeLibraryName(class basic_string<char>& sLanguage, int32_t nLanguage) {
	int32_t nFullStringID;

// LINE 372:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T22;
// LINE 373:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 375:
_T22:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        push   2;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 376:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        jne    _T259;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1038], eax;
	__asm        jmp    near ptr 0x0042C808;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0042C82C;

	__asm        jmp    near ptr 0x0042C831;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        jmp    near ptr 0x0042C849;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x104C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T125;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1048], eax;
	__asm        mov    eax, [ebp-0x1048];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042C88C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T125;
_T125:
	__asm        jmp    near ptr 0x0042C8A0;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T162;

	__asm        jmp    near ptr 0x0042C8B5;

	__asm        jmp    near ptr 0x0042C8BA;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x104C];
	__asm        jae    _T1e0;
_T162:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1040], eax;
	__asm        cmp    dword ptr [ebp-0x1040], 0;
	__asm        je     _T1c2;

	__asm        jmp    near ptr 0x0042C8FA;

	__asm        jmp    near ptr 0x0042C8FF;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1040];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x103C], eax;
	__asm        jmp    _T1cc;
_T1c2:
	__asm        mov    dword ptr [ebp-0x103C], 0;
_T1cc:
	__asm        mov    ecx, sLanguage;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x103C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T1e0:
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T22e;

	__asm        jmp    near ptr 0x0042C968;

	__asm        jmp    near ptr 0x0042C96D;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1044], eax;
	__asm        mov    eax, [ebp-0x104C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22e;
_T22e:
	__asm        mov    eax, [ebp-0x104C];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042C9B8;

	__asm        jmp    near ptr 0x0042C9BD;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;
_T259:
	__asm        jmp    near ptr 0x0042C9D4;

	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1068], eax;
	__asm        cmp    dword ptr [ebp-0x1068], 0xFFFFFFFF;
	__asm        jne    _T2b8;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x105C], eax;
	__asm        mov    eax, [ebp-0x105C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CA1F;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2b8;
_T2b8:
	__asm        jmp    near ptr 0x0042CA33;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2f4;

	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3a5;

	__asm        jmp    near ptr 0x0042CA55;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1068];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3a5;
_T2f4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1054], eax;
	__asm        cmp    dword ptr [ebp-0x1054], 0;
	__asm        je     _T335;

	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1054];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1050], eax;
	__asm        jmp    _T33f;
_T335:
	__asm        mov    dword ptr [ebp-0x1050], 0;
_T33f:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38f;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T38f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T38f;
_T38f:
	__asm        jmp    near ptr 0x0042CB0A;

	__asm        mov    eax, [ebp-0x1050];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3e7;
_T3a5:
	__asm        cmp    dword ptr [ebp-0x1068], 0;
	__asm        je     _T3e7;

	__asm        jmp    near ptr 0x0042CB2D;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1058], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1034];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e7;
_T3e7:
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042CB71;

	__asm        jmp    near ptr 0x0042CB76;

	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T68c;

	__asm        jmp    _T41f;

	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T68c;
// LINE 377:
_T41f:
	__asm        jmp    near ptr 0x0042CB9A;

	__asm        push   0x597670;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0042CBAF;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T482;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CBE9;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T482;
_T482:
	__asm        jmp    near ptr 0x0042CBFD;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T4bc;

	__asm        jmp    near ptr 0x0042CC12;

	__asm        jmp    near ptr 0x0042CC17;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    _T62a;
_T4bc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T5c0;

	__asm        jmp    near ptr 0x0042CC4E;

	__asm        jmp    near ptr 0x0042CC53;

	__asm        jmp    near ptr 0x0042CC58;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T507;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T513;

	__asm        jmp    _T513;
_T507:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T513;
_T513:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T59d;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T598;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T598;
_T598:
	__asm        jmp    _T5a6;
_T59d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T5a6:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0042CD2B;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5c7;
_T5c0:
	__asm        mov    dword ptr [ebp-8], 0;
_T5c7:
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T61c;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T61c;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0042CD7C;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0042CD8D;

	__asm        jmp    _T61c;
_T61c:
	__asm        jmp    near ptr 0x0042CD97;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sLanguage;
	__asm        mov    [ecx+4], eax;
_T62a:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T66c;

	__asm        jmp    near ptr 0x0042CDAF;

	__asm        jmp    near ptr 0x0042CDB4;

	__asm        mov    eax, sLanguage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x597670;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T66c;
_T66c:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sLanguage;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0042CDF3;

	__asm        jmp    near ptr 0x0042CDF8;
// LINE 378:
	__asm        mov    eax, 1;
	__asm        jmp    _T693;
// LINE 380:
_T68c:
	__asm        xor    eax, eax;
	__asm        jmp    _T693;
// LINE 381:
_T693:
}

// FUNCTION: COPTER_D 0x0042ce0e
int32_t LanguageManager::GetTypefaceForLanguage(int32_t nLanguage, int32_t nType, char * szFaceName) {
// LINE 393:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T18;
// LINE 394:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 399:
_T18:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::DoesLanguageUseLatinCharacters;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T4c;
// LINE 400:
	__asm        push   0x597674;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 401:
	__asm        mov    eax, 1;
	__asm        jmp    _T8c;
// LINE 403:
	__asm        jmp    _T85;
// LINE 405:
_T4c:
	__asm        cmp    nLanguage, 0xE;
	__asm        je     _T6a;

	__asm        cmp    nLanguage, 0xF;
	__asm        je     _T6a;

	__asm        cmp    nLanguage, 0x10;
	__asm        jne    _T85;
// LINE 407:
_T6a:
	__asm        push   0x59767C;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 408:
	__asm        mov    eax, 1;
	__asm        jmp    _T8c;
// LINE 412:
_T85:
	__asm        xor    eax, eax;
	__asm        jmp    _T8c;
// LINE 413:
_T8c:
}

// FUNCTION: COPTER_D 0x0042ce9f
int32_t LanguageManager::GetFontFilePathForLanguage(int32_t nLanguage, int32_t nType, char * szFontFilePath) {
// LINE 427:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    _T2f;
// LINE 428:
	__asm        mov    eax, szFontFilePath;
	__asm        push   eax;
	__asm        push   0x59768C;
	__asm        push   0;
	__asm        push   8;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 429:
	__asm        mov    eax, 1;
	__asm        jmp    _T36;
// LINE 433:
_T2f:
	__asm        xor    eax, eax;
	__asm        jmp    _T36;
// LINE 434:
_T36:
}

// FUNCTION: COPTER_D 0x0042ceda
int32_t LanguageManager::LoadLanguageSystemFonts(int32_t nLanguage) {
	char szFontPath[260];
	int32_t nReturnValue;

// LINE 459:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::DoesLanguageUseLatinCharacters;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T2a;
// LINE 460:
	__asm        mov    eax, 1;
	__asm        jmp    _Taf;
// LINE 462:
_T2a:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageIDAlias;
	__asm        add    esp, 4;
	__asm        mov    nLanguage, eax;
// LINE 464:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    _Ta8;
// LINE 465:
	__asm        push   0x597698;
	__asm        call   LanguageManager::IsTypefaceLoaded;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T9e;
// LINE 466:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x10;
	__asm        call   LanguageManager::GetFontFilePathForLanguage;
	__asm        add    esp, 0xC;
// LINE 468:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C356C];
	__asm        mov    nReturnValue, eax;
// LINE 469:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T96;
// LINE 470:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 472:
_T96:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _Taf;
// LINE 474:
_T9e:
	__asm        mov    eax, 1;
	__asm        jmp    _Taf;
// LINE 476:
_Ta8:
	__asm        xor    eax, eax;
	__asm        jmp    _Taf;
// LINE 477:
_Taf:
}

// FUNCTION: COPTER_D 0x0042cf8e
int32_t LanguageManager::UnloadLanguageSystemFonts(int32_t nLanguage) {
	char szFontPath[260];
	int32_t nReturnValue;

// LINE 492:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::DoesLanguageUseLatinCharacters;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T2a;
// LINE 493:
	__asm        mov    eax, 1;
	__asm        jmp    _T90;
// LINE 495:
_T2a:
	__asm        mov    eax, nLanguage;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageIDAlias;
	__asm        add    esp, 4;
	__asm        mov    nLanguage, eax;
// LINE 497:
	__asm        cmp    nLanguage, 0x10;
	__asm        jne    _T89;
// LINE 498:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x10;
	__asm        call   LanguageManager::GetFontFilePathForLanguage;
	__asm        add    esp, 0xC;
// LINE 500:
	__asm        lea    eax, szFontPath[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3564];
	__asm        mov    nReturnValue, eax;
// LINE 501:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T81;
// LINE 502:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 504:
_T81:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _T90;
// LINE 506:
_T89:
	__asm        xor    eax, eax;
	__asm        jmp    _T90;
// LINE 507:
_T90:
}

// FUNCTION: COPTER_D 0x0042d023
int32_t LanguageManager::IsTypefaceLoaded(char * szFaceName) {
	struct TypefaceTestStruct tempTypefaceTestStruct;
	void * __ptr32 hdcScreen;

// LINE 527:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 528:
	__asm        cmp    hdcScreen, 0;
	__asm        je     _T54;
// LINE 529:
	__asm        mov    eax, szFaceName;
	__asm        mov    tempTypefaceTestStruct.szLanguageTypefaceName, eax;
// LINE 530:
	__asm        mov    tempTypefaceTestStruct.bExists, 0;
// LINE 534:
	__asm        lea    eax, tempTypefaceTestStruct.szLanguageTypefaceName;
	__asm        push   eax;
	__asm        push   0x42D3C9;
	__asm        push   0;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3568];
// LINE 535:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 536:
	__asm        mov    eax, tempTypefaceTestStruct.bExists;
	__asm        jmp    _T5b;
// LINE 538:
_T54:
	__asm        xor    eax, eax;
	__asm        jmp    _T5b;
// LINE 542:
_T5b:
}

// FUNCTION: COPTER_D 0x0042d083
int32_t LanguageManager::GetCurrentSystemLocale() {
	static const <NoType> = { /* <data@0x0042d309> */ };
	unsigned short currentLanguageID;
	unsigned long currentLCID;

// LINE 554:
	__asm        call   dword ptr ds:[0x6C364C];
	__asm        mov    currentLCID, eax;
// LINE 555:
	__asm        mov    eax, currentLCID;
	__asm        mov    currentLanguageID, ax;
// LINE 556:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentLanguageID);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T196;
// LINE 558:
	__asm        mov    eax, 8;
	__asm        jmp    _T2ff;
// LINE 559:
	__asm        mov    eax, 7;
	__asm        jmp    _T2ff;
// LINE 560:
	__asm        mov    eax, 3;
	__asm        jmp    _T2ff;
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ff;
// LINE 562:
	__asm        mov    eax, 2;
	__asm        jmp    _T2ff;
// LINE 563:
_T5b:
	__asm        mov    eax, 2;
	__asm        jmp    _T2ff;
// LINE 564:
_T65:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ff;
// LINE 565:
_T6f:
	__asm        mov    eax, 2;
	__asm        jmp    _T2ff;
// LINE 566:
_T79:
	__asm        mov    eax, 2;
	__asm        jmp    _T2ff;
// LINE 567:
	__asm        mov    eax, 0x15;
	__asm        jmp    _T2ff;
// LINE 568:
	__asm        mov    eax, 3;
	__asm        jmp    _T2ff;
// LINE 569:
	__asm        mov    eax, 3;
	__asm        jmp    _T2ff;
// LINE 570:
_Ta1:
	__asm        mov    eax, 3;
	__asm        jmp    _T2ff;
// LINE 571:
_Tab:
	__asm        mov    eax, 3;
	__asm        jmp    _T2ff;
// LINE 572:
	__asm        mov    eax, 4;
	__asm        jmp    _T2ff;
// LINE 573:
_Tbf:
	__asm        mov    eax, 4;
	__asm        jmp    _T2ff;
// LINE 574:
	__asm        mov    eax, 4;
	__asm        jmp    _T2ff;
// LINE 575:
	__asm        mov    eax, 0x17;
	__asm        jmp    _T2ff;
// LINE 576:
	__asm        mov    eax, 5;
	__asm        jmp    _T2ff;
// LINE 577:
	__asm        mov    eax, 5;
	__asm        jmp    _T2ff;
// LINE 578:
	__asm        mov    eax, 0x14;
	__asm        jmp    _T2ff;
// LINE 579:
	__asm        mov    eax, 0x14;
	__asm        jmp    _T2ff;
// LINE 580:
	__asm        mov    eax, 0xA;
	__asm        jmp    _T2ff;
// LINE 581:
	__asm        mov    eax, 0xA;
	__asm        jmp    _T2ff;
// LINE 582:
	__asm        mov    eax, 0xB;
	__asm        jmp    _T2ff;
// LINE 583:
	__asm        mov    eax, 6;
	__asm        jmp    _T2ff;
// LINE 584:
	__asm        mov    eax, 6;
	__asm        jmp    _T2ff;
// LINE 585:
_T137:
	__asm        mov    eax, 6;
	__asm        jmp    _T2ff;
// LINE 586:
	__asm        mov    eax, 0x1D;
	__asm        jmp    _T2ff;
// LINE 587:
	__asm        mov    eax, 9;
	__asm        jmp    _T2ff;
// LINE 588:
	__asm        mov    eax, 0x12;
	__asm        jmp    _T2ff;
// LINE 589:
	__asm        mov    eax, 0x1A;
	__asm        jmp    _T2ff;
// LINE 590:
	__asm        mov    eax, 0x16;
	__asm        jmp    _T2ff;
// LINE 591:
	__asm        mov    eax, 0x10;
	__asm        jmp    _T2ff;
// LINE 592:
	__asm        mov    eax, 0x13;
	__asm        jmp    _T2ff;
// LINE 593:
_T187:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ff;
// LINE 594:
	__asm        jmp    _T2ff;
_T196:
	__asm        cmp    dword ptr [ebp-0xC], 0x807;
	__asm        jg     _T230;

	__asm        je     _Tbf;

	__asm        sub    dword ptr [ebp-0xC], 0x405;
	__asm        cmp    dword ptr [ebp-0xC], 0x1A;
	__asm        ja     _T187;

	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    SwitchPointers4379207[0][eax*4];
// Switch pointers
// Switch table

	__asm        je     _T65;

	__asm        cmp    dword ptr [ebp-0xC], 0xC09;
	__asm        je     _T5b;

	__asm        cmp    dword ptr [ebp-0xC], 0xC0A;
	__asm        je     _T137;

	__asm        cmp    dword ptr [ebp-0xC], 0xC0C;
	__asm        je     _Ta1;

	__asm        jmp    _T187;
_T2d3:
	__asm        cmp    dword ptr [ebp-0xC], 0x100C;
	__asm        je     _Tab;

	__asm        cmp    dword ptr [ebp-0xC], 0x1409;
	__asm        je     _T6f;

	__asm        cmp    dword ptr [ebp-0xC], 0x1809;
	__asm        je     _T79;

	__asm        jmp    _T187;
// LINE 596:
_T2ff:
}

// FUNCTION: COPTER_D 0x0042d387
int32_t LanguageManager::GetLanguageRoadDrivingSide(int32_t nLanguage) {
// LINE 604:
	__asm        cmp    nLanguage, 0;
	__asm        jne    _T18;
// LINE 605:
	__asm        mov    eax, gDefaultLanguage;
	__asm        mov    nLanguage, eax;
// LINE 608:
_T18:
	__asm        cmp    nLanguage, 2;
	__asm        je     _T2c;

	__asm        cmp    nLanguage, 0x2C;
	__asm        jne    _T33;
// LINE 610:
_T2c:
	__asm        xor    eax, eax;
	__asm        jmp    _T3d;
// LINE 612:
_T33:
	__asm        mov    eax, 1;
	__asm        jmp    _T3d;
// LINE 613:
_T3d:
}

// FUNCTION: COPTER_D 0x0042d3c9
int32_t EnumFontFamilyProcecure(struct tagENUMLOGFONTA* lpelf, struct tagNEWTEXTMETRICA* lpntm, int32_t FontType, long lParam) {
	struct TypefaceTestStruct* tempTypefaceTestStruct;
	char * szEnumeratedFaceName;

// LINE 627:
	__asm        mov    eax, lParam;
	__asm        mov    tempTypefaceTestStruct, eax;
// LINE 628:
	__asm        mov    eax, lpelf;
	__asm        add    eax, 0x1C;
	__asm        mov    szEnumeratedFaceName, eax;
// LINE 630:
	__asm        mov    eax, tempTypefaceTestStruct;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, szEnumeratedFaceName;
	__asm        push   eax;
	__asm        call   strcmp;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T43;
// LINE 631:
	__asm        mov    eax, tempTypefaceTestStruct;
	__asm        mov    dword ptr [eax+4], 1;
// LINE 632:
	__asm        xor    eax, eax;
	__asm        jmp    _T4d;
// LINE 634:
_T43:
	__asm        mov    eax, 1;
	__asm        jmp    _T4d;
// LINE 635:
_T4d:
}



// Contribution: 3:00000664-000006a7 Module: 66, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597664
int32_t gDefaultLanguage = { /* <data@0x00597664> */ };

