// Module: Gamemode.obj
// Source: C:\Copter\source\sparkal\Gamemode.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class CopterGameMode (forward reference);
class CopterGameMode{ // packed(0x4 bytes) TI: 0x170f
public:
	int32_t nModeID;
	void CopterGameMode(const class CopterGameMode&);
	void CopterGameMode(int32_t);
	void CopterGameMode();
	class CopterGameMode& operator=(const class CopterGameMode&);
};

// Type: void;

// Type: int32_t;

// Type: class GameModeCoreData (forward reference);
// VTABLE: COPTER_D 0x005923c0
class GameModeCoreData{ // packed(0x14 bytes) TI: 0x1853
public:
	void GameModeCoreData();
	virtual void ~GameModeCoreData(); // vtable+0x0
	long lPauseCount;
	struct SparkalColor *pColorTable;
	class CGameApp *pGameApp;
	class ScreenWindow *pScreenWindow;
};

// Type: class GameModeMainMenuData (forward reference);
// VTABLE: COPTER_D 0x005923c4
class GameModeMainMenuData : public GameModeCoreData
{ // packed(0x18 bytes) TI: 0x41e1
public:
	void GameModeMainMenuData();
	void CreatePalette();
	void UsePalette();
	int32_t CreateAllSurfaces();
	int32_t DestroyAllSurfaces();
	void Shutdown();
	class SmackerBackBuffer *myVideoBuffer;
};

// Type: char;

// Type: struct UserMenuWindowDescription;
struct UserMenuWindowDescription{ // packed(0x54 bytes) TI: 0x101b
	class basic_string<char> sImageFileName;
	int32_t nTransparentIndex;
	class MRect rectPosition;
	long lMenuStringResourceIndex;
	long lMenuStringResourceCount;
	long lSelectionBase;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	class MPoint ptPositionFirstItem;
	int32_t nSizeItemFont;
	int32_t nLineHeight;
	long lTitleStringResourceIndex;
	int32_t bTitleCentered;
	class MPoint ptTitlePosition;
	int32_t nSizeTitleFont;
};

// Type: class UserMenuWindow (forward reference);
// VTABLE: COPTER_D 0x005912f8
class UserMenuWindow : public GraphicWindow
{ // packed(0x152 bytes) TI: 0x45d0
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t SetSelectionIndex(int32_t); // vtable+0xc4
	virtual int32_t SetSelectionValue(int32_t); // vtable+0xc8
	virtual int32_t GetSelectionIndex(); // vtable+0xcc
	virtual int32_t GetSelectionValue(); // vtable+0xd0
	virtual int32_t GetLineCount(); // vtable+0xd4
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t ExecuteSelection(int32_t); // vtable+0xd8
protected:
	virtual void DrawSelectionIndicators(); // vtable+0xdc
	virtual int32_t DoCursorHitTest(int32_t&, long, long); // vtable+0xe0
	virtual int32_t GetPositionOfNthItem(int32_t, class MPoint&); // vtable+0xe4
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: class GameModePickCareerCityData (forward reference);
// VTABLE: COPTER_D 0x005923c8
class GameModePickCareerCityData : public GameModeCoreData
{ // packed(0x30 bytes) TI: 0x45d6
	enum PickCareerCitySubMode {
		nPickCareerCitySubModeSelect = 0,
		nPickCareerCitySubModeVideo = 1,
	};
public:
	void GameModePickCareerCityData();
	void Initialize();
	void CreatePalette();
	void UsePalette();
	int32_t CreateAllSurfaces();
	int32_t DestroyAllSurfaces();
	void Shutdown();
	class SmackerBackBuffer *myVideoBuffer;
	int32_t nSubMode;
	class MRect rectVideo;
	int32_t bFirstCareerCityData;
};

// Type: class CareerWindow (forward reference);
// VTABLE: COPTER_D 0x00590ef4
class CareerWindow : public GraphicWindow
{ // packed(0x840 bytes) TI: 0x47a5
public:
	void CareerWindow(class MRect&, int32_t, void * __ptr32, long *, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t);
	virtual void ~CareerWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	long SetCurrentCitySelection(long);
	long GetCurrentCitySelection();
	class CareerWindow::CitySelectionFrame{ // packed(0x50 bytes) TI: 0x12ad
	public:
		void CitySelectionFrame(int32_t, int32_t, int32_t);
		virtual void ~CitySelectionFrame(); // vtable+0x0
		void FillDestinationPoints(class MPoint*);
		void FillSourceRects(class MRect*);
		int32_t bLeft;
		int32_t bTop;
		int32_t bSelected;
		class MRect rectFrame[4];
	};
protected:
	void DrawCitySelection();
	void GetCoordinatesForCitySelections(class MPoint[4]*, class MRect[4]*);
	long lCurrentCitySelection;
	class MRect rectCities[3];
	long lCities[3];
	int32_t nCityCount;
	int32_t bAllowCancel;
	class SmackerBackBuffer mySmackerBackBuffers[3];
	void * __ptr32 myPlatformWindow;
	class TextWindow *cityNameTextWindow;
	class TextWindow *cityLevelTextWindow;
	class CBackBuffer *mySelectionImage;
};

// Type: long *;

// Type: class GameModePlayData (forward reference);
// VTABLE: COPTER_D 0x005923cc
class GameModePlayData : public GameModeCoreData
{ // packed(0xb18 bytes) TI: 0x47a7
	enum ExceptionState {
		nExceptionStateNone = 0,
		nExceptionStateVRAppInit = 1,
		nExceptionStateGamePlay = 2,
	};
public:
	void GameModePlayData();
	void Initialize();
	void CreatePalette();
	void UsePalette();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	int32_t CreateIndependentSurfaces();
	void DestroyIndependentSurfaces();
	void HidePanels();
	void ShowPanels();
	void HideEquipment();
	void ShowEquipment();
	void TogglePanelDisplay();
	void ToggleEquipmentDisplay();
	int32_t CreatePanels();
	int32_t DestroyPanels();
	void Shutdown();
	void Sleep();
	void Awake();
	long TestForUserInHelicopter();
	int32_t IsUserInHelicopterNow();
	int32_t IsUserAloneNow();
	long ProcessUserJustJumpedIntoHelicopter();
	long ProcessUserJustJumpedOutOfHelicopter();
	void MakeSureHeliHasProperFlaps();
	void SetUpRenderWindowSizes();
	void ReadUserConfigurableCommands();
	void RemoveUserConfigurableCommands();
	void SetUserConfigurableCommandsToDefaults();
	void SetNonUserConfigurableCommandsToDefaults();
	enum GameModePlayData::ExceptionState nExceptionState;
	int32_t nRenderWindowWidth;
	int32_t nRenderWindowHeight;
	int32_t nShortenedRenderWindowWidth;
	int32_t nShortenedRenderWindowHeight;
	int32_t bPanelsVisibleWhenInCopter;
	int32_t bShowingPanels;
	int32_t bShowingEquipment;
	int32_t bUserWasInHelicopterOnLastCheck;
	class CBackBuffer *pStretchBuffer;
	class SkyImage *pSkyImage;
	class GraphicWindow *pPanel0;
	class GraphicWindow *pPanel1;
	class GraphicWindow *pPanel2;
	class GraphicWindow *pPanel3;
	class RadioCompassWindow *pPanel4;
	class MapWindow *pPanel5;
	class DialWindow *pPanel6;
	class GraphicWindow *pFlap0;
	class GraphicWindow *pFlap1;
	class GraphicWindow *pFlap2;
	class GraphicWindow *pFlap3;
	class PassengerWindow *pPassengerWindow;
	struct CommandSystem commandSystem;
};

// Type: class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: struct tagUserPersonalInfo (forward reference);
struct tagUserPersonalInfo{ // packed(0x58 bytes) TI: 0x1a2a
	char szUserName[64];
	long lMoney;
	long lHelicopters;
	long lEquipment;
	long lTrophies;
	long lPoints;
	long lTeargasCount;
};

// Type: long;

// Type: class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{ // packed(0x4 bytes) TI: 0x1081
protected:
	struct list<Shortcut>::list_node *node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};

// Type: struct Shortcut;
struct Shortcut{ // packed(0x18 bytes) TI: 0x1083
	long lDeviceID;
	long lCommand;
	long lKey;
	long lModifiers;
	long lPush;
	long lIgnoreModifiers;
};

// Type: class GameModeHangarData (forward reference);
// VTABLE: COPTER_D 0x005923d0
class GameModeHangarData : public GameModeCoreData
{ // packed(0xac0 bytes) TI: 0x2b10
public:
	void GameModeHangarData();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void SetCommandsToDefaults();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class HangarWindow *pHangarWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeCatalogData (forward reference);
// VTABLE: COPTER_D 0x005923d4
class GameModeCatalogData : public GameModeCoreData
{ // packed(0xac0 bytes) TI: 0x2b12
public:
	void GameModeCatalogData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class CatalogWindow *pCatalogWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeMissionLogData (forward reference);
// VTABLE: COPTER_D 0x005923d8
class GameModeMissionLogData : public GameModeCoreData
{ // packed(0xac0 bytes) TI: 0x2b0e
public:
	void GameModeMissionLogData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class MissionLogWindow *pMissionLogWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeInventoryData (forward reference);
// VTABLE: COPTER_D 0x005923dc
class GameModeInventoryData : public GameModeCoreData
{ // packed(0xac0 bytes) TI: 0x28d1
public:
	void GameModeInventoryData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class InventoryWindow *pInventoryWindow;
	struct CommandSystem commandSystem;
};

// Type: uint32_t;

// Type: struct bidirectional_iterator<Shortcut,int>;
struct bidirectional_iterator<Shortcut,int>{ // packed(0x1 bytes) TI: 0x1ee7
};

// Type: class GameModeCoreData;
// VTABLE: COPTER_D 0x005923c0
class GameModeCoreData{ // packed(0x14 bytes) TI: 0x1853
public:
	void GameModeCoreData();
	virtual void ~GameModeCoreData(); // vtable+0x0
	long lPauseCount;
	struct SparkalColor *pColorTable;
	class CGameApp *pGameApp;
	class ScreenWindow *pScreenWindow;
};

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:000bc670-000c27dd Module: 1, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bd670
void CopterGameMode::CopterGameMode() {
// LINE 51:
	this->nModeID = 0x0;
// LINE 52:
	__asm        jmp    near ptr 0x004BD68A;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd692
void CopterGameMode::CopterGameMode(int32_t nNewModeID) {

	this->nModeID = nNewModeID;
// LINE 57:
	__asm        jmp    near ptr 0x004BD6AB;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd6b5
void CopterGameMode::CopterGameMode(const class CopterGameMode& newGameMode) {
// LINE 61:
	__asm        mov    eax, newGameMode;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterGameMode::operator=;
// LINE 62:
	__asm        jmp    near ptr 0x004BD6D2;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd6dc
class CopterGameMode& CopterGameMode::operator=(const class CopterGameMode& newGameMode) {
// LINE 65:
	this->nModeID = newGameMode.nModeID;
// LINE 66:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004BD6FA;
// LINE 67:
}

// FUNCTION: COPTER_D 0x004bd701
int32_t operator==(const class CopterGameMode& gameMode1, const class CopterGameMode& gameMode2) {
// LINE 70:
	__asm        mov    eax, gameMode1;
	__asm        mov    ecx, gameMode2;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jne    _T20;

	__asm        mov    eax, 1;
	__asm        jmp    _T22;
_T20:
	__asm        xor    eax, eax;
_T22:
	__asm        jmp    near ptr 0x004BD728;
// LINE 71:
}

// FUNCTION: COPTER_D 0x004bd72d
void GameModeCoreData::GameModeCoreData() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C0;
// LINE 133:
	__asm        jmp    near ptr 0x004BD76F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd777
void GameModeCoreData::~GameModeCoreData() {

	this-><vftable> = 0x5923c0;
// LINE 140:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T47;
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 142:
	this->pColorTable = 0x0;
// LINE 144:
_T47:
	__asm        jmp    near ptr 0x004BD7C3;
}

// FUNCTION: COPTER_D 0x004bd7c8
void GameModeMainMenuData::GameModeMainMenuData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C4;
// LINE 157:
	this->pColorTable = 0x0;
// LINE 158:
	this->pGameApp = 0x0;
// LINE 159:
	this->pScreenWindow = 0x0;
// LINE 160:
	this->myVideoBuffer = 0x0;
// LINE 161:
	__asm        jmp    near ptr 0x004BD812;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd81a
void GameModeMainMenuData::CreatePalette() {
	char szPath[260];

// LINE 172:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Ta1;
// LINE 173:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T94;

	__asm        mov    dword ptr [ebp-0x10C], 0x100;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x110], eax;
_T58:
	__asm        dec    dword ptr [ebp-0x10C];
	__asm        js     _T7b;

	__asm        mov    ecx, [ebp-0x110];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x110], 4;
	__asm        jmp    _T58;
_T7b:
	__asm        jmp    near ptr 0x004BD89A;

	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Ta1;
_T94:
	this->pColorTable = 0x0;
// LINE 175:
_Ta1:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_MENU_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
// LINE 177:
	__asm        jmp    near ptr 0x004BD8F2;
}

// FUNCTION: COPTER_D 0x004bd8f7
void GameModeMainMenuData::UsePalette() {
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 186:
	gCopterPalette.pColors = this->pColorTable;
// LINE 187:
	gCopterPalette.lColors = 0x100;
// LINE 188:
	gCopterPalette.bOwnColors = 0x0;
// LINE 189:
	__asm        jmp    near ptr 0x004BD945;
}

// FUNCTION: COPTER_D 0x004bd94a
int32_t GameModeMainMenuData::CreateAllSurfaces() {
	struct UserMenuWindowDescription tempUMWD;
	class UserMenuWindow *myUserMenuWindow;

// LINE 198:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     _T7a;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004BD9B6;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    tempUMWD.sImageFileName.reference, eax;
	__asm        jmp    _T81;
_T7a:
	tempUMWD.sImageFileName.reference = 0x0;
_T81:
	__asm        mov    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004BD9D7;

	__asm        jmp    near ptr 0x004BD9DC;

	__asm        jmp    near ptr 0x004BD9E1;

	__asm        jmp    near ptr 0x004BD9E6;

	__asm        jmp    near ptr 0x004BD9EB;

	__asm        jmp    near ptr 0x004BD9F0;

	__asm        jmp    near ptr 0x004BD9F5;

	__asm        jmp    near ptr 0x004BD9FA;

	__asm        jmp    near ptr 0x004BD9FF;

	__asm        jmp    near ptr 0x004BDA04;

	None = SZ_MAIN_MENU_IMAGE_FILE_NAME;
// LINE 200:
	__asm        jmp    near ptr 0x004BDA14;

	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004BDA38;
// LINE 201:
	tempUMWD.nTransparentIndex = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 202:
	__asm        jmp    near ptr 0x004BDA45;

	__asm        mov    dword ptr [ebp-0x68], 2;
	__asm        mov    dword ptr [ebp-0x64], 0x1D;
	__asm        mov    dword ptr [ebp-0x60], 0x1AA;
	__asm        mov    dword ptr [ebp-0x5C], 0x1A0;
	__asm        jmp    near ptr 0x004BDA66;

	__asm        lea    eax, [ebp-0x68];
	__asm        lea    ecx, tempUMWD.rectPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 203:
	tempUMWD.lMenuStringResourceIndex = 0x37;
// LINE 204:
	tempUMWD.lMenuStringResourceCount = 0x5;
// LINE 205:
	tempUMWD.lSelectionBase = 0x0;
// LINE 206:
	__asm        mov    byte ptr [ebp-0x6C], 0x80;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0x4A;
	__asm        jmp    near ptr 0x004BDAA8;

	reinterpret_cast<uint32_t>(tempUMWD.colorFont.Blue) = None;
// LINE 207:
	__asm        mov    byte ptr [ebp-0x70], 0xEA;
	__asm        mov    byte ptr [ebp-0x6F], 0xEF;
	__asm        mov    byte ptr [ebp-0x6E], 0x9A;
	__asm        jmp    near ptr 0x004BDABF;

	reinterpret_cast<uint32_t>(tempUMWD.colorFontHighlighted.Blue) = None;
// LINE 210:
	__asm        jmp    near ptr 0x004BDACA;

	__asm        mov    dword ptr [ebp-0x78], 0x74;
	__asm        mov    dword ptr [ebp-0x74], 0x2A;
	__asm        jmp    near ptr 0x004BDADD;

	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x74];
	__asm        lea    edx, tempUMWD.ptPositionFirstItem.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 211:
	tempUMWD.nSizeItemFont = 0x1a;
// LINE 212:
	tempUMWD.nLineHeight = 0x40;
// LINE 213:
	tempUMWD.lTitleStringResourceIndex = 0xffffffff;
// LINE 214:
	tempUMWD.bTitleCentered = 0x0;
// LINE 215:
	__asm        jmp    near ptr 0x004BDB0C;

	__asm        mov    dword ptr [ebp-0x80], 0;
	__asm        mov    dword ptr [ebp-0x7C], 0;
	__asm        jmp    near ptr 0x004BDB1F;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        lea    edx, tempUMWD.ptTitlePosition.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 216:
	tempUMWD.nSizeTitleFont = 0x24;
// LINE 219:
	__asm        push   0x162;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T26a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T231;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T23b;
_T231:
	None = 0x0;
_T23b:
	__asm        push   1;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x7D2;
	__asm        lea    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   CopterMainMenu::CopterMainMenu;
	__asm        mov    myUserMenuWindow, eax;
	__asm        jmp    _T271;
_T26a:
	myUserMenuWindow = 0x0;
// LINE 220:
_T271:
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 221:
	__asm        mov    ecx, this;
	__asm        call   GameModeMainMenuData::CreatePalette;
// LINE 222:
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        jmp    near ptr 0x004BDBE0;

	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2dd;

	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T2dd;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T2dd;
_T2dd:
	__asm        jmp    near ptr 0x004BDC2C;

	__asm        cmp    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        je     _T310;

	__asm        mov    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T310:
	__asm        jmp    near ptr 0x004BDC5F;

	__asm        mov    eax, [ebp-0x88];
	__asm        jmp    near ptr 0x004BDC6A;
// LINE 223:
}

// FUNCTION: COPTER_D 0x004bdc6f
int32_t GameModeMainMenuData::DestroyAllSurfaces() {
// LINE 230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T4d;
// LINE 231:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T43;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T43;
// LINE 232:
_T43:
	this->myVideoBuffer = 0x0;
// LINE 234:
_T4d:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BDCC6;
// LINE 235:
}

// FUNCTION: COPTER_D 0x004bdccb
void GameModePickCareerCityData::GameModePickCareerCityData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        jmp    near ptr 0x004BDCE4;

	__asm        jmp    near ptr 0x004BDCE9;

	this-><GameModePickCareerCityData+0x00> = 0x5923c8;
// LINE 251:
	this->pColorTable = 0x0;
// LINE 252:
	this->pGameApp = 0x0;
// LINE 253:
	this->pScreenWindow = 0x0;
// LINE 254:
	this->myVideoBuffer = 0x0;
// LINE 255:
	this->nSubMode = 0x0;
// LINE 256:
	this-><GameModePickCareerCityData+0x2c> = 0x1;
// LINE 257:
	__asm        jmp    near ptr 0x004BDD33;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bdd3b
void GameModePickCareerCityData::Initialize() {
// LINE 265:
	this->nSubMode = 0x0;
// LINE 266:
	__asm        jmp    near ptr 0x004BDD56;
}

// FUNCTION: COPTER_D 0x004bdd5b
void GameModePickCareerCityData::CreatePalette() {
	char szPath[260];

// LINE 276:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Ta1;
// LINE 277:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T94;

	__asm        mov    dword ptr [ebp-0x10C], 0x100;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x110], eax;
_T58:
	__asm        dec    dword ptr [ebp-0x10C];
	__asm        js     _T7b;

	__asm        mov    ecx, [ebp-0x110];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x110], 4;
	__asm        jmp    _T58;
_T7b:
	__asm        jmp    near ptr 0x004BDDDB;

	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Ta1;
_T94:
	this->pColorTable = 0x0;
// LINE 279:
_Ta1:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_PALETTE_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
// LINE 281:
	__asm        jmp    near ptr 0x004BDE33;
}

// FUNCTION: COPTER_D 0x004bde38
void GameModePickCareerCityData::UsePalette() {
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 290:
	gCopterPalette.pColors = this->pColorTable;
// LINE 291:
	gCopterPalette.lColors = 0x100;
// LINE 292:
	gCopterPalette.bOwnColors = 0x0;
// LINE 293:
	__asm        jmp    near ptr 0x004BDE86;
}

// FUNCTION: COPTER_D 0x004bde8b
int32_t GameModePickCareerCityData::CreateAllSurfaces() {
	class CareerWindow *myCareerWindow;
	long * lNewCitiesPointer;

// LINE 303:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T25;
// LINE 304:
	lNewCitiesPointer = 0x0;
// LINE 305:
	__asm        jmp    _T3b;
// LINE 306:
_T25:
	__asm        mov    eax, gCurrentCareerCityInfo.lCurrentCityIndex;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, 0x5C2B18;
	__asm        add    eax, 0x28;
	__asm        mov    lNewCitiesPointer, eax;
// LINE 312:
_T3b:
	__asm        push   0x840;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Te3;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T73;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T7a;
_T73:
	None = 0x0;
_T7a:
	__asm        jmp    near ptr 0x004BDF0A;

	__asm        jmp    near ptr 0x004BDF0F;

	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x004BDF30;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, lNewCitiesPointer;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x7D7;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CareerWindow::CareerWindow;
	__asm        mov    myCareerWindow, eax;
	__asm        jmp    _Tea;
_Te3:
	myCareerWindow = 0x0;
// LINE 313:
_Tea:
	__asm        mov    eax, myCareerWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCareerWindow;
	__asm        call   dword ptr [eax+4];
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, myCareerWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCareerWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 316:
	__asm        mov    ecx, this;
	__asm        call   GameModePickCareerCityData::CreatePalette;
// LINE 317:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BDFA4;
// LINE 318:
}

// FUNCTION: COPTER_D 0x004bdfa9
int32_t GameModePickCareerCityData::DestroyAllSurfaces() {
// LINE 325:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T4d;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T43;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T43;
// LINE 327:
_T43:
	this->myVideoBuffer = 0x0;
// LINE 329:
_T4d:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BE000;
// LINE 330:
}

// FUNCTION: COPTER_D 0x004be005
void GameModePlayData::GameModePlayData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923CC;
// LINE 343:
	this->nExceptionState = 0x0;
// LINE 344:
	this->nRenderWindowWidth = 0x0;
// LINE 345:
	this->nRenderWindowHeight = 0x0;
// LINE 346:
	this->nShortenedRenderWindowWidth = 0x0;
// LINE 347:
	this->nShortenedRenderWindowHeight = 0x0;
// LINE 348:
	this->bPanelsVisibleWhenInCopter = 0x1;
// LINE 349:
	this->bShowingPanels = 0x0;
// LINE 350:
	this->bShowingEquipment = 0x1;
// LINE 351:
	this->bUserWasInHelicopterOnLastCheck = 0x0;
// LINE 352:
	this->pGameApp = 0x0;
// LINE 353:
	this->lPauseCount = 0x0;
// LINE 354:
	this->pScreenWindow = 0x0;
// LINE 355:
	this->pStretchBuffer = 0x0;
// LINE 356:
	this->pSkyImage = 0x0;
// LINE 357:
	this->pPanel0 = 0x0;
// LINE 358:
	this->pPanel1 = 0x0;
// LINE 359:
	this->pPanel2 = 0x0;
// LINE 360:
	this->pPanel3 = 0x0;
// LINE 361:
	this->pPanel4 = 0x0;
// LINE 362:
	this->pPanel5 = 0x0;
// LINE 363:
	this->pPanel6 = 0x0;
// LINE 364:
	this->pFlap0 = 0x0;
// LINE 365:
	this->pFlap1 = 0x0;
// LINE 366:
	this->pFlap2 = 0x0;
// LINE 367:
	this->pFlap3 = 0x0;
// LINE 368:
	this->pPassengerWindow = 0x0;
// LINE 369:
	this->pColorTable = 0x0;
// LINE 370:
	__asm        jmp    near ptr 0x004BE140;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004be148
void GameModePlayData::Initialize() {
// LINE 390:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::SetNonUserConfigurableCommandsToDefaults;
// LINE 391:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ReadUserConfigurableCommands;
// LINE 392:
	__asm        jmp    near ptr 0x004BE169;
}

// FUNCTION: COPTER_D 0x004be16e
void GameModePlayData::CreatePalette() {
	int32_t i;
	char * pPalettePosition;
	char szPath[260];

// LINE 411:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Ta1;
// LINE 412:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T94;

	__asm        mov    dword ptr [ebp-0x114], 0x100;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
_T58:
	__asm        dec    dword ptr [ebp-0x114];
	__asm        js     _T7b;

	__asm        mov    ecx, [ebp-0x118];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x118], 4;
	__asm        jmp    _T58;
_T7b:
	__asm        jmp    near ptr 0x004BE1EE;

	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Ta1;
_T94:
	this->pColorTable = 0x0;
// LINE 418:
_Ta1:
	__asm        cmp    S_pal, 0;
	__asm        jne    _Tf6;
// LINE 419:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_VR_APP_PALETTE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   7;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 420:
	__asm        mov    eax, SZ_VR_APP_PALETTE_CHUNK_TYPE;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   VRLoadResource;
	__asm        add    esp, 0xC;
	__asm        mov    G_respal, eax;
// LINE 421:
	__asm        mov    eax, G_respal;
	__asm        push   eax;
	__asm        call   VRGetPalFromResource;
	__asm        add    esp, 4;
	__asm        mov    S_pal, eax;
// LINE 424:
_Tf6:
	pPalettePosition = S_pal;
// LINE 425:
	__asm        mov    i, 0;
	__asm        jmp    _T116;
_T110:
	__asm        inc    i;
_T116:
	__asm        cmp    i, 0x100;
	__asm        jge    _T18d;
// LINE 426:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+2], al;
	__asm        inc    pPalettePosition;
// LINE 427:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+1], al;
	__asm        inc    pPalettePosition;
// LINE 428:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4], al;
	__asm        inc    pPalettePosition;
// LINE 429:
	__asm        jmp    _T110;
// LINE 430:
_T18d:
	__asm        jmp    near ptr 0x004BE300;
}

// FUNCTION: COPTER_D 0x004be305
void GameModePlayData::UsePalette() {
// LINE 439:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 440:
	gCopterPalette.pColors = this->pColorTable;
// LINE 441:
	gCopterPalette.lColors = 0x100;
// LINE 442:
	gCopterPalette.bOwnColors = 0x0;
// LINE 443:
	__asm        jmp    near ptr 0x004BE353;
}

// FUNCTION: COPTER_D 0x004be358
void GameModePlayData::Sleep() {
// LINE 451:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 452:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyIndependentSurfaces;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 453:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE38A;

	None = this->pPanel1;
// LINE 454:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3A2;

	None = this->pPanel2;
// LINE 455:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3BA;

	None = this->pPanel3;
// LINE 456:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3D2;

	None = this->pPanel4;
// LINE 457:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3EA;

	None = this->pPanel5;
// LINE 458:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE402;

	None = this->pPanel6;
// LINE 459:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE41A;
// LINE 460:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _Te7;
// LINE 461:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _Te7;
// LINE 462:
_Te7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T10c;
// LINE 463:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T10c;
// LINE 464:
_T10c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T131;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T131;
// LINE 466:
_T131:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T156;
// LINE 467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T156;
// LINE 468:
_T156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE4C6;
// LINE 469:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0xC];
// LINE 471:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0xC];
// LINE 472:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0xC];
// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0xC];
// LINE 474:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0xC];
// LINE 475:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+0xC];
// LINE 476:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T203;
// LINE 477:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0xC];
// LINE 478:
_T203:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T221;
// LINE 479:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0xC];
// LINE 480:
_T221:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T23f;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0xC];
// LINE 482:
_T23f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T25d;
// LINE 483:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0xC];
// LINE 484:
_T25d:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0xC];
// LINE 485:
	__asm        jmp    near ptr 0x004BE5CB;
}

// FUNCTION: COPTER_D 0x004be5d0
void GameModePlayData::Awake() {
// LINE 492:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T2be;
// LINE 494:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 495:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreateIndependentSurfaces;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+8];
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+8];
// LINE 499:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+8];
// LINE 500:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+8];
// LINE 501:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+8];
// LINE 502:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+8];
// LINE 504:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 505:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _Tdd;
// LINE 506:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+8];
// LINE 507:
_Tdd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _Tfb;
// LINE 508:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+8];
// LINE 509:
_Tfb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T119;
// LINE 510:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+8];
// LINE 511:
_T119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T137;
// LINE 512:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+8];
// LINE 513:
_T137:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+8];
// LINE 514:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T2b6;

	None = this->pPanel0;
// LINE 515:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE73D;

	None = this->pPanel1;
// LINE 516:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE755;

	None = this->pPanel2;
// LINE 517:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE76D;

	None = this->pPanel3;
// LINE 518:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE785;

	None = this->pPanel4;
// LINE 519:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE79D;

	None = this->pPanel5;
// LINE 520:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7B5;

	None = this->pPanel6;
// LINE 521:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7CD;

	None = this->pPassengerWindow;
// LINE 522:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7E5;
// LINE 523:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     _T2b6;
// LINE 524:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T247;
// LINE 525:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T247;
// LINE 526:
_T247:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T26c;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T26c;
// LINE 528:
_T26c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T291;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T291;
// LINE 530:
_T291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T2b6;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T2b6;
// LINE 534:
_T2b6:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::UsePalette;
// LINE 536:
_T2be:
	__asm        jmp    near ptr 0x004BE893;
}

// FUNCTION: COPTER_D 0x004be898
int32_t GameModePlayData::CreateAllSurfaces() {
// LINE 543:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreateIndependentSurfaces;
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreatePanels;
// LINE 545:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreatePalette;
// LINE 546:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BE8C6;
// LINE 547:
}

// FUNCTION: COPTER_D 0x004be8cb
int32_t GameModePlayData::CreatePanels() {
	class MRect rectPanel3;
	class MRect rectPanel4;
	class MRect rectPanel5;
	class MRect rectPassengerWindow;
	class MRect rectPanel6;
	class MRect rectPanel0;
	class MRect rectPanel1;
	class MRect rectPanel2;

// LINE 556:
	__asm        jmp    near ptr 0x004BE8E2;

	__asm        jmp    near ptr 0x004BE8E7;
// LINE 557:
	__asm        jmp    near ptr 0x004BE8EC;

	__asm        jmp    near ptr 0x004BE8F1;
// LINE 558:
	__asm        jmp    near ptr 0x004BE8F6;

	__asm        jmp    near ptr 0x004BE8FB;
// LINE 559:
	__asm        jmp    near ptr 0x004BE900;

	__asm        jmp    near ptr 0x004BE905;
// LINE 560:
	__asm        jmp    near ptr 0x004BE90A;

	__asm        jmp    near ptr 0x004BE90F;
// LINE 561:
	__asm        jmp    near ptr 0x004BE914;

	__asm        jmp    near ptr 0x004BE919;
// LINE 562:
	__asm        jmp    near ptr 0x004BE91E;

	__asm        jmp    near ptr 0x004BE923;
// LINE 563:
	__asm        jmp    near ptr 0x004BE928;

	__asm        jmp    near ptr 0x004BE92D;
// LINE 564:
	__asm        cmp    gameResolution, 1;
	__asm        jne    _T17c;
// LINE 565:
	__asm        mov    rectPanel0.left, 0;
	__asm        mov    rectPanel0.top, 0;
	__asm        mov    rectPanel0.right, 0x10;
	__asm        mov    rectPanel0.bottom, 0x10;
	__asm        jmp    near ptr 0x004BE95B;
// LINE 566:
	__asm        mov    rectPanel1.left, 0x1EE;
	__asm        mov    rectPanel1.top, 0;
	__asm        mov    rectPanel1.right, 0x22C;
	__asm        mov    rectPanel1.bottom, 0x3E;
	__asm        jmp    near ptr 0x004BE97C;
// LINE 567:
	__asm        mov    rectPanel2.left, 0x22C;
	__asm        mov    rectPanel2.top, 0;
	__asm        mov    rectPanel2.right, 0x280;
	__asm        mov    rectPanel2.bottom, 0x124;
	__asm        jmp    near ptr 0x004BE99D;
// LINE 568:
	__asm        mov    rectPanel3.left, 0x212;
	__asm        mov    rectPanel3.top, 0x3E;
	__asm        mov    rectPanel3.right, 0x22C;
	__asm        mov    rectPanel3.bottom, 0x124;
	__asm        jmp    near ptr 0x004BE9BE;
// LINE 569:
	__asm        mov    rectPanel4.left, 0;
	__asm        mov    rectPanel4.top, 0x163;
	__asm        mov    rectPanel4.right, 0x1C8;
	__asm        mov    rectPanel4.bottom, 0x18E;
	__asm        jmp    near ptr 0x004BE9DF;
// LINE 570:
	__asm        mov    rectPanel5.left, 0x1C7;
	__asm        mov    rectPanel5.top, 0x122;
	__asm        mov    rectPanel5.right, 0x280;
	__asm        mov    rectPanel5.bottom, 0x1B6;
	__asm        jmp    near ptr 0x004BEA00;
// LINE 571:
	__asm        mov    rectPanel6.left, 0;
	__asm        mov    rectPanel6.top, 0x18E;
	__asm        mov    rectPanel6.right, 0x1C8;
	__asm        mov    rectPanel6.bottom, 0x1E0;
	__asm        jmp    near ptr 0x004BEA21;
// LINE 572:
	__asm        mov    rectPassengerWindow.left, 0x1C6;
	__asm        mov    rectPassengerWindow.top, 0x1B5;
	__asm        mov    rectPassengerWindow.right, 0x280;
	__asm        mov    rectPassengerWindow.bottom, 0x1E0;
	__asm        jmp    near ptr 0x004BEA42;
// LINE 574:
	__asm        jmp    _T19b;
_T17c:
	__asm        cmp    gameResolution, 2;
	__asm        jne    _T18e;
// LINE 577:
	__asm        jmp    _T19b;
_T18e:
	__asm        cmp    gameResolution, 3;
	__asm        jne    _T19b;
// LINE 581:
_T19b:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T1ed;

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel0.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_PANEL0_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T1fa;
_T1ed:
	this->pPanel0 = 0x0;
// LINE 582:
_T1fa:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x24];
// LINE 584:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T268;

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel1.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_PANEL1_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T275;
_T268:
	this->pPanel1 = 0x0;
// LINE 585:
_T275:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x24];
// LINE 587:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     _T2e3;

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel2.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_PANEL2_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
	__asm        jmp    _T2f0;
_T2e3:
	this->pPanel2 = 0x0;
// LINE 588:
_T2f0:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0x24];
// LINE 590:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T35b;

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel3.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_PANEL3_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    _T368;
_T35b:
	this->pPanel3 = 0x0;
// LINE 591:
_T368:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0x24];
// LINE 593:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     _T3d6;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0x604480;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel4.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   RadioCompassWindow::RadioCompassWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        jmp    _T3e3;
_T3d6:
	this->pPanel4 = 0x0;
// LINE 594:
_T3e3:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+4];
// LINE 596:
	__asm        push   0x118;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T447;

	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel5.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   MapWindow::MapWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
	__asm        jmp    _T454;
_T447:
	this->pPanel5 = 0x0;
// LINE 597:
_T454:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+4];
// LINE 599:
	__asm        push   0x1E8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x9C], eax;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T4c2;

	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel6.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        call   DialWindow::DialWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        jmp    _T4cf;
_T4c2:
	this->pPanel6 = 0x0;
// LINE 600:
_T4cf:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+4];
// LINE 602:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 604:
	__asm        push   0xAC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA0], eax;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     _T53e;

	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPassengerWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        call   PassengerWindow::PassengerWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    _T54b;
_T53e:
	this->pPassengerWindow = 0x0;
// LINE 605:
_T54b:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+4];
// LINE 609:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    _T73e;

	None = this->pPanel0;
// LINE 610:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEE5E;

	None = this->pPanel1;
// LINE 611:
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEE7F;

	None = this->pPanel2;
// LINE 612:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEA0;

	None = this->pPanel3;
// LINE 613:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEC1;

	None = this->pPanel4;
// LINE 614:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEE2;

	None = this->pPanel5;
// LINE 615:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF03;

	None = this->pPanel6;
// LINE 616:
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF24;

	None = this->pPassengerWindow;
// LINE 617:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF45;
// LINE 618:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T6ab;
// LINE 619:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T6ab;
// LINE 620:
_T6ab:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T6dc;
// LINE 621:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T6dc;
// LINE 622:
_T6dc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T70d;
// LINE 623:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T70d;
// LINE 624:
_T70d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T73e;
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T73e;
// LINE 628:
_T73e:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF013;
// LINE 629:
}

// FUNCTION: COPTER_D 0x004bf018
void GameModePlayData::MakeSureHeliHasProperFlaps() {
	class MRect rectFlap0;
	class MRect rectFlap2;
	struct tagUserPersonalInfo *userPersonalInfo;
	class MRect rectFlap1;
	class MRect rectFlap3;

// LINE 638:
	__asm        jmp    near ptr 0x004BF029;

	__asm        jmp    near ptr 0x004BF02E;
// LINE 639:
	__asm        jmp    near ptr 0x004BF033;

	__asm        jmp    near ptr 0x004BF038;
// LINE 640:
	__asm        jmp    near ptr 0x004BF03D;

	__asm        jmp    near ptr 0x004BF042;
// LINE 641:
	__asm        jmp    near ptr 0x004BF047;

	__asm        jmp    near ptr 0x004BF04C;
// LINE 642:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    userPersonalInfo, eax;
// LINE 644:
	__asm        cmp    gameResolution, 1;
	__asm        jne    _Tcd;
// LINE 645:
	__asm        mov    rectFlap0.left, 0x1F6;
	__asm        mov    rectFlap0.top, 0x18;
	__asm        mov    rectFlap0.right, 0x280;
	__asm        mov    rectFlap0.bottom, 0x52;
	__asm        jmp    near ptr 0x004BF082;
// LINE 646:
	__asm        mov    rectFlap1.left, 0x1F6;
	__asm        mov    rectFlap1.top, 0x5A;
	__asm        mov    rectFlap1.right, 0x280;
	__asm        mov    rectFlap1.bottom, 0x94;
	__asm        jmp    near ptr 0x004BF0A3;
// LINE 647:
	__asm        mov    rectFlap2.left, 0x1F6;
	__asm        mov    rectFlap2.top, 0x9C;
	__asm        mov    rectFlap2.right, 0x280;
	__asm        mov    rectFlap2.bottom, 0xD6;
	__asm        jmp    near ptr 0x004BF0C4;
// LINE 648:
	__asm        mov    rectFlap3.left, 0x1F6;
	__asm        mov    rectFlap3.top, 0xDE;
	__asm        mov    rectFlap3.right, 0x280;
	__asm        mov    rectFlap3.bottom, 0x118;
	__asm        jmp    _Tcd;
// LINE 651:
_Tcd:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 1;
	__asm        je     _T18b;
// LINE 652:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        jne    _T186;
// LINE 653:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T130;

	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectFlap0.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_FLAP0_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    _T13a;
_T130:
	this->pFlap0 = 0x0;
// LINE 654:
_T13a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+4];
// LINE 655:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x24];
// LINE 656:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T186;
// LINE 657:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T186;
// LINE 660:
_T186:
	__asm        jmp    _T1b3;
// LINE 661:
_T18b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T1b3;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 663:
	this->pFlap0 = 0x0;
// LINE 666:
_T1b3:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     _T298;
// LINE 667:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        jne    _T293;
// LINE 668:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T23d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T205;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T20c;
_T205:
	None = 0x0;
_T20c:
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, rectFlap1.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_FLAP1_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T247;
_T23d:
	this->pFlap1 = 0x0;
// LINE 669:
_T247:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+4];
// LINE 670:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x24];
// LINE 671:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T293;
// LINE 672:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T293;
// LINE 675:
_T293:
	__asm        jmp    _T2c0;
// LINE 676:
_T298:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T2c0;
// LINE 677:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x6C];
// LINE 678:
	this->pFlap1 = 0x0;
// LINE 681:
_T2c0:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 4;
	__asm        je     _T3a5;
// LINE 682:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        jne    _T3a0;
// LINE 683:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T34a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T312;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T319;
_T312:
	None = 0x0;
_T319:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, rectFlap2.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_FLAP2_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T354;
_T34a:
	this->pFlap2 = 0x0;
// LINE 684:
_T354:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+4];
// LINE 685:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x24];
// LINE 686:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T3a0;
// LINE 687:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T3a0;
// LINE 690:
_T3a0:
	__asm        jmp    _T3cd;
// LINE 691:
_T3a5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T3cd;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x6C];
// LINE 693:
	this->pFlap2 = 0x0;
// LINE 696:
_T3cd:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _T4b2;
// LINE 697:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        jne    _T4ad;
// LINE 698:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T457;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T41f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T426;
_T41f:
	None = 0x0;
_T426:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, rectFlap3.left;
	__asm        push   eax;
	__asm        mov    eax, SZ_FLAP3_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    _T461;
_T457:
	this->pFlap3 = 0x0;
// LINE 699:
_T461:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+4];
// LINE 700:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x24];
// LINE 701:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T4ad;
// LINE 702:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T4ad;
// LINE 705:
_T4ad:
	__asm        jmp    _T4da;
// LINE 706:
_T4b2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T4da;
// LINE 707:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x6C];
// LINE 708:
	this->pFlap3 = 0x0;
// LINE 712:
_T4da:
	__asm        jmp    near ptr 0x004BF4F7;
}

// FUNCTION: COPTER_D 0x004bf4fc
int32_t GameModePlayData::CreateIndependentSurfaces() {
// LINE 721:
	__asm        push   0x150;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T49;

	__asm        push   0xC8;
	__asm        push   0x280;
	__asm        mov    eax, G_daynight;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   SkyImage::SkyImage;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T53;
_T49:
	this->pSkyImage = 0x0;
// LINE 724:
_T53:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   CGameApp::GetFullRenderingWindowSize;
// LINE 725:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tb5;

	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _Tbf;
_Tb5:
	this->pStretchBuffer = 0x0;
// LINE 726:
_Tbf:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF5C5;
// LINE 727:
}

// FUNCTION: COPTER_D 0x004bf5ca
void GameModePlayData::DestroyIndependentSurfaces() {
// LINE 736:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T5a;
// LINE 737:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BF615;

	__asm        jmp    _T50;
// LINE 738:
_T50:
	this->pStretchBuffer = 0x0;
// LINE 740:
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _Tad;
// LINE 741:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta3;

	__asm        jmp    near ptr 0x004BF64F;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BF668;

	__asm        jmp    _Ta3;
// LINE 742:
_Ta3:
	this->pSkyImage = 0x0;
// LINE 744:
_Tad:
	__asm        jmp    near ptr 0x004BF67C;
}

// FUNCTION: COPTER_D 0x004bf681
void GameModePlayData::DestroyAllSurfaces() {
// LINE 753:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyIndependentSurfaces;
// LINE 754:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyPanels;
// LINE 755:
	__asm        jmp    near ptr 0x004BF6A2;
}

// FUNCTION: COPTER_D 0x004bf6a7
int32_t GameModePlayData::DestroyPanels() {
// LINE 763:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T34;
// LINE 764:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x6C];
// LINE 765:
	this->pPanel0 = 0x0;
// LINE 767:
_T34:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _T5c;
// LINE 768:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x6C];
// LINE 769:
	this->pPanel1 = 0x0;
// LINE 771:
_T5c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T84;
// LINE 772:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0x6C];
// LINE 773:
	this->pPanel2 = 0x0;
// LINE 775:
_T84:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     _Tac;
// LINE 776:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 777:
	this->pPanel3 = 0x0;
// LINE 779:
_Tac:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     _Td4;
// LINE 780:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x6C];
// LINE 781:
	this->pPanel4 = 0x0;
// LINE 783:
_Td4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _Tfc;
// LINE 784:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0x6C];
// LINE 785:
	this->pPanel5 = 0x0;
// LINE 787:
_Tfc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0;
	__asm        je     _T124;
// LINE 788:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+0x6C];
// LINE 789:
	this->pPanel6 = 0x0;
// LINE 791:
_T124:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T14c;
// LINE 792:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 793:
	this->pFlap0 = 0x0;
// LINE 795:
_T14c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T174;
// LINE 796:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x6C];
// LINE 797:
	this->pFlap1 = 0x0;
// LINE 799:
_T174:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T19c;
// LINE 800:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x6C];
// LINE 801:
	this->pFlap2 = 0x0;
// LINE 803:
_T19c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T1c4;
// LINE 804:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x6C];
// LINE 805:
	this->pFlap3 = 0x0;
// LINE 807:
_T1c4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T1ec;
// LINE 808:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 809:
	this->pPassengerWindow = 0x0;
// LINE 811:
_T1ec:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF89D;
// LINE 812:
}

// FUNCTION: COPTER_D 0x004bf8a2
void GameModePlayData::ShowPanels() {
// LINE 835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    _T1ff;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _T1ff;
// LINE 836:
	this->bShowingPanels = 0x1;
// LINE 839:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T72;
// LINE 840:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowWide, eax;
// LINE 841:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowHigh, eax;
// LINE 842:
	__asm        jmp    near ptr 0x004BF906;

	qwindow.RenderWide = this->pStretchBuffer->mStride;
// LINE 845:
_T72:
	swindow.WindowWide = this->nShortenedRenderWindowWidth;
// LINE 846:
	swindow.WindowHigh = this->nShortenedRenderWindowHeight;
// LINE 847:
	__asm        jmp    near ptr 0x004BF92F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    swindow.RenderWide, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 850:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF958;

	None = this->pPanel1;
// LINE 851:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF970;

	None = this->pPanel2;
// LINE 852:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF988;

	None = this->pPanel3;
// LINE 853:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9A0;

	None = this->pPanel4;
// LINE 854:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9B8;

	None = this->pPanel5;
// LINE 855:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9D0;

	None = this->pPanel6;
// LINE 856:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9E8;

	None = this->pPassengerWindow;
// LINE 857:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFA00;
// LINE 858:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     _T1ff;
// LINE 859:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T190;
// LINE 860:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T190;
// LINE 861:
_T190:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T1b5;
// LINE 862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T1b5;
// LINE 863:
_T1b5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1da;
// LINE 864:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T1da;
// LINE 865:
_T1da:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T1ff;
// LINE 866:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T1ff;
// LINE 870:
_T1ff:
	__asm        jmp    near ptr 0x004BFAA6;
}

// FUNCTION: COPTER_D 0x004bfaab
void GameModePlayData::HidePanels() {
// LINE 889:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T1e5;
// LINE 890:
	this->bShowingPanels = 0x0;
// LINE 892:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T65;
// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowWide, eax;
// LINE 894:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowHigh, eax;
// LINE 895:
	__asm        jmp    near ptr 0x004BFB02;

	qwindow.RenderWide = this->pStretchBuffer->mStride;
// LINE 898:
_T65:
	swindow.WindowWide = this->nRenderWindowWidth;
// LINE 899:
	swindow.WindowHigh = this->nRenderWindowHeight;
// LINE 900:
	__asm        jmp    near ptr 0x004BFB2B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    swindow.RenderWide, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 904:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB54;

	None = this->pPanel1;
// LINE 905:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB6C;

	None = this->pPanel2;
// LINE 906:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB84;

	None = this->pPanel3;
// LINE 907:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB9C;

	None = this->pPanel4;
// LINE 908:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBB4;

	None = this->pPanel5;
// LINE 909:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBCC;

	None = this->pPanel6;
// LINE 910:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBE4;

	None = this->pPassengerWindow;
// LINE 911:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBFC;
// LINE 912:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T176;
// LINE 913:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T176;
// LINE 914:
_T176:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T19b;
// LINE 915:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T19b;
// LINE 916:
_T19b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1c0;
// LINE 917:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T1c0;
// LINE 918:
_T1c0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T1e5;
// LINE 919:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T1e5;
// LINE 922:
_T1e5:
	__asm        jmp    near ptr 0x004BFC95;
}

// FUNCTION: COPTER_D 0x004bfc9a
void GameModePlayData::ShowEquipment() {
// LINE 930:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    _Td1;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _Td1;
// LINE 931:
	this->bShowingEquipment = 0x1;
// LINE 932:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _Td1;
// LINE 933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T62;
// LINE 934:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T62;
// LINE 935:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T87;
// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T87;
// LINE 937:
_T87:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _Tac;
// LINE 938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _Tac;
// LINE 939:
_Tac:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _Td1;
// LINE 940:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _Td1;
// LINE 943:
_Td1:
	__asm        jmp    near ptr 0x004BFD70;
}

// FUNCTION: COPTER_D 0x004bfd75
void GameModePlayData::HideEquipment() {
// LINE 952:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     _Tb7;
// LINE 953:
	this->bShowingEquipment = 0x0;
// LINE 954:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T48;
// LINE 955:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T48;
// LINE 956:
_T48:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     _T6d;
// LINE 957:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T6d;
// LINE 958:
_T6d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T92;
// LINE 959:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _T92;
// LINE 960:
_T92:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _Tb7;
// LINE 961:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    _Tb7;
// LINE 963:
_Tb7:
	__asm        jmp    near ptr 0x004BFE31;
}

// FUNCTION: COPTER_D 0x004bfe36
void GameModePlayData::TogglePanelDisplay() {
// LINE 972:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T30;
// LINE 974:
	this->bPanelsVisibleWhenInCopter = 0x0;
// LINE 975:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HidePanels;
// LINE 977:
	__asm        jmp    _T42;
// LINE 979:
_T30:
	this->bPanelsVisibleWhenInCopter = 0x1;
// LINE 980:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowPanels;
// LINE 982:
_T42:
	__asm        jmp    near ptr 0x004BFE7D;
}

// FUNCTION: COPTER_D 0x004bfe82
void GameModePlayData::ToggleEquipmentDisplay() {
// LINE 991:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     _T26;
// LINE 992:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HideEquipment;
// LINE 993:
	__asm        jmp    _T2e;
// LINE 994:
_T26:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowEquipment;
// LINE 995:
_T2e:
	__asm        jmp    near ptr 0x004BFEB5;
}

// FUNCTION: COPTER_D 0x004bfeba
void GameModePlayData::Shutdown() {
// LINE 1003:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyAllSurfaces;
// LINE 1004:
	__asm        jmp    near ptr 0x004BFED3;
}

// FUNCTION: COPTER_D 0x004bfed8
long GameModePlayData::TestForUserInHelicopter() {
	long lReturnValue;

// LINE 1012:
	lReturnValue = 0x0;
// LINE 1014:
	__asm        cmp    G_camera_mode, 3;
	__asm        je     _T25;

	__asm        jmp    _T2a;
_T25:
	__asm        jmp    _T62;
_T2a:
	__asm        jmp    _T39;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T62;
// LINE 1015:
_T39:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jne    _T5d;
// LINE 1020:
	this->bUserWasInHelicopterOnLastCheck = 0x1;
// LINE 1021:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ProcessUserJustJumpedIntoHelicopter;
	__asm        jmp    _T8e;
// LINE 1024:
_T5d:
	__asm        jmp    _T86;
// LINE 1025:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     _T86;
// LINE 1030:
	this->bUserWasInHelicopterOnLastCheck = 0x0;
// LINE 1031:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ProcessUserJustJumpedOutOfHelicopter;
	__asm        jmp    _T8e;
// LINE 1034:
_T86:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    _T8e;
// LINE 1035:
_T8e:
}

// FUNCTION: COPTER_D 0x004bff6b
long GameModePlayData::ProcessUserJustJumpedIntoHelicopter() {
// LINE 1046:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 1047:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     _T29;
// LINE 1048:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowPanels;
// LINE 1049:
_T29:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BFF9E;
// LINE 1050:
}

// FUNCTION: COPTER_D 0x004bffa3
long GameModePlayData::ProcessUserJustJumpedOutOfHelicopter() {
// LINE 1060:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HidePanels;
// LINE 1065:
	__asm        cmp    gGraduationState.nGraduationState, 1;
	__asm        jne    _T2b;
// LINE 1066:
	__asm        mov    eax, 3;
	__asm        jmp    _T32;
// LINE 1068:
_T2b:
	__asm        xor    eax, eax;
	__asm        jmp    _T32;
// LINE 1069:
_T32:
}

// FUNCTION: COPTER_D 0x004bffda
void GameModePlayData::SetUpRenderWindowSizes() {
// LINE 1084:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   CGameApp::GetFullRenderingWindowSize;
// LINE 1085:
	this->nShortenedRenderWindowWidth = this->nRenderWindowWidth;
// LINE 1086:
	this->nShortenedRenderWindowHeight = this->nRenderWindowHeight;
// LINE 1088:
	__asm        cmp    gameResolution, 0;
	__asm        jne    _T5d;
// LINE 1089:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x28;
// LINE 1090:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x28;
// LINE 1092:
	__asm        jmp    _Tbe;
_T5d:
	__asm        cmp    gameResolution, 1;
	__asm        jne    _T7d;
// LINE 1093:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x50;
// LINE 1094:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x50;
// LINE 1096:
	__asm        jmp    _Tbe;
_T7d:
	__asm        cmp    gameResolution, 2;
	__asm        jne    _T9d;
// LINE 1097:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x64;
// LINE 1098:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x64;
// LINE 1100:
	__asm        jmp    _Tbe;
_T9d:
	__asm        cmp    gameResolution, 3;
	__asm        jne    _Tbe;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x80;
// LINE 1102:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x80;
// LINE 1105:
_Tbe:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T131;
// LINE 1106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowWide, eax;
// LINE 1107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowHigh, eax;
// LINE 1108:
	__asm        jmp    near ptr 0x004C00CC;

	qwindow.RenderWide = this->pStretchBuffer->mStride;
// LINE 1111:
	swindow.WindowWide = this->nShortenedRenderWindowWidth;
// LINE 1112:
	swindow.WindowHigh = this->nShortenedRenderWindowHeight;
// LINE 1113:
	__asm        jmp    near ptr 0x004C00F5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    swindow.RenderWide, eax;
// LINE 1115:
	__asm        jmp    _T192;
// LINE 1116:
_T131:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowWide, eax;
// LINE 1117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    qwindow.WindowHigh, eax;
// LINE 1118:
	__asm        jmp    near ptr 0x004C0132;

	qwindow.RenderWide = this->pStretchBuffer->mStride;
// LINE 1121:
	swindow.WindowWide = this->nRenderWindowWidth;
// LINE 1122:
	swindow.WindowHigh = this->nRenderWindowHeight;
// LINE 1123:
	__asm        jmp    near ptr 0x004C015B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    swindow.RenderWide, eax;
// LINE 1125:
_T192:
	__asm        jmp    near ptr 0x004C0171;
}

// FUNCTION: COPTER_D 0x004c0176
void GameModePlayData::ReadUserConfigurableCommands() {
// LINE 1134:
	__asm        mov    eax, this;
	__asm        add    eax, 0x148;
	__asm        push   eax;
	__asm        call   ReadShortcutPrefsFile;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T2d;
// LINE 1135:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::SetUserConfigurableCommandsToDefaults;
// LINE 1136:
_T2d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1137:
	__asm        jmp    near ptr 0x004C01B3;
}

// FUNCTION: COPTER_D 0x004c01b8
void GameModePlayData::RemoveUserConfigurableCommands() {
	long lCurrentCommand;
	class list<Shortcut>::iterator tempShortcutListIterator;

// LINE 1144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C01DD;

	__asm        jmp    _T2a;
// LINE 1147:
_T2a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004C01F9;

	__asm        jmp    near ptr 0x004C01FE;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    _T5c;

	__asm        jmp    _T70;

	__asm        jmp    _T5c;
_T5c:
	__asm        jmp    _T6b;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T70;
_T6b:
	__asm        jmp    _T75;
_T70:
	__asm        jmp    _T13d;
_T75:
	__asm        jmp    _T84;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T13d;
// LINE 1148:
_T84:
	__asm        jmp    near ptr 0x004C0241;

	lCurrentCommand = tempShortcutListIterator.node->data.lCommand;
// LINE 1149:
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        call   IsCommandConfigurable;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T11a;
// LINE 1150:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C0271;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004C027C;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C02A2;

	__asm        jmp    near ptr 0x004C02A7;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x004C02BE;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004C02CD;
// LINE 1151:
	__asm        jmp    _T138;
// LINE 1152:
_T11a:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C02E5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T138;
// LINE 1153:
_T138:
	__asm        jmp    _T2a;
// LINE 1154:
_T13d:
	__asm        jmp    near ptr 0x004C02FA;
}

// FUNCTION: COPTER_D 0x004c02ff
void GameModePlayData::SetUserConfigurableCommandsToDefaults() {
// LINE 1164:
	__asm        mov    eax, this;
	__asm        add    eax, 0x148;
	__asm        push   eax;
	__asm        call   MakeDefaultConfigurableShortcuts;
	__asm        add    esp, 4;
// LINE 1165:
	__asm        jmp    near ptr 0x004C0321;
}

// FUNCTION: COPTER_D 0x004c0326
void GameModePlayData::SetNonUserConfigurableCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1178:
	tempShortcut.lDeviceID = 0x0;
// LINE 1180:
	tempShortcut.lCommand = 0x0;
// LINE 1181:
	tempShortcut.lKey = 0x0;
// LINE 1182:
	tempShortcut.lModifiers = 0x0;
// LINE 1183:
	tempShortcut.lPush = 0x0;
// LINE 1184:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C037C;

	__asm        jmp    near ptr 0x004C0381;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C03A3;
// LINE 1187:
	tempShortcut.lCommand = 0x38;
// LINE 1188:
	tempShortcut.lKey = 0x1b;
// LINE 1189:
	tempShortcut.lModifiers = 0x0;
// LINE 1190:
	tempShortcut.lPush = 0x1;
// LINE 1191:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004C03E0;

	__asm        jmp    near ptr 0x004C03E5;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0407;
// LINE 1194:
	tempShortcut.lCommand = 0x22;
// LINE 1195:
	tempShortcut.lKey = 0x70;
// LINE 1196:
	tempShortcut.lModifiers = 0x2;
// LINE 1197:
	tempShortcut.lPush = 0x1;
// LINE 1198:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1199:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004C0444;

	__asm        jmp    near ptr 0x004C0449;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C046B;
// LINE 1201:
	tempShortcut.lCommand = 0x23;
// LINE 1202:
	tempShortcut.lKey = 0x71;
// LINE 1203:
	tempShortcut.lModifiers = 0x2;
// LINE 1204:
	tempShortcut.lPush = 0x1;
// LINE 1205:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1206:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004C04A8;

	__asm        jmp    near ptr 0x004C04AD;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C04CF;
// LINE 1208:
	tempShortcut.lCommand = 0x24;
// LINE 1209:
	tempShortcut.lKey = 0x72;
// LINE 1210:
	tempShortcut.lModifiers = 0x2;
// LINE 1211:
	tempShortcut.lPush = 0x1;
// LINE 1212:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1213:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004C050C;

	__asm        jmp    near ptr 0x004C0511;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0533;
// LINE 1215:
	tempShortcut.lCommand = 0x25;
// LINE 1216:
	tempShortcut.lKey = 0x73;
// LINE 1217:
	tempShortcut.lModifiers = 0x2;
// LINE 1218:
	tempShortcut.lPush = 0x1;
// LINE 1219:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1220:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004C0570;

	__asm        jmp    near ptr 0x004C0575;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0597;
// LINE 1222:
	tempShortcut.lCommand = 0x26;
// LINE 1223:
	tempShortcut.lKey = 0x31;
// LINE 1224:
	tempShortcut.lModifiers = 0x2;
// LINE 1225:
	tempShortcut.lPush = 0x0;
// LINE 1226:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004C05D4;

	__asm        jmp    near ptr 0x004C05D9;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C05FB;
// LINE 1229:
	tempShortcut.lCommand = 0x27;
// LINE 1230:
	tempShortcut.lKey = 0x32;
// LINE 1231:
	tempShortcut.lModifiers = 0x2;
// LINE 1232:
	tempShortcut.lPush = 0x0;
// LINE 1233:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x004C0638;

	__asm        jmp    near ptr 0x004C063D;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C065F;
// LINE 1236:
	tempShortcut.lCommand = 0x28;
// LINE 1237:
	tempShortcut.lKey = 0x33;
// LINE 1238:
	tempShortcut.lModifiers = 0x2;
// LINE 1239:
	tempShortcut.lPush = 0x0;
// LINE 1240:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C06A2;

	__asm        jmp    near ptr 0x004C06A7;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C06C9;
// LINE 1243:
	tempShortcut.lCommand = 0x29;
// LINE 1244:
	tempShortcut.lKey = 0x34;
// LINE 1245:
	tempShortcut.lModifiers = 0x2;
// LINE 1246:
	tempShortcut.lPush = 0x0;
// LINE 1247:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1248:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C070F;

	__asm        jmp    near ptr 0x004C0714;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C073C;
// LINE 1250:
	tempShortcut.lCommand = 0x2a;
// LINE 1251:
	tempShortcut.lKey = 0x48;
// LINE 1252:
	tempShortcut.lModifiers = 0x2;
// LINE 1253:
	tempShortcut.lPush = 0x1;
// LINE 1254:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C0782;

	__asm        jmp    near ptr 0x004C0787;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C07AF;
// LINE 1257:
	tempShortcut.lCommand = 0x2d;
// LINE 1258:
	tempShortcut.lKey = 0x4f;
// LINE 1259:
	tempShortcut.lModifiers = 0x2;
// LINE 1260:
	tempShortcut.lPush = 0x1;
// LINE 1261:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x004C07F5;

	__asm        jmp    near ptr 0x004C07FA;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0822;
// LINE 1264:
	tempShortcut.lCommand = 0x2e;
// LINE 1265:
	tempShortcut.lKey = 0x47;
// LINE 1266:
	tempShortcut.lModifiers = 0x2;
// LINE 1267:
	tempShortcut.lPush = 0x1;
// LINE 1268:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1269:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004C0868;

	__asm        jmp    near ptr 0x004C086D;

	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C0895;

	__asm        mov    eax, [ebp-0xB8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x004C08A9;

	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     _T5a5;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xBC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T5a5;
_T5a5:
	__asm        jmp    near ptr 0x004C08D0;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x004C092E;

	__asm        jmp    near ptr 0x004C0933;

	__asm        jmp    near ptr 0x004C0938;
// LINE 1271:
	tempShortcut.lCommand = 0x33;
// LINE 1272:
	tempShortcut.lKey = 0x53;
// LINE 1273:
	tempShortcut.lModifiers = 0x2;
// LINE 1274:
	tempShortcut.lPush = 0x1;
// LINE 1275:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x004C097E;

	__asm        jmp    near ptr 0x004C0983;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C09AB;
// LINE 1278:
	tempShortcut.lCommand = 0x34;
// LINE 1279:
	tempShortcut.lKey = 0x45;
// LINE 1280:
	tempShortcut.lModifiers = 0x2;
// LINE 1281:
	tempShortcut.lPush = 0x1;
// LINE 1282:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C09F1;

	__asm        jmp    near ptr 0x004C09F6;

	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C0A1E;

	__asm        mov    eax, [ebp-0xDC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x004C0A32;

	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     _T72e;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xE0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T72e;
_T72e:
	__asm        jmp    near ptr 0x004C0A59;

	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xE4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xE4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C0AB7;

	__asm        jmp    near ptr 0x004C0ABC;

	__asm        jmp    near ptr 0x004C0AC1;
// LINE 1285:
	tempShortcut.lCommand = 0x2c;
// LINE 1286:
	tempShortcut.lKey = 0x4c;
// LINE 1287:
	tempShortcut.lModifiers = 0x2;
// LINE 1288:
	tempShortcut.lPush = 0x0;
// LINE 1289:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xE8], eax;
	__asm        jmp    near ptr 0x004C0B07;

	__asm        jmp    near ptr 0x004C0B0C;

	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C0B34;

	__asm        mov    eax, [ebp-0xF4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x004C0B48;

	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        je     _T844;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xF8];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T844;
_T844:
	__asm        jmp    near ptr 0x004C0B6F;

	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x004C0BCD;

	__asm        jmp    near ptr 0x004C0BD2;

	__asm        jmp    near ptr 0x004C0BD7;
// LINE 1292:
	tempShortcut.lCommand = 0x2b;
// LINE 1293:
	tempShortcut.lKey = 0x4b;
// LINE 1294:
	tempShortcut.lModifiers = 0x2;
// LINE 1295:
	tempShortcut.lPush = 0x0;
// LINE 1296:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x100], eax;
	__asm        jmp    near ptr 0x004C0C1D;

	__asm        jmp    near ptr 0x004C0C22;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0C4A;
// LINE 1299:
	tempShortcut.lCommand = 0x2f;
// LINE 1300:
	tempShortcut.lKey = 0x44;
// LINE 1301:
	tempShortcut.lModifiers = 0x2;
// LINE 1302:
	tempShortcut.lPush = 0x1;
// LINE 1303:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    near ptr 0x004C0C90;

	__asm        jmp    near ptr 0x004C0C95;

	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x004C0CBD;

	__asm        mov    eax, [ebp-0x118];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x004C0CD1;

	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _T9cd;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x11C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T9cd;
_T9cd:
	__asm        jmp    near ptr 0x004C0CF8;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x004C0D56;

	__asm        jmp    near ptr 0x004C0D5B;

	__asm        jmp    near ptr 0x004C0D60;
// LINE 1306:
	tempShortcut.lCommand = 0x35;
// LINE 1307:
	tempShortcut.lKey = 0x49;
// LINE 1308:
	tempShortcut.lModifiers = 0x2;
// LINE 1309:
	tempShortcut.lPush = 0x1;
// LINE 1310:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x004C0DA6;

	__asm        jmp    near ptr 0x004C0DAB;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x004C0DD3;

	__asm        mov    eax, [ebp-0x130];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x004C0DE7;

	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     _Tae3;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x134];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tae3;
_Tae3:
	__asm        jmp    near ptr 0x004C0E0E;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x004C0E6C;

	__asm        jmp    near ptr 0x004C0E71;

	__asm        jmp    near ptr 0x004C0E76;
// LINE 1313:
	tempShortcut.lCommand = 0x37;
// LINE 1314:
	tempShortcut.lKey = 0xd;
// LINE 1315:
	tempShortcut.lModifiers = 0x4;
// LINE 1316:
	tempShortcut.lPush = 0x1;
// LINE 1317:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1318:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    near ptr 0x004C0EBC;

	__asm        jmp    near ptr 0x004C0EC1;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0EE9;
// LINE 1320:
	tempShortcut.lCommand = 0x31;
// LINE 1321:
	tempShortcut.lKey = 0x51;
// LINE 1322:
	tempShortcut.lModifiers = 0x2;
// LINE 1323:
	tempShortcut.lPush = 0x1;
// LINE 1324:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1325:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004C0F2F;

	__asm        jmp    near ptr 0x004C0F34;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x004C0F5C;

	__asm        mov    eax, [ebp-0x154];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    near ptr 0x004C0F70;

	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _Tc6c;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x158];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tc6c;
_Tc6c:
	__asm        jmp    near ptr 0x004C0F97;

	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x004C0FF5;

	__asm        jmp    near ptr 0x004C0FFA;

	__asm        jmp    near ptr 0x004C0FFF;
// LINE 1327:
	tempShortcut.lCommand = 0x32;
// LINE 1328:
	tempShortcut.lKey = 0x50;
// LINE 1329:
	tempShortcut.lModifiers = 0x2;
// LINE 1330:
	tempShortcut.lPush = 0x1;
// LINE 1331:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x004C1045;

	__asm        jmp    near ptr 0x004C104A;

	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x16C], eax;
	__asm        jmp    near ptr 0x004C1072;

	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    near ptr 0x004C1086;

	__asm        cmp    dword ptr [ebp-0x170], 0;
	__asm        je     _Td82;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x170];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Td82;
_Td82:
	__asm        jmp    near ptr 0x004C10AD;

	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x164], eax;
	__asm        jmp    near ptr 0x004C110B;

	__asm        jmp    near ptr 0x004C1110;

	__asm        jmp    near ptr 0x004C1115;
// LINE 1334:
	tempShortcut.lCommand = 0x36;
// LINE 1335:
	tempShortcut.lKey = 0x52;
// LINE 1336:
	tempShortcut.lModifiers = 0x6;
// LINE 1337:
	tempShortcut.lPush = 0x1;
// LINE 1338:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    near ptr 0x004C115B;

	__asm        jmp    near ptr 0x004C1160;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C1188;
// LINE 1341:
	tempShortcut.lCommand = 0x3a;
// LINE 1342:
	tempShortcut.lKey = 0x58;
// LINE 1343:
	tempShortcut.lModifiers = 0x6;
// LINE 1344:
	tempShortcut.lPush = 0x1;
// LINE 1345:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1346:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    near ptr 0x004C11CE;

	__asm        jmp    near ptr 0x004C11D3;

	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x190], eax;
	__asm        jmp    near ptr 0x004C11FB;

	__asm        mov    eax, [ebp-0x190];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x004C120F;

	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     _Tf0b;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x194];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _Tf0b;
_Tf0b:
	__asm        jmp    near ptr 0x004C1236;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x004C1294;

	__asm        jmp    near ptr 0x004C1299;

	__asm        jmp    near ptr 0x004C129E;
// LINE 1413:
	__asm        jmp    near ptr 0x004C12A3;
}

// FUNCTION: COPTER_D 0x004c12a8
void GameModeHangarData::GameModeHangarData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D0;
// LINE 1427:
	this->lPauseCount = 0x0;
// LINE 1428:
	this->pHangarWindow = 0x0;
// LINE 1429:
	this->pGameApp = 0x0;
// LINE 1430:
	this->pScreenWindow = 0x0;
// LINE 1431:
	this->pColorTable = 0x0;
// LINE 1432:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::SetCommandsToDefaults;
// LINE 1433:
	__asm        jmp    near ptr 0x004C130F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c1317
int32_t GameModeHangarData::CreateAllSurfaces() {
// LINE 1443:
	__asm        push   0x12E;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T70;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T44;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4b;
_T44:
	None = 0x0;
_T4b:
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x835;
	__asm        mov    ecx, [ebp-4];
	__asm        call   HangarWindow::HangarWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T7a;
_T70:
	this->pHangarWindow = 0x0;
// LINE 1444:
_T7a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1445:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::CreatePalette;
// LINE 1446:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C13B4;
// LINE 1447:
}

// FUNCTION: COPTER_D 0x004c13b9
void GameModeHangarData::DestroyAllSurfaces() {
// LINE 1453:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T34;
// LINE 1454:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1455:
	this->pHangarWindow = 0x0;
// LINE 1457:
_T34:
	__asm        jmp    near ptr 0x004C13F2;
}

// FUNCTION: COPTER_D 0x004c13f7
void GameModeHangarData::Sleep() {
// LINE 1464:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1465:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C1421;
// LINE 1466:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1467:
	__asm        jmp    near ptr 0x004C1437;
}

// FUNCTION: COPTER_D 0x004c143c
void GameModeHangarData::Awake() {
// LINE 1473:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1474:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T69;
// LINE 1475:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1477:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1478:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1479:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T69;
// LINE 1481:
_T69:
	__asm        jmp    near ptr 0x004C14AA;
}

// FUNCTION: COPTER_D 0x004c14af
void GameModeHangarData::CreatePalette() {
// LINE 1488:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T77;
// LINE 1489:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T6d;

	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
_T40:
	__asm        dec    dword ptr [ebp-8];
	__asm        js     _T5a;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T40;
_T5a:
	__asm        jmp    near ptr 0x004C150E;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T77;
_T6d:
	this->pColorTable = 0x0;
// LINE 1491:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   HangarWindow::ReadPalette;
// LINE 1492:
	__asm        jmp    near ptr 0x004C153D;
}

// FUNCTION: COPTER_D 0x004c1542
void GameModeHangarData::UsePalette() {
// LINE 1499:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1500:
	gCopterPalette.pColors = this->pColorTable;
// LINE 1501:
	gCopterPalette.lColors = 0x100;
// LINE 1502:
	gCopterPalette.bOwnColors = 0x0;
// LINE 1503:
	__asm        jmp    near ptr 0x004C1590;
}

// FUNCTION: COPTER_D 0x004c1595
void GameModeHangarData::Shutdown() {
// LINE 1510:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::DestroyAllSurfaces;
// LINE 1511:
	__asm        jmp    near ptr 0x004C15AE;
}

// FUNCTION: COPTER_D 0x004c15b3
void GameModeHangarData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C15DF;

	__asm        jmp    near ptr 0x004C15E4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C1600;

	__asm        jmp    near ptr 0x004C1605;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xB8], eax;
_T64:
	__asm        mov    eax, [ebp-0xB4];
	__asm        cmp    [ebp-0xB8], eax;
	__asm        jne    _T80;

	__asm        jmp    _T97;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        jne    _T97;
_T92:
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _Tfb;
_T9c:
	__asm        jmp    _Tae;

	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        je     _Tfb;
_Tae:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C1680;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004C1691;

	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::erase;
	__asm        jmp    _T64;
_Tfb:
	__asm        jmp    near ptr 0x004C16B3;
// LINE 1524:
	tempShortcut.lDeviceID = 0x0;
// LINE 1526:
	tempShortcut.lCommand = 0x0;
// LINE 1527:
	tempShortcut.lKey = 0x0;
// LINE 1528:
	tempShortcut.lModifiers = 0x0;
// LINE 1529:
	tempShortcut.lPush = 0x0;
// LINE 1530:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C16F7;

	__asm        jmp    near ptr 0x004C16FC;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C171B;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C1729;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T192;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T192;
_T192:
	__asm        jmp    near ptr 0x004C174A;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C178A;

	__asm        jmp    near ptr 0x004C178F;

	__asm        jmp    near ptr 0x004C1794;
// LINE 1533:
	tempShortcut.lCommand = 0x1;
// LINE 1534:
	tempShortcut.lKey = 0x1b;
// LINE 1535:
	tempShortcut.lModifiers = 0x0;
// LINE 1536:
	tempShortcut.lPush = 0x1;
// LINE 1537:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004C17D1;

	__asm        jmp    near ptr 0x004C17D6;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C17F8;
// LINE 1540:
	tempShortcut.lCommand = 0x1;
// LINE 1541:
	tempShortcut.lKey = 0x48;
// LINE 1542:
	tempShortcut.lModifiers = 0x2;
// LINE 1543:
	tempShortcut.lPush = 0x1;
// LINE 1544:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004C1835;

	__asm        jmp    near ptr 0x004C183A;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004C1859;

	__asm        mov    eax, [ebp-0x5C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C1867;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T2d0;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x60];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T2d0;
_T2d0:
	__asm        jmp    near ptr 0x004C1888;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004C18C8;

	__asm        jmp    near ptr 0x004C18CD;

	__asm        jmp    near ptr 0x004C18D2;
// LINE 1547:
	tempShortcut.lCommand = 0x2;
// LINE 1548:
	tempShortcut.lKey = 0x43;
// LINE 1549:
	tempShortcut.lModifiers = 0x2;
// LINE 1550:
	tempShortcut.lPush = 0x1;
// LINE 1551:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1552:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004C190F;

	__asm        jmp    near ptr 0x004C1914;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C1933;

	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C1941;

	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T3aa;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x78];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T3aa;
_T3aa:
	__asm        jmp    near ptr 0x004C1962;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004C19A2;

	__asm        jmp    near ptr 0x004C19A7;

	__asm        jmp    near ptr 0x004C19AC;
// LINE 1554:
	tempShortcut.lCommand = 0x3;
// LINE 1555:
	tempShortcut.lKey = 0x4d;
// LINE 1556:
	tempShortcut.lModifiers = 0x2;
// LINE 1557:
	tempShortcut.lPush = 0x1;
// LINE 1558:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1559:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004C19EF;

	__asm        jmp    near ptr 0x004C19F4;

	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C1A19;
// LINE 1561:
	tempShortcut.lCommand = 0x4;
// LINE 1562:
	tempShortcut.lKey = 0x49;
// LINE 1563:
	tempShortcut.lModifiers = 0x2;
// LINE 1564:
	tempShortcut.lPush = 0x1;
// LINE 1565:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1566:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004C1A5F;

	__asm        jmp    near ptr 0x004C1A64;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004C1A8C;

	__asm        mov    eax, [ebp-0x98];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004C1AA0;

	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T50f;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x9C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T50f;
_T50f:
	__asm        jmp    near ptr 0x004C1AC7;

	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C1B24;

	__asm        jmp    near ptr 0x004C1B29;

	__asm        jmp    near ptr 0x004C1B2E;
// LINE 1568:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1569:
	__asm        jmp    near ptr 0x004C1B41;
}

// FUNCTION: COPTER_D 0x004c1b46
void GameModeCatalogData::GameModeCatalogData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D4;
// LINE 1586:
	this->pCatalogWindow = 0x0;
// LINE 1587:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::SetCommandsToDefaults;
// LINE 1588:
	__asm        jmp    near ptr 0x004C1B85;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c1b8d
int32_t GameModeCatalogData::CreateAllSurfaces() {
// LINE 1597:
	__asm        push   0x2B6;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T70;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T44;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4b;
_T44:
	None = 0x0;
_T4b:
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x836;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CatalogWindow::CatalogWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T7a;
_T70:
	this->pCatalogWindow = 0x0;
// LINE 1598:
_T7a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::CreatePalette;
// LINE 1600:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C1C2A;
// LINE 1601:
}

// FUNCTION: COPTER_D 0x004c1c2f
void GameModeCatalogData::DestroyAllSurfaces() {
// LINE 1607:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T34;
// LINE 1608:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1609:
	this->pCatalogWindow = 0x0;
// LINE 1611:
_T34:
	__asm        jmp    near ptr 0x004C1C68;
}

// FUNCTION: COPTER_D 0x004c1c6d
void GameModeCatalogData::Sleep() {
// LINE 1618:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1619:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C1C97;
// LINE 1620:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1621:
	__asm        jmp    near ptr 0x004C1CAD;
}

// FUNCTION: COPTER_D 0x004c1cb2
void GameModeCatalogData::Awake() {
// LINE 1627:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1628:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T69;
// LINE 1629:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1631:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1632:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1633:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T69;
// LINE 1635:
_T69:
	__asm        jmp    near ptr 0x004C1D20;
}

// FUNCTION: COPTER_D 0x004c1d25
void GameModeCatalogData::CreatePalette() {
// LINE 1642:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T77;
// LINE 1643:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T6d;

	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
_T40:
	__asm        dec    dword ptr [ebp-8];
	__asm        js     _T5a;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T40;
_T5a:
	__asm        jmp    near ptr 0x004C1D84;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T77;
_T6d:
	this->pColorTable = 0x0;
// LINE 1645:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   CatalogWindow::ReadPalette;
// LINE 1646:
	__asm        jmp    near ptr 0x004C1DB3;
}

// FUNCTION: COPTER_D 0x004c1db8
void GameModeCatalogData::UsePalette() {
// LINE 1653:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1654:
	gCopterPalette.pColors = this->pColorTable;
// LINE 1655:
	gCopterPalette.lColors = 0x100;
// LINE 1656:
	gCopterPalette.bOwnColors = 0x0;
// LINE 1657:
	__asm        jmp    near ptr 0x004C1E06;
}

// FUNCTION: COPTER_D 0x004c1e0b
void GameModeCatalogData::Shutdown() {
// LINE 1664:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::DestroyAllSurfaces;
// LINE 1665:
	__asm        jmp    near ptr 0x004C1E24;
}

// FUNCTION: COPTER_D 0x004c1e29
void GameModeCatalogData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1676:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C1E55;

	__asm        jmp    near ptr 0x004C1E5A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C1E76;

	__asm        jmp    near ptr 0x004C1E7B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
_T64:
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    _T80;

	__asm        jmp    _T97;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    _T97;
_T92:
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _T14e;
_T9c:
	__asm        jmp    _Tae;

	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T14e;
_Tae:
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C1EF6;

	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C1F07;

	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C1F3F;

	__asm        jmp    near ptr 0x004C1F44;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x004C1F61;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C1F72;

	__asm        jmp    _T64;
_T14e:
	__asm        jmp    near ptr 0x004C1F7C;
// LINE 1678:
	tempShortcut.lDeviceID = 0x0;
// LINE 1680:
	tempShortcut.lCommand = 0x0;
// LINE 1681:
	tempShortcut.lKey = 0x0;
// LINE 1682:
	tempShortcut.lModifiers = 0x0;
// LINE 1683:
	tempShortcut.lPush = 0x0;
// LINE 1684:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1685:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C1FC0;

	__asm        jmp    near ptr 0x004C1FC5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T1ce;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T1ce:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T2f9;

	__asm        jmp    near ptr 0x004C200D;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T228;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T22e;
_T228:
	None = None;
_T22e:
	__asm        jmp    near ptr 0x004C205C;

	__asm        jmp    near ptr 0x004C2061;

	__asm        jmp    near ptr 0x004C2066;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C2073;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2b2;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2b8;
_T2b2:
	None = None;
_T2b8:
	__asm        jmp    near ptr 0x004C20E6;

	__asm        jmp    near ptr 0x004C20EB;

	__asm        jmp    near ptr 0x004C20F0;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C2108;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x44], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T2f9:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x48], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
_T30e:
	__asm        jmp    near ptr 0x004C213C;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C2147;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C2155;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T348;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T348;
_T348:
	__asm        jmp    near ptr 0x004C2176;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C21B6;

	__asm        jmp    near ptr 0x004C21BB;

	__asm        jmp    near ptr 0x004C21C0;
// LINE 1687:
	tempShortcut.lCommand = 0x1;
// LINE 1688:
	tempShortcut.lKey = 0x1b;
// LINE 1689:
	tempShortcut.lModifiers = 0x0;
// LINE 1690:
	tempShortcut.lPush = 0x1;
// LINE 1691:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C2206;

	__asm        jmp    near ptr 0x004C220B;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T423;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T423:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T5b7;

	__asm        jmp    near ptr 0x004C2262;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T49e;

	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    _T4aa;
_T49e:
	None = None;
_T4aa:
	__asm        jmp    near ptr 0x004C22D8;

	__asm        jmp    near ptr 0x004C22DD;

	__asm        jmp    near ptr 0x004C22E2;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C22F5;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T55e;

	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    _T56a;
_T55e:
	None = None;
_T56a:
	__asm        jmp    near ptr 0x004C2398;

	__asm        jmp    near ptr 0x004C239D;

	__asm        jmp    near ptr 0x004C23A2;

	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C23BD;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T5b7:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
_T5d5:
	__asm        jmp    near ptr 0x004C2403;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C2414;

	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C2428;

	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     _T621;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T621;
_T621:
	__asm        jmp    near ptr 0x004C244F;

	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C24AC;

	__asm        jmp    near ptr 0x004C24B1;

	__asm        jmp    near ptr 0x004C24B6;
// LINE 1694:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1695:
	__asm        jmp    near ptr 0x004C24C9;
}

// FUNCTION: COPTER_D 0x004c24ce
void GameModeMissionLogData::GameModeMissionLogData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D8;
// LINE 1711:
	this->pMissionLogWindow = 0x0;
// LINE 1712:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::SetCommandsToDefaults;
// LINE 1713:
	__asm        jmp    near ptr 0x004C250D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c2515
int32_t GameModeMissionLogData::CreateAllSurfaces() {
// LINE 1722:
	__asm        push   0x80;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T70;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T44;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4b;
_T44:
	None = 0x0;
_T4b:
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x838;
	__asm        mov    ecx, [ebp-4];
	__asm        call   MissionLogWindow::MissionLogWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T7a;
_T70:
	this->pMissionLogWindow = 0x0;
// LINE 1723:
_T7a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1724:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::CreatePalette;
// LINE 1725:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C25B2;
// LINE 1726:
}

// FUNCTION: COPTER_D 0x004c25b7
void GameModeMissionLogData::DestroyAllSurfaces() {
// LINE 1732:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T34;
// LINE 1733:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1734:
	this->pMissionLogWindow = 0x0;
// LINE 1736:
_T34:
	__asm        jmp    near ptr 0x004C25F0;
}

// FUNCTION: COPTER_D 0x004c25f5
void GameModeMissionLogData::Sleep() {
// LINE 1743:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1744:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C261F;
// LINE 1745:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1746:
	__asm        jmp    near ptr 0x004C2635;
}

// FUNCTION: COPTER_D 0x004c263a
void GameModeMissionLogData::Awake() {
// LINE 1752:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1753:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T69;
// LINE 1754:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1756:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1757:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1758:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T69;
// LINE 1760:
_T69:
	__asm        jmp    near ptr 0x004C26A8;
}

// FUNCTION: COPTER_D 0x004c26ad
void GameModeMissionLogData::CreatePalette() {
// LINE 1767:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T77;
// LINE 1768:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T6d;

	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
_T40:
	__asm        dec    dword ptr [ebp-8];
	__asm        js     _T5a;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T40;
_T5a:
	__asm        jmp    near ptr 0x004C270C;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T77;
_T6d:
	this->pColorTable = 0x0;
// LINE 1770:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   MissionLogWindow::ReadPalette;
// LINE 1771:
	__asm        jmp    near ptr 0x004C273B;
}

// FUNCTION: COPTER_D 0x004c2740
void GameModeMissionLogData::UsePalette() {
// LINE 1778:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1779:
	gCopterPalette.pColors = this->pColorTable;
// LINE 1780:
	gCopterPalette.lColors = 0x100;
// LINE 1781:
	gCopterPalette.bOwnColors = 0x0;
// LINE 1782:
	__asm        jmp    near ptr 0x004C278E;
}

// FUNCTION: COPTER_D 0x004c2793
void GameModeMissionLogData::Shutdown() {
// LINE 1789:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::DestroyAllSurfaces;
// LINE 1790:
	__asm        jmp    near ptr 0x004C27AC;
}

// FUNCTION: COPTER_D 0x004c27b1
void GameModeMissionLogData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1801:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C27DD;

	__asm        jmp    near ptr 0x004C27E2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C27FE;

	__asm        jmp    near ptr 0x004C2803;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
_T64:
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    _T80;

	__asm        jmp    _T97;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    _T97;
_T92:
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _T14e;
_T9c:
	__asm        jmp    _Tae;

	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T14e;
_Tae:
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C287E;

	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C288F;

	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C28C7;

	__asm        jmp    near ptr 0x004C28CC;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x004C28E9;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C28FA;

	__asm        jmp    _T64;
_T14e:
	__asm        jmp    near ptr 0x004C2904;
// LINE 1803:
	tempShortcut.lDeviceID = 0x0;
// LINE 1805:
	tempShortcut.lCommand = 0x0;
// LINE 1806:
	tempShortcut.lKey = 0x0;
// LINE 1807:
	tempShortcut.lModifiers = 0x0;
// LINE 1808:
	tempShortcut.lPush = 0x0;
// LINE 1809:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1810:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C2948;

	__asm        jmp    near ptr 0x004C294D;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T1ce;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T1ce:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T2f9;

	__asm        jmp    near ptr 0x004C2995;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T228;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T22e;
_T228:
	None = None;
_T22e:
	__asm        jmp    near ptr 0x004C29E4;

	__asm        jmp    near ptr 0x004C29E9;

	__asm        jmp    near ptr 0x004C29EE;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C29FB;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2b2;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2b8;
_T2b2:
	None = None;
_T2b8:
	__asm        jmp    near ptr 0x004C2A6E;

	__asm        jmp    near ptr 0x004C2A73;

	__asm        jmp    near ptr 0x004C2A78;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C2A90;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x44], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T2f9:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x48], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
_T30e:
	__asm        jmp    near ptr 0x004C2AC4;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C2ACF;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C2ADD;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T348;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T348;
_T348:
	__asm        jmp    near ptr 0x004C2AFE;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C2B3E;

	__asm        jmp    near ptr 0x004C2B43;

	__asm        jmp    near ptr 0x004C2B48;
// LINE 1812:
	tempShortcut.lCommand = 0x1;
// LINE 1813:
	tempShortcut.lKey = 0x1b;
// LINE 1814:
	tempShortcut.lModifiers = 0x0;
// LINE 1815:
	tempShortcut.lPush = 0x1;
// LINE 1816:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1817:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C2B8E;

	__asm        jmp    near ptr 0x004C2B93;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T423;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T423:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T5b7;

	__asm        jmp    near ptr 0x004C2BEA;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T49e;

	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    _T4aa;
_T49e:
	None = None;
_T4aa:
	__asm        jmp    near ptr 0x004C2C60;

	__asm        jmp    near ptr 0x004C2C65;

	__asm        jmp    near ptr 0x004C2C6A;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C2C7D;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T55e;

	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    _T56a;
_T55e:
	None = None;
_T56a:
	__asm        jmp    near ptr 0x004C2D20;

	__asm        jmp    near ptr 0x004C2D25;

	__asm        jmp    near ptr 0x004C2D2A;

	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C2D45;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T5b7:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
_T5d5:
	__asm        jmp    near ptr 0x004C2D8B;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C2D9C;

	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C2DB0;

	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     _T621;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T621;
_T621:
	__asm        jmp    near ptr 0x004C2DD7;

	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C2E34;

	__asm        jmp    near ptr 0x004C2E39;

	__asm        jmp    near ptr 0x004C2E3E;
// LINE 1819:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1820:
	__asm        jmp    near ptr 0x004C2E51;
}

// FUNCTION: COPTER_D 0x004c2e56
void GameModeInventoryData::GameModeInventoryData() {

	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923DC;
// LINE 1833:
	this->pInventoryWindow = 0x0;
// LINE 1834:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::SetCommandsToDefaults;
// LINE 1835:
	__asm        jmp    near ptr 0x004C2E95;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c2e9d
int32_t GameModeInventoryData::CreateAllSurfaces() {
// LINE 1844:
	__asm        push   0x1E2;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T70;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T44;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4b;
_T44:
	None = 0x0;
_T4b:
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x837;
	__asm        mov    ecx, [ebp-4];
	__asm        call   InventoryWindow::InventoryWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T7a;
_T70:
	this->pInventoryWindow = 0x0;
// LINE 1845:
_T7a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1846:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::CreatePalette;
// LINE 1847:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C2F3A;
// LINE 1848:
}

// FUNCTION: COPTER_D 0x004c2f3f
void GameModeInventoryData::DestroyAllSurfaces() {
// LINE 1854:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T34;
// LINE 1855:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1856:
	this->pInventoryWindow = 0x0;
// LINE 1858:
_T34:
	__asm        jmp    near ptr 0x004C2F78;
}

// FUNCTION: COPTER_D 0x004c2f7d
void GameModeInventoryData::Sleep() {
// LINE 1865:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1866:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C2FA7;
// LINE 1867:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1868:
	__asm        jmp    near ptr 0x004C2FBD;
}

// FUNCTION: COPTER_D 0x004c2fc2
void GameModeInventoryData::Awake() {
// LINE 1874:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1875:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T69;
// LINE 1876:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1878:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1879:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1880:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    _T69;
// LINE 1882:
_T69:
	__asm        jmp    near ptr 0x004C3030;
}

// FUNCTION: COPTER_D 0x004c3035
void GameModeInventoryData::CreatePalette() {
// LINE 1889:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T77;
// LINE 1890:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T6d;

	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
_T40:
	__asm        dec    dword ptr [ebp-8];
	__asm        js     _T5a;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T40;
_T5a:
	__asm        jmp    near ptr 0x004C3094;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T77;
_T6d:
	this->pColorTable = 0x0;
// LINE 1892:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   InventoryWindow::ReadPalette;
// LINE 1893:
	__asm        jmp    near ptr 0x004C30C3;
}

// FUNCTION: COPTER_D 0x004c30c8
void GameModeInventoryData::UsePalette() {
// LINE 1900:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1901:
	gCopterPalette.pColors = this->pColorTable;
// LINE 1902:
	gCopterPalette.lColors = 0x100;
// LINE 1903:
	gCopterPalette.bOwnColors = 0x0;
// LINE 1904:
	__asm        jmp    near ptr 0x004C3116;
}

// FUNCTION: COPTER_D 0x004c311b
void GameModeInventoryData::Shutdown() {
// LINE 1911:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::DestroyAllSurfaces;
// LINE 1912:
	__asm        jmp    near ptr 0x004C3134;
}

// FUNCTION: COPTER_D 0x004c3139
void GameModeInventoryData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1922:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C3165;

	__asm        jmp    near ptr 0x004C316A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C3186;

	__asm        jmp    near ptr 0x004C318B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
_T64:
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    _T80;

	__asm        jmp    _T97;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    _T97;
_T92:
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _T14e;
_T9c:
	__asm        jmp    _Tae;

	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T14e;
_Tae:
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C3206;

	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C3217;

	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C324F;

	__asm        jmp    near ptr 0x004C3254;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        jmp    near ptr 0x004C3271;

	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C3282;

	__asm        jmp    _T64;
_T14e:
	__asm        jmp    near ptr 0x004C328C;
// LINE 1924:
	tempShortcut.lDeviceID = 0x0;
// LINE 1926:
	tempShortcut.lCommand = 0x0;
// LINE 1927:
	tempShortcut.lKey = 0x0;
// LINE 1928:
	tempShortcut.lModifiers = 0x0;
// LINE 1929:
	tempShortcut.lPush = 0x0;
// LINE 1930:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1931:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C32D0;

	__asm        jmp    near ptr 0x004C32D5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T1ce;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T1ce:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T2f9;

	__asm        jmp    near ptr 0x004C331D;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T228;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T22e;
_T228:
	None = None;
_T22e:
	__asm        jmp    near ptr 0x004C336C;

	__asm        jmp    near ptr 0x004C3371;

	__asm        jmp    near ptr 0x004C3376;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C3383;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T2b2;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2b8;
_T2b2:
	None = None;
_T2b8:
	__asm        jmp    near ptr 0x004C33F6;

	__asm        jmp    near ptr 0x004C33FB;

	__asm        jmp    near ptr 0x004C3400;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C3418;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x44], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T30e;
_T2f9:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x48], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
_T30e:
	__asm        jmp    near ptr 0x004C344C;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C3457;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C3465;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T348;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T348;
_T348:
	__asm        jmp    near ptr 0x004C3486;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C34C6;

	__asm        jmp    near ptr 0x004C34CB;

	__asm        jmp    near ptr 0x004C34D0;
// LINE 1933:
	tempShortcut.lCommand = 0x1;
// LINE 1934:
	tempShortcut.lKey = 0x1b;
// LINE 1935:
	tempShortcut.lModifiers = 0x0;
// LINE 1936:
	tempShortcut.lPush = 0x1;
// LINE 1937:
	tempShortcut.lIgnoreModifiers = 0x0;
// LINE 1938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C3516;

	__asm        jmp    near ptr 0x004C351B;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    list<Shortcut>::free_list, 0;
	__asm        je     _T423;

	__asm        mov    eax, list<Shortcut>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<Shortcut>::free_list, eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T423:
	__asm        mov    eax, list<Shortcut>::last;
	__asm        cmp    list<Shortcut>::next_avail, eax;
	__asm        jne    _T5b7;

	__asm        jmp    near ptr 0x004C3572;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T49e;

	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    _T4aa;
_T49e:
	None = None;
_T4aa:
	__asm        jmp    near ptr 0x004C35E8;

	__asm        jmp    near ptr 0x004C35ED;

	__asm        jmp    near ptr 0x004C35F2;

	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C3605;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    list<Shortcut>::buffer_list, eax;
	__asm        mov    eax, list<Shortcut>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<Shortcut>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T55e;

	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    _T56a;
_T55e:
	None = None;
_T56a:
	__asm        jmp    near ptr 0x004C36A8;

	__asm        jmp    near ptr 0x004C36AD;

	__asm        jmp    near ptr 0x004C36B2;

	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, list<Shortcut>::next_avail;
	__asm        mov    list<Shortcut>::last, eax;
	__asm        jmp    near ptr 0x004C36CD;

	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T5d5;
_T5b7:
	__asm        mov    eax, list<Shortcut>::next_avail;
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    list<Shortcut>::next_avail, 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
_T5d5:
	__asm        jmp    near ptr 0x004C3713;

	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C3724;

	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C3738;

	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     _T621;

	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    _T621;
_T621:
	__asm        jmp    near ptr 0x004C375F;

	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C37BC;

	__asm        jmp    near ptr 0x004C37C1;

	__asm        jmp    near ptr 0x004C37C6;
// LINE 1940:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1941:
	__asm        jmp    near ptr 0x004C37D9;
}



// Contribution: 1:000c27e0-000c2818 Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c37e0
// GameModeCoreData::`scalar deleting destructor'



// Contribution: 1:000c2820-000c285d Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3820
// GameModeMainMenuData::`scalar deleting destructor'



// Contribution: 1:000c2860-000c289d Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3860
// GameModePickCareerCityData::`scalar deleting destructor'



// Contribution: 1:000c28a0-000c2a9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c38a0
// GameModePlayData::`scalar deleting destructor'



// Contribution: 1:000c2aa0-000c2c9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3aa0
// GameModeHangarData::`scalar deleting destructor'



// Contribution: 1:000c2ca0-000c2e9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3ca0
// GameModeCatalogData::`scalar deleting destructor'



// Contribution: 1:000c2ea0-000c309e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3ea0
// GameModeMissionLogData::`scalar deleting destructor'



// Contribution: 1:000c30a0-000c329e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c40a0
// GameModeInventoryData::`scalar deleting destructor'



// Contribution: 2:000033c0-000033c3 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeCoreData @ 0x005923c0
//   00: GameModeCoreData::`scalar deleting destructor' @ 0x004c37e0
//   1 entries



// Contribution: 2:000033c4-000033c7 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeMainMenuData @ 0x005923c4
//   00: GameModeMainMenuData::`scalar deleting destructor' @ 0x004c3820
//   1 entries



// Contribution: 2:000033c8-000033cb Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModePickCareerCityData @ 0x005923c8
//   00: GameModePickCareerCityData::`scalar deleting destructor' @ 0x004c3860
//   1 entries



// Contribution: 2:000033cc-000033cf Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModePlayData @ 0x005923cc
//   00: GameModePlayData::`scalar deleting destructor' @ 0x004c38a0
//   1 entries



// Contribution: 2:000033d0-000033d3 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeHangarData @ 0x005923d0
//   00: GameModeHangarData::`scalar deleting destructor' @ 0x004c3aa0
//   1 entries



// Contribution: 2:000033d4-000033d7 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeCatalogData @ 0x005923d4
//   00: GameModeCatalogData::`scalar deleting destructor' @ 0x004c3ca0
//   1 entries



// Contribution: 2:000033d8-000033db Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeMissionLogData @ 0x005923d8
//   00: GameModeMissionLogData::`scalar deleting destructor' @ 0x004c3ea0
//   1 entries



// Contribution: 2:000033dc-000033df Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for GameModeInventoryData @ 0x005923dc
//   00: GameModeInventoryData::`scalar deleting destructor' @ 0x004c40a0
//   1 entries



// Contribution: 3:00003ec4-00003fad Module: 1, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059aec4
char * SZ_VR_APP_PALETTE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aec8
char * SZ_VR_APP_PALETTE_CHUNK_TYPE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aecc
char * SZ_MAIN_MENU_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aed0
char * SZ_CAREER_PALETTE_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aed4
char * SZ_PANEL0_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aed8
char * SZ_PANEL1_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aedc
char * SZ_PANEL2_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aee0
char * SZ_PANEL3_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aee4
char * SZ_PANEL4_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aee8
char * SZ_PANEL5_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aeec
char * SZ_PANEL6_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aef0
char * SZ_FLAP0_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aef4
char * SZ_FLAP1_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aef8
char * SZ_FLAP2_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059aefc
char * SZ_FLAP3_IMAGE_FILE_NAME = { 0 /* todo */ };

