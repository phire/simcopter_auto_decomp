// Module: Gamemode.obj
// Source: C:\Copter\source\sparkal\Gamemode.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CopterGameMode (forward reference);
class CopterGameMode{
public:
	int32_t nModeID;
	void CopterGameMode(const class CopterGameMode&);
	void CopterGameMode(int32_t);
	void CopterGameMode();
	class CopterGameMode& operator=(const class CopterGameMode&);
};

// Type: void;

// Type: int32_t;

// Type: class GameModeCoreData (forward reference);
class GameModeCoreData{
public:
	void GameModeCoreData();
	// vtable: 0
	intro void ~GameModeCoreData();
	long lPauseCount;
	struct SparkalColor* pColorTable;
	class CGameApp* pGameApp;
	class ScreenWindow* pScreenWindow;
};

// Type: class GameModeMainMenuData (forward reference);
class GameModeMainMenuData : public GameModeCoreData
{
public:
	void GameModeMainMenuData();
	void CreatePalette();
	void UsePalette();
	int32_t CreateAllSurfaces();
	int32_t DestroyAllSurfaces();
	void Shutdown();
	class SmackerBackBuffer* myVideoBuffer;
};

// Type: char[260];

// Type: struct UserMenuWindowDescription;
struct UserMenuWindowDescription{
	class basic_string<char> sImageFileName;
	int32_t nTransparentIndex;
	class MRect rectPosition;
	long lMenuStringResourceIndex;
	long lMenuStringResourceCount;
	long lSelectionBase;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	class MPoint ptPositionFirstItem;
	int32_t nSizeItemFont;
	int32_t nLineHeight;
	long lTitleStringResourceIndex;
	int32_t bTitleCentered;
	class MPoint ptTitlePosition;
	int32_t nSizeTitleFont;
};

// Type: class UserMenuWindow (forward reference);
class UserMenuWindow : public GraphicWindow
{
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t SetSelectionIndex(int32_t);
	// vtable: 200
	intro int32_t SetSelectionValue(int32_t);
	// vtable: 204
	intro int32_t GetSelectionIndex();
	// vtable: 208
	intro int32_t GetSelectionValue();
	// vtable: 212
	intro int32_t GetLineCount();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro int32_t ExecuteSelection(int32_t);
protected:
	// vtable: 220
	intro void DrawSelectionIndicators();
	// vtable: 224
	intro int32_t DoCursorHitTest(int32_t&, long, long);
	// vtable: 228
	intro int32_t GetPositionOfNthItem(int32_t, class MPoint&);
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: class GameModePickCareerCityData (forward reference);
class GameModePickCareerCityData : public GameModeCoreData
{
		enum PickCareerCitySubMode {
			nPickCareerCitySubModeSelect = 0,
			nPickCareerCitySubModeVideo = 1,
		};
public:
	void GameModePickCareerCityData();
	void Initialize();
	void CreatePalette();
	void UsePalette();
	int32_t CreateAllSurfaces();
	int32_t DestroyAllSurfaces();
	void Shutdown();
	class SmackerBackBuffer* myVideoBuffer;
	int32_t nSubMode;
	class MRect rectVideo;
	int32_t bFirstCareerCityData;
};

// Type: class CareerWindow (forward reference);
class CareerWindow : public GraphicWindow
{
public:
	void CareerWindow(class MRect&, int32_t, void * __ptr32, long *, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t);
	virtual void ~CareerWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	long SetCurrentCitySelection(long);
	long GetCurrentCitySelection();
	class CareerWindow::CitySelectionFrame{
	public:
		void CitySelectionFrame(int32_t, int32_t, int32_t);
		// vtable: 0
		intro void ~CitySelectionFrame();
		void FillDestinationPoints(class MPoint*);
		void FillSourceRects(class MRect*);
		int32_t bLeft;
		int32_t bTop;
		int32_t bSelected;
		class MRect rectFrame[4];
	};
protected:
	void DrawCitySelection();
	void GetCoordinatesForCitySelections(class MPoint[4]*, class MRect[4]*);
	long lCurrentCitySelection;
	class MRect rectCities[3];
	long lCities[3];
	int32_t nCityCount;
	int32_t bAllowCancel;
	class SmackerBackBuffer mySmackerBackBuffers[3];
	void * __ptr32 myPlatformWindow;
	class TextWindow* cityNameTextWindow;
	class TextWindow* cityLevelTextWindow;
	class CBackBuffer* mySelectionImage;
};

// Type: long *;

// Type: class GameModePlayData (forward reference);
class GameModePlayData : public GameModeCoreData
{
		enum ExceptionState {
			nExceptionStateNone = 0,
			nExceptionStateVRAppInit = 1,
			nExceptionStateGamePlay = 2,
		};
public:
	void GameModePlayData();
	void Initialize();
	void CreatePalette();
	void UsePalette();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	int32_t CreateIndependentSurfaces();
	void DestroyIndependentSurfaces();
	void HidePanels();
	void ShowPanels();
	void HideEquipment();
	void ShowEquipment();
	void TogglePanelDisplay();
	void ToggleEquipmentDisplay();
	int32_t CreatePanels();
	int32_t DestroyPanels();
	void Shutdown();
	void Sleep();
	void Awake();
	long TestForUserInHelicopter();
	int32_t IsUserInHelicopterNow();
	int32_t IsUserAloneNow();
	long ProcessUserJustJumpedIntoHelicopter();
	long ProcessUserJustJumpedOutOfHelicopter();
	void MakeSureHeliHasProperFlaps();
	void SetUpRenderWindowSizes();
	void ReadUserConfigurableCommands();
	void RemoveUserConfigurableCommands();
	void SetUserConfigurableCommandsToDefaults();
	void SetNonUserConfigurableCommandsToDefaults();
	enum GameModePlayData::ExceptionState nExceptionState;
	int32_t nRenderWindowWidth;
	int32_t nRenderWindowHeight;
	int32_t nShortenedRenderWindowWidth;
	int32_t nShortenedRenderWindowHeight;
	int32_t bPanelsVisibleWhenInCopter;
	int32_t bShowingPanels;
	int32_t bShowingEquipment;
	int32_t bUserWasInHelicopterOnLastCheck;
	class CBackBuffer* pStretchBuffer;
	class SkyImage* pSkyImage;
	class GraphicWindow* pPanel0;
	class GraphicWindow* pPanel1;
	class GraphicWindow* pPanel2;
	class GraphicWindow* pPanel3;
	class RadioCompassWindow* pPanel4;
	class MapWindow* pPanel5;
	class DialWindow* pPanel6;
	class GraphicWindow* pFlap0;
	class GraphicWindow* pFlap1;
	class GraphicWindow* pFlap2;
	class GraphicWindow* pFlap3;
	class PassengerWindow* pPassengerWindow;
	struct CommandSystem commandSystem;
};

// Type: char *;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: struct tagUserPersonalInfo (forward reference);

// Type: long;

// Type: class list<Shortcut>::iterator;
class list<Shortcut>::iterator : public bidirectional_iterator<Shortcut,int>
{
protected:
	struct list<Shortcut>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<Shortcut>::list_node*);
public:
	int32_t operator==(const class list<Shortcut>::iterator&);
	struct Shortcut& operator*();
	class list<Shortcut>::iterator operator++(int32_t);
	class list<Shortcut>::iterator& operator++();
	class list<Shortcut>::iterator operator--(int32_t);
	class list<Shortcut>::iterator& operator--();
};

// Type: struct Shortcut;
struct Shortcut{
	long lDeviceID;
	long lCommand;
	long lKey;
	long lModifiers;
	long lPush;
	long lIgnoreModifiers;
};

// Type: class GameModeHangarData (forward reference);
class GameModeHangarData : public GameModeCoreData
{
public:
	void GameModeHangarData();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void SetCommandsToDefaults();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class HangarWindow* pHangarWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeCatalogData (forward reference);
class GameModeCatalogData : public GameModeCoreData
{
public:
	void GameModeCatalogData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class CatalogWindow* pCatalogWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeMissionLogData (forward reference);
class GameModeMissionLogData : public GameModeCoreData
{
public:
	void GameModeMissionLogData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class MissionLogWindow* pMissionLogWindow;
	struct CommandSystem commandSystem;
};

// Type: class GameModeInventoryData (forward reference);
class GameModeInventoryData : public GameModeCoreData
{
public:
	void GameModeInventoryData();
	void SetCommandsToDefaults();
	int32_t CreateAllSurfaces();
	void DestroyAllSurfaces();
	void Shutdown();
	void Sleep();
	void Awake();
	void CreatePalette();
	void UsePalette();
	class InventoryWindow* pInventoryWindow;
	struct CommandSystem commandSystem;
};

// Type: uint32_t;

// Type: struct bidirectional_iterator<Shortcut,int>;
struct bidirectional_iterator<Shortcut,int>{
};

// Type: class GameModeCoreData;
class GameModeCoreData{
public:
	void GameModeCoreData();
	// vtable: 0
	intro void ~GameModeCoreData();
	long lPauseCount;
	struct SparkalColor* pColorTable;
	class CGameApp* pGameApp;
	class ScreenWindow* pScreenWindow;
};

// Type: class GraphicWindow (forward reference);

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:000bc670-000c27dd Module: 1, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bd670
void CopterGameMode::CopterGameMode() {
// LINE 51:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 52:
	__asm        jmp    near ptr 0x004BD68A;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd692
void CopterGameMode::CopterGameMode(int32_t nNewModeID) {
	__asm        mov    eax, nNewModeID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 57:
	__asm        jmp    near ptr 0x004BD6AB;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd6b5
void CopterGameMode::CopterGameMode(const class CopterGameMode& newGameMode) {
// LINE 61:
	__asm        mov    eax, newGameMode;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterGameMode::operator=;
// LINE 62:
	__asm        jmp    near ptr 0x004BD6D2;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd6dc
class CopterGameMode& CopterGameMode::operator=(const class CopterGameMode& newGameMode) {
// LINE 65:
	__asm        mov    eax, newGameMode;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 66:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004BD6FA;
// LINE 67:
}

// FUNCTION: COPTER_D 0x004bd701
int32_t operator==(const class CopterGameMode& gameMode1, const class CopterGameMode& gameMode2) {
// LINE 70:
	__asm        mov    eax, gameMode1;
	__asm        mov    ecx, gameMode2;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x004BD721;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BD723;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BD728;
// LINE 71:
}

// FUNCTION: COPTER_D 0x004bd72d
void GameModeCoreData::GameModeCoreData() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C0;
// LINE 133:
	__asm        jmp    near ptr 0x004BD76F;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd777
void GameModeCoreData::~GameModeCoreData() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C0;
// LINE 140:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004BD7BE;
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 144:
	__asm        jmp    near ptr 0x004BD7C3;
}

// FUNCTION: COPTER_D 0x004bd7c8
void GameModeMainMenuData::GameModeMainMenuData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C4;
// LINE 157:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 158:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 159:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 160:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 161:
	__asm        jmp    near ptr 0x004BD812;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bd81a
void GameModeMainMenuData::CreatePalette() {
	char szPath[260];

// LINE 172:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004BD8BB;
// LINE 173:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x004BD8AE;
	__asm        mov    dword ptr [ebp-0x10C], 0x100;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x110], eax;
	__asm        dec    dword ptr [ebp-0x10C];
	__asm        js     near ptr 0x004BD895;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x110], 4;
	__asm        jmp    near ptr 0x004BD872;
	__asm        jmp    near ptr 0x004BD89A;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004BD8BB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 175:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AECC];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
// LINE 177:
	__asm        jmp    near ptr 0x004BD8F2;
}

// FUNCTION: COPTER_D 0x004bd8f7
void GameModeMainMenuData::UsePalette() {
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 187:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 188:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 189:
	__asm        jmp    near ptr 0x004BD945;
}

// FUNCTION: COPTER_D 0x004bd94a
int32_t GameModeMainMenuData::CreateAllSurfaces() {
	struct UserMenuWindowDescription tempUMWD;
	class UserMenuWindow* myUserMenuWindow;

// LINE 198:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     near ptr 0x004BD9C4;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004BD9B6;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    tempUMWD.sImageFileName.reference, eax;
	__asm        jmp    near ptr 0x004BD9CB;
	__asm        mov    tempUMWD.sImageFileName.reference, 0;
	__asm        mov    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004BD9D7;
	__asm        jmp    near ptr 0x004BD9DC;
	__asm        jmp    near ptr 0x004BD9E1;
	__asm        jmp    near ptr 0x004BD9E6;
	__asm        jmp    near ptr 0x004BD9EB;
	__asm        jmp    near ptr 0x004BD9F0;
	__asm        jmp    near ptr 0x004BD9F5;
	__asm        jmp    near ptr 0x004BD9FA;
	__asm        jmp    near ptr 0x004BD9FF;
	__asm        jmp    near ptr 0x004BDA04;
	__asm        mov    eax, ds:[0x59AECC];
	__asm        mov    [ebp-0xA0], eax;
// LINE 200:
	__asm        jmp    near ptr 0x004BDA14;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004BDA38;
// LINE 201:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    tempUMWD.nTransparentIndex, eax;
// LINE 202:
	__asm        jmp    near ptr 0x004BDA45;
	__asm        mov    dword ptr [ebp-0x68], 2;
	__asm        mov    dword ptr [ebp-0x64], 0x1D;
	__asm        mov    dword ptr [ebp-0x60], 0x1AA;
	__asm        mov    dword ptr [ebp-0x5C], 0x1A0;
	__asm        jmp    near ptr 0x004BDA66;
	__asm        lea    eax, [ebp-0x68];
	__asm        lea    ecx, tempUMWD.rectPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 203:
	__asm        mov    tempUMWD.lMenuStringResourceIndex, 0x37;
// LINE 204:
	__asm        mov    tempUMWD.lMenuStringResourceCount, 5;
// LINE 205:
	__asm        mov    tempUMWD.lSelectionBase, 0;
// LINE 206:
	__asm        mov    byte ptr [ebp-0x6C], 0x80;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0x4A;
	__asm        jmp    near ptr 0x004BDAA8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    reinterpret_cast<uint32_t>(tempUMWD.colorFont.Blue), eax;
// LINE 207:
	__asm        mov    byte ptr [ebp-0x70], 0xEA;
	__asm        mov    byte ptr [ebp-0x6F], 0xEF;
	__asm        mov    byte ptr [ebp-0x6E], 0x9A;
	__asm        jmp    near ptr 0x004BDABF;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    reinterpret_cast<uint32_t>(tempUMWD.colorFontHighlighted.Blue), eax;
// LINE 210:
	__asm        jmp    near ptr 0x004BDACA;
	__asm        mov    dword ptr [ebp-0x78], 0x74;
	__asm        mov    dword ptr [ebp-0x74], 0x2A;
	__asm        jmp    near ptr 0x004BDADD;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x74];
	__asm        lea    edx, tempUMWD.ptPositionFirstItem.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 211:
	__asm        mov    tempUMWD.nSizeItemFont, 0x1A;
// LINE 212:
	__asm        mov    tempUMWD.nLineHeight, 0x40;
// LINE 213:
	__asm        mov    tempUMWD.lTitleStringResourceIndex, 0xFFFFFFFF;
// LINE 214:
	__asm        mov    tempUMWD.bTitleCentered, 0;
// LINE 215:
	__asm        jmp    near ptr 0x004BDB0C;
	__asm        mov    dword ptr [ebp-0x80], 0;
	__asm        mov    dword ptr [ebp-0x7C], 0;
	__asm        jmp    near ptr 0x004BDB1F;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        lea    edx, tempUMWD.ptTitlePosition.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 216:
	__asm        mov    tempUMWD.nSizeTitleFont, 0x24;
// LINE 219:
	__asm        push   0x162;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x004BDBB4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004BDB7B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004BDB85;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x7D2;
	__asm        lea    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   CopterMainMenu::CopterMainMenu;
	__asm        mov    myUserMenuWindow, eax;
	__asm        jmp    near ptr 0x004BDBBB;
	__asm        mov    myUserMenuWindow, 0;
// LINE 220:
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 221:
	__asm        mov    ecx, this;
	__asm        call   GameModeMainMenuData::CreatePalette;
// LINE 222:
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        jmp    near ptr 0x004BDBE0;
	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004BDC27;
	__asm        mov    eax, tempUMWD.sImageFileName.reference;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x004BDC27;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x004BDC27;
	__asm        jmp    near ptr 0x004BDC2C;
	__asm        cmp    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        je     near ptr 0x004BDC5A;
	__asm        mov    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BDC5F;
	__asm        mov    eax, [ebp-0x88];
	__asm        jmp    near ptr 0x004BDC6A;
// LINE 223:
}

// FUNCTION: COPTER_D 0x004bdc6f
int32_t GameModeMainMenuData::DestroyAllSurfaces() {
// LINE 230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004BDCBC;
// LINE 231:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BDCB2;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x004BDCB2;
// LINE 232:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 234:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BDCC6;
// LINE 235:
}

// FUNCTION: COPTER_D 0x004bdccb
void GameModePickCareerCityData::GameModePickCareerCityData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        jmp    near ptr 0x004BDCE4;
	__asm        jmp    near ptr 0x004BDCE9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923C8;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 252:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 253:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
// LINE 257:
	__asm        jmp    near ptr 0x004BDD33;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bdd3b
void GameModePickCareerCityData::Initialize() {
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 266:
	__asm        jmp    near ptr 0x004BDD56;
}

// FUNCTION: COPTER_D 0x004bdd5b
void GameModePickCareerCityData::CreatePalette() {
	char szPath[260];

// LINE 276:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004BDDFC;
// LINE 277:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x004BDDEF;
	__asm        mov    dword ptr [ebp-0x10C], 0x100;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x110], eax;
	__asm        dec    dword ptr [ebp-0x10C];
	__asm        js     near ptr 0x004BDDD6;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x110], 4;
	__asm        jmp    near ptr 0x004BDDB3;
	__asm        jmp    near ptr 0x004BDDDB;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004BDDFC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 279:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AED0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
// LINE 281:
	__asm        jmp    near ptr 0x004BDE33;
}

// FUNCTION: COPTER_D 0x004bde38
void GameModePickCareerCityData::UsePalette() {
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 291:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 292:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 293:
	__asm        jmp    near ptr 0x004BDE86;
}

// FUNCTION: COPTER_D 0x004bde8b
int32_t GameModePickCareerCityData::CreateAllSurfaces() {
	class CareerWindow* myCareerWindow;
	long * lNewCitiesPointer;

// LINE 303:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004BDEB0;
// LINE 304:
	__asm        mov    lNewCitiesPointer, 0;
// LINE 305:
	__asm        jmp    near ptr 0x004BDEC6;
// LINE 306:
	__asm        mov    eax, ds:[0x5C2AB4];
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, 0x5C2B18;
	__asm        add    eax, 0x28;
	__asm        mov    lNewCitiesPointer, eax;
// LINE 312:
	__asm        push   0x840;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004BDF6E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004BDEFE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004BDF05;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x004BDF0A;
	__asm        jmp    near ptr 0x004BDF0F;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x004BDF30;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, lNewCitiesPointer;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x7D7;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CareerWindow::CareerWindow;
	__asm        mov    myCareerWindow, eax;
	__asm        jmp    near ptr 0x004BDF75;
	__asm        mov    myCareerWindow, 0;
// LINE 313:
	__asm        mov    eax, myCareerWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCareerWindow;
	__asm        call   dword ptr [eax+4];
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, myCareerWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCareerWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 316:
	__asm        mov    ecx, this;
	__asm        call   GameModePickCareerCityData::CreatePalette;
// LINE 317:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BDFA4;
// LINE 318:
}

// FUNCTION: COPTER_D 0x004bdfa9
int32_t GameModePickCareerCityData::DestroyAllSurfaces() {
// LINE 325:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004BDFF6;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BDFEC;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x004BDFEC;
// LINE 327:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 329:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BE000;
// LINE 330:
}

// FUNCTION: COPTER_D 0x004be005
void GameModePlayData::GameModePlayData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923CC;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 344:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 345:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 346:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 347:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 348:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 1;
// LINE 349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 350:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 351:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 353:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 354:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 355:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 356:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 357:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 358:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 361:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 362:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 363:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0;
// LINE 364:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 365:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 366:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
// LINE 367:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
// LINE 368:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 369:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 370:
	__asm        jmp    near ptr 0x004BE140;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004be148
void GameModePlayData::Initialize() {
// LINE 390:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::SetNonUserConfigurableCommandsToDefaults;
// LINE 391:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ReadUserConfigurableCommands;
// LINE 392:
	__asm        jmp    near ptr 0x004BE169;
}

// FUNCTION: COPTER_D 0x004be16e
void GameModePlayData::CreatePalette() {
	int32_t i;
	char * pPalettePosition;
	char szPath[260];

// LINE 411:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004BE20F;
// LINE 412:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     near ptr 0x004BE202;
	__asm        mov    dword ptr [ebp-0x114], 0x100;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
	__asm        dec    dword ptr [ebp-0x114];
	__asm        js     near ptr 0x004BE1E9;
	__asm        mov    ecx, [ebp-0x118];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x118], 4;
	__asm        jmp    near ptr 0x004BE1C6;
	__asm        jmp    near ptr 0x004BE1EE;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004BE20F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 418:
	__asm        cmp    dword ptr ds:[0x598EFC], 0;
	__asm        jne    near ptr 0x004BE264;
// LINE 419:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEC4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   7;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 420:
	__asm        mov    eax, ds:[0x59AEC8];
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        call   VRLoadResource;
	__asm        add    esp, 0xC;
	__asm        mov    ds:[0x5B4770], eax;
// LINE 421:
	__asm        mov    eax, ds:[0x5B4770];
	__asm        push   eax;
	__asm        call   VRGetPalFromResource;
	__asm        add    esp, 4;
	__asm        mov    ds:[0x598EFC], eax;
// LINE 424:
	__asm        mov    eax, ds:[0x598EFC];
	__asm        mov    pPalettePosition, eax;
// LINE 425:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004BE284;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x004BE2FB;
// LINE 426:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+2], al;
	__asm        inc    pPalettePosition;
// LINE 427:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4+1], al;
	__asm        inc    pPalettePosition;
// LINE 428:
	__asm        mov    eax, pPalettePosition;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4], al;
	__asm        inc    pPalettePosition;
// LINE 429:
	__asm        jmp    near ptr 0x004BE27E;
// LINE 430:
	__asm        jmp    near ptr 0x004BE300;
}

// FUNCTION: COPTER_D 0x004be305
void GameModePlayData::UsePalette() {
// LINE 439:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 440:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 441:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 442:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 443:
	__asm        jmp    near ptr 0x004BE353;
}

// FUNCTION: COPTER_D 0x004be358
void GameModePlayData::Sleep() {
// LINE 451:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 452:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyIndependentSurfaces;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 453:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE38A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
// LINE 454:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3A2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0xC], eax;
// LINE 455:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3BA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x10], eax;
// LINE 456:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3D2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x14], eax;
// LINE 457:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x18], eax;
// LINE 458:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE402;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x1C], eax;
// LINE 459:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE41A;
// LINE 460:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BE43F;
// LINE 461:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE43F;
// LINE 462:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BE464;
// LINE 463:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE464;
// LINE 464:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BE489;
// LINE 465:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE489;
// LINE 466:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BE4AE;
// LINE 467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE4AE;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BE4C6;
// LINE 469:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0xC];
// LINE 471:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0xC];
// LINE 472:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0xC];
// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0xC];
// LINE 474:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0xC];
// LINE 475:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+0xC];
// LINE 476:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BE55B;
// LINE 477:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0xC];
// LINE 478:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BE579;
// LINE 479:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0xC];
// LINE 480:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BE597;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0xC];
// LINE 482:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BE5B5;
// LINE 483:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0xC];
// LINE 484:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0xC];
// LINE 485:
	__asm        jmp    near ptr 0x004BE5CB;
}

// FUNCTION: COPTER_D 0x004be5d0
void GameModePlayData::Awake() {
// LINE 492:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004BE88E;
// LINE 494:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 495:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreateIndependentSurfaces;
// LINE 496:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+8];
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+8];
// LINE 499:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+8];
// LINE 500:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+8];
// LINE 501:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+8];
// LINE 502:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+8];
// LINE 504:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 505:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BE6AD;
// LINE 506:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+8];
// LINE 507:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BE6CB;
// LINE 508:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+8];
// LINE 509:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BE6E9;
// LINE 510:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+8];
// LINE 511:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BE707;
// LINE 512:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+8];
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+8];
// LINE 514:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004BE886;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 515:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE73D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
// LINE 516:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE755;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0xC], eax;
// LINE 517:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE76D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x10], eax;
// LINE 518:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE785;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x14], eax;
// LINE 519:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE79D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x18], eax;
// LINE 520:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7B5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x1C], eax;
// LINE 521:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7CD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x20], eax;
// LINE 522:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE7E5;
// LINE 523:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x004BE886;
// LINE 524:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BE817;
// LINE 525:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE817;
// LINE 526:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BE83C;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE83C;
// LINE 528:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BE861;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE861;
// LINE 530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BE886;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BE886;
// LINE 534:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::UsePalette;
// LINE 536:
	__asm        jmp    near ptr 0x004BE893;
}

// FUNCTION: COPTER_D 0x004be898
int32_t GameModePlayData::CreateAllSurfaces() {
// LINE 543:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreateIndependentSurfaces;
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreatePanels;
// LINE 545:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::CreatePalette;
// LINE 546:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BE8C6;
// LINE 547:
}

// FUNCTION: COPTER_D 0x004be8cb
int32_t GameModePlayData::CreatePanels() {
	class MRect rectPanel3;
	class MRect rectPanel4;
	class MRect rectPanel5;
	class MRect rectPassengerWindow;
	class MRect rectPanel6;
	class MRect rectPanel0;
	class MRect rectPanel1;
	class MRect rectPanel2;

// LINE 556:
	__asm        jmp    near ptr 0x004BE8E2;
	__asm        jmp    near ptr 0x004BE8E7;
// LINE 557:
	__asm        jmp    near ptr 0x004BE8EC;
	__asm        jmp    near ptr 0x004BE8F1;
// LINE 558:
	__asm        jmp    near ptr 0x004BE8F6;
	__asm        jmp    near ptr 0x004BE8FB;
// LINE 559:
	__asm        jmp    near ptr 0x004BE900;
	__asm        jmp    near ptr 0x004BE905;
// LINE 560:
	__asm        jmp    near ptr 0x004BE90A;
	__asm        jmp    near ptr 0x004BE90F;
// LINE 561:
	__asm        jmp    near ptr 0x004BE914;
	__asm        jmp    near ptr 0x004BE919;
// LINE 562:
	__asm        jmp    near ptr 0x004BE91E;
	__asm        jmp    near ptr 0x004BE923;
// LINE 563:
	__asm        jmp    near ptr 0x004BE928;
	__asm        jmp    near ptr 0x004BE92D;
// LINE 564:
	__asm        cmp    dword ptr ds:[0x598F00], 1;
	__asm        jne    near ptr 0x004BEA47;
// LINE 565:
	__asm        mov    rectPanel0.left, 0;
	__asm        mov    rectPanel0.top, 0;
	__asm        mov    rectPanel0.right, 0x10;
	__asm        mov    rectPanel0.bottom, 0x10;
	__asm        jmp    near ptr 0x004BE95B;
// LINE 566:
	__asm        mov    rectPanel1.left, 0x1EE;
	__asm        mov    rectPanel1.top, 0;
	__asm        mov    rectPanel1.right, 0x22C;
	__asm        mov    rectPanel1.bottom, 0x3E;
	__asm        jmp    near ptr 0x004BE97C;
// LINE 567:
	__asm        mov    rectPanel2.left, 0x22C;
	__asm        mov    rectPanel2.top, 0;
	__asm        mov    rectPanel2.right, 0x280;
	__asm        mov    rectPanel2.bottom, 0x124;
	__asm        jmp    near ptr 0x004BE99D;
// LINE 568:
	__asm        mov    rectPanel3.left, 0x212;
	__asm        mov    rectPanel3.top, 0x3E;
	__asm        mov    rectPanel3.right, 0x22C;
	__asm        mov    rectPanel3.bottom, 0x124;
	__asm        jmp    near ptr 0x004BE9BE;
// LINE 569:
	__asm        mov    rectPanel4.left, 0;
	__asm        mov    rectPanel4.top, 0x163;
	__asm        mov    rectPanel4.right, 0x1C8;
	__asm        mov    rectPanel4.bottom, 0x18E;
	__asm        jmp    near ptr 0x004BE9DF;
// LINE 570:
	__asm        mov    rectPanel5.left, 0x1C7;
	__asm        mov    rectPanel5.top, 0x122;
	__asm        mov    rectPanel5.right, 0x280;
	__asm        mov    rectPanel5.bottom, 0x1B6;
	__asm        jmp    near ptr 0x004BEA00;
// LINE 571:
	__asm        mov    rectPanel6.left, 0;
	__asm        mov    rectPanel6.top, 0x18E;
	__asm        mov    rectPanel6.right, 0x1C8;
	__asm        mov    rectPanel6.bottom, 0x1E0;
	__asm        jmp    near ptr 0x004BEA21;
// LINE 572:
	__asm        mov    rectPassengerWindow.left, 0x1C6;
	__asm        mov    rectPassengerWindow.top, 0x1B5;
	__asm        mov    rectPassengerWindow.right, 0x280;
	__asm        mov    rectPassengerWindow.bottom, 0x1E0;
	__asm        jmp    near ptr 0x004BEA42;
// LINE 574:
	__asm        jmp    near ptr 0x004BEA66;
	__asm        cmp    dword ptr ds:[0x598F00], 2;
	__asm        jne    near ptr 0x004BEA59;
// LINE 577:
	__asm        jmp    near ptr 0x004BEA66;
	__asm        cmp    dword ptr ds:[0x598F00], 3;
	__asm        jne    near ptr 0x004BEA66;
// LINE 581:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x004BEAB8;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel0.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AED4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x004BEAC5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 582:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x24];
// LINE 584:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x004BEB33;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel1.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AED8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x004BEB40;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 585:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x24];
// LINE 587:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x004BEBAE;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel2.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEDC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
	__asm        jmp    near ptr 0x004BEBBB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 588:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0x24];
// LINE 590:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x004BEC26;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel3.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEE0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    near ptr 0x004BEC33;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 591:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0x24];
// LINE 593:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x004BECA1;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0x604480;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel4.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   RadioCompassWindow::RadioCompassWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        jmp    near ptr 0x004BECAE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 594:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+4];
// LINE 596:
	__asm        push   0x118;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x004BED12;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel5.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   MapWindow::MapWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
	__asm        jmp    near ptr 0x004BED1F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 597:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+4];
// LINE 599:
	__asm        push   0x1E8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x9C], eax;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x004BED8D;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPanel6.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        call   DialWindow::DialWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        jmp    near ptr 0x004BED9A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0;
// LINE 600:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+4];
// LINE 602:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 604:
	__asm        push   0xAC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA0], eax;
	__asm        cmp    dword ptr [ebp-0xA0], 0;
	__asm        je     near ptr 0x004BEE09;
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectPassengerWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        call   PassengerWindow::PassengerWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    near ptr 0x004BEE16;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 605:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+4];
// LINE 609:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    near ptr 0x004BF009;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xA4], eax;
// LINE 610:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEE5E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0xA8], eax;
// LINE 611:
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEE7F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0xAC], eax;
// LINE 612:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEA0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0xB0], eax;
// LINE 613:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEC1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0xB4], eax;
// LINE 614:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEEE2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0xB8], eax;
// LINE 615:
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF03;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0xBC], eax;
// LINE 616:
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF24;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0xC0], eax;
// LINE 617:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF45;
// LINE 618:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BEF76;
// LINE 619:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEF76;
// LINE 620:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BEFA7;
// LINE 621:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEFA7;
// LINE 622:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BEFD8;
// LINE 623:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BEFD8;
// LINE 624:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BF009;
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BF009;
// LINE 628:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF013;
// LINE 629:
}

// FUNCTION: COPTER_D 0x004bf018
void GameModePlayData::MakeSureHeliHasProperFlaps() {
	class MRect rectFlap0;
	class MRect rectFlap2;
	struct tagUserPersonalInfo* userPersonalInfo;
	class MRect rectFlap1;
	class MRect rectFlap3;

// LINE 638:
	__asm        jmp    near ptr 0x004BF029;
	__asm        jmp    near ptr 0x004BF02E;
// LINE 639:
	__asm        jmp    near ptr 0x004BF033;
	__asm        jmp    near ptr 0x004BF038;
// LINE 640:
	__asm        jmp    near ptr 0x004BF03D;
	__asm        jmp    near ptr 0x004BF042;
// LINE 641:
	__asm        jmp    near ptr 0x004BF047;
	__asm        jmp    near ptr 0x004BF04C;
// LINE 642:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    userPersonalInfo, eax;
// LINE 644:
	__asm        cmp    dword ptr ds:[0x598F00], 1;
	__asm        jne    near ptr 0x004BF0E5;
// LINE 645:
	__asm        mov    rectFlap0.left, 0x1F6;
	__asm        mov    rectFlap0.top, 0x18;
	__asm        mov    rectFlap0.right, 0x280;
	__asm        mov    rectFlap0.bottom, 0x52;
	__asm        jmp    near ptr 0x004BF082;
// LINE 646:
	__asm        mov    rectFlap1.left, 0x1F6;
	__asm        mov    rectFlap1.top, 0x5A;
	__asm        mov    rectFlap1.right, 0x280;
	__asm        mov    rectFlap1.bottom, 0x94;
	__asm        jmp    near ptr 0x004BF0A3;
// LINE 647:
	__asm        mov    rectFlap2.left, 0x1F6;
	__asm        mov    rectFlap2.top, 0x9C;
	__asm        mov    rectFlap2.right, 0x280;
	__asm        mov    rectFlap2.bottom, 0xD6;
	__asm        jmp    near ptr 0x004BF0C4;
// LINE 648:
	__asm        mov    rectFlap3.left, 0x1F6;
	__asm        mov    rectFlap3.top, 0xDE;
	__asm        mov    rectFlap3.right, 0x280;
	__asm        mov    rectFlap3.bottom, 0x118;
	__asm        jmp    near ptr 0x004BF0E5;
// LINE 651:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 1;
	__asm        je     near ptr 0x004BF1A3;
// LINE 652:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        jne    near ptr 0x004BF19E;
// LINE 653:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004BF148;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectFlap0.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEF0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    near ptr 0x004BF152;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+4];
// LINE 655:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x24];
// LINE 656:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004BF19E;
// LINE 657:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BF19E;
// LINE 660:
	__asm        jmp    near ptr 0x004BF1CB;
// LINE 661:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BF1CB;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 663:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 666:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     near ptr 0x004BF2B0;
// LINE 667:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        jne    near ptr 0x004BF2AB;
// LINE 668:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x004BF255;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004BF21D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004BF224;
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, rectFlap1.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEF4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x004BF25F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 669:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+4];
// LINE 670:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x24];
// LINE 671:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004BF2AB;
// LINE 672:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BF2AB;
// LINE 675:
	__asm        jmp    near ptr 0x004BF2D8;
// LINE 676:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BF2D8;
// LINE 677:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x6C];
// LINE 678:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 681:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 4;
	__asm        je     near ptr 0x004BF3BD;
// LINE 682:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        jne    near ptr 0x004BF3B8;
// LINE 683:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x004BF362;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004BF32A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004BF331;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, rectFlap2.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEF8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004BF36C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
// LINE 684:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+4];
// LINE 685:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x24];
// LINE 686:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004BF3B8;
// LINE 687:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BF3B8;
// LINE 690:
	__asm        jmp    near ptr 0x004BF3E5;
// LINE 691:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BF3E5;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x6C];
// LINE 693:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
// LINE 696:
	__asm        mov    eax, userPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     near ptr 0x004BF4CA;
// LINE 697:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        jne    near ptr 0x004BF4C5;
// LINE 698:
	__asm        push   0xCC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004BF46F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004BF437;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004BF43E;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, rectFlap3.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AEFC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   EquipmentPanelWindow::EquipmentPanelWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
	__asm        jmp    near ptr 0x004BF479;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
// LINE 699:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+4];
// LINE 700:
	__asm        push   0xFE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x24];
// LINE 701:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x004BF4C5;
// LINE 702:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BF4C5;
// LINE 705:
	__asm        jmp    near ptr 0x004BF4F2;
// LINE 706:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BF4F2;
// LINE 707:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x6C];
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
// LINE 712:
	__asm        jmp    near ptr 0x004BF4F7;
}

// FUNCTION: COPTER_D 0x004bf4fc
int32_t GameModePlayData::CreateIndependentSurfaces() {
// LINE 721:
	__asm        push   0x150;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BF545;
	__asm        push   0xC8;
	__asm        push   0x280;
	__asm        mov    eax, ds:[0x598E90];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   SkyImage::SkyImage;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x004BF54F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 724:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   CGameApp::GetFullRenderingWindowSize;
// LINE 725:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004BF5B1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004BF5BB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 726:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF5C5;
// LINE 727:
}

// FUNCTION: COPTER_D 0x004bf5ca
void GameModePlayData::DestroyIndependentSurfaces() {
// LINE 736:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004BF624;
// LINE 737:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BF61A;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BF615;
	__asm        jmp    near ptr 0x004BF61A;
// LINE 738:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
// LINE 740:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x004BF677;
// LINE 741:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004BF66D;
	__asm        jmp    near ptr 0x004BF64F;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BF668;
	__asm        jmp    near ptr 0x004BF66D;
// LINE 742:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
// LINE 744:
	__asm        jmp    near ptr 0x004BF67C;
}

// FUNCTION: COPTER_D 0x004bf681
void GameModePlayData::DestroyAllSurfaces() {
// LINE 753:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyIndependentSurfaces;
// LINE 754:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyPanels;
// LINE 755:
	__asm        jmp    near ptr 0x004BF6A2;
}

// FUNCTION: COPTER_D 0x004bf6a7
int32_t GameModePlayData::DestroyPanels() {
// LINE 763:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x004BF6DB;
// LINE 764:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x6C];
// LINE 765:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 767:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x004BF703;
// LINE 768:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x6C];
// LINE 769:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 771:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x004BF72B;
// LINE 772:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x48];
	__asm        call   dword ptr [edx+0x6C];
// LINE 773:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 775:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     near ptr 0x004BF753;
// LINE 776:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x4C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 777:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 779:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     near ptr 0x004BF77B;
// LINE 780:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+0x6C];
// LINE 781:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 783:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004BF7A3;
// LINE 784:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0x6C];
// LINE 785:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 787:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0;
	__asm        je     near ptr 0x004BF7CB;
// LINE 788:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x58];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x58];
	__asm        call   dword ptr [edx+0x6C];
// LINE 789:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0;
// LINE 791:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BF7F3;
// LINE 792:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x5C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x5C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 793:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 795:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BF81B;
// LINE 796:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x60];
	__asm        call   dword ptr [edx+0x6C];
// LINE 797:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 799:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BF843;
// LINE 800:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x64];
	__asm        call   dword ptr [edx+0x6C];
// LINE 801:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x64], 0;
// LINE 803:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BF86B;
// LINE 804:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x68];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x68];
	__asm        call   dword ptr [edx+0x6C];
// LINE 805:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
// LINE 807:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x004BF893;
// LINE 808:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x6C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x6C];
	__asm        call   dword ptr [edx+0x6C];
// LINE 809:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 811:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BF89D;
// LINE 812:
}

// FUNCTION: COPTER_D 0x004bf8a2
void GameModePlayData::ShowPanels() {
// LINE 835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    near ptr 0x004BFAA1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x004BFAA1;
// LINE 836:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
// LINE 839:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004BF914;
// LINE 840:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598EC8], eax;
// LINE 841:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598ECC], eax;
// LINE 842:
	__asm        jmp    near ptr 0x004BF906;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598ED4], eax;
// LINE 845:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ds:[0x598EE8], eax;
// LINE 846:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ds:[0x598EEC], eax;
// LINE 847:
	__asm        jmp    near ptr 0x004BF92F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598EF4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 850:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF958;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
// LINE 851:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF970;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0xC], eax;
// LINE 852:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF988;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x10], eax;
// LINE 853:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9A0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x14], eax;
// LINE 854:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9B8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x18], eax;
// LINE 855:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9D0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x1C], eax;
// LINE 856:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BF9E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x20], eax;
// LINE 857:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFA00;
// LINE 858:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x004BFAA1;
// LINE 859:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BFA32;
// LINE 860:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFA32;
// LINE 861:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BFA57;
// LINE 862:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFA57;
// LINE 863:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BFA7C;
// LINE 864:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFA7C;
// LINE 865:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BFAA1;
// LINE 866:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFAA1;
// LINE 870:
	__asm        jmp    near ptr 0x004BFAA6;
}

// FUNCTION: COPTER_D 0x004bfaab
void GameModePlayData::HidePanels() {
// LINE 889:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004BFC90;
// LINE 890:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 892:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004BFB10;
// LINE 893:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598EC8], eax;
// LINE 894:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598ECC], eax;
// LINE 895:
	__asm        jmp    near ptr 0x004BFB02;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598ED4], eax;
// LINE 898:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ds:[0x598EE8], eax;
// LINE 899:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ds:[0x598EEC], eax;
// LINE 900:
	__asm        jmp    near ptr 0x004BFB2B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598EF4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-4], eax;
// LINE 904:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB54;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
// LINE 905:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB6C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0xC], eax;
// LINE 906:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB84;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x10], eax;
// LINE 907:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFB9C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x14], eax;
// LINE 908:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBB4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x18], eax;
// LINE 909:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBCC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x1C], eax;
// LINE 910:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBE4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x20], eax;
// LINE 911:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFBFC;
// LINE 912:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BFC21;
// LINE 913:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFC21;
// LINE 914:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BFC46;
// LINE 915:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFC46;
// LINE 916:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BFC6B;
// LINE 917:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFC6B;
// LINE 918:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BFC90;
// LINE 919:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFC90;
// LINE 922:
	__asm        jmp    near ptr 0x004BFC95;
}

// FUNCTION: COPTER_D 0x004bfc9a
void GameModePlayData::ShowEquipment() {
// LINE 930:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    near ptr 0x004BFD6B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x004BFD6B;
// LINE 931:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 932:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004BFD6B;
// LINE 933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BFCFC;
// LINE 934:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFCFC;
// LINE 935:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BFD21;
// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFD21;
// LINE 937:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BFD46;
// LINE 938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFD46;
// LINE 939:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BFD6B;
// LINE 940:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004BFD6B;
// LINE 943:
	__asm        jmp    near ptr 0x004BFD70;
}

// FUNCTION: COPTER_D 0x004bfd75
void GameModePlayData::HideEquipment() {
// LINE 952:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x004BFE2C;
// LINE 953:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 954:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x004BFDBD;
// LINE 955:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFDBD;
// LINE 956:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x60], 0;
	__asm        je     near ptr 0x004BFDE2;
// LINE 957:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFDE2;
// LINE 958:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004BFE07;
// LINE 959:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFE07;
// LINE 960:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x004BFE2C;
// LINE 961:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004BFE2C;
// LINE 963:
	__asm        jmp    near ptr 0x004BFE31;
}

// FUNCTION: COPTER_D 0x004bfe36
void GameModePlayData::TogglePanelDisplay() {
// LINE 972:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004BFE66;
// LINE 974:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 975:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HidePanels;
// LINE 977:
	__asm        jmp    near ptr 0x004BFE78;
// LINE 979:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 1;
// LINE 980:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowPanels;
// LINE 982:
	__asm        jmp    near ptr 0x004BFE7D;
}

// FUNCTION: COPTER_D 0x004bfe82
void GameModePlayData::ToggleEquipmentDisplay() {
// LINE 991:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x004BFEA8;
// LINE 992:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HideEquipment;
// LINE 993:
	__asm        jmp    near ptr 0x004BFEB0;
// LINE 994:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowEquipment;
// LINE 995:
	__asm        jmp    near ptr 0x004BFEB5;
}

// FUNCTION: COPTER_D 0x004bfeba
void GameModePlayData::Shutdown() {
// LINE 1003:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::DestroyAllSurfaces;
// LINE 1004:
	__asm        jmp    near ptr 0x004BFED3;
}

// FUNCTION: COPTER_D 0x004bfed8
long GameModePlayData::TestForUserInHelicopter() {
	long lReturnValue;

// LINE 1012:
	__asm        mov    lReturnValue, 0;
// LINE 1014:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        je     near ptr 0x004BFEFD;
	__asm        jmp    near ptr 0x004BFF02;
	__asm        jmp    near ptr 0x004BFF3A;
	__asm        jmp    near ptr 0x004BFF11;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004BFF3A;
// LINE 1015:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jne    near ptr 0x004BFF35;
// LINE 1020:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 1;
// LINE 1021:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ProcessUserJustJumpedIntoHelicopter;
	__asm        jmp    near ptr 0x004BFF66;
// LINE 1024:
	__asm        jmp    near ptr 0x004BFF5E;
// LINE 1025:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x004BFF5E;
// LINE 1030:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 1031:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ProcessUserJustJumpedOutOfHelicopter;
	__asm        jmp    near ptr 0x004BFF66;
// LINE 1034:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    near ptr 0x004BFF66;
// LINE 1035:
}

// FUNCTION: COPTER_D 0x004bff6b
long GameModePlayData::ProcessUserJustJumpedIntoHelicopter() {
// LINE 1046:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::MakeSureHeliHasProperFlaps;
// LINE 1047:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        je     near ptr 0x004BFF94;
// LINE 1048:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::ShowPanels;
// LINE 1049:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BFF9E;
// LINE 1050:
}

// FUNCTION: COPTER_D 0x004bffa3
long GameModePlayData::ProcessUserJustJumpedOutOfHelicopter() {
// LINE 1060:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::HidePanels;
// LINE 1065:
	__asm        cmp    dword ptr ds:[0x5C33D0], 1;
	__asm        jne    near ptr 0x004BFFCE;
// LINE 1066:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x004BFFD5;
// LINE 1068:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BFFD5;
// LINE 1069:
}

// FUNCTION: COPTER_D 0x004bffda
void GameModePlayData::SetUpRenderWindowSizes() {
// LINE 1084:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   CGameApp::GetFullRenderingWindowSize;
// LINE 1085:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 1086:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 1088:
	__asm        cmp    dword ptr ds:[0x598F00], 0;
	__asm        jne    near ptr 0x004C0037;
// LINE 1089:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x28;
// LINE 1090:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x28;
// LINE 1092:
	__asm        jmp    near ptr 0x004C0098;
	__asm        cmp    dword ptr ds:[0x598F00], 1;
	__asm        jne    near ptr 0x004C0057;
// LINE 1093:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x50;
// LINE 1094:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x50;
// LINE 1096:
	__asm        jmp    near ptr 0x004C0098;
	__asm        cmp    dword ptr ds:[0x598F00], 2;
	__asm        jne    near ptr 0x004C0077;
// LINE 1097:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x64;
// LINE 1098:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x64;
// LINE 1100:
	__asm        jmp    near ptr 0x004C0098;
	__asm        cmp    dword ptr ds:[0x598F00], 3;
	__asm        jne    near ptr 0x004C0098;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x20], 0x80;
// LINE 1102:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x80;
// LINE 1105:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004C010B;
// LINE 1106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598EC8], eax;
// LINE 1107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598ECC], eax;
// LINE 1108:
	__asm        jmp    near ptr 0x004C00CC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598ED4], eax;
// LINE 1111:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ds:[0x598EE8], eax;
// LINE 1112:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ds:[0x598EEC], eax;
// LINE 1113:
	__asm        jmp    near ptr 0x004C00F5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598EF4], eax;
// LINE 1115:
	__asm        jmp    near ptr 0x004C016C;
// LINE 1116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598EC8], eax;
// LINE 1117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ds:[0x598ECC], eax;
// LINE 1118:
	__asm        jmp    near ptr 0x004C0132;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598ED4], eax;
// LINE 1121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ds:[0x598EE8], eax;
// LINE 1122:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ds:[0x598EEC], eax;
// LINE 1123:
	__asm        jmp    near ptr 0x004C015B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ds:[0x598EF4], eax;
// LINE 1125:
	__asm        jmp    near ptr 0x004C0171;
}

// FUNCTION: COPTER_D 0x004c0176
void GameModePlayData::ReadUserConfigurableCommands() {
// LINE 1134:
	__asm        mov    eax, this;
	__asm        add    eax, 0x148;
	__asm        push   eax;
	__asm        call   ReadShortcutPrefsFile;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004C01A3;
// LINE 1135:
	__asm        mov    ecx, this;
	__asm        call   GameModePlayData::SetUserConfigurableCommandsToDefaults;
// LINE 1136:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1137:
	__asm        jmp    near ptr 0x004C01B3;
}

// FUNCTION: COPTER_D 0x004c01b8
void GameModePlayData::RemoveUserConfigurableCommands() {
	long lCurrentCommand;
	class list<Shortcut>::iterator tempShortcutListIterator;

// LINE 1144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C01DD;
	__asm        jmp    near ptr 0x004C01E2;
// LINE 1147:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004C01F9;
	__asm        jmp    near ptr 0x004C01FE;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    tempShortcutListIterator.node, eax;
	__asm        jne    near ptr 0x004C0214;
	__asm        jmp    near ptr 0x004C0228;
	__asm        jmp    near ptr 0x004C0214;
	__asm        jmp    near ptr 0x004C0223;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004C0228;
	__asm        jmp    near ptr 0x004C022D;
	__asm        jmp    near ptr 0x004C02F5;
	__asm        jmp    near ptr 0x004C023C;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004C02F5;
// LINE 1148:
	__asm        jmp    near ptr 0x004C0241;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCurrentCommand, eax;
// LINE 1149:
	__asm        mov    eax, lCurrentCommand;
	__asm        push   eax;
	__asm        call   IsCommandConfigurable;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004C02D2;
// LINE 1150:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C0271;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004C027C;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C02A2;
	__asm        jmp    near ptr 0x004C02A7;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x004C02BE;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004C02CD;
// LINE 1151:
	__asm        jmp    near ptr 0x004C02F0;
// LINE 1152:
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, tempShortcutListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempShortcutListIterator.node, eax;
	__asm        jmp    near ptr 0x004C02E5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004C02F0;
// LINE 1153:
	__asm        jmp    near ptr 0x004C01E2;
// LINE 1154:
	__asm        jmp    near ptr 0x004C02FA;
}

// FUNCTION: COPTER_D 0x004c02ff
void GameModePlayData::SetUserConfigurableCommandsToDefaults() {
// LINE 1164:
	__asm        mov    eax, this;
	__asm        add    eax, 0x148;
	__asm        push   eax;
	__asm        call   MakeDefaultConfigurableShortcuts;
	__asm        add    esp, 4;
// LINE 1165:
	__asm        jmp    near ptr 0x004C0321;
}

// FUNCTION: COPTER_D 0x004c0326
void GameModePlayData::SetNonUserConfigurableCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1178:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1180:
	__asm        mov    tempShortcut.lCommand, 0;
// LINE 1181:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 1182:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1183:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1184:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C037C;
	__asm        jmp    near ptr 0x004C0381;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C03A3;
// LINE 1187:
	__asm        mov    tempShortcut.lCommand, 0x38;
// LINE 1188:
	__asm        mov    tempShortcut.lKey, 0x1B;
// LINE 1189:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1190:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1191:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1192:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004C03E0;
	__asm        jmp    near ptr 0x004C03E5;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0407;
// LINE 1194:
	__asm        mov    tempShortcut.lCommand, 0x22;
// LINE 1195:
	__asm        mov    tempShortcut.lKey, 0x70;
// LINE 1196:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1197:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1198:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1199:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004C0444;
	__asm        jmp    near ptr 0x004C0449;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C046B;
// LINE 1201:
	__asm        mov    tempShortcut.lCommand, 0x23;
// LINE 1202:
	__asm        mov    tempShortcut.lKey, 0x71;
// LINE 1203:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1204:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1205:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1206:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004C04A8;
	__asm        jmp    near ptr 0x004C04AD;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C04CF;
// LINE 1208:
	__asm        mov    tempShortcut.lCommand, 0x24;
// LINE 1209:
	__asm        mov    tempShortcut.lKey, 0x72;
// LINE 1210:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1211:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1212:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1213:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004C050C;
	__asm        jmp    near ptr 0x004C0511;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0533;
// LINE 1215:
	__asm        mov    tempShortcut.lCommand, 0x25;
// LINE 1216:
	__asm        mov    tempShortcut.lKey, 0x73;
// LINE 1217:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1218:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1219:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1220:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004C0570;
	__asm        jmp    near ptr 0x004C0575;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0597;
// LINE 1222:
	__asm        mov    tempShortcut.lCommand, 0x26;
// LINE 1223:
	__asm        mov    tempShortcut.lKey, 0x31;
// LINE 1224:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1225:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1226:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x004C05D4;
	__asm        jmp    near ptr 0x004C05D9;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C05FB;
// LINE 1229:
	__asm        mov    tempShortcut.lCommand, 0x27;
// LINE 1230:
	__asm        mov    tempShortcut.lKey, 0x32;
// LINE 1231:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1232:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1233:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x004C0638;
	__asm        jmp    near ptr 0x004C063D;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C065F;
// LINE 1236:
	__asm        mov    tempShortcut.lCommand, 0x28;
// LINE 1237:
	__asm        mov    tempShortcut.lKey, 0x33;
// LINE 1238:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1239:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1240:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C06A2;
	__asm        jmp    near ptr 0x004C06A7;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C06C9;
// LINE 1243:
	__asm        mov    tempShortcut.lCommand, 0x29;
// LINE 1244:
	__asm        mov    tempShortcut.lKey, 0x34;
// LINE 1245:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1246:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1247:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1248:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C070F;
	__asm        jmp    near ptr 0x004C0714;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C073C;
// LINE 1250:
	__asm        mov    tempShortcut.lCommand, 0x2A;
// LINE 1251:
	__asm        mov    tempShortcut.lKey, 0x48;
// LINE 1252:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1253:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1254:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C0782;
	__asm        jmp    near ptr 0x004C0787;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C07AF;
// LINE 1257:
	__asm        mov    tempShortcut.lCommand, 0x2D;
// LINE 1258:
	__asm        mov    tempShortcut.lKey, 0x4F;
// LINE 1259:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1260:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1261:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x004C07F5;
	__asm        jmp    near ptr 0x004C07FA;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0822;
// LINE 1264:
	__asm        mov    tempShortcut.lCommand, 0x2E;
// LINE 1265:
	__asm        mov    tempShortcut.lKey, 0x47;
// LINE 1266:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1267:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1268:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1269:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004C0868;
	__asm        jmp    near ptr 0x004C086D;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C0895;
	__asm        mov    eax, [ebp-0xB8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x004C08A9;
	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     near ptr 0x004C08CB;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xBC];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C08CB;
	__asm        jmp    near ptr 0x004C08D0;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x004C092E;
	__asm        jmp    near ptr 0x004C0933;
	__asm        jmp    near ptr 0x004C0938;
// LINE 1271:
	__asm        mov    tempShortcut.lCommand, 0x33;
// LINE 1272:
	__asm        mov    tempShortcut.lKey, 0x53;
// LINE 1273:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1274:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1275:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x004C097E;
	__asm        jmp    near ptr 0x004C0983;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C09AB;
// LINE 1278:
	__asm        mov    tempShortcut.lCommand, 0x34;
// LINE 1279:
	__asm        mov    tempShortcut.lKey, 0x45;
// LINE 1280:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1281:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1282:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C09F1;
	__asm        jmp    near ptr 0x004C09F6;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C0A1E;
	__asm        mov    eax, [ebp-0xDC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x004C0A32;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     near ptr 0x004C0A54;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xE0];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C0A54;
	__asm        jmp    near ptr 0x004C0A59;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xDC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xE4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    ecx, [ebp-0xE4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C0AB7;
	__asm        jmp    near ptr 0x004C0ABC;
	__asm        jmp    near ptr 0x004C0AC1;
// LINE 1285:
	__asm        mov    tempShortcut.lCommand, 0x2C;
// LINE 1286:
	__asm        mov    tempShortcut.lKey, 0x4C;
// LINE 1287:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1288:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1289:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xE8], eax;
	__asm        jmp    near ptr 0x004C0B07;
	__asm        jmp    near ptr 0x004C0B0C;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C0B34;
	__asm        mov    eax, [ebp-0xF4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x004C0B48;
	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        je     near ptr 0x004C0B6A;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0xF8];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C0B6A;
	__asm        jmp    near ptr 0x004C0B6F;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x004C0BCD;
	__asm        jmp    near ptr 0x004C0BD2;
	__asm        jmp    near ptr 0x004C0BD7;
// LINE 1292:
	__asm        mov    tempShortcut.lCommand, 0x2B;
// LINE 1293:
	__asm        mov    tempShortcut.lKey, 0x4B;
// LINE 1294:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1295:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1296:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x100], eax;
	__asm        jmp    near ptr 0x004C0C1D;
	__asm        jmp    near ptr 0x004C0C22;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0C4A;
// LINE 1299:
	__asm        mov    tempShortcut.lCommand, 0x2F;
// LINE 1300:
	__asm        mov    tempShortcut.lKey, 0x44;
// LINE 1301:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1302:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1303:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    near ptr 0x004C0C90;
	__asm        jmp    near ptr 0x004C0C95;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x004C0CBD;
	__asm        mov    eax, [ebp-0x118];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x004C0CD1;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x004C0CF3;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x11C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C0CF3;
	__asm        jmp    near ptr 0x004C0CF8;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x004C0D56;
	__asm        jmp    near ptr 0x004C0D5B;
	__asm        jmp    near ptr 0x004C0D60;
// LINE 1306:
	__asm        mov    tempShortcut.lCommand, 0x35;
// LINE 1307:
	__asm        mov    tempShortcut.lKey, 0x49;
// LINE 1308:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1309:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1310:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x004C0DA6;
	__asm        jmp    near ptr 0x004C0DAB;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x004C0DD3;
	__asm        mov    eax, [ebp-0x130];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x004C0DE7;
	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     near ptr 0x004C0E09;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x134];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C0E09;
	__asm        jmp    near ptr 0x004C0E0E;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x004C0E6C;
	__asm        jmp    near ptr 0x004C0E71;
	__asm        jmp    near ptr 0x004C0E76;
// LINE 1313:
	__asm        mov    tempShortcut.lCommand, 0x37;
// LINE 1314:
	__asm        mov    tempShortcut.lKey, 0xD;
// LINE 1315:
	__asm        mov    tempShortcut.lModifiers, 4;
// LINE 1316:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1317:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1318:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    near ptr 0x004C0EBC;
	__asm        jmp    near ptr 0x004C0EC1;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C0EE9;
// LINE 1320:
	__asm        mov    tempShortcut.lCommand, 0x31;
// LINE 1321:
	__asm        mov    tempShortcut.lKey, 0x51;
// LINE 1322:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1323:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1324:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1325:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x148], eax;
	__asm        jmp    near ptr 0x004C0F2F;
	__asm        jmp    near ptr 0x004C0F34;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x004C0F5C;
	__asm        mov    eax, [ebp-0x154];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    near ptr 0x004C0F70;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     near ptr 0x004C0F92;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x158];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C0F92;
	__asm        jmp    near ptr 0x004C0F97;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        jmp    near ptr 0x004C0FF5;
	__asm        jmp    near ptr 0x004C0FFA;
	__asm        jmp    near ptr 0x004C0FFF;
// LINE 1327:
	__asm        mov    tempShortcut.lCommand, 0x32;
// LINE 1328:
	__asm        mov    tempShortcut.lKey, 0x50;
// LINE 1329:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1330:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1331:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x004C1045;
	__asm        jmp    near ptr 0x004C104A;
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x16C], eax;
	__asm        jmp    near ptr 0x004C1072;
	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x170], eax;
	__asm        jmp    near ptr 0x004C1086;
	__asm        cmp    dword ptr [ebp-0x170], 0;
	__asm        je     near ptr 0x004C10A8;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x170];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C10A8;
	__asm        jmp    near ptr 0x004C10AD;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x164], eax;
	__asm        jmp    near ptr 0x004C110B;
	__asm        jmp    near ptr 0x004C1110;
	__asm        jmp    near ptr 0x004C1115;
// LINE 1334:
	__asm        mov    tempShortcut.lCommand, 0x36;
// LINE 1335:
	__asm        mov    tempShortcut.lKey, 0x52;
// LINE 1336:
	__asm        mov    tempShortcut.lModifiers, 6;
// LINE 1337:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1338:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    near ptr 0x004C115B;
	__asm        jmp    near ptr 0x004C1160;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C1188;
// LINE 1341:
	__asm        mov    tempShortcut.lCommand, 0x3A;
// LINE 1342:
	__asm        mov    tempShortcut.lKey, 0x58;
// LINE 1343:
	__asm        mov    tempShortcut.lModifiers, 6;
// LINE 1344:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1345:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1346:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    near ptr 0x004C11CE;
	__asm        jmp    near ptr 0x004C11D3;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x148;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x190], eax;
	__asm        jmp    near ptr 0x004C11FB;
	__asm        mov    eax, [ebp-0x190];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x004C120F;
	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     near ptr 0x004C1231;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x194];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C1231;
	__asm        jmp    near ptr 0x004C1236;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x14C], 1;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x004C1294;
	__asm        jmp    near ptr 0x004C1299;
	__asm        jmp    near ptr 0x004C129E;
// LINE 1413:
	__asm        jmp    near ptr 0x004C12A3;
}

// FUNCTION: COPTER_D 0x004c12a8
void GameModeHangarData::GameModeHangarData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D0;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1428:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1429:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 1430:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 1431:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1432:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::SetCommandsToDefaults;
// LINE 1433:
	__asm        jmp    near ptr 0x004C130F;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c1317
int32_t GameModeHangarData::CreateAllSurfaces() {
// LINE 1443:
	__asm        push   0x12E;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C1387;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004C135B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004C1362;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x835;
	__asm        mov    ecx, [ebp-4];
	__asm        call   HangarWindow::HangarWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x004C1391;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1445:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::CreatePalette;
// LINE 1446:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C13B4;
// LINE 1447:
}

// FUNCTION: COPTER_D 0x004c13b9
void GameModeHangarData::DestroyAllSurfaces() {
// LINE 1453:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004C13ED;
// LINE 1454:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1455:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1457:
	__asm        jmp    near ptr 0x004C13F2;
}

// FUNCTION: COPTER_D 0x004c13f7
void GameModeHangarData::Sleep() {
// LINE 1464:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1465:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C1421;
// LINE 1466:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1467:
	__asm        jmp    near ptr 0x004C1437;
}

// FUNCTION: COPTER_D 0x004c143c
void GameModeHangarData::Awake() {
// LINE 1473:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1474:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004C14A5;
// LINE 1475:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1477:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1478:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1479:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004C14A5;
// LINE 1481:
	__asm        jmp    near ptr 0x004C14AA;
}

// FUNCTION: COPTER_D 0x004c14af
void GameModeHangarData::CreatePalette() {
// LINE 1488:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004C1526;
// LINE 1489:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C151C;
	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        dec    dword ptr [ebp-8];
	__asm        js     near ptr 0x004C1509;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x004C14EF;
	__asm        jmp    near ptr 0x004C150E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004C1526;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1491:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   HangarWindow::ReadPalette;
// LINE 1492:
	__asm        jmp    near ptr 0x004C153D;
}

// FUNCTION: COPTER_D 0x004c1542
void GameModeHangarData::UsePalette() {
// LINE 1499:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1500:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 1501:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 1502:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 1503:
	__asm        jmp    near ptr 0x004C1590;
}

// FUNCTION: COPTER_D 0x004c1595
void GameModeHangarData::Shutdown() {
// LINE 1510:
	__asm        mov    ecx, this;
	__asm        call   GameModeHangarData::DestroyAllSurfaces;
// LINE 1511:
	__asm        jmp    near ptr 0x004C15AE;
}

// FUNCTION: COPTER_D 0x004c15b3
void GameModeHangarData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C15DF;
	__asm        jmp    near ptr 0x004C15E4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C1600;
	__asm        jmp    near ptr 0x004C1605;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        cmp    [ebp-0xB8], eax;
	__asm        jne    near ptr 0x004C1633;
	__asm        jmp    near ptr 0x004C164A;
	__asm        jmp    near ptr 0x004C1633;
	__asm        jmp    near ptr 0x004C1645;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        jne    near ptr 0x004C164A;
	__asm        jmp    near ptr 0x004C164F;
	__asm        jmp    near ptr 0x004C16AE;
	__asm        jmp    near ptr 0x004C1661;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        je     near ptr 0x004C16AE;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C1680;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004C1691;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::erase;
	__asm        jmp    near ptr 0x004C1617;
	__asm        jmp    near ptr 0x004C16B3;
// LINE 1524:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1526:
	__asm        mov    tempShortcut.lCommand, 0;
// LINE 1527:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 1528:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1529:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1530:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C16F7;
	__asm        jmp    near ptr 0x004C16FC;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C171B;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C1729;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004C1745;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C1745;
	__asm        jmp    near ptr 0x004C174A;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C178A;
	__asm        jmp    near ptr 0x004C178F;
	__asm        jmp    near ptr 0x004C1794;
// LINE 1533:
	__asm        mov    tempShortcut.lCommand, 1;
// LINE 1534:
	__asm        mov    tempShortcut.lKey, 0x1B;
// LINE 1535:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1536:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1537:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004C17D1;
	__asm        jmp    near ptr 0x004C17D6;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C17F8;
// LINE 1540:
	__asm        mov    tempShortcut.lCommand, 1;
// LINE 1541:
	__asm        mov    tempShortcut.lKey, 0x48;
// LINE 1542:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1543:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1544:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004C1835;
	__asm        jmp    near ptr 0x004C183A;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004C1859;
	__asm        mov    eax, [ebp-0x5C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C1867;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004C1883;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x60];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C1883;
	__asm        jmp    near ptr 0x004C1888;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004C18C8;
	__asm        jmp    near ptr 0x004C18CD;
	__asm        jmp    near ptr 0x004C18D2;
// LINE 1547:
	__asm        mov    tempShortcut.lCommand, 2;
// LINE 1548:
	__asm        mov    tempShortcut.lKey, 0x43;
// LINE 1549:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1550:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1551:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1552:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004C190F;
	__asm        jmp    near ptr 0x004C1914;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C1933;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C1941;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x004C195D;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x78];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C195D;
	__asm        jmp    near ptr 0x004C1962;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ecx, [ebp-0x7C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004C19A2;
	__asm        jmp    near ptr 0x004C19A7;
	__asm        jmp    near ptr 0x004C19AC;
// LINE 1554:
	__asm        mov    tempShortcut.lCommand, 3;
// LINE 1555:
	__asm        mov    tempShortcut.lKey, 0x4D;
// LINE 1556:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1557:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1558:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1559:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004C19EF;
	__asm        jmp    near ptr 0x004C19F4;
	__asm        lea    eax, tempShortcut.lDeviceID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::insert;
	__asm        jmp    near ptr 0x004C1A19;
// LINE 1561:
	__asm        mov    tempShortcut.lCommand, 4;
// LINE 1562:
	__asm        mov    tempShortcut.lKey, 0x49;
// LINE 1563:
	__asm        mov    tempShortcut.lModifiers, 2;
// LINE 1564:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1565:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1566:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004C1A5F;
	__asm        jmp    near ptr 0x004C1A64;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xF0;
	__asm        call   list<Shortcut>::get_node;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004C1A8C;
	__asm        mov    eax, [ebp-0x98];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x004C1AA0;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x004C1AC2;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x9C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C1AC2;
	__asm        jmp    near ptr 0x004C1AC7;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C1B24;
	__asm        jmp    near ptr 0x004C1B29;
	__asm        jmp    near ptr 0x004C1B2E;
// LINE 1568:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1569:
	__asm        jmp    near ptr 0x004C1B41;
}

// FUNCTION: COPTER_D 0x004c1b46
void GameModeCatalogData::GameModeCatalogData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D4;
// LINE 1586:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1587:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::SetCommandsToDefaults;
// LINE 1588:
	__asm        jmp    near ptr 0x004C1B85;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c1b8d
int32_t GameModeCatalogData::CreateAllSurfaces() {
// LINE 1597:
	__asm        push   0x2B6;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C1BFD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004C1BD1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004C1BD8;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x836;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CatalogWindow::CatalogWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x004C1C07;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1598:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::CreatePalette;
// LINE 1600:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C1C2A;
// LINE 1601:
}

// FUNCTION: COPTER_D 0x004c1c2f
void GameModeCatalogData::DestroyAllSurfaces() {
// LINE 1607:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004C1C63;
// LINE 1608:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1609:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1611:
	__asm        jmp    near ptr 0x004C1C68;
}

// FUNCTION: COPTER_D 0x004c1c6d
void GameModeCatalogData::Sleep() {
// LINE 1618:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1619:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C1C97;
// LINE 1620:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1621:
	__asm        jmp    near ptr 0x004C1CAD;
}

// FUNCTION: COPTER_D 0x004c1cb2
void GameModeCatalogData::Awake() {
// LINE 1627:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1628:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004C1D1B;
// LINE 1629:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1631:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1632:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1633:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004C1D1B;
// LINE 1635:
	__asm        jmp    near ptr 0x004C1D20;
}

// FUNCTION: COPTER_D 0x004c1d25
void GameModeCatalogData::CreatePalette() {
// LINE 1642:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004C1D9C;
// LINE 1643:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C1D92;
	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        dec    dword ptr [ebp-8];
	__asm        js     near ptr 0x004C1D7F;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x004C1D65;
	__asm        jmp    near ptr 0x004C1D84;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004C1D9C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1645:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   CatalogWindow::ReadPalette;
// LINE 1646:
	__asm        jmp    near ptr 0x004C1DB3;
}

// FUNCTION: COPTER_D 0x004c1db8
void GameModeCatalogData::UsePalette() {
// LINE 1653:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1654:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 1655:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 1656:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 1657:
	__asm        jmp    near ptr 0x004C1E06;
}

// FUNCTION: COPTER_D 0x004c1e0b
void GameModeCatalogData::Shutdown() {
// LINE 1664:
	__asm        mov    ecx, this;
	__asm        call   GameModeCatalogData::DestroyAllSurfaces;
// LINE 1665:
	__asm        jmp    near ptr 0x004C1E24;
}

// FUNCTION: COPTER_D 0x004c1e29
void GameModeCatalogData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1676:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C1E55;
	__asm        jmp    near ptr 0x004C1E5A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C1E76;
	__asm        jmp    near ptr 0x004C1E7B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    near ptr 0x004C1EA9;
	__asm        jmp    near ptr 0x004C1EC0;
	__asm        jmp    near ptr 0x004C1EA9;
	__asm        jmp    near ptr 0x004C1EBB;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    near ptr 0x004C1EC0;
	__asm        jmp    near ptr 0x004C1EC5;
	__asm        jmp    near ptr 0x004C1F77;
	__asm        jmp    near ptr 0x004C1ED7;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x004C1F77;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C1EF6;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C1F07;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C1F3F;
	__asm        jmp    near ptr 0x004C1F44;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x004C1F61;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C1F72;
	__asm        jmp    near ptr 0x004C1E8D;
	__asm        jmp    near ptr 0x004C1F7C;
// LINE 1678:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1680:
	__asm        mov    tempShortcut.lCommand, 0;
// LINE 1681:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 1682:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1683:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1684:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1685:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C1FC0;
	__asm        jmp    near ptr 0x004C1FC5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C1FF7;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C2137;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C2122;
	__asm        jmp    near ptr 0x004C200D;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C2051;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C2057;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C205C;
	__asm        jmp    near ptr 0x004C2061;
	__asm        jmp    near ptr 0x004C2066;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C2073;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C20DB;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C20E1;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C20E6;
	__asm        jmp    near ptr 0x004C20EB;
	__asm        jmp    near ptr 0x004C20F0;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C2108;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x44], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C2137;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C213C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C2147;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C2155;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004C2171;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C2171;
	__asm        jmp    near ptr 0x004C2176;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C21B6;
	__asm        jmp    near ptr 0x004C21BB;
	__asm        jmp    near ptr 0x004C21C0;
// LINE 1687:
	__asm        mov    tempShortcut.lCommand, 1;
// LINE 1688:
	__asm        mov    tempShortcut.lKey, 0x1B;
// LINE 1689:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1690:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1691:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1692:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C2206;
	__asm        jmp    near ptr 0x004C220B;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C224C;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C23FE;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C23E0;
	__asm        jmp    near ptr 0x004C2262;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C22C7;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C22D3;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C22D8;
	__asm        jmp    near ptr 0x004C22DD;
	__asm        jmp    near ptr 0x004C22E2;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C22F5;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C2387;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C2393;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C2398;
	__asm        jmp    near ptr 0x004C239D;
	__asm        jmp    near ptr 0x004C23A2;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C23BD;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C23FE;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C2403;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C2414;
	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C2428;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x004C244A;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C244A;
	__asm        jmp    near ptr 0x004C244F;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C24AC;
	__asm        jmp    near ptr 0x004C24B1;
	__asm        jmp    near ptr 0x004C24B6;
// LINE 1694:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1695:
	__asm        jmp    near ptr 0x004C24C9;
}

// FUNCTION: COPTER_D 0x004c24ce
void GameModeMissionLogData::GameModeMissionLogData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923D8;
// LINE 1711:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1712:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::SetCommandsToDefaults;
// LINE 1713:
	__asm        jmp    near ptr 0x004C250D;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c2515
int32_t GameModeMissionLogData::CreateAllSurfaces() {
// LINE 1722:
	__asm        push   0x80;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C2585;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004C2559;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004C2560;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x838;
	__asm        mov    ecx, [ebp-4];
	__asm        call   MissionLogWindow::MissionLogWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x004C258F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1723:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1724:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::CreatePalette;
// LINE 1725:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C25B2;
// LINE 1726:
}

// FUNCTION: COPTER_D 0x004c25b7
void GameModeMissionLogData::DestroyAllSurfaces() {
// LINE 1732:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004C25EB;
// LINE 1733:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1734:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1736:
	__asm        jmp    near ptr 0x004C25F0;
}

// FUNCTION: COPTER_D 0x004c25f5
void GameModeMissionLogData::Sleep() {
// LINE 1743:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1744:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C261F;
// LINE 1745:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1746:
	__asm        jmp    near ptr 0x004C2635;
}

// FUNCTION: COPTER_D 0x004c263a
void GameModeMissionLogData::Awake() {
// LINE 1752:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1753:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004C26A3;
// LINE 1754:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1756:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1757:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1758:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004C26A3;
// LINE 1760:
	__asm        jmp    near ptr 0x004C26A8;
}

// FUNCTION: COPTER_D 0x004c26ad
void GameModeMissionLogData::CreatePalette() {
// LINE 1767:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004C2724;
// LINE 1768:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C271A;
	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        dec    dword ptr [ebp-8];
	__asm        js     near ptr 0x004C2707;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x004C26ED;
	__asm        jmp    near ptr 0x004C270C;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004C2724;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1770:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   MissionLogWindow::ReadPalette;
// LINE 1771:
	__asm        jmp    near ptr 0x004C273B;
}

// FUNCTION: COPTER_D 0x004c2740
void GameModeMissionLogData::UsePalette() {
// LINE 1778:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1779:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 1780:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 1781:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 1782:
	__asm        jmp    near ptr 0x004C278E;
}

// FUNCTION: COPTER_D 0x004c2793
void GameModeMissionLogData::Shutdown() {
// LINE 1789:
	__asm        mov    ecx, this;
	__asm        call   GameModeMissionLogData::DestroyAllSurfaces;
// LINE 1790:
	__asm        jmp    near ptr 0x004C27AC;
}

// FUNCTION: COPTER_D 0x004c27b1
void GameModeMissionLogData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1801:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C27DD;
	__asm        jmp    near ptr 0x004C27E2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C27FE;
	__asm        jmp    near ptr 0x004C2803;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    near ptr 0x004C2831;
	__asm        jmp    near ptr 0x004C2848;
	__asm        jmp    near ptr 0x004C2831;
	__asm        jmp    near ptr 0x004C2843;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    near ptr 0x004C2848;
	__asm        jmp    near ptr 0x004C284D;
	__asm        jmp    near ptr 0x004C28FF;
	__asm        jmp    near ptr 0x004C285F;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x004C28FF;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C287E;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C288F;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C28C7;
	__asm        jmp    near ptr 0x004C28CC;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x004C28E9;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C28FA;
	__asm        jmp    near ptr 0x004C2815;
	__asm        jmp    near ptr 0x004C2904;
// LINE 1803:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1805:
	__asm        mov    tempShortcut.lCommand, 0;
// LINE 1806:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 1807:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1808:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1809:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1810:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C2948;
	__asm        jmp    near ptr 0x004C294D;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C297F;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C2ABF;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C2AAA;
	__asm        jmp    near ptr 0x004C2995;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C29D9;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C29DF;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C29E4;
	__asm        jmp    near ptr 0x004C29E9;
	__asm        jmp    near ptr 0x004C29EE;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C29FB;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C2A63;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C2A69;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C2A6E;
	__asm        jmp    near ptr 0x004C2A73;
	__asm        jmp    near ptr 0x004C2A78;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C2A90;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x44], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C2ABF;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C2AC4;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C2ACF;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C2ADD;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004C2AF9;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C2AF9;
	__asm        jmp    near ptr 0x004C2AFE;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C2B3E;
	__asm        jmp    near ptr 0x004C2B43;
	__asm        jmp    near ptr 0x004C2B48;
// LINE 1812:
	__asm        mov    tempShortcut.lCommand, 1;
// LINE 1813:
	__asm        mov    tempShortcut.lKey, 0x1B;
// LINE 1814:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1815:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1816:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1817:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C2B8E;
	__asm        jmp    near ptr 0x004C2B93;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C2BD4;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C2D86;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C2D68;
	__asm        jmp    near ptr 0x004C2BEA;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C2C4F;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C2C5B;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C2C60;
	__asm        jmp    near ptr 0x004C2C65;
	__asm        jmp    near ptr 0x004C2C6A;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C2C7D;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C2D0F;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C2D1B;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C2D20;
	__asm        jmp    near ptr 0x004C2D25;
	__asm        jmp    near ptr 0x004C2D2A;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C2D45;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C2D86;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C2D8B;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C2D9C;
	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C2DB0;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x004C2DD2;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C2DD2;
	__asm        jmp    near ptr 0x004C2DD7;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C2E34;
	__asm        jmp    near ptr 0x004C2E39;
	__asm        jmp    near ptr 0x004C2E3E;
// LINE 1819:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1820:
	__asm        jmp    near ptr 0x004C2E51;
}

// FUNCTION: COPTER_D 0x004c2e56
void GameModeInventoryData::GameModeInventoryData() {
	__asm        mov    ecx, this;
	__asm        call   GameModeCoreData::GameModeCoreData;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::CommandSystem;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923DC;
// LINE 1833:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1834:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::SetCommandsToDefaults;
// LINE 1835:
	__asm        jmp    near ptr 0x004C2E95;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004c2e9d
int32_t GameModeInventoryData::CreateAllSurfaces() {
// LINE 1844:
	__asm        push   0x1E2;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C2F0D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004C2EE1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004C2EE8;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        push   0x837;
	__asm        mov    ecx, [ebp-4];
	__asm        call   InventoryWindow::InventoryWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x004C2F17;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1845:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 1846:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::CreatePalette;
// LINE 1847:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004C2F3A;
// LINE 1848:
}

// FUNCTION: COPTER_D 0x004c2f3f
void GameModeInventoryData::DestroyAllSurfaces() {
// LINE 1854:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x004C2F73;
// LINE 1855:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x6C];
// LINE 1856:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1858:
	__asm        jmp    near ptr 0x004C2F78;
}

// FUNCTION: COPTER_D 0x004c2f7d
void GameModeInventoryData::Sleep() {
// LINE 1865:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1866:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        jmp    near ptr 0x004C2FA7;
// LINE 1867:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
// LINE 1868:
	__asm        jmp    near ptr 0x004C2FBD;
}

// FUNCTION: COPTER_D 0x004c2fc2
void GameModeInventoryData::Awake() {
// LINE 1874:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1875:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004C302B;
// LINE 1876:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 1878:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x70];
// LINE 1879:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::UsePalette;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-4], eax;
// LINE 1880:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x004C302B;
// LINE 1882:
	__asm        jmp    near ptr 0x004C3030;
}

// FUNCTION: COPTER_D 0x004c3035
void GameModeInventoryData::CreatePalette() {
// LINE 1889:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004C30AC;
// LINE 1890:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004C30A2;
	__asm        mov    dword ptr [ebp-8], 0x100;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        dec    dword ptr [ebp-8];
	__asm        js     near ptr 0x004C308F;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x004C3075;
	__asm        jmp    near ptr 0x004C3094;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004C30AC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1892:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   InventoryWindow::ReadPalette;
// LINE 1893:
	__asm        jmp    near ptr 0x004C30C3;
}

// FUNCTION: COPTER_D 0x004c30c8
void GameModeInventoryData::UsePalette() {
// LINE 1900:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x74];
// LINE 1901:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ds:[0x60480C], eax;
// LINE 1902:
	__asm        mov    dword ptr ds:[0x604810], 0x100;
// LINE 1903:
	__asm        mov    dword ptr ds:[0x604814], 0;
// LINE 1904:
	__asm        jmp    near ptr 0x004C3116;
}

// FUNCTION: COPTER_D 0x004c311b
void GameModeInventoryData::Shutdown() {
// LINE 1911:
	__asm        mov    ecx, this;
	__asm        call   GameModeInventoryData::DestroyAllSurfaces;
// LINE 1912:
	__asm        jmp    near ptr 0x004C3134;
}

// FUNCTION: COPTER_D 0x004c3139
void GameModeInventoryData::SetCommandsToDefaults() {
	struct Shortcut tempShortcut;

// LINE 1922:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004C3165;
	__asm        jmp    near ptr 0x004C316A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004C3186;
	__asm        jmp    near ptr 0x004C318B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        cmp    [ebp-0xF4], eax;
	__asm        jne    near ptr 0x004C31B9;
	__asm        jmp    near ptr 0x004C31D0;
	__asm        jmp    near ptr 0x004C31B9;
	__asm        jmp    near ptr 0x004C31CB;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        jne    near ptr 0x004C31D0;
	__asm        jmp    near ptr 0x004C31D5;
	__asm        jmp    near ptr 0x004C3287;
	__asm        jmp    near ptr 0x004C31E7;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x004C3287;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF4], eax;
	__asm        jmp    near ptr 0x004C3206;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x004C3217;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004C324F;
	__asm        jmp    near ptr 0x004C3254;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    ecx, [ebp-0xEC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    ds:[0x597224], eax;
	__asm        jmp    near ptr 0x004C3271;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xF4];
	__asm        jmp    near ptr 0x004C3282;
	__asm        jmp    near ptr 0x004C319D;
	__asm        jmp    near ptr 0x004C328C;
// LINE 1924:
	__asm        mov    tempShortcut.lDeviceID, 0;
// LINE 1926:
	__asm        mov    tempShortcut.lCommand, 0;
// LINE 1927:
	__asm        mov    tempShortcut.lKey, 0;
// LINE 1928:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1929:
	__asm        mov    tempShortcut.lPush, 0;
// LINE 1930:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1931:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004C32D0;
	__asm        jmp    near ptr 0x004C32D5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C3307;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C3447;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C3432;
	__asm        jmp    near ptr 0x004C331D;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    dword ptr [ebp-0x50], 0x80;
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x54], 1;
	__asm        lea    eax, [ebp-0x54];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C3361;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C3367;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004C336C;
	__asm        jmp    near ptr 0x004C3371;
	__asm        jmp    near ptr 0x004C3376;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004C3383;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0x64], 0x80;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C33EB;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C33F1;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004C33F6;
	__asm        jmp    near ptr 0x004C33FB;
	__asm        jmp    near ptr 0x004C3400;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C3418;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x44], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C3447;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x48], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004C344C;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004C3457;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004C3465;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004C3481;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x3C];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C3481;
	__asm        jmp    near ptr 0x004C3486;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xF4], 1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004C34C6;
	__asm        jmp    near ptr 0x004C34CB;
	__asm        jmp    near ptr 0x004C34D0;
// LINE 1933:
	__asm        mov    tempShortcut.lCommand, 1;
// LINE 1934:
	__asm        mov    tempShortcut.lKey, 0x1B;
// LINE 1935:
	__asm        mov    tempShortcut.lModifiers, 0;
// LINE 1936:
	__asm        mov    tempShortcut.lPush, 1;
// LINE 1937:
	__asm        mov    tempShortcut.lIgnoreModifiers, 0;
// LINE 1938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x004C3516;
	__asm        jmp    near ptr 0x004C351B;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr ds:[0x597224], 0;
	__asm        je     near ptr 0x004C355C;
	__asm        mov    eax, ds:[0x597224];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x597224], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C370E;
	__asm        mov    eax, ds:[0x59721C];
	__asm        cmp    ds:[0x597220], eax;
	__asm        jne    near ptr 0x004C36F0;
	__asm        jmp    near ptr 0x004C3572;
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    dword ptr [ebp-0xA8], 0x80;
	__asm        lea    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    dword ptr [ebp-0xAC], 1;
	__asm        lea    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C35D7;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C35E3;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB8], eax;
	__asm        jmp    near ptr 0x004C35E8;
	__asm        jmp    near ptr 0x004C35ED;
	__asm        jmp    near ptr 0x004C35F2;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x004C3605;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ds:[0x597228], eax;
	__asm        mov    eax, ds:[0x597228];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x597220], eax;
	__asm        mov    dword ptr [ebp-0xBC], 0x80;
	__asm        lea    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    dword ptr [ebp-0xC0], 1;
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    ecx, [ebp-0xC4];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004C3697;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C36A3;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xCC], eax;
	__asm        jmp    near ptr 0x004C36A8;
	__asm        jmp    near ptr 0x004C36AD;
	__asm        jmp    near ptr 0x004C36B2;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        add    eax, ds:[0x597220];
	__asm        mov    ds:[0x59721C], eax;
	__asm        jmp    near ptr 0x004C36CD;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0x9C], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C370E;
	__asm        mov    eax, ds:[0x597220];
	__asm        mov    [ebp-0xA0], eax;
	__asm        add    dword ptr ds:[0x597220], 0x20;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x004C3713;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004C3724;
	__asm        mov    eax, [ebp-0x90];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x004C3738;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x004C375A;
	__asm        lea    esi, tempShortcut.lDeviceID;
	__asm        mov    edi, [ebp-0x94];
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        jmp    near ptr 0x004C375A;
	__asm        jmp    near ptr 0x004C375F;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xF4];
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004C37BC;
	__asm        jmp    near ptr 0x004C37C1;
	__asm        jmp    near ptr 0x004C37C6;
// LINE 1940:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18;
	__asm        call   CommandSystem::SetUpCommandArraysFromShortcuts;
// LINE 1941:
	__asm        jmp    near ptr 0x004C37D9;
}



// Contribution: 1:000c27e0-000c2818 Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c37e0
// GameModeCoreData::`scalar deleting destructor'



// Contribution: 1:000c2820-000c285d Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3820
// GameModeMainMenuData::`scalar deleting destructor'



// Contribution: 1:000c2860-000c289d Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3860
// GameModePickCareerCityData::`scalar deleting destructor'



// Contribution: 1:000c28a0-000c2a9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c38a0
// GameModePlayData::`scalar deleting destructor'



// Contribution: 1:000c2aa0-000c2c9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3aa0
// GameModeHangarData::`scalar deleting destructor'



// Contribution: 1:000c2ca0-000c2e9e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3ca0
// GameModeCatalogData::`scalar deleting destructor'



// Contribution: 1:000c2ea0-000c309e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c3ea0
// GameModeMissionLogData::`scalar deleting destructor'



// Contribution: 1:000c30a0-000c329e Module: 1, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004c40a0
// GameModeInventoryData::`scalar deleting destructor'



// Contribution: 2:000033c0-000033c3 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923c0
// ??_7GameModeCoreData@@6B@


// Contribution: 2:000033c4-000033c7 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923c4
// ??_7GameModeMainMenuData@@6B@


// Contribution: 2:000033c8-000033cb Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923c8
// ??_7GameModePickCareerCityData@@6B@


// Contribution: 2:000033cc-000033cf Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923cc
// ??_7GameModePlayData@@6B@


// Contribution: 2:000033d0-000033d3 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923d0
// ??_7GameModeHangarData@@6B@


// Contribution: 2:000033d4-000033d7 Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923d4
// ??_7GameModeCatalogData@@6B@


// Contribution: 2:000033d8-000033db Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923d8
// ??_7GameModeMissionLogData@@6B@


// Contribution: 2:000033dc-000033df Module: 1, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923dc
// ??_7GameModeInventoryData@@6B@


// Contribution: 3:00003ec4-00003fad Module: 1, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059aec4
// SZ_VR_APP_PALETTE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aec8
// SZ_VR_APP_PALETTE_CHUNK_TYPE
// GLOBAL: COPTER_D 0x0059aecc
// SZ_MAIN_MENU_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aed0
// SZ_CAREER_PALETTE_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aed4
// SZ_PANEL0_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aed8
// SZ_PANEL1_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aedc
// SZ_PANEL2_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aee0
// SZ_PANEL3_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aee4
// SZ_PANEL4_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aee8
// SZ_PANEL5_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aeec
// SZ_PANEL6_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aef0
// SZ_FLAP0_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aef4
// SZ_FLAP1_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aef8
// SZ_FLAP2_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059aefc
// SZ_FLAP3_IMAGE_FILE_NAME
