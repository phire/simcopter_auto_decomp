// Module: swave.obj
// Source: C:\Copter\source\sparkal\swave.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: void * __ptr32;

// Type: struct tWAVEFORMATEX (forward reference);

// Type: struct _MMCKINFO (forward reference);

// Type: unsigned short;

// Type: struct pcmwaveformat_tag;
struct pcmwaveformat_tag{
	struct waveformat_tag wf;
	unsigned short wBitsPerSample;
};

// Type: struct _MMCKINFO;
struct _MMCKINFO{
	unsigned long ckid;
	unsigned long cksize;
	unsigned long fccType;
	unsigned long dwDataOffset;
	unsigned long dwFlags;
};

// Type: int32_t;

// Type: uint32_t;

// Type: unsigned char *;

// Type: uint32_t *;

// Type: struct _MMIOINFO;
struct _MMIOINFO{
	unsigned long dwFlags;
	unsigned long fccIOProc;
	long (*pIOProc)(char *, uint32_t, long, long);
	uint32_t wErrorRet;
	void * __ptr32 htask;
	long cchBuffer;
	char * pchBuffer;
	char * pchNext;
	char * pchEndRead;
	char * pchEndWrite;
	long lBufOffset;
	long lDiskOffset;
	unsigned long adwInfo[3];
	unsigned long dwReserved1;
	unsigned long dwReserved2;
	void * __ptr32 hmmio;
};



// Contribution: 1:0008dbb0-0008e11e Module: 25, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048ebb0
int32_t WaveOpenFile(char * pszFileName, void * __ptr32* phmmioIn, struct tWAVEFORMATEX* pwfxInfo, struct _MMCKINFO* pckInRIFF) {
	unsigned short cbExtraAlloc;
	struct pcmwaveformat_tag pcmWaveFormat;
	void * __ptr32 hmmioIn;
	struct _MMCKINFO ckIn;
	int32_t nError;

// LINE 49:
	__asm        mov    hmmioIn, 0;
// LINE 53:
	__asm        mov    nError, 0;
// LINE 61:
	__asm        push   0x10000;
	__asm        push   0;
	__asm        mov    eax, pszFileName;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F4];
	__asm        mov    hmmioIn, eax;
	__asm        cmp    hmmioIn, 0;
	__asm        jne    _T46;
// LINE 62:
	__asm        mov    nError, 0xE100;
// LINE 63:
	__asm        jmp    _T1ff;

	__asm        jmp    _T1aa;
// LINE 67:
_T46:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T6f;
// LINE 68:
	__asm        jmp    _T1fa;

	__asm        jmp    _T1aa;
// LINE 70:
_T6f:
	__asm        mov    eax, pckInRIFF;
	__asm        cmp    dword ptr [eax], 0x46464952;
	__asm        jne    _T8e;

	__asm        mov    eax, pckInRIFF;
	__asm        cmp    dword ptr [eax+8], 0x45564157;
	__asm        je     _T9f;
// LINE 71:
_T8e:
	__asm        mov    nError, 0xE101;
// LINE 72:
	__asm        jmp    _T1f5;

	__asm        jmp    _T1aa;
// LINE 76:
_T9f:
	__asm        mov    ckIn.ckid, 0x20746D66;
// LINE 77:
	__asm        push   0x10;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _Td1;
// LINE 78:
	__asm        jmp    _T1f0;

	__asm        jmp    _T1aa;
// LINE 83:
_Td1:
	__asm        cmp    ckIn.cksize, 0x10;
	__asm        jae    _Tec;
// LINE 84:
	__asm        mov    nError, 0xE101;
// LINE 85:
	__asm        jmp    _T1eb;

	__asm        jmp    _T1aa;
// LINE 89:
_Tec:
	__asm        push   0x10;
	__asm        lea    eax, pcmWaveFormat.wf.wFormatTag;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F8];
	__asm        cmp    eax, 0x10;
	__asm        je     _T116;
// LINE 90:
	__asm        mov    nError, 0xE102;
// LINE 91:
	__asm        jmp    _T1e6;

	__asm        jmp    _T1aa;
// LINE 98:
_T116:
	__asm        mov    eax, reinterpret_cast<uint32_t>(pcmWaveFormat.wf.wFormatTag);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 1;
	__asm        jne    _T132;
// LINE 99:
	__asm        mov    cbExtraAlloc, 0;
// LINE 101:
	__asm        jmp    _T15c;
// LINE 103:
_T132:
	__asm        push   2;
	__asm        lea    eax, cbExtraAlloc;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F8];
	__asm        cmp    eax, 2;
	__asm        je     _T15c;
// LINE 104:
	__asm        mov    nError, 0xE102;
// LINE 105:
	__asm        jmp    _T1e1;

	__asm        jmp    _T1aa;
// LINE 110:
_T15c:
	__asm        push   0x10;
	__asm        lea    eax, pcmWaveFormat.wf.wFormatTag;
	__asm        push   eax;
	__asm        mov    eax, pwfxInfo;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 111:
	__asm        mov    ax, cbExtraAlloc;
	__asm        mov    ecx, pwfxInfo;
	__asm        mov    [ecx+0x10], ax;
// LINE 126:
	__asm        push   0;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38FC];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T1a0;
// LINE 127:
	__asm        jmp    _T1dc;

	__asm        jmp    _T1aa;
// LINE 129:
_T1a0:
	__asm        jmp    _T1d7;

	__asm        jmp    _T1c7;
// LINE 132:
ERROR_READING_WAVE:
_T1aa:
	__asm        cmp    hmmioIn, 0;
	__asm        je     _T1c7;
// LINE 133:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 134:
	__asm        mov    hmmioIn, 0;
// LINE 138:
END_OF_ROUTINE:
_T1c7:
	__asm        mov    eax, hmmioIn;
	__asm        mov    ecx, phmmioIn;
	__asm        mov    [ecx], eax;
// LINE 140:
	__asm        mov    eax, nError;
	__asm        jmp    _T204;
// LINE 141:
_T1d7:
	__asm        jmp    _T1c7;

_T1dc:
	__asm        jmp    _T1aa;

_T1e1:
	__asm        jmp    _T1aa;

_T1e6:
	__asm        jmp    _T1aa;

_T1eb:
	__asm        jmp    _T1aa;

_T1f0:
	__asm        jmp    _T1aa;

_T1f5:
	__asm        jmp    _T1aa;

_T1fa:
	__asm        jmp    _T1aa;

_T1ff:
	__asm        jmp    _T1aa;
}

// FUNCTION: COPTER_D 0x0048edb9
int32_t WaveStartDataRead(void * __ptr32* phmmioIn, struct _MMCKINFO* pckIn, struct _MMCKINFO* pckInRIFF) {
	int32_t nError;

// LINE 160:
	__asm        push   0;
	__asm        mov    eax, pckInRIFF;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, phmmioIn;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0xFFFFFFFF;
	__asm        jne    _T38;
// LINE 161:
	__asm        jmp    _T62;

	__asm        jmp    _T5a;
// LINE 164:
_T38:
	__asm        mov    eax, pckIn;
	__asm        mov    dword ptr [eax], 0x61746164;
// LINE 165:
	__asm        push   0x10;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        mov    eax, pckIn;
	__asm        push   eax;
	__asm        mov    eax, phmmioIn;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
// LINE 168:
ERROR_READING_WAVE:
_T5a:
	__asm        mov    eax, nError;
	__asm        jmp    _T67;
// LINE 169:
_T62:
	__asm        jmp    _T5a;
}

// FUNCTION: COPTER_D 0x0048ee25
int32_t WaveReadFile(void * __ptr32 hmmioIn, uint32_t cbRead, unsigned char * pbDest, struct _MMCKINFO* pckIn, uint32_t * cbActualRead) {
	struct _MMIOINFO mmioinfoIn;
	uint32_t cT;
	int32_t nError;
	unsigned char * tempBYTEPointerToFoolCrappyMicrosoftCompiler;

// LINE 197:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38E8];
	__asm        mov    nError, eax;
// LINE 199:
	__asm        cmp    nError, 0;
	__asm        je     _T30;
// LINE 200:
	__asm        jmp    _T140;

	__asm        jmp    _T11b;
// LINE 203:
_T30:
	__asm        mov    eax, pckIn;
	__asm        mov    ecx, cbRead;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T48;
// LINE 204:
	__asm        mov    eax, pckIn;
	__asm        mov    eax, [eax+4];
	__asm        mov    cbRead, eax;
// LINE 206:
_T48:
	__asm        xor    eax, eax;
	__asm        sub    eax, cbRead;
	__asm        neg    eax;
	__asm        mov    ecx, pckIn;
	__asm        sub    [ecx+4], eax;
// LINE 208:
	__asm        mov    cT, 0;
	__asm        jmp    _T64;

_T61:
	__asm        inc    cT;
_T64:
	__asm        mov    eax, cbRead;
	__asm        cmp    cT, eax;
	__asm        jae    _Te2;
// LINE 210:
	__asm        mov    eax, mmioinfoIn.pchEndRead;
	__asm        cmp    mmioinfoIn.pchNext, eax;
	__asm        jne    _Tc0;
// LINE 211:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38EC];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _Ta3;
// LINE 212:
	__asm        jmp    _T13b;

	__asm        jmp    _T11b;
// LINE 214:
_Ta3:
	__asm        mov    eax, mmioinfoIn.pchEndRead;
	__asm        cmp    mmioinfoIn.pchNext, eax;
	__asm        jne    _Tc0;
// LINE 215:
	__asm        mov    nError, 0xE103;
// LINE 216:
	__asm        jmp    _T136;

	__asm        jmp    _T11b;
// LINE 222:
_Tc0:
	__asm        mov    eax, mmioinfoIn.pchNext;
	__asm        mov    al, [eax];
	__asm        mov    ecx, cT;
	__asm        mov    edx, pbDest;
	__asm        mov    [ecx+edx], al;
// LINE 223:
	__asm        mov    eax, mmioinfoIn.pchNext;
	__asm        mov    tempBYTEPointerToFoolCrappyMicrosoftCompiler, eax;
// LINE 224:
	__asm        inc    tempBYTEPointerToFoolCrappyMicrosoftCompiler;
// LINE 225:
	__asm        mov    eax, tempBYTEPointerToFoolCrappyMicrosoftCompiler;
	__asm        mov    mmioinfoIn.pchNext, eax;
// LINE 226:
	__asm        jmp    _T61;
// LINE 228:
_Te2:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F0];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T109;
// LINE 229:
	__asm        jmp    _T131;

	__asm        jmp    _T11b;
// LINE 231:
_T109:
	__asm        mov    eax, cbRead;
	__asm        mov    ecx, cbActualRead;
	__asm        mov    [ecx], eax;
// LINE 232:
	__asm        jmp    _T12c;

	__asm        jmp    _T124;
// LINE 235:
ERROR_CANNOT_READ:
_T11b:
	__asm        mov    eax, cbActualRead;
	__asm        mov    dword ptr [eax], 0;
// LINE 238:
FINISHED_READING:
_T124:
	__asm        mov    eax, nError;
	__asm        jmp    _T145;
// LINE 239:
_T12c:
	__asm        jmp    _T124;

_T131:
	__asm        jmp    _T11b;

_T136:
	__asm        jmp    _T11b;

_T13b:
	__asm        jmp    _T11b;

_T140:
	__asm        jmp    _T11b;
}

// FUNCTION: COPTER_D 0x0048ef6f
int32_t WaveCloseReadFile(void * __ptr32* phmmio) {
// LINE 252:
	__asm        mov    eax, phmmio;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T29;
// LINE 253:
	__asm        push   0;
	__asm        mov    eax, phmmio;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 254:
	__asm        mov    eax, phmmio;
	__asm        mov    dword ptr [eax], 0;
// LINE 257:
_T29:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048EF9F;
// LINE 258:
}

// FUNCTION: COPTER_D 0x0048efa4
int32_t WaveLoadFile(char * pszFileName, uint32_t * cbSize, struct tWAVEFORMATEX* pwfxInfo, unsigned char ** ppbData) {
	uint32_t cbActualRead;
	void * __ptr32 hmmioIn;
	struct _MMCKINFO ckInRiff;
	struct _MMCKINFO ckIn;
	int32_t nError;

// LINE 285:
	__asm        mov    eax, ppbData;
	__asm        mov    dword ptr [eax], 0;
// LINE 286:
	__asm        mov    eax, cbSize;
	__asm        mov    dword ptr [eax], 0;
// LINE 288:
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        mov    eax, pwfxInfo;
	__asm        push   eax;
	__asm        lea    eax, hmmioIn;
	__asm        push   eax;
	__asm        mov    eax, pszFileName;
	__asm        push   eax;
	__asm        call   WaveOpenFile;
	__asm        add    esp, 0x10;
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T4a;
// LINE 289:
	__asm        jmp    _T171;

	__asm        jmp    _T112;
// LINE 294:
_T4a:
	__asm        push   0;
	__asm        mov    eax, ckInRiff.dwDataOffset;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T70;
// LINE 295:
	__asm        jmp    _T16c;

	__asm        jmp    _T112;
// LINE 298:
_T70:
	__asm        mov    ckIn.ckid, 0x61746164;
// LINE 299:
	__asm        push   0x10;
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        test   eax, eax;
	__asm        je     _T9d;
// LINE 300:
	__asm        jmp    _T167;

	__asm        jmp    _T112;
// LINE 303:
_T9d:
	__asm        mov    eax, ckIn.cksize;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, ppbData;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, ppbData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _Tcb;
// LINE 304:
	__asm        mov    nError, 0xE000;
// LINE 305:
	__asm        jmp    _T162;

	__asm        jmp    _T112;
// LINE 311:
_Tcb:
	__asm        lea    eax, cbActualRead;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, ppbData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, ckIn.cksize;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T100;
// LINE 312:
	__asm        jmp    _T15d;

	__asm        jmp    _T112;
// LINE 315:
_T100:
	__asm        mov    eax, cbActualRead;
	__asm        mov    ecx, cbSize;
	__asm        mov    [ecx], eax;
// LINE 316:
	__asm        jmp    _T158;

	__asm        jmp    _T133;
// LINE 319:
ERROR_LOADING:
_T112:
	__asm        mov    eax, ppbData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T133;
// LINE 320:
	__asm        mov    eax, ppbData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
// LINE 321:
	__asm        mov    eax, ppbData;
	__asm        mov    dword ptr [eax], 0;
// LINE 326:
DONE_LOADING:
_T133:
	__asm        cmp    hmmioIn, 0;
	__asm        je     _T150;
// LINE 327:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 328:
	__asm        mov    hmmioIn, 0;
// LINE 331:
_T150:
	__asm        mov    eax, nError;
	__asm        jmp    _T176;
// LINE 332:
_T158:
	__asm        jmp    _T133;

_T15d:
	__asm        jmp    _T112;

_T162:
	__asm        jmp    _T112;

_T167:
	__asm        jmp    _T112;

_T16c:
	__asm        jmp    _T112;

_T171:
	__asm        jmp    _T112;
}

