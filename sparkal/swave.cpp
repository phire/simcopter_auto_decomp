// Module: swave.obj
// Source: C:\Copter\source\sparkal\swave.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: void * __ptr32;

// Type: /*packed*/ struct tWAVEFORMATEX (forward reference);
struct tWAVEFORMATEX{ // packed(0x12 bytes) TI: 0x17d1
	/*+0x0*/   unsigned short wFormatTag; // 0x2 bytes
	/*+0x2*/   unsigned short nChannels; // 0x2 bytes
	/*+0x4*/   unsigned long nSamplesPerSec;
	/*+0x8*/   unsigned long nAvgBytesPerSec;
	/*+0xc*/   unsigned short nBlockAlign; // 0x2 bytes
	/*+0xe*/   unsigned short wBitsPerSample; // 0x2 bytes
	/*+0x10*/  unsigned short cbSize; // 0x2 bytes
};

// Type: /*packed*/ struct _MMCKINFO (forward reference);
struct _MMCKINFO{ // packed(0x14 bytes) TI: 0x1da7
	/*+0x0*/   unsigned long ckid;
	/*+0x4*/   unsigned long cksize;
	/*+0x8*/   unsigned long fccType;
	/*+0xc*/   unsigned long dwDataOffset;
	/*+0x10*/  unsigned long dwFlags;
};

// Type: unsigned short;

// Type: /*packed*/ struct pcmwaveformat_tag;
struct pcmwaveformat_tag{ // packed(0x10 bytes) TI: 0x23e0
	/*+0x0*/   /*packed*/ struct waveformat_tag wf; // 0xe bytes
	/*+0xe*/   unsigned short wBitsPerSample; // 0x2 bytes
};

// Type: /*packed*/ struct _MMCKINFO;
struct _MMCKINFO{ // packed(0x14 bytes) TI: 0x1da7
	/*+0x0*/   unsigned long ckid;
	/*+0x4*/   unsigned long cksize;
	/*+0x8*/   unsigned long fccType;
	/*+0xc*/   unsigned long dwDataOffset;
	/*+0x10*/  unsigned long dwFlags;
};

// Type: int32_t;

// Type: uint32_t;

// Type: unsigned char *;

// Type: uint32_t *;

// Type: /*packed*/ struct _MMIOINFO;
struct _MMIOINFO{ // packed(0x48 bytes) TI: 0x23e7
	/*+0x0*/   unsigned long dwFlags;
	/*+0x4*/   unsigned long fccIOProc;
	/*+0x8*/   long (*pIOProc)(char *, uint32_t, long, long);
	/*+0xc*/   uint32_t wErrorRet;
	/*+0x10*/  void * __ptr32 htask;
	/*+0x14*/  long cchBuffer;
	/*+0x18*/  char * pchBuffer;
	/*+0x1c*/  char * pchNext;
	/*+0x20*/  char * pchEndRead;
	/*+0x24*/  char * pchEndWrite;
	/*+0x28*/  long lBufOffset;
	/*+0x2c*/  long lDiskOffset;
	/*+0x30*/  unsigned long adwInfo[3]; // 0xc bytes
	/*+0x3c*/  unsigned long dwReserved1;
	/*+0x40*/  unsigned long dwReserved2;
	/*+0x44*/  void * __ptr32 hmmio;
};



// Contribution: 1:0008dbb0-0008e11e Module: 25, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048ebb0
int32_t WaveOpenFile(char * pszFileName, void * __ptr32 *phmmioIn, /*packed*/ struct tWAVEFORMATEX *pwfxInfo, /*packed*/ struct _MMCKINFO *pckInRIFF) {
	/*bp-0x4*/   int32_t nError;
	/*bp-0x18*/  /*packed*/ struct _MMCKINFO ckIn; // 0x14 bytes
	/*bp-0x1c*/  void * __ptr32 hmmioIn;
	/*bp-0x2c*/  /*packed*/ struct pcmwaveformat_tag pcmWaveFormat; // 0x10 bytes
	/*bp-0x30*/  unsigned short cbExtraAlloc;

// LINE 49:
	hmmioIn = 0x0;
// LINE 53:
	nError = 0x0;
// LINE 61:
	__asm        push   0x10000;
	__asm        push   0;
	__asm        mov    eax, pszFileName;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F4];
	__asm        mov    hmmioIn, eax;
	__asm        cmp    hmmioIn, 0;
	__asm        jne    _T46;
// LINE 62:
	nError = 0xe100;
// LINE 63:
	__asm        jmp    _T1ff;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 67:
_T46:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T6f;
// LINE 68:
	__asm        jmp    _T1fa;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 70:
_T6f:
	__asm        mov    eax, pckInRIFF;
	__asm        cmp    dword ptr [eax], 0x46464952;
	__asm        jne    _T8e;

	__asm        mov    eax, pckInRIFF;
	__asm        cmp    dword ptr [eax+8], 0x45564157;
	__asm        je     _T9f;
// LINE 71:
_T8e:
	nError = 0xe101;
// LINE 72:
	__asm        jmp    _T1f5;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 76:
_T9f:
	ckIn.ckid = 0x20746d66;
// LINE 77:
	__asm        push   0x10;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _Td1;
// LINE 78:
	__asm        jmp    _T1f0;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 83:
_Td1:
	__asm        cmp    ckIn.cksize, 0x10;
	__asm        jae    _Tec;
// LINE 84:
	nError = 0xe101;
// LINE 85:
	__asm        jmp    _T1eb;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 89:
_Tec:
	__asm        push   0x10;
	__asm        lea    eax, pcmWaveFormat.wf.wFormatTag;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F8];
	__asm        cmp    eax, 0x10;
	__asm        je     _T116;
// LINE 90:
	nError = 0xe102;
// LINE 91:
	__asm        jmp    _T1e6;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 98:
_T116:
	__asm        mov    eax, reinterpret_cast<uint32_t>(pcmWaveFormat.wf.wFormatTag);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 1;
	__asm        jne    _T132;
// LINE 99:
	cbExtraAlloc = 0x0;
// LINE 101:
	__asm        jmp    _T15c;
// LINE 103:
_T132:
	__asm        push   2;
	__asm        lea    eax, cbExtraAlloc;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F8];
	__asm        cmp    eax, 2;
	__asm        je     _T15c;
// LINE 104:
	nError = 0xe102;
// LINE 105:
	__asm        jmp    _T1e1;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 110:
_T15c:
	__asm        push   0x10;
	__asm        lea    eax, pcmWaveFormat.wf.wFormatTag;
	__asm        push   eax;
	__asm        mov    eax, pwfxInfo;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 111:
	pwfxInfo->cbSize = cbExtraAlloc;
// LINE 126:
	__asm        push   0;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38FC];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T1a0;
// LINE 127:
	__asm        jmp    _T1dc;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 129:
_T1a0:
	__asm        jmp    _T1d7;

	__asm        jmp    END_OF_ROUTINE;
// LINE 132:
ERROR_READING_WAVE:
	__asm        cmp    hmmioIn, 0;
	__asm        je     END_OF_ROUTINE;
// LINE 133:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 134:
	hmmioIn = 0x0;
// LINE 138:
END_OF_ROUTINE:
	phmmioIn-> = hmmioIn;
// LINE 140:
	__asm        mov    eax, nError;
	__asm        jmp    _T204;
// LINE 141:
_T1d7:
	__asm        jmp    END_OF_ROUTINE;
_T1dc:
	__asm        jmp    ERROR_READING_WAVE;
_T1e1:
	__asm        jmp    ERROR_READING_WAVE;
_T1e6:
	__asm        jmp    ERROR_READING_WAVE;
_T1eb:
	__asm        jmp    ERROR_READING_WAVE;
_T1f0:
	__asm        jmp    ERROR_READING_WAVE;
_T1f5:
	__asm        jmp    ERROR_READING_WAVE;
_T1fa:
	__asm        jmp    ERROR_READING_WAVE;
_T1ff:
	__asm        jmp    ERROR_READING_WAVE;
_T204:
}

// FUNCTION: COPTER_D 0x0048edb9
int32_t WaveStartDataRead(void * __ptr32 *phmmioIn, /*packed*/ struct _MMCKINFO *pckIn, /*packed*/ struct _MMCKINFO *pckInRIFF) {
	/*bp-0x4*/   int32_t nError;

// LINE 160:
	__asm        push   0;
	__asm        mov    eax, pckInRIFF;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, phmmioIn;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0xFFFFFFFF;
	__asm        jne    _T38;
// LINE 161:
	__asm        jmp    _T62;

	__asm        jmp    ERROR_READING_WAVE;
// LINE 164:
_T38:
	pckIn->ckid = 0x61746164;
// LINE 165:
	__asm        push   0x10;
	__asm        mov    eax, pckInRIFF;
	__asm        push   eax;
	__asm        mov    eax, pckIn;
	__asm        push   eax;
	__asm        mov    eax, phmmioIn;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        mov    nError, eax;
// LINE 168:
ERROR_READING_WAVE:
	__asm        mov    eax, nError;
	__asm        jmp    _T67;
// LINE 169:
_T62:
	__asm        jmp    ERROR_READING_WAVE;
_T67:
}

// FUNCTION: COPTER_D 0x0048ee25
int32_t WaveReadFile(void * __ptr32 hmmioIn, uint32_t cbRead, unsigned char * pbDest, /*packed*/ struct _MMCKINFO *pckIn, uint32_t * cbActualRead) {
	/*bp-0x4*/   unsigned char * tempBYTEPointerToFoolCrappyMicrosoftCompiler;
	/*bp-0x8*/   int32_t nError;
	/*bp-0xc*/   uint32_t cT;
	/*bp-0x54*/  /*packed*/ struct _MMIOINFO mmioinfoIn; // 0x48 bytes

// LINE 197:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38E8];
	__asm        mov    nError, eax;
// LINE 199:
	__asm        cmp    nError, 0;
	__asm        je     _T30;
// LINE 200:
	__asm        jmp    _T140;

	__asm        jmp    ERROR_CANNOT_READ;
// LINE 203:
_T30:
	__asm        mov    eax, pckIn;
	__asm        mov    ecx, cbRead;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T48;
// LINE 204:
	cbRead = pckIn->cksize;
// LINE 206:
_T48:
	__asm        xor    eax, eax;
	__asm        sub    eax, cbRead;
	__asm        neg    eax;
	__asm        mov    ecx, pckIn;
	__asm        sub    [ecx+4], eax;
// LINE 208:
	__asm        mov    cT, 0;
	__asm        jmp    _T64;
_T61:
	cT++;
_T64:
	__asm        mov    eax, cbRead;
	__asm        cmp    cT, eax;
	__asm        jae    _Te2;
// LINE 210:
	__asm        mov    eax, mmioinfoIn.pchEndRead;
	__asm        cmp    mmioinfoIn.pchNext, eax;
	__asm        jne    _Tc0;
// LINE 211:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38EC];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _Ta3;
// LINE 212:
	__asm        jmp    _T13b;

	__asm        jmp    ERROR_CANNOT_READ;
// LINE 214:
_Ta3:
	__asm        mov    eax, mmioinfoIn.pchEndRead;
	__asm        cmp    mmioinfoIn.pchNext, eax;
	__asm        jne    _Tc0;
// LINE 215:
	nError = 0xe103;
// LINE 216:
	__asm        jmp    _T136;

	__asm        jmp    ERROR_CANNOT_READ;
// LINE 222:
_Tc0:
	__asm        mov    eax, mmioinfoIn.pchNext;
	__asm        mov    al, [eax];
	__asm        mov    ecx, cT;
	__asm        mov    edx, pbDest;
	__asm        mov    [ecx+edx], al;
// LINE 223:
	tempBYTEPointerToFoolCrappyMicrosoftCompiler = mmioinfoIn.pchNext;
// LINE 224:
	tempBYTEPointerToFoolCrappyMicrosoftCompiler++;
// LINE 225:
	mmioinfoIn.pchNext = tempBYTEPointerToFoolCrappyMicrosoftCompiler;
// LINE 226:
	__asm        jmp    _T61;
// LINE 228:
_Te2:
	__asm        push   0;
	__asm        lea    eax, mmioinfoIn.dwFlags;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38F0];
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T109;
// LINE 229:
	__asm        jmp    _T131;

	__asm        jmp    ERROR_CANNOT_READ;
// LINE 231:
_T109:
	cbActualRead[0] = cbRead;
// LINE 232:
	__asm        jmp    _T12c;

	__asm        jmp    FINISHED_READING;
// LINE 235:
ERROR_CANNOT_READ:
	cbActualRead[0] = 0x0;
// LINE 238:
FINISHED_READING:
	__asm        mov    eax, nError;
	__asm        jmp    _T145;
// LINE 239:
_T12c:
	__asm        jmp    FINISHED_READING;
_T131:
	__asm        jmp    ERROR_CANNOT_READ;
_T136:
	__asm        jmp    ERROR_CANNOT_READ;
_T13b:
	__asm        jmp    ERROR_CANNOT_READ;
_T140:
	__asm        jmp    ERROR_CANNOT_READ;
_T145:
}

// FUNCTION: COPTER_D 0x0048ef6f
int32_t WaveCloseReadFile(void * __ptr32 *phmmio) {
// LINE 252:
	__asm        mov    eax, phmmio;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T29;
// LINE 253:
	__asm        push   0;
	__asm        mov    eax, phmmio;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 254:
	phmmio-> = 0x0;
// LINE 257:
_T29:
	__asm        xor    eax, eax;
	__asm        jmp    _T30;
// LINE 258:
_T30:
}

// FUNCTION: COPTER_D 0x0048efa4
int32_t WaveLoadFile(char * pszFileName, uint32_t * cbSize, /*packed*/ struct tWAVEFORMATEX *pwfxInfo, unsigned char * *ppbData) {
	/*bp-0x4*/   int32_t nError;
	/*bp-0x18*/  /*packed*/ struct _MMCKINFO ckIn; // 0x14 bytes
	/*bp-0x2c*/  /*packed*/ struct _MMCKINFO ckInRiff; // 0x14 bytes
	/*bp-0x30*/  void * __ptr32 hmmioIn;
	/*bp-0x34*/  uint32_t cbActualRead;

// LINE 285:
	ppbData-> = 0x0;
// LINE 286:
	cbSize[0] = 0x0;
// LINE 288:
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        mov    eax, pwfxInfo;
	__asm        push   eax;
	__asm        lea    eax, hmmioIn;
	__asm        push   eax;
	__asm        mov    eax, pszFileName;
	__asm        push   eax;
	__asm        call   WaveOpenFile;
	__asm        add    esp, 0x10;
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T4a;
// LINE 289:
	__asm        jmp    _T171;

	__asm        jmp    ERROR_LOADING;
// LINE 294:
_T4a:
	__asm        push   0;
	__asm        mov    eax, ckInRiff.dwDataOffset;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3900];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T70;
// LINE 295:
	__asm        jmp    _T16c;

	__asm        jmp    ERROR_LOADING;
// LINE 298:
_T70:
	ckIn.ckid = 0x61746164;
// LINE 299:
	__asm        push   0x10;
	__asm        lea    eax, ckInRiff.ckid;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3904];
	__asm        test   eax, eax;
	__asm        je     _T9d;
// LINE 300:
	__asm        jmp    _T167;

	__asm        jmp    ERROR_LOADING;
// LINE 303:
_T9d:
	__asm        mov    eax, ckIn.cksize;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, ppbData;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, ppbData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _Tcb;
// LINE 304:
	nError = 0xe000;
// LINE 305:
	__asm        jmp    _T162;

	__asm        jmp    ERROR_LOADING;
// LINE 311:
_Tcb:
	__asm        lea    eax, cbActualRead;
	__asm        push   eax;
	__asm        lea    eax, ckIn.ckid;
	__asm        push   eax;
	__asm        mov    eax, ppbData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, ckIn.cksize;
	__asm        push   eax;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   WaveReadFile;
	__asm        add    esp, 0x14;
	__asm        mov    nError, eax;
	__asm        cmp    nError, 0;
	__asm        je     _T100;
// LINE 312:
	__asm        jmp    _T15d;

	__asm        jmp    ERROR_LOADING;
// LINE 315:
_T100:
	cbSize[0] = cbActualRead;
// LINE 316:
	__asm        jmp    _T158;

	__asm        jmp    DONE_LOADING;
// LINE 319:
ERROR_LOADING:
	__asm        mov    eax, ppbData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     DONE_LOADING;
// LINE 320:
	__asm        mov    eax, ppbData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
// LINE 321:
	ppbData-> = 0x0;
// LINE 326:
DONE_LOADING:
	__asm        cmp    hmmioIn, 0;
	__asm        je     _T150;
// LINE 327:
	__asm        push   0;
	__asm        mov    eax, hmmioIn;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C391C];
// LINE 328:
	hmmioIn = 0x0;
// LINE 331:
_T150:
	__asm        mov    eax, nError;
	__asm        jmp    _T176;
// LINE 332:
_T158:
	__asm        jmp    DONE_LOADING;
_T15d:
	__asm        jmp    ERROR_LOADING;
_T162:
	__asm        jmp    ERROR_LOADING;
_T167:
	__asm        jmp    ERROR_LOADING;
_T16c:
	__asm        jmp    ERROR_LOADING;
_T171:
	__asm        jmp    ERROR_LOADING;
_T176:
}

