// Module: ddbuffer.obj
// Source: C:\Copter\source\sparkal\ddbuffer.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CBackBuffer (forward reference);
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
};

// Type: void;

// Type: char *;

// Type: int32_t;

// Type: struct tagBITMAPINFOHEADER;
class tagBITMAPINFOHEADER{
public:
	unsigned long biSize;
	long biWidth;
	long biHeight;
	unsigned short biPlanes;
	unsigned short biBitCount;
	unsigned long biCompression;
	unsigned long biSizeImage;
	long biXPelsPerMeter;
	long biYPelsPerMeter;
	unsigned long biClrUsed;
	unsigned long biClrImportant;
};

// Type: long;

// Type: struct tagBITMAPFILEHEADER;
class tagBITMAPFILEHEADER{
public:
	unsigned short bfType;
	unsigned long bfSize;
	unsigned short bfReserved1;
	unsigned short bfReserved2;
	unsigned long bfOffBits;
};

// Type: class PFile (forward reference);
class PFile{
		enum __unnamed {
			FileNull = -1,
		};
		enum SeekTypes {
			N_SEEK_FROM_FILE_START = 0,
			N_SEEK_FROM_FILE_CURRENT = 1,
			N_SEEK_FROM_FILE_END = 2,
		};
		enum AccessTypes {
			ReadOnly = 0,
			ReadWrite = 2,
			WriteOnly = 1,
			Create = 768,
			CreateExcl = 1280,
			Append = 8,
			Binary = 32768,
			Compat = 0,
			DenyNone = 64,
			DenyRead = 48,
			DenyWrite = 32,
			DenyRdWr = 16,
			NoInherit = 128,
		};
		enum PermissionTypes {
			PermRead = 256,
			PermWrite = 128,
			PermRdWr = 384,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char[260] szFilePath;
	int32_t Handle;
private:
	int32_t ShouldClose;
};

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: struct tagRGBQUAD[256];

// Type: unsigned char *;

// Type: unsigned long;

// Type: long *;

// Type: class MFont (forward reference);
class MFont{
public:
	class basic_string<char> sName;
	unsigned long lHeight;
	unsigned long lWidth;
	unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const class MFont&);
	void MFont();
	void ~MFont();
	class MFont& operator=(const class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	// vtable: 0
	intro int32_t CreateFontA();
	// vtable: 4
	intro void DestroyFont();
	void * __ptr32 operator void *();
protected:
	void * __ptr32 hFont;
};

// Type: struct tagRECT;
class tagRECT{
public:
	long left;
	long top;
	long right;
	long bottom;
};

// Type: struct IDirectDrawSurface (forward reference);
class IDirectDrawSurface : public IUnknown
{
public:
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*);
	// calltype: NearStd
	virtual unsigned long AddRef();
	// calltype: NearStd
	virtual unsigned long Release();
	// vtable: 12
	// calltype: NearStd
	intro long AddAttachedSurface(struct IDirectDrawSurface*);
	// vtable: 16
	// calltype: NearStd
	intro long AddOverlayDirtyRect(struct tagRECT*);
	// vtable: 20
	// calltype: NearStd
	intro long Blt(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDBLTFX*);
	// vtable: 24
	// calltype: NearStd
	intro long BltBatch(struct _DDBLTBATCH*, unsigned long, unsigned long);
	// vtable: 28
	// calltype: NearStd
	intro long BltFast(unsigned long, unsigned long, struct IDirectDrawSurface*, struct tagRECT*, unsigned long);
	// vtable: 32
	// calltype: NearStd
	intro long DeleteAttachedSurface(unsigned long, struct IDirectDrawSurface*);
	// vtable: 36
	// calltype: NearStd
	intro long EnumAttachedSurfaces(void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32));
	// vtable: 40
	// calltype: NearStd
	intro long EnumOverlayZOrders(unsigned long, void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32));
	// vtable: 44
	// calltype: NearStd
	intro long Flip(struct IDirectDrawSurface*, unsigned long);
	// vtable: 48
	// calltype: NearStd
	intro long GetAttachedSurface(struct _DDSCAPS*, struct IDirectDrawSurface**);
	// vtable: 52
	// calltype: NearStd
	intro long GetBltStatus(unsigned long);
	// vtable: 56
	// calltype: NearStd
	intro long GetCaps(struct _DDSCAPS*);
	// vtable: 60
	// calltype: NearStd
	intro long GetClipper(struct IDirectDrawClipper**);
	// vtable: 64
	// calltype: NearStd
	intro long GetColorKey(unsigned long, struct _DDCOLORKEY*);
	// vtable: 68
	// calltype: NearStd
	intro long GetDC(void * __ptr32*);
	// vtable: 72
	// calltype: NearStd
	intro long GetFlipStatus(unsigned long);
	// vtable: 76
	// calltype: NearStd
	intro long GetOverlayPosition(long *, long *);
	// vtable: 80
	// calltype: NearStd
	intro long GetPalette(struct IDirectDrawPalette**);
	// vtable: 84
	// calltype: NearStd
	intro long GetPixelFormat(struct _DDPIXELFORMAT*);
	// vtable: 88
	// calltype: NearStd
	intro long GetSurfaceDesc(struct _DDSURFACEDESC*);
	// vtable: 92
	// calltype: NearStd
	intro long Initialize(struct IDirectDraw*, struct _DDSURFACEDESC*);
	// vtable: 96
	// calltype: NearStd
	intro long IsLost();
	// vtable: 100
	// calltype: NearStd
	intro long Lock(struct tagRECT*, struct _DDSURFACEDESC*, unsigned long, void * __ptr32);
	// vtable: 104
	// calltype: NearStd
	intro long ReleaseDC(void * __ptr32);
	// vtable: 108
	// calltype: NearStd
	intro long Restore();
	// vtable: 112
	// calltype: NearStd
	intro long SetClipper(struct IDirectDrawClipper*);
	// vtable: 116
	// calltype: NearStd
	intro long SetColorKey(unsigned long, struct _DDCOLORKEY*);
	// vtable: 120
	// calltype: NearStd
	intro long SetOverlayPosition(long, long);
	// vtable: 124
	// calltype: NearStd
	intro long SetPalette(struct IDirectDrawPalette*);
	// vtable: 128
	// calltype: NearStd
	intro long Unlock(void * __ptr32);
	// vtable: 132
	// calltype: NearStd
	intro long UpdateOverlay(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDOVERLAYFX*);
	// vtable: 136
	// calltype: NearStd
	intro long UpdateOverlayDisplay(unsigned long);
	// vtable: 140
	// calltype: NearStd
	intro long UpdateOverlayZOrder(unsigned long, struct IDirectDrawSurface*);
};

// Type: void * __ptr32;

// Type: uint32_t;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: struct tagPOINT;
class tagPOINT{
public:
	long x;
	long y;
};

// Type: class CSparkalWindow (forward reference);

// Type: struct _DDBLTFX;
class _DDBLTFX{
public:
	unsigned long dwSize;
	unsigned long dwDDFX;
	unsigned long dwROP;
	unsigned long dwDDROP;
	unsigned long dwRotationAngle;
	unsigned long dwZBufferOpCode;
	unsigned long dwZBufferLow;
	unsigned long dwZBufferHigh;
	unsigned long dwZBufferBaseDest;
	unsigned long dwZDestConstBitDepth;
	unsigned long dwZDestConst;
	struct IDirectDrawSurface* lpDDSZBufferDest;
	unsigned long dwZSrcConstBitDepth;
	unsigned long dwZSrcConst;
	struct IDirectDrawSurface* lpDDSZBufferSrc;
	unsigned long dwAlphaEdgeBlendBitDepth;
	unsigned long dwAlphaEdgeBlend;
	unsigned long dwReserved;
	unsigned long dwAlphaDestConstBitDepth;
	unsigned long dwAlphaDestConst;
	struct IDirectDrawSurface* lpDDSAlphaDest;
	unsigned long dwAlphaSrcConstBitDepth;
	unsigned long dwAlphaSrcConst;
	struct IDirectDrawSurface* lpDDSAlphaSrc;
	unsigned long dwFillColor;
	struct IDirectDrawSurface* lpDDSPattern;
	struct _DDCOLORKEY ddckDestColorkey;
	struct _DDCOLORKEY ddckSrcColorkey;
};

// Type: class IFlatImage (forward reference);
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: struct SparkalPoint (forward reference);
class SparkalPoint{
public:
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: struct SparkalRect (forward reference);
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct _DDCOLORKEY;
class _DDCOLORKEY{
public:
	unsigned long dwColorSpaceLowValue;
	unsigned long dwColorSpaceHighValue;
};

// Type: struct tagPALETTEENTRY[256];

// Type: struct tagRECT (forward reference);

// Type: class IBackBuffer (forward reference);
class IBackBuffer : public IFlatImage
{
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
};



// Contribution: 1:0006d690-0007056d Module: 39, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0046e690
void CBackBuffer::CBackBuffer() {
// LINE 44:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0048F120;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5907E0;
	__asm        jmp    near ptr 0x0046E6B2;
	__asm        jmp    near ptr 0x0046E6B7;
	__asm        jmp    near ptr 0x0046E6BC;
	__asm        jmp    near ptr 0x0046E6C1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590808;
// LINE 45:
	__asm        mov    ecx, this;
	__asm        call   0x0046EB58;
// LINE 46:
	__asm        jmp    near ptr 0x0046E6D7;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046e6df
void CBackBuffer::CBackBuffer(char * imageFileName) {
	int32_t nFileNameLength;
	struct tagBITMAPINFOHEADER biHeader;
	long ddrval;
	struct tagBITMAPFILEHEADER bfHeader;
	class PFile* fileImage;

// LINE 60:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0048F120;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5907E0;
	__asm        jmp    near ptr 0x0046E701;
	__asm        jmp    near ptr 0x0046E706;
	__asm        jmp    near ptr 0x0046E70B;
	__asm        jmp    near ptr 0x0046E710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590808;
// LINE 68:
	__asm        mov    ecx, this;
	__asm        call   0x0046EB58;
// LINE 69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 70:
	__asm        cmp    imageFileName, 0;
	__asm        jne    near ptr 0x0046E74E;
	__asm        push   0x46;
	__asm        push   0x599498;
	__asm        push   0x5994C0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E753;
	__asm        jmp    near ptr 0x0046E753;
// LINE 71:
	__asm        mov    eax, imageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    nFileNameLength, eax;
// LINE 72:
	__asm        mov    eax, nFileNameLength;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 73:
	__asm        mov    eax, imageFileName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 77:
	__asm        push   0x110;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x0046E808;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        cmp    imageFileName, 0;
	__asm        je     near ptr 0x0046E7F1;
	__asm        mov    eax, imageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0046E7F8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0046E7FD;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    fileImage, eax;
	__asm        jmp    near ptr 0x0046E80F;
	__asm        mov    fileImage, 0;
// LINE 78:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A03A0;
// LINE 79:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x0046E83C;
	__asm        jmp    near ptr 0x0046E895;
	__asm        jmp    near ptr 0x0046E83C;
	__asm        jmp    near ptr 0x0046E84B;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x0046E895;
// LINE 80:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 81:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 82:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0046E890;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0046E890;
// LINE 83:
	__asm        jmp    near ptr 0x0046E9FC;
// LINE 86:
	__asm        push   0xE;
	__asm        lea    eax, bfHeader.bfType;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E8B2;
// LINE 87:
	__asm        push   0x28;
	__asm        lea    eax, biHeader.biSize;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0046E8CF;
// LINE 88:
	__asm        mov    eax, biHeader.biWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 89:
	__asm        mov    eax, biHeader.biHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 90:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 94:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 95:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x0046E93C;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0046E93C;
// LINE 99:
	__asm        push   0x6C;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0x6C;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 6;
// LINE 113:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x840;
// LINE 118:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
// LINE 120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
// LINE 123:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    ddrval, eax;
// LINE 124:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046E9DC;
// LINE 125:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0046E9CA;
	__asm        push   0x5994D0;
	__asm        lea    ecx, [ebp-0x5C];
	__asm        call   0x0042D420;
// LINE 126:
	__asm        jmp    near ptr 0x0046E9FC;
// LINE 139:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0xC];
	__asm        add    ds:[0x599DA0], eax;
// LINE 142:
	__asm        mov    ecx, this;
	__asm        call   0x0046EDCA;
// LINE 145:
	__asm        jmp    near ptr 0x0046E9FC;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0046ea06
void CBackBuffer::CBackBuffer(long Width, long Height, const struct SparkalColor* __formal) {
	long ddrval;

// LINE 157:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0048F120;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5907E0;
	__asm        jmp    near ptr 0x0046EA28;
	__asm        jmp    near ptr 0x0046EA2D;
	__asm        jmp    near ptr 0x0046EA32;
	__asm        jmp    near ptr 0x0046EA37;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590808;
// LINE 161:
	__asm        mov    ecx, this;
	__asm        call   0x0046EB58;
// LINE 165:
	__asm        push   0x6C;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0x6C;
// LINE 167:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 6;
// LINE 170:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x840;
// LINE 175:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6C], 0;
// LINE 176:
	__asm        mov    eax, Width;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
// LINE 177:
	__asm        mov    eax, Height;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 179:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 183:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x4C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    ddrval, eax;
// LINE 184:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046EB26;
// LINE 185:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0046EB14;
	__asm        push   0x59950C;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 186:
	__asm        jmp    near ptr 0x0046EB4E;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0xC];
	__asm        add    ds:[0x599DA0], eax;
// LINE 204:
	__asm        mov    ecx, this;
	__asm        call   0x0047006F;
// LINE 205:
	__asm        mov    ecx, this;
	__asm        call   0x00470149;
// LINE 208:
	__asm        jmp    near ptr 0x0046EB4E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046eb58
void CBackBuffer::InitializeMemberVariables() {
// LINE 215:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 216:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
// LINE 217:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 218:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 219:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 222:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x38], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x39];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3A], al;
// LINE 225:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3D], al;
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x3D];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3E], al;
// LINE 226:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 227:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
// LINE 228:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 231:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 232:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 235:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 236:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
// LINE 237:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
// LINE 238:
	__asm        push   0x6C;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 239:
	__asm        push   0x64;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC4;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 240:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0;
// LINE 241:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12C], 0;
// LINE 245:
	__asm        jmp    near ptr 0x0046EC75;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046ec7a
void CBackBuffer::~CBackBuffer() {
// LINE 253:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590808;
// LINE 254:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x0046ECDD;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046ECD3;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0049FC4E;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046ECCE;
	__asm        jmp    near ptr 0x0046ECD3;
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 259:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0046ED0F;
// LINE 260:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 261:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 271:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     near ptr 0x0046ED51;
// LINE 272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 273:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 277:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, this;
	__asm        imul   ecx, [edx+0xC];
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    ds:[0x599DA0], eax;
// LINE 281:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        je     near ptr 0x0046ED93;
// LINE 282:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 287:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, this;
	__asm        imul   ecx, [edx+0xC];
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    ds:[0x599DA0], eax;
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x0046EDC0;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x128];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0;
// LINE 297:
	__asm        jmp    near ptr 0x0046EDC5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046edca
unsigned long CBackBuffer::Load() {
	struct tagBITMAPINFOHEADER biHeader;
	struct tagRGBQUAD[256] biColors;
	int32_t i;
	unsigned char * biData;
	struct tagBITMAPFILEHEADER bfHeader;
	int32_t nPosition;
	class PFile* fileImage;
	int32_t nFileLength;
	int32_t nBytesRead;

// LINE 305:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x47C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 316:
	__asm        push   0x110;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x454], eax;
	__asm        cmp    dword ptr [ebp-0x454], 0;
	__asm        je     near ptr 0x0046EE89;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x478], eax;
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        cmp    dword ptr [ebp-0x478], 0;
	__asm        je     near ptr 0x0046EE6C;
	__asm        mov    eax, [ebp-0x478];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x454];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0046EE76;
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0046EE7B;
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    fileImage, eax;
	__asm        jmp    near ptr 0x0046EE90;
	__asm        mov    fileImage, 0;
// LINE 317:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A03A0;
// LINE 318:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A0562;
	__asm        mov    nFileLength, eax;
// LINE 319:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x0046EEC8;
	__asm        jmp    near ptr 0x0046EF3F;
	__asm        jmp    near ptr 0x0046EEC8;
	__asm        jmp    near ptr 0x0046EEDA;
	__asm        cmp    dword ptr [ebp-0x468], 0;
	__asm        jne    near ptr 0x0046EF3F;
// LINE 320:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 321:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 322:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 323:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x45C], eax;
	__asm        mov    eax, [ebp-0x45C];
	__asm        mov    [ebp-0x458], eax;
	__asm        cmp    dword ptr [ebp-0x458], 0;
	__asm        je     near ptr 0x0046EF35;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x458];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x458];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0046EF35;
// LINE 324:
	__asm        mov    eax, 0x80000006;
	__asm        jmp    near ptr 0x0046F1B8;
// LINE 327:
	__asm        push   0xE;
	__asm        lea    eax, bfHeader.bfType;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        mov    nBytesRead, eax;
	__asm        jmp    near ptr 0x0046EF5F;
// LINE 328:
	__asm        push   0x28;
	__asm        lea    eax, biHeader.biSize;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        mov    nBytesRead, eax;
	__asm        jmp    near ptr 0x0046EF82;
// LINE 329:
	__asm        jmp    near ptr 0x0046EF87;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x0058E430;
	__asm        add    esp, 4;
	__asm        mov    nPosition, eax;
// LINE 330:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A0562;
	__asm        mov    nFileLength, eax;
// LINE 335:
	__asm        cmp    biHeader.biClrUsed, 0;
	__asm        jne    near ptr 0x0046EFC7;
// LINE 336:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(biHeader.biBitCount);
	__asm        shl    eax, cl;
	__asm        mov    biHeader.biClrUsed, eax;
// LINE 338:
	__asm        mov    eax, biHeader.biClrUsed;
	__asm        shl    eax, 2;
	__asm        mov    [ebp-0x46C], eax;
	__asm        mov    eax, [ebp-0x46C];
	__asm        push   eax;
	__asm        lea    eax, biColors[0].rgbBlue;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        mov    nBytesRead, eax;
	__asm        jmp    near ptr 0x0046EFFE;
// LINE 339:
	__asm        jmp    near ptr 0x0046F003;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x0058E430;
	__asm        add    esp, 4;
	__asm        mov    nPosition, eax;
// LINE 340:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A0562;
	__asm        mov    nFileLength, eax;
// LINE 344:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 346:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    biData, eax;
// LINE 347:
	__asm        mov    eax, biHeader.biWidth;
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    biHeader.biWidth, eax;
// LINE 348:
	__asm        mov    eax, biHeader.biHeight;
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        add    biData, eax;
// LINE 350:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A0562;
	__asm        mov    nFileLength, eax;
// LINE 351:
	__asm        jmp    near ptr 0x0046F075;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x0058E430;
	__asm        add    esp, 4;
	__asm        mov    nPosition, eax;
// LINE 352:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0046F099;
	__asm        inc    i;
	__asm        mov    eax, biHeader.biHeight;
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x0046F114;
	__asm        mov    eax, biHeader.biWidth;
	__asm        mov    [ebp-0x470], eax;
// LINE 353:
	__asm        mov    eax, [ebp-0x470];
	__asm        push   eax;
	__asm        mov    eax, biData;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        mov    nBytesRead, eax;
	__asm        jmp    near ptr 0x0046F0DA;
// LINE 354:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A0562;
	__asm        mov    nFileLength, eax;
// LINE 355:
	__asm        jmp    near ptr 0x0046F0EA;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x0058E430;
	__asm        add    esp, 4;
	__asm        mov    nPosition, eax;
// LINE 356:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    biData, eax;
// LINE 357:
	__asm        jmp    near ptr 0x0046F096;
	__asm        mov    eax, biHeader.biWidth;
	__asm        mov    [ebp-0x474], eax;
// LINE 361:
	__asm        mov    eax, [ebp-0x474];
	__asm        push   eax;
	__asm        mov    eax, biData;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        mov    nBytesRead, eax;
	__asm        jmp    near ptr 0x0046F145;
// LINE 362:
	__asm        jmp    near ptr 0x0046F14A;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x0058E430;
	__asm        add    esp, 4;
	__asm        mov    nPosition, eax;
// LINE 363:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 364:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x464], eax;
	__asm        mov    eax, [ebp-0x464];
	__asm        mov    [ebp-0x460], eax;
	__asm        cmp    dword ptr [ebp-0x460], 0;
	__asm        je     near ptr 0x0046F1A0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x460];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x460];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0046F1A0;
// LINE 366:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 367:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046F1B8;
// LINE 369:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046f1bd
unsigned long CBackBuffer::DrawBufferText(char * pText, unsigned long Style, long * pRectLeft, long * pRectTop, long * pRectRight, long * pRectBottom, class MFont* mfontToUse) {
	struct tagRECT rectText;
	struct IDirectDrawSurface* pOurSurface;
	void * __ptr32 hdcSurface;
	long ddrval;
	uint32_t nFormat;
	void * __ptr32 hFontOriginal;

// LINE 378:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 390:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046F1EB;
// LINE 391:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F3FC;
// LINE 393:
	__asm        mov    eax, pRectLeft;
	__asm        mov    eax, [eax];
	__asm        mov    rectText.left, eax;
// LINE 394:
	__asm        mov    eax, pRectTop;
	__asm        mov    eax, [eax];
	__asm        mov    rectText.top, eax;
// LINE 395:
	__asm        cmp    pRectRight, 0;
	__asm        je     near ptr 0x0046F212;
// LINE 396:
	__asm        mov    eax, pRectRight;
	__asm        mov    eax, [eax];
	__asm        mov    rectText.right, eax;
// LINE 397:
	__asm        jmp    near ptr 0x0046F21B;
// LINE 398:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectText.right, eax;
// LINE 399:
	__asm        cmp    pRectBottom, 0;
	__asm        je     near ptr 0x0046F232;
// LINE 400:
	__asm        mov    eax, pRectBottom;
	__asm        mov    eax, [eax];
	__asm        mov    rectText.bottom, eax;
// LINE 401:
	__asm        jmp    near ptr 0x0046F23B;
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    rectText.bottom, eax;
// LINE 404:
	__asm        lea    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        mov    ddrval, eax;
// LINE 405:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046F27F;
// LINE 406:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0046F263;
	__asm        push   0x599548;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x0042D420;
// LINE 407:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F3FC;
// LINE 410:
	__asm        jmp    near ptr 0x0046F3F5;
// LINE 411:
	__asm        mov    nFormat, 0x10;
// LINE 412:
	__asm        test   reinterpret_cast<uint8_t>(Style), 1;
	__asm        je     near ptr 0x0046F299;
// LINE 413:
	__asm        or     nFormat, 1;
// LINE 414:
	__asm        jmp    near ptr 0x0046F2AC;
	__asm        test   reinterpret_cast<uint8_t>(Style), 8;
	__asm        je     near ptr 0x0046F2AC;
// LINE 415:
	__asm        or     nFormat, 2;
// LINE 416:
	__asm        jmp    near ptr 0x0046F2AC;
// LINE 418:
	__asm        test   reinterpret_cast<uint8_t>(Style), 2;
	__asm        je     near ptr 0x0046F2BA;
// LINE 419:
	__asm        or     nFormat, 4;
// LINE 420:
	__asm        test   reinterpret_cast<uint8_t>(Style), 4;
	__asm        je     near ptr 0x0046F2D5;
// LINE 421:
	__asm        push   2;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 422:
	__asm        jmp    near ptr 0x0046F2E1;
// LINE 423:
	__asm        push   1;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 424:
	__asm        test   reinterpret_cast<uint8_t>(Style), 0x10;
	__asm        je     near ptr 0x0046F2F2;
// LINE 425:
	__asm        or     nFormat, 0x400;
// LINE 427:
	__asm        cmp    mfontToUse, 0;
	__asm        je     near ptr 0x0046F31A;
// LINE 428:
	__asm        jmp    near ptr 0x0046F301;
	__asm        mov    eax, mfontToUse;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 429:
	__asm        jmp    near ptr 0x0046F343;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x0046F343;
// LINE 430:
	__asm        jmp    near ptr 0x0046F32C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 432:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x39];
	__asm        shl    ecx, 8;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x3A];
	__asm        or     ecx, edx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x38];
	__asm        shl    edx, 0x10;
	__asm        or     ecx, edx;
	__asm        push   ecx;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3594];
// LINE 434:
	__asm        mov    eax, nFormat;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C389C];
// LINE 436:
	__asm        test   reinterpret_cast<uint8_t>(Style), 0x10;
	__asm        je     near ptr 0x0046F3BD;
// LINE 437:
	__asm        mov    eax, rectText.left;
	__asm        mov    ecx, pRectLeft;
	__asm        mov    [ecx], eax;
// LINE 438:
	__asm        mov    eax, rectText.top;
	__asm        mov    ecx, pRectTop;
	__asm        mov    [ecx], eax;
// LINE 439:
	__asm        mov    eax, rectText.right;
	__asm        mov    ecx, pRectRight;
	__asm        mov    [ecx], eax;
// LINE 440:
	__asm        mov    eax, rectText.bottom;
	__asm        mov    ecx, pRectBottom;
	__asm        mov    [ecx], eax;
// LINE 443:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jne    near ptr 0x0046F3D4;
	__asm        cmp    mfontToUse, 0;
	__asm        je     near ptr 0x0046F3E5;
// LINE 444:
	__asm        mov    eax, hFontOriginal;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 445:
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 448:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046F3FC;
// LINE 449:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0046f403
unsigned long CBackBuffer::DrawBufferText(char * pText, long nTextLength, unsigned long Style, const class MRect& rectText, class MFont* mfontToUse) {
	struct IDirectDrawSurface* pOurSurface;
	void * __ptr32 hdcSurface;
	long ddrval;
	uint32_t nFormat;
	void * __ptr32 hFontOriginal;

// LINE 458:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 469:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046F431;
// LINE 470:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F5BF;
// LINE 472:
	__asm        lea    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        mov    ddrval, eax;
// LINE 473:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046F475;
// LINE 474:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046F459;
	__asm        push   0x599580;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   0x0042D420;
// LINE 475:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F5BF;
// LINE 478:
	__asm        jmp    near ptr 0x0046F5B8;
// LINE 479:
	__asm        mov    nFormat, 0x10;
// LINE 480:
	__asm        test   reinterpret_cast<uint8_t>(Style), 1;
	__asm        je     near ptr 0x0046F48F;
// LINE 481:
	__asm        or     nFormat, 1;
// LINE 482:
	__asm        jmp    near ptr 0x0046F4A2;
	__asm        test   reinterpret_cast<uint8_t>(Style), 8;
	__asm        je     near ptr 0x0046F4A2;
// LINE 483:
	__asm        or     nFormat, 2;
// LINE 484:
	__asm        jmp    near ptr 0x0046F4A2;
// LINE 486:
	__asm        test   reinterpret_cast<uint8_t>(Style), 2;
	__asm        je     near ptr 0x0046F4B0;
// LINE 487:
	__asm        or     nFormat, 4;
// LINE 488:
	__asm        test   reinterpret_cast<uint8_t>(Style), 4;
	__asm        je     near ptr 0x0046F4CB;
// LINE 489:
	__asm        push   2;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 490:
	__asm        jmp    near ptr 0x0046F4D7;
// LINE 491:
	__asm        push   1;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 492:
	__asm        test   reinterpret_cast<uint8_t>(Style), 0x10;
	__asm        je     near ptr 0x0046F4E8;
// LINE 493:
	__asm        or     nFormat, 0x400;
// LINE 495:
	__asm        cmp    mfontToUse, 0;
	__asm        je     near ptr 0x0046F510;
// LINE 496:
	__asm        jmp    near ptr 0x0046F4F7;
	__asm        mov    eax, mfontToUse;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 497:
	__asm        jmp    near ptr 0x0046F539;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x0046F539;
// LINE 498:
	__asm        jmp    near ptr 0x0046F522;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 500:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x39];
	__asm        shl    ecx, 8;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x3A];
	__asm        or     ecx, edx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x38];
	__asm        shl    edx, 0x10;
	__asm        or     ecx, edx;
	__asm        push   ecx;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3594];
// LINE 501:
	__asm        mov    eax, nFormat;
	__asm        push   eax;
	__asm        mov    eax, rectText;
	__asm        push   eax;
	__asm        mov    eax, nTextLength;
	__asm        push   eax;
	__asm        mov    eax, pText;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C389C];
// LINE 503:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jne    near ptr 0x0046F597;
	__asm        cmp    mfontToUse, 0;
	__asm        je     near ptr 0x0046F5A8;
// LINE 504:
	__asm        mov    eax, hFontOriginal;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 505:
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 508:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046F5BF;
// LINE 509:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046f5c6
unsigned long CBackBuffer::DrawLine(long nStartX, long nStartY, long nEndX, long nEndY, long nThickness) {
	void * __ptr32 hPenOld;
	struct IDirectDrawSurface* pOurSurface;
	void * __ptr32 hdcSurface;
	long ddrval;
	struct tagPOINT ptPositionOld;
	unsigned long crPen;

// LINE 522:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 547:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046F5F4;
// LINE 548:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F7B4;
// LINE 555:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x0046F667;
	__asm        mov    eax, this;
	__asm        mov    ecx, nThickness;
	__asm        cmp    [eax+0x12C], ecx;
	__asm        jne    near ptr 0x0046F667;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x132];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x3E];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x0046F667;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x3D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x131];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x0046F667;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x3C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x130];
	__asm        cmp    ecx, edx;
	__asm        je     near ptr 0x0046F70C;
// LINE 557:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        je     near ptr 0x0046F687;
// LINE 558:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x128];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 559:
	__asm        mov    eax, nThickness;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x12C], eax;
// LINE 560:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x130], eax;
// LINE 561:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x3D];
	__asm        shl    ecx, 8;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x3E];
	__asm        or     ecx, edx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x3C];
	__asm        shl    edx, 0x10;
	__asm        or     ecx, edx;
	__asm        mov    crPen, ecx;
// LINE 562:
	__asm        mov    eax, crPen;
	__asm        push   eax;
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C35A0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x128], eax;
// LINE 563:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x128], 0;
	__asm        jne    near ptr 0x0046F70C;
// LINE 564:
	__asm        push   0x5995B8;
	__asm        push   0x5995F0;
	__asm        call   0x00424B14;
	__asm        add    esp, 8;
// LINE 565:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x0046F7B4;
// LINE 570:
	__asm        lea    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        mov    ddrval, eax;
// LINE 571:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046F750;
// LINE 572:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0046F734;
	__asm        push   0x5995F4;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   0x0042D420;
// LINE 573:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x0046F7B4;
// LINE 575:
	__asm        jmp    near ptr 0x0046F7AD;
// LINE 576:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x128];
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hPenOld, eax;
// LINE 577:
	__asm        lea    eax, ptPositionOld.x;
	__asm        push   eax;
	__asm        mov    eax, nStartY;
	__asm        push   eax;
	__asm        mov    eax, nStartX;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35A8];
// LINE 578:
	__asm        mov    eax, nEndY;
	__asm        push   eax;
	__asm        mov    eax, nEndX;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3598];
// LINE 579:
	__asm        mov    eax, hPenOld;
	__asm        push   eax;
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
// LINE 580:
	__asm        mov    eax, hdcSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 584:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046F7B4;
// LINE 585:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046f7bb
unsigned long CBackBuffer::Swap(class CSparkalWindow* pDest, long DestLeft, long DestTop) {
	long ddrval;

// LINE 598:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 602:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    near ptr 0x0046F7DE;
// LINE 603:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F821;
// LINE 605:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    ddrval, eax;
// LINE 606:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046F819;
// LINE 607:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0046F80C;
	__asm        push   0x59962C;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 609:
	__asm        mov    eax, ddrval;
	__asm        jmp    near ptr 0x0046F821;
// LINE 611:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046f828
unsigned long CBackBuffer::SwapRect(class CSparkalWindow* pDest, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom, long DestLeft, long DestTop) {
	struct IDirectDrawSurface* pOurSurface;
	struct IDirectDrawSurface* pDestSurface;
	struct tagRECT destRect;
	struct _DDBLTFX ddbltfx;
	struct tagRECT srcRect;

// LINE 627:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x98;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 635:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046F868;
// LINE 636:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046F941;
// LINE 638:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0046F879;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pDestSurface, eax;
// LINE 640:
	__asm        mov    eax, SrcLeft;
	__asm        mov    srcRect.left, eax;
// LINE 641:
	__asm        mov    eax, SrcTop;
	__asm        mov    srcRect.top, eax;
// LINE 642:
	__asm        mov    eax, SrcRight;
	__asm        mov    srcRect.right, eax;
// LINE 643:
	__asm        mov    eax, SrcBottom;
	__asm        mov    srcRect.bottom, eax;
// LINE 645:
	__asm        mov    eax, DestLeft;
	__asm        mov    destRect.left, eax;
// LINE 646:
	__asm        mov    eax, DestTop;
	__asm        mov    destRect.top, eax;
// LINE 649:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        add    eax, DestLeft;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0046F8DF;
	__asm        mov    eax, ecx;
	__asm        mov    destRect.right, eax;
// LINE 650:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        add    eax, DestTop;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0046F8FE;
	__asm        mov    eax, ecx;
	__asm        mov    destRect.bottom, eax;
// LINE 652:
	__asm        mov    ddbltfx.dwSize, 0x64;
// LINE 653:
	__asm        mov    ddbltfx.dwROP, 0xCC0020;
// LINE 656:
	__asm        lea    eax, ddbltfx.dwSize;
	__asm        push   eax;
	__asm        push   0x1020000;
	__asm        lea    eax, srcRect.left;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        lea    eax, destRect.left;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        jmp    near ptr 0x0046F941;
// LINE 658:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0046f948
unsigned long CBackBuffer::Compose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
	struct IDirectDrawSurface* pOurSurface;
	long ddrval;
	int32_t nOverhangDistance;
	struct IDirectDrawSurface* pDestSurface;
	unsigned long ddBltFlags;
	struct tagRECT destRect;
	struct _DDBLTFX ddbltfx;
	struct tagRECT srcRect;

// LINE 673:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 682:
	__asm        jmp    near ptr 0x0046F95F;
	__asm        mov    eax, pDestImage;
	__asm        mov    ecx, DestLeft;
	__asm        cmp    [eax+8], ecx;
	__asm        jg     near ptr 0x0046F975;
// LINE 683:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 684:
	__asm        jmp    near ptr 0x0046F97A;
	__asm        mov    eax, pDestImage;
	__asm        mov    ecx, DestTop;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jg     near ptr 0x0046F990;
// LINE 685:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 686:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        add    eax, DestLeft;
	__asm        jns    near ptr 0x0046F9A6;
// LINE 687:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 688:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        add    eax, DestTop;
	__asm        jns    near ptr 0x0046F9BC;
// LINE 689:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 691:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 692:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046F9EA;
// LINE 693:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 697:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pDestSurface, eax;
// LINE 699:
	__asm        mov    eax, SrcLeft;
	__asm        mov    srcRect.left, eax;
// LINE 700:
	__asm        mov    eax, SrcTop;
	__asm        mov    srcRect.top, eax;
// LINE 701:
	__asm        mov    eax, SrcRight;
	__asm        mov    srcRect.right, eax;
// LINE 702:
	__asm        mov    eax, SrcBottom;
	__asm        mov    srcRect.bottom, eax;
// LINE 704:
	__asm        mov    eax, DestLeft;
	__asm        mov    destRect.left, eax;
// LINE 705:
	__asm        mov    eax, DestTop;
	__asm        mov    destRect.top, eax;
// LINE 706:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        add    eax, DestLeft;
	__asm        mov    destRect.right, eax;
// LINE 707:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        add    eax, DestTop;
	__asm        mov    destRect.bottom, eax;
// LINE 710:
	__asm        jmp    near ptr 0x0046FA3F;
	__asm        mov    eax, destRect.right;
	__asm        mov    ecx, pDestImage;
	__asm        sub    eax, [ecx+8];
	__asm        mov    nOverhangDistance, eax;
	__asm        cmp    nOverhangDistance, 0;
	__asm        jle    near ptr 0x0046FA75;
// LINE 711:
	__asm        xor    eax, eax;
	__asm        sub    eax, nOverhangDistance;
	__asm        neg    eax;
	__asm        sub    destRect.right, eax;
// LINE 712:
	__asm        xor    eax, eax;
	__asm        sub    eax, nOverhangDistance;
	__asm        neg    eax;
	__asm        sub    srcRect.right, eax;
// LINE 714:
	__asm        xor    eax, eax;
	__asm        sub    eax, destRect.left;
	__asm        mov    nOverhangDistance, eax;
	__asm        cmp    nOverhangDistance, 0;
	__asm        jle    near ptr 0x0046FAA5;
// LINE 715:
	__asm        mov    eax, nOverhangDistance;
	__asm        add    destRect.left, eax;
// LINE 716:
	__asm        mov    eax, nOverhangDistance;
	__asm        add    srcRect.left, eax;
// LINE 718:
	__asm        jmp    near ptr 0x0046FAAA;
	__asm        mov    eax, destRect.bottom;
	__asm        mov    ecx, pDestImage;
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    nOverhangDistance, eax;
	__asm        cmp    nOverhangDistance, 0;
	__asm        jle    near ptr 0x0046FAE0;
// LINE 719:
	__asm        xor    eax, eax;
	__asm        sub    eax, nOverhangDistance;
	__asm        neg    eax;
	__asm        sub    destRect.bottom, eax;
// LINE 720:
	__asm        xor    eax, eax;
	__asm        sub    eax, nOverhangDistance;
	__asm        neg    eax;
	__asm        sub    srcRect.bottom, eax;
// LINE 722:
	__asm        xor    eax, eax;
	__asm        sub    eax, destRect.top;
	__asm        mov    nOverhangDistance, eax;
	__asm        cmp    nOverhangDistance, 0;
	__asm        jle    near ptr 0x0046FB0A;
// LINE 723:
	__asm        mov    eax, nOverhangDistance;
	__asm        add    destRect.top, eax;
// LINE 724:
	__asm        mov    eax, nOverhangDistance;
	__asm        add    srcRect.top, eax;
// LINE 728:
	__asm        mov    ddbltfx.dwSize, 0x64;
// LINE 729:
	__asm        mov    ddbltfx.dwROP, 0xCC0020;
// LINE 730:
	__asm        mov    ddBltFlags, 0x1020000;
// LINE 732:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0046FB3C;
// LINE 733:
	__asm        or     ddBltFlags, 0x8000;
// LINE 736:
	__asm        lea    eax, ddbltfx.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ddBltFlags;
	__asm        push   eax;
	__asm        lea    eax, srcRect.left;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        lea    eax, destRect.left;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 737:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046FB9F;
// LINE 738:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x0046FB8F;
	__asm        push   0x599678;
	__asm        lea    ecx, [ebp-0x9C];
	__asm        call   0x0042D420;
// LINE 740:
	__asm        mov    eax, ddrval;
	__asm        jmp    near ptr 0x0046FBAA;
// LINE 787:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0046fbb1
unsigned long CBackBuffer::ComposeNoClip(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
	struct IDirectDrawSurface* pOurSurface;
	long ddrval;
	struct IDirectDrawSurface* pDestSurface;
	unsigned long ddBltFlags;
	class MRect destRect;
	struct _DDBLTFX ddbltfx;
	class MRect sourceRect;

// LINE 796:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x9C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 802:
	__asm        jmp    near ptr 0x0046FBC8;
	__asm        mov    eax, DestLeft;
	__asm        mov    destRect.left, eax;
	__asm        mov    eax, DestTop;
	__asm        mov    destRect.top, eax;
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        add    eax, DestLeft;
	__asm        mov    destRect.right, eax;
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        add    eax, DestTop;
	__asm        mov    destRect.bottom, eax;
	__asm        jmp    near ptr 0x0046FBF4;
// LINE 803:
	__asm        jmp    near ptr 0x0046FBF9;
	__asm        mov    eax, SrcLeft;
	__asm        mov    sourceRect.left, eax;
	__asm        mov    eax, SrcTop;
	__asm        mov    sourceRect.top, eax;
	__asm        mov    eax, SrcRight;
	__asm        mov    sourceRect.right, eax;
	__asm        mov    eax, SrcBottom;
	__asm        mov    sourceRect.bottom, eax;
	__asm        jmp    near ptr 0x0046FC16;
// LINE 805:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 806:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pDestSurface, eax;
// LINE 809:
	__asm        mov    ddbltfx.dwSize, 0x64;
// LINE 810:
	__asm        mov    ddbltfx.dwROP, 0xCC0020;
// LINE 811:
	__asm        mov    ddBltFlags, 0x1020000;
// LINE 813:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0046FC70;
// LINE 814:
	__asm        or     ddBltFlags, 0x8000;
// LINE 817:
	__asm        lea    eax, ddbltfx.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ddBltFlags;
	__asm        push   eax;
	__asm        lea    eax, sourceRect.left;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        lea    eax, destRect.left;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 818:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046FCD3;
// LINE 819:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x0046FCC3;
	__asm        push   0x5996B4;
	__asm        lea    ecx, [ebp-0x98];
	__asm        call   0x0042D420;
// LINE 823:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046FCDD;
// LINE 825:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0046fce4
unsigned long CBackBuffer::ComposeNoClip(class IFlatImage* pDestImage, const struct SparkalPoint& ptDestination, const struct SparkalRect& rectSource) {
// LINE 834:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 836:
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, ptDestination;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptDestination;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x3C];
	__asm        jmp    near ptr 0x0046FD2C;
// LINE 837:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046fd33
unsigned long CBackBuffer::Compose(class IFlatImage* pDestImage, const struct SparkalPoint& ptDestination, const struct SparkalRect& rectSource) {
// LINE 846:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 848:
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectSource;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, ptDestination;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptDestination;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0046FD7B;
// LINE 849:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046fd82
unsigned long CBackBuffer::StretchCompose(class IFlatImage* pDestImage, const struct SparkalRect& destRect, const struct SparkalRect& srcRect) {
	struct IDirectDrawSurface* pOurSurface;
	struct IDirectDrawSurface* pDestSurface;
	unsigned long ddBltFlags;
	struct _DDBLTFX ddbltfx;

// LINE 866:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 872:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 873:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046FDB0;
// LINE 874:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046FE0C;
// LINE 878:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pDestSurface, eax;
// LINE 880:
	__asm        mov    ddbltfx.dwSize, 0x64;
// LINE 881:
	__asm        mov    ddbltfx.dwROP, 0xCC0020;
// LINE 883:
	__asm        mov    ddBltFlags, 0x1020000;
// LINE 885:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0046FDE7;
// LINE 886:
	__asm        or     ddBltFlags, 0x8000;
// LINE 890:
	__asm        lea    eax, ddbltfx.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ddBltFlags;
	__asm        push   eax;
	__asm        mov    eax, srcRect;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, destRect;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        jmp    near ptr 0x0046FE0C;
// LINE 892:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046fe13
unsigned long CBackBuffer::StretchCompose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long DestRight, long DestBottom, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
	struct SparkalRect destRect;
	struct SparkalRect srcRect;

// LINE 903:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 904:
	__asm        jmp    near ptr 0x0046FE24;
	__asm        jmp    near ptr 0x0046FE29;
// LINE 906:
	__asm        mov    eax, SrcLeft;
	__asm        mov    srcRect.left, eax;
// LINE 907:
	__asm        mov    eax, SrcTop;
	__asm        mov    srcRect.top, eax;
// LINE 908:
	__asm        mov    eax, SrcRight;
	__asm        mov    srcRect.right, eax;
// LINE 909:
	__asm        mov    eax, SrcBottom;
	__asm        mov    srcRect.bottom, eax;
// LINE 911:
	__asm        mov    eax, DestLeft;
	__asm        mov    destRect.left, eax;
// LINE 912:
	__asm        mov    eax, DestTop;
	__asm        mov    destRect.top, eax;
// LINE 913:
	__asm        mov    eax, DestRight;
	__asm        mov    destRect.right, eax;
// LINE 914:
	__asm        mov    eax, DestBottom;
	__asm        mov    destRect.bottom, eax;
// LINE 916:
	__asm        lea    eax, srcRect.left;
	__asm        push   eax;
	__asm        lea    eax, destRect.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        jmp    near ptr 0x0046FE75;
// LINE 917:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x0046fe7c
unsigned long CBackBuffer::Duplicate(class CBackBuffer* pDestImage, int32_t bAllowTransparent) {
	struct IDirectDrawSurface* pOurSurface;
	long ddrval;
	struct IDirectDrawSurface* pDestSurface;
	unsigned long ddBltFlags;
	struct tagRECT destRect;
	struct _DDBLTFX ddbltfx;
	struct tagRECT srcRect;

// LINE 931:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x9C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 939:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 940:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0046FEBC;
// LINE 941:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x0046FFC5;
// LINE 945:
	__asm        mov    eax, pDestImage;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDestImage;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pDestSurface, eax;
// LINE 947:
	__asm        mov    destRect.left, 0;
	__asm        mov    eax, destRect.left;
	__asm        mov    srcRect.left, eax;
// LINE 948:
	__asm        mov    destRect.top, 0;
	__asm        mov    eax, destRect.top;
	__asm        mov    srcRect.top, eax;
// LINE 949:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    destRect.right, eax;
	__asm        jmp    near ptr 0x0046FEFE;
	__asm        mov    eax, destRect.right;
	__asm        mov    srcRect.right, eax;
// LINE 950:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    destRect.bottom, eax;
	__asm        jmp    near ptr 0x0046FF15;
	__asm        mov    eax, destRect.bottom;
	__asm        mov    srcRect.bottom, eax;
// LINE 952:
	__asm        mov    ddbltfx.dwSize, 0x64;
// LINE 953:
	__asm        mov    ddbltfx.dwROP, 0xCC0020;
// LINE 955:
	__asm        mov    ddBltFlags, 0x1020000;
// LINE 957:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        je     near ptr 0x0046FF57;
	__asm        cmp    bAllowTransparent, 0;
	__asm        je     near ptr 0x0046FF57;
// LINE 958:
	__asm        or     ddBltFlags, 0x8000;
// LINE 961:
	__asm        lea    eax, ddbltfx.dwSize;
	__asm        push   eax;
	__asm        mov    eax, ddBltFlags;
	__asm        push   eax;
	__asm        lea    eax, srcRect.left;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        lea    eax, destRect.left;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        push   eax;
	__asm        mov    eax, pDestSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 962:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x0046FFBA;
// LINE 963:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x0046FFAA;
	__asm        push   0x5996F0;
	__asm        lea    ecx, [ebp-0x98];
	__asm        call   0x0042D420;
// LINE 965:
	__asm        mov    eax, ddrval;
	__asm        jmp    near ptr 0x0046FFC5;
// LINE 967:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0046ffcc
unsigned long CBackBuffer::StretchRect(class CSparkalWindow* pDest, long __formal, long __formal, long __formal, long __formal, long __formal, long __formal, long __formal, long __formal) {
// LINE 980:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 981:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046FFDF;
// LINE 982:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x0046ffe6
void CBackBuffer::SetTransparentColor(int32_t bEnable, long nPaletteIndex) {
	struct IDirectDrawSurface* pOurSurface;
	struct _DDCOLORKEY DDColorKey;

// LINE 991:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 992:
	__asm        cmp    bEnable, 0;
	__asm        je     near ptr 0x00470014;
// LINE 993:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
// LINE 994:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x48], eax;
// LINE 996:
	__asm        jmp    near ptr 0x0047001E;
// LINE 997:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 1004:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 1005:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0047003B;
// LINE 1006:
	__asm        jmp    near ptr 0x00470068;
// LINE 1008:
	__asm        cmp    bEnable, 0;
	__asm        je     near ptr 0x00470063;
// LINE 1009:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    DDColorKey.dwColorSpaceLowValue, eax;
// LINE 1010:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    DDColorKey.dwColorSpaceHighValue, eax;
// LINE 1011:
	__asm        lea    eax, DDColorKey.dwColorSpaceLowValue;
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x74];
// LINE 1014:
	__asm        jmp    near ptr 0x00470068;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0047006f
unsigned long CBackBuffer::Lock() {
	struct IDirectDrawSurface* pOurSurface;
	long ddrval;

// LINE 1027:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1036:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jbe    near ptr 0x0047009F;
// LINE 1037:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 1039:
	__asm        inc    dword ptr ds:[0x599DA4];
// LINE 1041:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00470144;
// LINE 1045:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 1046:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x004700BE;
// LINE 1047:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00470144;
// LINE 1050:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x64];
	__asm        mov    ddrval, eax;
	__asm        cmp    ddrval, 0x8876021C;
	__asm        jne    near ptr 0x004700EC;
	__asm        jmp    near ptr 0x004700BE;
// LINE 1051:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x00470115;
// LINE 1052:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00470101;
	__asm        push   0x59972C;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   0x0042D420;
// LINE 1053:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00470144;
// LINE 1055:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 1056:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 1058:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 1060:
	__asm        inc    dword ptr ds:[0x599DA4];
// LINE 1062:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00470144;
// LINE 1064:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00470149
unsigned long CBackBuffer::Unlock() {
	struct IDirectDrawSurface* pOurSurface;
	long ddrval;

// LINE 1080:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1089:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jbe    near ptr 0x00470179;
// LINE 1090:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1092:
	__asm        dec    dword ptr ds:[0x599DA4];
// LINE 1094:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0047021C;
// LINE 1098:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0047018D;
// LINE 1099:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0047021C;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 1102:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x004701AC;
// LINE 1103:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0047021C;
// LINE 1104:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x80];
	__asm        mov    ddrval, eax;
// LINE 1105:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x004701EE;
// LINE 1106:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004701DA;
	__asm        push   0x599758;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   0x0042D420;
// LINE 1107:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0047021C;
// LINE 1109:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 1111:
	__asm        dec    dword ptr ds:[0x599DA4];
// LINE 1114:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00470211;
// LINE 1115:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 1117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0047021C;
// LINE 1119:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00470221
void CBackBuffer::UpdatePalette(long start, long count, const struct SparkalColor* pColor) {
	int32_t i;
	struct tagPALETTEENTRY[256] palColors;

// LINE 1127:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x408;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1132:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x004702E5;
// LINE 1133:
	__asm        mov    eax, start;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x00470257;
	__asm        inc    i;
	__asm        mov    eax, count;
	__asm        add    eax, start;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x004702B8;
// LINE 1134:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x400], al;
// LINE 1135:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x3FF], al;
// LINE 1136:
	__asm        mov    eax, pColor;
	__asm        mov    al, [eax];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x3FE], al;
// LINE 1137:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x3FD], 5;
// LINE 1138:
	__asm        add    pColor, 4;
// LINE 1139:
	__asm        jmp    near ptr 0x00470251;
// LINE 1141:
	__asm        mov    eax, start;
	__asm        lea    eax, [ebp+eax*4-0x400];
	__asm        push   eax;
	__asm        mov    eax, count;
	__asm        push   eax;
	__asm        mov    eax, start;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 1145:
	__asm        jmp    near ptr 0x004702EA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004702f1
unsigned long CBackBuffer::FillRect(long nPaletteIndex, const struct SparkalRect* rectFill) {
	struct IDirectDrawSurface* pOurSurface;
	struct tagRECT rectFillTemp;
	long ddrval;
	struct tagRECT* rectToUse;

// LINE 1169:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x60];
	__asm        mov    pOurSurface, eax;
// LINE 1177:
	__asm        cmp    pOurSurface, 0;
	__asm        jne    near ptr 0x0047031F;
// LINE 1178:
	__asm        mov    eax, 0x65;
	__asm        jmp    near ptr 0x00470439;
// LINE 1180:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x58], 0x6C;
// LINE 1181:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0x64;
// LINE 1182:
	__asm        mov    eax, nPaletteIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 1184:
	__asm        cmp    rectFill, 0;
	__asm        je     near ptr 0x004703E2;
// LINE 1185:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax];
	__asm        mov    rectFillTemp.left, eax;
// LINE 1186:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+4];
	__asm        mov    rectFillTemp.top, eax;
// LINE 1187:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectFillTemp.right, eax;
// LINE 1188:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    rectFillTemp.bottom, eax;
// LINE 1189:
	__asm        lea    eax, rectFillTemp.left;
	__asm        mov    rectToUse, eax;
// LINE 1190:
	__asm        mov    eax, rectToUse;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jge    near ptr 0x0047038A;
// LINE 1191:
	__asm        mov    eax, rectToUse;
	__asm        mov    dword ptr [eax], 0;
// LINE 1192:
	__asm        mov    eax, rectToUse;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jge    near ptr 0x004703A1;
// LINE 1193:
	__asm        mov    eax, rectToUse;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1194:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToUse;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+0x24], ecx;
	__asm        jge    near ptr 0x004703BF;
// LINE 1195:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, rectToUse;
	__asm        mov    [ecx+8], eax;
// LINE 1196:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectToUse;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0x28], ecx;
	__asm        jge    near ptr 0x004703DD;
// LINE 1197:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, rectToUse;
	__asm        mov    [ecx+0xC], eax;
// LINE 1199:
	__asm        jmp    near ptr 0x004703EB;
// LINE 1200:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        mov    rectToUse, eax;
// LINE 1206:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC4;
	__asm        push   eax;
	__asm        push   0x1000400;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectToUse;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        push   eax;
	__asm        mov    eax, pOurSurface;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 1207:
	__asm        cmp    ddrval, 0;
	__asm        je     near ptr 0x00470432;
// LINE 1208:
	__asm        mov    eax, ddrval;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00470425;
	__asm        push   0x599788;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   0x0042D420;
// LINE 1211:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00470439;
// LINE 1212:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00470440
unsigned long CBackBuffer::SetFont(class MFont* mNewFont) {
// LINE 1224:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1225:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        je     near ptr 0x00470490;
// LINE 1226:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00470490;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0049FC4E;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047048B;
	__asm        jmp    near ptr 0x00470490;
// LINE 1227:
	__asm        mov    eax, mNewFont;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
// LINE 1228:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004704A0;
// LINE 1229:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004704a7
struct IDirectDrawSurface* CBackBuffer::GetDDSurface() {
// LINE 1243:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1244:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x004704CB;
// LINE 1245:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        jmp    near ptr 0x004704D6;
// LINE 1246:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        jmp    near ptr 0x004704D6;
// LINE 1247:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004704db
int32_t CBackBuffer::GetPaletteFromImage(char * imageFileName, struct SparkalColor* pColors) {
	struct tagBITMAPINFOHEADER biHeader;
	struct tagBITMAPFILEHEADER bfHeader;
	class PFile* fileImage;

// LINE 1255:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1263:
	__asm        push   0x110;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00470564;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        cmp    imageFileName, 0;
	__asm        je     near ptr 0x0047054D;
	__asm        mov    eax, imageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x00470554;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00470559;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    fileImage, eax;
	__asm        jmp    near ptr 0x0047056B;
	__asm        mov    fileImage, 0;
// LINE 1264:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A03A0;
// LINE 1265:
	__asm        mov    eax, fileImage;
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    near ptr 0x00470598;
	__asm        jmp    near ptr 0x004705E0;
	__asm        jmp    near ptr 0x00470598;
	__asm        jmp    near ptr 0x004705A7;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        jne    near ptr 0x004705E0;
// LINE 1266:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 1267:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004705D6;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x004705D6;
// LINE 1268:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x004706DF;
// LINE 1271:
	__asm        push   0xE;
	__asm        lea    eax, bfHeader.bfType;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004705FD;
// LINE 1272:
	__asm        push   0x28;
	__asm        lea    eax, biHeader.biSize;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0047061A;
// LINE 1278:
	__asm        cmp    biHeader.biClrUsed, 0;
	__asm        jne    near ptr 0x00470631;
// LINE 1279:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(biHeader.biBitCount);
	__asm        shl    eax, cl;
	__asm        mov    biHeader.biClrUsed, eax;
// LINE 1280:
	__asm        cmp    biHeader.biClrUsed, 0x100;
	__asm        ja     near ptr 0x00470648;
	__asm        cmp    biHeader.biClrUsed, 0;
	__asm        ja     near ptr 0x00470681;
// LINE 1281:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 1282:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00470677;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00470677;
// LINE 1283:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x004706DF;
// LINE 1285:
	__asm        mov    eax, biHeader.biClrUsed;
	__asm        shl    eax, 2;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, fileImage;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   0x00580B50;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004706A9;
// LINE 1286:
	__asm        mov    ecx, fileImage;
	__asm        call   0x004A04F0;
// LINE 1287:
	__asm        mov    eax, fileImage;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004706D8;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x004706D8;
// LINE 1288:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004706DF;
// LINE 1290:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004706e4
unsigned long CBackBuffer::DrawRectangleOutline(const struct SparkalRect& rectOutline, long nThickness) {
// LINE 1297:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1301:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 1305:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 1309:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 1313:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
	__asm        jmp    near ptr 0x0047079D;
// LINE 1314:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004707a4
unsigned long CBackBuffer::DrawRectangleOutlineUnclipped(const struct SparkalRect& rectOutline, long nThickness) {
// LINE 1321:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1325:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
// LINE 1329:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
// LINE 1333:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
// LINE 1337:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectOutline;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x50];
	__asm        jmp    near ptr 0x0047085D;
// LINE 1338:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00470864
unsigned long CBackBuffer::DrawLineUnclipped(long nStartX, long nStartY, long nEndX, long nEndY, long nThickness) {
	int32_t bufferWidth;
	int32_t j;
	int32_t i;
	int32_t temp;
	int32_t length;
	int32_t bufferHeight;
	char * address;

// LINE 1455:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x5C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1456:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 1463:
	__asm        jmp    near ptr 0x0047087F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    bufferWidth, eax;
// LINE 1464:
	__asm        jmp    near ptr 0x0047088D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    bufferHeight, eax;
// LINE 1467:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jne    near ptr 0x00470923;
// LINE 1469:
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jg     near ptr 0x004708C0;
// LINE 1471:
	__asm        mov    eax, nStartX;
	__asm        mov    temp, eax;
	__asm        mov    eax, nEndX;
	__asm        mov    nStartX, eax;
	__asm        mov    eax, temp;
	__asm        mov    nEndX, eax;
// LINE 1474:
	__asm        mov    eax, nEndX;
	__asm        sub    eax, nStartX;
	__asm        inc    eax;
	__asm        mov    length, eax;
// LINE 1476:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nStartY;
	__asm        add    eax, nStartX;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1477:
	__asm        mov    eax, nThickness;
	__asm        mov    i, eax;
// LINE 1478:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x50], eax;
	__asm        dec    i;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0047091E;
// LINE 1480:
	__asm        mov    eax, length;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1481:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1482:
	__asm        jmp    near ptr 0x004708E6;
// LINE 1486:
	__asm        jmp    near ptr 0x00470C09;
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jne    near ptr 0x004709AA;
// LINE 1488:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jg     near ptr 0x0047094D;
// LINE 1490:
	__asm        mov    eax, nStartY;
	__asm        mov    temp, eax;
	__asm        mov    eax, nEndY;
	__asm        mov    nStartY, eax;
	__asm        mov    eax, temp;
	__asm        mov    nEndY, eax;
// LINE 1492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nStartY;
	__asm        add    eax, nStartX;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1493:
	__asm        mov    eax, nEndY;
	__asm        sub    eax, nStartY;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 1494:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x54], eax;
	__asm        dec    i;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004709A5;
// LINE 1496:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1498:
	__asm        jmp    near ptr 0x0047096D;
// LINE 1501:
	__asm        jmp    near ptr 0x00470C09;
// LINE 1508:
// Block start:
	int32_t dinc2;
	int32_t yinc2;
	int32_t dinc1;
	int32_t yinc1;
	int32_t deltay;
	int32_t deltax;
	int32_t numpixels;
	int32_t y;
	int32_t x;
	int32_t xinc2;
	int32_t xinc1;
	int32_t d;
	__asm        mov    eax, nEndX;
	__asm        sub    eax, nStartX;
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        mov    deltax, eax;
// LINE 1509:
	__asm        mov    eax, nEndY;
	__asm        sub    eax, nStartY;
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        mov    deltay, eax;
// LINE 1511:
	__asm        mov    eax, deltax;
	__asm        cmp    deltay, eax;
	__asm        jg     near ptr 0x00470A12;
// LINE 1513:
	__asm        mov    eax, deltax;
	__asm        inc    eax;
	__asm        mov    numpixels, eax;
// LINE 1514:
	__asm        mov    eax, deltay;
	__asm        add    eax, eax;
	__asm        sub    eax, deltax;
	__asm        mov    d, eax;
// LINE 1515:
	__asm        mov    eax, deltay;
	__asm        add    eax, eax;
	__asm        mov    dinc1, eax;
// LINE 1516:
	__asm        mov    eax, deltay;
	__asm        sub    eax, deltax;
	__asm        add    eax, eax;
	__asm        mov    dinc2, eax;
// LINE 1517:
	__asm        mov    xinc1, 1;
// LINE 1518:
	__asm        mov    yinc1, 0;
// LINE 1520:
	__asm        jmp    near ptr 0x00470A45;
// LINE 1522:
	__asm        mov    eax, deltay;
	__asm        inc    eax;
	__asm        mov    numpixels, eax;
// LINE 1523:
	__asm        mov    eax, deltax;
	__asm        add    eax, eax;
	__asm        sub    eax, deltay;
	__asm        mov    d, eax;
// LINE 1524:
	__asm        mov    eax, deltax;
	__asm        add    eax, eax;
	__asm        mov    dinc1, eax;
// LINE 1525:
	__asm        mov    eax, deltax;
	__asm        sub    eax, deltay;
	__asm        add    eax, eax;
	__asm        mov    dinc2, eax;
// LINE 1526:
	__asm        mov    xinc1, 0;
// LINE 1527:
	__asm        mov    yinc1, 1;
// LINE 1531:
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jge    near ptr 0x00470A65;
// LINE 1533:
	__asm        mov    eax, xinc1;
	__asm        neg    eax;
	__asm        mov    xinc1, eax;
// LINE 1534:
	__asm        mov    xinc2, 0xFFFFFFFF;
// LINE 1536:
	__asm        jmp    near ptr 0x00470A6C;
// LINE 1537:
	__asm        mov    xinc2, 1;
// LINE 1539:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jge    near ptr 0x00470A8C;
// LINE 1541:
	__asm        mov    eax, yinc1;
	__asm        neg    eax;
	__asm        mov    yinc1, eax;
// LINE 1542:
	__asm        mov    yinc2, 0xFFFFFFFF;
// LINE 1544:
	__asm        jmp    near ptr 0x00470A93;
// LINE 1545:
	__asm        mov    yinc2, 1;
// LINE 1548:
	__asm        mov    eax, nStartX;
	__asm        mov    x, eax;
// LINE 1549:
	__asm        mov    eax, nStartY;
	__asm        mov    y, eax;
// LINE 1553:
	__asm        cmp    nThickness, 1;
	__asm        jne    near ptr 0x00470B1D;
// LINE 1555:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x00470AB8;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    numpixels, eax;
	__asm        jl     near ptr 0x00470B18;
// LINE 1557:
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        imul   ecx, y;
	__asm        mov    edx, this;
	__asm        add    ecx, [edx+0x10];
	__asm        mov    edx, x;
	__asm        mov    [ecx+edx], al;
// LINE 1559:
	__asm        cmp    d, 0;
	__asm        jge    near ptr 0x00470B01;
// LINE 1561:
	__asm        mov    eax, dinc1;
	__asm        add    d, eax;
// LINE 1562:
	__asm        mov    eax, xinc1;
	__asm        add    x, eax;
// LINE 1563:
	__asm        mov    eax, yinc1;
	__asm        add    y, eax;
// LINE 1565:
	__asm        jmp    near ptr 0x00470B13;
// LINE 1567:
	__asm        mov    eax, dinc2;
	__asm        add    d, eax;
// LINE 1568:
	__asm        mov    eax, xinc2;
	__asm        add    x, eax;
// LINE 1569:
	__asm        mov    eax, yinc2;
	__asm        add    y, eax;
// LINE 1571:
	__asm        jmp    near ptr 0x00470AB5;
// LINE 1573:
	__asm        jmp    near ptr 0x00470C09;
// LINE 1575:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x00470B2C;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    numpixels, eax;
	__asm        jl     near ptr 0x00470C09;
// LINE 1581:
	__asm        cmp    xinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00470B61;
// LINE 1582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, x;
	__asm        sub    eax, nThickness;
	__asm        inc    eax;
	__asm        mov    address, eax;
// LINE 1583:
	__asm        jmp    near ptr 0x00470B77;
// LINE 1584:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, x;
	__asm        mov    address, eax;
// LINE 1586:
	__asm        mov    eax, nThickness;
	__asm        mov    j, eax;
// LINE 1587:
	__asm        mov    eax, j;
	__asm        mov    [ebp-0x58], eax;
	__asm        dec    j;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00470BD1;
// LINE 1589:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1590:
	__asm        cmp    yinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00470BC3;
// LINE 1591:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    address, eax;
// LINE 1592:
	__asm        jmp    near ptr 0x00470BCC;
// LINE 1593:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1594:
	__asm        jmp    near ptr 0x00470B7D;
// LINE 1596:
	__asm        cmp    d, 0;
	__asm        jge    near ptr 0x00470BF2;
// LINE 1598:
	__asm        mov    eax, dinc1;
	__asm        add    d, eax;
// LINE 1599:
	__asm        mov    eax, xinc1;
	__asm        add    x, eax;
// LINE 1600:
	__asm        mov    eax, yinc1;
	__asm        add    y, eax;
// LINE 1602:
	__asm        jmp    near ptr 0x00470C04;
// LINE 1604:
	__asm        mov    eax, dinc2;
	__asm        add    d, eax;
// LINE 1605:
	__asm        mov    eax, xinc2;
	__asm        add    x, eax;
// LINE 1606:
	__asm        mov    eax, yinc2;
	__asm        add    y, eax;
// LINE 1608:
	__asm        jmp    near ptr 0x00470B29;
// LINE 1612:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 1613:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00470C1B;
// LINE 1614:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00470c22
unsigned long CBackBuffer::DrawLineClipped(long nStartX, long nStartY, long nEndX, long nEndY, long nThickness) {
	int32_t bufferWidth;
	int32_t j;
	int32_t i;
	int32_t temp;
	int32_t length;
	int32_t bufferHeight;
	char * address;

// LINE 1625:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1626:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 1633:
	__asm        jmp    near ptr 0x00470C49;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    bufferWidth, eax;
// LINE 1634:
	__asm        jmp    near ptr 0x00470C5A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    bufferHeight, eax;
// LINE 1637:
	__asm        mov    dword ptr [ebp-0x7C], 0;
	__asm        mov    dword ptr [ebp-0x80], 0;
	__asm        mov    dword ptr [ebp-0x94], 0;
	__asm        cmp    nStartX, 0;
	__asm        jge    near ptr 0x00470C8F;
	__asm        add    dword ptr [ebp-0x94], 4;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        cmp    eax, nStartX;
	__asm        jge    near ptr 0x00470CA3;
	__asm        add    dword ptr [ebp-0x94], 8;
	__asm        cmp    nStartY, 0;
	__asm        jge    near ptr 0x00470CB3;
	__asm        inc    dword ptr [ebp-0x94];
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        cmp    eax, nStartY;
	__asm        jge    near ptr 0x00470CC7;
	__asm        add    dword ptr [ebp-0x94], 2;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x00470CD8;
	__asm        mov    dword ptr [ebp-0x98], 0;
	__asm        cmp    nEndX, 0;
	__asm        jge    near ptr 0x00470CF3;
	__asm        add    dword ptr [ebp-0x98], 4;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        cmp    eax, nEndX;
	__asm        jge    near ptr 0x00470D07;
	__asm        add    dword ptr [ebp-0x98], 8;
	__asm        cmp    nEndY, 0;
	__asm        jge    near ptr 0x00470D17;
	__asm        inc    dword ptr [ebp-0x98];
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        cmp    eax, nEndY;
	__asm        jge    near ptr 0x00470D2B;
	__asm        add    dword ptr [ebp-0x98], 2;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x00470D3C;
	__asm        mov    eax, [ebp-0x90];
	__asm        or     eax, [ebp-0x88];
	__asm        jne    near ptr 0x00470D61;
	__asm        mov    dword ptr [ebp-0x7C], 1;
	__asm        mov    dword ptr [ebp-0x80], 1;
	__asm        jmp    near ptr 0x00470F8E;
	__asm        mov    eax, [ebp-0x90];
	__asm        test   [ebp-0x88], eax;
	__asm        je     near ptr 0x00470D7F;
	__asm        mov    dword ptr [ebp-0x80], 1;
	__asm        jmp    near ptr 0x00470F8E;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x00470D9A;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x00470DA3;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x78], eax;
	__asm        test   byte ptr [ebp-0x78], 1;
	__asm        je     near ptr 0x00470DDE;
	__asm        mov    eax, nEndX;
	__asm        sub    eax, nStartX;
	__asm        xor    ecx, ecx;
	__asm        sub    ecx, nStartY;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, nEndY;
	__asm        sub    ecx, nStartY;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, nStartX;
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x84], ecx;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    near ptr 0x00470E8E;
	__asm        test   byte ptr [ebp-0x78], 2;
	__asm        je     near ptr 0x00470E1B;
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        sub    eax, nStartY;
	__asm        mov    ecx, nEndX;
	__asm        sub    ecx, nStartX;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, nEndY;
	__asm        sub    ecx, nStartY;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, nStartX;
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x84], ecx;
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00470E8E;
	__asm        test   byte ptr [ebp-0x78], 8;
	__asm        je     near ptr 0x00470E58;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        sub    eax, nStartX;
	__asm        mov    ecx, nEndY;
	__asm        sub    ecx, nStartY;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, nEndX;
	__asm        sub    ecx, nStartX;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, nStartY;
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x8C], ecx;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00470E8E;
	__asm        test   byte ptr [ebp-0x78], 4;
	__asm        je     near ptr 0x00470E8E;
	__asm        mov    eax, nEndY;
	__asm        sub    eax, nStartY;
	__asm        xor    ecx, ecx;
	__asm        sub    ecx, nStartX;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, nEndX;
	__asm        sub    ecx, nStartX;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, nStartY;
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x8C], ecx;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        mov    eax, [ebp-0x88];
	__asm        cmp    [ebp-0x78], eax;
	__asm        jne    near ptr 0x00470F18;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    nStartX, eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    nStartY, eax;
	__asm        mov    dword ptr [ebp-0x9C], 0;
	__asm        cmp    nStartX, 0;
	__asm        jge    near ptr 0x00470ECA;
	__asm        add    dword ptr [ebp-0x9C], 4;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        cmp    eax, nStartX;
	__asm        jge    near ptr 0x00470EDE;
	__asm        add    dword ptr [ebp-0x9C], 8;
	__asm        cmp    nStartY, 0;
	__asm        jge    near ptr 0x00470EEE;
	__asm        inc    dword ptr [ebp-0x9C];
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        cmp    eax, nStartY;
	__asm        jge    near ptr 0x00470F02;
	__asm        add    dword ptr [ebp-0x9C], 2;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x00470F13;
	__asm        jmp    near ptr 0x00470F8E;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    nEndX, eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    nEndY, eax;
	__asm        mov    dword ptr [ebp-0xA0], 0;
	__asm        cmp    nEndX, 0;
	__asm        jge    near ptr 0x00470F45;
	__asm        add    dword ptr [ebp-0xA0], 4;
	__asm        mov    eax, bufferWidth;
	__asm        dec    eax;
	__asm        cmp    eax, nEndX;
	__asm        jge    near ptr 0x00470F59;
	__asm        add    dword ptr [ebp-0xA0], 8;
	__asm        cmp    nEndY, 0;
	__asm        jge    near ptr 0x00470F69;
	__asm        inc    dword ptr [ebp-0xA0];
	__asm        mov    eax, bufferHeight;
	__asm        dec    eax;
	__asm        cmp    eax, nEndY;
	__asm        jge    near ptr 0x00470F7D;
	__asm        add    dword ptr [ebp-0xA0], 2;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x00470F8E;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00470D3C;
	__asm        jmp    near ptr 0x00470F9D;
	__asm        cmp    dword ptr [ebp-0x7C], 1;
	__asm        jne    near ptr 0x00471548;
// LINE 1640:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jne    near ptr 0x00471040;
// LINE 1642:
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jg     near ptr 0x00470FD1;
// LINE 1644:
	__asm        mov    eax, nStartX;
	__asm        mov    temp, eax;
	__asm        mov    eax, nEndX;
	__asm        mov    nStartX, eax;
	__asm        mov    eax, temp;
	__asm        mov    nEndX, eax;
// LINE 1647:
	__asm        mov    eax, nEndX;
	__asm        sub    eax, nStartX;
	__asm        inc    eax;
	__asm        mov    length, eax;
// LINE 1649:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nStartY;
	__asm        add    eax, nStartX;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1650:
	__asm        mov    eax, nThickness;
	__asm        mov    i, eax;
// LINE 1651:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x68], eax;
	__asm        dec    i;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0047103B;
// LINE 1653:
	__asm        mov    eax, length;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1654:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1655:
	__asm        jmp    near ptr 0x00470FFD;
// LINE 1659:
	__asm        jmp    near ptr 0x00471543;
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jne    near ptr 0x004710D3;
// LINE 1661:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jg     near ptr 0x0047106A;
// LINE 1663:
	__asm        mov    eax, nStartY;
	__asm        mov    temp, eax;
	__asm        mov    eax, nEndY;
	__asm        mov    nStartY, eax;
	__asm        mov    eax, temp;
	__asm        mov    nEndY, eax;
// LINE 1665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nStartY;
	__asm        add    eax, nStartX;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1666:
	__asm        mov    eax, nEndY;
	__asm        sub    eax, nStartY;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 1667:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x6C], eax;
	__asm        dec    i;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x004710CE;
// LINE 1669:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1670:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1671:
	__asm        jmp    near ptr 0x00471090;
// LINE 1674:
	__asm        jmp    near ptr 0x00471543;
// LINE 1681:
// Block start:
	int32_t dinc2;
	int32_t yinc2;
	int32_t dinc1;
	int32_t yinc1;
	int32_t deltay;
	int32_t deltax;
	int32_t numpixels;
	int32_t y;
	int32_t x;
	int32_t xinc2;
	int32_t xinc1;
	int32_t d;
	__asm        mov    eax, nEndX;
	__asm        sub    eax, nStartX;
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        mov    deltax, eax;
// LINE 1682:
	__asm        mov    eax, nEndY;
	__asm        sub    eax, nStartY;
	__asm        push   eax;
	__asm        call   0x0056F300;
	__asm        add    esp, 4;
	__asm        mov    deltay, eax;
// LINE 1684:
	__asm        mov    eax, deltax;
	__asm        cmp    deltay, eax;
	__asm        jg     near ptr 0x0047113B;
// LINE 1686:
	__asm        mov    eax, deltax;
	__asm        inc    eax;
	__asm        mov    numpixels, eax;
// LINE 1687:
	__asm        mov    eax, deltay;
	__asm        add    eax, eax;
	__asm        sub    eax, deltax;
	__asm        mov    d, eax;
// LINE 1688:
	__asm        mov    eax, deltay;
	__asm        add    eax, eax;
	__asm        mov    dinc1, eax;
// LINE 1689:
	__asm        mov    eax, deltay;
	__asm        sub    eax, deltax;
	__asm        add    eax, eax;
	__asm        mov    dinc2, eax;
// LINE 1690:
	__asm        mov    xinc1, 1;
// LINE 1691:
	__asm        mov    yinc1, 0;
// LINE 1693:
	__asm        jmp    near ptr 0x0047116E;
// LINE 1695:
	__asm        mov    eax, deltay;
	__asm        inc    eax;
	__asm        mov    numpixels, eax;
// LINE 1696:
	__asm        mov    eax, deltax;
	__asm        add    eax, eax;
	__asm        sub    eax, deltay;
	__asm        mov    d, eax;
// LINE 1697:
	__asm        mov    eax, deltax;
	__asm        add    eax, eax;
	__asm        mov    dinc1, eax;
// LINE 1698:
	__asm        mov    eax, deltax;
	__asm        sub    eax, deltay;
	__asm        add    eax, eax;
	__asm        mov    dinc2, eax;
// LINE 1699:
	__asm        mov    xinc1, 0;
// LINE 1700:
	__asm        mov    yinc1, 1;
// LINE 1704:
	__asm        mov    eax, nStartX;
	__asm        cmp    nEndX, eax;
	__asm        jge    near ptr 0x0047118E;
// LINE 1706:
	__asm        mov    eax, xinc1;
	__asm        neg    eax;
	__asm        mov    xinc1, eax;
// LINE 1707:
	__asm        mov    xinc2, 0xFFFFFFFF;
// LINE 1709:
	__asm        jmp    near ptr 0x00471195;
// LINE 1710:
	__asm        mov    xinc2, 1;
// LINE 1712:
	__asm        mov    eax, nStartY;
	__asm        cmp    nEndY, eax;
	__asm        jge    near ptr 0x004711B5;
// LINE 1714:
	__asm        mov    eax, yinc1;
	__asm        neg    eax;
	__asm        mov    yinc1, eax;
// LINE 1715:
	__asm        mov    yinc2, 0xFFFFFFFF;
// LINE 1717:
	__asm        jmp    near ptr 0x004711BC;
// LINE 1718:
	__asm        mov    yinc2, 1;
// LINE 1721:
	__asm        mov    eax, nStartX;
	__asm        mov    x, eax;
// LINE 1722:
	__asm        mov    eax, nStartY;
	__asm        mov    y, eax;
// LINE 1726:
	__asm        cmp    nThickness, 1;
	__asm        jne    near ptr 0x0047124F;
// LINE 1728:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x004711E1;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    numpixels, eax;
	__asm        jl     near ptr 0x0047124A;
// LINE 1730:
	__asm        mov    eax, this;
	__asm        mov    al, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        imul   ecx, y;
	__asm        mov    edx, this;
	__asm        add    ecx, [edx+0x10];
	__asm        mov    edx, x;
	__asm        mov    [ecx+edx], al;
// LINE 1732:
	__asm        cmp    d, 0;
	__asm        jge    near ptr 0x00471233;
// LINE 1734:
	__asm        mov    eax, dinc1;
	__asm        add    d, eax;
// LINE 1735:
	__asm        mov    eax, xinc1;
	__asm        add    x, eax;
// LINE 1736:
	__asm        mov    eax, yinc1;
	__asm        add    y, eax;
// LINE 1738:
	__asm        jmp    near ptr 0x00471245;
// LINE 1740:
	__asm        mov    eax, dinc2;
	__asm        add    d, eax;
// LINE 1741:
	__asm        mov    eax, xinc2;
	__asm        add    x, eax;
// LINE 1742:
	__asm        mov    eax, yinc2;
	__asm        add    y, eax;
// LINE 1744:
	__asm        jmp    near ptr 0x004711DE;
// LINE 1746:
	__asm        jmp    near ptr 0x00471543;
// LINE 1761:
// Block start:
	int32_t minSafeY;
	int32_t maxSafeX;
	int32_t maxSafeY;
	int32_t minSafeX;
	__asm        mov    eax, nThickness;
	__asm        dec    eax;
	__asm        mov    minSafeX, eax;
// LINE 1762:
	__asm        mov    eax, nThickness;
	__asm        dec    eax;
	__asm        mov    minSafeY, eax;
// LINE 1763:
	__asm        mov    eax, bufferWidth;
	__asm        sub    eax, nThickness;
	__asm        mov    maxSafeX, eax;
// LINE 1764:
	__asm        mov    eax, bufferHeight;
	__asm        sub    eax, nThickness;
	__asm        mov    maxSafeY, eax;
// LINE 1768:
	__asm        cmp    numpixels, 0;
	__asm        je     near ptr 0x00471392;
	__asm        mov    eax, x;
	__asm        cmp    minSafeX, eax;
	__asm        jg     near ptr 0x00471392;
	__asm        mov    eax, x;
	__asm        cmp    maxSafeX, eax;
	__asm        jl     near ptr 0x00471392;
	__asm        mov    eax, y;
	__asm        cmp    minSafeY, eax;
	__asm        jg     near ptr 0x00471392;
	__asm        mov    eax, y;
	__asm        cmp    maxSafeY, eax;
	__asm        jl     near ptr 0x00471392;
// LINE 1771:
	__asm        cmp    xinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004712D8;
// LINE 1772:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, x;
	__asm        sub    eax, nThickness;
	__asm        inc    eax;
	__asm        mov    address, eax;
// LINE 1773:
	__asm        jmp    near ptr 0x004712F4;
// LINE 1774:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, x;
	__asm        mov    address, eax;
// LINE 1776:
	__asm        mov    eax, nThickness;
	__asm        mov    j, eax;
// LINE 1777:
	__asm        mov    eax, j;
	__asm        mov    [ebp-0x70], eax;
	__asm        dec    j;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x00471357;
// LINE 1779:
	__asm        mov    eax, nThickness;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1780:
	__asm        cmp    yinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00471346;
// LINE 1781:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    address, eax;
// LINE 1782:
	__asm        jmp    near ptr 0x00471352;
// LINE 1783:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1784:
	__asm        jmp    near ptr 0x004712FA;
// LINE 1786:
	__asm        cmp    d, 0;
	__asm        jge    near ptr 0x00471378;
// LINE 1788:
	__asm        mov    eax, dinc1;
	__asm        add    d, eax;
// LINE 1789:
	__asm        mov    eax, xinc1;
	__asm        add    x, eax;
// LINE 1790:
	__asm        mov    eax, yinc1;
	__asm        add    y, eax;
// LINE 1792:
	__asm        jmp    near ptr 0x0047138A;
// LINE 1794:
	__asm        mov    eax, dinc2;
	__asm        add    d, eax;
// LINE 1795:
	__asm        mov    eax, xinc2;
	__asm        add    x, eax;
// LINE 1796:
	__asm        mov    eax, yinc2;
	__asm        add    y, eax;
// LINE 1799:
	__asm        dec    numpixels;
// LINE 1800:
	__asm        jmp    near ptr 0x0047126F;
// LINE 1804:
	__asm        cmp    numpixels, 0;
	__asm        je     near ptr 0x00471543;
// LINE 1807:
// Block start:
	char * bufferEnd;
	__asm        cmp    xinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004713D7;
// LINE 1809:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, x;
	__asm        sub    ecx, nThickness;
	__asm        inc    ecx;
	__asm        test   ecx, ecx;
	__asm        jg     near ptr 0x004713C4;
	__asm        xor    ecx, ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1810:
	__asm        jmp    near ptr 0x00471403;
// LINE 1812:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, y;
	__asm        mov    ecx, bufferWidth;
	__asm        dec    ecx;
	__asm        mov    edx, x;
	__asm        cmp    ecx, edx;
	__asm        jl     near ptr 0x004713F5;
	__asm        mov    ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    address, eax;
// LINE 1814:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, bufferHeight;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    bufferEnd, eax;
// LINE 1816:
	__asm        mov    eax, nThickness;
	__asm        mov    j, eax;
// LINE 1818:
	__asm        mov    eax, j;
	__asm        mov    [ebp-0x74], eax;
	__asm        dec    j;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     near ptr 0x00471508;
// LINE 1822:
	__asm        mov    eax, this;
	__asm        mov    ecx, address;
	__asm        cmp    [eax+0x10], ecx;
	__asm        ja     near ptr 0x004714D8;
	__asm        mov    eax, bufferEnd;
	__asm        cmp    address, eax;
	__asm        jae    near ptr 0x004714D8;
// LINE 1825:
// Block start:
	int32_t nPixels;
	__asm        cmp    xinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0047149B;
// LINE 1827:
	__asm        mov    eax, nThickness;
	__asm        dec    eax;
	__asm        cmp    eax, x;
	__asm        jg     near ptr 0x00471475;
	__asm        mov    eax, nThickness;
	__asm        mov    nPixels, eax;
	__asm        jmp    near ptr 0x0047147C;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    nPixels, eax;
// LINE 1828:
	__asm        mov    eax, nPixels;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1830:
	__asm        jmp    near ptr 0x004714D8;
// LINE 1832:
	__asm        mov    eax, bufferWidth;
	__asm        sub    eax, nThickness;
	__asm        cmp    eax, x;
	__asm        jge    near ptr 0x004714B8;
	__asm        mov    eax, bufferWidth;
	__asm        sub    eax, x;
	__asm        mov    nPixels, eax;
	__asm        jmp    near ptr 0x004714BE;
	__asm        mov    eax, nThickness;
	__asm        mov    nPixels, eax;
// LINE 1833:
	__asm        mov    eax, nPixels;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, address;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 1837:
// Block end:
	__asm        cmp    yinc2, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004714F7;
// LINE 1838:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        neg    eax;
	__asm        sub    address, eax;
// LINE 1839:
	__asm        jmp    near ptr 0x00471503;
// LINE 1840:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    address, eax;
// LINE 1841:
	__asm        jmp    near ptr 0x00471422;
// LINE 1843:
	__asm        cmp    d, 0;
	__asm        jge    near ptr 0x00471529;
// LINE 1845:
	__asm        mov    eax, dinc1;
	__asm        add    d, eax;
// LINE 1846:
	__asm        mov    eax, xinc1;
	__asm        add    x, eax;
// LINE 1847:
	__asm        mov    eax, yinc1;
	__asm        add    y, eax;
// LINE 1849:
	__asm        jmp    near ptr 0x0047153B;
// LINE 1851:
	__asm        mov    eax, dinc2;
	__asm        add    d, eax;
// LINE 1852:
	__asm        mov    eax, xinc2;
	__asm        add    x, eax;
// LINE 1853:
	__asm        mov    eax, yinc2;
	__asm        add    y, eax;
// LINE 1856:
	__asm        dec    numpixels;
// LINE 1857:
// Block end:
	__asm        jmp    near ptr 0x00471392;
// LINE 1861:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x0047154F;
// LINE 1864:
	__asm        mov    i, 1;
// LINE 1867:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 1868:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00471567;
// LINE 1869:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}



// Contribution: 1:00070570-00070587 Module: 39, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00070590-000705d0 Module: 39, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000017e0-00001807 Module: 39, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005907e0
// ??_7IBackBuffer@@6B@


// Contribution: 2:00001808-0000186b Module: 39, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590808
// ??_7CBackBuffer@@6B@


// Contribution: 3:00002498-000027b5 Module: 39, 4 byte alignment, initialized_data, read, write, 
