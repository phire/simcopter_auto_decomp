// Module: Mtime.obj
// Source: C:\Copter\source\sparkal\Mtime.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class MDate (forward reference);
class MDate{
		enum HowToPrint {
			Normal = 0,
			Terse = 1,
			Numbers = 2,
			EuropeanNumbers = 3,
			European = 4,
		};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	// vtable: 0
	intro char * PrintString(char *);
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	// vtable: 4
	intro class MDate Previous(char *);
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};

// Type: class MTime (forward reference);

// Type: uint32_t;

// Type: class MDate;
class MDate{
		enum HowToPrint {
			Normal = 0,
			Terse = 1,
			Numbers = 2,
			EuropeanNumbers = 3,
			European = 4,
		};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	// vtable: 0
	intro char * PrintString(char *);
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	// vtable: 4
	intro class MDate Previous(char *);
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};

// Type: struct tm (forward reference);

// Type: long;

// Type: int32_t;

// Type: unsigned long;

// Type: char *;

// Type: class ostrstream;
class ostrstream : public virtual ios, public ostream, public virtual <indirect> ios
{
public:
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream();
	int32_t pcount();
	class strstreambuf* rdbuf();
	char * str();
};

// Type: class ostream (forward reference);
class ostream : public virtual ios
{
public:
	int32_t[0]* ios;
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(LfPointer @ 0x75e80:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x40d6
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x756d4:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ios
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x4067
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ios&));
	class ostream& operator<<(LfPointer @ 0x26c0:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x10e3
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x25dc:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ostream
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x10d6
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: char[80];

// Type: class ios (forward reference);
class ios{
		enum io_state {
			goodbit = 0,
			eofbit = 1,
			failbit = 2,
			badbit = 4,
		};
		enum open_mode {
			in = 1,
			out = 2,
			ate = 4,
			app = 8,
			trunc = 16,
			nocreate = 32,
			noreplace = 64,
			binary = 128,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
		enum __unnamed {
			skipws = 1,
			left = 2,
			right = 4,
			internal = 8,
			dec = 16,
			oct = 32,
			hex = 64,
			showbase = 128,
			showpoint = 256,
			uppercase = 512,
			showpos = 1024,
			scientific = 2048,
			fixed = 4096,
			unitbuf = 8192,
			stdio = 16384,
		};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
protected:
	void ios(const class ios&);
	void ios();
public:
	void ios(class streambuf*);
	// vtable: 0
	intro void ~ios();
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	class ostream* tie();
	class ostream* tie(class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	class ios& operator=(const class ios&);
	void init(class streambuf*);
		enum __unnamed {
			skipping = 0,
			tied = 1,
		};
protected:
	class streambuf* bp;
	int32_t state;
	int32_t ispecial;
	int32_t ospecial;
	int32_t isfx_special;
	int32_t osfx_special;
	int32_t x_delbuf;
	class ostream* x_tie;
	long x_flags;
	int32_t x_precision;
	char x_fill;
	int32_t x_width;
	static void (*)() stdioflush;
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long[8] x_statebuf;
	static int32_t fLockcInit;
	static struct _CRT_CRITICAL_SECTION x_lockc;
	int32_t LockFlg;
	struct _CRT_CRITICAL_SECTION x_lock;
};



// Contribution: 1:0003b710-0003c389 Module: 58, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043c710
// $E14

// FUNCTION: COPTER_D 0x0043c725
// $E13

// FUNCTION: COPTER_D 0x0043c73f
void MDate::MDate(const class MTime& t) {
// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 56:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jbe    near ptr 0x0043C765;
	__asm        jmp    near ptr 0x0043C76A;
	__asm        jmp    near ptr 0x0043C79A;
	__asm        jmp    near ptr 0x0043C779;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0043C79A;
	__asm        mov    ecx, t;
	__asm        call   0x0043C8CE;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        add    eax, 0x24DB1A;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043C7A4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 57:
	__asm        jmp    near ptr 0x0043C7A9;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043c7b3
// $E17

// FUNCTION: COPTER_D 0x0043c7c8
// $E16

// FUNCTION: COPTER_D 0x0043c7e6
// $E20

// FUNCTION: COPTER_D 0x0043c7fb
// $E19

// FUNCTION: COPTER_D 0x0043c81c
int  MTime::AssertMDate(const class MDate& date) {
// LINE 76:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 77:
	__asm        mov    eax, date;
	__asm        mov    ecx, ds:[0x5C360C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0043C853;
	__asm        mov    eax, date;
	__asm        mov    ecx, ds:[0x5C361C];
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x0043C853;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043C855;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043C85D;
	__asm        mov    eax, [ebp-4];
	__asm        jmp    near ptr 0x0043C862;
// LINE 78:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043c867
class MTime  MTime::BuildLocal(const class MDate& date, uint32_t h) {
// LINE 88:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 90:
	__asm        jmp    near ptr 0x0043C875;
	__asm        mov    eax, date;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, ds:[0x5C360C];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 7;
	__asm        mov    ecx, h;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        add    eax, ds:[0x5C0870];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0043C8C1;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043C8C9;
// LINE 91:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043c8ce
unsigned long  MTime::LocalSecs() {
	class MTime local_time;

// LINE 101:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        sub    eax, ds:[0x5C0870];
	__asm        mov    [ebp-0xC], eax;
// LINE 102:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    local_time.<MTime+0x00:4>, eax;
	__asm        jmp    near ptr 0x0043C8FA;
// LINE 103:
	__asm        lea    ecx, local_time.<MTime+0x00:None>;
	__asm        call   0x0043CD53;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043C911;
// LINE 104:
	__asm        add    local_time.<MTime+0x00:4>, 0xE10;
// LINE 105:
	__asm        mov    eax, local_time.<MTime+0x00:4>;
	__asm        jmp    near ptr 0x0043C919;
// LINE 106:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043c91e
class MTime  MTime::BeginDST(uint32_t year) {
	class MDate endApril;

// LINE 119:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x5C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 120:
	__asm        cmp    year, 0x7C2;
	__asm        jbe    near ptr 0x0043C992;
// LINE 121:
// Block start:
	class MDate endMarch;
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   3;
	__asm        push   0x1F;
	__asm        lea    ecx, endMarch.<vftable>;
	__asm        call   0x004BC589;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, endMarch.<vftable>;
	__asm        call   0x004BCD02;
	__asm        mov    [ebp-0x5C], eax;
// LINE 122:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, 7;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x30], 0x58F3E8;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0043C973;
	__asm        jmp    near ptr 0x0043C978;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        call   0x0043C867;
	__asm        add    esp, 0xC;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CA31;
// LINE 126:
// Block end:
	__asm        cmp    year, 0x7B6;
	__asm        jne    near ptr 0x0043C9C7;
// LINE 127:
	__asm        push   2;
	__asm        push   0x7B6;
	__asm        push   1;
	__asm        push   6;
	__asm        lea    ecx, [ebp-0x3C];
	__asm        call   0x004BC589;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        call   0x0043C867;
	__asm        add    esp, 0xC;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CA31;
// LINE 128:
	__asm        cmp    year, 0x7B7;
	__asm        jne    near ptr 0x0043C9FC;
// LINE 129:
	__asm        push   2;
	__asm        push   0x7B7;
	__asm        push   2;
	__asm        push   0x17;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   0x004BC589;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        call   0x0043C867;
	__asm        add    esp, 0xC;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CA31;
// LINE 131:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   4;
	__asm        push   0x1E;
	__asm        lea    ecx, endApril.<vftable>;
	__asm        call   0x004BC589;
// LINE 132:
	__asm        push   2;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        lea    ecx, endApril.<vftable>;
	__asm        call   0x004BCD02;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        call   0x0043C867;
	__asm        add    esp, 0xC;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CA31;
// LINE 133:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043ca36
class MTime  MTime::EndDST(uint32_t year) {
	class MDate endOctober;

// LINE 147:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 148:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   0xA;
	__asm        push   0x1F;
	__asm        lea    ecx, endOctober.<vftable>;
	__asm        call   0x004BC589;
// LINE 149:
	__asm        push   1;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        lea    ecx, endOctober.<vftable>;
	__asm        call   0x004BCD02;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        call   0x0043C867;
	__asm        add    esp, 0xC;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CA74;
// LINE 150:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043ca79
 MTime::MTime() {
	class MDate today;
	struct tm* t;
	long ltime;

// LINE 163:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 165:
	__asm        lea    eax, ltime;
	__asm        push   eax;
	__asm        call   0x0056EF00;
	__asm        add    esp, 4;
// LINE 166:
	__asm        lea    eax, ltime;
	__asm        push   eax;
	__asm        call   0x0056ECA0;
	__asm        add    esp, 4;
	__asm        mov    t, eax;
// LINE 172:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        lea    ecx, today.<vftable>;
	__asm        call   0x004BC589;
// LINE 177:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, today.<vftable>;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x0043CB4B;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 178:
	__asm        jmp    near ptr 0x0043CAFA;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cb02
 MTime::MTime(uint32_t h, uint32_t m, uint32_t s) {
// LINE 190:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 191:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        mov    eax, h;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x004BC460;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0043CB4B;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 192:
	__asm        jmp    near ptr 0x0043CB41;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0043cb4b
 MTime::MTime(const class MDate& date, uint32_t h, uint32_t m, uint32_t s) {
// LINE 212:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 213:
	__asm        mov    eax, date;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jbe    near ptr 0x0043CB73;
	__asm        jmp    near ptr 0x0043CB78;
	__asm        jmp    near ptr 0x0043CC43;
	__asm        jmp    near ptr 0x0043CB87;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0043CC43;
// LINE 216:
	__asm        jmp    near ptr 0x0043CB8C;
	__asm        mov    eax, date;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, ds:[0x5C360C];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 7;
	__asm        mov    ecx, h;
	__asm        lea    ecx, [ecx+ecx*4-5];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    ecx, m;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        add    eax, ecx;
	__asm        add    eax, s;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 217:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0043CBE5;
// LINE 218:
	__asm        mov    eax, ds:[0x5C0870];
	__asm        mov    ecx, this;
	__asm        add    [ecx], eax;
// LINE 220:
	__asm        mov    ecx, this;
	__asm        call   0x0043CD53;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043CC1C;
// LINE 221:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax], 0xE10;
// LINE 222:
	__asm        mov    ecx, this;
	__asm        call   0x0043CD53;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043CC17;
// LINE 223:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax], 0xE10;
// LINE 225:
	__asm        jmp    near ptr 0x0043CC3E;
// LINE 226:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax], 0xE10;
// LINE 227:
	__asm        mov    ecx, this;
	__asm        call   0x0043CD53;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043CC3E;
// LINE 228:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 231:
	__asm        jmp    near ptr 0x0043CC4C;
// LINE 232:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 233:
	__asm        jmp    near ptr 0x0043CC51;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0043cc5b
int  MTime::SetShouldPrinMDate(int32_t bNewPrinMDate) {
	int32_t bPreviousPrinMDate;

// LINE 241:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 242:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    bPreviousPrinMDate, eax;
// LINE 243:
	__asm        mov    eax, bNewPrinMDate;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 244:
	__asm        mov    eax, bPreviousPrinMDate;
	__asm        jmp    near ptr 0x0043CC81;
// LINE 245:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043cc88
int  MTime::CompareTo(const class MTime& t) {
	unsigned long diff;

// LINE 253:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, t;
	__asm        sub    eax, [ecx];
	__asm        mov    diff, eax;
// LINE 255:
	__asm        cmp    diff, 0;
	__asm        jne    near ptr 0x0043CCB2;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043CCCB;
	__asm        cmp    diff, 0;
	__asm        jbe    near ptr 0x0043CCC6;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043CCCB;
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0043CCD0;
// LINE 256:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043ccd7
unsigned int  MTime::Hash() {
// LINE 264:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        jmp    near ptr 0x0043CCED;
// LINE 266:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043ccf2
unsigned int  MTime::Hour() {
// LINE 277:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 278:
	__asm        mov    ecx, this;
	__asm        call   0x0043C8CE;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    near ptr 0x0043CD1F;
// LINE 279:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cd24
unsigned int  MTime::HourGMT() {
// LINE 290:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    near ptr 0x0043CD4E;
// LINE 292:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cd53
int  MTime::IsDST() {
	uint32_t daycount;
	uint32_t year;

// LINE 304:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 305:
	__asm        cmp    dword ptr ds:[0x5C0874], 0;
	__asm        jne    near ptr 0x0043CD73;
// LINE 306:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043CE25;
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    daycount, eax;
// LINE 309:
	__asm        push   0;
	__asm        mov    eax, daycount;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x004BC4D1;
	__asm        mov    ecx, eax;
	__asm        call   0x004BCDB1;
	__asm        mov    year, eax;
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0043C91E;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x28], eax;
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0043CDC4;
	__asm        jmp    near ptr 0x0043CDC9;
	__asm        jmp    near ptr 0x0043CE1E;
	__asm        jmp    near ptr 0x0043CDD8;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0043CE1E;
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0043CA36;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jae    near ptr 0x0043CE00;
	__asm        jmp    near ptr 0x0043CE05;
	__asm        jmp    near ptr 0x0043CE1E;
	__asm        jmp    near ptr 0x0043CE14;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0043CE1E;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043CE20;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043CE25;
// LINE 314:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043ce2a
class MTime  MTime::MaxTime(const class MTime& t) {
// LINE 325:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    ecx, t;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jbe    near ptr 0x0043CE4B;
	__asm        jmp    near ptr 0x0043CE50;
	__asm        jmp    near ptr 0x0043CE7C;
	__asm        jmp    near ptr 0x0043CE5F;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0043CE7C;
// LINE 327:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, __$ReturnUdt;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CE94;
// LINE 328:
	__asm        jmp    near ptr 0x0043CE94;
// LINE 329:
	__asm        mov    eax, t;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, __$ReturnUdt;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CE94;
// LINE 330:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0043ce9b
class MTime  MTime::MinTime(const class MTime& t) {
// LINE 341:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    ecx, t;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jae    near ptr 0x0043CEBC;
	__asm        jmp    near ptr 0x0043CEC1;
	__asm        jmp    near ptr 0x0043CEED;
	__asm        jmp    near ptr 0x0043CED0;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0043CEED;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, __$ReturnUdt;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CF05;
// LINE 344:
	__asm        jmp    near ptr 0x0043CF05;
// LINE 345:
	__asm        mov    eax, t;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, __$ReturnUdt;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0043CF05;
// LINE 346:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0043cf0c
unsigned int  MTime::Minute() {
// LINE 357:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 358:
	__asm        mov    ecx, this;
	__asm        call   0x0043C8CE;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    near ptr 0x0043CF44;
// LINE 359:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cf49
unsigned int  MTime::MinuteGMT() {
// LINE 370:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    near ptr 0x0043CF7E;
// LINE 372:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cf83
unsigned int  MTime::Second() {
// LINE 382:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 383:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, edx;
	__asm        jmp    near ptr 0x0043CFBA;
// LINE 384:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043cfbf
char *  MTime::PrintString(char * szTime) {
	class ostrstream strtemp;

// LINE 396:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 397:
	__asm        push   1;
	__asm        push   2;
	__asm        push   4;
	__asm        mov    eax, szTime;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   0x0056C780;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   0x0043D02B;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x60], eax;
// LINE 398:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043D001;
// LINE 399:
	__asm        mov    eax, szTime;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0043D00C;
	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   0x0056C8D0;
	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   0x0056B140;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    near ptr 0x0043D024;
// LINE 400:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043d02b
class ostream& operator<<(class ostream& s, const class MTime& t) {
	uint32_t hh;
	class ostrstream out;
	char[80] buf;

// LINE 407:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 413:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056C780;
// LINE 417:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0043D084;
// LINE 418:
	__asm        push   0x598574;
	__asm        mov    eax, t;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xB8];
	__asm        call   0x0043C73F;
	__asm        push   eax;
	__asm        lea    eax, out.ios;
	__asm        push   eax;
	__asm        call   0x004BD39A;
	__asm        add    esp, 8;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
// LINE 420:
	__asm        mov    ecx, t;
	__asm        call   0x0043CCF2;
	__asm        mov    hh, eax;
// LINE 423:
	__asm        cmp    hh, 0xC;
	__asm        jbe    near ptr 0x0043D0B3;
	__asm        mov    eax, hh;
	__asm        sub    eax, 0xC;
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    near ptr 0x0043D0BF;
	__asm        mov    eax, hh;
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    near ptr 0x0043D0DC;
	__asm        mov    dword ptr [ebp-0xD8], 0x43D390;
	__asm        mov    dword ptr [ebp-0xD4], 0x30;
	__asm        jmp    near ptr 0x0043D0F5;
	__asm        jmp    near ptr 0x0043D0FA;
	__asm        mov    dword ptr [ebp-0xD0], 0x43D3C0;
	__asm        mov    dword ptr [ebp-0xCC], 2;
	__asm        jmp    near ptr 0x0043D113;
	__asm        jmp    near ptr 0x0043D118;
	__asm        push   0x3A;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   0x0056A670;
	__asm        mov    [ebp-0xF0], eax;
	__asm        cmp    dword ptr [ebp-0xF0], 0;
	__asm        jne    near ptr 0x0043D147;
	__asm        mov    dword ptr [ebp-0xEC], 0;
	__asm        jmp    near ptr 0x0043D15E;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xD8];
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0043D17A;
	__asm        cmp    dword ptr [ebp-0xF0], 0;
	__asm        jne    near ptr 0x0043D196;
	__asm        mov    dword ptr [ebp-0xF4], 0;
	__asm        jmp    near ptr 0x0043D1AD;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xD0];
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0043D1C9;
	__asm        mov    ecx, t;
	__asm        call   0x0043CF0C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF0];
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x0043D1E8;
	__asm        mov    dword ptr [ebp-0xC8], 0x43D3C0;
	__asm        mov    dword ptr [ebp-0xC4], 2;
	__asm        jmp    near ptr 0x0043D201;
	__asm        jmp    near ptr 0x0043D206;
	__asm        push   0x3A;
	__asm        mov    ecx, [ebp-0xF8];
	__asm        call   0x0056A670;
	__asm        mov    [ebp-0x100], eax;
	__asm        cmp    dword ptr [ebp-0x100], 0;
	__asm        jne    near ptr 0x0043D235;
	__asm        mov    dword ptr [ebp-0xFC], 0;
	__asm        jmp    near ptr 0x0043D24C;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x100];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xC8];
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0043D268;
	__asm        mov    ecx, t;
	__asm        call   0x0043CF83;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x100];
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    near ptr 0x0043D287;
	__asm        mov    dword ptr [ebp-0xC0], 0x43D390;
	__asm        mov    dword ptr [ebp-0xBC], 0x20;
	__asm        jmp    near ptr 0x0043D2A0;
	__asm        jmp    near ptr 0x0043D2A5;
	__asm        push   0x20;
	__asm        mov    ecx, [ebp-0x104];
	__asm        call   0x0056A670;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        jne    near ptr 0x0043D2D4;
	__asm        mov    dword ptr [ebp-0x108], 0;
	__asm        jmp    near ptr 0x0043D2EB;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xC0];
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0043D307;
	__asm        mov    eax, 0x59857C;
	__asm        mov    ecx, 0x598578;
	__asm        xor    edx, edx;
	__asm        cmp    hh, 0xC;
	__asm        setae  dl;
	__asm        dec    edx;
	__asm        sub    ecx, eax;
	__asm        and    edx, ecx;
	__asm        add    edx, eax;
	__asm        push   edx;
	__asm        lea    ecx, out.ios;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xE8], eax;
// LINE 424:
	__asm        mov    eax, [ebp-0xE8];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043D34A;
// LINE 429:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00569960;
// LINE 430:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x0043D364;
	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   0x0056C8D0;
	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   0x0056B140;
	__asm        mov    eax, [ebp-0xDC];
	__asm        jmp    near ptr 0x0043D385;
// LINE 431:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:0003c390-0003c3bc Module: 58, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043d390
// __setfill



// Contribution: 1:0003c3c0-0003c3ec Module: 58, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043d3c0
// __setw



// Contribution: 3:00000028-00000033 Module: 58, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597028
// $S15
// LOCAL: COPTER_D 0x0059702c
// $S18
// LOCAL: COPTER_D 0x00597030
// $S21


// Contribution: 3:00001574-0000157e Module: 58, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0002c600-0002c623 Module: 58, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c3608
// MTime::RefDate
// GLOBAL: COPTER_D 0x005c3618
// MTime::MaxDate
