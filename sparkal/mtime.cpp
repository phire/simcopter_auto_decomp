// Module: Mtime.obj
// Source: C:\Copter\source\sparkal\Mtime.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void ();

// Type: /*packed*/ class MDate;
// VTABLE: COPTER_D 0x0058f3e8
class MDate{ // packed(0xc bytes) TI: 0x1fed
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const /*unpacked*/ class MTime&);
	void MDate(/*unpacked*/ class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const /*packed*/ class MDate&, const /*packed*/ class MDate&);
	int32_t CompareTo(const /*packed*/ class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	/*packed*/ class MDate MaxDate(const /*packed*/ class MDate&);
	/*packed*/ class MDate MinDate(const /*packed*/ class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	/*packed*/ class MDate Previous(uint32_t);
	virtual /*packed*/ class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const /*packed*/ class MDate&);
	int32_t operator<=(const /*packed*/ class MDate&);
	int32_t operator>(const /*packed*/ class MDate&);
	int32_t operator>=(const /*packed*/ class MDate&);
	int32_t operator==(const /*packed*/ class MDate&);
	int32_t operator!=(const /*packed*/ class MDate&);
	unsigned long operator-(const /*packed*/ class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(/*unpacked*/ class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	/*+0x4*/   unsigned long Julnum;
	/*+0x8*/   enum MDate::HowToPrint PrintOption;
};

// Type: void;

// Type: /*unpacked*/ class MTime (forward reference);
// MTime Class implementation not found

// Type: /*packed*/ class MDate (forward reference);
// VTABLE: COPTER_D 0x0058f3e8
class MDate{ // packed(0xc bytes) TI: 0x284c
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const /*unpacked*/ class MTime&);
	void MDate(/*unpacked*/ class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const /*packed*/ class MDate&, const /*packed*/ class MDate&);
	int32_t CompareTo(const /*packed*/ class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	/*packed*/ class MDate MaxDate(const /*packed*/ class MDate&);
	/*packed*/ class MDate MinDate(const /*packed*/ class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	/*packed*/ class MDate Previous(uint32_t);
	virtual /*packed*/ class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const /*packed*/ class MDate&);
	int32_t operator<=(const /*packed*/ class MDate&);
	int32_t operator>(const /*packed*/ class MDate&);
	int32_t operator>=(const /*packed*/ class MDate&);
	int32_t operator==(const /*packed*/ class MDate&);
	int32_t operator!=(const /*packed*/ class MDate&);
	unsigned long operator-(const /*packed*/ class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(/*unpacked*/ class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	/*+0x4*/   unsigned long Julnum;
	/*+0x8*/   enum MDate::HowToPrint PrintOption;
};

// Type: uint32_t;

// Type: /*packed*/ struct tm (forward reference);
struct tm{ // packed(0x24 bytes) TI: 0x2033
	/*+0x0*/   int32_t tm_sec;
	/*+0x4*/   int32_t tm_min;
	/*+0x8*/   int32_t tm_hour;
	/*+0xc*/   int32_t tm_mday;
	/*+0x10*/  int32_t tm_mon;
	/*+0x14*/  int32_t tm_year;
	/*+0x18*/  int32_t tm_wday;
	/*+0x1c*/  int32_t tm_yday;
	/*+0x20*/  int32_t tm_isdst;
};

// Type: long;

// Type: int32_t;

// Type: unsigned long;

// Type: char *;

// Type: /*unpacked*/ class ostrstream;
// VTABLE: COPTER_D 0x00593b34
class ostrstream : public ostream, public virtual <indirect> ios
{ // not packed(0x58 bytes) TI: 0x1fc2
public:
	<NoType> ios;
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream() /* override */;
	int32_t pcount();
	/*unpacked*/ class strstreambuf* rdbuf();
	char * str();
};

// Type: /*unpacked*/ class ostream (forward reference);
// ostream Class implementation not found

// Type: char;

// Type: /*unpacked*/ class ios (forward reference);
// VTABLE: COPTER_D 0x00593ad4
class ios{ // not packed(0x50 bytes) TI: 0x4126
	enum io_state {
		goodbit = 0,
		eofbit = 1,
		failbit = 2,
		badbit = 4,
	};
	enum open_mode {
		in = 1,
		out = 2,
		ate = 4,
		app = 8,
		trunc = 16,
		nocreate = 32,
		noreplace = 64,
		binary = 128,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
	enum /* __unnamed */ {
		skipws = 1,
		left = 2,
		right = 4,
		internal = 8,
		dec = 16,
		oct = 32,
		hex = 64,
		showbase = 128,
		showpoint = 256,
		uppercase = 512,
		showpos = 1024,
		scientific = 2048,
		fixed = 4096,
		unitbuf = 8192,
		stdio = 16384,
	};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
	void ios(const /*unpacked*/ class ios&);
	void ios();
	void ios(/*unpacked*/ class streambuf*);
	virtual void ~ios(); // vtable+0x0
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	/*unpacked*/ class ostream* tie();
	/*unpacked*/ class ostream* tie(/*unpacked*/ class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	/*unpacked*/ class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	/*unpacked*/ class ios& operator=(const /*unpacked*/ class ios&);
	void init(/*unpacked*/ class streambuf*);
	enum /* __unnamed */ {
		skipping = 0,
		tied = 1,
	};
protected:
	/*+0x4*/   /*unpacked*/ class streambuf *bp;
	/*+0x8*/   int32_t state;
	/*+0xc*/   int32_t ispecial;
	/*+0x10*/  int32_t ospecial;
	/*+0x14*/  int32_t isfx_special;
	/*+0x18*/  int32_t osfx_special;
	/*+0x1c*/  int32_t x_delbuf;
	/*+0x20*/  /*unpacked*/ class ostream *x_tie;
	/*+0x24*/  long x_flags;
	/*+0x28*/  int32_t x_precision;
	/*+0x2c*/  char x_fill; // 0x1 bytes
	/*+0x30*/  int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	/*unpacked*/ struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lockc;
	/*+0x34*/  int32_t LockFlg;
	/*+0x38*/  /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lock; // 0x18 bytes
};

// Type: /*unpacked*/ class ios;
// VTABLE: COPTER_D 0x00593ad4
class ios{ // not packed(0x50 bytes) TI: 0x4126
	enum io_state {
		goodbit = 0,
		eofbit = 1,
		failbit = 2,
		badbit = 4,
	};
	enum open_mode {
		in = 1,
		out = 2,
		ate = 4,
		app = 8,
		trunc = 16,
		nocreate = 32,
		noreplace = 64,
		binary = 128,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
	enum /* __unnamed */ {
		skipws = 1,
		left = 2,
		right = 4,
		internal = 8,
		dec = 16,
		oct = 32,
		hex = 64,
		showbase = 128,
		showpoint = 256,
		uppercase = 512,
		showpos = 1024,
		scientific = 2048,
		fixed = 4096,
		unitbuf = 8192,
		stdio = 16384,
	};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
	void ios(const /*unpacked*/ class ios&);
	void ios();
	void ios(/*unpacked*/ class streambuf*);
	virtual void ~ios(); // vtable+0x0
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	/*unpacked*/ class ostream* tie();
	/*unpacked*/ class ostream* tie(/*unpacked*/ class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	/*unpacked*/ class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	/*unpacked*/ class ios& operator=(const /*unpacked*/ class ios&);
	void init(/*unpacked*/ class streambuf*);
	enum /* __unnamed */ {
		skipping = 0,
		tied = 1,
	};
protected:
	/*+0x4*/   /*unpacked*/ class streambuf *bp;
	/*+0x8*/   int32_t state;
	/*+0xc*/   int32_t ispecial;
	/*+0x10*/  int32_t ospecial;
	/*+0x14*/  int32_t isfx_special;
	/*+0x18*/  int32_t osfx_special;
	/*+0x1c*/  int32_t x_delbuf;
	/*+0x20*/  /*unpacked*/ class ostream *x_tie;
	/*+0x24*/  long x_flags;
	/*+0x28*/  int32_t x_precision;
	/*+0x2c*/  char x_fill; // 0x1 bytes
	/*+0x30*/  int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	/*unpacked*/ struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lockc;
	/*+0x34*/  int32_t LockFlg;
	/*+0x38*/  /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lock; // 0x18 bytes
};



// Contribution: 1:0003b710-0003c389 Module: 58, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c710
static void $E14() {

	__asm        call   $E13;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c725
static void $E13() {

	__asm        call   _tzset;
	__asm        jmp    _T10;
_T10:
	return;
}

// FUNCTION: COPTER_D 0x0043c73f
void MDate::MDate(const /*unpacked*/ class MTime& t) {

	this-><vftable> = 0x58f3e8;
// LINE 56:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jbe    _T26;

	__asm        jmp    _T2b;
_T26:
	__asm        jmp    _T5b;
_T2b:
	__asm        jmp    _T3a;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5b;
_T3a:
	__asm        mov    ecx, t;
	__asm        call   MTime::LocalSecs;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        add    eax, 0x24DB1A;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T65;
_T5b:
	this->Julnum = 0x0;
// LINE 57:
_T65:
	return;

	__asm        mov    eax, this;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c7b3
static void $E17() {

	__asm        call   $E16;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c7c8
static void $E16() {

	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, 0x5C3608;
	__asm        call   MDate::MDate;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c7e6
static void $E20() {

	__asm        call   $E19;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0043c7fb
static void $E19() {

	__asm        push   0;
	__asm        push   0xC22D;
	__asm        mov    ecx, 0x5C3618;
	__asm        call   MDate::MDate;
	__asm        jmp    __RETURN;
__RETURN:
}

// FUNCTION: COPTER_D 0x0043c81c
int32_t MTime::AssertMDate(const /*packed*/ class MDate& date) {
// LINE 77:
	__asm        mov    eax, date;
	__asm        mov    ecx, MTime::RefDate.Julnum;
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T37;

	__asm        mov    eax, date;
	__asm        mov    ecx, MTime::MaxDate.Julnum;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     _T37;

	__asm        mov    eax, 1;
	__asm        jmp    _T39;
_T37:
	__asm        xor    eax, eax;
_T39:
	__asm        jmp    _T41;

	__asm        mov    eax, [ebp-4];
_T41:
	__asm        jmp    __RETURN;
// LINE 78:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043c867
class MTime MTime::BuildLocal(const /*packed*/ class MDate& date, uint32_t h) {
// LINE 90:
	__asm        jmp    _T0e;
_T0e:
	__asm        mov    eax, date;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, MTime::RefDate.Julnum;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 7;
	__asm        mov    ecx, h;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        add    eax, _timezone;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx], eax;
	__asm        jmp    _T5a;
_T5a:
	return reinterpret_cast<uint32_t>(__$ReturnUdt);
// LINE 91:
}

// FUNCTION: COPTER_D 0x0043c8ce
unsigned long MTime::LocalSecs() {
	/*bp-0x8*/   /*unpacked*/ class MTime local_time;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        sub    eax, _timezone;
	__asm        mov    [ebp-0xC], eax;
// LINE 102:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    local_time<MTime+0x00:4>, eax;
	__asm        jmp    _T2c;
// LINE 103:
_T2c:
	__asm        lea    ecx, local_time<MTime+0x00:None>;
	__asm        call   MTime::IsDST;
	__asm        test   eax, eax;
	__asm        je     _T43;
// LINE 104:
	local_time<MTime+0x00:4> += 0xe10;
// LINE 105:
_T43:
	return local_time<MTime+0x00:4>;
// LINE 106:
}

// FUNCTION: COPTER_D 0x0043c91e
class MTime MTime::BeginDST(uint32_t year) {
	/*bp-0xc*/   /*packed*/ class MDate endApril; // 0xc bytes

// LINE 120:
	__asm        cmp    year, 0x7C2;
	__asm        jbe    _T74;
// LINE 121:
// Block start:
	/*bp-0x18*/  /*packed*/ class MDate endMarch; // 0xc bytes
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   3;
	__asm        push   0x1F;
	__asm        lea    ecx, endMarch<vftable>;
	__asm        call   MDate::MDate;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, endMarch<vftable>;
	__asm        call   MDate::Previous;
	__asm        mov    [ebp-0x5C], eax;
// LINE 122:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, 7;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x30], 0x58F3E8;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T55;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        push   2;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        call   MTime::BuildLocal;
	__asm        add    esp, 0xC;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 126:
// Block end:
_T74:
	__asm        cmp    year, 0x7B6;
	__asm        jne    _Ta9;
// LINE 127:
	__asm        push   2;
	__asm        push   0x7B6;
	__asm        push   1;
	__asm        push   6;
	__asm        lea    ecx, [ebp-0x3C];
	__asm        call   MDate::MDate;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        call   MTime::BuildLocal;
	__asm        add    esp, 0xC;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 128:
_Ta9:
	__asm        cmp    year, 0x7B7;
	__asm        jne    _Tde;
// LINE 129:
	__asm        push   2;
	__asm        push   0x7B7;
	__asm        push   2;
	__asm        push   0x17;
	__asm        lea    ecx, [ebp-0x48];
	__asm        call   MDate::MDate;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        call   MTime::BuildLocal;
	__asm        add    esp, 0xC;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 131:
_Tde:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   4;
	__asm        push   0x1E;
	__asm        lea    ecx, endApril<vftable>;
	__asm        call   MDate::MDate;
// LINE 132:
	__asm        push   2;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        lea    ecx, endApril<vftable>;
	__asm        call   MDate::Previous;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        call   MTime::BuildLocal;
	__asm        add    esp, 0xC;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 133:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043ca36
class MTime MTime::EndDST(uint32_t year) {
	/*bp-0xc*/   /*packed*/ class MDate endOctober; // 0xc bytes

// LINE 148:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        push   0xA;
	__asm        push   0x1F;
	__asm        lea    ecx, endOctober<vftable>;
	__asm        call   MDate::MDate;
// LINE 149:
	__asm        push   1;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        lea    ecx, endOctober<vftable>;
	__asm        call   MDate::Previous;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        call   MTime::BuildLocal;
	__asm        add    esp, 0xC;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 150:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043ca79
void MTime::MTime() {
	/*bp-0x4*/   long ltime;
	/*bp-0x8*/   /*packed*/ struct tm *t;
	/*bp-0x14*/  /*packed*/ class MDate today; // 0xc bytes


	this-><MTime+0x04:4> = 0x0;
// LINE 165:
	__asm        lea    eax, ltime;
	__asm        push   eax;
	__asm        call   time;
	__asm        add    esp, 4;
// LINE 166:
	__asm        lea    eax, ltime;
	__asm        push   eax;
	__asm        call   localtime;
	__asm        add    esp, 4;
	__asm        mov    t, eax;
// LINE 172:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        lea    ecx, today<vftable>;
	__asm        call   MDate::MDate;
// LINE 177:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        lea    eax, today<vftable>;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   MTime::MTime;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 178:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043cb02
void MTime::MTime(uint32_t h, uint32_t m, uint32_t s) {

	this-><MTime+0x04:4> = 0x0;
// LINE 191:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        mov    eax, h;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   MDate::MDate;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-8];
	__asm        call   MTime::MTime;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 192:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043cb4b
void MTime::MTime(const /*packed*/ class MDate& date, uint32_t h, uint32_t m, uint32_t s) {

	this-><MTime+0x04:4> = 0x0;
// LINE 213:
	__asm        mov    eax, date;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jbe    _T28;

	__asm        jmp    _T2d;
_T28:
	__asm        jmp    _Tf8;
_T2d:
	__asm        jmp    _T3c;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tf8;
// LINE 216:
_T3c:
	__asm        jmp    _T41;
_T41:
	__asm        mov    eax, date;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, MTime::RefDate.Julnum;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 7;
	__asm        mov    ecx, h;
	__asm        lea    ecx, [ecx+ecx*4-5];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    ecx, m;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        add    eax, ecx;
	__asm        add    eax, s;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 217:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T9a;
// LINE 218:
	this-><MTime+0x00:4> += _timezone;
// LINE 220:
_T9a:
	__asm        mov    ecx, this;
	__asm        call   MTime::IsDST;
	__asm        test   eax, eax;
	__asm        je     _Td1;
// LINE 221:
	this-><MTime+0x00:4> += 0xe10;
// LINE 222:
	__asm        mov    ecx, this;
	__asm        call   MTime::IsDST;
	__asm        test   eax, eax;
	__asm        je     _Tcc;
// LINE 223:
	this-><MTime+0x00:4> -= 0xe10;
// LINE 225:
_Tcc:
	__asm        jmp    _Tf3;
// LINE 226:
_Td1:
	this-><MTime+0x00:4> += 0xe10;
// LINE 227:
	__asm        mov    ecx, this;
	__asm        call   MTime::IsDST;
	__asm        test   eax, eax;
	__asm        je     _Tf3;
// LINE 228:
	this-><MTime+0x00:4> = 0x0;
// LINE 231:
_Tf3:
	__asm        jmp    _T101;
// LINE 232:
_Tf8:
	this-><MTime+0x00:4> = 0x0;
// LINE 233:
_T101:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043cc5b
int32_t MTime::SetShouldPrinMDate(int32_t bNewPrinMDate) {
	/*bp-0x4*/   int32_t bPreviousPrinMDate;

// LINE 242:
	bPreviousPrinMDate = this-><MTime+0x04:4>;
// LINE 243:
	this-><MTime+0x04:4> = bNewPrinMDate;
// LINE 244:
	return bPreviousPrinMDate;
// LINE 245:
}

// FUNCTION: COPTER_D 0x0043cc88
int32_t MTime::CompareTo(const /*unpacked*/ class MTime& t) {
	/*bp-0x4*/   unsigned long diff;

// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, t;
	__asm        sub    eax, [ecx];
	__asm        mov    diff, eax;
// LINE 255:
	__asm        cmp    diff, 0;
	__asm        jne    _T2a;

	__asm        xor    eax, eax;
	__asm        jmp    _T43;
_T2a:
	__asm        cmp    diff, 0;
	__asm        jbe    _T3e;

	__asm        mov    eax, 1;
	__asm        jmp    _T43;
_T3e:
	__asm        mov    eax, 0xFFFFFFFF;
_T43:
	__asm        jmp    __RETURN;
// LINE 256:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043ccd7
uint32_t MTime::Hash() {
// LINE 265:
	return this-><MTime+0x00:4>;
// LINE 266:
}

// FUNCTION: COPTER_D 0x0043ccf2
uint32_t MTime::Hour() {
// LINE 278:
	__asm        mov    ecx, this;
	__asm        call   MTime::LocalSecs;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    __RETURN;
// LINE 279:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cd24
uint32_t MTime::HourGMT() {
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    __RETURN;
// LINE 292:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cd53
int32_t MTime::IsDST() {
	/*bp-0x4*/   uint32_t year;
	/*bp-0x8*/   uint32_t daycount;

// LINE 305:
	__asm        cmp    _daylight, 0;
	__asm        jne    _T20;
// LINE 306:
	return 0x0;
// LINE 308:
_T20:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    daycount, eax;
// LINE 309:
	__asm        push   0;
	__asm        mov    eax, daycount;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   MDate::MDate;
	__asm        mov    ecx, eax;
	__asm        call   MDate::Year;
	__asm        mov    year, eax;
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   MTime::BeginDST;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x28], eax;
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T71;

	__asm        jmp    _T76;
_T71:
	__asm        jmp    _Tcb;
_T76:
	__asm        jmp    _T85;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tcb;
_T85:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   MTime::EndDST;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jae    _Tad;

	__asm        jmp    _Tb2;
_Tad:
	__asm        jmp    _Tcb;
_Tb2:
	__asm        jmp    _Tc1;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _Tcb;
_Tc1:
	__asm        mov    eax, 1;
	__asm        jmp    _Tcd;
_Tcb:
	__asm        xor    eax, eax;
_Tcd:
	__asm        jmp    __RETURN;
// LINE 314:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043ce2a
class MTime MTime::MaxTime(const /*unpacked*/ class MTime& t) {
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    ecx, t;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jbe    _T21;

	__asm        jmp    _T26;
_T21:
	__asm        jmp    _T52;
_T26:
	__asm        jmp    _T35;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T52;
// LINE 327:
_T35:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 328:
	__asm        jmp    __RETURN;
// LINE 329:
_T52:
	__asm        mov    eax, t;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 330:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043ce9b
class MTime MTime::MinTime(const /*unpacked*/ class MTime& t) {
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    ecx, t;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jae    _T21;

	__asm        jmp    _T26;
_T21:
	__asm        jmp    _T52;
_T26:
	__asm        jmp    _T35;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T52;
// LINE 343:
_T35:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 344:
	__asm        jmp    __RETURN;
// LINE 345:
_T52:
	__asm        mov    eax, t;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 346:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cf0c
uint32_t MTime::Minute() {
// LINE 358:
	__asm        mov    ecx, this;
	__asm        call   MTime::LocalSecs;
	__asm        mov    ecx, 0x15180;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    __RETURN;
// LINE 359:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cf49
uint32_t MTime::MinuteGMT() {
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    __RETURN;
// LINE 372:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cf83
uint32_t MTime::Second() {
// LINE 383:
	__asm        mov    eax, this;
	__asm        mov    ecx, 0x15180;
	__asm        mov    eax, [eax];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0xE10;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, 0x3C;
	__asm        mov    eax, edx;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, edx;
	__asm        jmp    __RETURN;
// LINE 384:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043cfbf
char * MTime::PrintString(char * szTime) {
	/*bp-0x58*/  /*unpacked*/ class ostrstream strtemp; // 0x58 bytes

// LINE 397:
	__asm        push   1;
	__asm        push   2;
	__asm        push   4;
	__asm        mov    eax, szTime;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x60], eax;
// LINE 398:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T42;
// LINE 399:
_T42:
	__asm        mov    eax, szTime;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T4d;
_T4d:
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    __RETURN;
// LINE 400:
__RETURN:
}

// FUNCTION: COPTER_D 0x0043d02b
/*unpacked*/ class ostream& operator<<(/*unpacked*/ class ostream& s, const /*unpacked*/ class MTime& t) {
	/*bp-0x50*/  char buf[80]; // 0x50 bytes
	/*bp-0xa8*/  /*unpacked*/ class ostrstream out; // 0x58 bytes
	/*bp-0xac*/  uint32_t hh;

// LINE 413:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostrstream::ostrstream;
// LINE 417:
	__asm        mov    eax, t;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T59;
// LINE 418:
	__asm        push   0x598574;
	__asm        mov    eax, t;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xB8];
	__asm        call   MDate::MDate;
	__asm        push   eax;
	__asm        lea    eax, out.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
// LINE 420:
_T59:
	__asm        mov    ecx, t;
	__asm        call   MTime::Hour;
	__asm        mov    hh, eax;
// LINE 423:
	__asm        cmp    hh, 0xC;
	__asm        jbe    _T88;

	__asm        mov    eax, hh;
	__asm        sub    eax, 0xC;
	__asm        mov    [ebp-0xE0], eax;
	__asm        jmp    _T94;
_T88:
	__asm        mov    eax, hh;
	__asm        mov    [ebp-0xE0], eax;
_T94:
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    dword ptr [ebp-0xD8], 0x43D390;
	__asm        mov    dword ptr [ebp-0xD4], 0x30;
	__asm        jmp    _Tca;
_Tca:
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    dword ptr [ebp-0xD0], 0x43D3C0;
	__asm        mov    dword ptr [ebp-0xCC], 2;
	__asm        jmp    _Te8;
_Te8:
	__asm        jmp    _Ted;
_Ted:
	__asm        push   0x3A;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xF0], eax;
	__asm        cmp    dword ptr [ebp-0xF0], 0;
	__asm        jne    _T11c;

	__asm        mov    dword ptr [ebp-0xEC], 0;
	__asm        jmp    _T133;
_T11c:
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xEC], eax;
_T133:
	__asm        mov    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xD8];
	__asm        add    esp, 8;
	__asm        jmp    _T14f;
_T14f:
	__asm        cmp    dword ptr [ebp-0xF0], 0;
	__asm        jne    _T16b;

	__asm        mov    dword ptr [ebp-0xF4], 0;
	__asm        jmp    _T182;
_T16b:
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xF4], eax;
_T182:
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xD0];
	__asm        add    esp, 8;
	__asm        jmp    _T19e;
_T19e:
	__asm        mov    ecx, t;
	__asm        call   MTime::Minute;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF0];
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    _T1bd;
_T1bd:
	__asm        mov    dword ptr [ebp-0xC8], 0x43D3C0;
	__asm        mov    dword ptr [ebp-0xC4], 2;
	__asm        jmp    _T1d6;
_T1d6:
	__asm        jmp    _T1db;
_T1db:
	__asm        push   0x3A;
	__asm        mov    ecx, [ebp-0xF8];
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x100], eax;
	__asm        cmp    dword ptr [ebp-0x100], 0;
	__asm        jne    _T20a;

	__asm        mov    dword ptr [ebp-0xFC], 0;
	__asm        jmp    _T221;
_T20a:
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x100];
	__asm        mov    [ebp-0xFC], eax;
_T221:
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xC8];
	__asm        add    esp, 8;
	__asm        jmp    _T23d;
_T23d:
	__asm        mov    ecx, t;
	__asm        call   MTime::Second;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x100];
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x104], eax;
	__asm        jmp    _T25c;
_T25c:
	__asm        mov    dword ptr [ebp-0xC0], 0x43D390;
	__asm        mov    dword ptr [ebp-0xBC], 0x20;
	__asm        jmp    _T275;
_T275:
	__asm        jmp    _T27a;
_T27a:
	__asm        push   0x20;
	__asm        mov    ecx, [ebp-0x104];
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        jne    _T2a9;

	__asm        mov    dword ptr [ebp-0x108], 0;
	__asm        jmp    _T2c0;
_T2a9:
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x108], eax;
_T2c0:
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   dword ptr [ebp-0xC0];
	__asm        add    esp, 8;
	__asm        jmp    _T2dc;
_T2dc:
	__asm        mov    eax, 0x59857C;
	__asm        mov    ecx, 0x598578;
	__asm        xor    edx, edx;
	__asm        cmp    hh, 0xC;
	__asm        setae  dl;
	__asm        dec    edx;
	__asm        sub    ecx, eax;
	__asm        and    edx, ecx;
	__asm        add    edx, eax;
	__asm        push   edx;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xE8], eax;
// LINE 424:
	__asm        mov    eax, [ebp-0xE8];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T31f;
// LINE 429:
_T31f:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
// LINE 430:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    _T339;
_T339:
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0xDC];
	__asm        jmp    __RETURN;
// LINE 431:
__RETURN:
}



// Contribution: 1:0003c390-0003c3bc Module: 58, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043d390
// __setfill



// Contribution: 1:0003c3c0-0003c3ec Module: 58, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043d3c0
// __setw



// Contribution: 3:00000028-00000033 Module: 58, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597028
static void (*$S15)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059702c
static void (*$S18)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597030
static void (*$S21)() = { 0 /* todo */ };



// Contribution: 3:00001574-0000157e Module: 58, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0002c600-0002c623 Module: 58, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c3608
/*packed*/ class MDate MTime::RefDate;

// GLOBAL: COPTER_D 0x005c3618
/*packed*/ class MDate MTime::MaxDate;

