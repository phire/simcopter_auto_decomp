// Module: scontrols.obj
// Source: C:\Copter\source\sparkal\scontrols.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000705e0-00070d19 Module: 38, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004715e0
// $E65

// FUNCTION: COPTER_D 0x004715fa
// $E61

// FUNCTION: COPTER_D 0x00471614
// $E64

// FUNCTION: COPTER_D 0x00471631
// $E62

// FUNCTION: COPTER_D 0x00471668
// $E70

// FUNCTION: COPTER_D 0x00471682
// $E67

// FUNCTION: COPTER_D 0x0047169c
// $E69

// FUNCTION: COPTER_D 0x004716b9
// $E68

// FUNCTION: COPTER_D 0x004716f0
// $E75

// FUNCTION: COPTER_D 0x0047170a
// $E72

// FUNCTION: COPTER_D 0x00471724
// $E74

// FUNCTION: COPTER_D 0x00471741
// $E73

// FUNCTION: COPTER_D 0x00471778
// $E80

// FUNCTION: COPTER_D 0x00471792
// $E77

// FUNCTION: COPTER_D 0x004717ac
// $E79

// FUNCTION: COPTER_D 0x004717c9
// $E78

// FUNCTION: COPTER_D 0x00471800
void SoundButtonWindow::SoundButtonWindow() {
// LINE 29:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004ADE3D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 30:
	__asm        cmp    dword ptr ds:[0x5997B8], 0;
	__asm        jne    near ptr 0x00471834;
// LINE 31:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   0x0042F5FC;
// LINE 32:
	__asm        inc    dword ptr ds:[0x5997B8];
// LINE 33:
	__asm        jmp    near ptr 0x0047183F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471847
void SoundButtonWindow::SoundButtonWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 44:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AE05D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 45:
	__asm        cmp    dword ptr ds:[0x5997B8], 0;
	__asm        jne    near ptr 0x00471893;
// LINE 46:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   0x0042F5FC;
// LINE 47:
	__asm        inc    dword ptr ds:[0x5997B8];
// LINE 48:
	__asm        jmp    near ptr 0x0047189E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004718a8
void SoundButtonWindow::~SoundButtonWindow() {
// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 56:
	__asm        dec    dword ptr ds:[0x5997B8];
// LINE 57:
	__asm        jne    near ptr 0x004718D3;
// LINE 58:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   0x0042F549;
// LINE 59:
	__asm        jmp    near ptr 0x004718D8;
	__asm        jmp    near ptr 0x004718DD;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004718ea
void SoundButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 65:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x0047192D;
	__asm        cmp    nNewButtonState, 2;
	__asm        jne    near ptr 0x0047192D;
// LINE 67:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   0x0042FE2E;
// LINE 68:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   0x0043005A;
// LINE 70:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AEACE;
// LINE 71:
	__asm        jmp    near ptr 0x0047193E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00471945
void SoundRadioButtonWindow::SoundRadioButtonWindow(class ButtonGroup* myNewRadioButtonGroup, class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 82:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, myNewRadioButtonGroup;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AF7F7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 83:
	__asm        cmp    dword ptr ds:[0x5997BC], 0;
	__asm        jne    near ptr 0x00471995;
// LINE 84:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   0x0042F5FC;
// LINE 85:
	__asm        inc    dword ptr ds:[0x5997BC];
// LINE 86:
	__asm        jmp    near ptr 0x004719A0;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x004719aa
void SoundRadioButtonWindow::~SoundRadioButtonWindow() {
// LINE 91:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 92:
	__asm        dec    dword ptr ds:[0x5997BC];
// LINE 93:
	__asm        jne    near ptr 0x004719D5;
// LINE 94:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   0x0042F549;
// LINE 95:
	__asm        jmp    near ptr 0x004719DA;
	__asm        mov    ecx, this;
	__asm        call   0x004AFCFE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004719e7
void SoundRadioButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 101:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x00471A2D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x00471A2D;
// LINE 103:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   0x0042FE2E;
// LINE 104:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   0x0043005A;
// LINE 106:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AFEE3;
// LINE 107:
	__asm        jmp    near ptr 0x00471A3E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00471a45
void SoundCheckBoxWindow::SoundCheckBoxWindow() {
// LINE 112:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004AEE29;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 113:
	__asm        cmp    dword ptr ds:[0x5997C0], 0;
	__asm        jne    near ptr 0x00471A79;
// LINE 114:
	__asm        mov    ecx, 0x604348;
	__asm        call   0x0042F5FC;
// LINE 115:
	__asm        inc    dword ptr ds:[0x5997C0];
// LINE 116:
	__asm        jmp    near ptr 0x00471A84;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471a8c
void SoundCheckBoxWindow::SoundCheckBoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 126:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AF0AB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 127:
	__asm        cmp    dword ptr ds:[0x5997C0], 0;
	__asm        jne    near ptr 0x00471AD8;
// LINE 128:
	__asm        mov    ecx, 0x604348;
	__asm        call   0x0042F5FC;
// LINE 129:
	__asm        inc    dword ptr ds:[0x5997C0];
// LINE 130:
	__asm        jmp    near ptr 0x00471AE3;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00471aed
void SoundCheckBoxWindow::~SoundCheckBoxWindow() {
// LINE 135:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 136:
	__asm        dec    dword ptr ds:[0x5997C0];
// LINE 137:
	__asm        jne    near ptr 0x00471B18;
// LINE 138:
	__asm        mov    ecx, 0x604348;
	__asm        call   0x0042F549;
// LINE 139:
	__asm        jmp    near ptr 0x00471B1D;
	__asm        jmp    near ptr 0x00471B22;
	__asm        jmp    near ptr 0x00471B27;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471b34
void SoundCheckBoxWindow::SetState(int32_t nNewButtonState) {
// LINE 145:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     near ptr 0x00471B6D;
// LINE 147:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604348;
	__asm        call   0x0042FE2E;
// LINE 148:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604348;
	__asm        call   0x0043005A;
// LINE 150:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AF6AB;
// LINE 151:
	__asm        jmp    near ptr 0x00471B7E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00471b85
void SoundScrollBarWindow::SoundScrollBarWindow() {
// LINE 156:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004B28F8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 157:
	__asm        cmp    dword ptr ds:[0x5997C4], 0;
	__asm        jne    near ptr 0x00471BB9;
// LINE 158:
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0042F5FC;
// LINE 159:
	__asm        inc    dword ptr ds:[0x5997C4];
// LINE 160:
	__asm        jmp    near ptr 0x00471BC4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471bcc
void SoundScrollBarWindow::SoundScrollBarWindow(class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szImageFileName) {
// LINE 170:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B2C25;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 171:
	__asm        cmp    dword ptr ds:[0x5997C4], 0;
	__asm        jne    near ptr 0x00471C1C;
// LINE 172:
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0042F5FC;
// LINE 173:
	__asm        inc    dword ptr ds:[0x5997C4];
// LINE 174:
	__asm        jmp    near ptr 0x00471C27;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x00471c31
void SoundScrollBarWindow::~SoundScrollBarWindow() {
// LINE 179:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 180:
	__asm        dec    dword ptr ds:[0x5997C4];
// LINE 181:
	__asm        jne    near ptr 0x00471C5C;
// LINE 182:
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0042F549;
// LINE 183:
	__asm        jmp    near ptr 0x00471C61;
	__asm        jmp    near ptr 0x00471C66;
	__asm        jmp    near ptr 0x00471C6B;
	__asm        mov    ecx, this;
	__asm        call   0x004B19E0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471c78
void SoundScrollBarWindow::MoveLinePrevious() {
// LINE 190:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x00471CB7;
// LINE 192:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0042FE2E;
// LINE 193:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0043005A;
// LINE 195:
	__asm        mov    ecx, this;
	__asm        call   0x004B39D0;
// LINE 196:
	__asm        jmp    near ptr 0x00471CC4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00471cc9
void SoundScrollBarWindow::MoveLineNext() {
// LINE 204:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 205:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x00471D08;
// LINE 206:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0042FE2E;
// LINE 207:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   0x0043005A;
// LINE 209:
	__asm        mov    ecx, this;
	__asm        call   0x004B3A46;
// LINE 210:
	__asm        jmp    near ptr 0x00471D15;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00070d20-00070d3b Module: 38, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00070d40-00070d78 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d40
// SoundButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070d80-00070db8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d80
// SoundRadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070dc0-00070df8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471dc0
// SoundCheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:00070e00-00070e38 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471e00
// SoundScrollBarWindow::`scalar deleting destructor'



// Contribution: 2:00001870-0000194b Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590870
// ??_7SoundButtonWindow@@6B@


// Contribution: 2:00001950-00001a33 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590950
// ??_7SoundRadioButtonWindow@@6B@


// Contribution: 2:00001a38-00001b13 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590a38
// ??_7SoundCheckBoxWindow@@6B@


// Contribution: 2:00001b18-00001c1f Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590b18
// ??_7SoundScrollBarWindow@@6B@


// Contribution: 3:00000054-00000063 Module: 38, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597054
// $S66
// LOCAL: COPTER_D 0x00597058
// $S71
// LOCAL: COPTER_D 0x0059705c
// $S76
// LOCAL: COPTER_D 0x00597060
// $S81


// Contribution: 3:000027b8-000027c7 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005997b8
// SoundButtonWindow::lButtonSoundReferenceCount
// GLOBAL: COPTER_D 0x005997bc
// SoundRadioButtonWindow::lRadioSoundReferenceCount
// GLOBAL: COPTER_D 0x005997c0
// SoundCheckBoxWindow::lCheckBoxSoundReferenceCount
// GLOBAL: COPTER_D 0x005997c4
// SoundScrollBarWindow::lScrollBarSoundReferenceCount


// Contribution: 3:0006d248-0006d444 Module: 38, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604248
// SoundScrollBarWindow::scrollBarSound
// GLOBAL: COPTER_D 0x006042c8
// SoundButtonWindow::buttonSound
// GLOBAL: COPTER_D 0x00604348
// SoundCheckBoxWindow::checkBoxSound
// GLOBAL: COPTER_D 0x006043c8
// SoundRadioButtonWindow::radioButtonSound
// LOCAL: COPTER_D 0x00604444
// $S63
