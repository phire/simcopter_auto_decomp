// Module: scontrols.obj
// Source: C:\Copter\source\sparkal\scontrols.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000705e0-00070d19 Module: 38, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x004715e0
// $E65

// FUNCTION: SIMCOPTER 0x004715fa
// $E61

// FUNCTION: SIMCOPTER 0x00471614
// $E64

// FUNCTION: SIMCOPTER 0x00471631
// $E62

// FUNCTION: SIMCOPTER 0x00471668
// $E70

// FUNCTION: SIMCOPTER 0x00471682
// $E67

// FUNCTION: SIMCOPTER 0x0047169c
// $E69

// FUNCTION: SIMCOPTER 0x004716b9
// $E68

// FUNCTION: SIMCOPTER 0x004716f0
// $E75

// FUNCTION: SIMCOPTER 0x0047170a
// $E72

// FUNCTION: SIMCOPTER 0x00471724
// $E74

// FUNCTION: SIMCOPTER 0x00471741
// $E73

// FUNCTION: SIMCOPTER 0x00471778
// $E80

// FUNCTION: SIMCOPTER 0x00471792
// $E77

// FUNCTION: SIMCOPTER 0x004717ac
// $E79

// FUNCTION: SIMCOPTER 0x004717c9
// $E78

// FUNCTION: SIMCOPTER 0x00471800
SoundButtonWindow::SoundButtonWindow {
// LINE 29:
	asm( 
"	      00471800    push ebp"
"	      00471801    mov ebp,esp"
"	      00471803    sub esp,4"
"	      00471806    push ebx"
"	      00471807    push esi"
"	      00471808    push edi"
"	      00471809    mov [ebp-4],ecx"
"	      0047180c    mov ecx,[ebp-4]"
"	      0047180f    call 004ADE3Dh"
"	      00471814    mov eax,[ebp-4]"
"	      00471817    mov dword ptr [eax],590870h"
);
// LINE 30:
	asm( 
"	      0047181d    cmp dword ptr ds:[5997B8h],0"
"	      00471824    jne near ptr 00471834h"
);
// LINE 31:
	asm( 
"	      0047182a    mov ecx,6042C8h"
"	      0047182f    call 0042F5FCh"
);
// LINE 32:
	asm( 
"	      00471834    inc dword ptr ds:[5997B8h]"
);
// LINE 33:
	asm( 
"	      0047183a    jmp near ptr 0047183Fh"
"	      0047183f    mov eax,[ebp-4]"
"	      00471842    pop edi"
"	      00471843    pop esi"
"	      00471844    pop ebx"
"	      00471845    leave"
"	      00471846    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471847
SoundButtonWindow::SoundButtonWindow {
// LINE 44:
	asm( 
"	      00471847    push ebp"
"	      00471848    mov ebp,esp"
"	      0047184a    sub esp,4"
"	      0047184d    push ebx"
"	      0047184e    push esi"
"	      0047184f    push edi"
"	      00471850    mov [ebp-4],ecx"
"	      00471853    mov eax,[ebp+1Ch]"
"	      00471856    push eax"
"	      00471857    mov eax,[ebp+18h]"
"	      0047185a    push eax"
"	      0047185b    mov eax,[ebp+14h]"
"	      0047185e    push eax"
"	      0047185f    mov eax,[ebp+10h]"
"	      00471862    push eax"
"	      00471863    mov eax,[ebp+0Ch]"
"	      00471866    push eax"
"	      00471867    mov eax,[ebp+8]"
"	      0047186a    push eax"
"	      0047186b    mov ecx,[ebp-4]"
"	      0047186e    call 004AE05Dh"
"	      00471873    mov eax,[ebp-4]"
"	      00471876    mov dword ptr [eax],590870h"
);
// LINE 45:
	asm( 
"	      0047187c    cmp dword ptr ds:[5997B8h],0"
"	      00471883    jne near ptr 00471893h"
);
// LINE 46:
	asm( 
"	      00471889    mov ecx,6042C8h"
"	      0047188e    call 0042F5FCh"
);
// LINE 47:
	asm( 
"	      00471893    inc dword ptr ds:[5997B8h]"
);
// LINE 48:
	asm( 
"	      00471899    jmp near ptr 0047189Eh"
"	      0047189e    mov eax,[ebp-4]"
"	      004718a1    pop edi"
"	      004718a2    pop esi"
"	      004718a3    pop ebx"
"	      004718a4    leave"
"	      004718a5    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x004718a8
SoundButtonWindow::~SoundButtonWindow {
// LINE 55:
	asm( 
"	      004718a8    push ebp"
"	      004718a9    mov ebp,esp"
"	      004718ab    sub esp,4"
"	      004718ae    push ebx"
"	      004718af    push esi"
"	      004718b0    push edi"
"	      004718b1    mov [ebp-4],ecx"
"	      004718b4    mov eax,[ebp-4]"
"	      004718b7    mov dword ptr [eax],590870h"
);
// LINE 56:
	asm( 
"	      004718bd    dec dword ptr ds:[5997B8h]"
);
// LINE 57:
	asm( 
"	      004718c3    jne near ptr 004718D3h"
);
// LINE 58:
	asm( 
"	      004718c9    mov ecx,6042C8h"
"	      004718ce    call 0042F549h"
);
// LINE 59:
	asm( 
"	      004718d3    jmp near ptr 004718D8h"
"	      004718d8    jmp near ptr 004718DDh"
"	      004718dd    mov ecx,[ebp-4]"
"	      004718e0    call 004A4045h"
"	      004718e5    pop edi"
"	      004718e6    pop esi"
"	      004718e7    pop ebx"
"	      004718e8    leave"
"	      004718e9    ret"
);
}

// FUNCTION: SIMCOPTER 0x004718ea
SoundButtonWindow::SetState {
// LINE 65:
	asm( 
"	      004718ea    push ebp"
"	      004718eb    mov ebp,esp"
"	      004718ed    sub esp,4"
"	      004718f0    push ebx"
"	      004718f1    push esi"
"	      004718f2    push edi"
"	      004718f3    mov [ebp-4],ecx"
);
// LINE 66:
	asm( 
"	      004718f6    mov eax,[ebp-4]"
"	      004718f9    mov ecx,[ebp+8]"
"	      004718fc    cmp [eax+74h],ecx"
"	      004718ff    je near ptr 0047192Dh"
"	      00471905    cmp dword ptr [ebp+8],2"
"	      00471909    jne near ptr 0047192Dh"
);
// LINE 67:
	asm( 
"	      0047190f    mov eax,ds:[5C37F0h]"
"	      00471914    push eax"
"	      00471915    mov ecx,6042C8h"
"	      0047191a    call 0042FE2Eh"
);
// LINE 68:
	asm( 
"	      0047191f    push 1"
"	      00471921    push 0"
"	      00471923    mov ecx,6042C8h"
"	      00471928    call 0043005Ah"
);
// LINE 70:
	asm( 
"	      0047192d    mov eax,[ebp+8]"
"	      00471930    push eax"
"	      00471931    mov ecx,[ebp-4]"
"	      00471934    call 004AEACEh"
);
// LINE 71:
	asm( 
"	      00471939    jmp near ptr 0047193Eh"
"	      0047193e    pop edi"
"	      0047193f    pop esi"
"	      00471940    pop ebx"
"	      00471941    leave"
"	      00471942    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00471945
SoundRadioButtonWindow::SoundRadioButtonWindow {
// LINE 82:
	asm( 
"	      00471945    push ebp"
"	      00471946    mov ebp,esp"
"	      00471948    sub esp,4"
"	      0047194b    push ebx"
"	      0047194c    push esi"
"	      0047194d    push edi"
"	      0047194e    mov [ebp-4],ecx"
"	      00471951    mov eax,[ebp+20h]"
"	      00471954    push eax"
"	      00471955    mov eax,[ebp+1Ch]"
"	      00471958    push eax"
"	      00471959    mov eax,[ebp+18h]"
"	      0047195c    push eax"
"	      0047195d    mov eax,[ebp+14h]"
"	      00471960    push eax"
"	      00471961    mov eax,[ebp+10h]"
"	      00471964    push eax"
"	      00471965    mov eax,[ebp+0Ch]"
"	      00471968    push eax"
"	      00471969    mov eax,[ebp+8]"
"	      0047196c    push eax"
"	      0047196d    mov ecx,[ebp-4]"
"	      00471970    call 004AF7F7h"
"	      00471975    mov eax,[ebp-4]"
"	      00471978    mov dword ptr [eax],590950h"
);
// LINE 83:
	asm( 
"	      0047197e    cmp dword ptr ds:[5997BCh],0"
"	      00471985    jne near ptr 00471995h"
);
// LINE 84:
	asm( 
"	      0047198b    mov ecx,6043C8h"
"	      00471990    call 0042F5FCh"
);
// LINE 85:
	asm( 
"	      00471995    inc dword ptr ds:[5997BCh]"
);
// LINE 86:
	asm( 
"	      0047199b    jmp near ptr 004719A0h"
"	      004719a0    mov eax,[ebp-4]"
"	      004719a3    pop edi"
"	      004719a4    pop esi"
"	      004719a5    pop ebx"
"	      004719a6    leave"
"	      004719a7    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x004719aa
SoundRadioButtonWindow::~SoundRadioButtonWindow {
// LINE 91:
	asm( 
"	      004719aa    push ebp"
"	      004719ab    mov ebp,esp"
"	      004719ad    sub esp,4"
"	      004719b0    push ebx"
"	      004719b1    push esi"
"	      004719b2    push edi"
"	      004719b3    mov [ebp-4],ecx"
"	      004719b6    mov eax,[ebp-4]"
"	      004719b9    mov dword ptr [eax],590950h"
);
// LINE 92:
	asm( 
"	      004719bf    dec dword ptr ds:[5997BCh]"
);
// LINE 93:
	asm( 
"	      004719c5    jne near ptr 004719D5h"
);
// LINE 94:
	asm( 
"	      004719cb    mov ecx,6043C8h"
"	      004719d0    call 0042F549h"
);
// LINE 95:
	asm( 
"	      004719d5    jmp near ptr 004719DAh"
"	      004719da    mov ecx,[ebp-4]"
"	      004719dd    call 004AFCFEh"
"	      004719e2    pop edi"
"	      004719e3    pop esi"
"	      004719e4    pop ebx"
"	      004719e5    leave"
"	      004719e6    ret"
);
}

// FUNCTION: SIMCOPTER 0x004719e7
SoundRadioButtonWindow::SetState {
// LINE 101:
	asm( 
"	      004719e7    push ebp"
"	      004719e8    mov ebp,esp"
"	      004719ea    sub esp,4"
"	      004719ed    push ebx"
"	      004719ee    push esi"
"	      004719ef    push edi"
"	      004719f0    mov [ebp-4],ecx"
);
// LINE 102:
	asm( 
"	      004719f3    mov eax,[ebp-4]"
"	      004719f6    mov ecx,[ebp+8]"
"	      004719f9    cmp [eax+74h],ecx"
"	      004719fc    je near ptr 00471A2Dh"
"	      00471a02    mov eax,[ebp-4]"
"	      00471a05    cmp dword ptr [eax+74h],0"
"	      00471a09    je near ptr 00471A2Dh"
);
// LINE 103:
	asm( 
"	      00471a0f    mov eax,ds:[5C37F0h]"
"	      00471a14    push eax"
"	      00471a15    mov ecx,6043C8h"
"	      00471a1a    call 0042FE2Eh"
);
// LINE 104:
	asm( 
"	      00471a1f    push 1"
"	      00471a21    push 0"
"	      00471a23    mov ecx,6043C8h"
"	      00471a28    call 0043005Ah"
);
// LINE 106:
	asm( 
"	      00471a2d    mov eax,[ebp+8]"
"	      00471a30    push eax"
"	      00471a31    mov ecx,[ebp-4]"
"	      00471a34    call 004AFEE3h"
);
// LINE 107:
	asm( 
"	      00471a39    jmp near ptr 00471A3Eh"
"	      00471a3e    pop edi"
"	      00471a3f    pop esi"
"	      00471a40    pop ebx"
"	      00471a41    leave"
"	      00471a42    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00471a45
SoundCheckBoxWindow::SoundCheckBoxWindow {
// LINE 112:
	asm( 
"	      00471a45    push ebp"
"	      00471a46    mov ebp,esp"
"	      00471a48    sub esp,4"
"	      00471a4b    push ebx"
"	      00471a4c    push esi"
"	      00471a4d    push edi"
"	      00471a4e    mov [ebp-4],ecx"
"	      00471a51    mov ecx,[ebp-4]"
"	      00471a54    call 004AEE29h"
"	      00471a59    mov eax,[ebp-4]"
"	      00471a5c    mov dword ptr [eax],590A38h"
);
// LINE 113:
	asm( 
"	      00471a62    cmp dword ptr ds:[5997C0h],0"
"	      00471a69    jne near ptr 00471A79h"
);
// LINE 114:
	asm( 
"	      00471a6f    mov ecx,604348h"
"	      00471a74    call 0042F5FCh"
);
// LINE 115:
	asm( 
"	      00471a79    inc dword ptr ds:[5997C0h]"
);
// LINE 116:
	asm( 
"	      00471a7f    jmp near ptr 00471A84h"
"	      00471a84    mov eax,[ebp-4]"
"	      00471a87    pop edi"
"	      00471a88    pop esi"
"	      00471a89    pop ebx"
"	      00471a8a    leave"
"	      00471a8b    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471a8c
SoundCheckBoxWindow::SoundCheckBoxWindow {
// LINE 126:
	asm( 
"	      00471a8c    push ebp"
"	      00471a8d    mov ebp,esp"
"	      00471a8f    sub esp,4"
"	      00471a92    push ebx"
"	      00471a93    push esi"
"	      00471a94    push edi"
"	      00471a95    mov [ebp-4],ecx"
"	      00471a98    mov eax,[ebp+1Ch]"
"	      00471a9b    push eax"
"	      00471a9c    mov eax,[ebp+18h]"
"	      00471a9f    push eax"
"	      00471aa0    mov eax,[ebp+14h]"
"	      00471aa3    push eax"
"	      00471aa4    mov eax,[ebp+10h]"
"	      00471aa7    push eax"
"	      00471aa8    mov eax,[ebp+0Ch]"
"	      00471aab    push eax"
"	      00471aac    mov eax,[ebp+8]"
"	      00471aaf    push eax"
"	      00471ab0    mov ecx,[ebp-4]"
"	      00471ab3    call 004AF0ABh"
"	      00471ab8    mov eax,[ebp-4]"
"	      00471abb    mov dword ptr [eax],590A38h"
);
// LINE 127:
	asm( 
"	      00471ac1    cmp dword ptr ds:[5997C0h],0"
"	      00471ac8    jne near ptr 00471AD8h"
);
// LINE 128:
	asm( 
"	      00471ace    mov ecx,604348h"
"	      00471ad3    call 0042F5FCh"
);
// LINE 129:
	asm( 
"	      00471ad8    inc dword ptr ds:[5997C0h]"
);
// LINE 130:
	asm( 
"	      00471ade    jmp near ptr 00471AE3h"
"	      00471ae3    mov eax,[ebp-4]"
"	      00471ae6    pop edi"
"	      00471ae7    pop esi"
"	      00471ae8    pop ebx"
"	      00471ae9    leave"
"	      00471aea    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x00471aed
SoundCheckBoxWindow::~SoundCheckBoxWindow {
// LINE 135:
	asm( 
"	      00471aed    push ebp"
"	      00471aee    mov ebp,esp"
"	      00471af0    sub esp,4"
"	      00471af3    push ebx"
"	      00471af4    push esi"
"	      00471af5    push edi"
"	      00471af6    mov [ebp-4],ecx"
"	      00471af9    mov eax,[ebp-4]"
"	      00471afc    mov dword ptr [eax],590A38h"
);
// LINE 136:
	asm( 
"	      00471b02    dec dword ptr ds:[5997C0h]"
);
// LINE 137:
	asm( 
"	      00471b08    jne near ptr 00471B18h"
);
// LINE 138:
	asm( 
"	      00471b0e    mov ecx,604348h"
"	      00471b13    call 0042F549h"
);
// LINE 139:
	asm( 
"	      00471b18    jmp near ptr 00471B1Dh"
"	      00471b1d    jmp near ptr 00471B22h"
"	      00471b22    jmp near ptr 00471B27h"
"	      00471b27    mov ecx,[ebp-4]"
"	      00471b2a    call 004A4045h"
"	      00471b2f    pop edi"
"	      00471b30    pop esi"
"	      00471b31    pop ebx"
"	      00471b32    leave"
"	      00471b33    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471b34
SoundCheckBoxWindow::SetState {
// LINE 145:
	asm( 
"	      00471b34    push ebp"
"	      00471b35    mov ebp,esp"
"	      00471b37    sub esp,4"
"	      00471b3a    push ebx"
"	      00471b3b    push esi"
"	      00471b3c    push edi"
"	      00471b3d    mov [ebp-4],ecx"
);
// LINE 146:
	asm( 
"	      00471b40    mov eax,[ebp-4]"
"	      00471b43    mov ecx,[ebp+8]"
"	      00471b46    cmp [eax+74h],ecx"
"	      00471b49    je near ptr 00471B6Dh"
);
// LINE 147:
	asm( 
"	      00471b4f    mov eax,ds:[5C37F0h]"
"	      00471b54    push eax"
"	      00471b55    mov ecx,604348h"
"	      00471b5a    call 0042FE2Eh"
);
// LINE 148:
	asm( 
"	      00471b5f    push 1"
"	      00471b61    push 0"
"	      00471b63    mov ecx,604348h"
"	      00471b68    call 0043005Ah"
);
// LINE 150:
	asm( 
"	      00471b6d    mov eax,[ebp+8]"
"	      00471b70    push eax"
"	      00471b71    mov ecx,[ebp-4]"
"	      00471b74    call 004AF6ABh"
);
// LINE 151:
	asm( 
"	      00471b79    jmp near ptr 00471B7Eh"
"	      00471b7e    pop edi"
"	      00471b7f    pop esi"
"	      00471b80    pop ebx"
"	      00471b81    leave"
"	      00471b82    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00471b85
SoundScrollBarWindow::SoundScrollBarWindow {
// LINE 156:
	asm( 
"	      00471b85    push ebp"
"	      00471b86    mov ebp,esp"
"	      00471b88    sub esp,4"
"	      00471b8b    push ebx"
"	      00471b8c    push esi"
"	      00471b8d    push edi"
"	      00471b8e    mov [ebp-4],ecx"
"	      00471b91    mov ecx,[ebp-4]"
"	      00471b94    call 004B28F8h"
"	      00471b99    mov eax,[ebp-4]"
"	      00471b9c    mov dword ptr [eax],590B18h"
);
// LINE 157:
	asm( 
"	      00471ba2    cmp dword ptr ds:[5997C4h],0"
"	      00471ba9    jne near ptr 00471BB9h"
);
// LINE 158:
	asm( 
"	      00471baf    mov ecx,604248h"
"	      00471bb4    call 0042F5FCh"
);
// LINE 159:
	asm( 
"	      00471bb9    inc dword ptr ds:[5997C4h]"
);
// LINE 160:
	asm( 
"	      00471bbf    jmp near ptr 00471BC4h"
"	      00471bc4    mov eax,[ebp-4]"
"	      00471bc7    pop edi"
"	      00471bc8    pop esi"
"	      00471bc9    pop ebx"
"	      00471bca    leave"
"	      00471bcb    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471bcc
SoundScrollBarWindow::SoundScrollBarWindow {
// LINE 170:
	asm( 
"	      00471bcc    push ebp"
"	      00471bcd    mov ebp,esp"
"	      00471bcf    sub esp,4"
"	      00471bd2    push ebx"
"	      00471bd3    push esi"
"	      00471bd4    push edi"
"	      00471bd5    mov [ebp-4],ecx"
"	      00471bd8    mov eax,[ebp+20h]"
"	      00471bdb    push eax"
"	      00471bdc    mov eax,[ebp+1Ch]"
"	      00471bdf    push eax"
"	      00471be0    mov eax,[ebp+18h]"
"	      00471be3    push eax"
"	      00471be4    mov eax,[ebp+14h]"
"	      00471be7    push eax"
"	      00471be8    mov eax,[ebp+10h]"
"	      00471beb    push eax"
"	      00471bec    mov eax,[ebp+0Ch]"
"	      00471bef    push eax"
"	      00471bf0    mov eax,[ebp+8]"
"	      00471bf3    push eax"
"	      00471bf4    mov ecx,[ebp-4]"
"	      00471bf7    call 004B2C25h"
"	      00471bfc    mov eax,[ebp-4]"
"	      00471bff    mov dword ptr [eax],590B18h"
);
// LINE 171:
	asm( 
"	      00471c05    cmp dword ptr ds:[5997C4h],0"
"	      00471c0c    jne near ptr 00471C1Ch"
);
// LINE 172:
	asm( 
"	      00471c12    mov ecx,604248h"
"	      00471c17    call 0042F5FCh"
);
// LINE 173:
	asm( 
"	      00471c1c    inc dword ptr ds:[5997C4h]"
);
// LINE 174:
	asm( 
"	      00471c22    jmp near ptr 00471C27h"
"	      00471c27    mov eax,[ebp-4]"
"	      00471c2a    pop edi"
"	      00471c2b    pop esi"
"	      00471c2c    pop ebx"
"	      00471c2d    leave"
"	      00471c2e    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x00471c31
SoundScrollBarWindow::~SoundScrollBarWindow {
// LINE 179:
	asm( 
"	      00471c31    push ebp"
"	      00471c32    mov ebp,esp"
"	      00471c34    sub esp,4"
"	      00471c37    push ebx"
"	      00471c38    push esi"
"	      00471c39    push edi"
"	      00471c3a    mov [ebp-4],ecx"
"	      00471c3d    mov eax,[ebp-4]"
"	      00471c40    mov dword ptr [eax],590B18h"
);
// LINE 180:
	asm( 
"	      00471c46    dec dword ptr ds:[5997C4h]"
);
// LINE 181:
	asm( 
"	      00471c4c    jne near ptr 00471C5Ch"
);
// LINE 182:
	asm( 
"	      00471c52    mov ecx,604248h"
"	      00471c57    call 0042F549h"
);
// LINE 183:
	asm( 
"	      00471c5c    jmp near ptr 00471C61h"
"	      00471c61    jmp near ptr 00471C66h"
"	      00471c66    jmp near ptr 00471C6Bh"
"	      00471c6b    mov ecx,[ebp-4]"
"	      00471c6e    call 004B19E0h"
"	      00471c73    pop edi"
"	      00471c74    pop esi"
"	      00471c75    pop ebx"
"	      00471c76    leave"
"	      00471c77    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471c78
SoundScrollBarWindow::MoveLinePrevious {
// LINE 190:
	asm( 
"	      00471c78    push ebp"
"	      00471c79    mov ebp,esp"
"	      00471c7b    sub esp,4"
"	      00471c7e    push ebx"
"	      00471c7f    push esi"
"	      00471c80    push edi"
"	      00471c81    mov [ebp-4],ecx"
);
// LINE 191:
	asm( 
"	      00471c84    mov eax,[ebp-4]"
"	      00471c87    mov ecx,[ebp-4]"
"	      00471c8a    mov ecx,[ecx+78h]"
"	      00471c8d    cmp [eax+80h],ecx"
"	      00471c93    jle near ptr 00471CB7h"
);
// LINE 192:
	asm( 
"	      00471c99    mov eax,ds:[5C37F0h]"
"	      00471c9e    push eax"
"	      00471c9f    mov ecx,604248h"
"	      00471ca4    call 0042FE2Eh"
);
// LINE 193:
	asm( 
"	      00471ca9    push 1"
"	      00471cab    push 0"
"	      00471cad    mov ecx,604248h"
"	      00471cb2    call 0043005Ah"
);
// LINE 195:
	asm( 
"	      00471cb7    mov ecx,[ebp-4]"
"	      00471cba    call 004B39D0h"
);
// LINE 196:
	asm( 
"	      00471cbf    jmp near ptr 00471CC4h"
"	      00471cc4    pop edi"
"	      00471cc5    pop esi"
"	      00471cc6    pop ebx"
"	      00471cc7    leave"
"	      00471cc8    ret"
);
}

// FUNCTION: SIMCOPTER 0x00471cc9
SoundScrollBarWindow::MoveLineNext {
// LINE 204:
	asm( 
"	      00471cc9    push ebp"
"	      00471cca    mov ebp,esp"
"	      00471ccc    sub esp,4"
"	      00471ccf    push ebx"
"	      00471cd0    push esi"
"	      00471cd1    push edi"
"	      00471cd2    mov [ebp-4],ecx"
);
// LINE 205:
	asm( 
"	      00471cd5    mov eax,[ebp-4]"
"	      00471cd8    mov ecx,[ebp-4]"
"	      00471cdb    mov ecx,[ecx+80h]"
"	      00471ce1    cmp [eax+7Ch],ecx"
"	      00471ce4    jle near ptr 00471D08h"
);
// LINE 206:
	asm( 
"	      00471cea    mov eax,ds:[5C37F0h]"
"	      00471cef    push eax"
"	      00471cf0    mov ecx,604248h"
"	      00471cf5    call 0042FE2Eh"
);
// LINE 207:
	asm( 
"	      00471cfa    push 1"
"	      00471cfc    push 0"
"	      00471cfe    mov ecx,604248h"
"	      00471d03    call 0043005Ah"
);
// LINE 209:
	asm( 
"	      00471d08    mov ecx,[ebp-4]"
"	      00471d0b    call 004B3A46h"
);
// LINE 210:
	asm( 
"	      00471d10    jmp near ptr 00471D15h"
"	      00471d15    pop edi"
"	      00471d16    pop esi"
"	      00471d17    pop ebx"
"	      00471d18    leave"
"	      00471d19    ret"
);
}



// Contribution: 1:00070d20-00070d3b Module: 38, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00070d40-00070d78 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00471d40
// SoundButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070d80-00070db8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00471d80
// SoundRadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070dc0-00070df8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00471dc0
// SoundCheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:00070e00-00070e38 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00471e00
// SoundScrollBarWindow::`scalar deleting destructor'



// Contribution: 2:00001870-0000194b Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00001870
// ??_7SoundButtonWindow@@6B@


// Contribution: 2:00001950-00001a33 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00001950
// ??_7SoundRadioButtonWindow@@6B@


// Contribution: 2:00001a38-00001b13 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00001a38
// ??_7SoundCheckBoxWindow@@6B@


// Contribution: 2:00001b18-00001c1f Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00001b18
// ??_7SoundScrollBarWindow@@6B@


// Contribution: 3:00000054-00000063 Module: 38, 4 byte alignment, initialized_data, read, write, 
// LOCAL: SIMCOPTER 0x00000054
// $S66
// LOCAL: SIMCOPTER 0x00000058
// $S71
// LOCAL: SIMCOPTER 0x0000005c
// $S76
// LOCAL: SIMCOPTER 0x00000060
// $S81


// Contribution: 3:000027b8-000027c7 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x000027b8
// SoundButtonWindow::lButtonSoundReferenceCount
// GLOBAL: SIMCOPTER 0x000027bc
// SoundRadioButtonWindow::lRadioSoundReferenceCount
// GLOBAL: SIMCOPTER 0x000027c0
// SoundCheckBoxWindow::lCheckBoxSoundReferenceCount
// GLOBAL: SIMCOPTER 0x000027c4
// SoundScrollBarWindow::lScrollBarSoundReferenceCount


// Contribution: 3:0006d248-0006d444 Module: 38, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x0006d248
// SoundScrollBarWindow::scrollBarSound
// GLOBAL: SIMCOPTER 0x0006d2c8
// SoundButtonWindow::buttonSound
// GLOBAL: SIMCOPTER 0x0006d348
// SoundCheckBoxWindow::checkBoxSound
// GLOBAL: SIMCOPTER 0x0006d3c8
// SoundRadioButtonWindow::radioButtonSound
// LOCAL: SIMCOPTER 0x0006d444
// $S63
