// Module: scontrols.obj
// Source: C:\Copter\source\sparkal\scontrols.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class DigitalSound;
// VTABLE: COPTER_D 0x0058f488
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound *lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer *lpSound[8];
	struct _STREAMBUFINFO *lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound() /* override */;
	class DigitalSound& operator=(class DigitalSound&);
	virtual void SetSoundFile(const class basic_string<char>&, int32_t); // vtable+0x2c
	virtual int32_t Load(); // vtable+0x30
	virtual int32_t LoadFromResource(); // vtable+0x34
	virtual int32_t LoadFromFile(); // vtable+0x38
	virtual void Unload(); // vtable+0x3c
	virtual long Play(long, int32_t) /* override */;
	virtual long Stop() /* override */;
	virtual long ShouldWeStream(); // vtable+0x40
	virtual long PlayStream(); // vtable+0x44
	virtual long StopStream(); // vtable+0x48
protected:
	virtual long IsPlaying(struct IDirectSoundBuffer**); // vtable+0x4c
public:
	virtual long IsPlaying() /* override */;
	virtual int32_t GetVolume(long *) /* override */;
	virtual int32_t SetVolume(long) /* override */;
	virtual int32_t GetPan(long *); // vtable+0x50
	virtual int32_t SetPan(long); // vtable+0x54
	virtual int32_t SetPosition(long, long, long); // vtable+0x58
	virtual long GetOriginalFrequency(); // vtable+0x5c
	virtual int32_t GetFrequency(long *); // vtable+0x60
	virtual int32_t SetFrequency(long); // vtable+0x64
	virtual int32_t GetSoundType() /* override */;
	virtual int32_t SetCompletionNotification(void (*)(long), long) /* override */;
	virtual void StopCompletionNotification() /* override */;
	virtual long EstimateRemainingPlayTime() /* override */;
protected:
	virtual int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**); // vtable+0x68
	virtual int32_t CreateSoundBuffer(struct _DSBUFFERDESC*); // vtable+0x6c
	virtual int32_t CreatePrimarySoundBuffer(); // vtable+0x70
	virtual int32_t ReleaseSoundBuffer(); // vtable+0x74
	virtual long InitializeStreamBuffer(long); // vtable+0x78
	virtual void ProcessStreamingBufferTimerCallback(); // vtable+0x7c
	virtual void ProcessCompletionEstimationTimerCallback(); // vtable+0x80
	virtual void StopCompletionNotificationEstimationTimer(); // vtable+0x84
	virtual int32_t StartCompletionNotificationEstimationTimer(); // vtable+0x88
};

// Type: long;

// Type: void ();

// Type: void;

// Type: class SoundButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00590870
class SoundButtonWindow : public ButtonWindow
{
public:
	void SoundButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void SoundButtonWindow();
	virtual void ~SoundButtonWindow() /* override */;
	virtual void SetState(int32_t) /* override */;
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound buttonSound;
	static long lButtonSoundReferenceCount;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: char *;

// Type: class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{
public:
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: class SoundRadioButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00590950
class SoundRadioButtonWindow : public RadioButtonWindow
{
public:
	void SoundRadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	virtual void ~SoundRadioButtonWindow() /* override */;
	virtual void SetState(int32_t) /* override */;
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound radioButtonSound;
	static long lRadioSoundReferenceCount;
};

// Type: class ButtonGroup (forward reference);
// ButtonGroup Class implementation not found

// Type: class SoundCheckBoxWindow (forward reference);
// VTABLE: COPTER_D 0x00590a38
class SoundCheckBoxWindow : public CheckBoxWindow
{
public:
	void SoundCheckBoxWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void SoundCheckBoxWindow();
	virtual void ~SoundCheckBoxWindow() /* override */;
	virtual void SetState(int32_t) /* override */;
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound checkBoxSound;
	static long lCheckBoxSoundReferenceCount;
};

// Type: class SoundScrollBarWindow (forward reference);
// VTABLE: COPTER_D 0x00590b18
class SoundScrollBarWindow : public ScrollBarWindow
{
public:
	void SoundScrollBarWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void SoundScrollBarWindow();
	virtual void ~SoundScrollBarWindow() /* override */;
	virtual void MoveLinePrevious() /* override */;
	virtual void MoveLineNext() /* override */;
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound scrollBarSound;
	static long lScrollBarSoundReferenceCount;
};

// Type: enum SliderWindow::SliderWindowDirection;
enum SliderWindowDirection {
	nSliderWindowDirectionHorizontal = 0,
	nSliderWindowDirectionVertical = 1,
};

// Type: class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const struct SparkalColor*, const struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: uint32_t;

// Type: class ButtonWindow;
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const struct SparkalColor*, const struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: class Sound;
// VTABLE: COPTER_D 0x0058f458
class Sound{
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	class Sound& operator=(const class Sound&);
	virtual void SetSoundFile(const class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: class ScrollBarWindow;
// VTABLE: COPTER_D 0x00591fc0
class ScrollBarWindow : public SliderWindow
{
	enum ScrollHitTestResult {
		nScrollHitTestResultNone = 0,
		nScrollHitTestResultLinePrevious = 1,
		nScrollHitTestResultLineNext = 2,
		nScrollHitTestResultPagePrevious = 3,
		nScrollHitTestResultPageNext = 4,
		nScrollHitTestResultThumb = 5,
	};
public:
	void ScrollBarWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void ScrollBarWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetLineAndPageCount(long, long); // vtable+0xd8
	virtual void MoveLinePrevious(); // vtable+0xdc
	virtual void MoveLineNext(); // vtable+0xe0
	virtual void MovePagePrevious(); // vtable+0xe4
	virtual void MovePageNext(); // vtable+0xe8
protected:
	virtual int32_t DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult&, long, long); // vtable+0xec
	virtual void CalculateAllMetrics() /* override */;
	virtual long GetThumbWidth() /* override */;
	virtual long GetThumbHeight() /* override */;
	virtual long GetPrevNextButtonWidth(); // vtable+0xf0
	virtual long GetPrevNextButtonHeight(); // vtable+0xf4
	virtual long GetCurrentLine(); // vtable+0xf8
	virtual long GetValueOfGivenLine(long); // vtable+0xfc
	virtual long GetCurrentPage(); // vtable+0x100
	virtual long GetValueOfGivenPage(long); // vtable+0x104
	long lLineCount;
	long lPageCount;
	class MTimer myTimer;
	enum ScrollBarWindow::ScrollHitTestResult initialScrollHitTestResult;
	int32_t bCursorIsOnInitialHitTestResult;
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class CheckBoxWindow;
// VTABLE: COPTER_D 0x00591c58
class CheckBoxWindow : public ButtonWindow
{
public:
	void CheckBoxWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void CheckBoxWindow();
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t GetImageCount() /* override */;
	virtual void SetState(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
};

// Type: class RadioButtonWindow;
// VTABLE: COPTER_D 0x00591d38
class RadioButtonWindow : public ButtonWindow
{
public:
	void RadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual void ~RadioButtonWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual void AddToGroup(class ButtonGroup*); // vtable+0xdc
	virtual int32_t RemoveFromGroup(); // vtable+0xe0
	virtual void SetState(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	class ButtonGroup *myRadioButtonGroup;
};

// Type: class SliderWindow;
// VTABLE: COPTER_D 0x00591ee8
class SliderWindow : public GraphicWindow
{
	enum SliderWindowDirection {
		nSliderWindowDirectionHorizontal = 0,
		nSliderWindowDirectionVertical = 1,
	};
public:
	void SliderWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *, char *, long);
	void SliderWindow();
	virtual void ~SliderWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	void SetMinimumValue(long);
	void SetMaximumValue(long);
	virtual void MoveWindow(int32_t, int32_t) /* override */;
	virtual void SetWidthAndHeight(int32_t, int32_t) /* override */;
	long GetValue();
	void SetValue(long);
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual int32_t ConvertCursorPositionToValue(long&, long, long); // vtable+0xc4
	virtual void CalculateThumbPosition(); // vtable+0xc8
	virtual void CalculateAllMetrics(); // vtable+0xcc
	virtual long GetThumbWidth(); // vtable+0xd0
	virtual long GetThumbHeight(); // vtable+0xd4
public:
	enum SliderWindow::SliderWindowDirection nSliderWindowDirection;
	long lSliderMinimumValue;
	long lSliderMaximumValue;
	long lSliderCurrentValue;
	long lMinimumThumbPosition;
	long lCurrentThumbPosition;
	long lMaximumThumbPosition;
	long lThumbLimitIndentation;
	class MRect rectThumbImage;
	class CBackBuffer *myBackgroundImage;
	class basic_string<char> sBackgroundFile;
	int32_t bBusySettingValue;
};



// Contribution: 1:000705e0-00070d19 Module: 38, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004715e0
static void $E65() {

	__asm        call   $E61;
	__asm        call   $E64;
	__asm        jmp    near ptr 0x004715F5;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004715fa
static void $E61() {

	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x0047160F;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471614
static void $E64() {

	__asm        push   0x471631;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047162C;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471631
static void $E62() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 1;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 1;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x00471663;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471668
static void $E70() {

	__asm        call   $E67;
	__asm        call   $E69;
	__asm        jmp    near ptr 0x0047167D;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471682
static void $E67() {

	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x00471697;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047169c
static void $E69() {

	__asm        push   0x4716B9;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004716B4;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004716b9
static void $E68() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 2;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 2;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x004716EB;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004716f0
static void $E75() {

	__asm        call   $E72;
	__asm        call   $E74;
	__asm        jmp    near ptr 0x00471705;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047170a
static void $E72() {

	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x0047171F;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471724
static void $E74() {

	__asm        push   0x471741;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047173C;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471741
static void $E73() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 4;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 4;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x00471773;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471778
static void $E80() {

	__asm        call   $E77;
	__asm        call   $E79;
	__asm        jmp    near ptr 0x0047178D;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00471792
static void $E77() {

	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x004717A7;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004717ac
static void $E79() {

	__asm        push   0x4717C9;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004717C4;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004717c9
static void $E78() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 8;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 8;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x004717FB;
}

// FUNCTION: COPTER_D 0x00471800
void SoundButtonWindow::SoundButtonWindow() {

	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::ButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 30:
	__asm        cmp    SoundButtonWindow::lButtonSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 31:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Load;
// LINE 32:
_T34:
	__asm        inc    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 33:
	__asm        jmp    near ptr 0x0047183F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471847
void SoundButtonWindow::SoundButtonWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow *windowNewParent, char * szImageFileName, class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::ButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 45:
	__asm        cmp    SoundButtonWindow::lButtonSoundReferenceCount, 0;
	__asm        jne    _T4c;
// LINE 46:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Load;
// LINE 47:
_T4c:
	__asm        inc    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 48:
	__asm        jmp    near ptr 0x0047189E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004718a8
void SoundButtonWindow::~SoundButtonWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 56:
	__asm        dec    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 57:
	__asm        jne    _T2b;
// LINE 58:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Unload;
// LINE 59:
_T2b:
	__asm        jmp    near ptr 0x004718D8;

	__asm        jmp    near ptr 0x004718DD;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x004718ea
void SoundButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T43;

	__asm        cmp    nNewButtonState, 2;
	__asm        jne    _T43;
// LINE 67:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::SetVolume;
// LINE 68:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Play;
// LINE 70:
_T43:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::SetState;
// LINE 71:
	__asm        jmp    near ptr 0x0047193E;
}

// FUNCTION: COPTER_D 0x00471945
void SoundRadioButtonWindow::SoundRadioButtonWindow(class ButtonGroup *myNewRadioButtonGroup, class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow *windowNewParent, char * szImageFileName, class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, myNewRadioButtonGroup;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::RadioButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 83:
	__asm        cmp    SoundRadioButtonWindow::lRadioSoundReferenceCount, 0;
	__asm        jne    _T50;
// LINE 84:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Load;
// LINE 85:
_T50:
	__asm        inc    SoundRadioButtonWindow::lRadioSoundReferenceCount;
// LINE 86:
	__asm        jmp    near ptr 0x004719A0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004719aa
void SoundRadioButtonWindow::~SoundRadioButtonWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 92:
	__asm        dec    SoundRadioButtonWindow::lRadioSoundReferenceCount;
// LINE 93:
	__asm        jne    _T2b;
// LINE 94:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Unload;
// LINE 95:
_T2b:
	__asm        jmp    near ptr 0x004719DA;

	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::~RadioButtonWindow;
}

// FUNCTION: COPTER_D 0x004719e7
void SoundRadioButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T46;
// LINE 103:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::SetVolume;
// LINE 104:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Play;
// LINE 106:
_T46:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::SetState;
// LINE 107:
	__asm        jmp    near ptr 0x00471A3E;
}

// FUNCTION: COPTER_D 0x00471a45
void SoundCheckBoxWindow::SoundCheckBoxWindow() {

	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::CheckBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 113:
	__asm        cmp    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 114:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Load;
// LINE 115:
_T34:
	__asm        inc    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 116:
	__asm        jmp    near ptr 0x00471A84;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471a8c
void SoundCheckBoxWindow::SoundCheckBoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow *windowNewParent, char * szImageFileName, class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::CheckBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 127:
	__asm        cmp    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount, 0;
	__asm        jne    _T4c;
// LINE 128:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Load;
// LINE 129:
_T4c:
	__asm        inc    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 130:
	__asm        jmp    near ptr 0x00471AE3;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471aed
void SoundCheckBoxWindow::~SoundCheckBoxWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 136:
	__asm        dec    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 137:
	__asm        jne    _T2b;
// LINE 138:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Unload;
// LINE 139:
_T2b:
	__asm        jmp    near ptr 0x00471B1D;

	__asm        jmp    near ptr 0x00471B22;

	__asm        jmp    near ptr 0x00471B27;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00471b34
void SoundCheckBoxWindow::SetState(int32_t nNewButtonState) {
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T39;
// LINE 147:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::SetVolume;
// LINE 148:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Play;
// LINE 150:
_T39:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::SetState;
// LINE 151:
	__asm        jmp    near ptr 0x00471B7E;
}

// FUNCTION: COPTER_D 0x00471b85
void SoundScrollBarWindow::SoundScrollBarWindow() {

	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::ScrollBarWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 157:
	__asm        cmp    SoundScrollBarWindow::lScrollBarSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 158:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Load;
// LINE 159:
_T34:
	__asm        inc    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 160:
	__asm        jmp    near ptr 0x00471BC4;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471bcc
void SoundScrollBarWindow::SoundScrollBarWindow(class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, class GraphicWindow *windowNewParent, class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szImageFileName) {

	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::ScrollBarWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 171:
	__asm        cmp    SoundScrollBarWindow::lScrollBarSoundReferenceCount, 0;
	__asm        jne    _T50;
// LINE 172:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Load;
// LINE 173:
_T50:
	__asm        inc    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 174:
	__asm        jmp    near ptr 0x00471C27;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471c31
void SoundScrollBarWindow::~SoundScrollBarWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 180:
	__asm        dec    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 181:
	__asm        jne    _T2b;
// LINE 182:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Unload;
// LINE 183:
_T2b:
	__asm        jmp    near ptr 0x00471C61;

	__asm        jmp    near ptr 0x00471C66;

	__asm        jmp    near ptr 0x00471C6B;

	__asm        mov    ecx, this;
	__asm        call   SliderWindow::~SliderWindow;
}

// FUNCTION: COPTER_D 0x00471c78
void SoundScrollBarWindow::MoveLinePrevious() {
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T3f;
// LINE 192:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::SetVolume;
// LINE 193:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Play;
// LINE 195:
_T3f:
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::MoveLinePrevious;
// LINE 196:
	__asm        jmp    near ptr 0x00471CC4;
}

// FUNCTION: COPTER_D 0x00471cc9
void SoundScrollBarWindow::MoveLineNext() {
// LINE 205:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T3f;
// LINE 206:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::SetVolume;
// LINE 207:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Play;
// LINE 209:
_T3f:
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::MoveLineNext;
// LINE 210:
	__asm        jmp    near ptr 0x00471D15;
}



// Contribution: 1:00070d20-00070d3b Module: 38, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00070d40-00070d78 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d40
// SoundButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070d80-00070db8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d80
// SoundRadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070dc0-00070df8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471dc0
// SoundCheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:00070e00-00070e38 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471e00
// SoundScrollBarWindow::`scalar deleting destructor'



// Contribution: 2:00001870-0000194b Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundButtonWindow @ 0x00590870
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ButtonWindow::Initialize @ 0x004ae385
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: ButtonWindow::ComposeSelf @ 0x004aeb6b
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: ButtonWindow::DoCursorDown @ 0x004aec47
//   36: ButtonWindow::DoCursorUp @ 0x004aec9a
//   37: ButtonWindow::DoCursorMove @ 0x004aed4d
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SoundButtonWindow::`scalar deleting destructor' @ 0x00471d40
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: ButtonWindow::GetImageCount @ 0x004ae3fb
//   50: SoundButtonWindow::SetState @ 0x004718ea
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55 entries



// Contribution: 2:00001950-00001a33 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundRadioButtonWindow @ 0x00590950
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: RadioButtonWindow::Initialize @ 0x004afd2a
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: RadioButtonWindow::ComposeSelf @ 0x004afd6a
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: RadioButtonWindow::DoCursorDown @ 0x004affd4
//   36: RadioButtonWindow::DoCursorUp @ 0x004b0049
//   37: RadioButtonWindow::DoCursorMove @ 0x004b0066
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SoundRadioButtonWindow::`scalar deleting destructor' @ 0x00471d80
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: RadioButtonWindow::GetImageCount @ 0x004afe54
//   50: SoundRadioButtonWindow::SetState @ 0x004719e7
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55: RadioButtonWindow::AddToGroup @ 0x004afe6f
//   56: RadioButtonWindow::RemoveFromGroup @ 0x004afe9f
//   57 entries



// Contribution: 2:00001a38-00001b13 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundCheckBoxWindow @ 0x00590a38
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ButtonWindow::Initialize @ 0x004ae385
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: ButtonWindow::CreateImage @ 0x004ae416
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: CheckBoxWindow::ComposeSelf @ 0x004af5c1
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: ButtonWindow::CanWeRespondToMessage @ 0x004aede3
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: CheckBoxWindow::DoCursorDown @ 0x004af74d
//   36: CheckBoxWindow::DoCursorUp @ 0x004af7bd
//   37: CheckBoxWindow::DoCursorMove @ 0x004af7da
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SoundCheckBoxWindow::`scalar deleting destructor' @ 0x00471dc0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: CheckBoxWindow::GetImageCount @ 0x004af5a6
//   50: SoundCheckBoxWindow::SetState @ 0x00471b34
//   51: ButtonWindow::GetState @ 0x00471d20
//   52: ButtonWindow::Enable @ 0x004aeb0d
//   53: ButtonWindow::Disable @ 0x004aeb3c
//   54: ButtonWindow::SetTextColor @ 0x004ae3b3
//   55 entries



// Contribution: 2:00001b18-00001c1f Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundScrollBarWindow @ 0x00590b18
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: ScrollBarWindow::Initialize @ 0x004b300d
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: SliderWindow::CreateImage @ 0x004b1b65
//   05: SliderWindow::DestroyImage @ 0x004b1e64
//   06: ScrollBarWindow::ComposeSelf @ 0x004b30ae
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: SliderWindow::MoveWindow @ 0x004b1ed9
//   14: SliderWindow::SetWidthAndHeight @ 0x004b1f0f
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: ScrollBarWindow::DoCursorDown @ 0x004b35dd
//   36: ScrollBarWindow::DoCursorUp @ 0x004b3850
//   37: ScrollBarWindow::DoCursorMove @ 0x004b38e4
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SoundScrollBarWindow::`scalar deleting destructor' @ 0x00471e00
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: SliderWindow::ConvertCursorPositionToValue @ 0x004b2361
//   50: SliderWindow::CalculateThumbPosition @ 0x004b2560
//   51: ScrollBarWindow::CalculateAllMetrics @ 0x004b3f73
//   52: ScrollBarWindow::GetThumbWidth @ 0x004b404b
//   53: ScrollBarWindow::GetThumbHeight @ 0x004b4077
//   54: ScrollBarWindow::SetLineAndPageCount @ 0x004b3bac
//   55: SoundScrollBarWindow::MoveLinePrevious @ 0x00471c78
//   56: SoundScrollBarWindow::MoveLineNext @ 0x00471cc9
//   57: ScrollBarWindow::MovePagePrevious @ 0x004b3abe
//   58: ScrollBarWindow::MovePageNext @ 0x004b3b34
//   59: ScrollBarWindow::DoCursorPositionHitTest @ 0x004b3db8
//   60: ScrollBarWindow::GetPrevNextButtonWidth @ 0x004b409b
//   61: ScrollBarWindow::GetPrevNextButtonHeight @ 0x004b40bf
//   62: ScrollBarWindow::GetCurrentLine @ 0x004b3c48
//   63: ScrollBarWindow::GetValueOfGivenLine @ 0x004b3ca4
//   64: ScrollBarWindow::GetCurrentPage @ 0x004b3d00
//   65: ScrollBarWindow::GetValueOfGivenPage @ 0x004b3d5c
//   66 entries



// Contribution: 3:00000054-00000063 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597054
static void (*$S66)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597058
static void (*$S71)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059705c
static void (*$S76)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597060
static void (*$S81)() = { 0 /* todo */ };



// Contribution: 3:000027b8-000027c7 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005997b8
long SoundButtonWindow::lButtonSoundReferenceCount = 0;

// GLOBAL: COPTER_D 0x005997bc
long SoundRadioButtonWindow::lRadioSoundReferenceCount = 0;

// GLOBAL: COPTER_D 0x005997c0
long SoundCheckBoxWindow::lCheckBoxSoundReferenceCount = 0;

// GLOBAL: COPTER_D 0x005997c4
long SoundScrollBarWindow::lScrollBarSoundReferenceCount = 0;



// Contribution: 3:0006d248-0006d444 Module: 38, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604248
class DigitalSound SoundScrollBarWindow::scrollBarSound;

// GLOBAL: COPTER_D 0x006042c8
class DigitalSound SoundButtonWindow::buttonSound;

// GLOBAL: COPTER_D 0x00604348
class DigitalSound SoundCheckBoxWindow::checkBoxSound;

// GLOBAL: COPTER_D 0x006043c8
class DigitalSound SoundRadioButtonWindow::radioButtonSound;

// GLOBAL: COPTER_D 0x00604444
// $S63
