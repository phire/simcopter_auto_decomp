// Module: scontrols.obj
// Source: C:\Copter\source\sparkal\scontrols.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class DigitalSound;
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer* lpSound[8];
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long IsPlaying(struct IDirectSoundBuffer**);
public:
	virtual long IsPlaying();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: long;

// Type: void ();

// Type: void;

// Type: class SoundButtonWindow (forward reference);
class SoundButtonWindow : public ButtonWindow
{
public:
	void SoundButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void SoundButtonWindow();
	virtual void ~SoundButtonWindow();
	virtual void SetState(int32_t);
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound buttonSound;
	static long lButtonSoundReferenceCount;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: char *;

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class SoundRadioButtonWindow (forward reference);
class SoundRadioButtonWindow : public RadioButtonWindow
{
public:
	void SoundRadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	virtual void ~SoundRadioButtonWindow();
	virtual void SetState(int32_t);
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound radioButtonSound;
	static long lRadioSoundReferenceCount;
};

// Type: class ButtonGroup (forward reference);
// ButtonGroup Class implementation not found

// Type: class SoundCheckBoxWindow (forward reference);
class SoundCheckBoxWindow : public CheckBoxWindow
{
public:
	void SoundCheckBoxWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void SoundCheckBoxWindow();
	virtual void ~SoundCheckBoxWindow();
	virtual void SetState(int32_t);
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound checkBoxSound;
	static long lCheckBoxSoundReferenceCount;
};

// Type: class SoundScrollBarWindow (forward reference);
class SoundScrollBarWindow : public ScrollBarWindow
{
public:
	void SoundScrollBarWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void SoundScrollBarWindow();
	virtual void ~SoundScrollBarWindow();
	virtual void MoveLinePrevious();
	virtual void MoveLineNext();
	// calltype: NearC
	static void SetSoundFile(const class basic_string<char>&);
protected:
	static class DigitalSound scrollBarSound;
	static long lScrollBarSoundReferenceCount;
};

// Type: enum SliderWindow::SliderWindowDirection;
	enum SliderWindow::SliderWindowDirection {
		nSliderWindowDirectionHorizontal = 0,
		nSliderWindowDirectionVertical = 1,
	};

// Type: class ButtonWindow (forward reference);
class ButtonWindow : public GraphicWindow
{
		enum ButtonWindow::ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: uint32_t;

// Type: class ButtonWindow;
class ButtonWindow : public GraphicWindow
{
		enum ButtonWindow::ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: class Sound;
class Sound{
		enum Sound::SoundSourceType {
			nSoundSourceTypeResource = 0,
			nSoundSourceTypeFile = 1,
		};
public:
	enum Sound::SoundSourceType nSoundSourceType;
		enum Sound::SoundDuplicateType {
			nSoundDuplicateDefault = 0,
			nSoundDuplicateInterrupt = 1,
			nSoundDuplicateContinue = 2,
			nSoundDuplicateOverlap = 3,
		};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class CheckBoxWindow;
class CheckBoxWindow : public ButtonWindow
{
public:
	void CheckBoxWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void CheckBoxWindow();
	virtual int32_t ComposeSelf();
	virtual int32_t GetImageCount();
	virtual void SetState(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
};

// Type: class ScrollBarWindow;
class ScrollBarWindow : public SliderWindow
{
		enum ScrollBarWindow::ScrollHitTestResult {
			nScrollHitTestResultNone = 0,
			nScrollHitTestResultLinePrevious = 1,
			nScrollHitTestResultLineNext = 2,
			nScrollHitTestResultPagePrevious = 3,
			nScrollHitTestResultPageNext = 4,
			nScrollHitTestResultThumb = 5,
		};
public:
	void ScrollBarWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void ScrollBarWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetLineAndPageCount(long, long);
	// vtable: 220
	intro void MoveLinePrevious();
	// vtable: 224
	intro void MoveLineNext();
	// vtable: 228
	intro void MovePagePrevious();
	// vtable: 232
	intro void MovePageNext();
protected:
	// vtable: 236
	intro int32_t DoCursorPositionHitTest(enum ScrollBarWindow::ScrollHitTestResult&, long, long);
	virtual void CalculateAllMetrics();
	virtual long GetThumbWidth();
	virtual long GetThumbHeight();
	// vtable: 240
	intro long GetPrevNextButtonWidth();
	// vtable: 244
	intro long GetPrevNextButtonHeight();
	// vtable: 248
	intro long GetCurrentLine();
	// vtable: 252
	intro long GetValueOfGivenLine(long);
	// vtable: 256
	intro long GetCurrentPage();
	// vtable: 260
	intro long GetValueOfGivenPage(long);
	long lLineCount;
	long lPageCount;
	class MTimer myTimer;
	enum ScrollBarWindow::ScrollHitTestResult initialScrollHitTestResult;
	int32_t bCursorIsOnInitialHitTestResult;
};

// Type: class RadioButtonWindow;
class RadioButtonWindow : public ButtonWindow
{
public:
	void RadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual void ~RadioButtonWindow();
	virtual int32_t Initialize();
	virtual int32_t GetImageCount();
	virtual int32_t ComposeSelf();
	// vtable: 220
	intro void AddToGroup(class ButtonGroup*);
	// vtable: 224
	intro int32_t RemoveFromGroup();
	virtual void SetState(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	class ButtonGroup* myRadioButtonGroup;
};

// Type: class SliderWindow;
class SliderWindow : public GraphicWindow
{
		enum SliderWindow::SliderWindowDirection {
			nSliderWindowDirectionHorizontal = 0,
			nSliderWindowDirectionVertical = 1,
		};
public:
	void SliderWindow(class MRect&, int32_t, enum SliderWindow::SliderWindowDirection, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *, char *, long);
	void SliderWindow();
	virtual void ~SliderWindow();
	virtual int32_t Initialize();
	void SetMinimumValue(long);
	void SetMaximumValue(long);
	virtual void MoveWindow(int32_t, int32_t);
	virtual void SetWidthAndHeight(int32_t, int32_t);
	long GetValue();
	void SetValue(long);
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	// vtable: 196
	intro int32_t ConvertCursorPositionToValue(long&, long, long);
	// vtable: 200
	intro void CalculateThumbPosition();
	// vtable: 204
	intro void CalculateAllMetrics();
	// vtable: 208
	intro long GetThumbWidth();
	// vtable: 212
	intro long GetThumbHeight();
public:
	enum SliderWindow::SliderWindowDirection nSliderWindowDirection;
	long lSliderMinimumValue;
	long lSliderMaximumValue;
	long lSliderCurrentValue;
	long lMinimumThumbPosition;
	long lCurrentThumbPosition;
	long lMaximumThumbPosition;
	long lThumbLimitIndentation;
	class MRect rectThumbImage;
	class CBackBuffer* myBackgroundImage;
	class basic_string<char> sBackgroundFile;
	int32_t bBusySettingValue;
};



// Contribution: 1:000705e0-00070d19 Module: 38, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004715e0
void $E65() {

	__asm        call   $E61;
	__asm        call   $E64;
	__asm        jmp    near ptr 0x004715F5;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004715fa
void $E61() {

	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x0047160F;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471614
void $E64() {

	__asm        push   0x471631;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047162C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471631
void $E62() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 1;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 1;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x00471663;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471668
void $E70() {

	__asm        call   $E67;
	__asm        call   $E69;
	__asm        jmp    near ptr 0x0047167D;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471682
void $E67() {

	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x00471697;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0047169c
void $E69() {

	__asm        push   0x4716B9;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004716B4;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004716b9
void $E68() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 2;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 2;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x004716EB;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004716f0
void $E75() {

	__asm        call   $E72;
	__asm        call   $E74;
	__asm        jmp    near ptr 0x00471705;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0047170a
void $E72() {

	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x0047171F;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471724
void $E74() {

	__asm        push   0x471741;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047173C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471741
void $E73() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 4;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 4;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x00471773;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471778
void $E80() {

	__asm        call   $E77;
	__asm        call   $E79;
	__asm        jmp    near ptr 0x0047178D;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00471792
void $E77() {

	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::DigitalSound;
	__asm        jmp    near ptr 0x004717A7;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004717ac
void $E79() {

	__asm        push   0x4717C9;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004717C4;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004717c9
void $E78() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        test   al, 8;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x604444];
	__asm        or     al, 8;
	__asm        mov    ds:[0x604444], al;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::~DigitalSound;
_T2d:
	__asm        jmp    near ptr 0x004717FB;
}

// FUNCTION: COPTER_D 0x00471800
void SoundButtonWindow::SoundButtonWindow() {

	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::ButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 30:
	__asm        cmp    SoundButtonWindow::lButtonSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 31:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Load;
// LINE 32:
_T34:
	__asm        inc    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 33:
	__asm        jmp    near ptr 0x0047183F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471847
void SoundButtonWindow::SoundButtonWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::ButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 45:
	__asm        cmp    SoundButtonWindow::lButtonSoundReferenceCount, 0;
	__asm        jne    _T4c;
// LINE 46:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Load;
// LINE 47:
_T4c:
	__asm        inc    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 48:
	__asm        jmp    near ptr 0x0047189E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004718a8
void SoundButtonWindow::~SoundButtonWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590870;
// LINE 56:
	__asm        dec    SoundButtonWindow::lButtonSoundReferenceCount;
// LINE 57:
	__asm        jne    _T2b;
// LINE 58:
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Unload;
// LINE 59:
_T2b:
	__asm        jmp    near ptr 0x004718D8;

	__asm        jmp    near ptr 0x004718DD;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x004718ea
void SoundButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T43;

	__asm        cmp    nNewButtonState, 2;
	__asm        jne    _T43;
// LINE 67:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::SetVolume;
// LINE 68:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6042C8;
	__asm        call   DigitalSound::Play;
// LINE 70:
_T43:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ButtonWindow::SetState;
// LINE 71:
	__asm        jmp    near ptr 0x0047193E;
}

// FUNCTION: COPTER_D 0x00471945
void SoundRadioButtonWindow::SoundRadioButtonWindow(class ButtonGroup* myNewRadioButtonGroup, class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, myNewRadioButtonGroup;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::RadioButtonWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 83:
	__asm        cmp    SoundRadioButtonWindow::lRadioSoundReferenceCount, 0;
	__asm        jne    _T50;
// LINE 84:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Load;
// LINE 85:
_T50:
	__asm        inc    SoundRadioButtonWindow::lRadioSoundReferenceCount;
// LINE 86:
	__asm        jmp    near ptr 0x004719A0;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004719aa
void SoundRadioButtonWindow::~SoundRadioButtonWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590950;
// LINE 92:
	__asm        dec    SoundRadioButtonWindow::lRadioSoundReferenceCount;
// LINE 93:
	__asm        jne    _T2b;
// LINE 94:
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Unload;
// LINE 95:
_T2b:
	__asm        jmp    near ptr 0x004719DA;

	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::~RadioButtonWindow;
}

// FUNCTION: COPTER_D 0x004719e7
void SoundRadioButtonWindow::SetState(int32_t nNewButtonState) {
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T46;
// LINE 103:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::SetVolume;
// LINE 104:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6043C8;
	__asm        call   DigitalSound::Play;
// LINE 106:
_T46:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioButtonWindow::SetState;
// LINE 107:
	__asm        jmp    near ptr 0x00471A3E;
}

// FUNCTION: COPTER_D 0x00471a45
void SoundCheckBoxWindow::SoundCheckBoxWindow() {

	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::CheckBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 113:
	__asm        cmp    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 114:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Load;
// LINE 115:
_T34:
	__asm        inc    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 116:
	__asm        jmp    near ptr 0x00471A84;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471a8c
void SoundCheckBoxWindow::SoundCheckBoxWindow(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, char * szImageFileName, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::CheckBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 127:
	__asm        cmp    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount, 0;
	__asm        jne    _T4c;
// LINE 128:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Load;
// LINE 129:
_T4c:
	__asm        inc    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 130:
	__asm        jmp    near ptr 0x00471AE3;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471aed
void SoundCheckBoxWindow::~SoundCheckBoxWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590A38;
// LINE 136:
	__asm        dec    SoundCheckBoxWindow::lCheckBoxSoundReferenceCount;
// LINE 137:
	__asm        jne    _T2b;
// LINE 138:
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Unload;
// LINE 139:
_T2b:
	__asm        jmp    near ptr 0x00471B1D;

	__asm        jmp    near ptr 0x00471B22;

	__asm        jmp    near ptr 0x00471B27;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00471b34
void SoundCheckBoxWindow::SetState(int32_t nNewButtonState) {
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewButtonState;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T39;
// LINE 147:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::SetVolume;
// LINE 148:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604348;
	__asm        call   DigitalSound::Play;
// LINE 150:
_T39:
	__asm        mov    eax, nNewButtonState;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckBoxWindow::SetState;
// LINE 151:
	__asm        jmp    near ptr 0x00471B7E;
}

// FUNCTION: COPTER_D 0x00471b85
void SoundScrollBarWindow::SoundScrollBarWindow() {

	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::ScrollBarWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 157:
	__asm        cmp    SoundScrollBarWindow::lScrollBarSoundReferenceCount, 0;
	__asm        jne    _T34;
// LINE 158:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Load;
// LINE 159:
_T34:
	__asm        inc    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 160:
	__asm        jmp    near ptr 0x00471BC4;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471bcc
void SoundScrollBarWindow::SoundScrollBarWindow(class MRect& rectNewWindow, int32_t nNewID, enum SliderWindow::SliderWindowDirection newSliderWindowDirection, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szImageFileName) {

	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, newSliderWindowDirection;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::ScrollBarWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 171:
	__asm        cmp    SoundScrollBarWindow::lScrollBarSoundReferenceCount, 0;
	__asm        jne    _T50;
// LINE 172:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Load;
// LINE 173:
_T50:
	__asm        inc    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 174:
	__asm        jmp    near ptr 0x00471C27;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00471c31
void SoundScrollBarWindow::~SoundScrollBarWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590B18;
// LINE 180:
	__asm        dec    SoundScrollBarWindow::lScrollBarSoundReferenceCount;
// LINE 181:
	__asm        jne    _T2b;
// LINE 182:
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Unload;
// LINE 183:
_T2b:
	__asm        jmp    near ptr 0x00471C61;

	__asm        jmp    near ptr 0x00471C66;

	__asm        jmp    near ptr 0x00471C6B;

	__asm        mov    ecx, this;
	__asm        call   SliderWindow::~SliderWindow;
}

// FUNCTION: COPTER_D 0x00471c78
void SoundScrollBarWindow::MoveLinePrevious() {
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T3f;
// LINE 192:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::SetVolume;
// LINE 193:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Play;
// LINE 195:
_T3f:
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::MoveLinePrevious;
// LINE 196:
	__asm        jmp    near ptr 0x00471CC4;
}

// FUNCTION: COPTER_D 0x00471cc9
void SoundScrollBarWindow::MoveLineNext() {
// LINE 205:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T3f;
// LINE 206:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::SetVolume;
// LINE 207:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x604248;
	__asm        call   DigitalSound::Play;
// LINE 209:
_T3f:
	__asm        mov    ecx, this;
	__asm        call   ScrollBarWindow::MoveLineNext;
// LINE 210:
	__asm        jmp    near ptr 0x00471D15;
}



// Contribution: 1:00070d20-00070d3b Module: 38, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00070d40-00070d78 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d40
// SoundButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070d80-00070db8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471d80
// SoundRadioButtonWindow::`scalar deleting destructor'



// Contribution: 1:00070dc0-00070df8 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471dc0
// SoundCheckBoxWindow::`scalar deleting destructor'



// Contribution: 1:00070e00-00070e38 Module: 38, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00471e00
// SoundScrollBarWindow::`scalar deleting destructor'



// Contribution: 2:00001870-0000194b Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590870
// GLOBAL: COPTER_D 0x00590870
// ??_7SoundButtonWindow@@6B@


// Contribution: 2:00001950-00001a33 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590950
// GLOBAL: COPTER_D 0x00590950
// ??_7SoundRadioButtonWindow@@6B@


// Contribution: 2:00001a38-00001b13 Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590a38
// GLOBAL: COPTER_D 0x00590a38
// ??_7SoundCheckBoxWindow@@6B@


// Contribution: 2:00001b18-00001c1f Module: 38, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590b18
// GLOBAL: COPTER_D 0x00590b18
// ??_7SoundScrollBarWindow@@6B@


// Contribution: 3:00000054-00000063 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597054
void (*$S66)() = { /* <data@0x00597054> */ };

// GLOBAL: COPTER_D 0x00597058
void (*$S71)() = { /* <data@0x00597058> */ };

// GLOBAL: COPTER_D 0x0059705c
void (*$S76)() = { /* <data@0x0059705c> */ };

// GLOBAL: COPTER_D 0x00597060
void (*$S81)() = { /* <data@0x00597060> */ };



// Contribution: 3:000027b8-000027c7 Module: 38, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005997b8
long SoundButtonWindow::lButtonSoundReferenceCount = { /* <data@0x005997b8> */ };

// GLOBAL: COPTER_D 0x005997bc
long SoundRadioButtonWindow::lRadioSoundReferenceCount = { /* <data@0x005997bc> */ };

// GLOBAL: COPTER_D 0x005997c0
long SoundCheckBoxWindow::lCheckBoxSoundReferenceCount = { /* <data@0x005997c0> */ };

// GLOBAL: COPTER_D 0x005997c4
long SoundScrollBarWindow::lScrollBarSoundReferenceCount = { /* <data@0x005997c4> */ };



// Contribution: 3:0006d248-0006d444 Module: 38, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604248
class DigitalSound SoundScrollBarWindow::scrollBarSound = { /* <data@0x00604248> */ };

// GLOBAL: COPTER_D 0x006042c8
class DigitalSound SoundButtonWindow::buttonSound = { /* <data@0x006042c8> */ };

// GLOBAL: COPTER_D 0x00604348
class DigitalSound SoundCheckBoxWindow::checkBoxSound = { /* <data@0x00604348> */ };

// GLOBAL: COPTER_D 0x006043c8
class DigitalSound SoundRadioButtonWindow::radioButtonSound = { /* <data@0x006043c8> */ };

// GLOBAL: COPTER_D 0x00604444
// LOCAL: COPTER_D 0x00604444
// $S63
