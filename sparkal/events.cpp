// Module: events.obj
// Source: C:\Copter\source\sparkal\events.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;
// Type: long;


// Contribution: 1:00030b60-00030c4c Module: 63, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00431b60
int32_t IsEventSet(int32_t nEvent) {
// LINE 22:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 23:
	__asm        jmp    near ptr 0x00431B6B;
	__asm        mov    eax, nEvent;
	__asm        mov    ecx, ds:[0x599BBC];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2+0x110];
	__asm        mov    eax, edx;
	__asm        jmp    near ptr 0x00431B84;
// LINE 24:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431b89
int32_t IsEventRangeSet(int32_t nEventStart, int32_t nEventEnd) {
// LINE 32:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 33:
	__asm        mov    eax, nEventStart;
	__asm        cmp    nEventEnd, eax;
	__asm        jl     near ptr 0x00431BCA;
// LINE 34:
	__asm        jmp    near ptr 0x00431BA0;
	__asm        mov    eax, nEventStart;
	__asm        mov    ecx, ds:[0x599BBC];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*2+0x110];
	__asm        test   edx, edx;
	__asm        je     near ptr 0x00431BC2;
// LINE 35:
	__asm        mov    eax, nEventStart;
	__asm        jmp    near ptr 0x00431BD1;
// LINE 36:
	__asm        inc    nEventStart;
// LINE 37:
	__asm        jmp    near ptr 0x00431B8F;
// LINE 38:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431BD1;
// LINE 39:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431bd6
long GetJoystickValue(int32_t nCommand) {
// LINE 46:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 47:
	__asm        jmp    near ptr 0x00431BE1;
	__asm        mov    eax, nCommand;
	__asm        mov    ecx, ds:[0x599BBC];
	__asm        mov    eax, [ecx+eax*4+0xA28];
	__asm        jmp    near ptr 0x00431BF6;
// LINE 48:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431bfb
long GetJoystickValueEither(int32_t nCommand1, int32_t nCommand2) {
	long lReturnValue;

// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 58:
	__asm        mov    eax, nCommand1;
	__asm        mov    ecx, ds:[0x599BBC];
	__asm        mov    eax, [ecx+eax*4+0xA28];
	__asm        mov    lReturnValue, eax;
	__asm        jmp    near ptr 0x00431C1C;
	__asm        cmp    lReturnValue, 0;
	__asm        je     near ptr 0x00431C2E;
// LINE 59:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    near ptr 0x00431C48;
// LINE 60:
	__asm        jmp    near ptr 0x00431C33;
	__asm        mov    eax, nCommand2;
	__asm        mov    ecx, ds:[0x599BBC];
	__asm        mov    eax, [ecx+eax*4+0xA28];
	__asm        jmp    near ptr 0x00431C48;
// LINE 61:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

