// Module: Mfont.obj
// Source: C:\Copter\source\sparkal\Mfont.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0009e780-0009f398 Module: 11, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049f780
void MFont::MFont() {
// LINE 28:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x59A950];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049F844;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049F7C2;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049F81E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049F819;
	__asm        jmp    near ptr 0x0049F827;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F836;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0049F84E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F85D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 30:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 32:
	__asm        jmp    near ptr 0x0049F893;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049f89b
void MFont::MFont(const class MFont& copyMFont) {
// LINE 40:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049F8FA;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F8EC;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0049F904;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F913;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 43:
	__asm        mov    eax, copyMFont;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049FD33;
// LINE 44:
	__asm        jmp    near ptr 0x0049F92D;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049f937
void MFont::MFont(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes, int32_t bCreateNow) {
// LINE 54:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0049F996;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F988;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0049F9A0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F9AF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 55:
	__asm        jmp    near ptr 0x0049F9BD;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0049FA08;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049F9F9;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FA08;
	__asm        jmp    near ptr 0x0049FA0D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0049FA3E;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0049FBBF;
	__asm        jmp    near ptr 0x0049FA2C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0049FBBF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0049FB19;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0049FA91;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FA82;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FA91;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049FAF6;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049FAF1;
	__asm        jmp    near ptr 0x0049FAFF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049FB0E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0049FB20;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049FBAC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0049FBAC;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049FB8C;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049FB91;
	__asm        jmp    near ptr 0x0049FB96;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FBA7;
	__asm        jmp    near ptr 0x0049FBAC;
	__asm        jmp    near ptr 0x0049FBB1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0049FBF2;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0049FBF2;
	__asm        jmp    near ptr 0x0049FBCE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049FBF2;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049FC03;
	__asm        jmp    near ptr 0x0049FC08;
// LINE 56:
	__asm        mov    eax, lNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 57:
	__asm        mov    eax, lNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 58:
	__asm        mov    eax, lNewAttributes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 62:
	__asm        cmp    bCreateNow, 0;
	__asm        je     near ptr 0x0049FC3F;
// LINE 63:
	__asm        mov    ecx, this;
	__asm        call   0x0049FF74;
// LINE 64:
	__asm        jmp    near ptr 0x0049FC44;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0049fc4e
void MFont::~MFont() {
// LINE 72:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 73:
	__asm        mov    ecx, this;
	__asm        call   0x004A01E9;
// LINE 74:
	__asm        jmp    near ptr 0x0049FC70;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049FCFC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0049FCFC;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049FCDC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049FCE1;
	__asm        jmp    near ptr 0x0049FCE6;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FCF7;
	__asm        jmp    near ptr 0x0049FCFC;
	__asm        jmp    near ptr 0x0049FD01;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049FD29;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FD2E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049fd33
class MFont& MFont::operator=(const class MFont& copyMFont) {
// LINE 81:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 82:
	__asm        mov    eax, copyMFont;
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0049FD53;
// LINE 83:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0049FF6D;
// LINE 84:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    ecx, copyMFont;
	__asm        add    ecx, 4;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0049FF1A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049FDF3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0049FDF3;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049FDD3;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049FDD8;
	__asm        jmp    near ptr 0x0049FDDD;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FDEE;
	__asm        jmp    near ptr 0x0049FDF3;
	__asm        jmp    near ptr 0x0049FDF8;
	__asm        jmp    near ptr 0x0049FDFD;
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0049FE27;
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0049FF1A;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049FF10;
	__asm        jmp    near ptr 0x0049FE43;
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049FEEA;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049FE8A;
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049FEAF;
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0049FEBB;
	__asm        jmp    near ptr 0x0049FEBB;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0049FEBB;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049FEE5;
	__asm        jmp    near ptr 0x0049FEF3;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049FF02;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0049FF1A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x0049FF1F;
// LINE 85:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 86:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 87:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 92:
	__asm        mov    eax, copyMFont;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0049FF65;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 95:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0049FF6D;
// LINE 96:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049ff74
int32_t MFont::CreateFontA() {
	unsigned long dwItalic;
	unsigned long dwStrikeOut;
	int32_t nWeight;
	unsigned long dwUnderline;

// LINE 125:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 2;
	__asm        mov    dwItalic, eax;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 4;
	__asm        mov    dwUnderline, eax;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 8;
	__asm        mov    dwStrikeOut, eax;
// LINE 132:
	__asm        jmp    near ptr 0x0049FFA9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0049FFC0;
// LINE 133:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0158;
// LINE 134:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x14], 1;
	__asm        je     near ptr 0x0049FFD9;
// LINE 135:
	__asm        mov    nWeight, 0x2BC;
// LINE 136:
	__asm        jmp    near ptr 0x0049FFE0;
// LINE 137:
	__asm        mov    nWeight, 0x190;
// LINE 139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0049FFF8;
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 144:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A0020;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A0025;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A0043;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A00BC;
	__asm        jmp    near ptr 0x004A0058;
	__asm        jmp    near ptr 0x004A005D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A0082;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004A008E;
	__asm        jmp    near ptr 0x004A008E;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x004A008E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A00BC;
	__asm        jmp    near ptr 0x004A00C1;
	__asm        mov    byte ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004A00CA;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004A00D5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A00F6;
	__asm        jmp    near ptr 0x004A00FB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dwStrikeOut;
	__asm        push   eax;
	__asm        mov    eax, dwUnderline;
	__asm        push   eax;
	__asm        mov    eax, dwItalic;
	__asm        push   eax;
	__asm        mov    eax, nWeight;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3540];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x004A0151;
// LINE 146:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A0158;
// LINE 147:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0158;
// LINE 151:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a015d
void MFont::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
	int32_t bFontChanged;

// LINE 163:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 164:
	__asm        mov    bFontChanged, 0;
// LINE 166:
	__asm        cmp    lNewHeight, 0;
	__asm        je     near ptr 0x004A018A;
// LINE 167:
	__asm        mov    eax, lNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 168:
	__asm        mov    bFontChanged, 1;
// LINE 170:
	__asm        cmp    lNewWidth, 0;
	__asm        je     near ptr 0x004A01A4;
// LINE 171:
	__asm        mov    eax, lNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 172:
	__asm        mov    bFontChanged, 1;
// LINE 174:
	__asm        cmp    lNewAttributes, 0;
	__asm        je     near ptr 0x004A01BE;
// LINE 175:
	__asm        mov    eax, lNewAttributes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 176:
	__asm        mov    bFontChanged, 1;
// LINE 178:
	__asm        cmp    bFontChanged, 0;
	__asm        je     near ptr 0x004A01DD;
// LINE 179:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 182:
	__asm        jmp    near ptr 0x004A01E2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004a01e9
void MFont::DestroyFont() {
// LINE 190:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 192:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x004A0219;
// LINE 193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 199:
	__asm        jmp    near ptr 0x004A021E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a0223
int32_t MFont::IsFontAvailable(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes) {
// LINE 208:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 210:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0230;
// LINE 214:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a0235
int32_t MFont::LoadFont(char * szPath) {
	int32_t nReturnValue;

// LINE 222:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 224:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C356C];
	__asm        mov    nReturnValue, eax;
// LINE 225:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x004A0266;
// LINE 226:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 230:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A026E;
// LINE 231:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a0273
int32_t MFont::UnloadFont(char * szPath) {
	int32_t nReturnValue;

// LINE 239:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 241:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3564];
	__asm        mov    nReturnValue, eax;
// LINE 242:
	__asm        cmp    nReturnValue, 0;
	__asm        je     near ptr 0x004A02A4;
// LINE 243:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 247:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A02AC;
// LINE 248:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a02b1
int32_t MFont::GetTextDimensions(char * szString, long& lWidth, long& lHeight) {
	struct tagSIZE sizeText;
	struct tagRECT rectText;
	void * __ptr32 hdcScreen;
	long lStringLength;
	int32_t nReturnValue;
	void * __ptr32 hFontOriginal;

// LINE 259:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 265:
	__asm        mov    nReturnValue, 1;
// LINE 268:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x004A02D8;
// LINE 269:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0392;
// LINE 270:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 271:
	__asm        cmp    hdcScreen, 0;
	__asm        je     near ptr 0x004A038B;
// LINE 272:
	__asm        cmp    szString, 0;
	__asm        jne    near ptr 0x004A02FF;
// LINE 273:
	__asm        mov    eax, ds:[0x59A94C];
	__asm        mov    szString, eax;
// LINE 274:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 275:
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    lStringLength, eax;
// LINE 276:
	__asm        mov    rectText.left, 0;
// LINE 277:
	__asm        mov    rectText.top, 0;
// LINE 278:
	__asm        mov    rectText.right, 0xF4240;
// LINE 279:
	__asm        mov    rectText.bottom, 0xF4240;
// LINE 280:
	__asm        push   0xC10;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C389C];
// LINE 281:
	__asm        mov    eax, rectText.bottom;
	__asm        mov    ecx, lHeight;
	__asm        mov    [ecx], eax;
// LINE 282:
	__asm        mov    eax, rectText.right;
	__asm        mov    ecx, lWidth;
	__asm        mov    [ecx], eax;
// LINE 292:
	__asm        mov    eax, hFontOriginal;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
// LINE 293:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 294:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A0392;
// LINE 296:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0392;
// LINE 300:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}



// Contribution: 2:00002640-00002647 Module: 11, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591640
// ??_7MFont@@6B@


// Contribution: 3:0000394c-0000395d Module: 11, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a94c
// SZ_DEFAULT_TEST_STRING
// GLOBAL: COPTER_D 0x0059a950
// SZ_DEFAULT_FACE_NAME
