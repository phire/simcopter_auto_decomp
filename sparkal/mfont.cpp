// Module: Mfont.obj
// Source: C:\Copter\source\sparkal\Mfont.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class MFont (forward reference);
class MFont{
public:
	class basic_string<char> sName;
	unsigned long lHeight;
	unsigned long lWidth;
	unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const class MFont&);
	void MFont();
	void ~MFont();
	class MFont& operator=(const class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	// vtable: 0
	intro int32_t CreateFontA();
	// vtable: 4
	intro void DestroyFont();
	void * __ptr32 operator void *();
protected:
	void * __ptr32 hFont;
};

// Type: void;

// Type: char *;

// Type: unsigned long;

// Type: int32_t;

// Type: long;

// Type: struct tagSIZE;
struct tagSIZE{
	long cx;
	long cy;
};

// Type: struct tagRECT;
struct tagRECT{
	long left;
	long top;
	long right;
	long bottom;
};

// Type: void * __ptr32;



// Contribution: 1:0009e780-0009f398 Module: 11, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049f780
void MFont::MFont() {

	__asm        mov    eax, ds:[0x59A950];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tc4;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049F7C2;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T9e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049F819;

	__asm        jmp    _Ta7;

_T9e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_Ta7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F836;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Tce;

_Tc4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
_Tce:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F85D;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 30:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 32:
	__asm        jmp    near ptr 0x0049F893;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049f89b
void MFont::MFont(const class MFont& copyMFont) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F8EC;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;

_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F913;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 43:
	__asm        mov    eax, copyMFont;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MFont::operator=;
// LINE 44:
	__asm        jmp    near ptr 0x0049F92D;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049f937
void MFont::MFont(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes, int32_t bCreateNow) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049F988;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;

_T5f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0049F9AF;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 55:
	__asm        jmp    near ptr 0x0049F9BD;

	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _Td1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049F9F9;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Td1;

_Td1:
	__asm        jmp    near ptr 0x0049FA0D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T107;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T288;

	__asm        jmp    near ptr 0x0049FA2C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T288;

_T107:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e2;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T15a;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FA82;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T15a;

_T15a:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1bf;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049FAF1;

	__asm        jmp    _T1c8;

_T1bf:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c8:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049FB0E;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1e9;

_T1e2:
	__asm        mov    dword ptr [ebp-4], 0;
_T1e9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T275;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T275;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T255;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T255:
	__asm        jmp    near ptr 0x0049FB91;

	__asm        jmp    near ptr 0x0049FB96;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FBA7;

	__asm        jmp    _T275;

_T275:
	__asm        jmp    near ptr 0x0049FBB1;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T2bb;

_T288:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2bb;

	__asm        jmp    near ptr 0x0049FBCE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2bb;

_T2bb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049FC03;

	__asm        jmp    near ptr 0x0049FC08;
// LINE 56:
	__asm        mov    eax, lNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 57:
	__asm        mov    eax, lNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 58:
	__asm        mov    eax, lNewAttributes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 62:
	__asm        cmp    bCreateNow, 0;
	__asm        je     _T308;
// LINE 63:
	__asm        mov    ecx, this;
	__asm        call   MFont::CreateFontA;
// LINE 64:
_T308:
	__asm        jmp    near ptr 0x0049FC44;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049fc4e
void MFont::~MFont() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 73:
	__asm        mov    ecx, this;
	__asm        call   MFont::DestroyFont;
// LINE 74:
	__asm        jmp    near ptr 0x0049FC70;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tae;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tae;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T8e;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T8e:
	__asm        jmp    near ptr 0x0049FCE1;

	__asm        jmp    near ptr 0x0049FCE6;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FCF7;

	__asm        jmp    _Tae;

_Tae:
	__asm        jmp    near ptr 0x0049FD01;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tdb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	__asm        jmp    near ptr 0x0049FD2E;
}

// FUNCTION: COPTER_D 0x0049fd33
class MFont& MFont::operator=(const class MFont& copyMFont) {
// LINE 82:
	__asm        mov    eax, copyMFont;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 83:
	__asm        mov    eax, this;
	__asm        jmp    _T23a;
// LINE 84:
_T20:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    ecx, copyMFont;
	__asm        add    ecx, 4;
	__asm        cmp    eax, ecx;
	__asm        je     _T1e7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tc0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta0;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_Ta0:
	__asm        jmp    near ptr 0x0049FDD8;

	__asm        jmp    near ptr 0x0049FDDD;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049FDEE;

	__asm        jmp    _Tc0;

_Tc0:
	__asm        jmp    near ptr 0x0049FDF8;

	__asm        jmp    near ptr 0x0049FDFD;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tf4;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1e7;

_Tf4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1dd;

	__asm        jmp    near ptr 0x0049FE43;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1b7;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049FE8A;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17c;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T188;

	__asm        jmp    _T188;

_T17c:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T188;

_T188:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049FEE5;

	__asm        jmp    _T1c0;

_T1b7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1c0:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049FF02;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1e7;

_T1dd:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
_T1e7:
	__asm        jmp    near ptr 0x0049FF1F;
// LINE 85:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 86:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 87:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 92:
	__asm        mov    eax, copyMFont;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T232;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 95:
_T232:
	__asm        mov    eax, this;
	__asm        jmp    _T23a;
// LINE 96:
}

// FUNCTION: COPTER_D 0x0049ff74
int32_t MFont::CreateFontA() {
	unsigned long dwItalic;
	unsigned long dwStrikeOut;
	int32_t nWeight;
	unsigned long dwUnderline;

// LINE 128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 2;
	__asm        mov    dwItalic, eax;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 4;
	__asm        mov    dwUnderline, eax;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 8;
	__asm        mov    dwStrikeOut, eax;
// LINE 132:
	__asm        jmp    near ptr 0x0049FFA9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T4c;
// LINE 133:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 134:
_T4c:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x14], 1;
	__asm        je     _T65;
// LINE 135:
	__asm        mov    nWeight, 0x2BC;
// LINE 136:
	__asm        jmp    _T6c;
// LINE 137:
_T65:
	__asm        mov    nWeight, 0x190;
// LINE 139:
_T6c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T84;
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 144:
_T84:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tac;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tac:
	__asm        jmp    near ptr 0x004A0025;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A0043;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T148;

	__asm        jmp    near ptr 0x004A0058;

	__asm        jmp    near ptr 0x004A005D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T11a;

	__asm        jmp    _T11a;

_T10e:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T11a;

_T11a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T148;

_T148:
	__asm        jmp    near ptr 0x004A00C1;

	__asm        mov    byte ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004A00CA;

	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004A00D5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A00F6;

	__asm        jmp    near ptr 0x004A00FB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dwStrikeOut;
	__asm        push   eax;
	__asm        mov    eax, dwUnderline;
	__asm        push   eax;
	__asm        mov    eax, dwItalic;
	__asm        push   eax;
	__asm        mov    eax, nWeight;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3540];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1dd;
// LINE 146:
	__asm        mov    eax, 1;
	__asm        jmp    _T1e4;
// LINE 147:
_T1dd:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 151:
}

// FUNCTION: COPTER_D 0x004a015d
void MFont::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
	int32_t bFontChanged;

// LINE 164:
	__asm        mov    bFontChanged, 0;
// LINE 166:
	__asm        cmp    lNewHeight, 0;
	__asm        je     _T2d;
// LINE 167:
	__asm        mov    eax, lNewHeight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 168:
	__asm        mov    bFontChanged, 1;
// LINE 170:
_T2d:
	__asm        cmp    lNewWidth, 0;
	__asm        je     _T47;
// LINE 171:
	__asm        mov    eax, lNewWidth;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 172:
	__asm        mov    bFontChanged, 1;
// LINE 174:
_T47:
	__asm        cmp    lNewAttributes, 0;
	__asm        je     _T61;
// LINE 175:
	__asm        mov    eax, lNewAttributes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 176:
	__asm        mov    bFontChanged, 1;
// LINE 178:
_T61:
	__asm        cmp    bFontChanged, 0;
	__asm        je     _T80;
// LINE 179:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 182:
_T80:
	__asm        jmp    near ptr 0x004A01E2;
}

// FUNCTION: COPTER_D 0x004a01e9
void MFont::DestroyFont() {
// LINE 192:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T30;
// LINE 193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 199:
_T30:
	__asm        jmp    near ptr 0x004A021E;
}

// FUNCTION: COPTER_D 0x004a0223
int32_t MFont::IsFontAvailable(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes) {
// LINE 210:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A0230;
// LINE 214:
}

// FUNCTION: COPTER_D 0x004a0235
int32_t MFont::LoadFont(char * szPath) {
	int32_t nReturnValue;

// LINE 224:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C356C];
	__asm        mov    nReturnValue, eax;
// LINE 225:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T31;
// LINE 226:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 230:
_T31:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A026E;
// LINE 231:
}

// FUNCTION: COPTER_D 0x004a0273
int32_t MFont::UnloadFont(char * szPath) {
	int32_t nReturnValue;

// LINE 241:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3564];
	__asm        mov    nReturnValue, eax;
// LINE 242:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T31;
// LINE 243:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 247:
_T31:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A02AC;
// LINE 248:
}

// FUNCTION: COPTER_D 0x004a02b1
int32_t MFont::GetTextDimensions(char * szString, long& lWidth, long& lHeight) {
	struct tagSIZE sizeText;
	struct tagRECT rectText;
	void * __ptr32 hdcScreen;
	long lStringLength;
	int32_t nReturnValue;
	void * __ptr32 hFontOriginal;

// LINE 265:
	__asm        mov    nReturnValue, 1;
// LINE 268:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    _T27;
// LINE 269:
	__asm        xor    eax, eax;
	__asm        jmp    _Te1;
// LINE 270:
_T27:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 271:
	__asm        cmp    hdcScreen, 0;
	__asm        je     _Tda;
// LINE 272:
	__asm        cmp    szString, 0;
	__asm        jne    _T4e;
// LINE 273:
	__asm        mov    eax, ds:[0x59A94C];
	__asm        mov    szString, eax;
// LINE 274:
_T4e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 275:
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    lStringLength, eax;
// LINE 276:
	__asm        mov    rectText.left, 0;
// LINE 277:
	__asm        mov    rectText.top, 0;
// LINE 278:
	__asm        mov    rectText.right, 0xF4240;
// LINE 279:
	__asm        mov    rectText.bottom, 0xF4240;
// LINE 280:
	__asm        push   0xC10;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C389C];
// LINE 281:
	__asm        mov    eax, rectText.bottom;
	__asm        mov    ecx, lHeight;
	__asm        mov    [ecx], eax;
// LINE 282:
	__asm        mov    eax, rectText.right;
	__asm        mov    ecx, lWidth;
	__asm        mov    [ecx], eax;
// LINE 292:
	__asm        mov    eax, hFontOriginal;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
// LINE 293:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 294:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _Te1;
// LINE 296:
_Tda:
	__asm        xor    eax, eax;
	__asm        jmp    _Te1;
// LINE 300:
}



// Contribution: 2:00002640-00002647 Module: 11, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591640
// ??_7MFont@@6B@


// Contribution: 3:0000394c-0000395d Module: 11, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a94c
// SZ_DEFAULT_TEST_STRING
// GLOBAL: COPTER_D 0x0059a950
// SZ_DEFAULT_FACE_NAME
