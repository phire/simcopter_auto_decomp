// Module: Mfont.obj
// Source: C:\Copter\source\sparkal\Mfont.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: void;

// Type: /*packed*/ class MFont (forward reference);
// VTABLE: COPTER_D 0x00591640
class MFont{ // packed(0x1c bytes) TI: 0x1a6c
public:
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   unsigned long lHeight;
	/*+0x10*/  unsigned long lWidth;
	/*+0x14*/  unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const /*packed*/ class MFont&);
	void MFont();
	void ~MFont();
	/*packed*/ class MFont& operator=(const /*packed*/ class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	virtual int32_t CreateFontA(); // vtable+0x0
	virtual void DestroyFont(); // vtable+0x4
	void * __ptr32 operator void *();
protected:
	/*+0x18*/  void * __ptr32 hFont;
};

// Type: unsigned long;

// Type: int32_t;

// Type: long;

// Type: /*packed*/ struct tagSIZE;
struct tagSIZE{ // packed(0x8 bytes) TI: 0x21e7
	/*+0x0*/   long cx;
	/*+0x4*/   long cy;
};

// Type: /*packed*/ struct tagRECT;
struct tagRECT{ // packed(0x10 bytes) TI: 0x13c4
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
};

// Type: void * __ptr32;



// Contribution: 1:0009e780-0009f398 Module: 11, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049f780
void MFont::MFont() {

	__asm        mov    eax, SZ_DEFAULT_FACE_NAME;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tc4;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T42;
_T42:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T9e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T99;
_T99:
	__asm        jmp    _Ta7;
_T9e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_Ta7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb6;
_Tb6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Tce;
_Tc4:
	this->sName.reference = 0x0;
_Tce:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _Tdd;
_Tdd:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591640;
// LINE 30:
	this->hFont = 0x0;
// LINE 32:
	return;
_T113:
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049f89b
void MFont::MFont(const /*packed*/ class MFont& copyMFont) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;
_T5f:
	this->sName.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T78;
_T78:
	this-><vftable> = 0x591640;
// LINE 43:
	__asm        mov    eax, copyMFont;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MFont::operator=;
// LINE 44:
	return;
_T92:
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049f937
void MFont::MFont(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes, int32_t bCreateNow) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;
_T5f:
	this->sName.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T78;
_T78:
	this-><vftable> = 0x591640;
// LINE 55:
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _Td1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc2;
_Tc2:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Td1;
_Td1:
	__asm        jmp    _Td6;
_Td6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T107;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T288;

	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T288;
_T107:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1e2;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T15a;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T14b;
_T14b:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T15a;
_T15a:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1bf;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ba;
_T1ba:
	__asm        jmp    _T1c8;
_T1bf:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T1c8:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T1e9;
_T1e2:
	__asm        mov    dword ptr [ebp-4], 0;
_T1e9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T275;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T275;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T255;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T255:
	__asm        jmp    _T25a;
_T25a:
	__asm        jmp    _T25f;
_T25f:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T270;
_T270:
	__asm        jmp    _T275;
_T275:
	__asm        jmp    _T27a;
_T27a:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T2bb;
_T288:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2bb;

	__asm        jmp    _T297;
_T297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szFaceName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2bb;
_T2bb:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2cc;
_T2cc:
	__asm        jmp    _T2d1;
// LINE 56:
_T2d1:
	this->lHeight = lNewHeight;
// LINE 57:
	this->lWidth = lNewWidth;
// LINE 58:
	this->lAttributes = lNewAttributes;
// LINE 60:
	this->hFont = 0x0;
// LINE 62:
	__asm        cmp    bCreateNow, 0;
	__asm        je     _T308;
// LINE 63:
	__asm        mov    ecx, this;
	__asm        call   MFont::CreateFontA;
// LINE 64:
_T308:
	return;
_T30d:
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049fc4e
void MFont::~MFont() {

	this-><vftable> = 0x591640;
// LINE 73:
	__asm        mov    ecx, this;
	__asm        call   MFont::DestroyFont;
// LINE 74:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tae;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tae;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T8e;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T8e:
	__asm        jmp    _T93;
_T93:
	__asm        jmp    _T98;
_T98:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta9;
_Ta9:
	__asm        jmp    _Tae;
_Tae:
	__asm        jmp    _Tb3;
_Tb3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tdb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	return;
_Te0:
}

// FUNCTION: COPTER_D 0x0049fd33
/*packed*/ class MFont& MFont::operator=(const /*packed*/ class MFont& copyMFont) {
// LINE 82:
	__asm        mov    eax, copyMFont;
	__asm        cmp    this, eax;
	__asm        jne    _T20;
// LINE 83:
	__asm        mov    eax, this;
	__asm        jmp    _T23a;
// LINE 84:
_T20:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    ecx, copyMFont;
	__asm        add    ecx, 4;
	__asm        cmp    eax, ecx;
	__asm        je     _T1e7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tc0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tc0;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Ta0;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_Ta0:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        jmp    _Taa;
_Taa:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        jmp    _Tca;
_Tca:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tf4;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1e7;
_Tf4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1dd;

	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1b7;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T157;
_T157:
	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17c;

	__asm        mov    eax, copyMFont;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T188;

	__asm        jmp    _T188;
_T17c:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T188;
_T188:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1b2;
_T1b2:
	__asm        jmp    _T1c0;
_T1b7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1c0:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1cf;
_T1cf:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1e7;
_T1dd:
	this->sName.reference = 0x0;
_T1e7:
	__asm        jmp    _T1ec;
// LINE 85:
_T1ec:
	this->lHeight = copyMFont.lHeight;
// LINE 86:
	this->lWidth = copyMFont.lWidth;
// LINE 87:
	this->lAttributes = copyMFont.lAttributes;
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 92:
	__asm        mov    eax, copyMFont;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T232;
// LINE 93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 95:
_T232:
	__asm        mov    eax, this;
	__asm        jmp    _T23a;
// LINE 96:
_T23a:
}

// FUNCTION: COPTER_D 0x0049ff74
int32_t MFont::CreateFontA() {
	/*bp-0x4*/   unsigned long dwUnderline;
	/*bp-0x8*/   int32_t nWeight;
	/*bp-0xc*/   unsigned long dwStrikeOut;
	/*bp-0x10*/  unsigned long dwItalic;

// LINE 128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 2;
	__asm        mov    dwItalic, eax;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 4;
	__asm        mov    dwUnderline, eax;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        and    eax, 8;
	__asm        mov    dwStrikeOut, eax;
// LINE 132:
	__asm        jmp    _T35;
_T35:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T4c;
// LINE 133:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 134:
_T4c:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x14], 1;
	__asm        je     _T65;
// LINE 135:
	nWeight = 0x2bc;
// LINE 136:
	__asm        jmp    _T6c;
// LINE 137:
_T65:
	nWeight = 0x190;
// LINE 139:
_T6c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T84;
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 144:
_T84:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tac;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T148;

	__asm        jmp    _Te4;
_Te4:
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T11a;

	__asm        jmp    _T11a;
_T10e:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T11a;
_T11a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T148;
_T148:
	__asm        jmp    _T14d;
_T14d:
	__asm        mov    byte ptr [ebp-0x18], 0;
	__asm        jmp    _T156;
_T156:
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T161;
_T161:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], al;
	__asm        jmp    _T182;
_T182:
	__asm        jmp    _T187;
_T187:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dwStrikeOut;
	__asm        push   eax;
	__asm        mov    eax, dwUnderline;
	__asm        push   eax;
	__asm        mov    eax, dwItalic;
	__asm        push   eax;
	__asm        mov    eax, nWeight;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3540];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1dd;
// LINE 146:
	__asm        mov    eax, 1;
	__asm        jmp    _T1e4;
// LINE 147:
_T1dd:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 151:
_T1e4:
}

// FUNCTION: COPTER_D 0x004a015d
void MFont::SetFontCharacteristics(long lNewHeight, long lNewWidth, long lNewAttributes) {
	/*bp-0x4*/   int32_t bFontChanged;

// LINE 164:
	bFontChanged = 0x0;
// LINE 166:
	__asm        cmp    lNewHeight, 0;
	__asm        je     _T2d;
// LINE 167:
	this->lHeight = lNewHeight;
// LINE 168:
	bFontChanged = 0x1;
// LINE 170:
_T2d:
	__asm        cmp    lNewWidth, 0;
	__asm        je     _T47;
// LINE 171:
	this->lWidth = lNewWidth;
// LINE 172:
	bFontChanged = 0x1;
// LINE 174:
_T47:
	__asm        cmp    lNewAttributes, 0;
	__asm        je     _T61;
// LINE 175:
	this->lAttributes = lNewAttributes;
// LINE 176:
	bFontChanged = 0x1;
// LINE 178:
_T61:
	__asm        cmp    bFontChanged, 0;
	__asm        je     _T80;
// LINE 179:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 180:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 182:
_T80:
	return;
_T85:
}

// FUNCTION: COPTER_D 0x004a01e9
void MFont::DestroyFont() {
// LINE 192:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T30;
// LINE 193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 194:
	this->hFont = 0x0;
// LINE 199:
_T30:
	return;
_T35:
}

// FUNCTION: COPTER_D 0x004a0223
int32_t MFont::IsFontAvailable(char * szFaceName, unsigned long lNewHeight, unsigned long lNewWidth, unsigned long lNewAttributes) {
// LINE 210:
	__asm        xor    eax, eax;
	__asm        jmp    _T0d;
// LINE 214:
_T0d:
}

// FUNCTION: COPTER_D 0x004a0235
int32_t MFont::LoadFont(char * szPath) {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 224:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C356C];
	__asm        mov    nReturnValue, eax;
// LINE 225:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T31;
// LINE 226:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 230:
_T31:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _T39;
// LINE 231:
_T39:
}

// FUNCTION: COPTER_D 0x004a0273
int32_t MFont::UnloadFont(char * szPath) {
	/*bp-0x4*/   int32_t nReturnValue;

// LINE 241:
	__asm        mov    eax, szPath;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3564];
	__asm        mov    nReturnValue, eax;
// LINE 242:
	__asm        cmp    nReturnValue, 0;
	__asm        je     _T31;
// LINE 243:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1D;
	__asm        push   0xFFFF;
	__asm        call   dword ptr ds:[0x6C385C];
// LINE 247:
_T31:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _T39;
// LINE 248:
_T39:
}

// FUNCTION: COPTER_D 0x004a02b1
int32_t MFont::GetTextDimensions(char * szString, long& lWidth, long& lHeight) {
	/*bp-0x4*/   void * __ptr32 hFontOriginal;
	/*bp-0x8*/   int32_t nReturnValue;
	/*bp-0xc*/   long lStringLength;
	/*bp-0x10*/  void * __ptr32 hdcScreen;
	/*bp-0x20*/  /*packed*/ struct tagRECT rectText; // 0x10 bytes
	/*bp-0x28*/  /*packed*/ struct tagSIZE sizeText; // 0x8 bytes

// LINE 265:
	nReturnValue = 0x1;
// LINE 268:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    _T27;
// LINE 269:
	__asm        xor    eax, eax;
	__asm        jmp    _Te1;
// LINE 270:
_T27:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 271:
	__asm        cmp    hdcScreen, 0;
	__asm        je     _Tda;
// LINE 272:
	__asm        cmp    szString, 0;
	__asm        jne    _T4e;
// LINE 273:
	szString = SZ_DEFAULT_TEST_STRING;
// LINE 274:
_T4e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
	__asm        mov    hFontOriginal, eax;
// LINE 275:
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    lStringLength, eax;
// LINE 276:
	rectText.left = 0x0;
// LINE 277:
	rectText.top = 0x0;
// LINE 278:
	rectText.right = 0xf4240;
// LINE 279:
	rectText.bottom = 0xf4240;
// LINE 280:
	__asm        push   0xC10;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, szString;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C389C];
// LINE 281:
	lHeight. = rectText.bottom;
// LINE 282:
	lWidth. = rectText.right;
// LINE 292:
	__asm        mov    eax, hFontOriginal;
	__asm        push   eax;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C359C];
// LINE 293:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 294:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    _Te1;
// LINE 296:
_Tda:
	__asm        xor    eax, eax;
	__asm        jmp    _Te1;
// LINE 300:
_Te1:
}



// Contribution: 2:00002640-00002647 Module: 11, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MFont @ 0x00591640
//   00: MFont::CreateFontA @ 0x0049ff74
//   01: MFont::DestroyFont @ 0x004a01e9
//   2 entries



// Contribution: 3:0000394c-0000395d Module: 11, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a94c
char * SZ_DEFAULT_TEST_STRING = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a950
char * SZ_DEFAULT_FACE_NAME = { 0 /* todo */ };

