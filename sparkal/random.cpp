// Module: Random.obj
// Source: C:\Copter\source\sparkal\Random.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class Random;
class Random{ // packed(0xe4 bytes) TI: 0x20ab
public:
	void Random(unsigned long);
	unsigned long operator()(unsigned long);
	void seed(unsigned long);
protected:
	/*+0x0*/   unsigned long table[55]; // 0xdc bytes
	/*+0xdc*/  uint32_t index1;
	/*+0xe0*/  uint32_t index2;
};

// Type: void ();

// Type: void;

// Type: unsigned long;

// Type: /*packed*/ class Random (forward reference);
class Random{ // packed(0xe4 bytes) TI: 0x20ab
public:
	void Random(unsigned long);
	unsigned long operator()(unsigned long);
	void seed(unsigned long);
protected:
	/*+0x0*/   unsigned long table[55]; // 0xdc bytes
	/*+0xdc*/  uint32_t index1;
	/*+0xe0*/  uint32_t index2;
};

// Type: uint32_t;

// Type: int32_t;



// Contribution: 1:0008ff90-00090171 Module: 22, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00490f90
static void $E2() {

	__asm        call   $E1;
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00490fa5
static void $E1() {

	__asm        call   clock;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    ecx, 0x604B18;
	__asm        call   Random::seed;
	__asm        jmp    _T24;
_T24:
	return;
}

// FUNCTION: COPTER_D 0x00490fd3
unsigned long __long_random(unsigned long limit) {
// LINE 27:
	__asm        mov    eax, limit;
	__asm        push   eax;
	__asm        mov    ecx, 0x604B18;
	__asm        call   Random::operator();
	__asm        jmp    __RETURN;
// LINE 28:
__RETURN:
}

// FUNCTION: COPTER_D 0x00490ff1
void Random::seed(unsigned long j) {
	/*bp-0x4*/   int32_t loop;
	/*bp-0x8*/   uint32_t i;
	/*bp-0xc*/   unsigned long k;

// LINE 35:
	k = 0x1;
// LINE 36:
	this->table[54] = j;
// LINE 37:
	__asm        mov    i, 0;
	__asm        jmp    _T2e;
_T2b:
	i++;
_T2e:
	__asm        cmp    i, 0x36;
	__asm        jae    _T75;
// LINE 38:
// Block start:
	/*bp-0x10*/  uint32_t ii;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, 0x37;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ii, edx;
// LINE 39:
	__asm        mov    eax, k;
	__asm        mov    ecx, ii;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4], eax;
// LINE 40:
	k = (j - k);
// LINE 41:
	__asm        mov    eax, ii;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    j, eax;
// LINE 42:
// Block end:
	__asm        jmp    _T2b;
// LINE 43:
_T75:
	__asm        mov    loop, 0;
	__asm        jmp    _T84;
_T81:
	loop++;
_T84:
	__asm        cmp    loop, 4;
	__asm        jge    _Td3;
// LINE 44:
	__asm        mov    i, 0;
	__asm        jmp    _T9d;
_T9a:
	i++;
_T9d:
	__asm        cmp    i, 0x37;
	__asm        jae    _Tce;
// LINE 45:
	__asm        xor    ecx, ecx;
	__asm        mov    eax, i;
	__asm        mov    ebx, 0x37;
	__asm        add    eax, 0x1F;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    eax, this;
	__asm        sub    ecx, [eax+edx*4];
	__asm        neg    ecx;
	__asm        mov    eax, i;
	__asm        mov    edx, this;
	__asm        sub    [edx+eax*4], ecx;
	__asm        jmp    _T9a;
// LINE 46:
_Tce:
	__asm        jmp    _T81;
// LINE 47:
_Td3:
	this->index1 = 0x0;
// LINE 48:
	this->index2 = 0x1f;
// LINE 49:
	return;
}

// FUNCTION: COPTER_D 0x004910ea
unsigned long Random::operator()(unsigned long limit) {
// LINE 59:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    ecx, 0x37;
	__asm        inc    eax;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xDC], edx;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    ecx, 0x37;
	__asm        inc    eax;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xE0], edx;
// LINE 61:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE0];
	__asm        mov    edx, this;
	__asm        sub    eax, [edx+ecx*4];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xDC];
	__asm        mov    edx, this;
	__asm        sub    [edx+ecx*4], eax;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        sub    edx, edx;
	__asm        div    limit;
	__asm        mov    eax, edx;
	__asm        jmp    __RETURN;
// LINE 63:
__RETURN:
}



// Contribution: 3:00000084-00000087 Module: 22, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597084
static void (*$S3)() = { 0 /* todo */ };



// Contribution: 3:0006db18-0006dbfb Module: 22, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604b18
/*packed*/ class Random gRandom;

