// Module: ddrawhlp.obj
// Source: C:\Copter\source\sparkal\ddrawhlp.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0001e500-0001e869 Module: 74, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041f500
long DDEnable() {
// LINE 30:
	asm( 
"	      0041f500    push ebp"
"	      0041f501    mov ebp,esp"
"	      0041f503    sub esp,4"
"	      0041f506    push ebx"
"	      0041f507    push esi"
"	      0041f508    push edi"
);
// LINE 33:
	asm( 
"	      0041f509    cmp dword ptr ds:[597264h],0"
"	      0041f510    jne near ptr 0041F527h"
);
// LINE 34:
	asm( 
"	      0041f516    push 0"
"	      0041f518    push 597264h"
"	      0041f51d    push 0"
"	      0041f51f    call 004C4612h"
"	      0041f524    mov [ebp-4],eax"
);
// LINE 35:
	asm( 
"	      0041f527    cmp dword ptr [ebp-4],0"
"	      0041f52b    je near ptr 0041F539h"
);
// LINE 36:
	asm( 
"	      0041f531    mov eax,[ebp-4]"
"	      0041f534    jmp near ptr 0041F5A0h"
);
// LINE 38:
	asm( 
"	      0041f539    mov dword ptr ds:[5C2798h],0ACh"
);
// LINE 39:
	asm( 
"	      0041f543    push 0"
"	      0041f545    push 5C2798h"
"	      0041f54a    mov eax,ds:[597264h]"
"	      0041f54f    push eax"
"	      0041f550    mov eax,ds:[597264h]"
"	      0041f555    mov eax,[eax]"
"	      0041f557    call dword ptr [eax+2Ch]"
"	      0041f55a    mov [ebp-4],eax"
);
// LINE 40:
	asm( 
"	      0041f55d    cmp dword ptr [ebp-4],0"
"	      0041f561    je near ptr 0041F599h"
);
// LINE 41:
	asm( 
"	      0041f567    mov eax,ds:[597264h]"
"	      0041f56c    push eax"
"	      0041f56d    mov eax,ds:[597264h]"
"	      0041f572    mov eax,[eax]"
"	      0041f574    call dword ptr [eax+8]"
"	      0041f577    cmp eax,8876021Ch"
"	      0041f57c    jne near ptr 0041F587h"
"	      0041f582    jmp near ptr 0041F567h"
);
// LINE 42:
	asm( 
"	      0041f587    mov dword ptr ds:[597264h],0"
);
// LINE 43:
	asm( 
"	      0041f591    mov eax,[ebp-4]"
"	      0041f594    jmp near ptr 0041F5A0h"
);
// LINE 47:
	asm( 
"	      0041f599    xor eax,eax"
"	      0041f59b    jmp near ptr 0041F5A0h"
);
// LINE 49:
	asm( 
"	      0041f5a0    pop edi"
"	      0041f5a1    pop esi"
"	      0041f5a2    pop ebx"
"	      0041f5a3    leave"
"	      0041f5a4    ret"
);
}

// FUNCTION: COPTER_D 0x0041f5a5
void DDDisable() {
// LINE 59:
	asm( 
"	      0041f5a5    push ebp"
"	      0041f5a6    mov ebp,esp"
"	      0041f5a8    push ebx"
"	      0041f5a9    push esi"
"	      0041f5aa    push edi"
);
// LINE 60:
	asm( 
"	      0041f5ab    cmp dword ptr ds:[597264h],0"
"	      0041f5b2    jne near ptr 0041F5BDh"
);
// LINE 61:
	asm( 
"	      0041f5b8    jmp near ptr 0041F5ECh"
);
// LINE 65:
	asm( 
"	      0041f5bd    mov eax,ds:[597264h]"
"	      0041f5c2    push eax"
"	      0041f5c3    mov eax,ds:[597264h]"
"	      0041f5c8    mov eax,[eax]"
"	      0041f5ca    call dword ptr [eax+8]"
"	      0041f5cd    cmp eax,8876021Ch"
"	      0041f5d2    jne near ptr 0041F5DDh"
"	      0041f5d8    jmp near ptr 0041F5BDh"
);
// LINE 66:
	asm( 
"	      0041f5dd    mov dword ptr ds:[597264h],0"
);
// LINE 70:
	asm( 
"	      0041f5e7    jmp near ptr 0041F5ECh"
"	      0041f5ec    pop edi"
"	      0041f5ed    pop esi"
"	      0041f5ee    pop ebx"
"	      0041f5ef    leave"
"	      0041f5f0    ret"
);
}

// FUNCTION: COPTER_D 0x0041f5f1
unsigned long DDColorMatch(struct IDirectDrawSurface* pdds, unsigned long rgb) {
// LINE 84:
	asm( 
"	      0041f5f1    push ebp"
"	      0041f5f2    mov ebp,esp"
"	      0041f5f4    sub esp,7Ch"
"	      0041f5f7    push ebx"
"	      0041f5f8    push esi"
"	      0041f5f9    push edi"
);
// LINE 87:
	asm( 
"	      0041f5fa    mov dword ptr [ebp-78h],0FFFFFFFFh"
);
// LINE 91:
	asm( 
"	      0041f601    lea eax,[ebp-74h]"
"	      0041f604    push eax"
"	      0041f605    mov eax,[ebp+8]"
"	      0041f608    push eax"
"	      0041f609    mov eax,[ebp+8]"
"	      0041f60c    mov eax,[eax]"
"	      0041f60e    call dword ptr [eax+44h]"
"	      0041f611    test eax,eax"
"	      0041f613    jne near ptr 0041F64Ch"
);
// LINE 93:
	asm( 
"	      0041f619    push 0"
"	      0041f61b    push 0"
"	      0041f61d    mov eax,[ebp-74h]"
"	      0041f620    push eax"
"	      0041f621    call dword ptr ds:[6C3550h]"
"	      0041f627    mov [ebp-7Ch],eax"
);
// LINE 94:
	asm( 
"	      0041f62a    mov eax,[ebp+0Ch]"
"	      0041f62d    push eax"
"	      0041f62e    push 0"
"	      0041f630    push 0"
"	      0041f632    mov eax,[ebp-74h]"
"	      0041f635    push eax"
"	      0041f636    call dword ptr ds:[6C354Ch]"
);
// LINE 95:
	asm( 
"	      0041f63c    mov eax,[ebp-74h]"
"	      0041f63f    push eax"
"	      0041f640    mov eax,[ebp+8]"
"	      0041f643    push eax"
"	      0041f644    mov eax,[ebp+8]"
"	      0041f647    mov eax,[eax]"
"	      0041f649    call dword ptr [eax+68h]"
);
// LINE 98:
	asm( 
"	      0041f64c    mov dword ptr [ebp-6Ch],6Ch"
);
// LINE 99:
	asm( 
"	      0041f653    push 0"
"	      0041f655    push 1"
"	      0041f657    lea eax,[ebp-6Ch]"
"	      0041f65a    push eax"
"	      0041f65b    push 0"
"	      0041f65d    mov eax,[ebp+8]"
"	      0041f660    push eax"
"	      0041f661    mov eax,[ebp+8]"
"	      0041f664    mov eax,[eax]"
"	      0041f666    call dword ptr [eax+64h]"
"	      0041f669    mov [ebp-70h],eax"
);
// LINE 101:
	asm( 
"	      0041f66c    cmp dword ptr [ebp-70h],0"
"	      0041f670    jne near ptr 0041F69Dh"
);
// LINE 103:
	asm( 
"	      0041f676    mov eax,[ebp-48h]"
"	      0041f679    mov eax,[eax]"
"	      0041f67b    mov [ebp-78h],eax"
);
// LINE 104:
	asm( 
"	      0041f67e    mov eax,1"
"	      0041f683    mov cl,[ebp-18h]"
"	      0041f686    shl eax,cl"
"	      0041f688    dec eax"
"	      0041f689    and [ebp-78h],eax"
);
// LINE 105:
	asm( 
"	      0041f68c    push 0"
"	      0041f68e    mov eax,[ebp+8]"
"	      0041f691    push eax"
"	      0041f692    mov eax,[ebp+8]"
"	      0041f695    mov eax,[eax]"
"	      0041f697    call dword ptr [eax+80h]"
);
// LINE 108:
	asm( 
"	      0041f69d    lea eax,[ebp-74h]"
"	      0041f6a0    push eax"
"	      0041f6a1    mov eax,[ebp+8]"
"	      0041f6a4    push eax"
"	      0041f6a5    mov eax,[ebp+8]"
"	      0041f6a8    mov eax,[eax]"
"	      0041f6aa    call dword ptr [eax+44h]"
"	      0041f6ad    test eax,eax"
"	      0041f6af    jne near ptr 0041F6D7h"
);
// LINE 110:
	asm( 
"	      0041f6b5    mov eax,[ebp-7Ch]"
"	      0041f6b8    push eax"
"	      0041f6b9    push 0"
"	      0041f6bb    push 0"
"	      0041f6bd    mov eax,[ebp-74h]"
"	      0041f6c0    push eax"
"	      0041f6c1    call dword ptr ds:[6C354Ch]"
);
// LINE 111:
	asm( 
"	      0041f6c7    mov eax,[ebp-74h]"
"	      0041f6ca    push eax"
"	      0041f6cb    mov eax,[ebp+8]"
"	      0041f6ce    push eax"
"	      0041f6cf    mov eax,[ebp+8]"
"	      0041f6d2    mov eax,[eax]"
"	      0041f6d4    call dword ptr [eax+68h]"
);
// LINE 114:
	asm( 
"	      0041f6d7    mov eax,[ebp-78h]"
"	      0041f6da    jmp near ptr 0041F6DFh"
);
// LINE 115:
	asm( 
"	      0041f6df    pop edi"
"	      0041f6e0    pop esi"
"	      0041f6e1    pop ebx"
"	      0041f6e2    leave"
"	      0041f6e3    ret"
);
}

// FUNCTION: COPTER_D 0x0041f6e4
struct IDirectDrawPalette* ReadPalFile(char * fname) {
// LINE 126:
	asm( 
"	      0041f6e4    push ebp"
"	      0041f6e5    mov ebp,esp"
"	      0041f6e7    sub esp,428h"
"	      0041f6ed    push ebx"
"	      0041f6ee    push esi"
"	      0041f6ef    push edi"
);
// LINE 143:
	asm( 
"	      0041f6f0    mov dword ptr [ebp-428h],0"
);
// LINE 145:
	asm( 
"	      0041f6fa    push 0"
"	      0041f6fc    mov eax,[ebp+8]"
"	      0041f6ff    push eax"
"	      0041f700    call dword ptr ds:[6C37C0h]"
"	      0041f706    mov [ebp-8],eax"
);
// LINE 147:
	asm( 
"	      0041f709    cmp dword ptr [ebp-8],0FFFFFFFFh"
"	      0041f70d    je near ptr 0041F733h"
);
// LINE 149:
	asm( 
"	      0041f713    push 418h"
"	      0041f718    lea eax,[ebp-428h]"
"	      0041f71e    push eax"
"	      0041f71f    mov eax,[ebp-8]"
"	      0041f722    push eax"
"	      0041f723    call dword ptr ds:[6C37C4h]"
);
// LINE 150:
	asm( 
"	      0041f729    mov eax,[ebp-8]"
"	      0041f72c    push eax"
"	      0041f72d    call dword ptr ds:[6C374Ch]"
);
// LINE 162:
	asm( 
"	      0041f733    cmp dword ptr [ebp-428h],46464952h"
"	      0041f73d    jne near ptr 0041F79Fh"
"	      0041f743    cmp dword ptr [ebp-420h],204C4150h"
"	      0041f74d    jne near ptr 0041F79Fh"
"	      0041f753    cmp dword ptr [ebp-41Ch],61746164h"
"	      0041f75d    jne near ptr 0041F79Fh"
"	      0041f763    mov eax,[ebp-414h]"
"	      0041f769    and eax,0FFFFh"
"	      0041f76e    cmp eax,300h"
"	      0041f773    jne near ptr 0041F79Fh"
"	      0041f779    xor eax,eax"
"	      0041f77b    mov ax,[ebp-412h]"
"	      0041f782    cmp eax,100h"
"	      0041f787    jg near ptr 0041F79Fh"
"	      0041f78d    xor eax,eax"
"	      0041f78f    mov ax,[ebp-412h]"
"	      0041f796    cmp eax,1"
"	      0041f799    jge near ptr 0041F83Bh"
);
// LINE 164:
	asm( 
"	      0041f79f    push 59726Ch"
"	      0041f7a4    call 00424B14h"
"	      0041f7a9    add esp,4"
);
// LINE 166:
	asm( 
"	      0041f7ac    mov dword ptr [ebp-0Ch],0"
"	      0041f7b3    jmp near ptr 0041F7BBh"
"	      0041f7b8    inc dword ptr [ebp-0Ch]"
"	      0041f7bb    cmp dword ptr [ebp-0Ch],100h"
"	      0041f7c2    jge near ptr 0041F83Bh"
);
// LINE 168:
	asm( 
"	      0041f7c8    mov eax,[ebp-0Ch]"
"	      0041f7cb    shr eax,5"
"	      0041f7ce    and eax,7"
"	      0041f7d1    mov ecx,eax"
"	      0041f7d3    shl eax,8"
"	      0041f7d6    sub eax,ecx"
"	      0041f7d8    mov ecx,7"
"	      0041f7dd    cdq"
"	      0041f7de    idiv ecx"
"	      0041f7e0    mov ecx,[ebp-0Ch]"
"	      0041f7e3    mov [ebp+ecx*4-410h],al"
);
// LINE 169:
	asm( 
"	      0041f7ea    mov eax,[ebp-0Ch]"
"	      0041f7ed    shr eax,2"
"	      0041f7f0    and eax,7"
"	      0041f7f3    mov ecx,eax"
"	      0041f7f5    shl eax,8"
"	      0041f7f8    sub eax,ecx"
"	      0041f7fa    mov ecx,7"
"	      0041f7ff    cdq"
"	      0041f800    idiv ecx"
"	      0041f802    mov ecx,[ebp-0Ch]"
"	      0041f805    mov [ebp+ecx*4-40Fh],al"
);
// LINE 170:
	asm( 
"	      0041f80c    mov eax,[ebp-0Ch]"
"	      0041f80f    and eax,3"
"	      0041f812    mov ecx,eax"
"	      0041f814    shl eax,8"
"	      0041f817    sub eax,ecx"
"	      0041f819    mov ecx,3"
"	      0041f81e    cdq"
"	      0041f81f    idiv ecx"
"	      0041f821    mov ecx,[ebp-0Ch]"
"	      0041f824    mov [ebp+ecx*4-40Eh],al"
);
// LINE 171:
	asm( 
"	      0041f82b    mov eax,[ebp-0Ch]"
"	      0041f82e    mov byte ptr [ebp+eax*4-40Dh],0"
);
// LINE 172:
	asm( 
"	      0041f836    jmp near ptr 0041F7B8h"
);
// LINE 179:
	asm( 
"	      0041f83b    push 0"
"	      0041f83d    lea eax,[ebp-4]"
"	      0041f840    push eax"
"	      0041f841    lea eax,[ebp-410h]"
"	      0041f847    push eax"
"	      0041f848    push 4"
"	      0041f84a    mov eax,ds:[597264h]"
"	      0041f84f    push eax"
"	      0041f850    mov eax,ds:[597264h]"
"	      0041f855    mov eax,[eax]"
"	      0041f857    call dword ptr [eax+14h]"
"	      0041f85a    mov [ebp-10h],eax"
);
// LINE 180:
	asm( 
"	      0041f85d    mov eax,[ebp-4]"
"	      0041f860    jmp near ptr 0041F865h"
);
// LINE 182:
	asm( 
"	      0041f865    pop edi"
"	      0041f866    pop esi"
"	      0041f867    pop ebx"
"	      0041f868    leave"
"	      0041f869    ret"
);
}



// Contribution: 3:00000264-00000297 Module: 74, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597264
// lpDD
// GLOBAL: COPTER_D 0x00597268
// lpPalette


// Contribution: 3:0002b798-0002b843 Module: 74, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2798
// ddCaps
