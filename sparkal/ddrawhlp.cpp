// Module: ddrawhlp.obj
// Source: C:\Copter\source\sparkal\ddrawhlp.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long;

// Type: void;

// Type: struct IDirectDrawSurface (forward reference);
struct IDirectDrawSurface : public IUnknown
{
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*);
	// calltype: NearStd
	virtual unsigned long AddRef();
	// calltype: NearStd
	virtual unsigned long Release();
	// vtable: 12
	// calltype: NearStd
	intro long AddAttachedSurface(struct IDirectDrawSurface*);
	// vtable: 16
	// calltype: NearStd
	intro long AddOverlayDirtyRect(struct tagRECT*);
	// vtable: 20
	// calltype: NearStd
	intro long Blt(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDBLTFX*);
	// vtable: 24
	// calltype: NearStd
	intro long BltBatch(struct _DDBLTBATCH*, unsigned long, unsigned long);
	// vtable: 28
	// calltype: NearStd
	intro long BltFast(unsigned long, unsigned long, struct IDirectDrawSurface*, struct tagRECT*, unsigned long);
	// vtable: 32
	// calltype: NearStd
	intro long DeleteAttachedSurface(unsigned long, struct IDirectDrawSurface*);
	// vtable: 36
	// calltype: NearStd
	intro long EnumAttachedSurfaces(void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32));
	// vtable: 40
	// calltype: NearStd
	intro long EnumOverlayZOrders(unsigned long, void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32));
	// vtable: 44
	// calltype: NearStd
	intro long Flip(struct IDirectDrawSurface*, unsigned long);
	// vtable: 48
	// calltype: NearStd
	intro long GetAttachedSurface(struct _DDSCAPS*, struct IDirectDrawSurface**);
	// vtable: 52
	// calltype: NearStd
	intro long GetBltStatus(unsigned long);
	// vtable: 56
	// calltype: NearStd
	intro long GetCaps(struct _DDSCAPS*);
	// vtable: 60
	// calltype: NearStd
	intro long GetClipper(struct IDirectDrawClipper**);
	// vtable: 64
	// calltype: NearStd
	intro long GetColorKey(unsigned long, struct _DDCOLORKEY*);
	// vtable: 68
	// calltype: NearStd
	intro long GetDC(void * __ptr32*);
	// vtable: 72
	// calltype: NearStd
	intro long GetFlipStatus(unsigned long);
	// vtable: 76
	// calltype: NearStd
	intro long GetOverlayPosition(long *, long *);
	// vtable: 80
	// calltype: NearStd
	intro long GetPalette(struct IDirectDrawPalette**);
	// vtable: 84
	// calltype: NearStd
	intro long GetPixelFormat(struct _DDPIXELFORMAT*);
	// vtable: 88
	// calltype: NearStd
	intro long GetSurfaceDesc(struct _DDSURFACEDESC*);
	// vtable: 92
	// calltype: NearStd
	intro long Initialize(struct IDirectDraw*, struct _DDSURFACEDESC*);
	// vtable: 96
	// calltype: NearStd
	intro long IsLost();
	// vtable: 100
	// calltype: NearStd
	intro long Lock(struct tagRECT*, struct _DDSURFACEDESC*, unsigned long, void * __ptr32);
	// vtable: 104
	// calltype: NearStd
	intro long ReleaseDC(void * __ptr32);
	// vtable: 108
	// calltype: NearStd
	intro long Restore();
	// vtable: 112
	// calltype: NearStd
	intro long SetClipper(struct IDirectDrawClipper*);
	// vtable: 116
	// calltype: NearStd
	intro long SetColorKey(unsigned long, struct _DDCOLORKEY*);
	// vtable: 120
	// calltype: NearStd
	intro long SetOverlayPosition(long, long);
	// vtable: 124
	// calltype: NearStd
	intro long SetPalette(struct IDirectDrawPalette*);
	// vtable: 128
	// calltype: NearStd
	intro long Unlock(void * __ptr32);
	// vtable: 132
	// calltype: NearStd
	intro long UpdateOverlay(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDOVERLAYFX*);
	// vtable: 136
	// calltype: NearStd
	intro long UpdateOverlayDisplay(unsigned long);
	// vtable: 140
	// calltype: NearStd
	intro long UpdateOverlayZOrder(unsigned long, struct IDirectDrawSurface*);
};

// Type: unsigned long;

// Type: void * __ptr32;

// Type: struct _DDSURFACEDESC;
struct _DDSURFACEDESC{
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwHeight;
	unsigned long dwWidth;
	long lPitch;
	unsigned long dwBackBufferCount;
	unsigned long dwZBufferBitDepth;
	unsigned long dwAlphaBitDepth;
	unsigned long dwReserved;
	void * __ptr32 lpSurface;
	struct _DDCOLORKEY ddckCKDestOverlay;
	struct _DDCOLORKEY ddckCKDestBlt;
	struct _DDCOLORKEY ddckCKSrcOverlay;
	struct _DDCOLORKEY ddckCKSrcBlt;
	struct _DDPIXELFORMAT ddpfPixelFormat;
	struct _DDSCAPS ddsCaps;
};

// Type: char *;

// Type: struct ReadPalFile::__unnamed;
struct ReadPalFile::__unnamed{
	unsigned long dwRiff;
	unsigned long dwFileSize;
	unsigned long dwPal;
	unsigned long dwData;
	unsigned long dwDataSize;
	unsigned short palVersion;
	unsigned short palNumEntries;
	struct tagPALETTEENTRY ape[256];
};

// Type: int32_t;

// Type: struct IDirectDrawPalette (forward reference);
struct IDirectDrawPalette : public IUnknown
{
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*);
	// calltype: NearStd
	virtual unsigned long AddRef();
	// calltype: NearStd
	virtual unsigned long Release();
	// vtable: 12
	// calltype: NearStd
	intro long GetCaps(unsigned long *);
	// vtable: 16
	// calltype: NearStd
	intro long GetEntries(unsigned long, unsigned long, unsigned long, struct tagPALETTEENTRY*);
	// vtable: 20
	// calltype: NearStd
	intro long Initialize(struct IDirectDraw*, unsigned long, struct tagPALETTEENTRY*);
	// vtable: 24
	// calltype: NearStd
	intro long SetEntries(unsigned long, unsigned long, unsigned long, struct tagPALETTEENTRY*);
};

// Type: struct IUnknown;
struct IUnknown{
	// vtable: 0
	// calltype: NearStd
	intro long QueryInterface(const struct _GUID&, void * __ptr32*);
	// vtable: 4
	// calltype: NearStd
	intro unsigned long AddRef();
	// vtable: 8
	// calltype: NearStd
	intro unsigned long Release();
};



// Contribution: 1:0001e500-0001e869 Module: 74, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041f500
long DDEnable() {
	long hResult;

// LINE 33:
	__asm        cmp    dword ptr ds:[0x597264], 0;
	__asm        jne    near ptr 0x0041F527;
// LINE 34:
	__asm        push   0;
	__asm        push   0x597264;
	__asm        push   0;
	__asm        call   0x004C4612;
	__asm        mov    hResult, eax;
// LINE 35:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0041F539;
// LINE 36:
	__asm        mov    eax, hResult;
	__asm        jmp    near ptr 0x0041F5A0;
// LINE 38:
	__asm        mov    dword ptr ds:[0x5C2798], 0xAC;
// LINE 39:
	__asm        push   0;
	__asm        push   0x5C2798;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 40:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x0041F599;
// LINE 41:
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
	__asm        cmp    eax, 0x8876021C;
	__asm        jne    near ptr 0x0041F587;
	__asm        jmp    near ptr 0x0041F567;
// LINE 42:
	__asm        mov    dword ptr ds:[0x597264], 0;
// LINE 43:
	__asm        mov    eax, hResult;
	__asm        jmp    near ptr 0x0041F5A0;
// LINE 47:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0041F5A0;
// LINE 49:
}

// FUNCTION: COPTER_D 0x0041f5a5
void DDDisable() {
// LINE 60:
	__asm        cmp    dword ptr ds:[0x597264], 0;
	__asm        jne    near ptr 0x0041F5BD;
// LINE 61:
	__asm        jmp    near ptr 0x0041F5EC;
// LINE 65:
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
	__asm        cmp    eax, 0x8876021C;
	__asm        jne    near ptr 0x0041F5DD;
	__asm        jmp    near ptr 0x0041F5BD;
// LINE 66:
	__asm        mov    dword ptr ds:[0x597264], 0;
// LINE 70:
	__asm        jmp    near ptr 0x0041F5EC;
}

// FUNCTION: COPTER_D 0x0041f5f1
unsigned long DDColorMatch(struct IDirectDrawSurface* pdds, unsigned long rgb) {
	unsigned long rgbT;
	unsigned long dw;
	void * __ptr32 hdc;
	long hres;
	struct _DDSURFACEDESC ddsd;

// LINE 87:
	__asm        mov    dw, 0xFFFFFFFF;
// LINE 91:
	__asm        lea    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0041F64C;
// LINE 93:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3550];
	__asm        mov    rgbT, eax;
// LINE 94:
	__asm        mov    eax, rgb;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C354C];
// LINE 95:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 98:
	__asm        mov    ddsd.dwSize, 0x6C;
// LINE 99:
	__asm        push   0;
	__asm        push   1;
	__asm        lea    eax, ddsd.dwSize;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x64];
	__asm        mov    hres, eax;
// LINE 101:
	__asm        cmp    hres, 0;
	__asm        jne    near ptr 0x0041F69D;
// LINE 103:
	__asm        mov    eax, ddsd.lpSurface;
	__asm        mov    eax, [eax];
	__asm        mov    dw, eax;
// LINE 104:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(ddsd.ddpfPixelFormat.dwZBufferBitDepth);
	__asm        shl    eax, cl;
	__asm        dec    eax;
	__asm        and    dw, eax;
// LINE 105:
	__asm        push   0;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x80];
// LINE 108:
	__asm        lea    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0041F6D7;
// LINE 110:
	__asm        mov    eax, rgbT;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C354C];
// LINE 111:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 114:
	__asm        mov    eax, dw;
	__asm        jmp    near ptr 0x0041F6DF;
// LINE 115:
}

// FUNCTION: COPTER_D 0x0041f6e4
struct IDirectDrawPalette* ReadPalFile(char * fname) {
	struct ReadPalFile::__unnamed pal;
	long ddrval;
	int32_t i;
	int32_t fh;
	struct IDirectDrawPalette* ppal;

// LINE 143:
	__asm        mov    pal.dwRiff, 0;
// LINE 145:
	__asm        push   0;
	__asm        mov    eax, fname;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37C0];
	__asm        mov    fh, eax;
// LINE 147:
	__asm        cmp    fh, 0xFFFFFFFF;
	__asm        je     near ptr 0x0041F733;
// LINE 149:
	__asm        push   0x418;
	__asm        lea    eax, pal.dwRiff;
	__asm        push   eax;
	__asm        mov    eax, fh;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37C4];
// LINE 150:
	__asm        mov    eax, fh;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C374C];
// LINE 162:
	__asm        cmp    pal.dwRiff, 0x46464952;
	__asm        jne    near ptr 0x0041F79F;
	__asm        cmp    pal.dwPal, 0x204C4150;
	__asm        jne    near ptr 0x0041F79F;
	__asm        cmp    pal.dwData, 0x61746164;
	__asm        jne    near ptr 0x0041F79F;
	__asm        mov    eax, reinterpret_cast<uint32_t>(pal.palVersion);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x300;
	__asm        jne    near ptr 0x0041F79F;
	__asm        xor    eax, eax;
	__asm        mov    ax, pal.palNumEntries;
	__asm        cmp    eax, 0x100;
	__asm        jg     near ptr 0x0041F79F;
	__asm        xor    eax, eax;
	__asm        mov    ax, pal.palNumEntries;
	__asm        cmp    eax, 1;
	__asm        jge    near ptr 0x0041F83B;
// LINE 164:
	__asm        push   0x59726C;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 166:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0041F7BB;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x0041F83B;
// LINE 168:
	__asm        mov    eax, i;
	__asm        shr    eax, 5;
	__asm        and    eax, 7;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 7;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x410], al;
// LINE 169:
	__asm        mov    eax, i;
	__asm        shr    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 7;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x40F], al;
// LINE 170:
	__asm        mov    eax, i;
	__asm        and    eax, 3;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 3;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x40E], al;
// LINE 171:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x40D], 0;
// LINE 172:
	__asm        jmp    near ptr 0x0041F7B8;
// LINE 179:
	__asm        push   0;
	__asm        lea    eax, ppal;
	__asm        push   eax;
	__asm        lea    eax, pal.ape[0].peRed;
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 180:
	__asm        mov    eax, ppal;
	__asm        jmp    near ptr 0x0041F865;
// LINE 182:
}



// Contribution: 3:00000264-00000297 Module: 74, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597264
// lpDD
// GLOBAL: COPTER_D 0x00597268
// lpPalette


// Contribution: 3:0002b798-0002b843 Module: 74, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2798
// ddCaps
