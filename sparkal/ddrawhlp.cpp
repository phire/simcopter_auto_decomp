// Module: ddrawhlp.obj
// Source: C:\Copter\source\sparkal\ddrawhlp.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct IDirectDraw (forward reference);
struct IDirectDraw : public IUnknown
{ // packed(0x4 bytes) TI: 0x1f44
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*) /* override */;
	// calltype: NearStd
	virtual unsigned long AddRef() /* override */;
	// calltype: NearStd
	virtual unsigned long Release() /* override */;
	// calltype: NearStd
	virtual long Compact(); // vtable+0xc
	// calltype: NearStd
	virtual long CreateClipper(unsigned long, struct IDirectDrawClipper**, struct IUnknown*); // vtable+0x10
	// calltype: NearStd
	virtual long CreatePalette(unsigned long, struct tagPALETTEENTRY*, struct IDirectDrawPalette**, struct IUnknown*); // vtable+0x14
	// calltype: NearStd
	virtual long CreateSurface(struct _DDSURFACEDESC*, struct IDirectDrawSurface**, struct IUnknown*); // vtable+0x18
	// calltype: NearStd
	virtual long DuplicateSurface(struct IDirectDrawSurface*, struct IDirectDrawSurface**); // vtable+0x1c
	// calltype: NearStd
	virtual long EnumDisplayModes(unsigned long, struct _DDSURFACEDESC*, void * __ptr32, long (*)(struct _DDSURFACEDESC*, void * __ptr32)); // vtable+0x20
	// calltype: NearStd
	virtual long EnumSurfaces(unsigned long, struct _DDSURFACEDESC*, void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32)); // vtable+0x24
	// calltype: NearStd
	virtual long FlipToGDISurface(); // vtable+0x28
	// calltype: NearStd
	virtual long GetCaps(struct _DDCAPS*, struct _DDCAPS*); // vtable+0x2c
	// calltype: NearStd
	virtual long GetDisplayMode(struct _DDSURFACEDESC*); // vtable+0x30
	// calltype: NearStd
	virtual long GetFourCCCodes(unsigned long *, unsigned long *); // vtable+0x34
	// calltype: NearStd
	virtual long GetGDISurface(struct IDirectDrawSurface**); // vtable+0x38
	// calltype: NearStd
	virtual long GetMonitorFrequency(unsigned long *); // vtable+0x3c
	// calltype: NearStd
	virtual long GetScanLine(unsigned long *); // vtable+0x40
	// calltype: NearStd
	virtual long GetVerticalBlankStatus(int32_t *); // vtable+0x44
	// calltype: NearStd
	virtual long Initialize(struct _GUID*); // vtable+0x48
	// calltype: NearStd
	virtual long RestoreDisplayMode(); // vtable+0x4c
	// calltype: NearStd
	virtual long SetCooperativeLevel(void * __ptr32, unsigned long); // vtable+0x50
	// calltype: NearStd
	virtual long SetDisplayMode(unsigned long, unsigned long, unsigned long); // vtable+0x54
	// calltype: NearStd
	virtual long WaitForVerticalBlank(unsigned long, void * __ptr32); // vtable+0x58
};

// Type: struct IDirectDrawPalette (forward reference);
struct IDirectDrawPalette : public IUnknown
{ // packed(0x4 bytes) TI: 0x1e81
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*) /* override */;
	// calltype: NearStd
	virtual unsigned long AddRef() /* override */;
	// calltype: NearStd
	virtual unsigned long Release() /* override */;
	// calltype: NearStd
	virtual long GetCaps(unsigned long *); // vtable+0xc
	// calltype: NearStd
	virtual long GetEntries(unsigned long, unsigned long, unsigned long, struct tagPALETTEENTRY*); // vtable+0x10
	// calltype: NearStd
	virtual long Initialize(struct IDirectDraw*, unsigned long, struct tagPALETTEENTRY*); // vtable+0x14
	// calltype: NearStd
	virtual long SetEntries(unsigned long, unsigned long, unsigned long, struct tagPALETTEENTRY*); // vtable+0x18
};

// Type: struct _DDCAPS;
struct _DDCAPS{ // packed(0xac bytes) TI: 0x1a7b
	unsigned long dwSize;
	unsigned long dwCaps;
	unsigned long dwCaps2;
	unsigned long dwCKeyCaps;
	unsigned long dwFXCaps;
	unsigned long dwFXAlphaCaps;
	unsigned long dwPalCaps;
	unsigned long dwSVCaps;
	unsigned long dwAlphaBltConstBitDepths;
	unsigned long dwAlphaBltPixelBitDepths;
	unsigned long dwAlphaBltSurfaceBitDepths;
	unsigned long dwAlphaOverlayConstBitDepths;
	unsigned long dwAlphaOverlayPixelBitDepths;
	unsigned long dwAlphaOverlaySurfaceBitDepths;
	unsigned long dwZBufferBitDepths;
	unsigned long dwVidMemTotal;
	unsigned long dwVidMemFree;
	unsigned long dwMaxVisibleOverlays;
	unsigned long dwCurrVisibleOverlays;
	unsigned long dwNumFourCCCodes;
	unsigned long dwAlignBoundarySrc;
	unsigned long dwAlignSizeSrc;
	unsigned long dwAlignBoundaryDest;
	unsigned long dwAlignSizeDest;
	unsigned long dwAlignStrideAlign;
	unsigned long dwRops[8];
	struct _DDSCAPS ddsCaps;
	unsigned long dwMinOverlayStretch;
	unsigned long dwMaxOverlayStretch;
	unsigned long dwMinLiveVideoStretch;
	unsigned long dwMaxLiveVideoStretch;
	unsigned long dwMinHwCodecStretch;
	unsigned long dwMaxHwCodecStretch;
	unsigned long dwReserved1;
	unsigned long dwReserved2;
	unsigned long dwReserved3;
};

// Type: long;

// Type: void;

// Type: struct IDirectDrawSurface (forward reference);
struct IDirectDrawSurface : public IUnknown
{ // packed(0x4 bytes) TI: 0x1da5
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*) /* override */;
	// calltype: NearStd
	virtual unsigned long AddRef() /* override */;
	// calltype: NearStd
	virtual unsigned long Release() /* override */;
	// calltype: NearStd
	virtual long AddAttachedSurface(struct IDirectDrawSurface*); // vtable+0xc
	// calltype: NearStd
	virtual long AddOverlayDirtyRect(struct tagRECT*); // vtable+0x10
	// calltype: NearStd
	virtual long Blt(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDBLTFX*); // vtable+0x14
	// calltype: NearStd
	virtual long BltBatch(struct _DDBLTBATCH*, unsigned long, unsigned long); // vtable+0x18
	// calltype: NearStd
	virtual long BltFast(unsigned long, unsigned long, struct IDirectDrawSurface*, struct tagRECT*, unsigned long); // vtable+0x1c
	// calltype: NearStd
	virtual long DeleteAttachedSurface(unsigned long, struct IDirectDrawSurface*); // vtable+0x20
	// calltype: NearStd
	virtual long EnumAttachedSurfaces(void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32)); // vtable+0x24
	// calltype: NearStd
	virtual long EnumOverlayZOrders(unsigned long, void * __ptr32, long (*)(struct IDirectDrawSurface*, struct _DDSURFACEDESC*, void * __ptr32)); // vtable+0x28
	// calltype: NearStd
	virtual long Flip(struct IDirectDrawSurface*, unsigned long); // vtable+0x2c
	// calltype: NearStd
	virtual long GetAttachedSurface(struct _DDSCAPS*, struct IDirectDrawSurface**); // vtable+0x30
	// calltype: NearStd
	virtual long GetBltStatus(unsigned long); // vtable+0x34
	// calltype: NearStd
	virtual long GetCaps(struct _DDSCAPS*); // vtable+0x38
	// calltype: NearStd
	virtual long GetClipper(struct IDirectDrawClipper**); // vtable+0x3c
	// calltype: NearStd
	virtual long GetColorKey(unsigned long, struct _DDCOLORKEY*); // vtable+0x40
	// calltype: NearStd
	virtual long GetDC(void * __ptr32*); // vtable+0x44
	// calltype: NearStd
	virtual long GetFlipStatus(unsigned long); // vtable+0x48
	// calltype: NearStd
	virtual long GetOverlayPosition(long *, long *); // vtable+0x4c
	// calltype: NearStd
	virtual long GetPalette(struct IDirectDrawPalette**); // vtable+0x50
	// calltype: NearStd
	virtual long GetPixelFormat(struct _DDPIXELFORMAT*); // vtable+0x54
	// calltype: NearStd
	virtual long GetSurfaceDesc(struct _DDSURFACEDESC*); // vtable+0x58
	// calltype: NearStd
	virtual long Initialize(struct IDirectDraw*, struct _DDSURFACEDESC*); // vtable+0x5c
	// calltype: NearStd
	virtual long IsLost(); // vtable+0x60
	// calltype: NearStd
	virtual long Lock(struct tagRECT*, struct _DDSURFACEDESC*, unsigned long, void * __ptr32); // vtable+0x64
	// calltype: NearStd
	virtual long ReleaseDC(void * __ptr32); // vtable+0x68
	// calltype: NearStd
	virtual long Restore(); // vtable+0x6c
	// calltype: NearStd
	virtual long SetClipper(struct IDirectDrawClipper*); // vtable+0x70
	// calltype: NearStd
	virtual long SetColorKey(unsigned long, struct _DDCOLORKEY*); // vtable+0x74
	// calltype: NearStd
	virtual long SetOverlayPosition(long, long); // vtable+0x78
	// calltype: NearStd
	virtual long SetPalette(struct IDirectDrawPalette*); // vtable+0x7c
	// calltype: NearStd
	virtual long Unlock(void * __ptr32); // vtable+0x80
	// calltype: NearStd
	virtual long UpdateOverlay(struct tagRECT*, struct IDirectDrawSurface*, struct tagRECT*, unsigned long, struct _DDOVERLAYFX*); // vtable+0x84
	// calltype: NearStd
	virtual long UpdateOverlayDisplay(unsigned long); // vtable+0x88
	// calltype: NearStd
	virtual long UpdateOverlayZOrder(unsigned long, struct IDirectDrawSurface*); // vtable+0x8c
};

// Type: unsigned long;

// Type: void * __ptr32;

// Type: struct _DDSURFACEDESC;
struct _DDSURFACEDESC{ // packed(0x6c bytes) TI: 0x1737
	unsigned long dwSize;
	unsigned long dwFlags;
	unsigned long dwHeight;
	unsigned long dwWidth;
	long lPitch;
	unsigned long dwBackBufferCount;
	unsigned long dwZBufferBitDepth;
	unsigned long dwAlphaBitDepth;
	unsigned long dwReserved;
	void * __ptr32 lpSurface;
	struct _DDCOLORKEY ddckCKDestOverlay;
	struct _DDCOLORKEY ddckCKDestBlt;
	struct _DDCOLORKEY ddckCKSrcOverlay;
	struct _DDCOLORKEY ddckCKSrcBlt;
	struct _DDPIXELFORMAT ddpfPixelFormat;
	struct _DDSCAPS ddsCaps;
};

// Type: char *;

// Type: struct ReadPalFile::__unnamed;
struct ReadPalFile::__unnamed{ // packed(0x418 bytes) TI: 0x2bdc
	unsigned long dwRiff;
	unsigned long dwFileSize;
	unsigned long dwPal;
	unsigned long dwData;
	unsigned long dwDataSize;
	unsigned short palVersion;
	unsigned short palNumEntries;
	struct tagPALETTEENTRY ape[256];
};

// Type: int32_t;

// Type: struct IUnknown;
struct IUnknown{ // packed(0x4 bytes) TI: 0x196f
	// calltype: NearStd
	virtual long QueryInterface(const struct _GUID&, void * __ptr32*); // vtable+0x0
	// calltype: NearStd
	virtual unsigned long AddRef(); // vtable+0x4
	// calltype: NearStd
	virtual unsigned long Release(); // vtable+0x8
};



// Contribution: 1:0001e500-0001e869 Module: 74, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0041f500
long DDEnable() {
	long hResult;

// LINE 33:
	__asm        cmp    lpDD, 0;
	__asm        jne    _T27;
// LINE 34:
	__asm        push   0;
	__asm        push   0x597264;
	__asm        push   0;
	__asm        call   0x004C4612;
	__asm        mov    hResult, eax;
// LINE 35:
_T27:
	__asm        cmp    hResult, 0;
	__asm        je     _T39;
// LINE 36:
	__asm        mov    eax, hResult;
	__asm        jmp    _Ta0;
// LINE 38:
_T39:
	ddCaps.dwSize = 0xac;
// LINE 39:
	__asm        push   0;
	__asm        push   0x5C2798;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    hResult, eax;
// LINE 40:
	__asm        cmp    hResult, 0;
	__asm        je     _T99;
// LINE 41:
_T67:
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
	__asm        cmp    eax, 0x8876021C;
	__asm        jne    _T87;

	__asm        jmp    _T67;
// LINE 42:
_T87:
	lpDD = 0x0;
// LINE 43:
	__asm        mov    eax, hResult;
	__asm        jmp    _Ta0;
// LINE 47:
_T99:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta0;
// LINE 49:
_Ta0:
}

// FUNCTION: COPTER_D 0x0041f5a5
void DDDisable() {
// LINE 60:
	__asm        cmp    lpDD, 0;
	__asm        jne    _T18;
// LINE 61:
	__asm        jmp    _T47;
// LINE 65:
_T18:
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+8];
	__asm        cmp    eax, 0x8876021C;
	__asm        jne    _T38;

	__asm        jmp    _T18;
// LINE 66:
_T38:
	lpDD = 0x0;
// LINE 70:
	__asm        jmp    _T47;
_T47:
}

// FUNCTION: COPTER_D 0x0041f5f1
unsigned long DDColorMatch(struct IDirectDrawSurface *pdds, unsigned long rgb) {
	unsigned long rgbT;
	unsigned long dw;
	void * __ptr32 hdc;
	long hres;
	struct _DDSURFACEDESC ddsd;

// LINE 87:
	dw = 0xffffffff;
// LINE 91:
	__asm        lea    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    _T5b;
// LINE 93:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3550];
	__asm        mov    rgbT, eax;
// LINE 94:
	__asm        mov    eax, rgb;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C354C];
// LINE 95:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 98:
_T5b:
	ddsd.dwSize = 0x6c;
// LINE 99:
	__asm        push   0;
	__asm        push   1;
	__asm        lea    eax, ddsd.dwSize;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x64];
	__asm        mov    hres, eax;
// LINE 101:
	__asm        cmp    hres, 0;
	__asm        jne    _Tac;
// LINE 103:
	__asm        mov    eax, ddsd.lpSurface;
	__asm        mov    eax, [eax];
	__asm        mov    dw, eax;
// LINE 104:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(ddsd.ddpfPixelFormat.dwZBufferBitDepth);
	__asm        shl    eax, cl;
	__asm        dec    eax;
	__asm        and    dw, eax;
// LINE 105:
	__asm        push   0;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x80];
// LINE 108:
_Tac:
	__asm        lea    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x44];
	__asm        test   eax, eax;
	__asm        jne    _Te6;
// LINE 110:
	__asm        mov    eax, rgbT;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C354C];
// LINE 111:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        push   eax;
	__asm        mov    eax, pdds;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x68];
// LINE 114:
_Te6:
	__asm        mov    eax, dw;
	__asm        jmp    near ptr 0x0041F6DF;
// LINE 115:
}

// FUNCTION: COPTER_D 0x0041f6e4
struct IDirectDrawPalette* ReadPalFile(char * fname) {
	struct ReadPalFile::__unnamed pal;
	long ddrval;
	int32_t i;
	int32_t fh;
	struct IDirectDrawPalette *ppal;

// LINE 143:
	pal.dwRiff = 0x0;
// LINE 145:
	__asm        push   0;
	__asm        mov    eax, fname;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37C0];
	__asm        mov    fh, eax;
// LINE 147:
	__asm        cmp    fh, 0xFFFFFFFF;
	__asm        je     _T4f;
// LINE 149:
	__asm        push   0x418;
	__asm        lea    eax, pal.dwRiff;
	__asm        push   eax;
	__asm        mov    eax, fh;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37C4];
// LINE 150:
	__asm        mov    eax, fh;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C374C];
// LINE 162:
_T4f:
	__asm        cmp    pal.dwRiff, 0x46464952;
	__asm        jne    _Tbb;

	__asm        cmp    pal.dwPal, 0x204C4150;
	__asm        jne    _Tbb;

	__asm        cmp    pal.dwData, 0x61746164;
	__asm        jne    _Tbb;

	__asm        mov    eax, reinterpret_cast<uint32_t>(pal.palVersion);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x300;
	__asm        jne    _Tbb;

	__asm        xor    eax, eax;
	__asm        mov    ax, pal.palNumEntries;
	__asm        cmp    eax, 0x100;
	__asm        jg     _Tbb;

	__asm        xor    eax, eax;
	__asm        mov    ax, pal.palNumEntries;
	__asm        cmp    eax, 1;
	__asm        jge    _T157;
// LINE 164:
_Tbb:
	__asm        push   0x59726C;
	__asm        call   DebugOutput;
	__asm        add    esp, 4;
// LINE 166:
	__asm        mov    i, 0;
	__asm        jmp    _Td7;
_Td4:
	__asm        inc    i;
_Td7:
	__asm        cmp    i, 0x100;
	__asm        jge    _T157;
// LINE 168:
	__asm        mov    eax, i;
	__asm        shr    eax, 5;
	__asm        and    eax, 7;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 7;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x410], al;
// LINE 169:
	__asm        mov    eax, i;
	__asm        shr    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 7;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x40F], al;
// LINE 170:
	__asm        mov    eax, i;
	__asm        and    eax, 3;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 8;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, 3;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x40E], al;
// LINE 171:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x40D], 0;
// LINE 172:
	__asm        jmp    _Td4;
// LINE 179:
_T157:
	__asm        push   0;
	__asm        lea    eax, ppal;
	__asm        push   eax;
	__asm        lea    eax, pal.ape[0].peRed;
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    ddrval, eax;
// LINE 180:
	__asm        mov    eax, ppal;
	__asm        jmp    near ptr 0x0041F865;
// LINE 182:
}



// Contribution: 3:00000264-00000297 Module: 74, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597264
struct IDirectDraw *lpDD = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597268
struct IDirectDrawPalette *lpPalette = { 0 /* todo */ };



// Contribution: 3:0002b798-0002b843 Module: 74, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2798
struct _DDCAPS ddCaps;

