// Module: Menus.obj
// Source: C:\Copter\source\sparkal\Menus.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class UserMenuWindow (forward reference);
class UserMenuWindow : public GraphicWindow
{
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t SetSelectionIndex(int32_t);
	// vtable: 200
	intro int32_t SetSelectionValue(int32_t);
	// vtable: 204
	intro int32_t GetSelectionIndex();
	// vtable: 208
	intro int32_t GetSelectionValue();
	// vtable: 212
	intro int32_t GetLineCount();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro int32_t ExecuteSelection(int32_t);
protected:
	// vtable: 220
	intro void DrawSelectionIndicators();
	// vtable: 224
	intro int32_t DoCursorHitTest(int32_t&, long, long);
	// vtable: 228
	intro int32_t GetPositionOfNthItem(int32_t, class MPoint&);
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: void;

// Type: struct UserMenuWindowDescription (forward reference);

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class TextWindow (forward reference);
class TextWindow : public GraphicWindow
{
public:
	void TextWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro void SetWindowTitle(const class basic_string<char>&);
	// vtable: 200
	intro void SetWindowTitle(int32_t);
	// vtable: 204
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 208
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 212
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 216
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 220
	intro void LoadStrings();
	// vtable: 224
	intro void FitWindowToText();
	// vtable: 228
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
};

// Type: char[260];

// Type: long;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: char;

// Type: unsigned long;

// Type: class CopterMainMenu (forward reference);
class CopterMainMenu : public UserMenuWindow
{
public:
	void CopterMainMenu(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~CopterMainMenu();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
protected:
	void DrawRatchetAndLights();
	void GetCoordinatesForLights(class MPoint*, class MRect*);
	void GetCoordinatesForRatchets(class MPoint*, class MRect*);
	class GraphicWindow*[2] mySiblingWindows;
	class CBackBuffer* myRatchetImage;
	class CBackBuffer* myLightImage;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class MPoint[5];

// Type: class MRect[5];

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class CopterPlayMenu (forward reference);
class CopterPlayMenu : public UserMenuWindow
{
public:
	void CopterPlayMenu(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~CopterPlayMenu();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
protected:
	void GetCoordinatesForRatchet(class MPoint&);
	void DrawRatchet();
	class CBackBuffer* myRatchetImage;
	class CBackBuffer* myBackgroundImage;
};

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: uint32_t;



// Contribution: 1:00099f80-0009d28b Module: 13, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049af80
void UserMenuWindow::UserMenuWindow() {
// LINE 38:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0049AFE7;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049AFD9;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0049AFF1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x0049B000;
	__asm        jmp    near ptr 0x0049B005;
	__asm        jmp    near ptr 0x0049B00A;
	__asm        jmp    near ptr 0x0049B00F;
	__asm        jmp    near ptr 0x0049B014;
	__asm        jmp    near ptr 0x0049B019;
	__asm        jmp    near ptr 0x0049B01E;
	__asm        jmp    near ptr 0x0049B023;
	__asm        jmp    near ptr 0x0049B028;
	__asm        jmp    near ptr 0x0049B02D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
	__asm        jmp    near ptr 0x0049B059;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0049B10F;
	__asm        push   0;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049B092;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049B0EC;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B0E7;
	__asm        jmp    near ptr 0x0049B0F5;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B104;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0049B116;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0049B122;
	__asm        push   2;
	__asm        lea    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   0x0042F00F;
	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049B1B9;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0049B1B9;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049B199;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049B19E;
	__asm        jmp    near ptr 0x0049B1A3;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B1B4;
	__asm        jmp    near ptr 0x0049B1B9;
	__asm        jmp    near ptr 0x0049B1BE;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0049B1E0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B1E5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 40:
	__asm        jmp    near ptr 0x0049B1F3;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049b1fb
void UserMenuWindow::UserMenuWindow(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        lea    ecx, [ebp-0x10];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0049B252;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B257;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049B274;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049B2EC;
	__asm        jmp    near ptr 0x0049B289;
	__asm        jmp    near ptr 0x0049B28E;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049B2B3;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0049B2BF;
	__asm        jmp    near ptr 0x0049B2BF;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0049B2BF;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B2EC;
	__asm        jmp    near ptr 0x0049B2F1;
	__asm        mov    byte ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0049B2FA;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0049B305;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049B325;
	__asm        jmp    near ptr 0x0049B32A;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        jmp    near ptr 0x0049B358;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x0049B39A;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B38B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B39A;
	__asm        jmp    near ptr 0x0049B39F;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x0049B3C5;
	__asm        jmp    near ptr 0x0049B3B4;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0049B3CC;
	__asm        mov    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0049B3D1;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0049B412;
	__asm        jmp    near ptr 0x0049B3E8;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0049B412;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0049B4F4;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0049B4EA;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049B4C4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049B464;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049B489;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0049B495;
	__asm        jmp    near ptr 0x0049B495;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x0049B495;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B4BF;
	__asm        jmp    near ptr 0x0049B4CD;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B4DC;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0049B4F4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x0049B503;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xA4;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x48;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xBC;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC4], eax;
	__asm        jmp    near ptr 0x0049B601;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
	__asm        jmp    near ptr 0x0049B62D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   0x0042EF87;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 56:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 57:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 58:
	__asm        jmp    near ptr 0x0049B66E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0049b678
void UserMenuWindow::~UserMenuWindow() {
	int32_t i;
	int32_t iEnd;

// LINE 65:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 68:
	__asm        jmp    near ptr 0x0049B692;
	__asm        jmp    near ptr 0x0049B697;
	__asm        jmp    near ptr 0x0049B69C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 70:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049B6C3;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0049B715;
// LINE 71:
	__asm        jmp    near ptr 0x0049B6D4;
	__asm        jmp    near ptr 0x0049B6D9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0049B710;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    near ptr 0x0049B710;
	__asm        jmp    near ptr 0x0049B6C0;
// LINE 73:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 74:
	__asm        jmp    near ptr 0x0049B722;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   0x0042F2E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     near ptr 0x0049B75C;
	__asm        jmp    near ptr 0x0049B753;
	__asm        add    dword ptr [ebp-0x30], 4;
	__asm        jmp    near ptr 0x0049B73C;
	__asm        jmp    near ptr 0x0049B761;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B77E;
	__asm        jmp    near ptr 0x0049B783;
	__asm        jmp    near ptr 0x0049B788;
	__asm        jmp    near ptr 0x0049B78D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049B819;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0049B819;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049B7F9;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049B7FE;
	__asm        jmp    near ptr 0x0049B803;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B814;
	__asm        jmp    near ptr 0x0049B819;
	__asm        jmp    near ptr 0x0049B81E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0049B846;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B84B;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049b858
int32_t UserMenuWindow::Initialize() {
	class MRect rectTextWindow;
	class TextWindow* tempTextWindow;
	int32_t i;
	char[260] szFullSoundPath;

// LINE 81:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1CC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 89:
	__asm        jmp    near ptr 0x0049B86F;
	__asm        jmp    near ptr 0x0049B874;
// LINE 93:
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A2D0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 94:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     near ptr 0x0049B976;
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049B8C7;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049B947;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B942;
	__asm        jmp    near ptr 0x0049B953;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B965;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    near ptr 0x0049B980;
	__asm        mov    dword ptr [ebp-0x120], 0;
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        jmp    near ptr 0x0049B98F;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    eax, [ebp-0x120];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x120];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049BA66;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x0049BA66;
	__asm        mov    eax, [ebp-0x138];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049BA43;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049BA48;
	__asm        jmp    near ptr 0x0049BA4D;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049BA61;
	__asm        jmp    near ptr 0x0049BA66;
	__asm        jmp    near ptr 0x0049BA6B;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     near ptr 0x0049BA9F;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049BAA4;
// LINE 95:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x30];
// LINE 98:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0xFFFFFFFF;
	__asm        je     near ptr 0x0049BC59;
// LINE 99:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     near ptr 0x0049BB3B;
// LINE 100:
	__asm        mov    rectTextWindow.left, 0;
// LINE 101:
	__asm        jmp    near ptr 0x0049BAF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    rectTextWindow.right, eax;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    rectTextWindow.top, eax;
// LINE 103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        add    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 105:
	__asm        jmp    near ptr 0x0049BB94;
// LINE 106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    rectTextWindow.left, eax;
// LINE 107:
	__asm        jmp    near ptr 0x0049BB52;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    rectTextWindow.right, eax;
// LINE 108:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    rectTextWindow.top, eax;
// LINE 109:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        add    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 112:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     near ptr 0x0049BBF0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectTextWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x128];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0049BBFA;
	__asm        mov    tempTextWindow, 0;
// LINE 113:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 114:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     near ptr 0x0049BC59;
// LINE 116:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0xFFFFFFFF;
	__asm        je     near ptr 0x0049C380;
// LINE 121:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049BC81;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x94], ecx;
	__asm        jle    near ptr 0x0049C380;
// LINE 125:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    rectTextWindow.left, eax;
// LINE 126:
	__asm        jmp    near ptr 0x0049BCB0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, rectTextWindow.left;
	__asm        mov    rectTextWindow.right, eax;
// LINE 128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    rectTextWindow.top, eax;
// LINE 129:
	__asm        jmp    near ptr 0x0049BCF8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        sub    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 138:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     near ptr 0x0049BD7D;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        add    eax, i;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        lea    eax, rectTextWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0049BD87;
	__asm        mov    tempTextWindow, 0;
// LINE 139:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 140:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    near ptr 0x0049BDFA;
// LINE 142:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 143:
	__asm        jmp    near ptr 0x0049BE1A;
// LINE 144:
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 145:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xE0];
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD0];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     near ptr 0x0049BEA6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x0049BE6F;
	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     near ptr 0x0049BE8F;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049BE8F;
	__asm        jmp    near ptr 0x0049BE94;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xCC], 4;
	__asm        jmp    near ptr 0x0049C376;
	__asm        jmp    near ptr 0x0049BEAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD0];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     near ptr 0x0049BFBB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x0049BF13;
	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        je     near ptr 0x0049BF35;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049BF35;
	__asm        jmp    near ptr 0x0049BF3A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        cmp    [ebp-0x1C8], eax;
	__asm        je     near ptr 0x0049BF96;
	__asm        sub    dword ptr [ebp-0x180], 4;
	__asm        sub    dword ptr [ebp-0x184], 4;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x180];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049BF61;
	__asm        jmp    near ptr 0x0049BF9B;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x1C8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xCC], 4;
	__asm        jmp    near ptr 0x0049C371;
	__asm        jmp    near ptr 0x0049BFC0;
	__asm        jmp    near ptr 0x0049BFC5;
	__asm        jmp    near ptr 0x0049BFCA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0049C024;
	__asm        jmp    near ptr 0x0049BFF2;
	__asm        jmp    near ptr 0x0049BFF7;
	__asm        jmp    near ptr 0x0049BFFC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x0049C09B;
	__asm        mov    dword ptr [ebp-0x16C], 0x400;
	__asm        lea    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    dword ptr [ebp-0x170], 1;
	__asm        lea    eax, [ebp-0x170];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0049C077;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    near ptr 0x0049C083;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    near ptr 0x0049C088;
	__asm        mov    eax, [ebp-0x17C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x0049C09B;
	__asm        jmp    near ptr 0x0049C0A0;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        call   0x0049E3E0;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x15C], eax;
	__asm        jmp    near ptr 0x0049C0BC;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        cmp    [ebp-0x1C8], eax;
	__asm        je     near ptr 0x0049C14F;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x19C], eax;
	__asm        add    dword ptr [ebp-0x1AC], 4;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        add    dword ptr [ebp-0x1A8], 4;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        jmp    near ptr 0x0049C123;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     near ptr 0x0049C145;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049C145;
	__asm        jmp    near ptr 0x0049C14A;
	__asm        jmp    near ptr 0x0049C0DA;
	__asm        jmp    near ptr 0x0049C154;
	__asm        jmp    near ptr 0x0049C159;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x0049C194;
	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     near ptr 0x0049C1B4;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x194];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049C1B4;
	__asm        jmp    near ptr 0x0049C1B9;
	__asm        jmp    near ptr 0x0049C1BE;
	__asm        jmp    near ptr 0x0049C1C3;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x15C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1C4], eax;
	__asm        je     near ptr 0x0049C283;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        add    dword ptr [ebp-0x1C4], 4;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        add    dword ptr [ebp-0x1BC], 4;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    near ptr 0x0049C257;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     near ptr 0x0049C279;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1B8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049C279;
	__asm        jmp    near ptr 0x0049C27E;
	__asm        jmp    near ptr 0x0049C20E;
	__asm        jmp    near ptr 0x0049C288;
	__asm        jmp    near ptr 0x0049C28D;
	__asm        jmp    near ptr 0x0049C292;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x168];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     near ptr 0x0049C2CD;
	__asm        jmp    near ptr 0x0049C2C1;
	__asm        add    dword ptr [ebp-0x168], 4;
	__asm        jmp    near ptr 0x0049C2A4;
	__asm        jmp    near ptr 0x0049C2D2;
	__asm        jmp    near ptr 0x0049C2D7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C2FD;
	__asm        jmp    near ptr 0x0049C302;
	__asm        mov    eax, [ebp-0x160];
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], eax;
	__asm        jmp    near ptr 0x0049C322;
	__asm        jmp    near ptr 0x0049C327;
	__asm        jmp    near ptr 0x0049C32C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x15C];
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCC], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
	__asm        jmp    near ptr 0x0049C376;
	__asm        jmp    near ptr 0x0049C37B;
// LINE 147:
	__asm        jmp    near ptr 0x0049BC7B;
// LINE 149:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 150:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049C3A8;
// LINE 151:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049c3ad
int32_t UserMenuWindow::DrawSelf() {
	int32_t i;
	int32_t iEnd;

// LINE 158:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 160:
	__asm        jmp    near ptr 0x0049C3BE;
	__asm        jmp    near ptr 0x0049C3C3;
	__asm        jmp    near ptr 0x0049C3C8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 171:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049C3EF;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0049C42D;
// LINE 172:
	__asm        jmp    near ptr 0x0049C400;
	__asm        jmp    near ptr 0x0049C405;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x18];
	__asm        jmp    near ptr 0x0049C3EC;
// LINE 173:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C437;
// LINE 174:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049c43c
int32_t UserMenuWindow::SetSelectionIndex(int32_t nIndex) {
// LINE 181:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 182:
	__asm        cmp    nIndex, 0;
	__asm        jl     near ptr 0x0049C47C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        cmp    eax, nIndex;
	__asm        jl     near ptr 0x0049C47C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    near ptr 0x0049C483;
// LINE 183:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049C554;
// LINE 185:
	__asm        jmp    near ptr 0x0049C488;
	__asm        jmp    near ptr 0x0049C48D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0xD4];
// LINE 186:
	__asm        jmp    near ptr 0x0049C4C7;
	__asm        jmp    near ptr 0x0049C4CC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, nIndex;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xD4];
// LINE 187:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
// LINE 188:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 189:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 190:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+8];
// LINE 191:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C554;
// LINE 192:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049c55b
int32_t UserMenuWindow::SetSelectionValue(int32_t nValue) {
// LINE 197:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 198:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x98];
	__asm        neg    eax;
	__asm        sub    nValue, eax;
// LINE 199:
	__asm        mov    eax, nValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        jmp    near ptr 0x0049C58E;
// LINE 200:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049c595
void UserMenuWindow::DrawSelectionIndicators() {
// LINE 210:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 212:
	__asm        jmp    near ptr 0x0049C5A6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049c5ab
int32_t UserMenuWindow::DoCursorHitTest(int32_t& nHitIndex, long nCursorX, long nCursorY) {
	int32_t i;
	int32_t iEnd;

// LINE 231:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 235:
	__asm        mov    i, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x0049C5D7;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0049C69F;
// LINE 236:
	__asm        jmp    near ptr 0x0049C5E8;
	__asm        jmp    near ptr 0x0049C5ED;
	__asm        jmp    near ptr 0x0049C5F2;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0049C603;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     near ptr 0x0049C674;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     near ptr 0x0049C674;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jle    near ptr 0x0049C674;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    near ptr 0x0049C674;
	__asm        jmp    near ptr 0x0049C679;
	__asm        jmp    near ptr 0x0049C69A;
	__asm        jmp    near ptr 0x0049C688;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0049C69A;
// LINE 237:
	__asm        mov    eax, i;
	__asm        mov    ecx, nHitIndex;
	__asm        mov    [ecx], eax;
// LINE 238:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C6A6;
// LINE 240:
	__asm        jmp    near ptr 0x0049C5D4;
// LINE 241:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049C6A6;
// LINE 242:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0049c6ad
int32_t UserMenuWindow::GetPositionOfNthItem(int32_t nIndex, class MPoint& ptPosition) {
// LINE 248:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, ptPosition;
	__asm        mov    [ecx], eax;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        imul   eax, nIndex;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, ptPosition;
	__asm        mov    [ecx+4], eax;
// LINE 252:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C6ED;
// LINE 253:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0049c6f4
long UserMenuWindow::DoCharacter(long lCharacter) {
	int32_t i;
	int32_t iEnd;

// LINE 263:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 264:
	__asm        mov    i, 0;
// LINE 265:
	__asm        jmp    near ptr 0x0049C70C;
	__asm        jmp    near ptr 0x0049C711;
	__asm        jmp    near ptr 0x0049C716;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 267:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0049C999;
// LINE 268:
	__asm        jmp    near ptr 0x0049C73F;
	__asm        jmp    near ptr 0x0049C744;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0049C75E;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        ja     near ptr 0x0049C7A0;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C791;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C7A0;
	__asm        jmp    near ptr 0x0049C7A5;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x0049C957;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0049C8B6;
	__asm        jmp    near ptr 0x0049C7D1;
	__asm        jmp    near ptr 0x0049C7D6;
	__asm        jmp    near ptr 0x0049C7DB;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049C800;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0049C80C;
	__asm        jmp    near ptr 0x0049C80C;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0049C80C;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049C893;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049C88E;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049C88E;
	__asm        jmp    near ptr 0x0049C89C;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049C8AB;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0049C8BD;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049C949;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0049C949;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049C929;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049C92E;
	__asm        jmp    near ptr 0x0049C933;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C944;
	__asm        jmp    near ptr 0x0049C949;
	__asm        jmp    near ptr 0x0049C94E;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049C95C;
	__asm        jmp    near ptr 0x0049C961;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, lCharacter;
	__asm        jne    near ptr 0x0049C991;
// LINE 269:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 270:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C9A0;
// LINE 272:
	__asm        inc    i;
// LINE 273:
	__asm        jmp    near ptr 0x0049C72E;
// LINE 274:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049C9A0;
// LINE 275:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049c9a7
long UserMenuWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 281:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 282:
	__asm        cmp    lKey, 0x28;
	__asm        je     near ptr 0x0049C9C7;
	__asm        cmp    lKey, 0x22;
	__asm        jne    near ptr 0x0049CA22;
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xD4];
	__asm        jg     near ptr 0x0049C9FA;
// LINE 284:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 285:
	__asm        jmp    near ptr 0x0049CA13;
// LINE 286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 287:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 289:
	__asm        jmp    near ptr 0x0049CB7F;
	__asm        cmp    lKey, 0x26;
	__asm        je     near ptr 0x0049CA46;
	__asm        cmp    lKey, 0x21;
	__asm        jne    near ptr 0x0049CAA1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jle    near ptr 0x0049CAA1;
// LINE 290:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jne    near ptr 0x0049CA79;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 292:
	__asm        jmp    near ptr 0x0049CA92;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 294:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 296:
	__asm        jmp    near ptr 0x0049CB7F;
	__asm        cmp    lKey, 0x24;
	__asm        jne    near ptr 0x0049CACA;
// LINE 297:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 298:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 300:
	__asm        jmp    near ptr 0x0049CB7F;
	__asm        cmp    lKey, 0x23;
	__asm        jne    near ptr 0x0049CB01;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 302:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 304:
	__asm        jmp    near ptr 0x0049CB7F;
	__asm        cmp    lKey, 0xD;
	__asm        jne    near ptr 0x0049CB32;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 306:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 308:
	__asm        jmp    near ptr 0x0049CB7F;
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x0049CB7F;
// LINE 309:
// Block start:
	long lValue;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xD4];
	__asm        mov    lValue, eax;
// LINE 310:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 311:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 313:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049CB86;
// LINE 314:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0049cb8d
long UserMenuWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t nIndex;
	int32_t bExecute;

// LINE 327:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 329:
	__asm        mov    bExecute, 0;
// LINE 331:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0049CC09;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    near ptr 0x0049CBDB;
// LINE 333:
	__asm        mov    bExecute, 1;
// LINE 334:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 335:
	__asm        cmp    bExecute, 0;
	__asm        je     near ptr 0x0049CC09;
// LINE 336:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 338:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CC13;
// LINE 339:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0049cc1a
long UserMenuWindow::DoCursorMove(long nCursorX, long nCursorY) {
	int32_t nIndex;

// LINE 346:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 349:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0049CC5A;
// LINE 350:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 351:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CC64;
// LINE 352:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0049cc6b
int32_t UserMenuWindow::ExecuteSelection(int32_t nIndex) {
	long lValue;

// LINE 359:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        add    eax, nIndex;
	__asm        mov    lValue, eax;
// LINE 362:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 363:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CCB4;
// LINE 364:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049ccbb
void CopterMainMenu::CopterMainMenu(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 393:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049B1FB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5913E0;
// LINE 394:
	__asm        jmp    near ptr 0x0049CD0B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0049cd15
void CopterMainMenu::~CopterMainMenu() {
// LINE 400:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5913E0;
// LINE 401:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0x6C];
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0x6C];
// LINE 403:
	__asm        mov    ecx, this;
	__asm        call   0x0049D3FD;
// LINE 404:
	__asm        jmp    near ptr 0x0049CD65;
	__asm        mov    ecx, this;
	__asm        call   0x0049B678;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049cd72
int32_t CopterMainMenu::Initialize() {
// LINE 411:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 413:
	__asm        push   0x74;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049CDF0;
	__asm        jmp    near ptr 0x0049CD9A;
	__asm        mov    dword ptr [ebp-0x14], 0x121;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0x122;
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        jmp    near ptr 0x0049CDBB;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A2D4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x004A393D;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    near ptr 0x0049CDFD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 415:
	__asm        push   0x74;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0049CE6F;
	__asm        jmp    near ptr 0x0049CE19;
	__asm        mov    dword ptr [ebp-0x28], 0x1AB;
	__asm        mov    dword ptr [ebp-0x24], 0x13B;
	__asm        mov    dword ptr [ebp-0x20], 0x1AC;
	__asm        mov    dword ptr [ebp-0x1C], 0x13C;
	__asm        jmp    near ptr 0x0049CE3A;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A2D8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x004A393D;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    near ptr 0x0049CE7C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 416:
	__asm        mov    ecx, this;
	__asm        call   0x0049B858;
// LINE 417:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0049CE96;
// LINE 418:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049ce9b
int32_t CopterMainMenu::CreateImage(int32_t __formal) {
	class basic_string<char> sImagePath;
	class basic_string<char> sImageFile;

// LINE 425:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 426:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0049CEFD;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049CEF2;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    near ptr 0x0049CF04;
	__asm        mov    sImageFile.reference, 0;
	__asm        mov    sImageFile.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049CF10;
// LINE 427:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0049CF60;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049CF55;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    near ptr 0x0049CF67;
	__asm        mov    sImagePath.reference, 0;
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049CF73;
// LINE 429:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 430:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        jne    near ptr 0x0049D102;
	__asm        mov    eax, ds:[0x59A2E0];
	__asm        mov    [ebp-0x20], eax;
// LINE 431:
	__asm        jmp    near ptr 0x0049CFA0;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049CFBE;
// LINE 432:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0049CFD9;
// LINE 433:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0049D0F2;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049D015;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D01A;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049D032;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049D09C;
	__asm        jmp    near ptr 0x0049D044;
	__asm        jmp    near ptr 0x0049D049;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049D068;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0049D074;
	__asm        jmp    near ptr 0x0049D074;
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    near ptr 0x0049D074;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049D09C;
	__asm        jmp    near ptr 0x0049D0A1;
	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0049D0AA;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0049D0B5;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049D0D0;
	__asm        jmp    near ptr 0x0049D0D5;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], eax;
	__asm        jmp    near ptr 0x0049D102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
// LINE 435:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        jne    near ptr 0x0049D289;
	__asm        mov    eax, ds:[0x59A2DC];
	__asm        mov    [ebp-0x24], eax;
// LINE 436:
	__asm        jmp    near ptr 0x0049D122;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049D140;
// LINE 437:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0049D15B;
// LINE 438:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0049D279;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049D19D;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D1A2;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049D1BA;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049D211;
	__asm        jmp    near ptr 0x0049D1CC;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049D211;
	__asm        jmp    near ptr 0x0049D216;
	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0049D222;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0049D233;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049D257;
	__asm        jmp    near ptr 0x0049D25C;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15E], eax;
	__asm        jmp    near ptr 0x0049D289;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
// LINE 440:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049D313;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0049D313;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049D2F3;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049D2F8;
	__asm        jmp    near ptr 0x0049D2FD;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D30E;
	__asm        jmp    near ptr 0x0049D313;
	__asm        jmp    near ptr 0x0049D318;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049D33A;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D33F;
	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049D3C2;
	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0049D3C2;
	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049D3A2;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049D3A7;
	__asm        jmp    near ptr 0x0049D3AC;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D3BD;
	__asm        jmp    near ptr 0x0049D3C2;
	__asm        jmp    near ptr 0x0049D3C7;
	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     near ptr 0x0049D3E9;
	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D3EE;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0049D3F6;
// LINE 441:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049d3fd
void CopterMainMenu::DestroyImage() {
// LINE 446:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 447:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        je     near ptr 0x0049D460;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049D453;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D44E;
	__asm        jmp    near ptr 0x0049D453;
// LINE 449:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
// LINE 451:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        je     near ptr 0x0049D4B7;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15E];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0049D4AA;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D4A5;
	__asm        jmp    near ptr 0x0049D4AA;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
// LINE 455:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 456:
	__asm        jmp    near ptr 0x0049D4C4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049d4c9
int32_t CopterMainMenu::DrawSelf() {
// LINE 461:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 462:
	__asm        mov    ecx, this;
	__asm        call   0x0049C3AD;
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   0x0049D4F4;
// LINE 465:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049D4EF;
// LINE 466:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049d4f4
void CopterMainMenu::DrawRatchetAndLights() {
	class MPoint[5] ptLightsDestination;
	class MRect[5] rectLightsSource;
	int32_t i;
	class MRect[5] rectRatchetsSource;
	class MPoint[5] ptRatchetsDestination;

// LINE 472:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x118;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    dword ptr [ebp-0xF8], 5;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        mov    [ebp-0xFC], eax;
// LINE 473:
	__asm        dec    dword ptr [ebp-0xF8];
	__asm        js     near ptr 0x0049D53F;
	__asm        mov    ecx, [ebp-0xFC];
	__asm        call   0x0047B5E0;
	__asm        add    dword ptr [ebp-0xFC], 8;
	__asm        jmp    near ptr 0x0049D51C;
	__asm        jmp    near ptr 0x0049D544;
	__asm        mov    dword ptr [ebp-0x100], 5;
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        mov    [ebp-0x104], eax;
// LINE 474:
	__asm        dec    dword ptr [ebp-0x100];
	__asm        js     near ptr 0x0049D57D;
	__asm        mov    ecx, [ebp-0x104];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x104], 0x10;
	__asm        jmp    near ptr 0x0049D55A;
	__asm        jmp    near ptr 0x0049D582;
	__asm        mov    dword ptr [ebp-0x108], 5;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        mov    [ebp-0x10C], eax;
// LINE 475:
	__asm        dec    dword ptr [ebp-0x108];
	__asm        js     near ptr 0x0049D5B8;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   0x0047B5E0;
	__asm        add    dword ptr [ebp-0x10C], 8;
	__asm        jmp    near ptr 0x0049D595;
	__asm        jmp    near ptr 0x0049D5BD;
	__asm        mov    dword ptr [ebp-0x110], 5;
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        mov    [ebp-0x114], eax;
// LINE 476:
	__asm        dec    dword ptr [ebp-0x110];
	__asm        js     near ptr 0x0049D5F3;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x114], 0x10;
	__asm        jmp    near ptr 0x0049D5D0;
	__asm        jmp    near ptr 0x0049D5F8;
// LINE 479:
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049D742;
// LINE 480:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049D620;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x0049D6A4;
// LINE 483:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC4];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC8];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xCC];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0xF0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0xF4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x15E];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x15E];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0049D61D;
// LINE 485:
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049D8AB;
// LINE 486:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049D6C6;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x0049D738;
// LINE 489:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x6C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x70];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x74];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x78];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x24];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x15A];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x15A];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0049D6C3;
// LINE 490:
	__asm        jmp    near ptr 0x0049D73D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049d742
void CopterMainMenu::GetCoordinatesForLights(class MPoint* ptDestinationArray, class MRect* rectSourceArray) {
// LINE 501:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 502:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax], 0x14E;
// LINE 503:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+4], 0x20;
// LINE 504:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax], 0;
// LINE 505:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+8], 0x3C;
// LINE 506:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 507:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0xC], 0x38;
// LINE 509:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+8], 0x14E;
// LINE 510:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0xC], 0x58;
// LINE 511:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 512:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x18], 0x3C;
// LINE 513:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x14], 0x38;
// LINE 514:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x1C], 0x78;
// LINE 516:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x10], 0x14E;
// LINE 517:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x14], 0x98;
// LINE 518:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 519:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x28], 0x3C;
// LINE 520:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x24], 0x78;
// LINE 521:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x2C], 0xB8;
// LINE 523:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x18], 0x14E;
// LINE 524:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x1C], 0xD8;
// LINE 525:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 526:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x38], 0x3C;
// LINE 527:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x34], 0xB8;
// LINE 528:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x3C], 0xF8;
// LINE 530:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x20], 0x14E;
// LINE 531:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x24], 0x118;
// LINE 532:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 533:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x48], 0x3C;
// LINE 534:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x44], 0xF8;
// LINE 535:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x4C], 0x138;
// LINE 537:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x3C;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x3C;
// LINE 539:
	__asm        jmp    near ptr 0x0049D8A4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0049d8ab
void CopterMainMenu::GetCoordinatesForRatchets(class MPoint* ptDestinationArray, class MRect* rectSourceArray) {
// LINE 545:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 546:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax], 0x21;
// LINE 547:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+4], 0x23;
// LINE 548:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax], 0;
// LINE 549:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+8], 0x27;
// LINE 550:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 551:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0xC], 0x41;
// LINE 553:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+8], 0x21;
// LINE 554:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0xC], 0x64;
// LINE 555:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 556:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x18], 0x27;
// LINE 557:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x14], 0x41;
// LINE 558:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x1C], 0x81;
// LINE 560:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x10], 0x21;
// LINE 561:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x14], 0xA4;
// LINE 562:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 563:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x28], 0x27;
// LINE 564:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x24], 0x81;
// LINE 565:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x2C], 0xC0;
// LINE 567:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x18], 0x21;
// LINE 568:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x1C], 0xE3;
// LINE 569:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 570:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x38], 0x27;
// LINE 571:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x34], 0xC0;
// LINE 572:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x3C], 0xFE;
// LINE 574:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x20], 0x21;
// LINE 575:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x24], 0x121;
// LINE 576:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 577:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x48], 0x27;
// LINE 578:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x44], 0xFE;
// LINE 579:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x4C], 0x129;
// LINE 581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x27;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x27;
// LINE 583:
	__asm        jmp    near ptr 0x0049DA0D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0049da14
void CopterPlayMenu::CopterPlayMenu(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 604:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049B1FB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5914C8;
// LINE 605:
	__asm        jmp    near ptr 0x0049DA64;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0049da6e
void CopterPlayMenu::~CopterPlayMenu() {
// LINE 612:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5914C8;
// LINE 613:
	__asm        mov    ecx, this;
	__asm        call   0x0049E04F;
// LINE 614:
	__asm        jmp    near ptr 0x0049DA90;
	__asm        mov    ecx, this;
	__asm        call   0x0049B678;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049da9d
int32_t CopterPlayMenu::Initialize() {
// LINE 621:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 622:
	__asm        mov    ecx, this;
	__asm        call   0x0049B858;
// LINE 623:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0049DAC3;
// LINE 624:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049dac8
int32_t CopterPlayMenu::CreateImage(int32_t __formal) {
	class basic_string<char> sImagePath;
	class basic_string<char> sImageFile;

// LINE 630:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 631:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0049DB2A;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049DB1F;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    near ptr 0x0049DB31;
	__asm        mov    sImageFile.reference, 0;
	__asm        mov    sImageFile.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049DB3D;
// LINE 632:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0049DB8D;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049DB82;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    near ptr 0x0049DB94;
	__asm        mov    sImagePath.reference, 0;
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049DBA0;
// LINE 634:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 635:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        jne    near ptr 0x0049DD54;
	__asm        mov    eax, ds:[0x59A2E4];
	__asm        mov    [ebp-0x20], eax;
// LINE 636:
	__asm        jmp    near ptr 0x0049DBCD;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049DBEB;
// LINE 637:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0049DC06;
// LINE 638:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0049DD1F;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049DC42;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049DC47;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049DC5F;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049DCC9;
	__asm        jmp    near ptr 0x0049DC71;
	__asm        jmp    near ptr 0x0049DC76;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049DC95;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x0049DCA1;
	__asm        jmp    near ptr 0x0049DCA1;
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    near ptr 0x0049DCA1;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049DCC9;
	__asm        jmp    near ptr 0x0049DCCE;
	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0049DCD7;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0049DCE2;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049DCFD;
	__asm        jmp    near ptr 0x0049DD02;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    near ptr 0x0049DD2F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 639:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+8];
// LINE 641:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        jne    near ptr 0x0049DEDB;
	__asm        mov    eax, ds:[0x59A2E8];
	__asm        mov    [ebp-0x24], eax;
// LINE 642:
	__asm        jmp    near ptr 0x0049DD74;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0049DD92;
// LINE 643:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0049DDAD;
// LINE 644:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0049DECB;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049DDEF;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049DDF4;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049DE0C;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0049DE63;
	__asm        jmp    near ptr 0x0049DE1E;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049DE63;
	__asm        jmp    near ptr 0x0049DE68;
	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0049DE74;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0049DE85;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049DEA9;
	__asm        jmp    near ptr 0x0049DEAE;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    near ptr 0x0049DEDB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 646:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049DF65;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0049DF65;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049DF45;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049DF4A;
	__asm        jmp    near ptr 0x0049DF4F;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049DF60;
	__asm        jmp    near ptr 0x0049DF65;
	__asm        jmp    near ptr 0x0049DF6A;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0049DF8C;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049DF91;
	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0049E014;
	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0049E014;
	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0049DFF4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0049DFF9;
	__asm        jmp    near ptr 0x0049DFFE;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E00F;
	__asm        jmp    near ptr 0x0049E014;
	__asm        jmp    near ptr 0x0049E019;
	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     near ptr 0x0049E03B;
	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E040;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0049E048;
// LINE 647:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049e04f
void CopterPlayMenu::DestroyImage() {
// LINE 652:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 653:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        je     near ptr 0x0049E0B2;
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0049E0A5;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E0A0;
	__asm        jmp    near ptr 0x0049E0A5;
// LINE 655:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 657:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        je     near ptr 0x0049E109;
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0049E0FC;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E0F7;
	__asm        jmp    near ptr 0x0049E0FC;
// LINE 659:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 661:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 662:
	__asm        jmp    near ptr 0x0049E116;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049e11b
int32_t CopterPlayMenu::DrawSelf() {
// LINE 667:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 668:
	__asm        mov    ecx, this;
	__asm        call   0x0049C3AD;
// LINE 669:
	__asm        mov    ecx, this;
	__asm        call   0x0049E146;
// LINE 670:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049E141;
// LINE 671:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049e146
void CopterPlayMenu::DrawRatchet() {
	class MPoint ptDestinationRatchet;
	class MPoint ptDestinationBackground;

// LINE 677:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 678:
	__asm        jmp    near ptr 0x0049E157;
	__asm        mov    ptDestinationBackground.x, 0x1E;
	__asm        mov    ptDestinationBackground.y, 0x23;
	__asm        jmp    near ptr 0x0049E16A;
// LINE 679:
	__asm        jmp    near ptr 0x0049E16F;
	__asm        jmp    near ptr 0x0049E174;
// LINE 682:
	__asm        jmp    near ptr 0x0049E179;
	__asm        jmp    near ptr 0x0049E17E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationBackground.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationBackground.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0xC];
// LINE 684:
	__asm        lea    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0049E226;
// LINE 686:
	__asm        jmp    near ptr 0x0049E1D3;
	__asm        jmp    near ptr 0x0049E1D8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationRatchet.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0xC];
// LINE 687:
	__asm        jmp    near ptr 0x0049E221;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049e226
void CopterPlayMenu::GetCoordinatesForRatchet(class MPoint& ptDestination) {
// LINE 693:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 694:
	__asm        mov    eax, ptDestination;
	__asm        mov    dword ptr [eax], 0x1D;
// LINE 695:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0049E268;
// LINE 696:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x2D;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 697:
	__asm        jmp    near ptr 0x0049E280;
// LINE 698:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x55;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 699:
	__asm        jmp    near ptr 0x0049E285;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 1:0009d290-0009d2ae Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2b0-0009d2d7 Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2e0-0009d318 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e2e0
// UserMenuWindow::`scalar deleting destructor'



// Contribution: 1:0009d320-0009d359 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e320
int32_t UserMenuWindow::GetLineCount() {
// LINE 218:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 219:
	__asm        jmp    near ptr 0x0049E331;
	__asm        jmp    near ptr 0x0049E336;
	__asm        jmp    near ptr 0x0049E33B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        jmp    near ptr 0x0049E355;
// LINE 220:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:0009d360-0009d398 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e360
// CopterMainMenu::`scalar deleting destructor'



// Contribution: 1:0009d3a0-0009d3d8 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e3a0
// CopterPlayMenu::`scalar deleting destructor'



// Contribution: 1:0009d3e0-0009d448 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0049e3e0
// allocate



// Contribution: 2:000022f8-000023df Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005912f8
// ??_7UserMenuWindow@@6B@


// Contribution: 2:000023e0-000024c7 Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005913e0
// ??_7CopterMainMenu@@6B@


// Contribution: 2:000024c8-000025af Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005914c8
// ??_7CopterPlayMenu@@6B@


// Contribution: 3:000032d0-0000333e Module: 13, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a2d0
// SZ_MENU_SELECTION_SOUND
// GLOBAL: COPTER_D 0x0059a2d4
// SZ_MAIN_PART_1_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a2d8
// SZ_MAIN_PART_2_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a2dc
// SZ_MAIN_LIGHT_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a2e0
// SZ_MAIN_RATCHET_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a2e4
// SZ_PLAY_RATCHET_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a2e8
// SZ_PLAY_BACKGROUND_IMAGE_FILE_NAME
