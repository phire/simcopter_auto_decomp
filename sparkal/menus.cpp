// Module: Menus.obj
// Source: C:\Copter\source\sparkal\Menus.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class UserMenuWindow (forward reference);
class UserMenuWindow : public GraphicWindow
{
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t SetSelectionIndex(int32_t);
	// vtable: 200
	intro int32_t SetSelectionValue(int32_t);
	// vtable: 204
	intro int32_t GetSelectionIndex();
	// vtable: 208
	intro int32_t GetSelectionValue();
	// vtable: 212
	intro int32_t GetLineCount();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro int32_t ExecuteSelection(int32_t);
protected:
	// vtable: 220
	intro void DrawSelectionIndicators();
	// vtable: 224
	intro int32_t DoCursorHitTest(int32_t&, long, long);
	// vtable: 228
	intro int32_t GetPositionOfNthItem(int32_t, class MPoint&);
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: void;

// Type: struct UserMenuWindowDescription (forward reference);
// UserMenuWindowDescription Class implementation not found

// Type: int32_t;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class TextWindow (forward reference);
class TextWindow : public GraphicWindow
{
public:
	void TextWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro void SetWindowTitle(const class basic_string<char>&);
	// vtable: 200
	intro void SetWindowTitle(int32_t);
	// vtable: 204
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 208
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 212
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 216
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 220
	intro void LoadStrings();
	// vtable: 224
	intro void FitWindowToText();
	// vtable: 228
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
};

// Type: char[260];

// Type: long;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: char;

// Type: unsigned long;

// Type: class CopterMainMenu (forward reference);
class CopterMainMenu : public UserMenuWindow
{
public:
	void CopterMainMenu(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~CopterMainMenu();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
protected:
	void DrawRatchetAndLights();
	void GetCoordinatesForLights(class MPoint*, class MRect*);
	void GetCoordinatesForRatchets(class MPoint*, class MRect*);
	class GraphicWindow* mySiblingWindows[2];
	class CBackBuffer* myRatchetImage;
	class CBackBuffer* myLightImage;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class MPoint[5];

// Type: class MRect[5];

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class CopterPlayMenu (forward reference);
class CopterPlayMenu : public UserMenuWindow
{
public:
	void CopterPlayMenu(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~CopterPlayMenu();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
protected:
	void GetCoordinatesForRatchet(class MPoint&);
	void DrawRatchet();
	class CBackBuffer* myRatchetImage;
	class CBackBuffer* myBackgroundImage;
};

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: uint32_t;

// Type: class UserMenuWindow;
class UserMenuWindow : public GraphicWindow
{
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t SetSelectionIndex(int32_t);
	// vtable: 200
	intro int32_t SetSelectionValue(int32_t);
	// vtable: 204
	intro int32_t GetSelectionIndex();
	// vtable: 208
	intro int32_t GetSelectionValue();
	// vtable: 212
	intro int32_t GetLineCount();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro int32_t ExecuteSelection(int32_t);
protected:
	// vtable: 220
	intro void DrawSelectionIndicators();
	// vtable: 224
	intro int32_t DoCursorHitTest(int32_t&, long, long);
	// vtable: 228
	intro int32_t GetPositionOfNthItem(int32_t, class MPoint&);
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:00099f80-0009d28b Module: 13, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049af80
void UserMenuWindow::UserMenuWindow() {

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T67;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049AFD9;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T71;
_T67:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
_T71:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x0049B000;

	__asm        jmp    near ptr 0x0049B005;

	__asm        jmp    near ptr 0x0049B00A;

	__asm        jmp    near ptr 0x0049B00F;

	__asm        jmp    near ptr 0x0049B014;

	__asm        jmp    near ptr 0x0049B019;

	__asm        jmp    near ptr 0x0049B01E;

	__asm        jmp    near ptr 0x0049B023;

	__asm        jmp    near ptr 0x0049B028;

	__asm        jmp    near ptr 0x0049B02D;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
	__asm        jmp    near ptr 0x0049B059;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T18f;

	__asm        push   0;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049B092;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T16c;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B0E7;

	__asm        jmp    _T175;
_T16c:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T175:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B104;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T196;
_T18f:
	__asm        mov    dword ptr [ebp-4], 0;
_T196:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0049B122;

	__asm        push   2;
	__asm        lea    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T239;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T239;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T219:
	__asm        jmp    near ptr 0x0049B19E;

	__asm        jmp    near ptr 0x0049B1A3;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B1B4;

	__asm        jmp    _T239;
_T239:
	__asm        jmp    near ptr 0x0049B1BE;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T260;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T260:
	__asm        jmp    near ptr 0x0049B1E5;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 40:
	__asm        jmp    near ptr 0x0049B1F3;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049b1fb
void UserMenuWindow::UserMenuWindow(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        lea    ecx, [ebp-0x10];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T57;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T57:
	__asm        jmp    near ptr 0x0049B257;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049B274;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf1;

	__asm        jmp    near ptr 0x0049B289;

	__asm        jmp    near ptr 0x0049B28E;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb8;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _Tc4;

	__asm        jmp    _Tc4;
_Tb8:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _Tc4;
_Tc4:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf1;
_Tf1:
	__asm        jmp    near ptr 0x0049B2F1;

	__asm        mov    byte ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0049B2FA;

	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0049B305;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049B325;

	__asm        jmp    near ptr 0x0049B32A;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        jmp    near ptr 0x0049B358;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T19f;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B38B;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T19f;
_T19f:
	__asm        jmp    near ptr 0x0049B39F;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T1ca;

	__asm        jmp    near ptr 0x0049B3B4;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1d1;
_T1ca:
	__asm        mov    dword ptr [ebp-0x38], 0xFFFFFFFF;
_T1d1:
	__asm        jmp    near ptr 0x0049B3D1;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T217;

	__asm        jmp    near ptr 0x0049B3E8;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T217;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T2f9;
_T217:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2ef;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2c9;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0049B464;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T28e;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T29a;

	__asm        jmp    _T29a;
_T28e:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T29a;
_T29a:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B4BF;

	__asm        jmp    _T2d2;
_T2c9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
_T2d2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B4DC;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T2f9;
_T2ef:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
_T2f9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x0049B503;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xA4;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x48;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xBC;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC4], eax;
	__asm        jmp    near ptr 0x0049B601;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
	__asm        jmp    near ptr 0x0049B62D;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 56:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeModal;
	__asm        add    esp, 4;
// LINE 57:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 58:
	__asm        jmp    near ptr 0x0049B66E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049b678
void UserMenuWindow::~UserMenuWindow() {
	int32_t i;
	int32_t iEnd;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5912F8;
// LINE 68:
	__asm        jmp    near ptr 0x0049B692;

	__asm        jmp    near ptr 0x0049B697;

	__asm        jmp    near ptr 0x0049B69C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 70:
	__asm        mov    i, 0;
	__asm        jmp    _T4b;
_T48:
	__asm        inc    i;
_T4b:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T9d;
// LINE 71:
	__asm        jmp    near ptr 0x0049B6D4;

	__asm        jmp    near ptr 0x0049B6D9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T98;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xAC];
	__asm        jmp    _T98;
_T98:
	__asm        jmp    _T48;
// LINE 73:
_T9d:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 74:
	__asm        jmp    near ptr 0x0049B722;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x30], eax;
_Tc4:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     _Te4;

	__asm        jmp    near ptr 0x0049B753;

	__asm        add    dword ptr [ebp-0x30], 4;
	__asm        jmp    _Tc4;
_Te4:
	__asm        jmp    near ptr 0x0049B761;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B77E;

	__asm        jmp    near ptr 0x0049B783;

	__asm        jmp    near ptr 0x0049B788;

	__asm        jmp    near ptr 0x0049B78D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1a1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1a1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T181;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
_T181:
	__asm        jmp    near ptr 0x0049B7FE;

	__asm        jmp    near ptr 0x0049B803;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049B814;

	__asm        jmp    _T1a1;
_T1a1:
	__asm        jmp    near ptr 0x0049B81E;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1ce:
	__asm        jmp    near ptr 0x0049B84B;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0049b858
int32_t UserMenuWindow::Initialize() {
	class MRect rectTextWindow;
	class TextWindow* tempTextWindow;
	int32_t i;
	char szFullSoundPath[260];

// LINE 89:
	__asm        jmp    near ptr 0x0049B86F;

	__asm        jmp    near ptr 0x0049B874;
// LINE 93:
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_MENU_SELECTION_SOUND;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 94:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _T11e;

	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0049B8C7;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tef;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0049B942;

	__asm        jmp    _Tfb;
_Tef:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax], 0;
_Tfb:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049B965;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    _T128;
_T11e:
	__asm        mov    dword ptr [ebp-0x120], 0;
_T128:
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        jmp    near ptr 0x0049B98F;

	__asm        push   2;
	__asm        lea    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    eax, [ebp-0x120];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x120];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T20e;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T20e;

	__asm        mov    eax, [ebp-0x138];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1eb;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax], 0;
_T1eb:
	__asm        jmp    near ptr 0x0049BA48;

	__asm        jmp    near ptr 0x0049BA4D;

	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049BA61;

	__asm        jmp    _T20e;
_T20e:
	__asm        jmp    near ptr 0x0049BA6B;

	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T247;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T247:
	__asm        jmp    near ptr 0x0049BAA4;
// LINE 95:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x30];
// LINE 98:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0xFFFFFFFF;
	__asm        je     _T401;
// LINE 99:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T2e3;
// LINE 100:
	__asm        mov    rectTextWindow.left, 0;
// LINE 101:
	__asm        jmp    near ptr 0x0049BAF4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    rectTextWindow.right, eax;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    rectTextWindow.top, eax;
// LINE 103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        add    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 105:
	__asm        jmp    _T33c;
// LINE 106:
_T2e3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    rectTextWindow.left, eax;
// LINE 107:
	__asm        jmp    near ptr 0x0049BB52;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    rectTextWindow.right, eax;
// LINE 108:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    rectTextWindow.top, eax;
// LINE 109:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        add    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 112:
_T33c:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _T398;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectTextWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x128];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T3a2;
_T398:
	__asm        mov    tempTextWindow, 0;
// LINE 113:
_T3a2:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 114:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T401;
// LINE 116:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 119:
_T401:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0xFFFFFFFF;
	__asm        je     _Tb28;
// LINE 121:
	__asm        mov    i, 0;
	__asm        jmp    _T429;
_T423:
	__asm        inc    i;
_T429:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x94], ecx;
	__asm        jle    _Tb28;
// LINE 125:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    rectTextWindow.left, eax;
// LINE 126:
	__asm        jmp    near ptr 0x0049BCB0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        sub    eax, rectTextWindow.left;
	__asm        mov    rectTextWindow.right, eax;
// LINE 128:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    rectTextWindow.top, eax;
// LINE 129:
	__asm        jmp    near ptr 0x0049BCF8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        sub    eax, rectTextWindow.top;
	__asm        mov    rectTextWindow.bottom, eax;
// LINE 138:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     _T525;

	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        add    eax, i;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        lea    eax, rectTextWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T52f;
_T525:
	__asm        mov    tempTextWindow, 0;
// LINE 139:
_T52f:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 140:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 141:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    _T5a2;
// LINE 142:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 143:
	__asm        jmp    _T5c2;
// LINE 144:
_T5a2:
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 145:
_T5c2:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xE0];
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD0];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     _T64e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x154], eax;
	__asm        jmp    near ptr 0x0049BE6F;

	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _T637;

	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T637;
_T637:
	__asm        jmp    near ptr 0x0049BE94;

	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xCC], 4;
	__asm        jmp    _Tb1e;
_T64e:
	__asm        jmp    near ptr 0x0049BEAB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD0];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     _T763;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x0049BF13;

	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        je     _T6dd;

	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T6dd;
_T6dd:
	__asm        jmp    near ptr 0x0049BF3A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        sub    eax, 4;
	__asm        mov    [ebp-0x184], eax;
_T709:
	__asm        mov    eax, [ebp-0x184];
	__asm        cmp    [ebp-0x1C8], eax;
	__asm        je     _T73e;

	__asm        sub    dword ptr [ebp-0x180], 4;
	__asm        sub    dword ptr [ebp-0x184], 4;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x180];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T709;
_T73e:
	__asm        jmp    near ptr 0x0049BF9B;

	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x1C8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0xCC], 4;
	__asm        jmp    _Tb19;
_T763:
	__asm        jmp    near ptr 0x0049BFC0;

	__asm        jmp    near ptr 0x0049BFC5;

	__asm        jmp    near ptr 0x0049BFCA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        test   eax, eax;
	__asm        je     _T7cc;

	__asm        jmp    near ptr 0x0049BFF2;

	__asm        jmp    near ptr 0x0049BFF7;

	__asm        jmp    near ptr 0x0049BFFC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    _T843;
_T7cc:
	__asm        mov    dword ptr [ebp-0x16C], 0x400;
	__asm        lea    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    dword ptr [ebp-0x170], 1;
	__asm        lea    eax, [ebp-0x170];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, [ebp-0x174];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T81f;

	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    _T82b;
_T81f:
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
_T82b:
	__asm        jmp    near ptr 0x0049C088;

	__asm        mov    eax, [ebp-0x17C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    _T843;
_T843:
	__asm        jmp    near ptr 0x0049C0A0;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x15C], eax;
	__asm        jmp    near ptr 0x0049C0BC;

	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x1AC], eax;
_T882:
	__asm        mov    eax, [ebp-0x1AC];
	__asm        cmp    [ebp-0x1C8], eax;
	__asm        je     _T8f7;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x19C], eax;
	__asm        add    dword ptr [ebp-0x1AC], 4;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        add    dword ptr [ebp-0x1A8], 4;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        jmp    near ptr 0x0049C123;

	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     _T8ed;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T8ed;
_T8ed:
	__asm        jmp    near ptr 0x0049C14A;

	__asm        jmp    _T882;
_T8f7:
	__asm        jmp    near ptr 0x0049C154;

	__asm        jmp    near ptr 0x0049C159;

	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x0049C194;

	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     _T95c;

	__asm        mov    eax, tempTextWindow;
	__asm        mov    ecx, [ebp-0x194];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T95c;
_T95c:
	__asm        jmp    near ptr 0x0049C1B9;

	__asm        jmp    near ptr 0x0049C1BE;

	__asm        jmp    near ptr 0x0049C1C3;

	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        and    eax, 0xFFFFFFFC;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x15C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x1C4], eax;
_T9b6:
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1C4], eax;
	__asm        je     _Ta2b;

	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        add    dword ptr [ebp-0x1C4], 4;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        add    dword ptr [ebp-0x1BC], 4;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    near ptr 0x0049C257;

	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     _Ta21;

	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x1B8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _Ta21;
_Ta21:
	__asm        jmp    near ptr 0x0049C27E;

	__asm        jmp    _T9b6;
_Ta2b:
	__asm        jmp    near ptr 0x0049C288;

	__asm        jmp    near ptr 0x0049C28D;

	__asm        jmp    near ptr 0x0049C292;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x168], eax;
_Ta4c:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x168];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     _Ta75;

	__asm        jmp    near ptr 0x0049C2C1;

	__asm        add    dword ptr [ebp-0x168], 4;
	__asm        jmp    _Ta4c;
_Ta75:
	__asm        jmp    near ptr 0x0049C2D2;

	__asm        jmp    near ptr 0x0049C2D7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C2FD;

	__asm        jmp    near ptr 0x0049C302;

	__asm        mov    eax, [ebp-0x160];
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], eax;
	__asm        jmp    near ptr 0x0049C322;

	__asm        jmp    near ptr 0x0049C327;

	__asm        jmp    near ptr 0x0049C32C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x15C];
	__asm        add    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCC], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC8], eax;
_Tb19:
	__asm        jmp    _Tb1e;
_Tb1e:
	__asm        jmp    near ptr 0x0049C37B;
// LINE 147:
	__asm        jmp    _T423;
// LINE 149:
_Tb28:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 150:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0049C3A8;
// LINE 151:
}

// FUNCTION: COPTER_D 0x0049c3ad
int32_t UserMenuWindow::DrawSelf() {
	int32_t i;
	int32_t iEnd;

// LINE 160:
	__asm        jmp    near ptr 0x0049C3BE;

	__asm        jmp    near ptr 0x0049C3C3;

	__asm        jmp    near ptr 0x0049C3C8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 171:
	__asm        mov    i, 0;
	__asm        jmp    _T42;
_T3f:
	__asm        inc    i;
_T42:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T80;
// LINE 172:
	__asm        jmp    near ptr 0x0049C400;

	__asm        jmp    near ptr 0x0049C405;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x18];
	__asm        jmp    _T3f;
// LINE 173:
_T80:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C437;
// LINE 174:
}

// FUNCTION: COPTER_D 0x0049c43c
int32_t UserMenuWindow::SetSelectionIndex(int32_t nIndex) {
// LINE 182:
	__asm        cmp    nIndex, 0;
	__asm        jl     _T40;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        cmp    eax, nIndex;
	__asm        jl     _T40;

	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    _T47;
// LINE 183:
_T40:
	__asm        xor    eax, eax;
	__asm        jmp    _T118;
// LINE 185:
_T47:
	__asm        jmp    near ptr 0x0049C488;

	__asm        jmp    near ptr 0x0049C48D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0xD4];
// LINE 186:
	__asm        jmp    near ptr 0x0049C4C7;

	__asm        jmp    near ptr 0x0049C4CC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, nIndex;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xD4];
// LINE 187:
	__asm        mov    eax, nIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
// LINE 188:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 189:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 190:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+8];
// LINE 191:
	__asm        mov    eax, 1;
	__asm        jmp    _T118;
// LINE 192:
_T118:
}

// FUNCTION: COPTER_D 0x0049c55b
int32_t UserMenuWindow::SetSelectionValue(int32_t nValue) {
// LINE 198:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x98];
	__asm        neg    eax;
	__asm        sub    nValue, eax;
// LINE 199:
	__asm        mov    eax, nValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        jmp    near ptr 0x0049C58E;
// LINE 200:
}

// FUNCTION: COPTER_D 0x0049c595
void UserMenuWindow::DrawSelectionIndicators() {
// LINE 212:
	__asm        jmp    near ptr 0x0049C5A6;
}

// FUNCTION: COPTER_D 0x0049c5ab
int32_t UserMenuWindow::DoCursorHitTest(int32_t& nHitIndex, long nCursorX, long nCursorY) {
	int32_t i;
	int32_t iEnd;

// LINE 235:
	__asm        mov    i, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    iEnd, eax;
	__asm        jmp    _T2c;
_T29:
	__asm        inc    i;
_T2c:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _Tf4;
// LINE 236:
	__asm        jmp    near ptr 0x0049C5E8;

	__asm        jmp    near ptr 0x0049C5ED;

	__asm        jmp    near ptr 0x0049C5F2;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0049C603;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     _Tc9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jg     _Tc9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x18], ecx;
	__asm        jle    _Tc9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jle    _Tc9;

	__asm        jmp    _Tce;
_Tc9:
	__asm        jmp    _Tef;
_Tce:
	__asm        jmp    _Tdd;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tef;
// LINE 237:
_Tdd:
	__asm        mov    eax, i;
	__asm        mov    ecx, nHitIndex;
	__asm        mov    [ecx], eax;
// LINE 238:
	__asm        mov    eax, 1;
	__asm        jmp    _Tfb;
// LINE 240:
_Tef:
	__asm        jmp    _T29;
// LINE 241:
_Tf4:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfb;
// LINE 242:
_Tfb:
}

// FUNCTION: COPTER_D 0x0049c6ad
int32_t UserMenuWindow::GetPositionOfNthItem(int32_t nIndex, class MPoint& ptPosition) {
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, ptPosition;
	__asm        mov    [ecx], eax;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        imul   eax, nIndex;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, ptPosition;
	__asm        mov    [ecx+4], eax;
// LINE 252:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049C6ED;
// LINE 253:
}

// FUNCTION: COPTER_D 0x0049c6f4
long UserMenuWindow::DoCharacter(long lCharacter) {
	int32_t i;
	int32_t iEnd;

// LINE 264:
	__asm        mov    i, 0;
// LINE 265:
	__asm        jmp    near ptr 0x0049C70C;

	__asm        jmp    near ptr 0x0049C711;

	__asm        jmp    near ptr 0x0049C716;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        mov    iEnd, eax;
// LINE 267:
_T3a:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T2a5;
// LINE 268:
	__asm        jmp    near ptr 0x0049C73F;

	__asm        jmp    near ptr 0x0049C744;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, i;
	__asm        mov    eax, [eax+ecx*4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0049C75E;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        ja     _Tac;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C791;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    near ptr 0x0049C7A5;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T263;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1c2;

	__asm        jmp    near ptr 0x0049C7D1;

	__asm        jmp    near ptr 0x0049C7D6;

	__asm        jmp    near ptr 0x0049C7DB;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10c;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T118;

	__asm        jmp    _T118;
_T10c:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T118;
_T118:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19f;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T19a;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T19a;
_T19a:
	__asm        jmp    _T1a8;
_T19f:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
_T1a8:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049C8AB;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T1c9;
_T1c2:
	__asm        mov    dword ptr [ebp-0xC], 0;
_T1c9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T255;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T255;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T235;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
_T235:
	__asm        jmp    near ptr 0x0049C92E;

	__asm        jmp    near ptr 0x0049C933;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049C944;

	__asm        jmp    _T255;
_T255:
	__asm        jmp    near ptr 0x0049C94E;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
_T263:
	__asm        jmp    near ptr 0x0049C95C;

	__asm        jmp    near ptr 0x0049C961;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, lCharacter;
	__asm        jne    _T29d;
// LINE 269:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 270:
	__asm        mov    eax, 1;
	__asm        jmp    _T2ac;
// LINE 272:
_T29d:
	__asm        inc    i;
// LINE 273:
	__asm        jmp    _T3a;
// LINE 274:
_T2a5:
	__asm        xor    eax, eax;
	__asm        jmp    _T2ac;
// LINE 275:
_T2ac:
}

// FUNCTION: COPTER_D 0x0049c9a7
long UserMenuWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 282:
	__asm        cmp    lKey, 0x28;
	__asm        je     _T20;

	__asm        cmp    lKey, 0x22;
	__asm        jne    _T7b;
// LINE 283:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xD4];
	__asm        jg     _T53;
// LINE 284:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 285:
	__asm        jmp    _T6c;
// LINE 286:
_T53:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 287:
_T6c:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 289:
	__asm        jmp    _T1d8;
_T7b:
	__asm        cmp    lKey, 0x26;
	__asm        je     _T9f;

	__asm        cmp    lKey, 0x21;
	__asm        jne    _Tfa;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jle    _Tfa;
// LINE 290:
_T9f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jne    _Td2;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 292:
	__asm        jmp    _Teb;
// LINE 293:
_Td2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 294:
_Teb:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 296:
	__asm        jmp    _T1d8;
_Tfa:
	__asm        cmp    lKey, 0x24;
	__asm        jne    _T123;
// LINE 297:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 298:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 300:
	__asm        jmp    _T1d8;
_T123:
	__asm        cmp    lKey, 0x23;
	__asm        jne    _T15a;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 302:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 304:
	__asm        jmp    _T1d8;
_T15a:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T18b;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 306:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 308:
	__asm        jmp    _T1d8;
_T18b:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T1d8;
// LINE 309:
// Block start:
	long lValue;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xD4];
	__asm        mov    lValue, eax;
// LINE 310:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 311:
	__asm        mov    eax, 1;
	__asm        jmp    _T1df;
// LINE 313:
// Block end:
_T1d8:
	__asm        xor    eax, eax;
	__asm        jmp    _T1df;
// LINE 314:
_T1df:
}

// FUNCTION: COPTER_D 0x0049cb8d
long UserMenuWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t nIndex;
	int32_t bExecute;

// LINE 329:
	__asm        mov    bExecute, 0;
// LINE 331:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     _T7c;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    _T4e;
// LINE 333:
	__asm        mov    bExecute, 1;
// LINE 334:
_T4e:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 335:
	__asm        cmp    bExecute, 0;
	__asm        je     _T7c;
// LINE 336:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 338:
_T7c:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CC13;
// LINE 339:
}

// FUNCTION: COPTER_D 0x0049cc1a
long UserMenuWindow::DoCursorMove(long nCursorX, long nCursorY) {
	int32_t nIndex;

// LINE 349:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     _T40;
// LINE 350:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 351:
_T40:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CC64;
// LINE 352:
}

// FUNCTION: COPTER_D 0x0049cc6b
int32_t UserMenuWindow::ExecuteSelection(int32_t nIndex) {
	long lValue;

// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        add    eax, nIndex;
	__asm        mov    lValue, eax;
// LINE 362:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 363:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049CCB4;
// LINE 364:
}

// FUNCTION: COPTER_D 0x0049ccbb
void CopterMainMenu::CopterMainMenu(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::UserMenuWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5913E0;
// LINE 394:
	__asm        jmp    near ptr 0x0049CD0B;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049cd15
void CopterMainMenu::~CopterMainMenu() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5913E0;
// LINE 401:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0x6C];
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0x6C];
// LINE 403:
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::DestroyImage;
// LINE 404:
	__asm        jmp    near ptr 0x0049CD65;

	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::~UserMenuWindow;
}

// FUNCTION: COPTER_D 0x0049cd72
int32_t CopterMainMenu::Initialize() {
// LINE 413:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T7e;

	__asm        jmp    near ptr 0x0049CD9A;

	__asm        mov    dword ptr [ebp-0x14], 0x121;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0x122;
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        jmp    near ptr 0x0049CDBB;

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_PART_1_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    _T8b;
_T7e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 415:
_T8b:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tfd;

	__asm        jmp    near ptr 0x0049CE19;

	__asm        mov    dword ptr [ebp-0x28], 0x1AB;
	__asm        mov    dword ptr [ebp-0x24], 0x13B;
	__asm        mov    dword ptr [ebp-0x20], 0x1AC;
	__asm        mov    dword ptr [ebp-0x1C], 0x13C;
	__asm        jmp    near ptr 0x0049CE3A;

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_PART_2_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    _T10a;
_Tfd:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 416:
_T10a:
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::Initialize;
// LINE 417:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0049CE96;
// LINE 418:
}

// FUNCTION: COPTER_D 0x0049ce9b
int32_t CopterMainMenu::CreateImage(int32_t __formal) {
	class basic_string<char> sImagePath;
	class basic_string<char> sImageFile;

// LINE 426:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049CEF2;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T69;
_T62:
	__asm        mov    sImageFile.reference, 0;
_T69:
	__asm        mov    sImageFile.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049CF10;
// LINE 427:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049CF55;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tcc;
_Tc5:
	__asm        mov    sImagePath.reference, 0;
_Tcc:
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049CF73;
// LINE 429:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 430:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        jne    _T267;

	__asm        mov    eax, SZ_MAIN_RATCHET_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
// LINE 431:
	__asm        jmp    near ptr 0x0049CFA0;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0049CFBE;
// LINE 432:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0049CFD9;
// LINE 433:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T257;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T17a;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T17a:
	__asm        jmp    near ptr 0x0049D01A;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049D032;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T201;

	__asm        jmp    near ptr 0x0049D044;

	__asm        jmp    near ptr 0x0049D049;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1cd;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T1d9;

	__asm        jmp    _T1d9;
_T1cd:
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T201;
_T201:
	__asm        jmp    near ptr 0x0049D0A1;

	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0049D0AA;

	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0049D0B5;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049D0D0;

	__asm        jmp    near ptr 0x0049D0D5;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], eax;
	__asm        jmp    _T267;
_T257:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
// LINE 435:
_T267:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        jne    _T3ee;

	__asm        mov    eax, SZ_MAIN_LIGHT_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x24], eax;
// LINE 436:
	__asm        jmp    near ptr 0x0049D122;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0049D140;
// LINE 437:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0049D15B;
// LINE 438:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T3de;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T302;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T302:
	__asm        jmp    near ptr 0x0049D1A2;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049D1BA;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T376;

	__asm        jmp    near ptr 0x0049D1CC;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T376;
_T376:
	__asm        jmp    near ptr 0x0049D216;

	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0049D222;

	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0049D233;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049D257;

	__asm        jmp    near ptr 0x0049D25C;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15E], eax;
	__asm        jmp    _T3ee;
_T3de:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
// LINE 440:
_T3ee:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T478;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T478;

	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T458;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T458:
	__asm        jmp    near ptr 0x0049D2F8;

	__asm        jmp    near ptr 0x0049D2FD;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D30E;

	__asm        jmp    _T478;
_T478:
	__asm        jmp    near ptr 0x0049D318;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T49f;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49f:
	__asm        jmp    near ptr 0x0049D33F;

	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T527;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T527;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T507;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T507:
	__asm        jmp    near ptr 0x0049D3A7;

	__asm        jmp    near ptr 0x0049D3AC;

	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D3BD;

	__asm        jmp    _T527;
_T527:
	__asm        jmp    near ptr 0x0049D3C7;

	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T54e;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T54e:
	__asm        jmp    near ptr 0x0049D3EE;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0049D3F6;
// LINE 441:
}

// FUNCTION: COPTER_D 0x0049d3fd
void CopterMainMenu::DestroyImage() {
// LINE 447:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        je     _T63;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D44E;

	__asm        jmp    _T56;
// LINE 449:
_T56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
// LINE 451:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        je     _Tba;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15E];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049D4A5;

	__asm        jmp    _Tad;
// LINE 453:
_Tad:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
// LINE 455:
_Tba:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 456:
	__asm        jmp    near ptr 0x0049D4C4;
}

// FUNCTION: COPTER_D 0x0049d4c9
int32_t CopterMainMenu::DrawSelf() {
// LINE 462:
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::DrawSelf;
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::DrawRatchetAndLights;
// LINE 465:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049D4EF;
// LINE 466:
}

// FUNCTION: COPTER_D 0x0049d4f4
void CopterMainMenu::DrawRatchetAndLights() {
	class MPoint ptLightsDestination[5];
	class MRect rectLightsSource[5];
	int32_t i;
	class MRect rectRatchetsSource[5];
	class MPoint ptRatchetsDestination[5];


	__asm        mov    dword ptr [ebp-0xF8], 5;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        mov    [ebp-0xFC], eax;
// LINE 473:
_T28:
	__asm        dec    dword ptr [ebp-0xF8];
	__asm        js     _T4b;

	__asm        mov    ecx, [ebp-0xFC];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0xFC], 8;
	__asm        jmp    _T28;
_T4b:
	__asm        jmp    near ptr 0x0049D544;

	__asm        mov    dword ptr [ebp-0x100], 5;
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        mov    [ebp-0x104], eax;
// LINE 474:
_T66:
	__asm        dec    dword ptr [ebp-0x100];
	__asm        js     _T89;

	__asm        mov    ecx, [ebp-0x104];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x104], 0x10;
	__asm        jmp    _T66;
_T89:
	__asm        jmp    near ptr 0x0049D582;

	__asm        mov    dword ptr [ebp-0x108], 5;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        mov    [ebp-0x10C], eax;
// LINE 475:
_Ta1:
	__asm        dec    dword ptr [ebp-0x108];
	__asm        js     _Tc4;

	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x10C], 8;
	__asm        jmp    _Ta1;
_Tc4:
	__asm        jmp    near ptr 0x0049D5BD;

	__asm        mov    dword ptr [ebp-0x110], 5;
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        mov    [ebp-0x114], eax;
// LINE 476:
_Tdc:
	__asm        dec    dword ptr [ebp-0x110];
	__asm        js     _Tff;

	__asm        mov    ecx, [ebp-0x114];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x114], 0x10;
	__asm        jmp    _Tdc;
_Tff:
	__asm        jmp    near ptr 0x0049D5F8;
// LINE 479:
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::GetCoordinatesForLights;
// LINE 480:
	__asm        mov    i, 0;
	__asm        jmp    _T12c;
_T129:
	__asm        inc    i;
_T12c:
	__asm        cmp    i, 5;
	__asm        jge    _T1b0;
// LINE 483:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC4];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xC8];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0xCC];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0xF0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0xF4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x15E];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x15E];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _T129;
// LINE 485:
_T1b0:
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::GetCoordinatesForRatchets;
// LINE 486:
	__asm        mov    i, 0;
	__asm        jmp    _T1d2;
_T1cf:
	__asm        inc    i;
_T1d2:
	__asm        cmp    i, 5;
	__asm        jge    _T244;
// LINE 489:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x6C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x70];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x74];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    eax, [ebp+eax-0x78];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x24];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x15A];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x15A];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _T1cf;
// LINE 490:
_T244:
	__asm        jmp    near ptr 0x0049D73D;
}

// FUNCTION: COPTER_D 0x0049d742
void CopterMainMenu::GetCoordinatesForLights(class MPoint* ptDestinationArray, class MRect* rectSourceArray) {
// LINE 502:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax], 0x14E;
// LINE 503:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+4], 0x20;
// LINE 504:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax], 0;
// LINE 505:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+8], 0x3C;
// LINE 506:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 507:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0xC], 0x38;
// LINE 509:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+8], 0x14E;
// LINE 510:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0xC], 0x58;
// LINE 511:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 512:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x18], 0x3C;
// LINE 513:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x14], 0x38;
// LINE 514:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x1C], 0x78;
// LINE 516:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x10], 0x14E;
// LINE 517:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x14], 0x98;
// LINE 518:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 519:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x28], 0x3C;
// LINE 520:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x24], 0x78;
// LINE 521:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x2C], 0xB8;
// LINE 523:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x18], 0x14E;
// LINE 524:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x1C], 0xD8;
// LINE 525:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 526:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x38], 0x3C;
// LINE 527:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x34], 0xB8;
// LINE 528:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x3C], 0xF8;
// LINE 530:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x20], 0x14E;
// LINE 531:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x24], 0x118;
// LINE 532:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 533:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x48], 0x3C;
// LINE 534:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x44], 0xF8;
// LINE 535:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x4C], 0x138;
// LINE 537:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x3C;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x3C;
// LINE 539:
	__asm        jmp    near ptr 0x0049D8A4;
}

// FUNCTION: COPTER_D 0x0049d8ab
void CopterMainMenu::GetCoordinatesForRatchets(class MPoint* ptDestinationArray, class MRect* rectSourceArray) {
// LINE 546:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax], 0x21;
// LINE 547:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+4], 0x23;
// LINE 548:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax], 0;
// LINE 549:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+8], 0x27;
// LINE 550:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 551:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0xC], 0x41;
// LINE 553:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+8], 0x21;
// LINE 554:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0xC], 0x64;
// LINE 555:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 556:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x18], 0x27;
// LINE 557:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x14], 0x41;
// LINE 558:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x1C], 0x81;
// LINE 560:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x10], 0x21;
// LINE 561:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x14], 0xA4;
// LINE 562:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 563:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x28], 0x27;
// LINE 564:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x24], 0x81;
// LINE 565:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x2C], 0xC0;
// LINE 567:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x18], 0x21;
// LINE 568:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x1C], 0xE3;
// LINE 569:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x30], 0;
// LINE 570:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x38], 0x27;
// LINE 571:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x34], 0xC0;
// LINE 572:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x3C], 0xFE;
// LINE 574:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x20], 0x21;
// LINE 575:
	__asm        mov    eax, ptDestinationArray;
	__asm        mov    dword ptr [eax+0x24], 0x121;
// LINE 576:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 577:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x48], 0x27;
// LINE 578:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x44], 0xFE;
// LINE 579:
	__asm        mov    eax, rectSourceArray;
	__asm        mov    dword ptr [eax+0x4C], 0x129;
// LINE 581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x27;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x27;
// LINE 583:
	__asm        jmp    near ptr 0x0049DA0D;
}

// FUNCTION: COPTER_D 0x0049da14
void CopterPlayMenu::CopterPlayMenu(struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::UserMenuWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5914C8;
// LINE 605:
	__asm        jmp    near ptr 0x0049DA64;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049da6e
void CopterPlayMenu::~CopterPlayMenu() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5914C8;
// LINE 613:
	__asm        mov    ecx, this;
	__asm        call   CopterPlayMenu::DestroyImage;
// LINE 614:
	__asm        jmp    near ptr 0x0049DA90;

	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::~UserMenuWindow;
}

// FUNCTION: COPTER_D 0x0049da9d
int32_t CopterPlayMenu::Initialize() {
// LINE 622:
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::Initialize;
// LINE 623:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0049DAC3;
// LINE 624:
}

// FUNCTION: COPTER_D 0x0049dac8
int32_t CopterPlayMenu::CreateImage(int32_t __formal) {
	class basic_string<char> sImagePath;
	class basic_string<char> sImageFile;

// LINE 631:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049DB1F;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T69;
_T62:
	__asm        mov    sImageFile.reference, 0;
_T69:
	__asm        mov    sImageFile.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049DB3D;
// LINE 632:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0049DB82;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tcc;
_Tc5:
	__asm        mov    sImagePath.reference, 0;
_Tcc:
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0049DBA0;
// LINE 634:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 635:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        jne    _T28c;

	__asm        mov    eax, SZ_PLAY_RATCHET_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
// LINE 636:
	__asm        jmp    near ptr 0x0049DBCD;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0049DBEB;
// LINE 637:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0049DC06;
// LINE 638:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T257;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T17a;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T17a:
	__asm        jmp    near ptr 0x0049DC47;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049DC5F;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T201;

	__asm        jmp    near ptr 0x0049DC71;

	__asm        jmp    near ptr 0x0049DC76;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1cd;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T1d9;

	__asm        jmp    _T1d9;
_T1cd:
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T201;
_T201:
	__asm        jmp    near ptr 0x0049DCCE;

	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0049DCD7;

	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0049DCE2;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049DCFD;

	__asm        jmp    near ptr 0x0049DD02;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    _T267;
_T257:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 639:
_T267:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+8];
// LINE 641:
_T28c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        jne    _T413;

	__asm        mov    eax, SZ_PLAY_BACKGROUND_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x24], eax;
// LINE 642:
	__asm        jmp    near ptr 0x0049DD74;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0049DD92;
// LINE 643:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0049DDAD;
// LINE 644:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T403;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T327;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T327:
	__asm        jmp    near ptr 0x0049DDF4;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0049DE0C;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T39b;

	__asm        jmp    near ptr 0x0049DE1E;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T39b;
_T39b:
	__asm        jmp    near ptr 0x0049DE68;

	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0049DE74;

	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0049DE85;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0049DEA9;

	__asm        jmp    near ptr 0x0049DEAE;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    _T413;
_T403:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 646:
_T413:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T49d;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T49d;

	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T47d;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T47d:
	__asm        jmp    near ptr 0x0049DF4A;

	__asm        jmp    near ptr 0x0049DF4F;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049DF60;

	__asm        jmp    _T49d;
_T49d:
	__asm        jmp    near ptr 0x0049DF6A;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T4c4;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4c4:
	__asm        jmp    near ptr 0x0049DF91;

	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T54c;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T54c;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T52c;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T52c:
	__asm        jmp    near ptr 0x0049DFF9;

	__asm        jmp    near ptr 0x0049DFFE;

	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E00F;

	__asm        jmp    _T54c;
_T54c:
	__asm        jmp    near ptr 0x0049E019;

	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T573;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T573:
	__asm        jmp    near ptr 0x0049E040;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0049E048;
// LINE 647:
}

// FUNCTION: COPTER_D 0x0049e04f
void CopterPlayMenu::DestroyImage() {
// LINE 653:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        je     _T63;
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E0A0;

	__asm        jmp    _T56;
// LINE 655:
_T56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
// LINE 657:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        je     _Tba;
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049E0F7;

	__asm        jmp    _Tad;
// LINE 659:
_Tad:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
// LINE 661:
_Tba:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 662:
	__asm        jmp    near ptr 0x0049E116;
}

// FUNCTION: COPTER_D 0x0049e11b
int32_t CopterPlayMenu::DrawSelf() {
// LINE 668:
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::DrawSelf;
// LINE 669:
	__asm        mov    ecx, this;
	__asm        call   CopterPlayMenu::DrawRatchet;
// LINE 670:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0049E141;
// LINE 671:
}

// FUNCTION: COPTER_D 0x0049e146
void CopterPlayMenu::DrawRatchet() {
	class MPoint ptDestinationRatchet;
	class MPoint ptDestinationBackground;

// LINE 678:
	__asm        jmp    near ptr 0x0049E157;

	__asm        mov    ptDestinationBackground.x, 0x1E;
	__asm        mov    ptDestinationBackground.y, 0x23;
	__asm        jmp    near ptr 0x0049E16A;
// LINE 679:
	__asm        jmp    near ptr 0x0049E16F;

	__asm        jmp    near ptr 0x0049E174;
// LINE 682:
	__asm        jmp    near ptr 0x0049E179;

	__asm        jmp    near ptr 0x0049E17E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationBackground.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationBackground.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0xC];
// LINE 684:
	__asm        lea    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterPlayMenu::GetCoordinatesForRatchet;
// LINE 686:
	__asm        jmp    near ptr 0x0049E1D3;

	__asm        jmp    near ptr 0x0049E1D8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationRatchet.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0xC];
// LINE 687:
	__asm        jmp    near ptr 0x0049E221;
}

// FUNCTION: COPTER_D 0x0049e226
void CopterPlayMenu::GetCoordinatesForRatchet(class MPoint& ptDestination) {
// LINE 694:
	__asm        mov    eax, ptDestination;
	__asm        mov    dword ptr [eax], 0x1D;
// LINE 695:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T42;
// LINE 696:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x2D;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 697:
	__asm        jmp    _T5a;
// LINE 698:
_T42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x55;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 699:
_T5a:
	__asm        jmp    near ptr 0x0049E285;
}



// Contribution: 1:0009d290-0009d2ae Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2b0-0009d2d7 Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2e0-0009d318 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e2e0
// UserMenuWindow::`scalar deleting destructor'



// Contribution: 1:0009d320-0009d359 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e320
int32_t UserMenuWindow::GetLineCount() {
// LINE 219:
	__asm        jmp    near ptr 0x0049E331;

	__asm        jmp    near ptr 0x0049E336;

	__asm        jmp    near ptr 0x0049E33B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC8];
	__asm        sar    eax, 2;
	__asm        jmp    near ptr 0x0049E355;
// LINE 220:
}



// Contribution: 1:0009d360-0009d398 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e360
// CopterMainMenu::`scalar deleting destructor'



// Contribution: 1:0009d3a0-0009d3d8 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e3a0
// CopterPlayMenu::`scalar deleting destructor'



// Contribution: 1:0009d3e0-0009d448 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0049e3e0
// allocate



// Contribution: 2:000022f8-000023df Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005912f8
// GLOBAL: COPTER_D 0x005912f8
// ??_7UserMenuWindow@@6B@


// Contribution: 2:000023e0-000024c7 Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005913e0
// GLOBAL: COPTER_D 0x005913e0
// ??_7CopterMainMenu@@6B@


// Contribution: 2:000024c8-000025af Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005914c8
// GLOBAL: COPTER_D 0x005914c8
// ??_7CopterPlayMenu@@6B@


// Contribution: 3:000032d0-0000333e Module: 13, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a2d0
char * SZ_MENU_SELECTION_SOUND = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2d4
char * SZ_MAIN_PART_1_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2d8
char * SZ_MAIN_PART_2_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2dc
char * SZ_MAIN_LIGHT_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e0
char * SZ_MAIN_RATCHET_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e4
char * SZ_PLAY_RATCHET_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e8
char * SZ_PLAY_BACKGROUND_IMAGE_FILE_NAME = { 0 /* todo */ };

