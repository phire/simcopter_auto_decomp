// Module: Menus.obj
// Source: C:\Copter\source\sparkal\Menus.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ class UserMenuWindow (forward reference);
// VTABLE: COPTER_D 0x005912f8
class UserMenuWindow : public GraphicWindow
{ // packed(0x152 bytes) TI: 0x45d0
public:
	void UserMenuWindow(/*packed*/ struct UserMenuWindowDescription&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t SetSelectionIndex(int32_t); // vtable+0xc4
	virtual int32_t SetSelectionValue(int32_t); // vtable+0xc8
	virtual int32_t GetSelectionIndex(); // vtable+0xcc
	virtual int32_t GetSelectionValue(); // vtable+0xd0
	virtual int32_t GetLineCount(); // vtable+0xd4
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t ExecuteSelection(int32_t); // vtable+0xd8
protected:
	virtual void DrawSelectionIndicators(); // vtable+0xdc
	virtual int32_t DoCursorHitTest(int32_t&, long, long); // vtable+0xe0
	virtual int32_t GetPositionOfNthItem(int32_t, /*packed*/ class MPoint&); // vtable+0xe4
	/*+0x74*/  /*packed*/ struct UserMenuWindowDescription myUserMenuWindowDescription; // 0x54 bytes
	/*+0xc8*/  /*packed*/ class vector<TextWindow *> myTextWindowPtrArray; // 0xc bytes
	/*+0xd4*/  int32_t nCurrentSelection;
	/*+0xd8*/  /*packed*/ class DigitalSound soundSelectionChange; // 0x7a bytes
};

// Type: void;

// Type: /*packed*/ struct UserMenuWindowDescription (forward reference);
struct UserMenuWindowDescription{ // packed(0x54 bytes) TI: 0x101b
	/*+0x0*/   /*packed*/ class basic_string<char> sImageFileName; // 0x8 bytes
	/*+0x8*/   int32_t nTransparentIndex;
	/*+0xc*/   /*packed*/ class MRect rectPosition; // 0x10 bytes
	/*+0x1c*/  long lMenuStringResourceIndex;
	/*+0x20*/  long lMenuStringResourceCount;
	/*+0x24*/  long lSelectionBase;
	/*+0x28*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x2c*/  /*packed*/ struct SparkalColor colorFontHighlighted;
	/*+0x30*/  /*packed*/ class MPoint ptPositionFirstItem; // 0x8 bytes
	/*+0x38*/  int32_t nSizeItemFont;
	/*+0x3c*/  int32_t nLineHeight;
	/*+0x40*/  long lTitleStringResourceIndex;
	/*+0x44*/  int32_t bTitleCentered;
	/*+0x48*/  /*packed*/ class MPoint ptTitlePosition; // 0x8 bytes
	/*+0x50*/  int32_t nSizeTitleFont;
};

// Type: int32_t;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class TextWindow (forward reference);
// VTABLE: COPTER_D 0x00591a90
class TextWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x4411
public:
	void TextWindow(/*packed*/ class MRect&, int32_t, const /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf() /* override */;
	virtual void SetWindowTitle(const /*packed*/ class basic_string<char>&); // vtable+0xc4
	virtual void SetWindowTitle(int32_t); // vtable+0xc8
	virtual void SetFontCharacteristics(long, long, long); // vtable+0xcc
	virtual void SetTextDrawStyle(unsigned long); // vtable+0xd0
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xd4
	virtual void SetBackgroundDrawing(int32_t); // vtable+0xd8
	virtual void LoadStrings(); // vtable+0xdc
	virtual void FitWindowToText(); // vtable+0xe0
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xe4
protected:
	/*+0x74*/  int32_t bDrawOpaqueBackground;
	/*+0x78*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x7c*/  int32_t nBackgroundPaletteIndex;
	/*+0x80*/  int32_t nWindowTitleTextID;
	/*+0x84*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa0*/  unsigned long nTextDrawStyle;
};

// Type: char;

// Type: long;

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: unsigned long;

// Type: /*packed*/ class CopterMainMenu (forward reference);
// VTABLE: COPTER_D 0x005913e0
class CopterMainMenu : public UserMenuWindow
{ // packed(0x162 bytes) TI: 0x45eb
public:
	void CopterMainMenu(/*packed*/ struct UserMenuWindowDescription&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~CopterMainMenu() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
protected:
	void DrawRatchetAndLights();
	void GetCoordinatesForLights(/*packed*/ class MPoint*, /*packed*/ class MRect*);
	void GetCoordinatesForRatchets(/*packed*/ class MPoint*, /*packed*/ class MRect*);
	/*+0x152*/ /*unpacked*/ class GraphicWindow *mySiblingWindows[2]; // 0x8 bytes
	/*+0x15a*/ /*unpacked*/ class CBackBuffer *myRatchetImage;
	/*+0x15e*/ /*unpacked*/ class CBackBuffer *myLightImage;
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class CopterPlayMenu (forward reference);
// VTABLE: COPTER_D 0x005914c8
class CopterPlayMenu : public UserMenuWindow
{ // packed(0x15a bytes) TI: 0x45f3
public:
	void CopterPlayMenu(/*packed*/ struct UserMenuWindowDescription&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~CopterPlayMenu() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
protected:
	void GetCoordinatesForRatchet(/*packed*/ class MPoint&);
	void DrawRatchet();
	/*+0x152*/ /*packed*/ class CBackBuffer *myRatchetImage;
	/*+0x156*/ /*packed*/ class CBackBuffer *myBackgroundImage;
};

// Type: /*packed*/ class MPoint;
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: uint32_t;

// Type: /*packed*/ class UserMenuWindow;
// VTABLE: COPTER_D 0x005912f8
class UserMenuWindow : public GraphicWindow
{ // packed(0x152 bytes) TI: 0x45d0
public:
	void UserMenuWindow(/*packed*/ struct UserMenuWindowDescription&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t SetSelectionIndex(int32_t); // vtable+0xc4
	virtual int32_t SetSelectionValue(int32_t); // vtable+0xc8
	virtual int32_t GetSelectionIndex(); // vtable+0xcc
	virtual int32_t GetSelectionValue(); // vtable+0xd0
	virtual int32_t GetLineCount(); // vtable+0xd4
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t ExecuteSelection(int32_t); // vtable+0xd8
protected:
	virtual void DrawSelectionIndicators(); // vtable+0xdc
	virtual int32_t DoCursorHitTest(int32_t&, long, long); // vtable+0xe0
	virtual int32_t GetPositionOfNthItem(int32_t, /*packed*/ class MPoint&); // vtable+0xe4
	/*+0x74*/  /*packed*/ struct UserMenuWindowDescription myUserMenuWindowDescription; // 0x54 bytes
	/*+0xc8*/  /*packed*/ class vector<TextWindow *> myTextWindowPtrArray; // 0xc bytes
	/*+0xd4*/  int32_t nCurrentSelection;
	/*+0xd8*/  /*packed*/ class DigitalSound soundSelectionChange; // 0x7a bytes
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:00099f80-0009d28b Module: 13, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0049af80
void UserMenuWindow::UserMenuWindow() {

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T67;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T59;
_T59:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T71;
_T67:
	this->myUserMenuWindowDescription.sImageFileName.reference = 0x0;
_T71:
	this->myUserMenuWindowDescription.sImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T85;
_T85:
	__asm        jmp    _T8a;
_T8a:
	__asm        jmp    _T8f;
_T8f:
	__asm        jmp    _T94;
_T94:
	__asm        jmp    _T99;
_T99:
	__asm        jmp    _T9e;
_T9e:
	__asm        jmp    _Ta3;
_Ta3:
	__asm        jmp    _Ta8;
_Ta8:
	__asm        jmp    _Tad;
_Tad:
	this->myTextWindowPtrArray.start = 0x0;
	this->myTextWindowPtrArray.finish = 0x0;
	this->myTextWindowPtrArray.end_of_storage = 0x0;
	__asm        jmp    _Td9;
_Td9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T18f;

	__asm        push   0;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T112;
_T112:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T16c;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T167;
_T167:
	__asm        jmp    _T175;
_T16c:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T175:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T184;
_T184:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T196;
_T18f:
	__asm        mov    dword ptr [ebp-4], 0;
_T196:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T1a2;
_T1a2:
	__asm        push   2;
	__asm        lea    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T239;

	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T239;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T219:
	__asm        jmp    _T21e;
_T21e:
	__asm        jmp    _T223;
_T223:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T234;
_T234:
	__asm        jmp    _T239;
_T239:
	__asm        jmp    _T23e;
_T23e:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T260;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T260:
	__asm        jmp    _T265;
_T265:
	this-><UserMenuWindow+0x00> = 0x5912f8;
// LINE 40:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049b1fb
void UserMenuWindow::UserMenuWindow(/*packed*/ struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        lea    ecx, [ebp-0x10];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T57;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T57:
	__asm        jmp    _T5c;
_T5c:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T79;
_T79:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf1;

	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _T93;
_T93:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb8;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _Tc4;

	__asm        jmp    _Tc4;
_Tb8:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _Tc4;
_Tc4:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf1;
_Tf1:
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    byte ptr [ebp-0x1C], 0;
	__asm        jmp    _Tff;
_Tff:
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T10a;
_T10a:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, newUserMenuWindowDescription;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], al;
	__asm        jmp    _T12a;
_T12a:
	__asm        jmp    _T12f;
_T12f:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        jmp    _T15d;
_T15d:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T19f;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T190;
_T190:
	exit(0x1);
	__asm        jmp    _T19f;
_T19f:
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T1ca;

	__asm        jmp    _T1b9;
_T1b9:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1d1;
_T1ca:
	__asm        mov    dword ptr [ebp-0x38], 0xFFFFFFFF;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T217;

	__asm        jmp    _T1ed;
_T1ed:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T217;

	this->myUserMenuWindowDescription.sImageFileName.reference = newUserMenuWindowDescription.sImageFileName.reference;
	this->myUserMenuWindowDescription.sImageFileName.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T2f9;
_T217:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2ef;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2c9;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T269;
_T269:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T28e;

	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T29a;

	__asm        jmp    _T29a;
_T28e:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T29a;
_T29a:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2d2;
_T2c9:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
_T2d2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T2e1;
_T2e1:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T2f9;
_T2ef:
	this->myUserMenuWindowDescription.sImageFileName.reference = 0x0;
_T2f9:
	this->myUserMenuWindowDescription.sImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T308;
_T308:
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xA4;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        add    eax, 0x48;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0xBC;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC4], eax;
	__asm        jmp    _T406;
_T406:
	this->myTextWindowPtrArray.start = 0x0;
	this->myTextWindowPtrArray.finish = 0x0;
	this->myTextWindowPtrArray.end_of_storage = 0x0;
	__asm        jmp    _T432;
_T432:
	this->nCurrentSelection = 0x0;
	(this + 0xd8)->DigitalSound::DigitalSound();
	this-><UserMenuWindow+0x00> = 0x5912f8;
// LINE 56:
	GraphicWindow::MakeModal(this);
// LINE 57:
	GraphicWindow::MakeFocus(this);
// LINE 58:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049b678
void UserMenuWindow::~UserMenuWindow() {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;


	this-><UserMenuWindow+0x00> = 0x5912f8;
// LINE 68:
	__asm        jmp    _T1a;
_T1a:
	__asm        jmp    _T1f;
_T1f:
	__asm        jmp    _T24;
_T24:
	iEnd = ((this->myTextWindowPtrArray.finish - this->myTextWindowPtrArray.start) >> 0x2);
// LINE 70:
_FOR_48:
	for (i = 0x0; (iEnd > i); i++) {
		// LINE 71:
			__asm        jmp    _T5c;
		_T5c:
			__asm        jmp    _T61;
		_T61:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    [ebp-0xC], eax;
			__asm        cmp    dword ptr [ebp-0xC], 0;
			__asm        je     _T98;

			__asm        push   1;
			__asm        mov    eax, [ebp-0xC];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0xC];
			__asm        call   dword ptr [eax+0xAC];
			__asm        jmp    _T98;
		_T98:
	}
// LINE 73:
_T9d:
	this->GraphicWindow::DestroyImage();
// LINE 74:
	__asm        jmp    _Taa;
_Taa:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD8;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x30], eax;
__WHILE_c4:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0xCC], ecx;
	__asm        je     _Te4;

	__asm        jmp    _Tdb;
_Tdb:
	__asm        add    dword ptr [ebp-0x30], 4;
	__asm        jmp    __WHILE_c4;
_Tdb:
	__asm        add    dword ptr [ebp-0x30], 4;
	__asm        jmp    __WHILE_c4;
_Te4:
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T106;
_T106:
	__asm        jmp    _T10b;
_T10b:
	__asm        jmp    _T110;
_T110:
	__asm        jmp    _T115;
_T115:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1a1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1a1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T181;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
_T181:
	__asm        jmp    _T186;
_T186:
	__asm        jmp    _T18b;
_T18b:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T19c;
_T19c:
	__asm        jmp    _T1a1;
_T1a1:
	__asm        jmp    _T1a6;
_T1a6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1ce:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x0049b858
int32_t UserMenuWindow::Initialize() {
	/*bp-0x104*/ char szFullSoundPath[260]; // 0x104 bytes
	/*bp-0x108*/ int32_t i;
	/*bp-0x10c*/ /*packed*/ class TextWindow *tempTextWindow;
	/*bp-0x11c*/ /*packed*/ class MRect rectTextWindow; // 0x10 bytes

// LINE 89:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 93:
_T1c:
	GetPathForFile(szFullSoundPath[0], SZ_MENU_SELECTION_SOUND, 0x0, 0x2);
// LINE 94:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _T11e;

	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6f;
_T6f:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tef;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        lea    eax, szFullSoundPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tea;
_Tea:
	__asm        jmp    _Tfb;
_Tef:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax], 0;
_Tfb:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T10d;
_T10d:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    _T128;
_T11e:
	__asm        mov    dword ptr [ebp-0x120], 0;
_T128:
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        jmp    _T137;
_T137:
	__asm        push   2;
	__asm        lea    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x2C];
	__asm        mov    eax, [ebp-0x120];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x120];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T20e;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T20e;

	__asm        mov    eax, [ebp-0x138];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1eb;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax], 0;
_T1eb:
	__asm        jmp    _T1f0;
_T1f0:
	__asm        jmp    _T1f5;
_T1f5:
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T209;
_T209:
	__asm        jmp    _T20e;
_T20e:
	__asm        jmp    _T213;
_T213:
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T247;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T247:
	__asm        jmp    _T24c;
// LINE 95:
_T24c:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x30];
// LINE 98:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0xFFFFFFFF;
	__asm        je     _T401;
// LINE 99:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T2e3;
// LINE 100:
	rectTextWindow.left = 0x0;
// LINE 101:
	__asm        jmp    _T29c;
_T29c:
	rectTextWindow.right = (this-><UserMenuWindow+0x18> - this-><UserMenuWindow+0x10>);
// LINE 102:
	rectTextWindow.top = this->myUserMenuWindowDescription.ptTitlePosition.y;
// LINE 103:
	rectTextWindow.bottom = (this->myUserMenuWindowDescription.nSizeTitleFont + rectTextWindow.top);
// LINE 105:
	__asm        jmp    _T33c;
// LINE 106:
_T2e3:
	rectTextWindow.left = this->myUserMenuWindowDescription.ptTitlePosition.x;
// LINE 107:
	__asm        jmp    _T2fa;
_T2fa:
	rectTextWindow.right = (this-><UserMenuWindow+0x18> - this-><UserMenuWindow+0x10>);
// LINE 108:
	rectTextWindow.top = this->myUserMenuWindowDescription.ptTitlePosition.y;
// LINE 109:
	rectTextWindow.bottom = (this->myUserMenuWindowDescription.nSizeTitleFont + rectTextWindow.top);
// LINE 112:
_T33c:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _T398;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, rectTextWindow.left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x128];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T3a2;
_T398:
	tempTextWindow = 0x0;
// LINE 113:
_T3a2:
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+4];
// LINE 114:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T401;
// LINE 116:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 119:
_T401:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0xFFFFFFFF;
	__asm        je     _Tb28;
// LINE 121:
_FOR_423:
	for (i = 0x0; (this->myUserMenuWindowDescription.lMenuStringResourceCount > i); i++) {
		// LINE 125:
			rectTextWindow.left = this->myUserMenuWindowDescription.ptPositionFirstItem.x;
		// LINE 126:
			__asm        jmp    _T458;
		_T458:
			rectTextWindow.right = ((this-><UserMenuWindow+0x18> - this-><UserMenuWindow+0x10>) - rectTextWindow.left);
		// LINE 128:
			rectTextWindow.top = ((this->myUserMenuWindowDescription.nLineHeight * i) + this->myUserMenuWindowDescription.ptPositionFirstItem.y);
		// LINE 129:
			__asm        jmp    _T4a0;
		_T4a0:
			rectTextWindow.bottom = ((this-><UserMenuWindow+0x1c> - this-><UserMenuWindow+0x14>) - rectTextWindow.top);
		// LINE 138:
			__asm        push   0xA4;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x12C], eax;
			__asm        cmp    dword ptr [ebp-0x12C], 0;
			__asm        je     _T525;

			__asm        push   0;
			__asm        mov    eax, this;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x90];
			__asm        add    eax, i;
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        push   eax;
			__asm        lea    eax, rectTextWindow.left;
			__asm        push   eax;
			__asm        mov    ecx, [ebp-0x12C];
			__asm        call   TextWindow::TextWindow;
			__asm        mov    tempTextWindow, eax;
			__asm        jmp    _T52f;
		_T525:
			tempTextWindow = 0x0;
		// LINE 139:
		_T52f:
			__asm        mov    eax, tempTextWindow;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, tempTextWindow;
			__asm        call   dword ptr [eax+4];
		// LINE 140:
			__asm        push   0;
			__asm        push   0;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xAC];
			__asm        push   eax;
			__asm        mov    eax, tempTextWindow;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, tempTextWindow;
			__asm        call   dword ptr [eax+0xCC];
		// LINE 141:
			__asm        mov    eax, this;
			__asm        mov    ecx, i;
			__asm        cmp    [eax+0xD4], ecx;
			__asm        jne    _T5a2;
		// LINE 142:
			__asm        mov    eax, this;
			__asm        add    eax, 0xA0;
			__asm        push   eax;
			__asm        mov    eax, tempTextWindow;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, tempTextWindow;
			__asm        call   dword ptr [eax+0xD4];
		// LINE 143:
			__asm        jmp    _T5c2;
		// LINE 144:
		_T5a2:
			__asm        mov    eax, this;
			__asm        add    eax, 0x9C;
			__asm        push   eax;
			__asm        mov    eax, tempTextWindow;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, tempTextWindow;
			__asm        call   dword ptr [eax+0xD4];
		// LINE 145:
		_T5c2:
			__asm        mov    eax, tempTextWindow;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, tempTextWindow;
			__asm        call   dword ptr [eax+0xE0];
		// LINE 146:
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xD0];
			__asm        cmp    [eax+0xCC], ecx;
			__asm        je     _T64e;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    [ebp-0x158], eax;
			__asm        mov    eax, [ebp-0x158];
			__asm        mov    [ebp-0x154], eax;
			__asm        jmp    _T617;
		_T617:
			__asm        cmp    dword ptr [ebp-0x154], 0;
			__asm        je     _T637;

			__asm        mov    eax, tempTextWindow;
			__asm        mov    ecx, [ebp-0x154];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T637;
		_T637:
			__asm        jmp    _T63c;
		_T63c:
			this->myTextWindowPtrArray.finish += 0x4;
			__asm        jmp    _Tb1e;
		_T64e:
			__asm        jmp    _T653;
		_T653:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    [ebp-0x1C8], eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xD0];
			__asm        cmp    [eax+0xCC], ecx;
			__asm        je     _T763;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        sub    eax, 4;
			__asm        mov    [ebp-0x18C], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    [ebp-0x190], eax;
			__asm        mov    eax, [ebp-0x190];
			__asm        mov    [ebp-0x188], eax;
			__asm        jmp    _T6bb;
		_T6bb:
			__asm        cmp    dword ptr [ebp-0x188], 0;
			__asm        je     _T6dd;

			__asm        mov    eax, [ebp-0x18C];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x188];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T6dd;
		_T6dd:
			__asm        jmp    _T6e2;
		_T6e2:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    [ebp-0x180], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        sub    eax, 4;
			__asm        mov    [ebp-0x184], eax;
		__WHILE_709:
			__asm        mov    eax, [ebp-0x184];
			__asm        cmp    [ebp-0x1C8], eax;
			__asm        je     _T73e;

			__asm        sub    dword ptr [ebp-0x180], 4;
			__asm        sub    dword ptr [ebp-0x184], 4;
			__asm        mov    eax, [ebp-0x184];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x180];
			__asm        mov    [ecx], eax;
			__asm        jmp    __WHILE_709;

			__asm        sub    dword ptr [ebp-0x180], 4;
			__asm        sub    dword ptr [ebp-0x184], 4;
			__asm        mov    eax, [ebp-0x184];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x180];
			__asm        mov    [ecx], eax;
			__asm        jmp    __WHILE_709;
		_T73e:
			__asm        jmp    _T743;
		_T743:
			__asm        mov    eax, tempTextWindow;
			__asm        mov    ecx, [ebp-0x1C8];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax+0xCC], 4;
			__asm        jmp    _Tb19;
		_T763:
			__asm        jmp    _T768;
		_T768:
			__asm        jmp    _T76d;
		_T76d:
			__asm        jmp    _T772;
		_T772:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0xC8];
			__asm        sar    eax, 2;
			__asm        test   eax, eax;
			__asm        je     _T7cc;

			__asm        jmp    _T79a;
		_T79a:
			__asm        jmp    _T79f;
		_T79f:
			__asm        jmp    _T7a4;
		_T7a4:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0xC8];
			__asm        sar    eax, 2;
			__asm        add    eax, eax;
			__asm        mov    [ebp-0x160], eax;
			__asm        jmp    _T843;
		_T7cc:
			__asm        mov    dword ptr [ebp-0x16C], 0x400;
			__asm        lea    eax, [ebp-0x16C];
			__asm        mov    [ebp-0x174], eax;
			__asm        mov    dword ptr [ebp-0x170], 1;
			__asm        lea    eax, [ebp-0x170];
			__asm        mov    [ebp-0x178], eax;
			__asm        mov    eax, [ebp-0x178];
			__asm        mov    ecx, [ebp-0x174];
			__asm        mov    ecx, [ecx];
			__asm        cmp    [eax], ecx;
			__asm        jb     _T81f;

			__asm        mov    eax, [ebp-0x178];
			__asm        mov    [ebp-0x17C], eax;
			__asm        jmp    _T82b;
		_T81f:
			__asm        mov    eax, [ebp-0x174];
			__asm        mov    [ebp-0x17C], eax;
		_T82b:
			__asm        jmp    _T830;
		_T830:
			__asm        mov    eax, [ebp-0x17C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x160], eax;
			__asm        jmp    _T843;
		_T843:
			__asm        jmp    _T848;
		_T848:
			__asm        push   0;
			__asm        mov    eax, [ebp-0x160];
			__asm        push   eax;
			__asm        call   allocate;
			__asm        add    esp, 8;
			__asm        mov    [ebp-0x15C], eax;
			__asm        jmp    _T864;
		_T864:
			__asm        mov    eax, [ebp-0x15C];
			__asm        mov    [ebp-0x1A8], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    [ebp-0x1AC], eax;
		__WHILE_882:
			__asm        mov    eax, [ebp-0x1AC];
			__asm        cmp    [ebp-0x1C8], eax;
			__asm        je     _T8f7;

			__asm        mov    eax, [ebp-0x1AC];
			__asm        mov    [ebp-0x19C], eax;
			__asm        add    dword ptr [ebp-0x1AC], 4;
			__asm        mov    eax, [ebp-0x1A8];
			__asm        mov    [ebp-0x1A0], eax;
			__asm        add    dword ptr [ebp-0x1A8], 4;
			__asm        mov    eax, [ebp-0x1A0];
			__asm        mov    [ebp-0x1A4], eax;
			__asm        jmp    _T8cb;
		_T8cb:
			__asm        cmp    dword ptr [ebp-0x1A4], 0;
			__asm        je     _T8ed;

			__asm        mov    eax, [ebp-0x19C];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x1A4];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T8ed;
		_T8ed:
			__asm        jmp    _T8f2;
		_T8f2:
			__asm        jmp    __WHILE_882;
		_T8f2:
			__asm        jmp    __WHILE_882;
		_T8f7:
			__asm        jmp    _T8fc;
		_T8fc:
			__asm        jmp    _T901;
		_T901:
			__asm        mov    eax, [ebp-0x1C8];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0xC8];
			__asm        and    eax, 0xFFFFFFFC;
			__asm        sar    eax, 0;
			__asm        mov    ecx, eax;
			__asm        add    eax, eax;
			__asm        sub    eax, ecx;
			__asm        add    eax, [ebp-0x15C];
			__asm        mov    [ebp-0x198], eax;
			__asm        mov    eax, [ebp-0x198];
			__asm        mov    [ebp-0x194], eax;
			__asm        jmp    _T93c;
		_T93c:
			__asm        cmp    dword ptr [ebp-0x194], 0;
			__asm        je     _T95c;

			__asm        mov    eax, tempTextWindow;
			__asm        mov    ecx, [ebp-0x194];
			__asm        mov    [ecx], eax;
			__asm        jmp    _T95c;
		_T95c:
			__asm        jmp    _T961;
		_T961:
			__asm        jmp    _T966;
		_T966:
			__asm        jmp    _T96b;
		_T96b:
			__asm        mov    eax, [ebp-0x1C8];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0xC8];
			__asm        and    eax, 0xFFFFFFFC;
			__asm        sar    eax, 0;
			__asm        mov    ecx, eax;
			__asm        add    eax, eax;
			__asm        sub    eax, ecx;
			__asm        add    eax, [ebp-0x15C];
			__asm        add    eax, 4;
			__asm        mov    [ebp-0x1BC], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    [ebp-0x1C0], eax;
			__asm        mov    eax, [ebp-0x1C8];
			__asm        mov    [ebp-0x1C4], eax;
		__WHILE_9b6:
			__asm        mov    eax, [ebp-0x1C0];
			__asm        cmp    [ebp-0x1C4], eax;
			__asm        je     _Ta2b;

			__asm        mov    eax, [ebp-0x1C4];
			__asm        mov    [ebp-0x1B0], eax;
			__asm        add    dword ptr [ebp-0x1C4], 4;
			__asm        mov    eax, [ebp-0x1BC];
			__asm        mov    [ebp-0x1B4], eax;
			__asm        add    dword ptr [ebp-0x1BC], 4;
			__asm        mov    eax, [ebp-0x1B4];
			__asm        mov    [ebp-0x1B8], eax;
			__asm        jmp    _T9ff;
		_T9ff:
			__asm        cmp    dword ptr [ebp-0x1B8], 0;
			__asm        je     _Ta21;

			__asm        mov    eax, [ebp-0x1B0];
			__asm        mov    eax, [eax];
			__asm        mov    ecx, [ebp-0x1B8];
			__asm        mov    [ecx], eax;
			__asm        jmp    _Ta21;
		_Ta21:
			__asm        jmp    _Ta26;
		_Ta26:
			__asm        jmp    __WHILE_9b6;
		_Ta26:
			__asm        jmp    __WHILE_9b6;
		_Ta2b:
			__asm        jmp    _Ta30;
		_Ta30:
			__asm        jmp    _Ta35;
		_Ta35:
			__asm        jmp    _Ta3a;
		_Ta3a:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    [ebp-0x168], eax;
		__WHILE_a4c:
			__asm        mov    eax, this;
			__asm        mov    ecx, [ebp-0x168];
			__asm        cmp    [eax+0xCC], ecx;
			__asm        je     _Ta75;

			__asm        jmp    _Ta69;
		_Ta69:
			__asm        add    dword ptr [ebp-0x168], 4;
			__asm        jmp    __WHILE_a4c;
		_Ta69:
			__asm        add    dword ptr [ebp-0x168], 4;
			__asm        jmp    __WHILE_a4c;
		_Ta75:
			__asm        jmp    _Ta7a;
		_Ta7a:
			__asm        jmp    _Ta7f;
		_Ta7f:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    [ebp-0x164], eax;
			__asm        mov    eax, [ebp-0x164];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _Taa5;
		_Taa5:
			__asm        jmp    _Taaa;
		_Taaa:
			__asm        mov    eax, [ebp-0x160];
			__asm        shl    eax, 2;
			__asm        add    eax, [ebp-0x15C];
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0xD0], eax;
			__asm        jmp    _Taca;
		_Taca:
			__asm        jmp    _Tacf;
		_Tacf:
			__asm        jmp    _Tad4;
		_Tad4:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xCC];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0xC8];
			__asm        sar    eax, 2;
			__asm        shl    eax, 2;
			__asm        add    eax, [ebp-0x15C];
			__asm        add    eax, 4;
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0xCC], eax;
			__asm        mov    eax, [ebp-0x15C];
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0xC8], eax;
		_Tb19:
			__asm        jmp    _Tb1e;
		_Tb1e:
			__asm        jmp    _Tb23;
		// LINE 147:
		_Tb23:
	}
// LINE 149:
_Tb28:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 150:
	return 0x0;
// LINE 151:
}

// FUNCTION: COPTER_D 0x0049c3ad
int32_t UserMenuWindow::DrawSelf() {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 160:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	iEnd = ((this->myTextWindowPtrArray.finish - this->myTextWindowPtrArray.start) >> 0x2);
// LINE 171:
_FOR_3f:
	for (i = 0x0; (iEnd > i); i++) {
		// LINE 172:
			__asm        jmp    _T53;
		_T53:
			__asm        jmp    _T58;
		_T58:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    [ebp-0xC], eax;
			__asm        mov    eax, [ebp-0xC];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    ecx, [ebp-0xC];
			__asm        call   dword ptr [eax+0x18];
			__asm        jmp    _FOR_NEXT_3f;
	}
// LINE 173:
_T80:
	return 0x1;
// LINE 174:
}

// FUNCTION: COPTER_D 0x0049c43c
int32_t UserMenuWindow::SetSelectionIndex(int32_t nIndex) {
// LINE 182:
	__asm        cmp    nIndex, 0;
	__asm        jl     _T40;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        cmp    eax, nIndex;
	__asm        jl     _T40;

	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    _T47;
// LINE 183:
_T40:
	return 0x0;
// LINE 185:
_T47:
	__asm        jmp    _T4c;
_T4c:
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0xD4];
// LINE 186:
	__asm        jmp    _T8b;
_T8b:
	__asm        jmp    _T90;
_T90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, nIndex;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xD4];
// LINE 187:
	this->nCurrentSelection = nIndex;
// LINE 188:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 189:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+0x24];
// LINE 190:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD8];
	__asm        add    ecx, 0xD8;
	__asm        call   dword ptr [eax+8];
// LINE 191:
	return 0x1;
// LINE 192:
}

// FUNCTION: COPTER_D 0x0049c55b
int32_t UserMenuWindow::SetSelectionValue(int32_t nValue) {
// LINE 198:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x98];
	__asm        neg    eax;
	__asm        sub    nValue, eax;
// LINE 199:
	__asm        mov    eax, nValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
	__asm        jmp    __RETURN;
// LINE 200:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049c595
void UserMenuWindow::DrawSelectionIndicators() {
// LINE 212:
	return;
}

// FUNCTION: COPTER_D 0x0049c5ab
int32_t UserMenuWindow::DoCursorHitTest(int32_t& nHitIndex, long nCursorX, long nCursorY) {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 235:
_FOR_29:
	__asm        mov    i, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        mov    iEnd, eax;
	__asm        jmp    _FOR_COND_29;
_FOR_NEXT_29:
	for (; (iEnd > i); i++) {
		// LINE 236:
			__asm        jmp    _T3d;
		_T3d:
			__asm        jmp    _T42;
		_T42:
			__asm        jmp    _T47;
		_T47:
			__asm        mov    eax, nCursorX;
			__asm        mov    [ebp-0x10], eax;
			__asm        mov    eax, nCursorY;
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T58;
		_T58:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    ecx, [ebp-0x10];
			__asm        cmp    [eax+0x10], ecx;
			__asm        jg     _Tc9;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    ecx, [ebp-0xC];
			__asm        cmp    [eax+0x14], ecx;
			__asm        jg     _Tc9;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    ecx, [ebp-0x10];
			__asm        cmp    [eax+0x18], ecx;
			__asm        jle    _Tc9;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        mov    ecx, [ebp-0xC];
			__asm        cmp    [eax+0x1C], ecx;
			__asm        jle    _Tc9;

			__asm        jmp    _Tce;
		_Tc9:
			__asm        jmp    _Tef;
		_Tce:
			__asm        jmp    _Tdd;

			__asm        cmp    dword ptr [ebp-0x14], 0;
			__asm        je     _Tef;
		// LINE 237:
		_Tdd:
			nHitIndex. = i;
		// LINE 238:
			return 0x1;
		// LINE 240:
		_Tef:
	}
// LINE 241:
_Tf4:
	return 0x0;
// LINE 242:
}

// FUNCTION: COPTER_D 0x0049c6ad
int32_t UserMenuWindow::GetPositionOfNthItem(int32_t nIndex, /*packed*/ class MPoint& ptPosition) {
// LINE 249:
	ptPosition.x = this->myUserMenuWindowDescription.ptPositionFirstItem.x;
// LINE 251:
	ptPosition.y = ((this->myUserMenuWindowDescription.nLineHeight * nIndex) + this->myUserMenuWindowDescription.ptPositionFirstItem.y);
// LINE 252:
	return 0x1;
// LINE 253:
}

// FUNCTION: COPTER_D 0x0049c6f4
long UserMenuWindow::DoCharacter(long lCharacter) {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 264:
	i = 0x0;
// LINE 265:
	__asm        jmp    _T18;
_T18:
	__asm        jmp    _T1d;
_T1d:
	__asm        jmp    _T22;
_T22:
	iEnd = ((this->myTextWindowPtrArray.finish - this->myTextWindowPtrArray.start) >> 0x2);
// LINE 267:
__WHILE_3a:
	while ((iEnd > i)) {
		// LINE 268:
			__asm        jmp    _T4b;
		_T4b:
			__asm        jmp    _T50;
		_T50:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xC8];
			__asm        mov    ecx, i;
			__asm        mov    eax, [eax+ecx*4];
			__asm        add    eax, 8;
			__asm        mov    [ebp-0x3C], eax;
			__asm        jmp    _T6a;
		_T6a:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        ja     _Tac;

			__asm        push   0x59722C;
			__asm        mov    ecx, 0x638C00;
			__asm        call   ostream::operator<<;
			__asm        mov    [ebp-0x18], eax;
			__asm        mov    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        call   endl;
			__asm        add    esp, 4;
			__asm        jmp    _T9d;
		_T9d:
			exit(0x1);
			__asm        jmp    _Tac;
		_Tac:
			__asm        jmp    _Tb1;
		_Tb1:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 1;
			__asm        jbe    _T263;

			__asm        push   0x10;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    [ebp-0x10], eax;
			__asm        cmp    dword ptr [ebp-0x10], 0;
			__asm        je     _T1c2;

			__asm        jmp    _Tdd;
		_Tdd:
			__asm        jmp    _Te2;
		_Te2:
			__asm        jmp    _Te7;
		_Te7:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T10c;

			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _T118;

			__asm        jmp    _T118;
		_T10c:
			__asm        mov    dword ptr [ebp-0x14], 0;
			__asm        jmp    _T118;
		_T118:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x38], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        mov    ecx, [ebp-0x10];
			__asm        mov    [ecx+8], eax;
			__asm        mov    eax, [ebp-0x38];
			__asm        mov    ecx, [ebp-0x10];
			__asm        mov    [ecx+4], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        cmp    dword ptr [eax+8], 0;
			__asm        je     _T19f;

			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax+8];
			__asm        push   eax;
			__asm        call   operator new;
			__asm        add    esp, 4;
			__asm        mov    ecx, [ebp-0x10];
			__asm        mov    [ecx], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        cmp    dword ptr [eax+4], 0;
			__asm        je     _T19a;

			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x30];
			__asm        push   eax;
			__asm        call   memcpy;
			__asm        add    esp, 0xC;
			__asm        jmp    _T19a;
		_T19a:
			__asm        jmp    _T1a8;
		_T19f:
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    dword ptr [eax], 0;
		_T1a8:
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    dword ptr [eax+0xC], 1;
			__asm        jmp    _T1b7;
		_T1b7:
			__asm        mov    eax, [ebp-0x10];
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T1c9;
		_T1c2:
			__asm        mov    dword ptr [ebp-0xC], 0;
		_T1c9:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        dec    dword ptr [eax+0xC];
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        cmp    dword ptr [eax+0xC], 0;
			__asm        jne    _T255;

			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        mov    [ebp-0x1C], eax;
			__asm        cmp    dword ptr [ebp-0x1C], 0;
			__asm        je     _T255;

			__asm        mov    eax, [ebp-0x1C];
			__asm        cmp    dword ptr [eax+8], 0;
			__asm        je     _T235;

			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x24];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, [ebp-0x28];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    dword ptr [eax+8], 0;
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    dword ptr [eax], 0;
		_T235:
			__asm        jmp    _T23a;
		_T23a:
			__asm        jmp    _T23f;
		_T23f:
			__asm        mov    eax, [ebp-0x1C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T250;
		_T250:
			__asm        jmp    _T255;
		_T255:
			__asm        jmp    _T25a;
		_T25a:
			__asm        mov    eax, [ebp-0xC];
			__asm        mov    ecx, [ebp-0x3C];
			__asm        mov    [ecx+4], eax;
		_T263:
			__asm        jmp    _T268;
		_T268:
			__asm        jmp    _T26d;
		_T26d:
			__asm        mov    eax, [ebp-0x3C];
			__asm        mov    eax, [eax+4];
			__asm        mov    eax, [eax];
			__asm        movsx  eax, byte ptr [eax];
			__asm        cmp    eax, lCharacter;
			__asm        jne    _T29d;
		// LINE 269:
			__asm        mov    eax, i;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, this;
			__asm        call   dword ptr [eax+0xC4];
		// LINE 270:
			return 0x1;
		// LINE 272:
		_T29d:
			i++;
		// LINE 273:
			__asm        jmp    __WHILE_3a;
	}
// LINE 274:
_T2a5:
	return 0x0;
// LINE 275:
}

// FUNCTION: COPTER_D 0x0049c9a7
long UserMenuWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 282:
	__asm        cmp    lKey, 0x28;
	__asm        je     _T20;

	__asm        cmp    lKey, 0x22;
	__asm        jne    _T7b;
// LINE 283:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xD4];
	__asm        jg     _T53;
// LINE 284:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 285:
	__asm        jmp    _T6c;
// LINE 286:
_T53:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 287:
_T6c:
	return 0x1;
// LINE 289:
	__asm        jmp    _T1d8;
_T7b:
	__asm        cmp    lKey, 0x26;
	__asm        je     _T9f;

	__asm        cmp    lKey, 0x21;
	__asm        jne    _Tfa;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jle    _Tfa;
// LINE 290:
_T9f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD4], 0;
	__asm        jne    _Td2;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 292:
	__asm        jmp    _Teb;
// LINE 293:
_Td2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 294:
_Teb:
	return 0x1;
// LINE 296:
	__asm        jmp    _T1d8;
_Tfa:
	__asm        cmp    lKey, 0x24;
	__asm        jne    _T123;
// LINE 297:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 298:
	return 0x1;
// LINE 300:
	__asm        jmp    _T1d8;
_T123:
	__asm        cmp    lKey, 0x23;
	__asm        jne    _T15a;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD4];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 302:
	return 0x1;
// LINE 304:
	__asm        jmp    _T1d8;
_T15a:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T18b;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 306:
	return 0x1;
// LINE 308:
	__asm        jmp    _T1d8;
_T18b:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T1d8;
// LINE 309:
// Block start:
	/*bp-0x4*/   long lValue;
	lValue = (this->myUserMenuWindowDescription.lSelectionBase + this->nCurrentSelection);
// LINE 310:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 311:
	return 0x1;
// LINE 313:
// Block end:
_T1d8:
	return 0x0;
// LINE 314:
}

// FUNCTION: COPTER_D 0x0049cb8d
long UserMenuWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   int32_t bExecute;
	/*bp-0x8*/   int32_t nIndex;

// LINE 329:
	bExecute = 0x0;
// LINE 331:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     _T7c;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    ecx, nIndex;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jne    _T4e;
// LINE 333:
	bExecute = 0x1;
// LINE 334:
_T4e:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 335:
	__asm        cmp    bExecute, 0;
	__asm        je     _T7c;
// LINE 336:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD8];
// LINE 338:
_T7c:
	return 0x1;
// LINE 339:
}

// FUNCTION: COPTER_D 0x0049cc1a
long UserMenuWindow::DoCursorMove(long nCursorX, long nCursorY) {
	/*bp-0x4*/   int32_t nIndex;

// LINE 349:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        lea    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        je     _T40;
// LINE 350:
	__asm        mov    eax, nIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 351:
_T40:
	return 0x1;
// LINE 352:
}

// FUNCTION: COPTER_D 0x0049cc6b
int32_t UserMenuWindow::ExecuteSelection(int32_t nIndex) {
	/*bp-0x4*/   long lValue;

// LINE 360:
	lValue = (this->myUserMenuWindowDescription.lSelectionBase + nIndex);
// LINE 362:
	__asm        lea    eax, lValue;
	__asm        push   eax;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 363:
	return 0x1;
// LINE 364:
}

// FUNCTION: COPTER_D 0x0049ccbb
void CopterMainMenu::CopterMainMenu(/*packed*/ struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::UserMenuWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5913E0;
// LINE 394:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049cd15
void CopterMainMenu::~CopterMainMenu() {

	this-><CopterMainMenu+0x00> = 0x5913e0;
// LINE 401:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0x6C];
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0x6C];
// LINE 403:
	this->CopterMainMenu::DestroyImage();
// LINE 404:
	return;

	this->UserMenuWindow::~UserMenuWindow();
}

// FUNCTION: COPTER_D 0x0049cd72
int32_t CopterMainMenu::Initialize() {
// LINE 413:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T7e;

	__asm        jmp    _T28;
_T28:
	__asm        mov    dword ptr [ebp-0x14], 0x121;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0x122;
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        jmp    _T49;
_T49:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_PART_1_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    _T8b;
_T7e:
	this->mySiblingWindows[0] = 0x0;
// LINE 415:
_T8b:
	__asm        push   0x74;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tfd;

	__asm        jmp    _Ta7;
_Ta7:
	__asm        mov    dword ptr [ebp-0x28], 0x1AB;
	__asm        mov    dword ptr [ebp-0x24], 0x13B;
	__asm        mov    dword ptr [ebp-0x20], 0x1AC;
	__asm        mov    dword ptr [ebp-0x1C], 0x13C;
	__asm        jmp    _Tc8;
_Tc8:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAIN_PART_2_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    _T10a;
_Tfd:
	this->mySiblingWindows[1] = 0x0;
// LINE 416:
_T10a:
	this->UserMenuWindow::Initialize();
// LINE 417:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 418:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049ce9b
int32_t CopterMainMenu::CreateImage(int32_t __formal) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sImageFile; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sImagePath; // 0x8 bytes

// LINE 426:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T69;
_T62:
	sImageFile.reference = 0x0;
_T69:
	sImageFile.c_str_ptr = 0x0;
	__asm        jmp    _T75;
// LINE 427:
_T75:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tba;
_Tba:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tcc;
_Tc5:
	sImagePath.reference = 0x0;
_Tcc:
	sImagePath.c_str_ptr = 0x0;
	__asm        jmp    _Td8;
// LINE 429:
_Td8:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 430:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        jne    _T267;

	__asm        mov    eax, SZ_MAIN_RATCHET_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
// LINE 431:
	__asm        jmp    _T105;
_T105:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T123;
// LINE 432:
_T123:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T13e;
// LINE 433:
_T13e:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T257;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T17a;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T17a:
	__asm        jmp    _T17f;
_T17f:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _T197;
_T197:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T201;

	__asm        jmp    _T1a9;
_T1a9:
	__asm        jmp    _T1ae;
_T1ae:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1cd;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T1d9;

	__asm        jmp    _T1d9;
_T1cd:
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    _T20f;
_T20f:
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T21a;
_T21a:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    _T235;
_T235:
	__asm        jmp    _T23a;
_T23a:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], eax;
	__asm        jmp    _T267;
_T257:
	this->myRatchetImage = 0x0;
// LINE 435:
_T267:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        jne    _T3ee;

	__asm        mov    eax, SZ_MAIN_LIGHT_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x24], eax;
// LINE 436:
	__asm        jmp    _T287;
_T287:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T2a5;
// LINE 437:
_T2a5:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T2c0;
// LINE 438:
_T2c0:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T3de;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T302;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T302:
	__asm        jmp    _T307;
_T307:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _T31f;
_T31f:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T376;

	__asm        jmp    _T331;
_T331:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T376;
_T376:
	__asm        jmp    _T37b;
_T37b:
	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    _T387;
_T387:
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T398;
_T398:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    _T3bc;
_T3bc:
	__asm        jmp    _T3c1;
_T3c1:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15E], eax;
	__asm        jmp    _T3ee;
_T3de:
	this->myLightImage = 0x0;
// LINE 440:
_T3ee:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T478;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T478;

	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T458;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T458:
	__asm        jmp    _T45d;
_T45d:
	__asm        jmp    _T462;
_T462:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T473;
_T473:
	__asm        jmp    _T478;
_T478:
	__asm        jmp    _T47d;
_T47d:
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T49f;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49f:
	__asm        jmp    _T4a4;
_T4a4:
	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T527;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T527;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T507;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T507:
	__asm        jmp    _T50c;
_T50c:
	__asm        jmp    _T511;
_T511:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T522;
_T522:
	__asm        jmp    _T527;
_T527:
	__asm        jmp    _T52c;
_T52c:
	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T54e;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T54e:
	__asm        jmp    _T553;
_T553:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 441:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049d3fd
void CopterMainMenu::DestroyImage() {
// LINE 447:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15A], 0;
	__asm        je     _T63;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 449:
_T56:
	this->myRatchetImage = 0x0;
// LINE 451:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        je     _Tba;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15E];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta8;
_Ta8:
	__asm        jmp    _Tad;
// LINE 453:
_Tad:
	this->myLightImage = 0x0;
// LINE 455:
_Tba:
	this->GraphicWindow::DestroyImage();
// LINE 456:
	return;
}

// FUNCTION: COPTER_D 0x0049d4c9
int32_t CopterMainMenu::DrawSelf() {
// LINE 462:
	this->UserMenuWindow::DrawSelf();
// LINE 463:
	this->CopterMainMenu::DrawRatchetAndLights();
// LINE 465:
	return 0x1;
// LINE 466:
}

// FUNCTION: COPTER_D 0x0049d4f4
void CopterMainMenu::DrawRatchetAndLights() {
	/*bp-0x28*/  /*packed*/ class MPoint ptRatchetsDestination[5]; // 0x28 bytes
	/*bp-0x78*/  /*packed*/ class MRect rectRatchetsSource[5]; // 0x50 bytes
	/*bp-0x7c*/  int32_t i;
	/*bp-0xcc*/  /*packed*/ class MRect rectLightsSource[5]; // 0x50 bytes
	/*bp-0xf4*/  /*packed*/ class MPoint ptLightsDestination[5]; // 0x28 bytes


	__asm        mov    dword ptr [ebp-0xF8], 5;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        mov    [ebp-0xFC], eax;
// LINE 473:
__WHILE_28:
	__asm        dec    dword ptr [ebp-0xF8];
	__asm        js     _T4b;

	__asm        mov    ecx, [ebp-0xFC];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0xFC], 8;
	__asm        jmp    __WHILE_28;
_T4b:
	__asm        jmp    _T50;
_T50:
	__asm        mov    dword ptr [ebp-0x100], 5;
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        mov    [ebp-0x104], eax;
// LINE 474:
__WHILE_66:
	__asm        dec    dword ptr [ebp-0x100];
	__asm        js     _T89;

	__asm        mov    ecx, [ebp-0x104];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x104], 0x10;
	__asm        jmp    __WHILE_66;
_T89:
	__asm        jmp    _T8e;
_T8e:
	__asm        mov    dword ptr [ebp-0x108], 5;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        mov    [ebp-0x10C], eax;
// LINE 475:
__WHILE_a1:
	__asm        dec    dword ptr [ebp-0x108];
	__asm        js     _Tc4;

	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x10C], 8;
	__asm        jmp    __WHILE_a1;
_Tc4:
	__asm        jmp    _Tc9;
_Tc9:
	__asm        mov    dword ptr [ebp-0x110], 5;
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        mov    [ebp-0x114], eax;
// LINE 476:
__WHILE_dc:
	__asm        dec    dword ptr [ebp-0x110];
	__asm        js     _Tff;

	__asm        mov    ecx, [ebp-0x114];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x114], 0x10;
	__asm        jmp    __WHILE_dc;
_Tff:
	__asm        jmp    _T104;
// LINE 479:
_T104:
	__asm        lea    eax, rectLightsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptLightsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::GetCoordinatesForLights;
// LINE 480:
_FOR_129:
	for (i = 0x0; (i < 0x5); i++) {
		// LINE 483:
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0xC0];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0xC4];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0xC8];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0xCC];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        mov    eax, [ebp+eax*8-0xF0];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        mov    eax, [ebp+eax*8-0xF4];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x15E];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x15E];
			__asm        call   dword ptr [edx+0xC];
			__asm        jmp    _FOR_NEXT_129;
	}
// LINE 485:
_T1b0:
	__asm        lea    eax, rectRatchetsSource[0].left;
	__asm        push   eax;
	__asm        lea    eax, ptRatchetsDestination[0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterMainMenu::GetCoordinatesForRatchets;
// LINE 486:
_FOR_1cf:
	for (i = 0x0; (i < 0x5); i++) {
		// LINE 489:
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0x6C];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0x70];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0x74];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 4;
			__asm        mov    eax, [ebp+eax-0x78];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        mov    eax, [ebp+eax*8-0x24];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        mov    eax, [ebp+eax*8-0x28];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x15A];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x15A];
			__asm        call   dword ptr [edx+0xC];
			__asm        jmp    _FOR_NEXT_1cf;
	}
// LINE 490:
_T244:
	return;
}

// FUNCTION: COPTER_D 0x0049d742
void CopterMainMenu::GetCoordinatesForLights(/*packed*/ class MPoint *ptDestinationArray, /*packed*/ class MRect *rectSourceArray) {
// LINE 502:
	ptDestinationArray->x = 0x14e;
// LINE 503:
	ptDestinationArray->y = 0x20;
// LINE 504:
	rectSourceArray->left = 0x0;
// LINE 505:
	rectSourceArray->right = 0x3c;
// LINE 506:
	rectSourceArray->top = 0x0;
// LINE 507:
	rectSourceArray->bottom = 0x38;
// LINE 509:
	ptDestinationArray-><MPoint+0x08> = 0x14e;
// LINE 510:
	ptDestinationArray-><MPoint+0x0c> = 0x58;
// LINE 511:
	rectSourceArray-><MRect+0x10> = 0x0;
// LINE 512:
	rectSourceArray-><MRect+0x18> = 0x3c;
// LINE 513:
	rectSourceArray-><MRect+0x14> = 0x38;
// LINE 514:
	rectSourceArray-><MRect+0x1c> = 0x78;
// LINE 516:
	ptDestinationArray-><MPoint+0x10> = 0x14e;
// LINE 517:
	ptDestinationArray-><MPoint+0x14> = 0x98;
// LINE 518:
	rectSourceArray-><MRect+0x20> = 0x0;
// LINE 519:
	rectSourceArray-><MRect+0x28> = 0x3c;
// LINE 520:
	rectSourceArray-><MRect+0x24> = 0x78;
// LINE 521:
	rectSourceArray-><MRect+0x2c> = 0xb8;
// LINE 523:
	ptDestinationArray-><MPoint+0x18> = 0x14e;
// LINE 524:
	ptDestinationArray-><MPoint+0x1c> = 0xd8;
// LINE 525:
	rectSourceArray-><MRect+0x30> = 0x0;
// LINE 526:
	rectSourceArray-><MRect+0x38> = 0x3c;
// LINE 527:
	rectSourceArray-><MRect+0x34> = 0xb8;
// LINE 528:
	rectSourceArray-><MRect+0x3c> = 0xf8;
// LINE 530:
	ptDestinationArray-><MPoint+0x20> = 0x14e;
// LINE 531:
	ptDestinationArray-><MPoint+0x24> = 0x118;
// LINE 532:
	rectSourceArray-><MRect+0x40> = 0x0;
// LINE 533:
	rectSourceArray-><MRect+0x48> = 0x3c;
// LINE 534:
	rectSourceArray-><MRect+0x44> = 0xf8;
// LINE 535:
	rectSourceArray-><MRect+0x4c> = 0x138;
// LINE 537:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x3C;
// LINE 538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x3C;
// LINE 539:
	return;
}

// FUNCTION: COPTER_D 0x0049d8ab
void CopterMainMenu::GetCoordinatesForRatchets(/*packed*/ class MPoint *ptDestinationArray, /*packed*/ class MRect *rectSourceArray) {
// LINE 546:
	ptDestinationArray->x = 0x21;
// LINE 547:
	ptDestinationArray->y = 0x23;
// LINE 548:
	rectSourceArray->left = 0x0;
// LINE 549:
	rectSourceArray->right = 0x27;
// LINE 550:
	rectSourceArray->top = 0x0;
// LINE 551:
	rectSourceArray->bottom = 0x41;
// LINE 553:
	ptDestinationArray-><MPoint+0x08> = 0x21;
// LINE 554:
	ptDestinationArray-><MPoint+0x0c> = 0x64;
// LINE 555:
	rectSourceArray-><MRect+0x10> = 0x0;
// LINE 556:
	rectSourceArray-><MRect+0x18> = 0x27;
// LINE 557:
	rectSourceArray-><MRect+0x14> = 0x41;
// LINE 558:
	rectSourceArray-><MRect+0x1c> = 0x81;
// LINE 560:
	ptDestinationArray-><MPoint+0x10> = 0x21;
// LINE 561:
	ptDestinationArray-><MPoint+0x14> = 0xa4;
// LINE 562:
	rectSourceArray-><MRect+0x20> = 0x0;
// LINE 563:
	rectSourceArray-><MRect+0x28> = 0x27;
// LINE 564:
	rectSourceArray-><MRect+0x24> = 0x81;
// LINE 565:
	rectSourceArray-><MRect+0x2c> = 0xc0;
// LINE 567:
	ptDestinationArray-><MPoint+0x18> = 0x21;
// LINE 568:
	ptDestinationArray-><MPoint+0x1c> = 0xe3;
// LINE 569:
	rectSourceArray-><MRect+0x30> = 0x0;
// LINE 570:
	rectSourceArray-><MRect+0x38> = 0x27;
// LINE 571:
	rectSourceArray-><MRect+0x34> = 0xc0;
// LINE 572:
	rectSourceArray-><MRect+0x3c> = 0xfe;
// LINE 574:
	ptDestinationArray-><MPoint+0x20> = 0x21;
// LINE 575:
	ptDestinationArray-><MPoint+0x24> = 0x121;
// LINE 576:
	rectSourceArray-><MRect+0x40> = 0x0;
// LINE 577:
	rectSourceArray-><MRect+0x48> = 0x27;
// LINE 578:
	rectSourceArray-><MRect+0x44> = 0xfe;
// LINE 579:
	rectSourceArray-><MRect+0x4c> = 0x129;
// LINE 581:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx], 0x27;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, rectSourceArray;
	__asm        add    dword ptr [eax+ecx+8], 0x27;
// LINE 583:
	return;
}

// FUNCTION: COPTER_D 0x0049da14
void CopterPlayMenu::CopterPlayMenu(/*packed*/ struct UserMenuWindowDescription& newUserMenuWindowDescription, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, newUserMenuWindowDescription;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   UserMenuWindow::UserMenuWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5914C8;
// LINE 605:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0049da6e
void CopterPlayMenu::~CopterPlayMenu() {

	this-><CopterPlayMenu+0x00> = 0x5914c8;
// LINE 613:
	this->CopterPlayMenu::DestroyImage();
// LINE 614:
	return;

	this->UserMenuWindow::~UserMenuWindow();
}

// FUNCTION: COPTER_D 0x0049da9d
int32_t CopterPlayMenu::Initialize() {
// LINE 622:
	this->UserMenuWindow::Initialize();
// LINE 623:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 624:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049dac8
int32_t CopterPlayMenu::CreateImage(int32_t __formal) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sImageFile; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sImagePath; // 0x8 bytes

// LINE 631:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T69;
_T62:
	sImageFile.reference = 0x0;
_T69:
	sImageFile.c_str_ptr = 0x0;
	__asm        jmp    _T75;
// LINE 632:
_T75:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tba;
_Tba:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tcc;
_Tc5:
	sImagePath.reference = 0x0;
_Tcc:
	sImagePath.c_str_ptr = 0x0;
	__asm        jmp    _Td8;
// LINE 634:
_Td8:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 635:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        jne    _T28c;

	__asm        mov    eax, SZ_PLAY_RATCHET_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x20], eax;
// LINE 636:
	__asm        jmp    _T105;
_T105:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T123;
// LINE 637:
_T123:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T13e;
// LINE 638:
_T13e:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T257;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T17a;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T17a:
	__asm        jmp    _T17f;
_T17f:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _T197;
_T197:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T201;

	__asm        jmp    _T1a9;
_T1a9:
	__asm        jmp    _T1ae;
_T1ae:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1cd;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T1d9;

	__asm        jmp    _T1d9;
_T1cd:
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    byte ptr [ebp-0x64], 0;
	__asm        jmp    _T20f;
_T20f:
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T21a;
_T21a:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x70];
	__asm        mov    [ecx], al;
	__asm        jmp    _T235;
_T235:
	__asm        jmp    _T23a;
_T23a:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
	__asm        jmp    _T267;
_T257:
	this->myRatchetImage = 0x0;
// LINE 639:
_T267:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+8];
// LINE 641:
_T28c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        jne    _T413;

	__asm        mov    eax, SZ_PLAY_BACKGROUND_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x24], eax;
// LINE 642:
	__asm        jmp    _T2ac;
_T2ac:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T2ca;
// LINE 643:
_T2ca:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T2e5;
// LINE 644:
_T2e5:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T403;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T327;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T327:
	__asm        jmp    _T32c;
_T32c:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _T344;
_T344:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T39b;

	__asm        jmp    _T356;
_T356:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        lea    ecx, sImagePath.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T39b;
_T39b:
	__asm        jmp    _T3a0;
_T3a0:
	__asm        mov    byte ptr [ebp-0x84], 0;
	__asm        jmp    _T3ac;
_T3ac:
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T3bd;
_T3bd:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx], al;
	__asm        jmp    _T3e1;
_T3e1:
	__asm        jmp    _T3e6;
_T3e6:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x156], eax;
	__asm        jmp    _T413;
_T403:
	this->myBackgroundImage = 0x0;
// LINE 646:
_T413:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T49d;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T49d;

	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T47d;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T47d:
	__asm        jmp    _T482;
_T482:
	__asm        jmp    _T487;
_T487:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T498;
_T498:
	__asm        jmp    _T49d;
_T49d:
	__asm        jmp    _T4a2;
_T4a2:
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T4c4;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4c4:
	__asm        jmp    _T4c9;
_T4c9:
	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T54c;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T54c;

	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T52c;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T52c:
	__asm        jmp    _T531;
_T531:
	__asm        jmp    _T536;
_T536:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T547;
_T547:
	__asm        jmp    _T54c;
_T54c:
	__asm        jmp    _T551;
_T551:
	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T573;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T573:
	__asm        jmp    _T578;
_T578:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 647:
__RETURN:
}

// FUNCTION: COPTER_D 0x0049e04f
void CopterPlayMenu::DestroyImage() {
// LINE 653:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        je     _T63;
// LINE 654:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 655:
_T56:
	this->myRatchetImage = 0x0;
// LINE 657:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        je     _Tba;
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta8;
_Ta8:
	__asm        jmp    _Tad;
// LINE 659:
_Tad:
	this->myBackgroundImage = 0x0;
// LINE 661:
_Tba:
	this->GraphicWindow::DestroyImage();
// LINE 662:
	return;
}

// FUNCTION: COPTER_D 0x0049e11b
int32_t CopterPlayMenu::DrawSelf() {
// LINE 668:
	this->UserMenuWindow::DrawSelf();
// LINE 669:
	this->CopterPlayMenu::DrawRatchet();
// LINE 670:
	return 0x1;
// LINE 671:
}

// FUNCTION: COPTER_D 0x0049e146
void CopterPlayMenu::DrawRatchet() {
	/*bp-0x8*/   /*packed*/ class MPoint ptDestinationBackground; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class MPoint ptDestinationRatchet; // 0x8 bytes

// LINE 678:
	__asm        jmp    _T11;
_T11:
	ptDestinationBackground.x = 0x1e;
	ptDestinationBackground.y = 0x23;
	__asm        jmp    _T24;
// LINE 679:
_T24:
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T2e;
// LINE 682:
_T2e:
	__asm        jmp    _T33;
_T33:
	__asm        jmp    _T38;
_T38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationBackground.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationBackground.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x156];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x156];
	__asm        call   dword ptr [edx+0xC];
// LINE 684:
	__asm        lea    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CopterPlayMenu::GetCoordinatesForRatchet;
// LINE 686:
	__asm        jmp    _T8d;
_T8d:
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ptDestinationRatchet.y;
	__asm        push   eax;
	__asm        mov    eax, ptDestinationRatchet.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x152];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x152];
	__asm        call   dword ptr [edx+0xC];
// LINE 687:
	return;
}

// FUNCTION: COPTER_D 0x0049e226
void CopterPlayMenu::GetCoordinatesForRatchet(/*packed*/ class MPoint& ptDestination) {
// LINE 694:
	ptDestination.x = 0x1d;
// LINE 695:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T42;
// LINE 696:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x2D;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 697:
	__asm        jmp    _T5a;
// LINE 698:
_T42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 3;
	__asm        add    eax, 0x55;
	__asm        mov    ecx, ptDestination;
	__asm        mov    [ecx+4], eax;
// LINE 699:
_T5a:
	return;
}



// Contribution: 1:0009d290-0009d2ae Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2b0-0009d2d7 Module: 13, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0009d2e0-0009d318 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e2e0
// UserMenuWindow::`scalar deleting destructor'



// Contribution: 1:0009d320-0009d359 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e320
int32_t UserMenuWindow::GetLineCount() {
// LINE 219:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	return ((this->myTextWindowPtrArray.finish - this->myTextWindowPtrArray.start) >> 0x2);
// LINE 220:
}



// Contribution: 1:0009d360-0009d398 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e360
// CopterMainMenu::`scalar deleting destructor'



// Contribution: 1:0009d3a0-0009d3d8 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049e3a0
// CopterPlayMenu::`scalar deleting destructor'



// Contribution: 1:0009d3e0-0009d448 Module: 13, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0049e3e0
// allocate



// Contribution: 2:000022f8-000023df Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for UserMenuWindow @ 0x005912f8
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: UserMenuWindow::Initialize @ 0x0049b858
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: UserMenuWindow::DoCharacter @ 0x0049c6f4
//   33: UserMenuWindow::DoKeyDown @ 0x0049c9a7
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: UserMenuWindow::DoCursorDown @ 0x0049cb8d
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: UserMenuWindow::DoCursorMove @ 0x0049cc1a
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: UserMenuWindow::`scalar deleting destructor' @ 0x0049e2e0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: UserMenuWindow::DrawSelf @ 0x0049c3ad
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: UserMenuWindow::SetSelectionIndex @ 0x0049c43c
//   50: UserMenuWindow::SetSelectionValue @ 0x0049c55b
//   51: UserMenuWindow::GetSelectionIndex @ 0x0049e290
//   52: UserMenuWindow::GetSelectionValue @ 0x0049e2b0
//   53: UserMenuWindow::GetLineCount @ 0x0049e320
//   54: UserMenuWindow::ExecuteSelection @ 0x0049cc6b
//   55: UserMenuWindow::DrawSelectionIndicators @ 0x0049c595
//   56: UserMenuWindow::DoCursorHitTest @ 0x0049c5ab
//   57: UserMenuWindow::GetPositionOfNthItem @ 0x0049c6ad
//   58 entries



// Contribution: 2:000023e0-000024c7 Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CopterMainMenu @ 0x005913e0
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: CopterMainMenu::Initialize @ 0x0049cd72
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: CopterMainMenu::CreateImage @ 0x0049ce9b
//   05: CopterMainMenu::DestroyImage @ 0x0049d3fd
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: UserMenuWindow::DoCharacter @ 0x0049c6f4
//   33: UserMenuWindow::DoKeyDown @ 0x0049c9a7
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: UserMenuWindow::DoCursorDown @ 0x0049cb8d
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: UserMenuWindow::DoCursorMove @ 0x0049cc1a
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CopterMainMenu::`scalar deleting destructor' @ 0x0049e360
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: CopterMainMenu::DrawSelf @ 0x0049d4c9
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: UserMenuWindow::SetSelectionIndex @ 0x0049c43c
//   50: UserMenuWindow::SetSelectionValue @ 0x0049c55b
//   51: UserMenuWindow::GetSelectionIndex @ 0x0049e290
//   52: UserMenuWindow::GetSelectionValue @ 0x0049e2b0
//   53: UserMenuWindow::GetLineCount @ 0x0049e320
//   54: UserMenuWindow::ExecuteSelection @ 0x0049cc6b
//   55: UserMenuWindow::DrawSelectionIndicators @ 0x0049c595
//   56: UserMenuWindow::DoCursorHitTest @ 0x0049c5ab
//   57: UserMenuWindow::GetPositionOfNthItem @ 0x0049c6ad
//   58 entries



// Contribution: 2:000024c8-000025af Module: 13, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CopterPlayMenu @ 0x005914c8
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: CopterPlayMenu::Initialize @ 0x0049da9d
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: CopterPlayMenu::CreateImage @ 0x0049dac8
//   05: CopterPlayMenu::DestroyImage @ 0x0049e04f
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: UserMenuWindow::DoCharacter @ 0x0049c6f4
//   33: UserMenuWindow::DoKeyDown @ 0x0049c9a7
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: UserMenuWindow::DoCursorDown @ 0x0049cb8d
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: UserMenuWindow::DoCursorMove @ 0x0049cc1a
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CopterPlayMenu::`scalar deleting destructor' @ 0x0049e3a0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: CopterPlayMenu::DrawSelf @ 0x0049e11b
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: UserMenuWindow::SetSelectionIndex @ 0x0049c43c
//   50: UserMenuWindow::SetSelectionValue @ 0x0049c55b
//   51: UserMenuWindow::GetSelectionIndex @ 0x0049e290
//   52: UserMenuWindow::GetSelectionValue @ 0x0049e2b0
//   53: UserMenuWindow::GetLineCount @ 0x0049e320
//   54: UserMenuWindow::ExecuteSelection @ 0x0049cc6b
//   55: UserMenuWindow::DrawSelectionIndicators @ 0x0049c595
//   56: UserMenuWindow::DoCursorHitTest @ 0x0049c5ab
//   57: UserMenuWindow::GetPositionOfNthItem @ 0x0049c6ad
//   58 entries



// Contribution: 3:000032d0-0000333e Module: 13, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a2d0
char * SZ_MENU_SELECTION_SOUND = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2d4
char * SZ_MAIN_PART_1_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2d8
char * SZ_MAIN_PART_2_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2dc
char * SZ_MAIN_LIGHT_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e0
char * SZ_MAIN_RATCHET_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e4
char * SZ_PLAY_RATCHET_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a2e8
char * SZ_PLAY_BACKGROUND_IMAGE_FILE_NAME = { 0 /* todo */ };

