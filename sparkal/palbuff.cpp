// Module: Palbuff.obj
// Source: C:\Copter\source\sparkal\Palbuff.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00046240-00046788 Module: 50, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00447240
void PaletteBuffer::PaletteBuffer() {
	char[64] szTypeFaceName;

// LINE 34:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x58;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0;
	__asm        push   0x1B8;
	__asm        push   0x258;
	__asm        mov    ecx, this;
	__asm        call   0x0046EA06;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 37:
	__asm        push   0x400;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004472C0;
	__asm        mov    dword ptr [ebp-0x50], 0x100;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        dec    dword ptr [ebp-0x50];
	__asm        js     near ptr 0x004472AA;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x00447790;
	__asm        add    dword ptr [ebp-0x54], 4;
	__asm        jmp    near ptr 0x00447290;
	__asm        jmp    near ptr 0x004472AF;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x134], eax;
	__asm        jmp    near ptr 0x004472CD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0;
// LINE 38:
	__asm        mov    ecx, this;
	__asm        call   0x00447501;
// LINE 39:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   0x0042CE0E;
	__asm        add    esp, 0xC;
// LINE 40:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00447318;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   8;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0049F937;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0044731F;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00470440;
// LINE 41:
	__asm        mov    ecx, this;
	__asm        call   0x004475E2;
// LINE 42:
	__asm        jmp    near ptr 0x00447338;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00447340
void PaletteBuffer::PaletteBuffer(struct SparkalColor* newSparkalColors) {
	char[64] szTypeFaceName;

// LINE 52:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x58;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0;
	__asm        push   0x1B8;
	__asm        push   0x258;
	__asm        mov    ecx, this;
	__asm        call   0x0046EA06;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 55:
	__asm        push   0x400;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x004473C0;
	__asm        mov    dword ptr [ebp-0x50], 0x100;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        dec    dword ptr [ebp-0x50];
	__asm        js     near ptr 0x004473AA;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x00447790;
	__asm        add    dword ptr [ebp-0x54], 4;
	__asm        jmp    near ptr 0x00447390;
	__asm        jmp    near ptr 0x004473AF;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x134], eax;
	__asm        jmp    near ptr 0x004473CD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0;
// LINE 56:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x004473E9;
// LINE 57:
	__asm        mov    eax, newSparkalColors;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004474AB;
// LINE 58:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   0x0042CE0E;
	__asm        add    esp, 0xC;
// LINE 59:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x0044742C;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   8;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0049F937;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00447433;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00470440;
// LINE 60:
	__asm        mov    ecx, this;
	__asm        call   0x004475E2;
// LINE 61:
	__asm        jmp    near ptr 0x0044744C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00447456
void PaletteBuffer::~PaletteBuffer() {
// LINE 69:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 70:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     near ptr 0x00447499;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 72:
	__asm        jmp    near ptr 0x0044749E;
	__asm        mov    ecx, this;
	__asm        call   0x0046EC7A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004474ab
int32_t PaletteBuffer::SetPalette(const struct SparkalColor* pColors) {
	int32_t i;

// LINE 78:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 81:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004474C6;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x004474F0;
// LINE 82:
	__asm        mov    eax, i;
	__asm        mov    ecx, pColors;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x134];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4], eax;
// LINE 83:
	__asm        jmp    near ptr 0x004474C3;
// LINE 84:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004474FA;
// LINE 85:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00447501
int32_t PaletteBuffer::SetPalette() {
	long hResult;
	int32_t i;
	struct tagPALETTEENTRY* paletteEntries;

// LINE 96:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 100:
	__asm        push   0x400;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    paletteEntries, eax;
// LINE 101:
	__asm        cmp    paletteEntries, 0;
	__asm        jne    near ptr 0x0044752E;
// LINE 102:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004475DD;
// LINE 103:
	__asm        mov    eax, paletteEntries;
	__asm        push   eax;
	__asm        push   0x100;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    hResult, eax;
// LINE 104:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044755D;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x004475BB;
// LINE 105:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4+2], al;
// LINE 106:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4+1], al;
// LINE 107:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4], al;
// LINE 108:
	__asm        jmp    near ptr 0x0044755A;
// LINE 109:
	__asm        mov    eax, paletteEntries;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 110:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004475DD;
// LINE 114:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004475e2
void PaletteBuffer::DrawPalette() {
	char[256] szDescriptionString;
	int32_t i;
	struct SparkalRect rectFill;

// LINE 125:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x118;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 127:
	__asm        jmp    near ptr 0x004475F9;
// LINE 131:
	__asm        mov    rectFill.left, 0;
// LINE 132:
	__asm        mov    rectFill.top, 0;
// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectFill.right, eax;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    rectFill.bottom, eax;
// LINE 135:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0xFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 138:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00447648;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x00447741;
// LINE 139:
	__asm        mov    ecx, 0x2C;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    rectFill.left, eax;
// LINE 140:
	__asm        mov    ecx, 0x2C;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*4];
	__asm        add    eax, eax;
	__asm        mov    rectFill.top, eax;
// LINE 141:
	__asm        mov    eax, rectFill.left;
	__asm        add    eax, 0xA;
	__asm        mov    rectFill.right, eax;
// LINE 142:
	__asm        mov    eax, rectFill.top;
	__asm        add    eax, 0xA;
	__asm        mov    rectFill.bottom, eax;
// LINE 143:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 145:
	__asm        mov    eax, rectFill.left;
	__asm        add    eax, 0x5A;
	__asm        mov    rectFill.right, eax;
// LINE 146:
	__asm        add    rectFill.left, 0xB;
// LINE 148:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4];
	__asm        push   edx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4+1];
	__asm        push   edx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4+2];
	__asm        push   edx;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        push   0x598F14;
	__asm        lea    eax, szDescriptionString[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0x18;
// LINE 150:
	__asm        push   0;
	__asm        lea    eax, rectFill.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectFill.right;
	__asm        push   eax;
	__asm        lea    eax, rectFill.top;
	__asm        push   eax;
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, szDescriptionString[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
// LINE 151:
	__asm        jmp    near ptr 0x00447645;
// LINE 152:
	__asm        jmp    near ptr 0x00447746;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0044774b
unsigned long PaletteBuffer::Compose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
// LINE 161:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 162:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046F948;
	__asm        jmp    near ptr 0x00447782;
// LINE 163:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}



// Contribution: 1:00046790-000467a8 Module: 50, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000005e0-00000643 Module: 50, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f5e0
// ??_7PaletteBuffer@@6B@


// Contribution: 3:00001f14-00001f24 Module: 50, 4 byte alignment, initialized_data, read, write, 
