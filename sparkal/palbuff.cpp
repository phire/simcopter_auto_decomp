// Module: Palbuff.obj
// Source: C:\Copter\source\sparkal\Palbuff.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class PaletteBuffer (forward reference);
class PaletteBuffer : public CBackBuffer
{
public:
	struct SparkalColor* paletteColors;
	void PaletteBuffer(struct SparkalColor*);
	void PaletteBuffer();
	void ~PaletteBuffer();
	int32_t SetPalette();
	int32_t SetPalette(const struct SparkalColor*);
	void DrawPalette();
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
};

// Type: char[64];

// Type: void;

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: int32_t;

// Type: long;

// Type: struct tagPALETTEENTRY (forward reference);

// Type: char[256];

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class IFlatImage (forward reference);
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};

// Type: unsigned long;

// Type: class CBackBuffer;
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
};

// Type: class IBackBuffer;
class IBackBuffer : public IFlatImage
{
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
};

// Type: class IFlatImage;
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};



// Contribution: 1:00046240-00046788 Module: 50, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00447240
void PaletteBuffer::PaletteBuffer() {
	char szTypeFaceName[64];


	__asm        push   0;
	__asm        push   0x1B8;
	__asm        push   0x258;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 37:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T80;

	__asm        mov    dword ptr [ebp-0x50], 0x100;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
_T50:
	__asm        dec    dword ptr [ebp-0x50];
	__asm        js     _T6a;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x54], 4;
	__asm        jmp    _T50;
_T6a:
	__asm        jmp    near ptr 0x004472AF;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x134], eax;
	__asm        jmp    _T8d;
_T80:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0;
// LINE 38:
_T8d:
	__asm        mov    ecx, this;
	__asm        call   PaletteBuffer::SetPalette;
// LINE 39:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   LanguageManager::GetTypefaceForLanguage;
	__asm        add    esp, 0xC;
// LINE 40:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _Td8;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   8;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   MFont::MFont;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _Tdf;
_Td8:
	__asm        mov    dword ptr [ebp-0x4C], 0;
_Tdf:
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::SetFont;
// LINE 41:
	__asm        mov    ecx, this;
	__asm        call   PaletteBuffer::DrawPalette;
// LINE 42:
	__asm        jmp    near ptr 0x00447338;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00447340
void PaletteBuffer::PaletteBuffer(struct SparkalColor* newSparkalColors) {
	char szTypeFaceName[64];


	__asm        push   0;
	__asm        push   0x1B8;
	__asm        push   0x258;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 55:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T80;

	__asm        mov    dword ptr [ebp-0x50], 0x100;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
_T50:
	__asm        dec    dword ptr [ebp-0x50];
	__asm        js     _T6a;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   SparkalColor::SparkalColor;
	__asm        add    dword ptr [ebp-0x54], 4;
	__asm        jmp    _T50;
_T6a:
	__asm        jmp    near ptr 0x004473AF;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x134], eax;
	__asm        jmp    _T8d;
_T80:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0;
// LINE 56:
_T8d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     _Ta9;
// LINE 57:
	__asm        mov    eax, newSparkalColors;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PaletteBuffer::SetPalette;
// LINE 58:
_Ta9:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   LanguageManager::GetTypefaceForLanguage;
	__asm        add    esp, 0xC;
// LINE 59:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _Tec;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   8;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   MFont::MFont;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _Tf3;
_Tec:
	__asm        mov    dword ptr [ebp-0x4C], 0;
_Tf3:
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::SetFont;
// LINE 60:
	__asm        mov    ecx, this;
	__asm        call   PaletteBuffer::DrawPalette;
// LINE 61:
	__asm        jmp    near ptr 0x0044744C;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00447456
void PaletteBuffer::~PaletteBuffer() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5E0;
// LINE 70:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x134], 0;
	__asm        je     _T43;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 72:
_T43:
	__asm        jmp    near ptr 0x0044749E;

	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::~CBackBuffer;
}

// FUNCTION: COPTER_D 0x004474ab
int32_t PaletteBuffer::SetPalette(const struct SparkalColor* pColors) {
	int32_t i;

// LINE 81:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 0x100;
	__asm        jge    _T45;
// LINE 82:
	__asm        mov    eax, i;
	__asm        mov    ecx, pColors;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x134];
	__asm        mov    edx, i;
	__asm        mov    [ecx+edx*4], eax;
// LINE 83:
	__asm        jmp    _T18;
// LINE 84:
_T45:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004474FA;
// LINE 85:
}

// FUNCTION: COPTER_D 0x00447501
int32_t PaletteBuffer::SetPalette() {
	long hResult;
	int32_t i;
	struct tagPALETTEENTRY* paletteEntries;

// LINE 100:
	__asm        push   0x400;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    paletteEntries, eax;
// LINE 101:
	__asm        cmp    paletteEntries, 0;
	__asm        jne    _T2d;
// LINE 102:
	__asm        xor    eax, eax;
	__asm        jmp    _Tdc;
// LINE 103:
_T2d:
	__asm        mov    eax, paletteEntries;
	__asm        push   eax;
	__asm        push   0x100;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpPalette;
	__asm        push   eax;
	__asm        mov    eax, lpPalette;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x10];
	__asm        mov    hResult, eax;
// LINE 104:
	__asm        mov    i, 0;
	__asm        jmp    _T5c;
_T59:
	__asm        inc    i;
_T5c:
	__asm        cmp    i, 0x100;
	__asm        jge    _Tba;
// LINE 105:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4+2], al;
// LINE 106:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4+1], al;
// LINE 107:
	__asm        mov    eax, i;
	__asm        mov    ecx, paletteEntries;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x134];
	__asm        mov    [edx+ecx*4], al;
// LINE 108:
	__asm        jmp    _T59;
// LINE 109:
_Tba:
	__asm        mov    eax, paletteEntries;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 110:
	__asm        mov    eax, 1;
	__asm        jmp    _Tdc;
// LINE 114:
_Tdc:
}

// FUNCTION: COPTER_D 0x004475e2
void PaletteBuffer::DrawPalette() {
	char szDescriptionString[256];
	int32_t i;
	struct SparkalRect rectFill;

// LINE 127:
	__asm        jmp    near ptr 0x004475F9;
// LINE 131:
	__asm        mov    rectFill.left, 0;
// LINE 132:
	__asm        mov    rectFill.top, 0;
// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectFill.right, eax;
// LINE 134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    rectFill.bottom, eax;
// LINE 135:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0xFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 138:
	__asm        mov    i, 0;
	__asm        jmp    _T66;
_T63:
	__asm        inc    i;
_T66:
	__asm        cmp    i, 0x100;
	__asm        jge    _T15f;
// LINE 139:
	__asm        mov    ecx, 0x2C;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    rectFill.left, eax;
// LINE 140:
	__asm        mov    ecx, 0x2C;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*4];
	__asm        add    eax, eax;
	__asm        mov    rectFill.top, eax;
// LINE 141:
	__asm        mov    eax, rectFill.left;
	__asm        add    eax, 0xA;
	__asm        mov    rectFill.right, eax;
// LINE 142:
	__asm        mov    eax, rectFill.top;
	__asm        add    eax, 0xA;
	__asm        mov    rectFill.bottom, eax;
// LINE 143:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 145:
	__asm        mov    eax, rectFill.left;
	__asm        add    eax, 0x5A;
	__asm        mov    rectFill.right, eax;
// LINE 146:
	__asm        add    rectFill.left, 0xB;
// LINE 148:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4];
	__asm        push   edx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4+1];
	__asm        push   edx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*4+2];
	__asm        push   edx;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        push   0x598F14;
	__asm        lea    eax, szDescriptionString[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x18;
// LINE 150:
	__asm        push   0;
	__asm        lea    eax, rectFill.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectFill.right;
	__asm        push   eax;
	__asm        lea    eax, rectFill.top;
	__asm        push   eax;
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, szDescriptionString[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
// LINE 151:
	__asm        jmp    _T63;
// LINE 152:
_T15f:
	__asm        jmp    near ptr 0x00447746;
}

// FUNCTION: COPTER_D 0x0044774b
unsigned long PaletteBuffer::Compose(class IFlatImage* pDestImage, long DestLeft, long DestTop, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
// LINE 162:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::Compose;
	__asm        jmp    near ptr 0x00447782;
// LINE 163:
}



// Contribution: 1:00046790-000467a8 Module: 50, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000005e0-00000643 Module: 50, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f5e0
// GLOBAL: COPTER_D 0x0058f5e0
// ??_7PaletteBuffer@@6B@


// Contribution: 3:00001f14-00001f24 Module: 50, 4 byte alignment, initialized_data, read, write, 
