// Module: Winerror.obj
// Source: C:\Copter\source\sparkal\Winerror.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0004ef40-0004f04f Module: 46, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0044ff40
void GUIReportError(unsigned long Error, unsigned char Terminate) {
// LINE 21:
	asm( 
"	      0044ff40    push ebp"
"	      0044ff41    mov ebp,esp"
"	      0044ff43    sub esp,200h"
"	      0044ff49    push ebx"
"	      0044ff4a    push esi"
"	      0044ff4b    push edi"
);
// LINE 22:
	asm( 
"	      0044ff4c    cmp dword ptr [ebp+8],0"
"	      0044ff50    jne near ptr 0044FF6Fh"
"	      0044ff56    push 16h"
"	      0044ff58    push 5990E4h"
"	      0044ff5d    push 59910Ch"
"	      0044ff62    call 0056DA30h"
"	      0044ff67    add esp,0Ch"
"	      0044ff6a    jmp near ptr 0044FF74h"
"	      0044ff6f    jmp near ptr 0044FF74h"
);
// LINE 24:
	asm( 
"	      0044ff74    test byte ptr [ebp+0Bh],80h"
"	      0044ff78    je near ptr 00450046h"
);
// LINE 27:
	asm( 
"	      0044ff7e    and dword ptr [ebp+8],7FFFFFFFh"
);
// LINE 32:
	asm( 
"	      0044ff85    push 0FFh"
"	      0044ff8a    lea eax,[ebp-100h]"
"	      0044ff90    push eax"
"	      0044ff91    mov eax,[ebp+8]"
"	      0044ff94    push eax"
"	      0044ff95    mov eax,ds:[5C28C8h]"
"	      0044ff9a    push eax"
"	      0044ff9b    call dword ptr ds:[6C38B4h]"
"	      0044ffa1    test eax,eax"
"	      0044ffa3    jne near ptr 0044FFC2h"
);
// LINE 33:
	asm( 
"	      0044ffa9    mov eax,[ebp+8]"
"	      0044ffac    push eax"
"	      0044ffad    push 599120h"
"	      0044ffb2    lea eax,[ebp-100h]"
"	      0044ffb8    push eax"
"	      0044ffb9    call dword ptr ds:[6C3858h]"
"	      0044ffbf    add esp,0Ch"
);
// LINE 35:
	asm( 
"	      0044ffc2    push 0FFh"
"	      0044ffc7    lea eax,[ebp-200h]"
"	      0044ffcd    push eax"
"	      0044ffce    push 29Ah"
"	      0044ffd3    mov eax,ds:[5C28C8h]"
"	      0044ffd8    push eax"
"	      0044ffd9    call dword ptr ds:[6C38B4h]"
"	      0044ffdf    test eax,eax"
"	      0044ffe1    jne near ptr 00450005h"
);
// LINE 36:
	asm( 
"	      0044ffe7    push 2030h"
"	      0044ffec    push 599130h"
"	      0044fff1    lea eax,[ebp-100h]"
"	      0044fff7    push eax"
"	      0044fff8    push 0"
"	      0044fffa    call dword ptr ds:[6C3870h]"
);
// LINE 37:
	asm( 
"	      00450000    jmp near ptr 00450020h"
);
// LINE 38:
	asm( 
"	      00450005    push 2030h"
"	      0045000a    lea eax,[ebp-200h]"
"	      00450010    push eax"
"	      00450011    lea eax,[ebp-100h]"
"	      00450017    push eax"
"	      00450018    push 0"
"	      0045001a    call dword ptr ds:[6C3870h]"
);
// LINE 40:
	asm( 
"	      00450020    lea eax,[ebp-100h]"
"	      00450026    push eax"
"	      00450027    push 599138h"
"	      0045002c    call 00424B14h"
"	      00450031    add esp,8"
);
// LINE 42:
	asm( 
"	      00450034    xor eax,eax"
"	      00450036    mov al,[ebp+0Ch]"
"	      00450039    test eax,eax"
"	      0045003b    je near ptr 00450046h"
);
// LINE 43:
	asm( 
"	      00450041    call 0056F350h"
);
// LINE 45:
	asm( 
"	      00450046    jmp near ptr 0045004Bh"
"	      0045004b    pop edi"
"	      0045004c    pop esi"
"	      0045004d    pop ebx"
"	      0045004e    leave"
"	      0045004f    ret"
);
}



// Contribution: 3:000020e4-0000213b Module: 46, 4 byte alignment, initialized_data, read, write, 
