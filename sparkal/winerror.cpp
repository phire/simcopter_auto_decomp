// Module: Winerror.obj
// Source: C:\Copter\source\sparkal\Winerror.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned long;

// Type: unsigned char;

// Type: char[255];

// Type: void;



// Contribution: 1:0004ef40-0004f04f Module: 46, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0044ff40
void GUIReportError(unsigned long Error, unsigned char Terminate) {
// LINE 22:
	__asm        cmp    Error, 0;
	__asm        jne    _T2f;

	__asm        push   0x16;
	__asm        push   0x5990E4;
	__asm        push   0x59910C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T34;
_T2f:
	__asm        jmp    _T34;
// LINE 24:
_T34:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&Error) + 3), 0x80;
	__asm        je     _T106;
// LINE 27:
// Block start:
	char ErrorTitle[255];
	char ErrorText[255];
	__asm        and    Error, 0x7FFFFFFF;
// LINE 32:
	__asm        push   0xFF;
	__asm        lea    eax, ErrorText[0];
	__asm        push   eax;
	__asm        mov    eax, Error;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        test   eax, eax;
	__asm        jne    _T82;
// LINE 33:
	__asm        mov    eax, Error;
	__asm        push   eax;
	__asm        push   0x599120;
	__asm        lea    eax, ErrorText[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0xC;
// LINE 35:
_T82:
	__asm        push   0xFF;
	__asm        lea    eax, ErrorTitle[0];
	__asm        push   eax;
	__asm        push   0x29A;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        test   eax, eax;
	__asm        jne    _Tc5;
// LINE 36:
	__asm        push   0x2030;
	__asm        push   0x599130;
	__asm        lea    eax, ErrorText[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 37:
	__asm        jmp    _Te0;
// LINE 38:
_Tc5:
	__asm        push   0x2030;
	__asm        lea    eax, ErrorTitle[0];
	__asm        push   eax;
	__asm        lea    eax, ErrorText[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 40:
_Te0:
	__asm        lea    eax, ErrorText[0];
	__asm        push   eax;
	__asm        push   0x599138;
	__asm        call   DebugOutput;
	__asm        add    esp, 8;
// LINE 42:
	__asm        xor    eax, eax;
	__asm        mov    al, Terminate;
	__asm        test   eax, eax;
	__asm        je     _T106;
// LINE 43:
	__asm        call   abort;
// LINE 45:
// Block end:
_T106:
	__asm        jmp    near ptr 0x0045004B;
}



// Contribution: 3:000020e4-0000213b Module: 46, 4 byte alignment, initialized_data, read, write, 
