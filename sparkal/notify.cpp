// Module: Notify.obj
// Source: C:\Copter\source\sparkal\Notify.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class NotificationItem (forward reference);
class NotificationItem{
public:
	long lPreferenceType;
	class NotificationSink* myNotificationSink;
	void NotificationItem(long, class NotificationSink*);
	void NotificationItem(const class NotificationItem&);
	void NotificationItem();
	class NotificationItem& operator=(const class NotificationItem&);
};

// Type: void;
// Type: long;
// Type: class NotificationSink (forward reference);
class NotificationSink{
public:
	// vtable: 0
	intro void DoNotificationChange(long, class PreferenceManager*);
};

// Type: int32_t;


// Contribution: 1:0003d160-0003d24d Module: 54, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043e160
void NotificationItem::NotificationItem() {
// LINE 9:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 10:
	__asm        jmp    near ptr 0x0043E184;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043e18c
void NotificationItem::NotificationItem(const class NotificationItem& newNotificationSink) {
// LINE 12:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 13:
	__asm        mov    eax, newNotificationSink;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043E1DF;
// LINE 14:
	__asm        jmp    near ptr 0x0043E1A9;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043e1b3
void NotificationItem::NotificationItem(long lNewPreferenceType, class NotificationSink* newNotificationSink) {
// LINE 19:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, lNewPreferenceType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, newNotificationSink;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 20:
	__asm        jmp    near ptr 0x0043E1D5;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0043e1df
class NotificationItem& NotificationItem::operator=(const class NotificationItem& P2) {
// LINE 22:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 23:
	__asm        mov    eax, P2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 24:
	__asm        mov    eax, P2;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 25:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0043E209;
// LINE 26:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043e210
int32_t operator==(const class NotificationItem& P1, const class NotificationItem& P2) {
// LINE 29:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 31:
	__asm        mov    eax, P1;
	__asm        mov    ecx, P2;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x0043E242;
	__asm        mov    eax, P1;
	__asm        mov    ecx, P2;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0043E242;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043E244;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043E249;
// LINE 32:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

