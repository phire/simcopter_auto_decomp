// Module: Globals.obj
// Source: C:\Copter\source\sparkal\Globals.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long;

// Type: /*packed*/ struct VRwindowType;
struct VRwindowType{ // packed(0x1c bytes) TI: 0x10a5
	/*+0x0*/   int32_t WindowX;
	/*+0x4*/   int32_t WindowY;
	/*+0x8*/   int32_t WindowWide;
	/*+0xc*/   int32_t WindowHigh;
	/*+0x10*/  int32_t RenderMode;
	/*+0x14*/  int32_t RenderWide;
	/*+0x18*/  int32_t RenderHigh;
};

// Type: /*unpacked*/ struct VRwindowType;
struct VRwindowType{ // not packed(0x1c bytes) TI: 0x3e0f
	/*+0x0*/   int32_t WindowX;
	/*+0x4*/   int32_t WindowY;
	/*+0x8*/   int32_t WindowWide;
	/*+0xc*/   int32_t WindowHigh;
	/*+0x10*/  int32_t RenderMode;
	/*+0x14*/  int32_t RenderWide;
	/*+0x18*/  int32_t RenderHigh;
};

// Type: char *;

// Type: enum tagResolution;
enum tagResolution {
	nResolution320 = 0,
	nResolution640 = 1,
	nResolution800 = 2,
	nResolution1024 = 3,
	nResolution1280 = 4,
};

// Type: int32_t;

// Type: void * __ptr32;

// Type: /*packed*/ class RoadGraph;
class RoadGraph{ // packed(0x280 bytes) TI: 0x485e
public:
	/*+0x0*/   /*packed*/ struct RGVertex *RGArray[128]; // 0x200 bytes
	/*+0x200*/ unsigned char RGLength[128]; // 0x80 bytes
	void RoadGraph();
	void Init();
	void ~RoadGraph();
	void Destroy();
	int32_t GetRoadLength(const /*packed*/ struct Goal*);
	void GetNextGoal(/*packed*/ struct Goal*);
	void PickPlaceOnRoad(/*packed*/ struct Goal*, int32_t, int32_t);
	/*packed*/ struct Goal FindIntersections(/*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal&, /*packed*/ struct Goal&);
	unsigned char FindYIndexToVertex(int32_t, int32_t);
	void DumpBuildMap();
	void FindPlaceOnRoad(/*packed*/ struct Goal&, /*packed*/ struct _GridCoordinates);
	void SamePlaceOtherDirection(/*packed*/ struct Goal*);
private:
	void FindEdges(int32_t, int32_t, /*packed*/ struct RGVertex*);
	void FindNumRoadElements(/*packed*/ struct RGVertex*, /*packed*/ struct Edge*, enum DirIndex2, unsigned char, unsigned char, int32_t);
	void FindRoads(int32_t, int32_t, /*packed*/ struct RGVertex*);
	void MakeRoad(/*packed*/ struct RGVertex*, unsigned char, unsigned char, enum DirIndex2);
	void FindDeadEnds();
	int32_t IsThisADeadEnd(enum DirIndex2, unsigned char, unsigned char);
	enum DirIndex2 WhatDirAmIConnectedTo(enum DirIndex2, enum DirIndex2*, unsigned char, unsigned char);
	int32_t FindIntersection(/*packed*/ struct Goal&, unsigned char, unsigned char, /*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates, enum DirectionTypes);
	void ConnectHiwayRamp(int32_t, int32_t, unsigned short);
	int32_t SetElevation(unsigned short);
};

// Type: char;

// Type: /*unpacked*/ class Station (forward reference);
// Station Class implementation not found

// Type: /*packed*/ class Station (forward reference);
class Station{ // packed(0x1c bytes) TI: 0x47e8
public:
	void Station(unsigned char);
	void ~Station();
	int32_t DispatchNearestAvailableVehicle(long, long, enum EmergencyType, enum EmergencyLevel, /*packed*/ class EmergencyVehicleClass**, int32_t);
	short GetNearestStation(/*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates*);
	short GetNextNearest(/*packed*/ struct _GridCoordinates*);
	void DecrementQuantityOfVehicleDispatched(int32_t);
private:
	/*+0x0*/   /*packed*/ struct _StructStation *stationList;
	/*+0x4*/   int32_t quantityOfStations;
	/*+0x8*/   /*packed*/ struct _StationHeapStruct *stationHeap;
	/*+0xc*/   int32_t stationHeapSize;
	/*+0x10*/  /*packed*/ struct _VehicleHeapStruct *vehicleHeap;
	/*+0x14*/  int32_t vehicleHeapSize;
	/*+0x18*/  int32_t maxVehicles;
	int32_t FindNearestRoadToStation(/*packed*/ struct _GridCoordinates&);
	int32_t FindNearestRoadToEmergency(/*packed*/ struct _GridCoordinates&);
	int32_t FindNearestStation(/*packed*/ struct _GridCoordinates);
	/*packed*/ class EmergencyVehicleClass* FindAvailableVehicle(enum EmergencyLevel, /*packed*/ class EmergencyVehicleClass**, int32_t);
	void SortStationsByDistanceFromDestination(/*packed*/ struct _GridCoordinates);
	void SortVehiclesByDistanceFromDestination(/*packed*/ struct _GridCoordinates, /*packed*/ class EmergencyVehicleClass**, int32_t);
	void StationHeapInsert(const /*packed*/ struct _StationHeapStruct*);
	void StationHeapRemove(/*packed*/ struct _StationHeapStruct*);
	void VehicleHeapInsert(const /*packed*/ struct _VehicleHeapStruct*);
	void VehicleHeapRemove(/*packed*/ struct _VehicleHeapStruct*);
};

// Type: /*packed*/ class ShortestPath;
class ShortestPath{ // packed(0x8 bytes) TI: 0x2aae
private:
	/*+0x0*/   /*packed*/ struct _FringeHeapNode *heap;
	/*+0x4*/   long heapSize;
public:
	void Init();
	int32_t BreadthFirstSearch(/*packed*/ struct _RGIndex, /*packed*/ struct _RGIndex);
	int32_t DepthFirstSearch(/*packed*/ struct _RGIndex, /*packed*/ struct _RGIndex);
private:
	void PriorityHeapInsert(const /*packed*/ struct _FringeHeapNode*);
	void PriorityHeapRemove(/*packed*/ struct _FringeHeapNode*);
	int32_t FindDistanceFromDestination(/*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates);
};

// Type: void ();

// Type: void;



// Contribution: 1:000461b0-00046235 Module: 51, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004471b0
static void $E4() {

	$E1();
	$E3();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004471ca
static void $E1() {

	__asm        jmp    _T0b;
_T0b:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004471df
static void $E3() {

	atexit(0x4471fc);
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004471fc
static void $E2() {

	__asm        jmp    _T0b;
_T0b:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00447211
static void $E7() {

	$E6();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00447226
static void $E6() {

	return;
}



// Contribution: 3:0000003c-00000043 Module: 51, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059703c
static void (*$S5)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597040
static void (*$S8)() = { 0 /* todo */ };



// Contribution: 3:00001e50-00001f13 Module: 51, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598e50
void * __ptr32 stack = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598e54
char * VRRenderBuf = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598e58
int32_t Stretch2Fit = 0;

// GLOBAL: COPTER_D 0x00598e5c
int32_t G_water_anim = 1;

// GLOBAL: COPTER_D 0x00598e60
/*packed*/ struct VRwindowType VRCurrentWindow = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598e7c
int32_t G_run_old = 0;

// GLOBAL: COPTER_D 0x00598e80
int32_t G_use_mouse = 0;

// GLOBAL: COPTER_D 0x00598e84
int32_t G_fract_blurr = 0;

// GLOBAL: COPTER_D 0x00598e88
int32_t G_texobjs = 1;

// GLOBAL: COPTER_D 0x00598e8c
int32_t G_texterr = 1;

// GLOBAL: COPTER_D 0x00598e90
long G_daynight = 0;

// GLOBAL: COPTER_D 0x00598e94
long G_freemem = 0;

// GLOBAL: COPTER_D 0x00598e98
int32_t G_artmode = 0;

// GLOBAL: COPTER_D 0x00598e9c
int32_t G_testmode = 0;

// GLOBAL: COPTER_D 0x00598ea0
long G_ClearColor = -1;

// GLOBAL: COPTER_D 0x00598ea4
long G_numcellsrej = 0;

// GLOBAL: COPTER_D 0x00598ea8
int32_t G_use_height_backplane = 0;

// GLOBAL: COPTER_D 0x00598eac
char * buffer1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598eb0
long G_diff_level = 2;

// GLOBAL: COPTER_D 0x00598eb4
long G_max_emptycel_size = 1;

// GLOBAL: COPTER_D 0x00598eb8
long gIDOfBuildingAvatarIsIn = -1;

// GLOBAL: COPTER_D 0x00598ebc
long G_video_mode = 16;

// GLOBAL: COPTER_D 0x00598ec0
/*packed*/ struct VRwindowType qwindow = { 0 /* todo */ };
// has alternate definitions: (original TI: 0x10a5)
//   /*unpacked*/ struct VRwindowType qwindow (TI: 0x3e0f)

// GLOBAL: COPTER_D 0x00598ee0
/*packed*/ struct VRwindowType swindow = { 0 /* todo */ };
// has alternate definitions: (original TI: 0x10a5)
//   /*unpacked*/ struct VRwindowType swindow (TI: 0x3e0f)

// GLOBAL: COPTER_D 0x00598efc
char * S_pal = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f00
enum tagResolution gameResolution = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f04
char * gszAppDirectory = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f08
int32_t bDone = 0;

// GLOBAL: COPTER_D 0x00598f0c
int32_t bIsActive = 0;

// GLOBAL: COPTER_D 0x00598f10
int32_t bFullScreen = 1;



// Contribution: 3:0002c7f8-0006caaf Module: 51, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c37f8
/*packed*/ class ShortestPath gShortestPath;

// GLOBAL: COPTER_D 0x005c3800
/*unpacked*/ class Station *gPoliceStations;
// has alternate definitions: (original TI: 0x2a9c)
//   /*packed*/ class Station *gPoliceStations (TI: 0x2fba)

// GLOBAL: COPTER_D 0x005c3808
long G_CheatCodes[6];

// GLOBAL: COPTER_D 0x005c3820
/*unpacked*/ class Station *gHospitals;
// has alternate definitions: (original TI: 0x2a9c)
//   /*packed*/ class Station *gHospitals (TI: 0x2fba)

// GLOBAL: COPTER_D 0x005c3828
/*packed*/ class RoadGraph gRoadGraph;

// GLOBAL: COPTER_D 0x005c3aa8
/*unpacked*/ class Station *gFireStations;
// has alternate definitions: (original TI: 0x2a9c)
//   /*packed*/ class Station *gFireStations (TI: 0x2fba)

// GLOBAL: COPTER_D 0x005c3ab0
char gScratchBuffer[262144];



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\sound.cpp
// GLOBAL: COPTER_D 0x00666390
long GridNSortCells; // Contrib missing

