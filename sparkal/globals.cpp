// Module: Globals.obj
// Source: C:\Copter\source\sparkal\Globals.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long;

// Type: struct VRwindowType;
struct VRwindowType{
	int32_t WindowX;
	int32_t WindowY;
	int32_t WindowWide;
	int32_t WindowHigh;
	int32_t RenderMode;
	int32_t RenderWide;
	int32_t RenderHigh;
};

// Type: char *;

// Type: enum tagResolution;
enum tagResolution {
	nResolution320 = 0,
	nResolution640 = 1,
	nResolution800 = 2,
	nResolution1024 = 3,
	nResolution1280 = 4,
};

// Type: int32_t;

// Type: long[6];

// Type: void * __ptr32;

// Type: class RoadGraph;
class RoadGraph{
public:
	struct RGVertex* RGArray[128];
	unsigned char RGLength[128];
	void RoadGraph();
	void Init();
	void ~RoadGraph();
	void Destroy();
	int32_t GetRoadLength(const struct Goal*);
	void GetNextGoal(struct Goal*);
	void PickPlaceOnRoad(struct Goal*, int32_t, int32_t);
	struct Goal FindIntersections(struct _GridCoordinates, struct _GridCoordinates, struct Goal&, struct Goal&);
	unsigned char FindYIndexToVertex(int32_t, int32_t);
	void DumpBuildMap();
	void FindPlaceOnRoad(struct Goal&, struct _GridCoordinates);
	void SamePlaceOtherDirection(struct Goal*);
private:
	void FindEdges(int32_t, int32_t, struct RGVertex*);
	void FindNumRoadElements(struct RGVertex*, struct Edge*, enum DirIndex2, unsigned char, unsigned char, int32_t);
	void FindRoads(int32_t, int32_t, struct RGVertex*);
	void MakeRoad(struct RGVertex*, unsigned char, unsigned char, enum DirIndex2);
	void FindDeadEnds();
	int32_t IsThisADeadEnd(enum DirIndex2, unsigned char, unsigned char);
	enum DirIndex2 WhatDirAmIConnectedTo(enum DirIndex2, enum DirIndex2*, unsigned char, unsigned char);
	int32_t FindIntersection(struct Goal&, unsigned char, unsigned char, struct _GridCoordinates, struct _GridCoordinates, enum DirectionTypes);
	void ConnectHiwayRamp(int32_t, int32_t, unsigned short);
	int32_t SetElevation(unsigned short);
};

// Type: char[262144];

// Type: class Station (forward reference);
// Station Class implementation not found

// Type: class ShortestPath;
class ShortestPath{
private:
	struct _FringeHeapNode* heap;
	long heapSize;
public:
	void Init();
	int32_t BreadthFirstSearch(struct _RGIndex, struct _RGIndex);
	int32_t DepthFirstSearch(struct _RGIndex, struct _RGIndex);
private:
	void PriorityHeapInsert(const struct _FringeHeapNode*);
	void PriorityHeapRemove(struct _FringeHeapNode*);
	int32_t FindDistanceFromDestination(struct _GridCoordinates, struct _GridCoordinates);
};

// Type: void ();

// Type: class Station (forward reference);
class Station{
public:
	void Station(unsigned char);
	void ~Station();
	int32_t DispatchNearestAvailableVehicle(long, long, enum EmergencyType, enum EmergencyLevel, class EmergencyVehicleClass**, int32_t);
	short GetNearestStation(struct _GridCoordinates, struct _GridCoordinates*);
	short GetNextNearest(struct _GridCoordinates*);
	void DecrementQuantityOfVehicleDispatched(int32_t);
private:
	struct _StructStation* stationList;
	int32_t quantityOfStations;
	struct _StationHeapStruct* stationHeap;
	int32_t stationHeapSize;
	struct _VehicleHeapStruct* vehicleHeap;
	int32_t vehicleHeapSize;
	int32_t maxVehicles;
	int32_t FindNearestRoadToStation(struct _GridCoordinates&);
	int32_t FindNearestRoadToEmergency(struct _GridCoordinates&);
	int32_t FindNearestStation(struct _GridCoordinates);
	class EmergencyVehicleClass* FindAvailableVehicle(enum EmergencyLevel, class EmergencyVehicleClass**, int32_t);
	void SortStationsByDistanceFromDestination(struct _GridCoordinates);
	void SortVehiclesByDistanceFromDestination(struct _GridCoordinates, class EmergencyVehicleClass**, int32_t);
	void StationHeapInsert(const struct _StationHeapStruct*);
	void StationHeapRemove(struct _StationHeapStruct*);
	void VehicleHeapInsert(const struct _VehicleHeapStruct*);
	void VehicleHeapRemove(struct _VehicleHeapStruct*);
};

// Type: struct VRwindowType;
struct VRwindowType{
	int32_t WindowX;
	int32_t WindowY;
	int32_t WindowWide;
	int32_t WindowHigh;
	int32_t RenderMode;
	int32_t RenderWide;
	int32_t RenderHigh;
};

// Type: void;



// Contribution: 1:000461b0-00046235 Module: 51, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004471b0
void $E4() {

	__asm        call   $E1;
	__asm        call   $E3;
	__asm        jmp    near ptr 0x004471C5;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004471ca
void $E1() {

	__asm        jmp    near ptr 0x004471D5;

	__asm        jmp    near ptr 0x004471DA;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004471df
void $E3() {

	__asm        push   0x4471FC;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004471F7;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004471fc
void $E2() {

	__asm        jmp    near ptr 0x00447207;

	__asm        jmp    near ptr 0x0044720C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00447211
void $E7() {

	__asm        call   $E6;
	__asm        jmp    near ptr 0x00447221;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00447226
void $E6() {

	__asm        jmp    near ptr 0x00447231;
}



// Contribution: 3:0000003c-00000043 Module: 51, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059703c
void (*$S5)() = { /* <data@0x0059703c> */ };

// GLOBAL: COPTER_D 0x00597040
void (*$S8)() = { /* <data@0x00597040> */ };



// Contribution: 3:00001e50-00001f13 Module: 51, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598e50
void * __ptr32 stack = { /* <data@0x00598e50> */ };

// GLOBAL: COPTER_D 0x00598e54
char * VRRenderBuf = { /* <data@0x00598e54> */ };

// GLOBAL: COPTER_D 0x00598e58
int32_t Stretch2Fit = { /* <data@0x00598e58> */ };

// GLOBAL: COPTER_D 0x00598e5c
int32_t G_water_anim = { /* <data@0x00598e5c> */ };

// GLOBAL: COPTER_D 0x00598e60
struct VRwindowType VRCurrentWindow = { /* <data@0x00598e60> */ };

// GLOBAL: COPTER_D 0x00598e7c
int32_t G_run_old = { /* <data@0x00598e7c> */ };

// GLOBAL: COPTER_D 0x00598e80
int32_t G_use_mouse = { /* <data@0x00598e80> */ };

// GLOBAL: COPTER_D 0x00598e84
int32_t G_fract_blurr = { /* <data@0x00598e84> */ };

// GLOBAL: COPTER_D 0x00598e88
int32_t G_texobjs = { /* <data@0x00598e88> */ };

// GLOBAL: COPTER_D 0x00598e8c
int32_t G_texterr = { /* <data@0x00598e8c> */ };

// GLOBAL: COPTER_D 0x00598e90
long G_daynight = { /* <data@0x00598e90> */ };

// GLOBAL: COPTER_D 0x00598e94
long G_freemem = { /* <data@0x00598e94> */ };

// GLOBAL: COPTER_D 0x00598e98
int32_t G_artmode = { /* <data@0x00598e98> */ };

// GLOBAL: COPTER_D 0x00598e9c
int32_t G_testmode = { /* <data@0x00598e9c> */ };

// GLOBAL: COPTER_D 0x00598ea0
long G_ClearColor = { /* <data@0x00598ea0> */ };

// GLOBAL: COPTER_D 0x00598ea4
long G_numcellsrej = { /* <data@0x00598ea4> */ };

// GLOBAL: COPTER_D 0x00598ea8
int32_t G_use_height_backplane = { /* <data@0x00598ea8> */ };

// GLOBAL: COPTER_D 0x00598eac
char * buffer1 = { /* <data@0x00598eac> */ };

// GLOBAL: COPTER_D 0x00598eb0
long G_diff_level = { /* <data@0x00598eb0> */ };

// GLOBAL: COPTER_D 0x00598eb4
long G_max_emptycel_size = { /* <data@0x00598eb4> */ };

// GLOBAL: COPTER_D 0x00598eb8
long gIDOfBuildingAvatarIsIn = { /* <data@0x00598eb8> */ };

// GLOBAL: COPTER_D 0x00598ebc
long G_video_mode = { /* <data@0x00598ebc> */ };

// GLOBAL: COPTER_D 0x00598ec0
struct VRwindowType qwindow = { /* <data@0x00598ec0> */ };

// GLOBAL: COPTER_D 0x00598ee0
struct VRwindowType swindow = { /* <data@0x00598ee0> */ };

// GLOBAL: COPTER_D 0x00598efc
char * S_pal = { /* <data@0x00598efc> */ };

// GLOBAL: COPTER_D 0x00598f00
enum tagResolution gameResolution = { /* <data@0x00598f00> */ };

// GLOBAL: COPTER_D 0x00598f04
char * gszAppDirectory = { /* <data@0x00598f04> */ };

// GLOBAL: COPTER_D 0x00598f08
int32_t bDone = { /* <data@0x00598f08> */ };

// GLOBAL: COPTER_D 0x00598f0c
int32_t bIsActive = { /* <data@0x00598f0c> */ };

// GLOBAL: COPTER_D 0x00598f10
int32_t bFullScreen = { /* <data@0x00598f10> */ };



// Contribution: 3:0002c7f8-0006caaf Module: 51, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c37f8
class ShortestPath gShortestPath = { /* <data@0x005c37f8> */ };

// GLOBAL: COPTER_D 0x005c3800
class Station* gPoliceStations = { /* <data@0x005c3800> */ };

// GLOBAL: COPTER_D 0x005c3808
long G_CheatCodes[6] = { /* <data@0x005c3808> */ };

// GLOBAL: COPTER_D 0x005c3820
class Station* gHospitals = { /* <data@0x005c3820> */ };

// GLOBAL: COPTER_D 0x005c3828
class RoadGraph gRoadGraph = { /* <data@0x005c3828> */ };

// GLOBAL: COPTER_D 0x005c3aa8
class Station* gFireStations = { /* <data@0x005c3aa8> */ };

// GLOBAL: COPTER_D 0x005c3ab0
char gScratchBuffer[262144] = { /* <data@0x005c3ab0> */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\sound.cpp
// GLOBAL: COPTER_D 0x00666390
long GridNSortCells = { /* <data@0x00666390> */ };

