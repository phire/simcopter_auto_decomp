// Module: Skyimage.obj
// Source: C:\Copter\source\sparkal\Skyimage.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class SkyImage (forward reference);
class SkyImage : public CBackBuffer
{
		enum SkyImage::SkyType {
			nSkyTypeDay = 0,
			nSkyTypeNight = 1,
		};
public:
	void SkyImage(int32_t, int32_t, int32_t);
	int32_t LoadImageA();
	void SwitchToSkyType(enum SkyImage::SkyType);
	void SwitchToProperSkyType();
	void ToggleSkyType();
	// vtable: 100
	intro unsigned long Compose(class CBackBuffer*, int32_t);
	int32_t nBitmapWidth;
	int32_t nBitmapHeight;
	int32_t nSkyType;
protected:
	int32_t fpHorizontalPixelRatio;
	int32_t fpMinimumAltitude;
	int32_t fpAltitudePixelRatio;
	int32_t fpPitchPixelRatio;
};

// Type: int32_t;

// Type: void;

// Type: enum SkyImage::SkyType;
	enum SkyImage::SkyType {
		nSkyTypeDay = 0,
		nSkyTypeNight = 1,
	};

// Type: struct VRResource (forward reference);
// VRResource Class implementation not found

// Type: char[260];

// Type: struct VRBmpHdr (forward reference);
// VRBmpHdr Class implementation not found

// Type: class CBackBuffer (forward reference);
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
};

// Type: long;

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: unsigned long;

// Type: class IBackBuffer;
class IBackBuffer : public IFlatImage
{
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
};

// Type: class CBackBuffer;
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
};

// Type: class IFlatImage;
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};



// Contribution: 1:00094400-00094b31 Module: 20, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00495400
void SkyImage::SkyImage(int32_t nNewSkyType, int32_t nNewBitmapWidth, int32_t nNewBitmapHeight) {

	__asm        push   0;
	__asm        mov    eax, nNewBitmapHeight;
	__asm        push   eax;
	__asm        mov    eax, nNewBitmapWidth;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    eax, nNewSkyType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13C], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591090;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0x280;
// LINE 32:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x138], 0xC8;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0xE10;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
// LINE 42:
	__asm        mov    eax, G_terr_maxalt;
	__asm        add    eax, 0xC80000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
// LINE 46:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x320;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 51:
	__asm        mov    ecx, this;
	__asm        call   SkyImage::LoadImageA;
// LINE 52:
	__asm        jmp    near ptr 0x004954C4;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004954ce
void SkyImage::SwitchToSkyType(enum SkyImage::SkyType nNewSkyType) {
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewSkyType;
	__asm        cmp    [eax+0x13C], ecx;
	__asm        je     _T32;
// LINE 61:
	__asm        mov    eax, nNewSkyType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13C], eax;
// LINE 62:
	__asm        mov    ecx, this;
	__asm        call   SkyImage::LoadImageA;
// LINE 64:
_T32:
	__asm        jmp    near ptr 0x00495505;
}

// FUNCTION: COPTER_D 0x0049550c
void SkyImage::SwitchToProperSkyType() {
// LINE 71:
	__asm        cmp    G_daynight, 0;
	__asm        jne    _T38;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        je     _T38;
// LINE 72:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   SkyImage::SwitchToSkyType;
// LINE 73:
	__asm        jmp    _T5f;
_T38:
	__asm        cmp    G_daynight, 1;
	__asm        jne    _T5f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 1;
	__asm        je     _T5f;
// LINE 74:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   SkyImage::SwitchToSkyType;
// LINE 75:
_T5f:
	__asm        jmp    near ptr 0x00495570;
}

// FUNCTION: COPTER_D 0x00495575
int32_t SkyImage::LoadImageA() {
	char * pDestinationImage;
	struct VRResource* vrResource;
	int32_t i;
	char szFullSkyImagePath[260];
	char * pSourceImage;
	struct VRBmpHdr* bmpHeader;

// LINE 102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        jne    _T43;
// LINE 103:
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_SKY_DAY_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 104:
	__asm        jmp    _T5c;
// LINE 105:
_T43:
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_SKY_NIGHT_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 107:
_T5c:
	__asm        push   0x59A13C;
	__asm        push   3;
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        call   VRLoadResource;
	__asm        add    esp, 0xC;
	__asm        mov    vrResource, eax;
// LINE 108:
	__asm        cmp    vrResource, 0;
	__asm        jne    _T8c;
// LINE 109:
	__asm        xor    eax, eax;
	__asm        jmp    _T36d;
// LINE 112:
_T8c:
	__asm        push   0;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 113:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 114:
	__asm        mov    eax, bmpHeader;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 2;
	__asm        add    eax, 0xC;
	__asm        add    pSourceImage, eax;
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        test   eax, eax;
	__asm        je     _T16c;
// LINE 118:
	__asm        jmp    near ptr 0x00495647;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestinationImage, eax;
// LINE 119:
	__asm        mov    i, 0;
	__asm        jmp    _Tf6;
_Tf0:
	__asm        inc    i;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x138], ecx;
	__asm        jle    _T156;
// LINE 120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        push   eax;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 121:
	__asm        jmp    near ptr 0x004956A8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    pDestinationImage, eax;
// LINE 122:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        add    pSourceImage, eax;
// LINE 123:
	__asm        jmp    _Tf0;
// LINE 124:
_T156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 126:
	__asm        jmp    _T173;
// LINE 127:
_T16c:
	__asm        xor    eax, eax;
	__asm        jmp    _T36d;
// LINE 133:
_T173:
	__asm        cmp    G_restex, 0;
	__asm        je     _T354;
// LINE 136:
	__asm        push   2;
	__asm        mov    eax, G_restex;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 137:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 138:
	__asm        add    pDestinationImage, 0x40C;
// LINE 141:
	__asm        push   1;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 142:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 143:
	__asm        add    pSourceImage, 0x40C;
// LINE 146:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 149:
	__asm        push   0x27;
	__asm        mov    eax, G_restex;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 150:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 151:
	__asm        add    pDestinationImage, 0x40C;
// LINE 154:
	__asm        push   2;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 155:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 156:
	__asm        add    pSourceImage, 0x40C;
// LINE 159:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 162:
	__asm        push   0x28;
	__asm        mov    eax, G_restex;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 163:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 164:
	__asm        add    pDestinationImage, 0x40C;
// LINE 167:
	__asm        push   3;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 168:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 169:
	__asm        add    pSourceImage, 0x40C;
// LINE 172:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 176:
	__asm        push   0x14;
	__asm        mov    eax, G_restex;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 177:
	__asm        mov    eax, bmpHeader;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestinationImage, eax;
// LINE 180:
	__asm        push   4;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 181:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 182:
	__asm        add    pSourceImage, 0x40C;
// LINE 185:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 188:
	__asm        push   0xD;
	__asm        mov    eax, G_restex;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 189:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 190:
	__asm        add    pDestinationImage, 0x40C;
// LINE 193:
	__asm        push   5;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRInt2BmpHdr;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 194:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 195:
	__asm        add    pSourceImage, 0x40C;
// LINE 198:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 203:
_T354:
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   VRUnLoadResource;
	__asm        add    esp, 4;
// LINE 204:
	__asm        mov    eax, 1;
	__asm        jmp    _T36d;
// LINE 205:
_T36d:
}

// FUNCTION: COPTER_D 0x004958e7
unsigned long SkyImage::Compose(class CBackBuffer* pDestImage, int32_t nDestinationWidth) {
	long len2;
	int32_t pitch;
	long start_col;
	long len1;
	struct SparkalRect rectDestination;
	int32_t altdiff;
	struct SparkalRect rectSource;
	long start_row;

// LINE 218:
	__asm        jmp    near ptr 0x004958F8;
// LINE 219:
	__asm        jmp    near ptr 0x004958FD;
// LINE 224:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x144];
	__asm        mov    altdiff, eax;
// LINE 226:
	__asm        mov    eax, cameraPitch;
	__asm        mov    pitch, eax;
// LINE 227:
	__asm        cmp    pitch, 0x7080000;
	__asm        jle    _T43;
// LINE 228:
	__asm        sub    pitch, 0xE100000;
// LINE 232:
_T43:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x138];
	__asm        dec    ebx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, altdiff;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, pitch;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        add    ebx, eax;
	__asm        mov    start_row, ebx;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_row;
	__asm        cmp    [eax+0x138], ecx;
	__asm        jg     _Ta2;
// LINE 235:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T244;
// LINE 236:
_Ta2:
	__asm        cmp    start_row, 0;
	__asm        jge    _Tb3;
// LINE 237:
	__asm        mov    start_row, 0;
// LINE 241:
_Tb3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, cameraHeading;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    start_col, eax;
// LINE 244:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_col;
	__asm        cmp    [eax+0x134], ecx;
	__asm        jg     _Tf3;
// LINE 245:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x134];
	__asm        neg    eax;
	__asm        sub    start_col, eax;
// LINE 249:
_Tf3:
	__asm        mov    eax, start_col;
	__asm        add    eax, nDestinationWidth;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x134];
	__asm        jle    _T128;
// LINE 250:
	__asm        mov    eax, start_col;
	__asm        add    eax, nDestinationWidth;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x134];
	__asm        mov    len2, eax;
// LINE 251:
	__asm        mov    eax, nDestinationWidth;
	__asm        sub    eax, len2;
	__asm        mov    len1, eax;
// LINE 253:
	__asm        jmp    _T135;
// LINE 254:
_T128:
	__asm        mov    len2, 0;
// LINE 255:
	__asm        mov    eax, nDestinationWidth;
	__asm        mov    len1, eax;
// LINE 261:
_T135:
	__asm        mov    eax, start_row;
	__asm        mov    rectSource.top, eax;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    rectSource.bottom, eax;
// LINE 265:
	__asm        mov    eax, start_col;
	__asm        mov    rectSource.left, eax;
// LINE 266:
	__asm        mov    eax, len1;
	__asm        add    eax, start_col;
	__asm        mov    rectSource.right, eax;
// LINE 268:
	__asm        cmp    G_video_mode, 0x10;
	__asm        jne    _T1e1;
// LINE 270:
	__asm        mov    rectDestination.top, 0;
// LINE 271:
	__asm        mov    rectDestination.left, 0;
// LINE 272:
	__asm        mov    eax, len1;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.right, eax;
// LINE 273:
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.bottom, eax;
// LINE 274:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 277:
	__asm        cmp    len2, 0;
	__asm        je     _T1dc;
// LINE 278:
	__asm        mov    rectSource.left, 0;
// LINE 279:
	__asm        mov    eax, len2;
	__asm        mov    rectSource.right, eax;
// LINE 280:
	__asm        mov    eax, len1;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.left, eax;
// LINE 281:
	__asm        mov    eax, len2;
	__asm        add    eax, eax;
	__asm        add    eax, rectDestination.left;
	__asm        mov    rectDestination.right, eax;
// LINE 282:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 285:
_T1dc:
	__asm        jmp    _T23a;
// LINE 289:
_T1e1:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::Compose;
// LINE 292:
	__asm        cmp    len2, 0;
	__asm        je     _T23a;
// LINE 293:
	__asm        mov    rectSource.left, 0;
// LINE 294:
	__asm        mov    eax, len2;
	__asm        mov    rectSource.right, eax;
// LINE 296:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, len1;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CBackBuffer::Compose;
// LINE 299:
_T23a:
	__asm        mov    eax, 1;
	__asm        jmp    _T244;
// LINE 300:
_T244:
}



// Contribution: 2:00002090-000020f7 Module: 20, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591090
// GLOBAL: COPTER_D 0x00591090
// ??_7SkyImage@@6B@


// Contribution: 3:00003120-0000313c Module: 20, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a120
char * SZ_SKY_DAY_IMAGE_FILE_NAME = { /* <data@0x0059a120> */ };

// GLOBAL: COPTER_D 0x0059a124
char * SZ_SKY_NIGHT_IMAGE_FILE_NAME = { /* <data@0x0059a124> */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: gridrend.asm
// GLOBAL: COPTER_D 0x00662820
void * __ptr32 GridProjectEnd = { /* <data@0x00662820> */ };

// GLOBAL: COPTER_D 0x0067ed20
int32_t G_terr_maxalt = { /* <data@0x0067ed20> */ };


// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1ac
int32_t cameraHeading = { /* <data@0x006bf1ac> */ };


// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1b0
int32_t cameraPitch = { /* <data@0x006bf1b0> */ };

