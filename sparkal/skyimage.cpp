// Module: Skyimage.obj
// Source: C:\Copter\source\sparkal\Skyimage.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00094400-00094b31 Module: 20, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00495400
void SkyImage::SkyImage(int32_t nNewSkyType, int32_t nNewBitmapWidth, int32_t nNewBitmapHeight) {
// LINE 30:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0;
	__asm        mov    eax, nNewBitmapHeight;
	__asm        push   eax;
	__asm        mov    eax, nNewBitmapWidth;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046EA06;
	__asm        mov    eax, nNewSkyType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13C], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591090;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x134], 0x280;
// LINE 32:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x138], 0xC8;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0xE10;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
// LINE 42:
	__asm        mov    eax, ds:[0x67ED20];
	__asm        add    eax, 0xC80000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
// LINE 46:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x320;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 51:
	__asm        mov    ecx, this;
	__asm        call   0x00495575;
// LINE 52:
	__asm        jmp    near ptr 0x004954C4;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004954ce
void SkyImage::SwitchToSkyType(enum SkyImage::SkyType nNewSkyType) {
// LINE 59:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewSkyType;
	__asm        cmp    [eax+0x13C], ecx;
	__asm        je     near ptr 0x00495500;
// LINE 61:
	__asm        mov    eax, nNewSkyType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13C], eax;
// LINE 62:
	__asm        mov    ecx, this;
	__asm        call   0x00495575;
// LINE 64:
	__asm        jmp    near ptr 0x00495505;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0049550c
void SkyImage::SwitchToProperSkyType() {
// LINE 70:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 71:
	__asm        cmp    dword ptr ds:[0x598E90], 0;
	__asm        jne    near ptr 0x00495544;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        je     near ptr 0x00495544;
// LINE 72:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x004954CE;
// LINE 73:
	__asm        jmp    near ptr 0x0049556B;
	__asm        cmp    dword ptr ds:[0x598E90], 1;
	__asm        jne    near ptr 0x0049556B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 1;
	__asm        je     near ptr 0x0049556B;
// LINE 74:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004954CE;
// LINE 75:
	__asm        jmp    near ptr 0x00495570;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00495575
int32_t SkyImage::LoadImageA() {
	char * pDestinationImage;
	struct VRResource* vrResource;
	int32_t i;
	char[260] szFullSkyImagePath;
	char * pSourceImage;
	struct VRBmpHdr* bmpHeader;

// LINE 93:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x11C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        jne    near ptr 0x004955B8;
// LINE 103:
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A120];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 104:
	__asm        jmp    near ptr 0x004955D1;
// LINE 105:
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A124];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 107:
	__asm        push   0x59A13C;
	__asm        push   3;
	__asm        lea    eax, szFullSkyImagePath[0];
	__asm        push   eax;
	__asm        call   0x004D5356;
	__asm        add    esp, 0xC;
	__asm        mov    vrResource, eax;
// LINE 108:
	__asm        cmp    vrResource, 0;
	__asm        jne    near ptr 0x00495601;
// LINE 109:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004958E2;
// LINE 112:
	__asm        push   0;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 113:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 114:
	__asm        mov    eax, bmpHeader;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 2;
	__asm        add    eax, 0xC;
	__asm        add    pSourceImage, eax;
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004956E1;
// LINE 118:
	__asm        jmp    near ptr 0x00495647;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestinationImage, eax;
// LINE 119:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0049566B;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x138], ecx;
	__asm        jle    near ptr 0x004956CB;
// LINE 120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        push   eax;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 121:
	__asm        jmp    near ptr 0x004956A8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    pDestinationImage, eax;
// LINE 122:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        add    pSourceImage, eax;
// LINE 123:
	__asm        jmp    near ptr 0x00495665;
// LINE 124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 126:
	__asm        jmp    near ptr 0x004956E8;
// LINE 127:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004958E2;
// LINE 133:
	__asm        cmp    dword ptr ds:[0x5B476C], 0;
	__asm        je     near ptr 0x004958C9;
// LINE 136:
	__asm        push   2;
	__asm        mov    eax, ds:[0x5B476C];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 137:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 138:
	__asm        add    pDestinationImage, 0x40C;
// LINE 141:
	__asm        push   1;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 142:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 143:
	__asm        add    pSourceImage, 0x40C;
// LINE 146:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 149:
	__asm        push   0x27;
	__asm        mov    eax, ds:[0x5B476C];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 150:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 151:
	__asm        add    pDestinationImage, 0x40C;
// LINE 154:
	__asm        push   2;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 155:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 156:
	__asm        add    pSourceImage, 0x40C;
// LINE 159:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 162:
	__asm        push   0x28;
	__asm        mov    eax, ds:[0x5B476C];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 163:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 164:
	__asm        add    pDestinationImage, 0x40C;
// LINE 167:
	__asm        push   3;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 168:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 169:
	__asm        add    pSourceImage, 0x40C;
// LINE 172:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 176:
	__asm        push   0x14;
	__asm        mov    eax, ds:[0x5B476C];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 177:
	__asm        mov    eax, bmpHeader;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestinationImage, eax;
// LINE 180:
	__asm        push   4;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 181:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 182:
	__asm        add    pSourceImage, 0x40C;
// LINE 185:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 188:
	__asm        push   0xD;
	__asm        mov    eax, ds:[0x5B476C];
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 189:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pDestinationImage, eax;
// LINE 190:
	__asm        add    pDestinationImage, 0x40C;
// LINE 193:
	__asm        push   5;
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D6246;
	__asm        add    esp, 8;
	__asm        mov    bmpHeader, eax;
// LINE 194:
	__asm        mov    eax, bmpHeader;
	__asm        mov    pSourceImage, eax;
// LINE 195:
	__asm        add    pSourceImage, 0x40C;
// LINE 198:
	__asm        push   0x10000;
	__asm        mov    eax, pSourceImage;
	__asm        push   eax;
	__asm        mov    eax, pDestinationImage;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 203:
	__asm        mov    eax, vrResource;
	__asm        push   eax;
	__asm        call   0x004D5872;
	__asm        add    esp, 4;
// LINE 204:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004958E2;
// LINE 205:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004958e7
unsigned long SkyImage::Compose(class CBackBuffer* pDestImage, int32_t nDestinationWidth) {
	long len2;
	int32_t pitch;
	long start_col;
	long len1;
	struct SparkalRect rectDestination;
	int32_t altdiff;
	struct SparkalRect rectSource;
	long start_row;

// LINE 213:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 218:
	__asm        jmp    near ptr 0x004958F8;
// LINE 219:
	__asm        jmp    near ptr 0x004958FD;
// LINE 224:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x144];
	__asm        mov    altdiff, eax;
// LINE 226:
	__asm        mov    eax, ds:[0x6BF1B0];
	__asm        mov    pitch, eax;
// LINE 227:
	__asm        cmp    pitch, 0x7080000;
	__asm        jle    near ptr 0x0049592A;
// LINE 228:
	__asm        sub    pitch, 0xE100000;
// LINE 232:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x138];
	__asm        dec    ebx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, altdiff;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, pitch;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        add    ebx, eax;
	__asm        mov    start_row, ebx;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_row;
	__asm        cmp    [eax+0x138], ecx;
	__asm        jg     near ptr 0x00495989;
// LINE 235:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    near ptr 0x00495B2B;
// LINE 236:
	__asm        cmp    start_row, 0;
	__asm        jge    near ptr 0x0049599A;
// LINE 237:
	__asm        mov    start_row, 0;
// LINE 241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x6BF1AC];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    start_col, eax;
// LINE 244:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_col;
	__asm        cmp    [eax+0x134], ecx;
	__asm        jg     near ptr 0x004959DA;
// LINE 245:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x134];
	__asm        neg    eax;
	__asm        sub    start_col, eax;
// LINE 249:
	__asm        mov    eax, start_col;
	__asm        add    eax, nDestinationWidth;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x134];
	__asm        jle    near ptr 0x00495A0F;
// LINE 250:
	__asm        mov    eax, start_col;
	__asm        add    eax, nDestinationWidth;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x134];
	__asm        mov    len2, eax;
// LINE 251:
	__asm        mov    eax, nDestinationWidth;
	__asm        sub    eax, len2;
	__asm        mov    len1, eax;
// LINE 253:
	__asm        jmp    near ptr 0x00495A1C;
// LINE 254:
	__asm        mov    len2, 0;
// LINE 255:
	__asm        mov    eax, nDestinationWidth;
	__asm        mov    len1, eax;
// LINE 261:
	__asm        mov    eax, start_row;
	__asm        mov    rectSource.top, eax;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    rectSource.bottom, eax;
// LINE 265:
	__asm        mov    eax, start_col;
	__asm        mov    rectSource.left, eax;
// LINE 266:
	__asm        mov    eax, len1;
	__asm        add    eax, start_col;
	__asm        mov    rectSource.right, eax;
// LINE 268:
	__asm        cmp    dword ptr ds:[0x598EBC], 0x10;
	__asm        jne    near ptr 0x00495AC8;
// LINE 270:
	__asm        mov    rectDestination.top, 0;
// LINE 271:
	__asm        mov    rectDestination.left, 0;
// LINE 272:
	__asm        mov    eax, len1;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.right, eax;
// LINE 273:
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.bottom, eax;
// LINE 274:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 277:
	__asm        cmp    len2, 0;
	__asm        je     near ptr 0x00495AC3;
// LINE 278:
	__asm        mov    rectSource.left, 0;
// LINE 279:
	__asm        mov    eax, len2;
	__asm        mov    rectSource.right, eax;
// LINE 280:
	__asm        mov    eax, len1;
	__asm        add    eax, eax;
	__asm        mov    rectDestination.left, eax;
// LINE 281:
	__asm        mov    eax, len2;
	__asm        add    eax, eax;
	__asm        add    eax, rectDestination.left;
	__asm        mov    rectDestination.right, eax;
// LINE 282:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 285:
	__asm        jmp    near ptr 0x00495B21;
// LINE 289:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046F948;
// LINE 292:
	__asm        cmp    len2, 0;
	__asm        je     near ptr 0x00495B21;
// LINE 293:
	__asm        mov    rectSource.left, 0;
// LINE 294:
	__asm        mov    eax, len2;
	__asm        mov    rectSource.right, eax;
// LINE 296:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, len1;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046F948;
// LINE 299:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00495B2B;
// LINE 300:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}



// Contribution: 2:00002090-000020f7 Module: 20, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591090
// ??_7SkyImage@@6B@


// Contribution: 3:00003120-0000313c Module: 20, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a120
// SZ_SKY_DAY_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a124
// SZ_SKY_NIGHT_IMAGE_FILE_NAME


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: gridrend.asm
// GLOBAL: COPTER_D 0x00662820
// _GridProjectEnd
// GLOBAL: COPTER_D 0x0067ed20
// _G_terr_maxalt

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1ac
// cameraHeading

// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1b0
// cameraPitch
