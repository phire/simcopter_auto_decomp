// Module: Skyimage.obj
// Source: C:\Copter\source\sparkal\Skyimage.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ class SkyImage (forward reference);
// VTABLE: COPTER_D 0x00591090
class SkyImage : public CBackBuffer
{ // packed(0x150 bytes) TI: 0x17e3
	enum SkyType {
		nSkyTypeDay = 0,
		nSkyTypeNight = 1,
	};
public:
	void SkyImage(int32_t, int32_t, int32_t);
	int32_t LoadImageA();
	void SwitchToSkyType(enum SkyImage::SkyType);
	void SwitchToProperSkyType();
	void ToggleSkyType();
	virtual unsigned long Compose(/*packed*/ class CBackBuffer*, int32_t); // vtable+0x64
	/*+0x134*/ int32_t nBitmapWidth;
	/*+0x138*/ int32_t nBitmapHeight;
	/*+0x13c*/ int32_t nSkyType;
protected:
	/*+0x140*/ int32_t fpHorizontalPixelRatio;
	/*+0x144*/ int32_t fpMinimumAltitude;
	/*+0x148*/ int32_t fpAltitudePixelRatio;
	/*+0x14c*/ int32_t fpPitchPixelRatio;
};

// Type: int32_t;

// Type: void;

// Type: enum SkyImage::SkyType;
enum SkyType {
	nSkyTypeDay = 0,
	nSkyTypeNight = 1,
};

// Type: /*packed*/ struct VRResource (forward reference);
struct VRResource{ // packed(0x10 bytes) TI: 0x18ae
	/*+0x0*/   char * mem;
	/*+0x4*/   int32_t mempoolid;
	/*+0x8*/   int32_t type;
	/*+0xc*/   int32_t entry;
};

// Type: char;

// Type: /*packed*/ struct VRBmpHdr (forward reference);
struct VRBmpHdr{ // packed(0x10 bytes) TI: 0x2312
	/*+0x0*/   /*packed*/ struct VRBmpInfo info; // 0xc bytes
	/*+0xc*/   int32_t ScanOffset[1];
};

// Type: /*packed*/ class CBackBuffer (forward reference);
// VTABLE: COPTER_D 0x00590808
class CBackBuffer : public IBackBuffer
{ // packed(0x134 bytes) TI: 0x2843
public:
	void CBackBuffer(long, long, const /*packed*/ struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	virtual void InitializeMemberVariables(); // vtable+0x28
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock() /* override */;
	virtual unsigned long Unlock() /* override */;
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, /*packed*/ struct SparkalColor*);
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long) /* override */;
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x2c
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalRect&, const /*packed*/ struct SparkalRect&); // vtable+0x30
	virtual unsigned long Duplicate(/*packed*/ class CBackBuffer*, int32_t); // vtable+0x34
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x38
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0x3c
	void UpdatePalette(long, long, const /*packed*/ struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long) /* override */;
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(/*packed*/ class MFont*);
	void SetFontColor(/*packed*/ struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(/*packed*/ struct SparkalColor&);
	void SetColorIndex(int32_t);
	virtual unsigned long DrawLine(long, long, long, long, long); // vtable+0x40
	virtual unsigned long FillRect(long, const /*packed*/ struct SparkalRect*); // vtable+0x44
	virtual unsigned long DrawBufferText(char *, long, unsigned long, const /*packed*/ class MRect&, /*packed*/ class MFont*); // vtable+0x48
	virtual unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, /*packed*/ class MFont*); // vtable+0x4c
	virtual unsigned long DrawLineUnclipped(long, long, long, long, long); // vtable+0x50
	virtual unsigned long DrawLineClipped(long, long, long, long, long); // vtable+0x54
	virtual unsigned long DrawRectangleOutline(const /*packed*/ struct SparkalRect&, long); // vtable+0x58
	virtual unsigned long DrawRectangleOutlineUnclipped(const /*packed*/ struct SparkalRect&, long); // vtable+0x5c
	long IsLost();
	long Restore();
	/*+0x18*/  char * szFilePath;
	/*+0x1c*/  /*packed*/ struct tagRECT rectDirectDrawBuffer; // 0x10 bytes
protected:
	/*+0x2c*/  int32_t bSurfacePrimary;
	/*+0x30*/  int32_t bSurfaceTransparent;
	/*+0x34*/  /*packed*/ class MFont *mFont;
	/*+0x38*/  /*packed*/ struct SparkalColor colorFontCurrent;
	/*+0x3c*/  /*packed*/ struct SparkalColor colorCurrent;
	/*+0x40*/  int32_t nColorIndexFontCurrent;
	/*+0x44*/  int32_t nColorIndexCurrent;
	/*+0x48*/  int32_t nColorIndexTransparent;
	/*+0x4c*/  /*packed*/ struct IDirectDrawSurface *mpFrontSurface;
	/*+0x50*/  /*packed*/ struct IDirectDrawSurface *mpBackSurface;
	/*+0x54*/  /*packed*/ struct IDirectDrawPalette *mpPalette;
	/*+0x58*/  /*packed*/ struct _DDSURFACEDESC mDDdesc; // 0x6c bytes
	/*+0xc4*/  /*packed*/ struct _DDBLTFX mDDBltFx; // 0x64 bytes
	/*+0x128*/ void * __ptr32 hPen;
	/*+0x12c*/ int32_t nPenThickness;
	/*+0x130*/ /*packed*/ struct SparkalColor colorPenCurrent;
	virtual /*packed*/ struct IDirectDrawSurface* GetDDSurface(); // vtable+0x60
};

// Type: long;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: unsigned long;

// Type: /*packed*/ class IBackBuffer;
// VTABLE: COPTER_D 0x005907e0
class IBackBuffer : public IFlatImage
{ // packed(0x18 bytes) TI: 0x283f
public:
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long); // vtable+0x1c
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long); // vtable+0x20
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long); // vtable+0x24
};

// Type: /*packed*/ class CBackBuffer;
// VTABLE: COPTER_D 0x00590808
class CBackBuffer : public IBackBuffer
{ // packed(0x134 bytes) TI: 0x2843
public:
	void CBackBuffer(long, long, const /*packed*/ struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	virtual void InitializeMemberVariables(); // vtable+0x28
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock() /* override */;
	virtual unsigned long Unlock() /* override */;
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, /*packed*/ struct SparkalColor*);
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long) /* override */;
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x2c
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalRect&, const /*packed*/ struct SparkalRect&); // vtable+0x30
	virtual unsigned long Duplicate(/*packed*/ class CBackBuffer*, int32_t); // vtable+0x34
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x38
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0x3c
	void UpdatePalette(long, long, const /*packed*/ struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long) /* override */;
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(/*packed*/ class MFont*);
	void SetFontColor(/*packed*/ struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(/*packed*/ struct SparkalColor&);
	void SetColorIndex(int32_t);
	virtual unsigned long DrawLine(long, long, long, long, long); // vtable+0x40
	virtual unsigned long FillRect(long, const /*packed*/ struct SparkalRect*); // vtable+0x44
	virtual unsigned long DrawBufferText(char *, long, unsigned long, const /*packed*/ class MRect&, /*packed*/ class MFont*); // vtable+0x48
	virtual unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, /*packed*/ class MFont*); // vtable+0x4c
	virtual unsigned long DrawLineUnclipped(long, long, long, long, long); // vtable+0x50
	virtual unsigned long DrawLineClipped(long, long, long, long, long); // vtable+0x54
	virtual unsigned long DrawRectangleOutline(const /*packed*/ struct SparkalRect&, long); // vtable+0x58
	virtual unsigned long DrawRectangleOutlineUnclipped(const /*packed*/ struct SparkalRect&, long); // vtable+0x5c
	long IsLost();
	long Restore();
	/*+0x18*/  char * szFilePath;
	/*+0x1c*/  /*packed*/ struct tagRECT rectDirectDrawBuffer; // 0x10 bytes
protected:
	/*+0x2c*/  int32_t bSurfacePrimary;
	/*+0x30*/  int32_t bSurfaceTransparent;
	/*+0x34*/  /*packed*/ class MFont *mFont;
	/*+0x38*/  /*packed*/ struct SparkalColor colorFontCurrent;
	/*+0x3c*/  /*packed*/ struct SparkalColor colorCurrent;
	/*+0x40*/  int32_t nColorIndexFontCurrent;
	/*+0x44*/  int32_t nColorIndexCurrent;
	/*+0x48*/  int32_t nColorIndexTransparent;
	/*+0x4c*/  /*packed*/ struct IDirectDrawSurface *mpFrontSurface;
	/*+0x50*/  /*packed*/ struct IDirectDrawSurface *mpBackSurface;
	/*+0x54*/  /*packed*/ struct IDirectDrawPalette *mpPalette;
	/*+0x58*/  /*packed*/ struct _DDSURFACEDESC mDDdesc; // 0x6c bytes
	/*+0xc4*/  /*packed*/ struct _DDBLTFX mDDBltFx; // 0x64 bytes
	/*+0x128*/ void * __ptr32 hPen;
	/*+0x12c*/ int32_t nPenThickness;
	/*+0x130*/ /*packed*/ struct SparkalColor colorPenCurrent;
	virtual /*packed*/ struct IDirectDrawSurface* GetDDSurface(); // vtable+0x60
};

// Type: /*packed*/ class IFlatImage;
// VTABLE: COPTER_D 0x00591050
class IFlatImage{ // packed(0x18 bytes) TI: 0x13a1
public:
	void IFlatImage();
	virtual unsigned long Lock(); // vtable+0x0
	virtual unsigned long Unlock(); // vtable+0x4
	unsigned long GetLockCount();
	virtual void SetTransparentColor(int32_t, long); // vtable+0x8
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0xc
	unsigned long Compose(/*packed*/ class IFlatImage*, long, long);
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long); // vtable+0x10
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, /*packed*/ struct SparkalRect, /*packed*/ struct SparkalRect); // vtable+0x14
	virtual unsigned long FillRect(long, /*packed*/ struct SparkalRect*); // vtable+0x18
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	/*+0x4*/   unsigned long mLockCount;
	/*+0x8*/   long mWidth;
	/*+0xc*/   long mHeight;
	/*+0x10*/  void * __ptr32 mpBits;
	/*+0x14*/  long mStride;
};



// Contribution: 1:00094400-00094b31 Module: 20, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00495400
void SkyImage::SkyImage(int32_t nNewSkyType, int32_t nNewBitmapWidth, int32_t nNewBitmapHeight) {

	this->CBackBuffer::CBackBuffer(nNewBitmapWidth, nNewBitmapHeight, 0x0);
	this->nSkyType = nNewSkyType;
	this-><SkyImage+0x00> = 0x591090;
// LINE 31:
	this->nBitmapWidth = 0x280;
// LINE 32:
	this->nBitmapHeight = 0xc8;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0xE10;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
// LINE 42:
	this->fpMinimumAltitude = (G_terr_maxalt + 0xc80000);
// LINE 46:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
// LINE 49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, 0x320;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
// LINE 51:
	this->SkyImage::LoadImageA();
// LINE 52:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004954ce
void SkyImage::SwitchToSkyType(enum SkyImage::SkyType nNewSkyType) {
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewSkyType;
	__asm        cmp    [eax+0x13C], ecx;
	__asm        je     _T32;
// LINE 61:
	this->nSkyType = nNewSkyType;
// LINE 62:
	this->SkyImage::LoadImageA();
// LINE 64:
_T32:
	return;
}

// FUNCTION: COPTER_D 0x0049550c
void SkyImage::SwitchToProperSkyType() {
// LINE 71:
	__asm        cmp    G_daynight, 0;
	__asm        jne    _T38;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        je     _T38;
// LINE 72:
	this->SkyImage::SwitchToSkyType(0x0);
// LINE 73:
	__asm        jmp    _T5f;
_T38:
	__asm        cmp    G_daynight, 1;
	__asm        jne    _T5f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 1;
	__asm        je     _T5f;
// LINE 74:
	this->SkyImage::SwitchToSkyType(0x1);
// LINE 75:
_T5f:
	return;
}

// FUNCTION: COPTER_D 0x00495575
int32_t SkyImage::LoadImageA() {
	/*bp-0x4*/   /*packed*/ struct VRBmpHdr *bmpHeader;
	/*bp-0x8*/   char * pSourceImage;
	/*bp-0x10c*/ char szFullSkyImagePath[260]; // 0x104 bytes
	/*bp-0x110*/ int32_t i;
	/*bp-0x114*/ /*packed*/ struct VRResource *vrResource;
	/*bp-0x118*/ char * pDestinationImage;

// LINE 102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x13C], 0;
	__asm        jne    _T43;
// LINE 103:
	GetPathForFile(0x6, 0x0, SZ_SKY_DAY_IMAGE_FILE_NAME, szFullSkyImagePath[0]);
// LINE 104:
	__asm        jmp    _T5c;
// LINE 105:
_T43:
	GetPathForFile(0x6, 0x0, SZ_SKY_NIGHT_IMAGE_FILE_NAME, szFullSkyImagePath[0]);
// LINE 107:
_T5c:
	vrResource = VRLoadResource(szFullSkyImagePath[0], 0x3, 0x59a13c);
// LINE 108:
	__asm        cmp    vrResource, 0;
	__asm        jne    _T8c;
// LINE 109:
	return 0x0;
// LINE 112:
_T8c:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x0);
// LINE 113:
	pSourceImage = bmpHeader;
// LINE 114:
	pSourceImage += ((bmpHeader->info.height << 0x2) + 0xc);
// LINE 117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        test   eax, eax;
	__asm        je     _T16c;
// LINE 118:
	__asm        jmp    _Td2;
_Td2:
	pDestinationImage = this->mpBits;
// LINE 119:
_FOR_f0:
	for (i = 0x0; (this->nBitmapHeight > i); i++) {
		// LINE 120:
			memcpy(pDestinationImage, pSourceImage, this->nBitmapWidth);
		// LINE 121:
			__asm        jmp    _T133;
		_T133:
			pDestinationImage += this->mStride;
		// LINE 122:
			pSourceImage += this->nBitmapWidth;
	}
// LINE 124:
_T156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 126:
	__asm        jmp    _T173;
// LINE 127:
_T16c:
	return 0x0;
// LINE 133:
_T173:
	__asm        cmp    G_restex, 0;
	__asm        je     _T354;
// LINE 136:
	bmpHeader = VRInt2BmpHdr(G_restex, 0x2);
// LINE 137:
	pDestinationImage = bmpHeader;
// LINE 138:
	pDestinationImage += 0x40c;
// LINE 141:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x1);
// LINE 142:
	pSourceImage = bmpHeader;
// LINE 143:
	pSourceImage += 0x40c;
// LINE 146:
	memcpy(pDestinationImage, pSourceImage, 0x10000);
// LINE 149:
	bmpHeader = VRInt2BmpHdr(G_restex, 0x27);
// LINE 150:
	pDestinationImage = bmpHeader;
// LINE 151:
	pDestinationImage += 0x40c;
// LINE 154:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x2);
// LINE 155:
	pSourceImage = bmpHeader;
// LINE 156:
	pSourceImage += 0x40c;
// LINE 159:
	memcpy(pDestinationImage, pSourceImage, 0x10000);
// LINE 162:
	bmpHeader = VRInt2BmpHdr(G_restex, 0x28);
// LINE 163:
	pDestinationImage = bmpHeader;
// LINE 164:
	pDestinationImage += 0x40c;
// LINE 167:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x3);
// LINE 168:
	pSourceImage = bmpHeader;
// LINE 169:
	pSourceImage += 0x40c;
// LINE 172:
	memcpy(pDestinationImage, pSourceImage, 0x10000);
// LINE 176:
	bmpHeader = VRInt2BmpHdr(G_restex, 0x14);
// LINE 177:
	pDestinationImage = bmpHeader-><VRBmpHdr+0x10>;
// LINE 180:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x4);
// LINE 181:
	pSourceImage = bmpHeader;
// LINE 182:
	pSourceImage += 0x40c;
// LINE 185:
	memcpy(pDestinationImage, pSourceImage, 0x10000);
// LINE 188:
	bmpHeader = VRInt2BmpHdr(G_restex, 0xd);
// LINE 189:
	pDestinationImage = bmpHeader;
// LINE 190:
	pDestinationImage += 0x40c;
// LINE 193:
	bmpHeader = VRInt2BmpHdr(vrResource, 0x5);
// LINE 194:
	pSourceImage = bmpHeader;
// LINE 195:
	pSourceImage += 0x40c;
// LINE 198:
	memcpy(pDestinationImage, pSourceImage, 0x10000);
// LINE 203:
_T354:
	VRUnLoadResource(vrResource);
// LINE 204:
	return 0x1;
// LINE 205:
}

// FUNCTION: COPTER_D 0x004958e7
unsigned long SkyImage::Compose(/*packed*/ class CBackBuffer *pDestImage, int32_t nDestinationWidth) {
	/*bp-0x4*/   long start_row;
	/*bp-0x14*/  /*packed*/ struct SparkalRect rectSource; // 0x10 bytes
	/*bp-0x18*/  int32_t altdiff;
	/*bp-0x28*/  /*packed*/ struct SparkalRect rectDestination; // 0x10 bytes
	/*bp-0x2c*/  long len1;
	/*bp-0x30*/  long start_col;
	/*bp-0x34*/  int32_t pitch;
	/*bp-0x38*/  long len2;

// LINE 218:
	__asm        jmp    _T11;
// LINE 219:
_T11:
	__asm        jmp    _T16;
// LINE 224:
_T16:
	altdiff = (ViewState.world_pos.y - this->fpMinimumAltitude);
// LINE 226:
	pitch = cameraPitch;
// LINE 227:
	__asm        cmp    pitch, 0x7080000;
	__asm        jle    _T43;
// LINE 228:
	pitch -= 0xe100000;
// LINE 232:
_T43:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x138];
	__asm        dec    ebx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, altdiff;
	__asm        push   eax;
	__asm        call   _FixedMul;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, pitch;
	__asm        push   eax;
	__asm        call   _FixedMul;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        add    ebx, eax;
	__asm        mov    start_row, ebx;
// LINE 234:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_row;
	__asm        cmp    [eax+0x138], ecx;
	__asm        jg     _Ta2;
// LINE 235:
	return 0x80000000;
// LINE 236:
_Ta2:
	__asm        cmp    start_row, 0;
	__asm        jge    _Tb3;
// LINE 237:
	start_row = 0x0;
// LINE 241:
_Tb3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, cameraHeading;
	__asm        push   eax;
	__asm        call   _FixedMul;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    start_col, eax;
// LINE 244:
	__asm        mov    eax, this;
	__asm        mov    ecx, start_col;
	__asm        cmp    [eax+0x134], ecx;
	__asm        jg     _Tf3;
// LINE 245:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x134];
	__asm        neg    eax;
	__asm        sub    start_col, eax;
// LINE 249:
_Tf3:
	__asm        mov    eax, start_col;
	__asm        add    eax, nDestinationWidth;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x134];
	__asm        jle    _T128;
// LINE 250:
	len2 = ((start_col + nDestinationWidth) - this->nBitmapWidth);
// LINE 251:
	len1 = (nDestinationWidth - len2);
// LINE 253:
	__asm        jmp    _T135;
// LINE 254:
_T128:
	len2 = 0x0;
// LINE 255:
	len1 = nDestinationWidth;
// LINE 261:
_T135:
	rectSource.top = start_row;
// LINE 262:
	rectSource.bottom = this->nBitmapHeight;
// LINE 265:
	rectSource.left = start_col;
// LINE 266:
	rectSource.right = (len1 + start_col);
// LINE 268:
	__asm        cmp    G_video_mode, 0x10;
	__asm        jne    _T1e1;
// LINE 270:
	rectDestination.top = 0x0;
// LINE 271:
	rectDestination.left = 0x0;
// LINE 272:
	rectDestination.right = (len1 + len1);
// LINE 273:
	rectDestination.bottom = ((rectSource.bottom - rectSource.top) + (rectSource.bottom - rectSource.top));
// LINE 274:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 277:
	__asm        cmp    len2, 0;
	__asm        je     _T1dc;
// LINE 278:
	rectSource.left = 0x0;
// LINE 279:
	rectSource.right = len2;
// LINE 280:
	rectDestination.left = (len1 + len1);
// LINE 281:
	rectDestination.right = ((len2 + len2) + rectDestination.left);
// LINE 282:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 285:
_T1dc:
	__asm        jmp    _T23a;
// LINE 289:
_T1e1:
	this->CBackBuffer::Compose(pDestImage, 0x0, 0x0, rectSource.left, rectSource.top, rectSource.right, rectSource.bottom);
// LINE 292:
	__asm        cmp    len2, 0;
	__asm        je     _T23a;
// LINE 293:
	rectSource.left = 0x0;
// LINE 294:
	rectSource.right = len2;
// LINE 296:
	this->CBackBuffer::Compose(pDestImage, len1, 0x0, rectSource.left, rectSource.top, rectSource.right, rectSource.bottom);
// LINE 299:
_T23a:
	return 0x1;
// LINE 300:
}



// Contribution: 2:00002090-000020f7 Module: 20, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SkyImage @ 0x00591090
//   00: CBackBuffer::Lock @ 0x0047006f
//   01: CBackBuffer::Unlock @ 0x00470149
//   02: CBackBuffer::SetTransparentColor @ 0x0046ffe6
//   03: CBackBuffer::Compose @ 0x0046f948
//   04: CBackBuffer::StretchCompose @ 0x0046fe13
//   05: IFlatImage::StretchCompose @ 0x0048f32e
//   06: IFlatImage::FillRect @ 0x0048f56b
//   07: CBackBuffer::Swap @ 0x0046f7bb
//   08: CBackBuffer::SwapRect @ 0x0046f828
//   09: CBackBuffer::StretchRect @ 0x0046ffcc
//   10: CBackBuffer::InitializeMemberVariables @ 0x0046eb58
//   11: CBackBuffer::Compose @ 0x0046fd33
//   12: CBackBuffer::StretchCompose @ 0x0046fd82
//   13: CBackBuffer::Duplicate @ 0x0046fe7c
//   14: CBackBuffer::ComposeNoClip @ 0x0046fce4
//   15: CBackBuffer::ComposeNoClip @ 0x0046fbb1
//   16: CBackBuffer::DrawLine @ 0x0046f5c6
//   17: CBackBuffer::FillRect @ 0x004702f1
//   18: CBackBuffer::DrawBufferText @ 0x0046f403
//   19: CBackBuffer::DrawBufferText @ 0x0046f1bd
//   20: CBackBuffer::DrawLineUnclipped @ 0x00470864
//   21: CBackBuffer::DrawLineClipped @ 0x00470c22
//   22: CBackBuffer::DrawRectangleOutline @ 0x004706e4
//   23: CBackBuffer::DrawRectangleOutlineUnclipped @ 0x004707a4
//   24: CBackBuffer::GetDDSurface @ 0x004704a7
//   25: SkyImage::Compose @ 0x004958e7
//   26 entries



// Contribution: 3:00003120-0000313c Module: 20, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a120
char * SZ_SKY_DAY_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059a124
char * SZ_SKY_NIGHT_IMAGE_FILE_NAME = { 0 /* todo */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: gridrend.asm
// GLOBAL: COPTER_D 0x00662820
void * __ptr32 GridProjectEnd; // Contrib missing

// GLOBAL: COPTER_D 0x0067ed20
int32_t G_terr_maxalt; // Contrib missing


// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1ac
int32_t cameraHeading; // Contrib missing


// WARNING: this global might actually belong to: C:\Copter\source\sparkal\Fileserv.cpp
// GLOBAL: COPTER_D 0x006bf1b0
int32_t cameraPitch; // Contrib missing

