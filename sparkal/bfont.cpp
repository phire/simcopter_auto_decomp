// Module: bfont.obj
// Source: C:\Copter\source\sparkal\bfont.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class BitmappedFont (forward reference);
// VTABLE: COPTER_D 0x005904d0
class BitmappedFont{ // packed(0x54 bytes) TI: 0x2730
	enum PitchType {
		pitchTypeFixed = 0,
		pitchTypeVariable = 1,
	};
public:
	void BitmappedFont(char *, const long);
	void BitmappedFont(/*packed*/ class basic_string<char>&, const long);
	void BitmappedFont();
	void ~BitmappedFont();
	virtual int32_t Initialize(); // vtable+0x0
	virtual void DeInitialize(); // vtable+0x4
	long GetCharSet();
	long GetLanguage();
	long GetCharacterWidth(const char);
	long GetCharHeight();
	int32_t IsCharValid(const char);
	long GetStringWidth(char *, const unsigned long);
	long GetStringVisibleWidth(char *, const unsigned long, unsigned long&);
	long GetCharacterLength(char);
	long CalculateNumberOfLines(char *, const unsigned long, const unsigned long);
	long CalculateWidthOfLines(char *, const unsigned long, const unsigned long);
	long CalculateCharsToFitInWidth(char *, const unsigned long);
	void DrawTextChar(/*unpacked*/ class CBackBuffer*, long, long, const char);
	void DrawTextCharNoClip(/*unpacked*/ class CBackBuffer*, long, long, const char);
	void DrawTextLine(/*unpacked*/ class CBackBuffer*, long, long, char *, const unsigned long);
	void DrawTextLineNoClip(/*unpacked*/ class CBackBuffer*, long, long, char *, const unsigned long);
	void DrawTextPara(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long);
	void DrawTextParaNoClip(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long);
	void DrawTextLineFormat(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextLineFormatNoClip(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextParaFormat(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextParaFormatNoClip(/*unpacked*/ class CBackBuffer*, /*packed*/ class MRect&, char *, const unsigned long, const unsigned long);
	virtual int32_t IsCharBreakingChar(const char); // vtable+0x8
	virtual int32_t IsCharReturnChar(const char); // vtable+0xc
	virtual int32_t IsCharWhitespace(const char); // vtable+0x10
	virtual int32_t CreateImage(); // vtable+0x14
	virtual void DestroyImage(); // vtable+0x18
	virtual int32_t LoadFontInfo(); // vtable+0x1c
	virtual void CalculateCharacterRects(); // vtable+0x20
	int32_t GetIniFileLong(char *, char *, char *, long *);
	int32_t GetIniFileString(char *, char *, char *, char *, const long);
	int32_t GetPathForBitmapFile(char *, char *, char *);
	/*+0x4*/   /*packed*/ class basic_string<char> sFontInfoFilePath; // 0x8 bytes
	/*+0xc*/   /*packed*/ class basic_string<char> sFontBitmapFile; // 0x8 bytes
	/*+0x14*/  /*unpacked*/ class CBackBuffer *myFontImage;
	/*+0x18*/  long lLanguage;
	/*+0x1c*/  long lCharacterSet;
	/*+0x20*/  long lPitchType;
	/*+0x24*/  long lHeight;
	/*+0x28*/  unsigned long nStartCharacter;
	/*+0x2c*/  unsigned long nCharacterCount;
	/*+0x30*/  /*packed*/ class vector<MRect> rectCharacterCells; // 0xc bytes
	/*+0x3c*/  /*packed*/ class vector<MRect> rectCharacters; // 0xc bytes
	/*+0x48*/  /*packed*/ class vector<unsigned char> widthCharacters; // 0xc bytes
};

// Type: void;

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: char *;

// Type: int32_t;

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: char;

// Type: unsigned char;

// Type: unsigned long;

// Type: /*packed*/ class CBackBuffer (forward reference);
// VTABLE: COPTER_D 0x00590808
class CBackBuffer : public IBackBuffer
{ // packed(0x134 bytes) TI: 0x2843
public:
	void CBackBuffer(long, long, const /*packed*/ struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	virtual void InitializeMemberVariables(); // vtable+0x28
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock() /* override */;
	virtual unsigned long Unlock() /* override */;
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, /*packed*/ struct SparkalColor*);
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long) /* override */;
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x2c
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalRect&, const /*packed*/ struct SparkalRect&); // vtable+0x30
	virtual unsigned long Duplicate(/*packed*/ class CBackBuffer*, int32_t); // vtable+0x34
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x38
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0x3c
	void UpdatePalette(long, long, const /*packed*/ struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long) /* override */;
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(/*packed*/ class MFont*);
	void SetFontColor(/*packed*/ struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(/*packed*/ struct SparkalColor&);
	void SetColorIndex(int32_t);
	virtual unsigned long DrawLine(long, long, long, long, long); // vtable+0x40
	virtual unsigned long FillRect(long, const /*packed*/ struct SparkalRect*); // vtable+0x44
	virtual unsigned long DrawBufferText(char *, long, unsigned long, const /*packed*/ class MRect&, /*packed*/ class MFont*); // vtable+0x48
	virtual unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, /*packed*/ class MFont*); // vtable+0x4c
	virtual unsigned long DrawLineUnclipped(long, long, long, long, long); // vtable+0x50
	virtual unsigned long DrawLineClipped(long, long, long, long, long); // vtable+0x54
	virtual unsigned long DrawRectangleOutline(const /*packed*/ struct SparkalRect&, long); // vtable+0x58
	virtual unsigned long DrawRectangleOutlineUnclipped(const /*packed*/ struct SparkalRect&, long); // vtable+0x5c
	long IsLost();
	long Restore();
	/*+0x18*/  char * szFilePath;
	/*+0x1c*/  /*packed*/ struct tagRECT rectDirectDrawBuffer; // 0x10 bytes
protected:
	/*+0x2c*/  int32_t bSurfacePrimary;
	/*+0x30*/  int32_t bSurfaceTransparent;
	/*+0x34*/  /*packed*/ class MFont *mFont;
	/*+0x38*/  /*packed*/ struct SparkalColor colorFontCurrent;
	/*+0x3c*/  /*packed*/ struct SparkalColor colorCurrent;
	/*+0x40*/  int32_t nColorIndexFontCurrent;
	/*+0x44*/  int32_t nColorIndexCurrent;
	/*+0x48*/  int32_t nColorIndexTransparent;
	/*+0x4c*/  /*packed*/ struct IDirectDrawSurface *mpFrontSurface;
	/*+0x50*/  /*packed*/ struct IDirectDrawSurface *mpBackSurface;
	/*+0x54*/  /*packed*/ struct IDirectDrawPalette *mpPalette;
	/*+0x58*/  /*packed*/ struct _DDSURFACEDESC mDDdesc; // 0x6c bytes
	/*+0xc4*/  /*packed*/ struct _DDBLTFX mDDBltFx; // 0x64 bytes
	/*+0x128*/ void * __ptr32 hPen;
	/*+0x12c*/ int32_t nPenThickness;
	/*+0x130*/ /*packed*/ struct SparkalColor colorPenCurrent;
	virtual /*packed*/ struct IDirectDrawSurface* GetDDSurface(); // vtable+0x60
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: long *;

// Type: /*packed*/ class vector<MRect> (forward reference);
class vector<MRect>{ // packed(0xc bytes) TI: 0x15c8
	using vector_allocator = /*packed*/ class allocator<MRect>;
	using value_type = /*packed*/ class MRect;
	using pointer = /*packed*/ class MRect*;
	using iterator = /*packed*/ class MRect*;
	using const_iterator = const /*packed*/ class MRect*;
	using reference = /*packed*/ class MRect&;
	using const_reference = const /*packed*/ class MRect&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<MRect const *,MRect,MRect const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<MRect *,MRect,MRect &,int>;
protected:
	static /*packed*/ class allocator<MRect> static_allocator;
	/*+0x0*/   /*packed*/ class MRect *start;
	/*+0x4*/   /*packed*/ class MRect *finish;
	/*+0x8*/   /*packed*/ class MRect *end_of_storage;
	void insert_aux(/*packed*/ class MRect*, const /*packed*/ class MRect&);
public:
	const /*packed*/ class MRect* begin();
	/*packed*/ class MRect* begin();
	const /*packed*/ class MRect* end();
	/*packed*/ class MRect* end();
	/*unpacked*/ class reverse_iterator<MRect const *,MRect,MRect const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<MRect *,MRect,MRect &,int> rbegin();
	/*unpacked*/ class reverse_iterator<MRect const *,MRect,MRect const &,int> rend();
	/*unpacked*/ class reverse_iterator<MRect *,MRect,MRect &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ class MRect& operator[](uint32_t);
	/*packed*/ class MRect& operator[](uint32_t);
	void vector<MRect>(const /*packed*/ class MRect*, const /*packed*/ class MRect*);
	void vector<MRect>(const /*packed*/ class vector<MRect>&);
	void vector<MRect>(uint32_t, const /*packed*/ class MRect&);
	void vector<MRect>();
	void ~vector<MRect>();
	/*packed*/ class vector<MRect>& operator=(const /*packed*/ class vector<MRect>&);
	void reserve(uint32_t);
	const /*packed*/ class MRect& front();
	/*packed*/ class MRect& front();
	const /*packed*/ class MRect& back();
	/*packed*/ class MRect& back();
	void push_back(const /*packed*/ class MRect&);
	void swap(/*packed*/ class vector<MRect>&);
	void insert(/*packed*/ class MRect*, uint32_t, const /*packed*/ class MRect&);
	void insert(/*packed*/ class MRect*, const /*packed*/ class MRect*, const /*packed*/ class MRect*);
	/*packed*/ class MRect* insert(/*packed*/ class MRect*, const /*packed*/ class MRect&);
	void pop_back();
	void erase(/*packed*/ class MRect*, /*packed*/ class MRect*);
	void erase(/*packed*/ class MRect*);
};

// Type: uint32_t;

// Type: /*packed*/ class vector<unsigned char> (forward reference);
class vector<unsigned char>{ // packed(0xc bytes) TI: 0x1e75
	using vector_allocator = /*packed*/ class allocator<unsigned char>;
	using value_type = unsigned char;
	using pointer = unsigned char *;
	using iterator = unsigned char *;
	using const_iterator = unsigned char *;
	using reference = unsigned char&;
	using const_reference = const unsigned char&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int>;
protected:
	static /*packed*/ class allocator<unsigned char> static_allocator;
	/*+0x0*/   unsigned char * start;
	/*+0x4*/   unsigned char * finish;
	/*+0x8*/   unsigned char * end_of_storage;
	void insert_aux(unsigned char *, const unsigned char&);
public:
	unsigned char * begin();
	unsigned char * begin();
	unsigned char * end();
	unsigned char * end();
	/*unpacked*/ class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int> rbegin();
	/*unpacked*/ class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int> rend();
	/*unpacked*/ class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const unsigned char& operator[](uint32_t);
	unsigned char& operator[](uint32_t);
	void vector<unsigned char>(unsigned char *, unsigned char *);
	void vector<unsigned char>(const /*packed*/ class vector<unsigned char>&);
	void vector<unsigned char>(uint32_t, const unsigned char&);
	void vector<unsigned char>();
	void ~vector<unsigned char>();
	/*packed*/ class vector<unsigned char>& operator=(const /*packed*/ class vector<unsigned char>&);
	void reserve(uint32_t);
	const unsigned char& front();
	unsigned char& front();
	const unsigned char& back();
	unsigned char& back();
	void push_back(const unsigned char&);
	void swap(/*packed*/ class vector<unsigned char>&);
	void insert(unsigned char *, uint32_t, const unsigned char&);
	void insert(unsigned char *, unsigned char *, unsigned char *);
	unsigned char * insert(unsigned char *, const unsigned char&);
	void pop_back();
	void erase(unsigned char *, unsigned char *);
	void erase(unsigned char *);
};

// Type: unsigned char *;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ class IBackBuffer;
// VTABLE: COPTER_D 0x005907e0
class IBackBuffer : public IFlatImage
{ // packed(0x18 bytes) TI: 0x283f
public:
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long); // vtable+0x1c
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long); // vtable+0x20
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long); // vtable+0x24
};

// Type: /*packed*/ class IFlatImage;
// VTABLE: COPTER_D 0x00591050
class IFlatImage{ // packed(0x18 bytes) TI: 0x13a1
public:
	void IFlatImage();
	virtual unsigned long Lock(); // vtable+0x0
	virtual unsigned long Unlock(); // vtable+0x4
	unsigned long GetLockCount();
	virtual void SetTransparentColor(int32_t, long); // vtable+0x8
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0xc
	unsigned long Compose(/*packed*/ class IFlatImage*, long, long);
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long); // vtable+0x10
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, /*packed*/ struct SparkalRect, /*packed*/ struct SparkalRect); // vtable+0x14
	virtual unsigned long FillRect(long, /*packed*/ struct SparkalRect*); // vtable+0x18
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	/*+0x4*/   unsigned long mLockCount;
	/*+0x8*/   long mWidth;
	/*+0xc*/   long mHeight;
	/*+0x10*/  void * __ptr32 mpBits;
	/*+0x14*/  long mStride;
};



// Contribution: 1:000670a0-0006a0c9 Module: 42, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004680a0
void BitmappedFont::BitmappedFont() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;
_T5f:
	this->sFontInfoFilePath.reference = 0x0;
_T69:
	this->sFontInfoFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T78;
_T78:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tcb;

	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tbd;
_Tbd:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _Td5;
_Tcb:
	this->sFontBitmapFile.reference = 0x0;
_Td5:
	this->sFontBitmapFile.c_str_ptr = 0x0;
	__asm        jmp    _Te4;
_Te4:
	this->myFontImage = 0x0;
	this->lLanguage = 0x0;
	this->lCharacterSet = 0x0;
	this->lPitchType = 0x0;
	this->nStartCharacter = 0x0;
	this->nCharacterCount = 0x0;
	this->rectCharacterCells.start = 0x0;
	this->rectCharacterCells.finish = 0x0;
	this->rectCharacterCells.end_of_storage = 0x0;
	__asm        jmp    _T143;
_T143:
	this->rectCharacters.start = 0x0;
	this->rectCharacters.finish = 0x0;
	this->rectCharacters.end_of_storage = 0x0;
	__asm        jmp    _T166;
_T166:
	this->widthCharacters.start = 0x0;
	this->widthCharacters.finish = 0x0;
	this->widthCharacters.end_of_storage = 0x0;
	__asm        jmp    _T189;
_T189:
	this-><vftable> = 0x5904d0;
// LINE 25:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046823f
void BitmappedFont::BitmappedFont(/*packed*/ class basic_string<char>& sNewFontInfoPath, const long lNewLanguage) {

	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T53;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T44;
_T44:
	exit(0x1);
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T7e;

	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T85;
_T7e:
	__asm        mov    dword ptr [ebp-8], 0xFFFFFFFF;
_T85:
	__asm        jmp    _T8a;
_T8a:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Tcb;

	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tcb;

	this->sFontInfoFilePath.reference = sNewFontInfoPath.reference;
	this->sFontInfoFilePath.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T1ad;
_Tcb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1a3;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T17d;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T142;

	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T14e;

	__asm        jmp    _T14e;
_T142:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T14e;
_T14e:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T178;
_T178:
	__asm        jmp    _T186;
_T17d:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T186:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T195;
_T195:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1ad;
_T1a3:
	this->sFontInfoFilePath.reference = 0x0;
_T1ad:
	this->sFontInfoFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T1bc;
_T1bc:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T20f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T201;
_T201:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T219;
_T20f:
	this->sFontBitmapFile.reference = 0x0;
_T219:
	this->sFontBitmapFile.c_str_ptr = 0x0;
	__asm        jmp    _T228;
_T228:
	this->myFontImage = 0x0;
	this->lLanguage = lNewLanguage;
	this->lPitchType = 0x0;
	this->nStartCharacter = 0x0;
	this->nCharacterCount = 0x0;
	this->rectCharacterCells.start = 0x0;
	this->rectCharacterCells.finish = 0x0;
	this->rectCharacterCells.end_of_storage = 0x0;
	__asm        jmp    _T27c;
_T27c:
	this->rectCharacters.start = 0x0;
	this->rectCharacters.finish = 0x0;
	this->rectCharacters.end_of_storage = 0x0;
	__asm        jmp    _T29f;
_T29f:
	this->widthCharacters.start = 0x0;
	this->widthCharacters.finish = 0x0;
	this->widthCharacters.end_of_storage = 0x0;
	__asm        jmp    _T2c2;
_T2c2:
	this-><vftable> = 0x5904d0;
// LINE 38:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00468519
void BitmappedFont::BitmappedFont(char * szNewFontInfoPath, const long lNewLanguage) {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tbc;

	__asm        mov    eax, szNewFontInfoPath;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3a;
_T3a:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T96;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, szNewFontInfoPath;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T91;
_T91:
	__asm        jmp    _T9f;
_T96:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T9f:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tae;
_Tae:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _Tc6;
_Tbc:
	this->sFontInfoFilePath.reference = 0x0;
_Tc6:
	this->sFontInfoFilePath.c_str_ptr = 0x0;
	__asm        jmp    _Td5;
_Td5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T128;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T11a;
_T11a:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    _T132;
_T128:
	this->sFontBitmapFile.reference = 0x0;
_T132:
	this->sFontBitmapFile.c_str_ptr = 0x0;
	__asm        jmp    _T141;
_T141:
	this->myFontImage = 0x0;
	this->lLanguage = lNewLanguage;
	this->lPitchType = 0x0;
	this->nStartCharacter = 0x0;
	this->nCharacterCount = 0x0;
	this->rectCharacterCells.start = 0x0;
	this->rectCharacterCells.finish = 0x0;
	this->rectCharacterCells.end_of_storage = 0x0;
	__asm        jmp    _T195;
_T195:
	this->rectCharacters.start = 0x0;
	this->rectCharacters.finish = 0x0;
	this->rectCharacters.end_of_storage = 0x0;
	__asm        jmp    _T1b8;
_T1b8:
	this->widthCharacters.start = 0x0;
	this->widthCharacters.finish = 0x0;
	this->widthCharacters.end_of_storage = 0x0;
	__asm        jmp    _T1db;
_T1db:
	this-><vftable> = 0x5904d0;
// LINE 50:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0046870c
void BitmappedFont::~BitmappedFont() {

	this-><vftable> = 0x5904d0;
// LINE 58:
	this->BitmappedFont::DestroyImage();
// LINE 59:
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T41;
_T41:
	__asm        jmp    _T46;
_T46:
	__asm        jmp    _T4b;
_T4b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0xC], eax;
__WHILE_54:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     _T71;

	__asm        jmp    _T68;
_T68:
	__asm        add    dword ptr [ebp-0xC], 0x10;
	__asm        jmp    __WHILE_54;
_T68:
	__asm        add    dword ptr [ebp-0xC], 0x10;
	__asm        jmp    __WHILE_54;
_T71:
	__asm        jmp    _T76;
_T76:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T90;
_T90:
	__asm        jmp    _T95;
_T95:
	__asm        jmp    _T9a;
_T9a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
__WHILE_a3:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x34], ecx;
	__asm        je     _Tc0;

	__asm        jmp    _Tb7;
_Tb7:
	__asm        add    dword ptr [ebp-0x14], 0x10;
	__asm        jmp    __WHILE_a3;
_Tb7:
	__asm        add    dword ptr [ebp-0x14], 0x10;
	__asm        jmp    __WHILE_a3;
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tdf;
_Tdf:
	__asm        jmp    _Te4;
_Te4:
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T175;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T175;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T155;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T155:
	__asm        jmp    _T15a;
_T15a:
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        jmp    _T17a;
_T17a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T1a2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1a2:
	__asm        jmp    _T1a7;
_T1a7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T233;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T233;

	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T213;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T213:
	__asm        jmp    _T218;
_T218:
	__asm        jmp    _T21d;
_T21d:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T22e;
_T22e:
	__asm        jmp    _T233;
_T233:
	__asm        jmp    _T238;
_T238:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T260;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T260:
	return;
}

// FUNCTION: COPTER_D 0x00468976
int32_t BitmappedFont::Initialize() {
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
	__asm        jmp    __RETURN;
// LINE 67:
__RETURN:
}

// FUNCTION: COPTER_D 0x00468997
void BitmappedFont::DeInitialize() {
// LINE 74:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 75:
	return;
}

// FUNCTION: COPTER_D 0x004689b8
int32_t BitmappedFont::LoadFontInfo() {
	/*bp-0x100*/ char szBitmapFile[256]; // 0x100 bytes
	/*bp-0x104*/ char * chCurrentRectangle;
	/*bp-0x108*/ int32_t iEnd;
	/*bp-0x10c*/ int32_t i;
	/*bp-0x110c*/ char chRectangleBuffer[4096]; // 0x1000 bytes
	/*bp-0x111c*/ /*packed*/ class MRect rectTemp; // 0x10 bytes

// LINE 86:
	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
// LINE 89:
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        jmp    _T2a;
_T2a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x1154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x1158], eax;
	__asm        jmp    _T4d;
_T4d:
	__asm        mov    eax, [ebp-0x1158];
	__asm        mov    [ebp-0x1148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x114C], eax;
	__asm        mov    eax, [ebp-0x1154];
	__asm        mov    [ebp-0x1150], eax;
__WHILE_74:
	__asm        mov    eax, [ebp-0x114C];
	__asm        cmp    [ebp-0x1150], eax;
	__asm        je     _Tbb;

	__asm        mov    eax, [ebp-0x1150];
	__asm        mov    ecx, [ebp-0x1148];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x1150], 0x10;
	__asm        add    dword ptr [ebp-0x1148], 0x10;
	__asm        jmp    __WHILE_74;

	__asm        mov    eax, [ebp-0x1150];
	__asm        mov    ecx, [ebp-0x1148];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x1150], 0x10;
	__asm        add    dword ptr [ebp-0x1148], 0x10;
	__asm        jmp    __WHILE_74;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x1148];
	__asm        mov    [ebp-0x1140], eax;
	__asm        mov    eax, [ebp-0x1140];
	__asm        mov    [ebp-0x1144], eax;
__WHILE_d8:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1144];
	__asm        cmp    [eax+0x34], ecx;
	__asm        je     _Tfe;

	__asm        jmp    _Tf2;
_Tf2:
	__asm        add    dword ptr [ebp-0x1144], 0x10;
	__asm        jmp    __WHILE_d8;
_Tf2:
	__asm        add    dword ptr [ebp-0x1144], 0x10;
	__asm        jmp    __WHILE_d8;
_Tfe:
	__asm        jmp    _T103;
_T103:
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x1154];
	__asm        sub    ecx, [ebp-0x1158];
	__asm        and    ecx, 0xFFFFFFF0;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x34], eax;
	__asm        jmp    _T126;
// LINE 90:
_T126:
	__asm        jmp    _T12b;
_T12b:
	__asm        jmp    _T130;
_T130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x1138], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0x113C], eax;
	__asm        jmp    _T153;
_T153:
	__asm        mov    eax, [ebp-0x113C];
	__asm        mov    [ebp-0x112C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x1130], eax;
	__asm        mov    eax, [ebp-0x1138];
	__asm        mov    [ebp-0x1134], eax;
__WHILE_17a:
	__asm        mov    eax, [ebp-0x1130];
	__asm        cmp    [ebp-0x1134], eax;
	__asm        je     _T1ad;

	__asm        mov    eax, [ebp-0x1134];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x112C];
	__asm        mov    [ecx], al;
	__asm        inc    dword ptr [ebp-0x1134];
	__asm        inc    dword ptr [ebp-0x112C];
	__asm        jmp    __WHILE_17a;

	__asm        mov    eax, [ebp-0x1134];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x112C];
	__asm        mov    [ecx], al;
	__asm        inc    dword ptr [ebp-0x1134];
	__asm        inc    dword ptr [ebp-0x112C];
	__asm        jmp    __WHILE_17a;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, [ebp-0x112C];
	__asm        mov    [ebp-0x1128], eax;
	__asm        jmp    _T1c3;
_T1c3:
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x1138];
	__asm        sub    ecx, [ebp-0x113C];
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x4C], eax;
	__asm        jmp    _T1e3;
// LINE 92:
_T1e3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T21d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        mov    eax, [ebp-0x116C];
	__asm        mov    [ebp-0x1174], eax;
	__asm        mov    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T21d:
	__asm        jmp    _T222;
_T222:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T246;
_T246:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2e3;

	__asm        jmp    _T25e;
_T25e:
	__asm        jmp    _T263;
_T263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T291;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1180], eax;
	__asm        jmp    _T2a0;

	__asm        jmp    _T2a0;
_T291:
	__asm        mov    dword ptr [ebp-0x1180], 0;
	__asm        jmp    _T2a0;
_T2a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1184], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1188], eax;
	__asm        mov    eax, [ebp-0x1184];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1180];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1188];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2e3;
_T2e3:
	__asm        jmp    _T2e8;
_T2e8:
	__asm        mov    byte ptr [ebp-0x1170], 0;
	__asm        jmp    _T2f4;
_T2f4:
	__asm        lea    eax, [ebp-0x1170];
	__asm        mov    [ebp-0x1178], eax;
	__asm        jmp    _T305;
_T305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x117C], eax;
	__asm        mov    eax, [ebp-0x1178];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x117C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T335;
_T335:
	__asm        jmp    _T33a;
_T33a:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599354;
	__asm        push   0x59935C;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T39d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x118C], eax;
	__asm        mov    eax, [ebp-0x118C];
	__asm        mov    [ebp-0x1194], eax;
	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T39d:
	__asm        jmp    _T3a2;
_T3a2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3c6;
_T3c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T463;

	__asm        jmp    _T3de;
_T3de:
	__asm        jmp    _T3e3;
_T3e3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T411;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        jmp    _T420;

	__asm        jmp    _T420;
_T411:
	__asm        mov    dword ptr [ebp-0x11A0], 0;
	__asm        jmp    _T420;
_T420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11A8], eax;
	__asm        mov    eax, [ebp-0x11A4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T463;
_T463:
	__asm        jmp    _T468;
_T468:
	__asm        mov    byte ptr [ebp-0x1190], 0;
	__asm        jmp    _T474;
_T474:
	__asm        lea    eax, [ebp-0x1190];
	__asm        mov    [ebp-0x1198], eax;
	__asm        jmp    _T485;
_T485:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x119C], eax;
	__asm        mov    eax, [ebp-0x1198];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x119C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T4b5;
_T4b5:
	__asm        jmp    _T4ba;
_T4ba:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599364;
	__asm        push   0x59936C;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T51d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        mov    eax, [ebp-0x11AC];
	__asm        mov    [ebp-0x11B4], eax;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T51d:
	__asm        jmp    _T522;
_T522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T546;
_T546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5e3;

	__asm        jmp    _T55e;
_T55e:
	__asm        jmp    _T563;
_T563:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T591;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        jmp    _T5a0;

	__asm        jmp    _T5a0;
_T591:
	__asm        mov    dword ptr [ebp-0x11C0], 0;
	__asm        jmp    _T5a0;
_T5a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11C8], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5e3;
_T5e3:
	__asm        jmp    _T5e8;
_T5e8:
	__asm        mov    byte ptr [ebp-0x11B0], 0;
	__asm        jmp    _T5f4;
_T5f4:
	__asm        lea    eax, [ebp-0x11B0];
	__asm        mov    [ebp-0x11B8], eax;
	__asm        jmp    _T605;
_T605:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x11BC], eax;
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx], al;
	__asm        jmp    _T635;
_T635:
	__asm        jmp    _T63a;
_T63a:
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599378;
	__asm        push   0x599384;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 95:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T69d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T69d:
	__asm        jmp    _T6a2;
_T6a2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6c6;
_T6c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T735;

	__asm        jmp    _T6de;
_T6de:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11E8], eax;
	__asm        mov    eax, [ebp-0x11E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T735;
_T735:
	__asm        jmp    _T73a;
_T73a:
	__asm        mov    byte ptr [ebp-0x11D0], 0;
	__asm        jmp    _T746;
_T746:
	__asm        lea    eax, [ebp-0x11D0];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        jmp    _T757;
_T757:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11DC];
	__asm        mov    [ecx], al;
	__asm        jmp    _T787;
_T787:
	__asm        jmp    _T78c;
_T78c:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599390;
	__asm        push   0x5993A0;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 96:
	__asm        mov    eax, this;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0x5993AC;
	__asm        push   0x5993BC;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 97:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0x5993C8;
	__asm        push   0x5993D8;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileLong;
// LINE 98:
	__asm        push   0x1000;
	__asm        lea    eax, chRectangleBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0x5993E4;
	__asm        push   0x5993F0;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileString;
// LINE 99:
	__asm        push   0x100;
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        push   0x5993FC;
	__asm        push   0x599410;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetIniFileString;
// LINE 100:
	__asm        jmp    _T876;
_T876:
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T8a0;
// LINE 103:
_T8a0:
	chCurrentRectangle = chRectangleBuffer[0];
// LINE 104:
_FOR_8ca:
	i = 0x0;
	iEnd = this->nCharacterCount;
	__asm        jmp    _FOR_COND_8ca;
_FOR_NEXT_8ca:
	for (; (iEnd > i); i++) {
		// LINE 106:
			sscanf(rectTemp.bottom, rectTemp.right, rectTemp.top, rectTemp.left, 0x59941c, chCurrentRectangle);
		// LINE 107:
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x38];
			__asm        cmp    [eax+0x34], ecx;
			__asm        je     _T992;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x34];
			__asm        mov    [ebp-0x1160], eax;
			__asm        mov    eax, [ebp-0x1160];
			__asm        mov    [ebp-0x115C], eax;
			__asm        jmp    _T94a;
		_T94a:
			__asm        cmp    dword ptr [ebp-0x115C], 0;
			__asm        je     _T97e;

			__asm        lea    eax, rectTemp.left;
			__asm        mov    ecx, [ebp-0x115C];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T97e;
		_T97e:
			__asm        jmp    _T983;
		_T983:
			this->rectCharacterCells.finish += 0x10;
			__asm        jmp    _T9b6;
		_T992:
			__asm        jmp    _T997;
		_T997:
			__asm        lea    eax, rectTemp.left;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x34];
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x30;
			__asm        call   vector<MRect>::insert_aux;
		_T9b6:
			__asm        jmp    _T9bb;
		// LINE 109:
		_T9bb:
			__asm        mov    eax, iEnd;
			__asm        dec    eax;
			__asm        cmp    eax, i;
			__asm        jle    _Ta08;
		// LINE 112:
		__WHILE_9ce:
			__asm        mov    eax, chCurrentRectangle;
			__asm        movsx  eax, byte ptr [eax];
			__asm        cmp    eax, 0x20;
			__asm        je     __WHILE_9eb;
		// LINE 113:
			chCurrentRectangle++;
		// LINE 113:
			chCurrentRectangle++;
		// LINE 114:
		__WHILE_9eb:
			__asm        mov    eax, chCurrentRectangle;
			__asm        movsx  eax, byte ptr [eax];
			__asm        cmp    eax, 0x20;
			__asm        jne    _Ta08;
		// LINE 115:
			chCurrentRectangle++;
		// LINE 115:
			chCurrentRectangle++;
		// LINE 117:
		_Ta08:
	}
// LINE 119:
_Ta0d:
	i = 0x0;
	__asm        jmp    _Ta1c;
_Ta1c:
	__asm        jmp    _Ta21;
_Ta21:
	__asm        jmp    _FOR_a46;
_FOR_a46:
	for (iEnd = ((this->rectCharacterCells.finish - this->rectCharacterCells.start) >> 0x4); (iEnd > i); i++) {
		// LINE 120:
			__asm        jmp    _Ta63;
		_Ta63:
			__asm        jmp    _Ta68;
		_Ta68:
			__asm        jmp    _Ta6d;
		_Ta6d:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, i;
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+8];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x30];
			__asm        mov    edx, i;
			__asm        shl    edx, 4;
			__asm        sub    eax, [ecx+edx];
			__asm        mov    [ebp-0x1120], al;
			__asm        lea    eax, [ebp-0x1120];
			__asm        mov    [ebp-0x1124], eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x50];
			__asm        cmp    [eax+0x4C], ecx;
			__asm        je     _Tb17;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x4C];
			__asm        mov    [ebp-0x1168], eax;
			__asm        mov    eax, [ebp-0x1168];
			__asm        mov    [ebp-0x1164], eax;
			__asm        jmp    _Tae2;
		_Tae2:
			__asm        cmp    dword ptr [ebp-0x1164], 0;
			__asm        je     _Tb04;

			__asm        mov    eax, [ebp-0x1124];
			__asm        mov    al, [eax];
			__asm        mov    ecx, [ebp-0x1164];
			__asm        mov    [ecx], al;
			__asm        jmp    _Tb04;
		_Tb04:
			__asm        jmp    _Tb09;
		_Tb09:
			this->widthCharacters.finish++;
			__asm        jmp    _Tb3b;
		_Tb17:
			__asm        jmp    _Tb1c;
		_Tb1c:
			__asm        mov    eax, [ebp-0x1124];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x4C];
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x48;
			__asm        call   vector<unsigned char>::insert_aux;
		_Tb3b:
			__asm        jmp    _Tb40;
		_Tb40:
	}
// LINE 122:
_Tb45:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 125:
	return this->myFontImage;
// LINE 126:
}

// FUNCTION: COPTER_D 0x00469532
void BitmappedFont::CalculateCharacterRects() {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrent; // 0x10 bytes
	/*bp-0x14*/  int32_t xEnd;
	/*bp-0x18*/  int32_t x;
	/*bp-0x1c*/  int32_t iEnd;
	/*bp-0x20*/  int32_t y;
	/*bp-0x24*/  int32_t i;
	/*bp-0x28*/  int32_t yEnd;
	/*bp-0x2c*/  unsigned char nTransparentIndex;

// LINE 142:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 144:
_T1c:
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
_T26:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T43;
_T43:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
__WHILE_5b:
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    [ebp-0x40], eax;
	__asm        je     _T90;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x40], 0x10;
	__asm        add    dword ptr [ebp-0x38], 0x10;
	__asm        jmp    __WHILE_5b;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x40], 0x10;
	__asm        add    dword ptr [ebp-0x38], 0x10;
	__asm        jmp    __WHILE_5b;
_T90:
	__asm        jmp    _T95;
_T95:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
__WHILE_a1:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     _Tc1;

	__asm        jmp    _Tb8;
_Tb8:
	__asm        add    dword ptr [ebp-0x34], 0x10;
	__asm        jmp    __WHILE_a1;
_Tb8:
	__asm        add    dword ptr [ebp-0x34], 0x10;
	__asm        jmp    __WHILE_a1;
_Tc1:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        sub    ecx, [ebp-0x48];
	__asm        and    ecx, 0xFFFFFFF0;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x40], eax;
	__asm        jmp    _Te3;
// LINE 146:
_Te3:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
// LINE 147:
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    al, [eax];
	__asm        mov    nTransparentIndex, al;
// LINE 149:
_FOR_127:
	i = 0x0;
	iEnd = this->nCharacterCount;
	__asm        jmp    _FOR_COND_127;
_FOR_NEXT_127:
	for (; (i < iEnd); i++) {
		// LINE 151:
			__asm        jmp    _T13b;
		_T13b:
			__asm        jmp    _T140;
		_T140:
			__asm        jmp    _T145;
		_T145:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, i;
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+8];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x30];
			__asm        mov    edx, i;
			__asm        shl    edx, 4;
			__asm        sub    eax, [ecx+edx];
			__asm        mov    xEnd, eax;
		// LINE 152:
			__asm        jmp    _T172;
		_T172:
			__asm        jmp    _T177;
		_T177:
			__asm        jmp    _T17c;
		_T17c:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, i;
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+0xC];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x30];
			__asm        mov    edx, i;
			__asm        shl    edx, 4;
			__asm        sub    eax, [ecx+edx+4];
			__asm        mov    yEnd, eax;
		// LINE 153:
			rectCurrent.left = xEnd;
			rectCurrent.top = yEnd;
			rectCurrent.right = 0x0;
			rectCurrent.bottom = 0x0;
			__asm        jmp    _FOR_1d0;
		// LINE 154:
		_FOR_1d0:
			for (x = 0x0; (xEnd > x); x++) {
				// LINE 155:
				_FOR_1eb:
					for (y = 0x0; (yEnd > y); y++) {
						// LINE 156:
							__asm        jmp    _T1ff;
						_T1ff:
							__asm        jmp    _T204;
						_T204:
							__asm        jmp    _T209;
						_T209:
							__asm        jmp    _T20e;
						_T20e:
							__asm        jmp    _T213;
						_T213:
							__asm        mov    eax, this;
							__asm        mov    eax, [eax+0x30];
							__asm        mov    ecx, i;
							__asm        shl    ecx, 4;
							__asm        mov    eax, [eax+ecx+4];
							__asm        add    eax, y;
							__asm        mov    ecx, this;
							__asm        mov    ecx, [ecx+0x14];
							__asm        imul   eax, [ecx+0x14];
							__asm        mov    ecx, this;
							__asm        mov    ecx, [ecx+0x30];
							__asm        mov    edx, i;
							__asm        shl    edx, 4;
							__asm        mov    ecx, [ecx+edx];
							__asm        add    ecx, x;
							__asm        add    eax, ecx;
							__asm        mov    ecx, this;
							__asm        mov    ecx, [ecx+0x14];
							__asm        mov    ecx, [ecx+0x10];
							__asm        xor    edx, edx;
							__asm        mov    dl, [eax+ecx];
							__asm        xor    eax, eax;
							__asm        mov    al, nTransparentIndex;
							__asm        cmp    edx, eax;
							__asm        je     _T2b3;
						// LINE 157:
							__asm        mov    eax, x;
							__asm        cmp    rectCurrent.left, eax;
							__asm        jle    _T27d;
						// LINE 158:
							rectCurrent.left = x;
						// LINE 159:
						_T27d:
							__asm        mov    eax, x;
							__asm        cmp    rectCurrent.right, eax;
							__asm        jge    _T28f;
						// LINE 160:
							rectCurrent.right = x;
						// LINE 161:
						_T28f:
							__asm        mov    eax, y;
							__asm        cmp    rectCurrent.top, eax;
							__asm        jle    _T2a1;
						// LINE 162:
							rectCurrent.top = y;
						// LINE 163:
						_T2a1:
							__asm        mov    eax, y;
							__asm        cmp    rectCurrent.bottom, eax;
							__asm        jge    _T2b3;
						// LINE 164:
							rectCurrent.bottom = y;
						// LINE 166:
						_T2b3:
					}
				// LINE 167:
				_T2b8:
			}
		// LINE 170:
		_T2bd:
			__asm        mov    eax, rectCurrent.left;
			__asm        cmp    rectCurrent.right, eax;
			__asm        jge    _T2ef;
		// LINE 171:
			rectCurrent.left = 0x0;
			rectCurrent.top = 0x0;
			rectCurrent.right = 0x0;
			rectCurrent.bottom = 0x0;
			__asm        jmp    _T2ea;
		// LINE 172:
		_T2ea:
			__asm        jmp    _T2f5;
		// LINE 173:
		_T2ef:
			rectCurrent.right++;
		// LINE 174:
			rectCurrent.bottom++;
		// LINE 176:
		_T2f5:
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x44];
			__asm        cmp    [eax+0x40], ecx;
			__asm        je     _T363;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    [ebp-0x50], eax;
			__asm        mov    eax, [ebp-0x50];
			__asm        mov    [ebp-0x4C], eax;
			__asm        jmp    _T324;
		_T324:
			__asm        cmp    dword ptr [ebp-0x4C], 0;
			__asm        je     _T34f;

			__asm        lea    eax, rectCurrent.left;
			__asm        mov    ecx, [ebp-0x4C];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T34f;
		_T34f:
			__asm        jmp    _T354;
		_T354:
			this->rectCharacters.finish += 0x10;
			__asm        jmp    _T7e0;
		_T363:
			__asm        jmp    _T368;
		_T368:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    [ebp-0xC0], eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x44];
			__asm        cmp    [eax+0x40], ecx;
			__asm        je     _T477;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        sub    eax, 0x10;
			__asm        mov    [ebp-0x84], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    [ebp-0x88], eax;
			__asm        mov    eax, [ebp-0x88];
			__asm        mov    [ebp-0x80], eax;
			__asm        jmp    _T3be;
		_T3be:
			__asm        cmp    dword ptr [ebp-0x80], 0;
			__asm        je     _T3ec;

			__asm        mov    eax, [ebp-0x84];
			__asm        mov    ecx, [ebp-0x80];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T3ec;
		_T3ec:
			__asm        jmp    _T3f1;
		_T3f1:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    [ebp-0x78], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        sub    eax, 0x10;
			__asm        mov    [ebp-0x7C], eax;
		__WHILE_40c:
			__asm        mov    eax, [ebp-0x7C];
			__asm        cmp    [ebp-0xC0], eax;
			__asm        je     _T444;

			__asm        sub    dword ptr [ebp-0x78], 0x10;
			__asm        sub    dword ptr [ebp-0x7C], 0x10;
			__asm        mov    eax, [ebp-0x7C];
			__asm        mov    ecx, [ebp-0x78];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    __WHILE_40c;

			__asm        sub    dword ptr [ebp-0x78], 0x10;
			__asm        sub    dword ptr [ebp-0x7C], 0x10;
			__asm        mov    eax, [ebp-0x7C];
			__asm        mov    ecx, [ebp-0x78];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    __WHILE_40c;
		_T444:
			__asm        jmp    _T449;
		_T449:
			__asm        lea    eax, rectCurrent.left;
			__asm        mov    ecx, [ebp-0xC0];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        mov    eax, this;
			__asm        add    dword ptr [eax+0x40], 0x10;
			__asm        jmp    _T7db;
		_T477:
			__asm        jmp    _T47c;
		_T47c:
			__asm        jmp    _T481;
		_T481:
			__asm        jmp    _T486;
		_T486:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x3C];
			__asm        sar    eax, 4;
			__asm        test   eax, eax;
			__asm        je     _T4d1;

			__asm        jmp    _T4a8;
		_T4a8:
			__asm        jmp    _T4ad;
		_T4ad:
			__asm        jmp    _T4b2;
		_T4b2:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x3C];
			__asm        sar    eax, 4;
			__asm        add    eax, eax;
			__asm        mov    [ebp-0x58], eax;
			__asm        jmp    _T51e;
		_T4d1:
			__asm        mov    dword ptr [ebp-0x64], 0x100;
			__asm        lea    eax, [ebp-0x64];
			__asm        mov    [ebp-0x6C], eax;
			__asm        mov    dword ptr [ebp-0x68], 1;
			__asm        lea    eax, [ebp-0x68];
			__asm        mov    [ebp-0x70], eax;
			__asm        mov    eax, [ebp-0x70];
			__asm        mov    ecx, [ebp-0x6C];
			__asm        mov    ecx, [ecx];
			__asm        cmp    [eax], ecx;
			__asm        jb     _T506;

			__asm        mov    eax, [ebp-0x70];
			__asm        mov    [ebp-0x74], eax;
			__asm        jmp    _T50c;
		_T506:
			__asm        mov    eax, [ebp-0x6C];
			__asm        mov    [ebp-0x74], eax;
		_T50c:
			__asm        jmp    _T511;
		_T511:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x58], eax;
			__asm        jmp    _T51e;
		_T51e:
			__asm        jmp    _T523;
		_T523:
			__asm        push   0;
			__asm        mov    eax, [ebp-0x58];
			__asm        push   eax;
			__asm        call   allocate;
			__asm        add    esp, 8;
			__asm        mov    [ebp-0x54], eax;
			__asm        jmp    _T539;
		_T539:
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    [ebp-0xA0], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    [ebp-0xA4], eax;
		__WHILE_551:
			__asm        mov    eax, [ebp-0xC0];
			__asm        cmp    [ebp-0xA4], eax;
			__asm        je     _T5d8;

			__asm        mov    eax, [ebp-0xA4];
			__asm        mov    [ebp-0x94], eax;
			__asm        add    dword ptr [ebp-0xA4], 0x10;
			__asm        mov    eax, [ebp-0xA0];
			__asm        mov    [ebp-0x98], eax;
			__asm        add    dword ptr [ebp-0xA0], 0x10;
			__asm        mov    eax, [ebp-0x98];
			__asm        mov    [ebp-0x9C], eax;
			__asm        jmp    _T59a;
		_T59a:
			__asm        cmp    dword ptr [ebp-0x9C], 0;
			__asm        je     _T5ce;

			__asm        mov    eax, [ebp-0x94];
			__asm        mov    ecx, [ebp-0x9C];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T5ce;
		_T5ce:
			__asm        jmp    _T5d3;
		_T5d3:
		_T5d3:
		_T5d8:
			__asm        jmp    _T5dd;
		_T5dd:
			__asm        jmp    _T5e2;
		_T5e2:
			__asm        mov    eax, [ebp-0xC0];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x3C];
			__asm        and    eax, 0xFFFFFFF0;
			__asm        sar    eax, 0;
			__asm        mov    ecx, eax;
			__asm        add    eax, eax;
			__asm        sub    eax, ecx;
			__asm        add    eax, [ebp-0x54];
			__asm        mov    [ebp-0x90], eax;
			__asm        mov    eax, [ebp-0x90];
			__asm        mov    [ebp-0x8C], eax;
			__asm        jmp    _T617;
		_T617:
			__asm        cmp    dword ptr [ebp-0x8C], 0;
			__asm        je     _T648;

			__asm        lea    eax, rectCurrent.left;
			__asm        mov    ecx, [ebp-0x8C];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T648;
		_T648:
			__asm        jmp    _T64d;
		_T64d:
			__asm        jmp    _T652;
		_T652:
			__asm        jmp    _T657;
		_T657:
			__asm        mov    eax, [ebp-0xC0];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x3C];
			__asm        and    eax, 0xFFFFFFF0;
			__asm        sar    eax, 0;
			__asm        mov    ecx, eax;
			__asm        add    eax, eax;
			__asm        sub    eax, ecx;
			__asm        add    eax, [ebp-0x54];
			__asm        add    eax, 0x10;
			__asm        mov    [ebp-0xB4], eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    [ebp-0xB8], eax;
			__asm        mov    eax, [ebp-0xC0];
			__asm        mov    [ebp-0xBC], eax;
		__WHILE_699:
			__asm        mov    eax, [ebp-0xB8];
			__asm        cmp    [ebp-0xBC], eax;
			__asm        je     _T720;

			__asm        mov    eax, [ebp-0xBC];
			__asm        mov    [ebp-0xA8], eax;
			__asm        add    dword ptr [ebp-0xBC], 0x10;
			__asm        mov    eax, [ebp-0xB4];
			__asm        mov    [ebp-0xAC], eax;
			__asm        add    dword ptr [ebp-0xB4], 0x10;
			__asm        mov    eax, [ebp-0xAC];
			__asm        mov    [ebp-0xB0], eax;
			__asm        jmp    _T6e2;
		_T6e2:
			__asm        cmp    dword ptr [ebp-0xB0], 0;
			__asm        je     _T716;

			__asm        mov    eax, [ebp-0xA8];
			__asm        mov    ecx, [ebp-0xB0];
			__asm        mov    edx, [eax];
			__asm        mov    [ecx], edx;
			__asm        mov    edx, [eax+4];
			__asm        mov    [ecx+4], edx;
			__asm        mov    edx, [eax+8];
			__asm        mov    [ecx+8], edx;
			__asm        mov    eax, [eax+0xC];
			__asm        mov    [ecx+0xC], eax;
			__asm        jmp    _T716;
		_T716:
			__asm        jmp    _T71b;
		_T71b:
		_T71b:
		_T720:
			__asm        jmp    _T725;
		_T725:
			__asm        jmp    _T72a;
		_T72a:
			__asm        jmp    _T72f;
		_T72f:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    [ebp-0x60], eax;
		__WHILE_73b:
			__asm        mov    eax, this;
			__asm        mov    ecx, [ebp-0x60];
			__asm        cmp    [eax+0x40], ecx;
			__asm        je     _T75b;

			__asm        jmp    _T752;
		_T752:
			__asm        add    dword ptr [ebp-0x60], 0x10;
			__asm        jmp    __WHILE_73b;
		_T752:
			__asm        add    dword ptr [ebp-0x60], 0x10;
			__asm        jmp    __WHILE_73b;
		_T75b:
			__asm        jmp    _T760;
		_T760:
			__asm        jmp    _T765;
		_T765:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    [ebp-0x5C], eax;
			__asm        mov    eax, [ebp-0x5C];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T782;
		_T782:
			__asm        jmp    _T787;
		_T787:
			__asm        mov    eax, [ebp-0x58];
			__asm        shl    eax, 4;
			__asm        add    eax, [ebp-0x54];
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0x44], eax;
			__asm        jmp    _T79e;
		_T79e:
			__asm        jmp    _T7a3;
		_T7a3:
			__asm        jmp    _T7a8;
		_T7a8:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x3C];
			__asm        sar    eax, 4;
			__asm        shl    eax, 4;
			__asm        add    eax, [ebp-0x54];
			__asm        add    eax, 0x10;
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0x40], eax;
			__asm        mov    eax, [ebp-0x54];
			__asm        mov    ecx, this;
			__asm        mov    [ecx+0x3C], eax;
		_T7db:
			__asm        jmp    _T7e0;
		_T7e0:
			__asm        jmp    _T7e5;
		// LINE 177:
		_T7e5:
	}
// LINE 178:
_T7ea:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 179:
	return;
}

// FUNCTION: COPTER_D 0x00469d3d
int32_t BitmappedFont::CreateImage() {
	/*bp-0x4*/   unsigned char chTransparentIndex;
	/*bp-0x108*/ char szBitmapFilePath[260]; // 0x104 bytes

// LINE 194:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T3a5;
// LINE 195:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T5c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5c:
	__asm        jmp    _T61;
_T61:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T85;
_T85:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T122;

	__asm        jmp    _T9d;
_T9d:
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    _Tdf;

	__asm        jmp    _Tdf;
_Td0:
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        jmp    _Tdf;
_Tdf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T122;
_T122:
	__asm        jmp    _T127;
_T127:
	__asm        mov    byte ptr [ebp-0x114], 0;
	__asm        jmp    _T133;
_T133:
	__asm        lea    eax, [ebp-0x114];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx], al;
	__asm        jmp    _T174;
_T174:
	__asm        jmp    _T179;
_T179:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1b3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b3:
	__asm        jmp    _T1b8;
_T1b8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1dc;
_T1dc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T279;

	__asm        jmp    _T1f4;
_T1f4:
	__asm        jmp    _T1f9;
_T1f9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T227;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    _T236;

	__asm        jmp    _T236;
_T227:
	__asm        mov    dword ptr [ebp-0x144], 0;
	__asm        jmp    _T236;
_T236:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T279;
_T279:
	__asm        jmp    _T27e;
_T27e:
	__asm        mov    byte ptr [ebp-0x134], 0;
	__asm        jmp    _T28a;
_T28a:
	__asm        lea    eax, [ebp-0x134];
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    _T29b;
_T29b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx], al;
	__asm        jmp    _T2cb;
_T2cb:
	__asm        jmp    _T2d0;
_T2d0:
	__asm        lea    eax, szBitmapFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetPathForBitmapFile;
// LINE 196:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T336;

	__asm        lea    eax, szBitmapFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T343;
_T336:
	this->myFontImage = 0x0;
// LINE 197:
_T343:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
// LINE 198:
	__asm        jmp    _T35e;
_T35e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    al, [eax];
	__asm        mov    chTransparentIndex, al;
// LINE 199:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 200:
	__asm        xor    eax, eax;
	__asm        mov    al, chTransparentIndex;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 202:
_T3a5:
	return this->myFontImage;
// LINE 203:
}

// FUNCTION: COPTER_D 0x0046a0f5
void BitmappedFont::DestroyImage() {
// LINE 210:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T5a;
// LINE 211:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T4b;
_T4b:
	__asm        jmp    _T50;
// LINE 212:
_T50:
	this->myFontImage = 0x0;
// LINE 214:
_T5a:
	return;
}

// FUNCTION: COPTER_D 0x0046a159
long BitmappedFont::GetStringWidth(char * chText, const unsigned long nStringLength) {
	/*bp-0x4*/   long lWidth;
	/*bp-0x8*/   char * chEnd;

// LINE 229:
	lWidth = 0x0;
// LINE 230:
	chEnd = (nStringLength + chText);
// LINE 232:
__WHILE_1c:
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        test   eax, eax;
	__asm        je     _Tbd;

	__asm        mov    eax, chText;
	__asm        cmp    chEnd, eax;
	__asm        jbe    _Tbd;
// LINE 233:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     _T72;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    _T72;

	__asm        jmp    _T86;

	__asm        jmp    _T72;
_T72:
	__asm        jmp    _T81;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T86;
_T81:
	__asm        jmp    _Tb5;
_T86:
	__asm        jmp    _T8b;
_T8b:
	__asm        jmp    _T90;
_T90:
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        add    lWidth, edx;
	__asm        jmp    _Tb5;

	__asm        mov    eax, [ebp-0x10];
	__asm        add    lWidth, eax;
// LINE 234:
_Tb5:
	chText++;
// LINE 235:
	__asm        jmp    __WHILE_1c;
// LINE 237:
_Tbd:
	return lWidth;
// LINE 238:
}

// FUNCTION: COPTER_D 0x0046a225
long BitmappedFont::GetStringVisibleWidth(char * chText, const unsigned long nStringLength, unsigned long& nVisibleStringLength) {
	/*bp-0x4*/   long lWidth;
	/*bp-0x8*/   char * chTextEnd;

// LINE 252:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringWidth;
	__asm        mov    lWidth, eax;
// LINE 253:
	__asm        mov    eax, nStringLength;
	__asm        dec    eax;
	__asm        add    eax, chText;
	__asm        mov    chTextEnd, eax;
// LINE 255:
	__asm        cmp    nStringLength, 0;
	__asm        ja     _T3a;
// LINE 256:
	return 0x0;
// LINE 260:
_T3a:
	nVisibleStringLength. = nStringLength;
// LINE 261:
__WHILE_42:
	while ((chTextEnd >= chText)) {

			__asm        mov    eax, chTextEnd;
			__asm        mov    al, [eax];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, this;
			__asm        call   dword ptr [eax+0x10];
			__asm        test   eax, eax;
			__asm        jne    _Tb2;

			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        mov    ecx, chTextEnd;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jg     _Ta3;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x2C];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x28];
			__asm        movsx  eax, al;
			__asm        mov    ecx, chTextEnd;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jle    _Ta3;

			__asm        jmp    _T148;

			__asm        jmp    _Ta3;
		_Ta3:
			__asm        jmp    _Tb2;

			__asm        cmp    dword ptr [ebp-0xC], 0;
			__asm        jne    _T148;
		// LINE 262:
		_Tb2:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        mov    ecx, chTextEnd;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jg     _Tee;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x2C];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x28];
			__asm        movsx  eax, al;
			__asm        mov    ecx, chTextEnd;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jle    _Tee;

			__asm        jmp    _T102;

			__asm        jmp    _Tee;
		_Tee:
			__asm        jmp    _Tfd;

			__asm        cmp    dword ptr [ebp-0x10], 0;
			__asm        jne    _T102;
		_Tfd:
			__asm        jmp    _T13b;
		_T102:
			__asm        jmp    _T107;
		_T107:
			__asm        jmp    _T10c;
		_T10c:
			__asm        xor    eax, eax;
			__asm        mov    ecx, chTextEnd;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        mov    edx, this;
			__asm        sub    ecx, [edx+0x28];
			__asm        mov    edx, this;
			__asm        mov    edx, [edx+0x48];
			__asm        xor    ebx, ebx;
			__asm        mov    bl, [ecx+edx];
			__asm        sub    eax, ebx;
			__asm        neg    eax;
			__asm        sub    lWidth, eax;
			__asm        jmp    _T13b;

			__asm        xor    eax, eax;
			__asm        sub    eax, [ebp-0x14];
			__asm        neg    eax;
			__asm        sub    lWidth, eax;
		// LINE 263:
		_T13b:
			nVisibleStringLength.--;
		// LINE 264:
			chTextEnd--;
	}
// LINE 266:
_T148:
	return lWidth;
// LINE 267:
}

// FUNCTION: COPTER_D 0x0046a37c
long BitmappedFont::CalculateNumberOfLines(char * chText, const unsigned long nStringLength, const unsigned long nWidth) {
	/*bp-0x4*/   long lCurrentLineStringLength;
	/*bp-0x8*/   char * chTextEnd;
	/*bp-0xc*/   long lLineCount;

// LINE 280:
	chTextEnd = (nStringLength + chText);
// LINE 281:
	lLineCount = 0x0;
// LINE 283:
__WHILE_1c:
	while ((chText < chTextEnd)) {
		// LINE 284:
			__asm        mov    eax, nWidth;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateCharsToFitInWidth;
			__asm        mov    lCurrentLineStringLength, eax;
		// LINE 285:
			chText += lCurrentLineStringLength;
		// LINE 286:
			lLineCount++;
	}
// LINE 288:
_T49:
	return lLineCount;
// LINE 289:
}

// FUNCTION: COPTER_D 0x0046a3d4
long BitmappedFont::CalculateWidthOfLines(char * chText, const unsigned long nStringLength, const unsigned long nHeight) {
	/*bp-0x4*/   const long lLines;
	/*bp-0x8*/   unsigned long nCurrentWidth;

// LINE 308:
	__asm        jmp    _T11;
_T11:
	__asm        mov    ecx, this;
	__asm        mov    eax, nHeight;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x24];
	__asm        mov    lLines, eax;
// LINE 311:
_FOR_2b:
	for (nCurrentWidth = 0x14; (nCurrentWidth < 0xfa0); nCurrentWidth += 0xa) {
		// LINE 312:
			__asm        mov    eax, nCurrentWidth;
			__asm        push   eax;
			__asm        mov    eax, nStringLength;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateNumberOfLines;
			__asm        cmp    eax, lLines;
			__asm        jg     _T61;
		// LINE 313:
			return nCurrentWidth;
		// LINE 314:
		_T61:
	}
// LINE 315:
_T66:
	return 0x1;
// LINE 316:
}

// FUNCTION: COPTER_D 0x0046a44b
long BitmappedFont::CalculateCharsToFitInWidth(char * chText, const unsigned long nWidth) {
	/*bp-0x4*/   unsigned long nCurrentChars;
	/*bp-0x8*/   unsigned long nPotentialCurrentChars;
	/*bp-0xc*/   char * chTextCurrent;
	/*bp-0x10*/  unsigned long nPotentialCurrentWidth;

// LINE 335:
	nPotentialCurrentWidth = 0x0;
// LINE 336:
	nCurrentChars = 0x0;
// LINE 337:
	nPotentialCurrentChars = 0x0;
// LINE 338:
	chTextCurrent = chText;
// LINE 340:
__WHILE_27:
	while ((nPotentialCurrentWidth <= nWidth)) {
		// LINE 341:
			__asm        mov    eax, chTextCurrent;
			__asm        movsx  eax, byte ptr [eax];
			__asm        test   eax, eax;
			__asm        jne    _T49;
		// LINE 345:
			return nPotentialCurrentChars;
		// LINE 350:
		_T49:
			__asm        mov    eax, chTextCurrent;
			__asm        mov    al, [eax];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, this;
			__asm        call   dword ptr [eax+0xC];
			__asm        test   eax, eax;
			__asm        je     _T6e;
		// LINE 351:
			__asm        mov    eax, nPotentialCurrentChars;
			__asm        inc    eax;
			__asm        mov    nCurrentChars, eax;
		// LINE 352:
			__asm        jmp    _T123;
		// LINE 355:
		_T6e:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        mov    ecx, chTextCurrent;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jg     _Taa;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x28];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x2C];
			__asm        movsx  eax, al;
			__asm        mov    ecx, chTextCurrent;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jle    _Taa;

			__asm        jmp    _Tbe;

			__asm        jmp    _Taa;
		_Taa:
			__asm        jmp    _Tb9;

			__asm        cmp    dword ptr [ebp-0x14], 0;
			__asm        jne    _Tbe;
		_Tb9:
			__asm        jmp    _Ted;
		_Tbe:
			__asm        jmp    _Tc3;
		_Tc3:
			__asm        jmp    _Tc8;
		_Tc8:
			__asm        mov    eax, chTextCurrent;
			__asm        movsx  eax, byte ptr [eax];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x28];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x48];
			__asm        xor    edx, edx;
			__asm        mov    dl, [eax+ecx];
			__asm        add    nPotentialCurrentWidth, edx;
			__asm        jmp    _Ted;

			__asm        mov    eax, [ebp-0x18];
			__asm        add    nPotentialCurrentWidth, eax;
		// LINE 356:
		_Ted:
			nPotentialCurrentChars++;
		// LINE 358:
			__asm        mov    eax, chTextCurrent;
			__asm        mov    al, [eax];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax];
			__asm        mov    ecx, this;
			__asm        call   dword ptr [eax+8];
			__asm        test   eax, eax;
			__asm        je     _T11b;

			__asm        mov    eax, nWidth;
			__asm        cmp    nPotentialCurrentWidth, eax;
			__asm        ja     _T11b;
		// LINE 359:
			nCurrentChars = nPotentialCurrentChars;
		// LINE 360:
		_T11b:
			chTextCurrent++;
	}
// LINE 368:
_T123:
	__asm        cmp    nCurrentChars, 0;
	__asm        jne    __WHILE_164;
// LINE 369:
__WHILE_12d:
	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        test   eax, eax;
	__asm        je     __WHILE_164;

	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        mov    al, [eax+ecx];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        jne    __WHILE_164;
// LINE 370:
	nCurrentChars++;
// LINE 370:
	nCurrentChars++;
// LINE 375:
__WHILE_164:
	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        mov    al, [eax+ecx];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T189;
// LINE 376:
	nCurrentChars++;
	__asm        jmp    __WHILE_164;
// LINE 378:
_T189:
	return nCurrentChars;
// LINE 379:
}

// FUNCTION: COPTER_D 0x0046a5e3
void BitmappedFont::DrawTextLine(/*packed*/ class CBackBuffer *destination, long x, long y, char * chText, const unsigned long nStringLength) {
	/*bp-0x4*/   char * chEnd;

// LINE 393:
	chEnd = (nStringLength + chText);
// LINE 395:
__WHILE_15:
	while ((chEnd > chText)) {

			__asm        mov    eax, chText;
			__asm        mov    al, [eax];
			__asm        mov    [ebp-0x28], al;
		// LINE 396:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        movsx  ecx, byte ptr [ebp-0x28];
			__asm        cmp    eax, ecx;
			__asm        jg     _T61;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x28];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x2C];
			__asm        movsx  eax, al;
			__asm        movsx  ecx, byte ptr [ebp-0x28];
			__asm        cmp    eax, ecx;
			__asm        jle    _T61;

			__asm        jmp    _T75;

			__asm        jmp    _T61;
		_T61:
			__asm        jmp    _T70;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        jne    _T75;
		_T70:
			__asm        jmp    _T166;
		_T75:
			__asm        movsx  eax, byte ptr [ebp-0x28];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x28];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T87;
		_T87:
			__asm        jmp    _T8c;
		_T8c:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx];
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _Ta3;
		_Ta3:
			__asm        jmp    _Ta8;
		_Ta8:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+4];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _Tc0;
		_Tc0:
			__asm        jmp    _Tc5;
		_Tc5:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx];
			__asm        mov    [ebp-0x20], eax;
			__asm        jmp    _Tdc;
		_Tdc:
			__asm        jmp    _Te1;
		_Te1:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+4];
			__asm        mov    [ebp-0x1C], eax;
			__asm        jmp    _Tf9;
		_Tf9:
			__asm        jmp    _Tfe;
		_Tfe:
			__asm        jmp    _T103;
		_T103:
			__asm        jmp    _T108;
		_T108:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+0xC];
			__asm        add    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+8];
			__asm        add    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        add    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        add    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        mov    eax, y;
			__asm        add    eax, [ebp-0x1C];
			__asm        push   eax;
			__asm        mov    eax, x;
			__asm        add    eax, [ebp-0x20];
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x14];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x14];
			__asm        call   dword ptr [edx+0xC];
			__asm        jmp    _T166;
		// LINE 397:
		_T166:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        mov    ecx, chText;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jg     _T1a2;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x28];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x2C];
			__asm        movsx  eax, al;
			__asm        mov    ecx, chText;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jle    _T1a2;

			__asm        jmp    _T1b6;

			__asm        jmp    _T1a2;
		_T1a2:
			__asm        jmp    _T1b1;

			__asm        cmp    dword ptr [ebp-8], 0;
			__asm        jne    _T1b6;
		_T1b1:
			__asm        jmp    _T1e5;
		_T1b6:
			__asm        jmp    _T1bb;
		_T1bb:
			__asm        jmp    _T1c0;
		_T1c0:
			__asm        mov    eax, chText;
			__asm        movsx  eax, byte ptr [eax];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x28];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x48];
			__asm        xor    edx, edx;
			__asm        mov    dl, [eax+ecx];
			__asm        add    x, edx;
			__asm        jmp    _T1e5;

			__asm        mov    eax, [ebp-0xC];
			__asm        add    x, eax;
		// LINE 398:
		_T1e5:
			chText++;
	}
// LINE 400:
_T1ed:
	return;
}

// FUNCTION: COPTER_D 0x0046a7dc
void BitmappedFont::DrawTextLineNoClip(/*packed*/ class CBackBuffer *destination, long x, long y, char * chText, const unsigned long nStringLength) {
	/*bp-0x4*/   char * chEnd;

// LINE 410:
	chEnd = (nStringLength + chText);
// LINE 412:
__WHILE_15:
	while ((chEnd > chText)) {

			__asm        mov    eax, chText;
			__asm        mov    al, [eax];
			__asm        mov    [ebp-0x28], al;
		// LINE 413:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        movsx  ecx, byte ptr [ebp-0x28];
			__asm        cmp    eax, ecx;
			__asm        jg     _T61;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x28];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x2C];
			__asm        movsx  eax, al;
			__asm        movsx  ecx, byte ptr [ebp-0x28];
			__asm        cmp    eax, ecx;
			__asm        jle    _T61;

			__asm        jmp    _T75;

			__asm        jmp    _T61;
		_T61:
			__asm        jmp    _T70;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        jne    _T75;
		_T70:
			__asm        jmp    _T166;
		_T75:
			__asm        movsx  eax, byte ptr [ebp-0x28];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x28];
			__asm        mov    [ebp-0x10], eax;
			__asm        jmp    _T87;
		_T87:
			__asm        jmp    _T8c;
		_T8c:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx];
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _Ta3;
		_Ta3:
			__asm        jmp    _Ta8;
		_Ta8:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x30];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+4];
			__asm        mov    [ebp-0x14], eax;
			__asm        jmp    _Tc0;
		_Tc0:
			__asm        jmp    _Tc5;
		_Tc5:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx];
			__asm        mov    [ebp-0x20], eax;
			__asm        jmp    _Tdc;
		_Tdc:
			__asm        jmp    _Te1;
		_Te1:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+4];
			__asm        mov    [ebp-0x1C], eax;
			__asm        jmp    _Tf9;
		_Tf9:
			__asm        jmp    _Tfe;
		_Tfe:
			__asm        jmp    _T103;
		_T103:
			__asm        jmp    _T108;
		_T108:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+0xC];
			__asm        add    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x3C];
			__asm        mov    ecx, [ebp-0x10];
			__asm        shl    ecx, 4;
			__asm        mov    eax, [eax+ecx+8];
			__asm        add    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        add    eax, [ebp-0x14];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        add    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x1C];
			__asm        add    eax, y;
			__asm        push   eax;
			__asm        mov    eax, [ebp-0x20];
			__asm        add    eax, x;
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x14];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x14];
			__asm        call   dword ptr [edx+0x3C];
			__asm        jmp    _T166;
		// LINE 414:
		_T166:
			__asm        mov    eax, this;
			__asm        movsx  eax, byte ptr [eax+0x28];
			__asm        mov    ecx, chText;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jg     _T1a2;

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x28];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x2C];
			__asm        movsx  eax, al;
			__asm        mov    ecx, chText;
			__asm        movsx  ecx, byte ptr [ecx];
			__asm        cmp    eax, ecx;
			__asm        jle    _T1a2;

			__asm        jmp    _T1b6;

			__asm        jmp    _T1a2;
		_T1a2:
			__asm        jmp    _T1b1;

			__asm        cmp    dword ptr [ebp-8], 0;
			__asm        jne    _T1b6;
		_T1b1:
			__asm        jmp    _T1e5;
		_T1b6:
			__asm        jmp    _T1bb;
		_T1bb:
			__asm        jmp    _T1c0;
		_T1c0:
			__asm        mov    eax, chText;
			__asm        movsx  eax, byte ptr [eax];
			__asm        mov    ecx, this;
			__asm        sub    eax, [ecx+0x28];
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x48];
			__asm        xor    edx, edx;
			__asm        mov    dl, [eax+ecx];
			__asm        add    x, edx;
			__asm        jmp    _T1e5;

			__asm        mov    eax, [ebp-0xC];
			__asm        add    x, eax;
		// LINE 415:
		_T1e5:
			chText++;
	}
// LINE 417:
_T1ed:
	return;
}

// FUNCTION: COPTER_D 0x0046a9d5
void BitmappedFont::DrawTextPara(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectPara, char * chText, const unsigned long nStringLength) {
	/*bp-0x4*/   long lCurrentLineStringLength;
	/*bp-0x8*/   long lCharacterHeight;
	/*bp-0xc*/   long lCurrentYPosition;
	/*bp-0x10*/  const long lRectHeight;
	/*bp-0x14*/  long lCurrentXPosition;
	/*bp-0x18*/  const long lRectWidth;

// LINE 429:
	lCurrentXPosition = rectPara.left;
// LINE 430:
	lCurrentYPosition = rectPara.top;
// LINE 431:
	lCharacterHeight = this->lHeight;
	__asm        jmp    _T2b;
// LINE 433:
_T2b:
	lRectWidth = (rectPara.right - rectPara.left);
	__asm        jmp    _T3e;
// LINE 434:
_T3e:
	lRectHeight = (rectPara.bottom - rectPara.top);
	__asm        jmp    __WHILE_52;
// LINE 436:
__WHILE_52:
	while ((lRectHeight > lCurrentYPosition)) {
		// LINE 437:
			__asm        mov    eax, lRectWidth;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateCharsToFitInWidth;
			__asm        mov    lCurrentLineStringLength, eax;
		// LINE 438:
			__asm        mov    eax, lCurrentLineStringLength;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    eax, lCurrentYPosition;
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::DrawTextLine;
		// LINE 439:
			lCurrentYPosition += lCharacterHeight;
		// LINE 440:
			chText += lCurrentLineStringLength;
	}
// LINE 442:
_T9e:
	return;
}

// FUNCTION: COPTER_D 0x0046aa7f
void BitmappedFont::DrawTextParaNoClip(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectPara, char * chText, const unsigned long nStringLength) {
	/*bp-0x4*/   long lCurrentLineStringLength;
	/*bp-0x8*/   long lCharacterHeight;
	/*bp-0xc*/   long lCurrentYPosition;
	/*bp-0x10*/  const long lRectHeight;
	/*bp-0x14*/  long lCurrentXPosition;
	/*bp-0x18*/  const long lRectWidth;

// LINE 455:
	lCurrentXPosition = rectPara.left;
// LINE 456:
	lCurrentYPosition = rectPara.top;
// LINE 457:
	lCharacterHeight = this->lHeight;
	__asm        jmp    _T2b;
// LINE 459:
_T2b:
	lRectWidth = (rectPara.right - rectPara.left);
	__asm        jmp    _T3e;
// LINE 460:
_T3e:
	lRectHeight = (rectPara.bottom - rectPara.top);
	__asm        jmp    __WHILE_52;
// LINE 462:
__WHILE_52:
	while ((lCurrentYPosition < lRectHeight)) {
		// LINE 463:
			__asm        mov    eax, lRectWidth;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateCharsToFitInWidth;
			__asm        mov    lCurrentLineStringLength, eax;
		// LINE 464:
			__asm        mov    eax, lCurrentLineStringLength;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    eax, lCurrentYPosition;
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::DrawTextLineNoClip;
		// LINE 465:
			lCurrentYPosition += lCharacterHeight;
		// LINE 466:
			chText += lCurrentLineStringLength;
	}
// LINE 468:
_T9e:
	return;
}

// FUNCTION: COPTER_D 0x0046ab29
void BitmappedFont::DrawTextLineFormat(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectLine, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	/*bp-0x4*/   unsigned long nVisibleStringLength;
	/*bp-0x8*/   unsigned long nVisibleStringWidth;

// LINE 486:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 1;
	__asm        je     _T7d;
// LINE 487:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 488:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _T78;
// LINE 491:
	__asm        jmp    _T3c;
_T3c:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectLine;
	__asm        sub    eax, [ecx];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, rectLine;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, nVisibleStringWidth;
	__asm        shr    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLine;
// LINE 493:
_T78:
	__asm        jmp    _T111;
_T7d:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 8;
	__asm        je     _Td2;
// LINE 494:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 495:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _Tcd;
// LINE 498:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        sub    eax, nVisibleStringWidth;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLine;
// LINE 500:
_Tcd:
	__asm        jmp    _T111;
// LINE 501:
_Td2:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
// LINE 502:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _T111;
// LINE 503:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLine;
// LINE 505:
_T111:
	return;
}

// FUNCTION: COPTER_D 0x0046ac46
void BitmappedFont::DrawTextLineFormatNoClip(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectLine, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	/*bp-0x4*/   unsigned long nVisibleStringLength;
	/*bp-0x8*/   unsigned long nVisibleStringWidth;

// LINE 523:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 1;
	__asm        je     _T7d;
// LINE 524:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 525:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _T78;
// LINE 528:
	__asm        jmp    _T3c;
_T3c:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectLine;
	__asm        sub    eax, [ecx];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, rectLine;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, nVisibleStringWidth;
	__asm        shr    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLineNoClip;
// LINE 530:
_T78:
	__asm        jmp    _T111;
_T7d:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 8;
	__asm        je     _Td2;
// LINE 531:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 532:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _Tcd;
// LINE 535:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        sub    eax, nVisibleStringWidth;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLineNoClip;
// LINE 537:
_Tcd:
	__asm        jmp    _T111;
// LINE 538:
_Td2:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::GetStringVisibleWidth;
// LINE 539:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     _T111;
// LINE 540:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   BitmappedFont::DrawTextLineNoClip;
// LINE 542:
_T111:
	return;
}

// FUNCTION: COPTER_D 0x0046ad63
void BitmappedFont::DrawTextParaFormat(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectPara, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	/*bp-0x4*/   long lCurrentLineStringLength;
	/*bp-0x8*/   long lCharacterHeight;
	/*bp-0xc*/   long lCurrentYPosition;
	/*bp-0x10*/  const long lRectHeight;
	/*bp-0x14*/  long lCurrentXPosition;
	/*bp-0x18*/  const long lRectWidth;

// LINE 557:
	lCurrentXPosition = rectPara.left;
// LINE 558:
	lCurrentYPosition = rectPara.top;
// LINE 559:
	lCharacterHeight = this->lHeight;
	__asm        jmp    _T2b;
// LINE 561:
_T2b:
	lRectWidth = (rectPara.right - rectPara.left);
	__asm        jmp    _T3e;
// LINE 562:
_T3e:
	lRectHeight = (rectPara.bottom - rectPara.top);
	__asm        jmp    __WHILE_52;
// LINE 564:
__WHILE_52:
	while ((lRectHeight > lCurrentYPosition)) {
		// LINE 565:
			__asm        mov    eax, lRectWidth;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateCharsToFitInWidth;
			__asm        mov    lCurrentLineStringLength, eax;
			__asm        mov    eax, rectPara;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, rectPara;
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x30], eax;
		// LINE 568:
			__asm        jmp    _T87;
		_T87:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, lCurrentYPosition;
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, lCharacterHeight;
			__asm        add    eax, lCurrentYPosition;
			__asm        mov    [ebp-0x1C], eax;
			__asm        jmp    _Ta7;
		_Ta7:
			__asm        mov    eax, nFormat;
			__asm        push   eax;
			__asm        mov    eax, lCurrentLineStringLength;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        lea    eax, [ebp-0x28];
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::DrawTextLineFormat;
		// LINE 569:
			lCurrentYPosition += lCharacterHeight;
		// LINE 570:
			chText += lCurrentLineStringLength;
	}
// LINE 572:
_Td4:
	return;
}

// FUNCTION: COPTER_D 0x0046ae43
void BitmappedFont::DrawTextParaFormatNoClip(/*packed*/ class CBackBuffer *destination, /*packed*/ class MRect& rectPara, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	/*bp-0x4*/   long lCurrentLineStringLength;
	/*bp-0x8*/   long lCharacterHeight;
	/*bp-0xc*/   long lCurrentYPosition;
	/*bp-0x10*/  const long lRectHeight;
	/*bp-0x14*/  long lCurrentXPosition;
	/*bp-0x18*/  const long lRectWidth;

// LINE 586:
	lCurrentXPosition = rectPara.left;
// LINE 587:
	lCurrentYPosition = rectPara.top;
// LINE 588:
	lCharacterHeight = this->lHeight;
	__asm        jmp    _T2b;
// LINE 590:
_T2b:
	lRectWidth = (rectPara.right - rectPara.left);
	__asm        jmp    _T3e;
// LINE 591:
_T3e:
	lRectHeight = (rectPara.bottom - rectPara.top);
	__asm        jmp    __WHILE_52;
// LINE 593:
__WHILE_52:
	while ((lRectHeight > lCurrentYPosition)) {
		// LINE 594:
			__asm        mov    eax, lRectWidth;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::CalculateCharsToFitInWidth;
			__asm        mov    lCurrentLineStringLength, eax;
			__asm        mov    eax, rectPara;
			__asm        mov    eax, [eax+8];
			__asm        mov    [ebp-0x2C], eax;
			__asm        mov    eax, rectPara;
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x30], eax;
		// LINE 597:
			__asm        jmp    _T87;
		_T87:
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    [ebp-0x28], eax;
			__asm        mov    eax, lCurrentYPosition;
			__asm        mov    [ebp-0x24], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x20], eax;
			__asm        mov    eax, lCharacterHeight;
			__asm        add    eax, lCurrentYPosition;
			__asm        mov    [ebp-0x1C], eax;
			__asm        jmp    _Ta7;
		_Ta7:
			__asm        mov    eax, nFormat;
			__asm        push   eax;
			__asm        mov    eax, lCurrentLineStringLength;
			__asm        push   eax;
			__asm        mov    eax, chText;
			__asm        push   eax;
			__asm        lea    eax, [ebp-0x28];
			__asm        push   eax;
			__asm        mov    eax, destination;
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        call   BitmappedFont::DrawTextLineFormatNoClip;
		// LINE 598:
			lCurrentYPosition += lCharacterHeight;
		// LINE 599:
			chText += lCurrentLineStringLength;
	}
// LINE 601:
_Td4:
	return;
}

// FUNCTION: COPTER_D 0x0046af23
int32_t BitmappedFont::IsCharBreakingChar(const char chText) {
// LINE 614:
	__asm        movsx  eax, chText;
	__asm        cmp    eax, 0x20;
	__asm        je     _T26;
_T26:
_T30:
_T32:
	return (reinterpret_cast<int16_t>(chText) != 0x2d);
// LINE 615:
}

// FUNCTION: COPTER_D 0x0046af61
int32_t BitmappedFont::IsCharReturnChar(const char chText) {
// LINE 626:
_T23:
_T25:
	return (reinterpret_cast<int16_t>(chText) != 0xa);
// LINE 627:
}

// FUNCTION: COPTER_D 0x0046af92
int32_t BitmappedFont::IsCharWhitespace(const char chText) {
// LINE 635:
_T23:
_T25:
	return (reinterpret_cast<int16_t>(chText) != 0x20);
// LINE 636:
}

// FUNCTION: COPTER_D 0x0046afc3
int32_t BitmappedFont::GetIniFileLong(char * chHeader, char * chSection, char * chPath, long * lResult) {
// LINE 647:
	__asm        mov    eax, chPath;
	__asm        push   eax;
	__asm        push   0xFFFFD8F1;
	__asm        mov    eax, chSection;
	__asm        push   eax;
	__asm        mov    eax, chHeader;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C361C];
	__asm        mov    ecx, lResult;
	__asm        mov    [ecx], eax;
// LINE 648:
	__asm        mov    eax, lResult;
	__asm        cmp    dword ptr [eax], 0xFFFFD8F1;
	__asm        jne    _T3e;
// LINE 649:
	return 0x0;
// LINE 650:
_T3e:
	return 0x1;
// LINE 654:
}

// FUNCTION: COPTER_D 0x0046b012
int32_t BitmappedFont::GetIniFileString(char * chHeader, char * chSection, char * chPath, char * chResult, const long lStringLength) {
// LINE 665:
	__asm        mov    eax, chPath;
	__asm        push   eax;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, chResult;
	__asm        push   eax;
	__asm        push   0x59942C;
	__asm        mov    eax, chSection;
	__asm        push   eax;
	__asm        mov    eax, chHeader;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3618];
	__asm        jmp    __RETURN;
// LINE 669:
__RETURN:
}

// FUNCTION: COPTER_D 0x0046b049
int32_t BitmappedFont::GetPathForBitmapFile(char * chFontInfoPath, char * chBitmapFile, char * chBitmapPath) {
	/*bp-0x100*/ char szFileName[256]; // 0x100 bytes
	/*bp-0x200*/ char szDirectory[256]; // 0x100 bytes
	/*bp-0x204*/ char szDrive[3];
	/*bp-0x304*/ char szFileExtension[256]; // 0x100 bytes

// LINE 684:
	_splitpath(szFileExtension[0], szFileName[0], szDirectory[0], szDrive[0], chFontInfoPath);
// LINE 685:
	strcpy(szDrive[0], chBitmapPath);
// LINE 686:
	strcat(szDirectory[0], chBitmapPath);
// LINE 687:
	strcat(chBitmapFile, chBitmapPath);
// LINE 689:
	return 0x1;
// LINE 690:
}



// Contribution: 1:0006a0d0-0006a138 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b0d0
// allocate



// Contribution: 1:0006a140-0006a533 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b140
// vector<MRect>::insert_aux



// Contribution: 1:0006a540-0006a867 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b540
// vector<unsigned char>::insert_aux



// Contribution: 2:000014d0-000014f3 Module: 42, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for BitmappedFont @ 0x005904d0
//   00: BitmappedFont::Initialize @ 0x00468976
//   01: BitmappedFont::DeInitialize @ 0x00468997
//   02: BitmappedFont::IsCharBreakingChar @ 0x0046af23
//   03: BitmappedFont::IsCharReturnChar @ 0x0046af61
//   04: BitmappedFont::IsCharWhitespace @ 0x0046af92
//   05: BitmappedFont::CreateImage @ 0x00469d3d
//   06: BitmappedFont::DestroyImage @ 0x0046a0f5
//   07: BitmappedFont::LoadFontInfo @ 0x004689b8
//   08: BitmappedFont::CalculateCharacterRects @ 0x00469532
//   9 entries



// Contribution: 3:00002354-0000242c Module: 42, 4 byte alignment, initialized_data, read, write, 
