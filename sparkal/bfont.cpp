// Module: bfont.obj
// Source: C:\Copter\source\sparkal\bfont.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class BitmappedFont (forward reference);
class BitmappedFont{
		enum PitchType {
			pitchTypeFixed = 0,
			pitchTypeVariable = 1,
		};
public:
	void BitmappedFont(char *, const long);
	void BitmappedFont(class basic_string<char>&, const long);
	void BitmappedFont();
	void ~BitmappedFont();
	// vtable: 0
	intro int32_t Initialize();
	// vtable: 4
	intro void DeInitialize();
	long GetCharSet();
	long GetLanguage();
	long GetCharacterWidth(const char);
	long GetCharHeight();
	int32_t IsCharValid(const char);
	long GetStringWidth(char *, const unsigned long);
	long GetStringVisibleWidth(char *, const unsigned long, unsigned long&);
	long GetCharacterLength(char);
	long CalculateNumberOfLines(char *, const unsigned long, const unsigned long);
	long CalculateWidthOfLines(char *, const unsigned long, const unsigned long);
	long CalculateCharsToFitInWidth(char *, const unsigned long);
	void DrawTextChar(class CBackBuffer*, long, long, const char);
	void DrawTextCharNoClip(class CBackBuffer*, long, long, const char);
	void DrawTextLine(class CBackBuffer*, long, long, char *, const unsigned long);
	void DrawTextLineNoClip(class CBackBuffer*, long, long, char *, const unsigned long);
	void DrawTextPara(class CBackBuffer*, class MRect&, char *, const unsigned long);
	void DrawTextParaNoClip(class CBackBuffer*, class MRect&, char *, const unsigned long);
	void DrawTextLineFormat(class CBackBuffer*, class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextLineFormatNoClip(class CBackBuffer*, class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextParaFormat(class CBackBuffer*, class MRect&, char *, const unsigned long, const unsigned long);
	void DrawTextParaFormatNoClip(class CBackBuffer*, class MRect&, char *, const unsigned long, const unsigned long);
	// vtable: 8
	intro int32_t IsCharBreakingChar(const char);
	// vtable: 12
	intro int32_t IsCharReturnChar(const char);
	// vtable: 16
	intro int32_t IsCharWhitespace(const char);
	// vtable: 20
	intro int32_t CreateImage();
	// vtable: 24
	intro void DestroyImage();
	// vtable: 28
	intro int32_t LoadFontInfo();
	// vtable: 32
	intro void CalculateCharacterRects();
	int32_t GetIniFileLong(char *, char *, char *, long *);
	int32_t GetIniFileString(char *, char *, char *, char *, const long);
	int32_t GetPathForBitmapFile(char *, char *, char *);
	class basic_string<char> sFontInfoFilePath;
	class basic_string<char> sFontBitmapFile;
	class CBackBuffer* myFontImage;
	long lLanguage;
	long lCharacterSet;
	long lPitchType;
	long lHeight;
	unsigned long nStartCharacter;
	unsigned long nCharacterCount;
	class vector<MRect> rectCharacterCells;
	class vector<MRect> rectCharacters;
	class vector<unsigned char> widthCharacters;
};

// Type: void;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: char *;

// Type: int32_t;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char[4096];

// Type: char[256];

// Type: unsigned char;

// Type: char[260];

// Type: unsigned long;

// Type: class CBackBuffer (forward reference);
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	long IsLost();
	long Restore();
	char * szFilePath;
	struct tagRECT rectDirectDrawBuffer;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
	struct IDirectDrawSurface* mpFrontSurface;
	struct IDirectDrawSurface* mpBackSurface;
	struct IDirectDrawPalette* mpPalette;
	struct _DDSURFACEDESC mDDdesc;
	struct _DDBLTFX mDDBltFx;
	void * __ptr32 hPen;
	int32_t nPenThickness;
	struct SparkalColor colorPenCurrent;
	// vtable: 96
	intro struct IDirectDrawSurface* GetDDSurface();
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char;

// Type: long *;

// Type: char[3];

// Type: class vector<MRect> (forward reference);
class vector<MRect>{
	using vector_allocator = class allocator<MRect>;
	using value_type = class MRect;
	using pointer = class MRect*;
	using iterator = class MRect*;
	using const_iterator = const class MRect*;
	using reference = class MRect&;
	using const_reference = const class MRect&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<MRect const *,MRect,MRect const &,int>;
	using reverse_iterator = class reverse_iterator<MRect *,MRect,MRect &,int>;
protected:
	static class allocator<MRect> static_allocator;
	class MRect* start;
	class MRect* finish;
	class MRect* end_of_storage;
	void insert_aux(class MRect*, const class MRect&);
public:
	const class MRect* begin();
	class MRect* begin();
	const class MRect* end();
	class MRect* end();
	class reverse_iterator<MRect const *,MRect,MRect const &,int> rbegin();
	class reverse_iterator<MRect *,MRect,MRect &,int> rbegin();
	class reverse_iterator<MRect const *,MRect,MRect const &,int> rend();
	class reverse_iterator<MRect *,MRect,MRect &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const class MRect& operator[](uint32_t);
	class MRect& operator[](uint32_t);
	void vector<MRect>(const class MRect*, const class MRect*);
	void vector<MRect>(const class vector<MRect>&);
	void vector<MRect>(uint32_t, const class MRect&);
	void vector<MRect>();
	void ~vector<MRect>();
	class vector<MRect>& operator=(const class vector<MRect>&);
	void reserve(uint32_t);
	const class MRect& front();
	class MRect& front();
	const class MRect& back();
	class MRect& back();
	void push_back(const class MRect&);
	void swap(class vector<MRect>&);
	void insert(class MRect*, uint32_t, const class MRect&);
	void insert(class MRect*, const class MRect*, const class MRect*);
	class MRect* insert(class MRect*, const class MRect&);
	void pop_back();
	void erase(class MRect*, class MRect*);
	void erase(class MRect*);
};

// Type: uint32_t;

// Type: class vector<unsigned char> (forward reference);
class vector<unsigned char>{
	using vector_allocator = class allocator<unsigned char>;
	using value_type = unsigned char;
	using pointer = unsigned char *;
	using iterator = unsigned char *;
	using const_iterator = unsigned char *;
	using reference = unsigned char&;
	using const_reference = const unsigned char&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int>;
	using reverse_iterator = class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int>;
protected:
	static class allocator<unsigned char> static_allocator;
	unsigned char * start;
	unsigned char * finish;
	unsigned char * end_of_storage;
	void insert_aux(unsigned char *, const unsigned char&);
public:
	unsigned char * begin();
	unsigned char * begin();
	unsigned char * end();
	unsigned char * end();
	class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int> rbegin();
	class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int> rbegin();
	class reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,int> rend();
	class reverse_iterator<unsigned char *,unsigned char,unsigned char &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const unsigned char& operator[](uint32_t);
	unsigned char& operator[](uint32_t);
	void vector<unsigned char>(unsigned char *, unsigned char *);
	void vector<unsigned char>(const class vector<unsigned char>&);
	void vector<unsigned char>(uint32_t, const unsigned char&);
	void vector<unsigned char>();
	void ~vector<unsigned char>();
	class vector<unsigned char>& operator=(const class vector<unsigned char>&);
	void reserve(uint32_t);
	const unsigned char& front();
	unsigned char& front();
	const unsigned char& back();
	unsigned char& back();
	void push_back(const unsigned char&);
	void swap(class vector<unsigned char>&);
	void insert(unsigned char *, uint32_t, const unsigned char&);
	void insert(unsigned char *, unsigned char *, unsigned char *);
	unsigned char * insert(unsigned char *, const unsigned char&);
	void pop_back();
	void erase(unsigned char *, unsigned char *);
	void erase(unsigned char *);
};

// Type: unsigned char *;

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: class IBackBuffer;
class IBackBuffer : public IFlatImage
{
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
};

// Type: class IFlatImage;
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};



// Contribution: 1:000670a0-0006a0c9 Module: 42, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004680a0
void BitmappedFont::BitmappedFont() {
// LINE 24:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004680FF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004680F1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00468109;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00468118;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0046816B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0046815D;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x00468175;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x00468184;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    near ptr 0x004681E3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        jmp    near ptr 0x00468206;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
	__asm        jmp    near ptr 0x00468229;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5904D0;
// LINE 25:
	__asm        jmp    near ptr 0x00468237;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046823f
void BitmappedFont::BitmappedFont(class basic_string<char>& sNewFontInfoPath, const long lNewLanguage) {
// LINE 37:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x00468250;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00468292;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468283;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468292;
	__asm        jmp    near ptr 0x00468297;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x004682BD;
	__asm        jmp    near ptr 0x004682AC;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004682C4;
	__asm        mov    dword ptr [ebp-8], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004682C9;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0046830A;
	__asm        jmp    near ptr 0x004682E0;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0046830A;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004683EC;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004683E2;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004683BC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0046835C;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468381;
	__asm        mov    eax, sNewFontInfoPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046838D;
	__asm        jmp    near ptr 0x0046838D;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0046838D;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004683B7;
	__asm        jmp    near ptr 0x004683C5;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004683D4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004683EC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004683FB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046844E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00468440;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x00468458;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x00468467;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, lNewLanguage;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    near ptr 0x004684BB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        jmp    near ptr 0x004684DE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
	__asm        jmp    near ptr 0x00468501;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5904D0;
// LINE 38:
	__asm        jmp    near ptr 0x0046850F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00468519
void BitmappedFont::BitmappedFont(char * szNewFontInfoPath, const long lNewLanguage) {
// LINE 49:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004685D5;
	__asm        mov    eax, szNewFontInfoPath;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00468553;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004685AF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, szNewFontInfoPath;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004685AA;
	__asm        jmp    near ptr 0x004685B8;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004685C7;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004685DF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004685EE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00468641;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00468633;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        jmp    near ptr 0x0046864B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x0046865A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, lNewLanguage;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    near ptr 0x004686AE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        jmp    near ptr 0x004686D1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
	__asm        jmp    near ptr 0x004686F4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5904D0;
// LINE 50:
	__asm        jmp    near ptr 0x00468702;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0046870c
void BitmappedFont::~BitmappedFont() {
// LINE 57:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5904D0;
// LINE 58:
	__asm        mov    ecx, this;
	__asm        call   0x0046A0F5;
// LINE 59:
	__asm        jmp    near ptr 0x0046872E;
	__asm        jmp    near ptr 0x00468733;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046874D;
	__asm        jmp    near ptr 0x00468752;
	__asm        jmp    near ptr 0x00468757;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     near ptr 0x0046877D;
	__asm        jmp    near ptr 0x00468774;
	__asm        add    dword ptr [ebp-0xC], 0x10;
	__asm        jmp    near ptr 0x00468760;
	__asm        jmp    near ptr 0x00468782;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046879C;
	__asm        jmp    near ptr 0x004687A1;
	__asm        jmp    near ptr 0x004687A6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x34], ecx;
	__asm        je     near ptr 0x004687CC;
	__asm        jmp    near ptr 0x004687C3;
	__asm        add    dword ptr [ebp-0x14], 0x10;
	__asm        jmp    near ptr 0x004687AF;
	__asm        jmp    near ptr 0x004687D1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004687EB;
	__asm        jmp    near ptr 0x004687F0;
	__asm        jmp    near ptr 0x004687F5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00468881;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00468881;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00468861;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00468866;
	__asm        jmp    near ptr 0x0046886B;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046887C;
	__asm        jmp    near ptr 0x00468881;
	__asm        jmp    near ptr 0x00468886;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x004688AE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004688B3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0046893F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0046893F;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0046891F;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00468924;
	__asm        jmp    near ptr 0x00468929;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046893A;
	__asm        jmp    near ptr 0x0046893F;
	__asm        jmp    near ptr 0x00468944;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0046896C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468971;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00468976
int32_t BitmappedFont::Initialize() {
// LINE 65:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
	__asm        jmp    near ptr 0x00468992;
// LINE 67:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00468997
void BitmappedFont::DeInitialize() {
// LINE 73:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 74:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 75:
	__asm        jmp    near ptr 0x004689B3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004689b8
int32_t BitmappedFont::LoadFontInfo() {
	class MRect rectTemp;
	char chRectangleBuffer[4096];
	int32_t i;
	int32_t iEnd;
	char * chCurrentRectangle;
	char szBitmapFile[256];

// LINE 82:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x11EC;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 86:
	__asm        jmp    near ptr 0x004689D3;
	__asm        jmp    near ptr 0x004689D8;
// LINE 89:
	__asm        jmp    near ptr 0x004689DD;
	__asm        jmp    near ptr 0x004689E2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x1154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0x1158], eax;
	__asm        jmp    near ptr 0x00468A05;
	__asm        mov    eax, [ebp-0x1158];
	__asm        mov    [ebp-0x1148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x114C], eax;
	__asm        mov    eax, [ebp-0x1154];
	__asm        mov    [ebp-0x1150], eax;
	__asm        mov    eax, [ebp-0x114C];
	__asm        cmp    [ebp-0x1150], eax;
	__asm        je     near ptr 0x00468A73;
	__asm        mov    eax, [ebp-0x1150];
	__asm        mov    ecx, [ebp-0x1148];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x1150], 0x10;
	__asm        add    dword ptr [ebp-0x1148], 0x10;
	__asm        jmp    near ptr 0x00468A2C;
	__asm        jmp    near ptr 0x00468A78;
	__asm        mov    eax, [ebp-0x1148];
	__asm        mov    [ebp-0x1140], eax;
	__asm        mov    eax, [ebp-0x1140];
	__asm        mov    [ebp-0x1144], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1144];
	__asm        cmp    [eax+0x34], ecx;
	__asm        je     near ptr 0x00468AB6;
	__asm        jmp    near ptr 0x00468AAA;
	__asm        add    dword ptr [ebp-0x1144], 0x10;
	__asm        jmp    near ptr 0x00468A90;
	__asm        jmp    near ptr 0x00468ABB;
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x1154];
	__asm        sub    ecx, [ebp-0x1158];
	__asm        and    ecx, 0xFFFFFFF0;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x34], eax;
	__asm        jmp    near ptr 0x00468ADE;
// LINE 90:
	__asm        jmp    near ptr 0x00468AE3;
	__asm        jmp    near ptr 0x00468AE8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x1138], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0x113C], eax;
	__asm        jmp    near ptr 0x00468B0B;
	__asm        mov    eax, [ebp-0x113C];
	__asm        mov    [ebp-0x112C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x1130], eax;
	__asm        mov    eax, [ebp-0x1138];
	__asm        mov    [ebp-0x1134], eax;
	__asm        mov    eax, [ebp-0x1130];
	__asm        cmp    [ebp-0x1134], eax;
	__asm        je     near ptr 0x00468B65;
	__asm        mov    eax, [ebp-0x1134];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x112C];
	__asm        mov    [ecx], al;
	__asm        inc    dword ptr [ebp-0x1134];
	__asm        inc    dword ptr [ebp-0x112C];
	__asm        jmp    near ptr 0x00468B32;
	__asm        jmp    near ptr 0x00468B6A;
	__asm        mov    eax, [ebp-0x112C];
	__asm        mov    [ebp-0x1128], eax;
	__asm        jmp    near ptr 0x00468B7B;
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x1138];
	__asm        sub    ecx, [ebp-0x113C];
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x4C], eax;
	__asm        jmp    near ptr 0x00468B9B;
// LINE 92:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468BD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        mov    eax, [ebp-0x116C];
	__asm        mov    [ebp-0x1174], eax;
	__asm        mov    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468BDA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00468BFE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468C9B;
	__asm        jmp    near ptr 0x00468C16;
	__asm        jmp    near ptr 0x00468C1B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468C49;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1180], eax;
	__asm        jmp    near ptr 0x00468C58;
	__asm        jmp    near ptr 0x00468C58;
	__asm        mov    dword ptr [ebp-0x1180], 0;
	__asm        jmp    near ptr 0x00468C58;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1184], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1188], eax;
	__asm        mov    eax, [ebp-0x1184];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1180];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1188];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00468C9B;
	__asm        jmp    near ptr 0x00468CA0;
	__asm        mov    byte ptr [ebp-0x1170], 0;
	__asm        jmp    near ptr 0x00468CAC;
	__asm        lea    eax, [ebp-0x1170];
	__asm        mov    [ebp-0x1178], eax;
	__asm        jmp    near ptr 0x00468CBD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x117C], eax;
	__asm        mov    eax, [ebp-0x1178];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x117C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00468CED;
	__asm        jmp    near ptr 0x00468CF2;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599354;
	__asm        push   0x59935C;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468D55;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x118C], eax;
	__asm        mov    eax, [ebp-0x118C];
	__asm        mov    [ebp-0x1194], eax;
	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468D5A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00468D7E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468E1B;
	__asm        jmp    near ptr 0x00468D96;
	__asm        jmp    near ptr 0x00468D9B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468DC9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        jmp    near ptr 0x00468DD8;
	__asm        jmp    near ptr 0x00468DD8;
	__asm        mov    dword ptr [ebp-0x11A0], 0;
	__asm        jmp    near ptr 0x00468DD8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11A8], eax;
	__asm        mov    eax, [ebp-0x11A4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00468E1B;
	__asm        jmp    near ptr 0x00468E20;
	__asm        mov    byte ptr [ebp-0x1190], 0;
	__asm        jmp    near ptr 0x00468E2C;
	__asm        lea    eax, [ebp-0x1190];
	__asm        mov    [ebp-0x1198], eax;
	__asm        jmp    near ptr 0x00468E3D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x119C], eax;
	__asm        mov    eax, [ebp-0x1198];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x119C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00468E6D;
	__asm        jmp    near ptr 0x00468E72;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599364;
	__asm        push   0x59936C;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468ED5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        mov    eax, [ebp-0x11AC];
	__asm        mov    [ebp-0x11B4], eax;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00468EDA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00468EFE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468F9B;
	__asm        jmp    near ptr 0x00468F16;
	__asm        jmp    near ptr 0x00468F1B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00468F49;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        jmp    near ptr 0x00468F58;
	__asm        jmp    near ptr 0x00468F58;
	__asm        mov    dword ptr [ebp-0x11C0], 0;
	__asm        jmp    near ptr 0x00468F58;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11C8], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00468F9B;
	__asm        jmp    near ptr 0x00468FA0;
	__asm        mov    byte ptr [ebp-0x11B0], 0;
	__asm        jmp    near ptr 0x00468FAC;
	__asm        lea    eax, [ebp-0x11B0];
	__asm        mov    [ebp-0x11B8], eax;
	__asm        jmp    near ptr 0x00468FBD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x11BC], eax;
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00468FED;
	__asm        jmp    near ptr 0x00468FF2;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599378;
	__asm        push   0x599384;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 95:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469055;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046905A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0046907E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004690ED;
	__asm        jmp    near ptr 0x00469096;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11E8], eax;
	__asm        mov    eax, [ebp-0x11E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004690ED;
	__asm        jmp    near ptr 0x004690F2;
	__asm        mov    byte ptr [ebp-0x11D0], 0;
	__asm        jmp    near ptr 0x004690FE;
	__asm        lea    eax, [ebp-0x11D0];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        jmp    near ptr 0x0046910F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11DC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0046913F;
	__asm        jmp    near ptr 0x00469144;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0x599390;
	__asm        push   0x5993A0;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 96:
	__asm        mov    eax, this;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        push   0x5993AC;
	__asm        push   0x5993BC;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 97:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        push   0x5993C8;
	__asm        push   0x5993D8;
	__asm        mov    ecx, this;
	__asm        call   0x0046AFC3;
// LINE 98:
	__asm        push   0x1000;
	__asm        lea    eax, chRectangleBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        push   0x5993E4;
	__asm        push   0x5993F0;
	__asm        mov    ecx, this;
	__asm        call   0x0046B012;
// LINE 99:
	__asm        push   0x100;
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        push   0x5993FC;
	__asm        push   0x599410;
	__asm        mov    ecx, this;
	__asm        call   0x0046B012;
// LINE 100:
	__asm        jmp    near ptr 0x0046922E;
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, szBitmapFile[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xC;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00469258;
// LINE 103:
	__asm        lea    eax, chRectangleBuffer[0];
	__asm        mov    chCurrentRectangle, eax;
// LINE 104:
	__asm        mov    i, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x00469288;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x004693C5;
// LINE 106:
	__asm        lea    eax, rectTemp.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectTemp.right;
	__asm        push   eax;
	__asm        lea    eax, rectTemp.top;
	__asm        push   eax;
	__asm        lea    eax, rectTemp.left;
	__asm        push   eax;
	__asm        push   0x59941C;
	__asm        mov    eax, chCurrentRectangle;
	__asm        push   eax;
	__asm        call   0x0056F7E0;
	__asm        add    esp, 0x18;
// LINE 107:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        cmp    [eax+0x34], ecx;
	__asm        je     near ptr 0x0046934A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x1160], eax;
	__asm        mov    eax, [ebp-0x1160];
	__asm        mov    [ebp-0x115C], eax;
	__asm        jmp    near ptr 0x00469302;
	__asm        cmp    dword ptr [ebp-0x115C], 0;
	__asm        je     near ptr 0x00469336;
	__asm        lea    eax, rectTemp.left;
	__asm        mov    ecx, [ebp-0x115C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469336;
	__asm        jmp    near ptr 0x0046933B;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x34], 0x10;
	__asm        jmp    near ptr 0x0046936E;
	__asm        jmp    near ptr 0x0046934F;
	__asm        lea    eax, rectTemp.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        call   0x0046B140;
	__asm        jmp    near ptr 0x00469373;
// LINE 109:
	__asm        mov    eax, iEnd;
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x004693C0;
// LINE 112:
	__asm        mov    eax, chCurrentRectangle;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 0x20;
	__asm        je     near ptr 0x004693A3;
// LINE 113:
	__asm        inc    chCurrentRectangle;
	__asm        jmp    near ptr 0x00469386;
// LINE 114:
	__asm        mov    eax, chCurrentRectangle;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 0x20;
	__asm        jne    near ptr 0x004693C0;
// LINE 115:
	__asm        inc    chCurrentRectangle;
	__asm        jmp    near ptr 0x004693A3;
// LINE 117:
	__asm        jmp    near ptr 0x00469282;
// LINE 119:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004693D4;
	__asm        jmp    near ptr 0x004693D9;
	__asm        jmp    near ptr 0x004693DE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x30];
	__asm        sar    eax, 4;
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x00469404;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x004694FD;
// LINE 120:
	__asm        jmp    near ptr 0x0046941B;
	__asm        jmp    near ptr 0x00469420;
	__asm        jmp    near ptr 0x00469425;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, i;
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    edx, i;
	__asm        shl    edx, 4;
	__asm        sub    eax, [ecx+edx];
	__asm        mov    [ebp-0x1120], al;
	__asm        lea    eax, [ebp-0x1120];
	__asm        mov    [ebp-0x1124], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        cmp    [eax+0x4C], ecx;
	__asm        je     near ptr 0x004694CF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x1168], eax;
	__asm        mov    eax, [ebp-0x1168];
	__asm        mov    [ebp-0x1164], eax;
	__asm        jmp    near ptr 0x0046949A;
	__asm        cmp    dword ptr [ebp-0x1164], 0;
	__asm        je     near ptr 0x004694BC;
	__asm        mov    eax, [ebp-0x1124];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1164];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004694BC;
	__asm        jmp    near ptr 0x004694C1;
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x4C];
	__asm        jmp    near ptr 0x004694F3;
	__asm        jmp    near ptr 0x004694D4;
	__asm        mov    eax, [ebp-0x1124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        call   0x0046B540;
	__asm        jmp    near ptr 0x004694F8;
	__asm        jmp    near ptr 0x004693FE;
// LINE 122:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 125:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        jmp    near ptr 0x0046952D;
// LINE 126:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00469532
void BitmappedFont::CalculateCharacterRects() {
	unsigned char nTransparentIndex;
	int32_t yEnd;
	int32_t i;
	int32_t y;
	int32_t iEnd;
	int32_t x;
	int32_t xEnd;
	class MRect rectCurrent;

// LINE 138:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 142:
	__asm        jmp    near ptr 0x00469549;
	__asm        jmp    near ptr 0x0046954E;
// LINE 144:
	__asm        jmp    near ptr 0x00469553;
	__asm        jmp    near ptr 0x00469558;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00469575;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    [ebp-0x40], eax;
	__asm        je     near ptr 0x004695C2;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        add    dword ptr [ebp-0x40], 0x10;
	__asm        add    dword ptr [ebp-0x38], 0x10;
	__asm        jmp    near ptr 0x0046958D;
	__asm        jmp    near ptr 0x004695C7;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x34];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     near ptr 0x004695F3;
	__asm        jmp    near ptr 0x004695EA;
	__asm        add    dword ptr [ebp-0x34], 0x10;
	__asm        jmp    near ptr 0x004695D3;
	__asm        jmp    near ptr 0x004695F8;
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        sub    ecx, [ebp-0x48];
	__asm        and    ecx, 0xFFFFFFF0;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x00469615;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
// LINE 147:
	__asm        jmp    near ptr 0x00469630;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    al, [eax];
	__asm        mov    nTransparentIndex, al;
// LINE 149:
	__asm        mov    i, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x0046965C;
	__asm        inc    i;
	__asm        mov    eax, iEnd;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x00469D1C;
// LINE 151:
	__asm        jmp    near ptr 0x0046966D;
	__asm        jmp    near ptr 0x00469672;
	__asm        jmp    near ptr 0x00469677;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, i;
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    edx, i;
	__asm        shl    edx, 4;
	__asm        sub    eax, [ecx+edx];
	__asm        mov    xEnd, eax;
// LINE 152:
	__asm        jmp    near ptr 0x004696A4;
	__asm        jmp    near ptr 0x004696A9;
	__asm        jmp    near ptr 0x004696AE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, i;
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    edx, i;
	__asm        shl    edx, 4;
	__asm        sub    eax, [ecx+edx+4];
	__asm        mov    yEnd, eax;
// LINE 153:
	__asm        mov    eax, xEnd;
	__asm        mov    rectCurrent.left, eax;
	__asm        mov    eax, yEnd;
	__asm        mov    rectCurrent.top, eax;
	__asm        mov    rectCurrent.right, 0;
	__asm        mov    rectCurrent.bottom, 0;
	__asm        jmp    near ptr 0x004696F6;
// LINE 154:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x00469705;
	__asm        inc    x;
	__asm        mov    eax, x;
	__asm        cmp    xEnd, eax;
	__asm        jle    near ptr 0x004697EF;
// LINE 155:
	__asm        mov    y, 0;
	__asm        jmp    near ptr 0x00469720;
	__asm        inc    y;
	__asm        mov    eax, y;
	__asm        cmp    yEnd, eax;
	__asm        jle    near ptr 0x004697EA;
// LINE 156:
	__asm        jmp    near ptr 0x00469731;
	__asm        jmp    near ptr 0x00469736;
	__asm        jmp    near ptr 0x0046973B;
	__asm        jmp    near ptr 0x00469740;
	__asm        jmp    near ptr 0x00469745;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, i;
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+4];
	__asm        add    eax, y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        imul   eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x30];
	__asm        mov    edx, i;
	__asm        shl    edx, 4;
	__asm        mov    ecx, [ecx+edx];
	__asm        add    ecx, x;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        xor    eax, eax;
	__asm        mov    al, nTransparentIndex;
	__asm        cmp    edx, eax;
	__asm        je     near ptr 0x004697E5;
// LINE 157:
	__asm        mov    eax, x;
	__asm        cmp    rectCurrent.left, eax;
	__asm        jle    near ptr 0x004697AF;
// LINE 158:
	__asm        mov    eax, x;
	__asm        mov    rectCurrent.left, eax;
// LINE 159:
	__asm        mov    eax, x;
	__asm        cmp    rectCurrent.right, eax;
	__asm        jge    near ptr 0x004697C1;
// LINE 160:
	__asm        mov    eax, x;
	__asm        mov    rectCurrent.right, eax;
// LINE 161:
	__asm        mov    eax, y;
	__asm        cmp    rectCurrent.top, eax;
	__asm        jle    near ptr 0x004697D3;
// LINE 162:
	__asm        mov    eax, y;
	__asm        mov    rectCurrent.top, eax;
// LINE 163:
	__asm        mov    eax, y;
	__asm        cmp    rectCurrent.bottom, eax;
	__asm        jge    near ptr 0x004697E5;
// LINE 164:
	__asm        mov    eax, y;
	__asm        mov    rectCurrent.bottom, eax;
// LINE 166:
	__asm        jmp    near ptr 0x0046971D;
// LINE 167:
	__asm        jmp    near ptr 0x00469702;
// LINE 170:
	__asm        mov    eax, rectCurrent.left;
	__asm        cmp    rectCurrent.right, eax;
	__asm        jge    near ptr 0x00469821;
// LINE 171:
	__asm        mov    rectCurrent.left, 0;
	__asm        mov    rectCurrent.top, 0;
	__asm        mov    rectCurrent.right, 0;
	__asm        mov    rectCurrent.bottom, 0;
	__asm        jmp    near ptr 0x0046981C;
// LINE 172:
	__asm        jmp    near ptr 0x00469827;
// LINE 173:
	__asm        inc    rectCurrent.right;
// LINE 174:
	__asm        inc    rectCurrent.bottom;
// LINE 176:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     near ptr 0x00469895;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00469856;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00469881;
	__asm        lea    eax, rectCurrent.left;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469881;
	__asm        jmp    near ptr 0x00469886;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x40], 0x10;
	__asm        jmp    near ptr 0x00469D12;
	__asm        jmp    near ptr 0x0046989A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     near ptr 0x004699A9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        sub    eax, 0x10;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004698F0;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x0046991E;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0046991E;
	__asm        jmp    near ptr 0x00469923;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        sub    eax, 0x10;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    [ebp-0xC0], eax;
	__asm        je     near ptr 0x00469976;
	__asm        sub    dword ptr [ebp-0x78], 0x10;
	__asm        sub    dword ptr [ebp-0x7C], 0x10;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0046993E;
	__asm        jmp    near ptr 0x0046997B;
	__asm        lea    eax, rectCurrent.left;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x40], 0x10;
	__asm        jmp    near ptr 0x00469D0D;
	__asm        jmp    near ptr 0x004699AE;
	__asm        jmp    near ptr 0x004699B3;
	__asm        jmp    near ptr 0x004699B8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        sar    eax, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00469A03;
	__asm        jmp    near ptr 0x004699DA;
	__asm        jmp    near ptr 0x004699DF;
	__asm        jmp    near ptr 0x004699E4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        sar    eax, 4;
	__asm        add    eax, eax;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00469A50;
	__asm        mov    dword ptr [ebp-0x64], 0x100;
	__asm        lea    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    dword ptr [ebp-0x68], 1;
	__asm        lea    eax, [ebp-0x68];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00469A38;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00469A3E;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00469A43;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00469A50;
	__asm        jmp    near ptr 0x00469A55;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0046B0D0;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00469A6B;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        cmp    [ebp-0xA4], eax;
	__asm        je     near ptr 0x00469B0A;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x94], eax;
	__asm        add    dword ptr [ebp-0xA4], 0x10;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x98], eax;
	__asm        add    dword ptr [ebp-0xA0], 0x10;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x00469ACC;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x00469B00;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469B00;
	__asm        jmp    near ptr 0x00469B05;
	__asm        jmp    near ptr 0x00469A83;
	__asm        jmp    near ptr 0x00469B0F;
	__asm        jmp    near ptr 0x00469B14;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        and    eax, 0xFFFFFFF0;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x54];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00469B49;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x00469B7A;
	__asm        lea    eax, rectCurrent.left;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469B7A;
	__asm        jmp    near ptr 0x00469B7F;
	__asm        jmp    near ptr 0x00469B84;
	__asm        jmp    near ptr 0x00469B89;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        and    eax, 0xFFFFFFF0;
	__asm        sar    eax, 0;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        add    eax, [ebp-0x54];
	__asm        add    eax, 0x10;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        cmp    [ebp-0xBC], eax;
	__asm        je     near ptr 0x00469C52;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xA8], eax;
	__asm        add    dword ptr [ebp-0xBC], 0x10;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        add    dword ptr [ebp-0xB4], 0x10;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    near ptr 0x00469C14;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        je     near ptr 0x00469C48;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469C48;
	__asm        jmp    near ptr 0x00469C4D;
	__asm        jmp    near ptr 0x00469BCB;
	__asm        jmp    near ptr 0x00469C57;
	__asm        jmp    near ptr 0x00469C5C;
	__asm        jmp    near ptr 0x00469C61;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x60];
	__asm        cmp    [eax+0x40], ecx;
	__asm        je     near ptr 0x00469C8D;
	__asm        jmp    near ptr 0x00469C84;
	__asm        add    dword ptr [ebp-0x60], 0x10;
	__asm        jmp    near ptr 0x00469C6D;
	__asm        jmp    near ptr 0x00469C92;
	__asm        jmp    near ptr 0x00469C97;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00469CB4;
	__asm        jmp    near ptr 0x00469CB9;
	__asm        mov    eax, [ebp-0x58];
	__asm        shl    eax, 4;
	__asm        add    eax, [ebp-0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x00469CD0;
	__asm        jmp    near ptr 0x00469CD5;
	__asm        jmp    near ptr 0x00469CDA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x3C];
	__asm        sar    eax, 4;
	__asm        shl    eax, 4;
	__asm        add    eax, [ebp-0x54];
	__asm        add    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x00469D12;
	__asm        jmp    near ptr 0x00469D17;
// LINE 177:
	__asm        jmp    near ptr 0x00469659;
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 179:
	__asm        jmp    near ptr 0x00469D38;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00469d3d
int32_t BitmappedFont::CreateImage() {
	char szBitmapFilePath[260];
	unsigned char chTransparentIndex;

// LINE 190:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x150;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 194:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0046A0E2;
// LINE 195:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00469D99;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00469D9E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00469DC2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469E5F;
	__asm        jmp    near ptr 0x00469DDA;
	__asm        jmp    near ptr 0x00469DDF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469E0D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x00469E1C;
	__asm        jmp    near ptr 0x00469E1C;
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        jmp    near ptr 0x00469E1C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x12C], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00469E5F;
	__asm        jmp    near ptr 0x00469E64;
	__asm        mov    byte ptr [ebp-0x114], 0;
	__asm        jmp    near ptr 0x00469E70;
	__asm        lea    eax, [ebp-0x114];
	__asm        mov    [ebp-0x11C], eax;
	__asm        jmp    near ptr 0x00469E81;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00469EB1;
	__asm        jmp    near ptr 0x00469EB6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469EF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x130], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00469EF5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00469F19;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469FB6;
	__asm        jmp    near ptr 0x00469F31;
	__asm        jmp    near ptr 0x00469F36;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00469F64;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    near ptr 0x00469F73;
	__asm        jmp    near ptr 0x00469F73;
	__asm        mov    dword ptr [ebp-0x144], 0;
	__asm        jmp    near ptr 0x00469F73;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00469FB6;
	__asm        jmp    near ptr 0x00469FBB;
	__asm        mov    byte ptr [ebp-0x134], 0;
	__asm        jmp    near ptr 0x00469FC7;
	__asm        lea    eax, [ebp-0x134];
	__asm        mov    [ebp-0x13C], eax;
	__asm        jmp    near ptr 0x00469FD8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0046A008;
	__asm        jmp    near ptr 0x0046A00D;
	__asm        lea    eax, szBitmapFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046B049;
// LINE 196:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x0046A073;
	__asm        lea    eax, szBitmapFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x0046A080;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 197:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
// LINE 198:
	__asm        jmp    near ptr 0x0046A09B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    al, [eax];
	__asm        mov    chTransparentIndex, al;
// LINE 199:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 200:
	__asm        xor    eax, eax;
	__asm        mov    al, chTransparentIndex;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
// LINE 202:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        jmp    near ptr 0x0046A0F0;
// LINE 203:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046a0f5
void BitmappedFont::DestroyImage() {
// LINE 209:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 210:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0046A14F;
// LINE 211:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0046A145;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046A140;
	__asm        jmp    near ptr 0x0046A145;
// LINE 212:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 214:
	__asm        jmp    near ptr 0x0046A154;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0046a159
long BitmappedFont::GetStringWidth(char * chText, const unsigned long nStringLength) {
	char * chEnd;
	long lWidth;

// LINE 228:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 229:
	__asm        mov    lWidth, 0;
// LINE 230:
	__asm        mov    eax, nStringLength;
	__asm        add    eax, chText;
	__asm        mov    chEnd, eax;
// LINE 232:
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046A216;
	__asm        mov    eax, chText;
	__asm        cmp    chEnd, eax;
	__asm        jbe    near ptr 0x0046A216;
// LINE 233:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A1CB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A1CB;
	__asm        jmp    near ptr 0x0046A1DF;
	__asm        jmp    near ptr 0x0046A1CB;
	__asm        jmp    near ptr 0x0046A1DA;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x0046A1DF;
	__asm        jmp    near ptr 0x0046A20E;
	__asm        jmp    near ptr 0x0046A1E4;
	__asm        jmp    near ptr 0x0046A1E9;
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        add    lWidth, edx;
	__asm        jmp    near ptr 0x0046A20E;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    lWidth, eax;
// LINE 234:
	__asm        inc    chText;
// LINE 235:
	__asm        jmp    near ptr 0x0046A175;
// LINE 237:
	__asm        mov    eax, lWidth;
	__asm        jmp    near ptr 0x0046A21E;
// LINE 238:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0046a225
long BitmappedFont::GetStringVisibleWidth(char * chText, const unsigned long nStringLength, unsigned long& nVisibleStringLength) {
	char * chTextEnd;
	long lWidth;

// LINE 251:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 252:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A159;
	__asm        mov    lWidth, eax;
// LINE 253:
	__asm        mov    eax, nStringLength;
	__asm        dec    eax;
	__asm        add    eax, chText;
	__asm        mov    chTextEnd, eax;
// LINE 255:
	__asm        cmp    nStringLength, 0;
	__asm        ja     near ptr 0x0046A25F;
// LINE 256:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046A375;
// LINE 260:
	__asm        mov    eax, nStringLength;
	__asm        mov    ecx, nVisibleStringLength;
	__asm        mov    [ecx], eax;
// LINE 261:
	__asm        mov    eax, chText;
	__asm        cmp    chTextEnd, eax;
	__asm        jb     near ptr 0x0046A36D;
	__asm        mov    eax, chTextEnd;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0046A2D7;
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chTextEnd;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A2C8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x28];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chTextEnd;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A2C8;
	__asm        jmp    near ptr 0x0046A36D;
	__asm        jmp    near ptr 0x0046A2C8;
	__asm        jmp    near ptr 0x0046A2D7;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x0046A36D;
// LINE 262:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chTextEnd;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A313;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x28];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chTextEnd;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A313;
	__asm        jmp    near ptr 0x0046A327;
	__asm        jmp    near ptr 0x0046A313;
	__asm        jmp    near ptr 0x0046A322;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jne    near ptr 0x0046A327;
	__asm        jmp    near ptr 0x0046A360;
	__asm        jmp    near ptr 0x0046A32C;
	__asm        jmp    near ptr 0x0046A331;
	__asm        xor    eax, eax;
	__asm        mov    ecx, chTextEnd;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+0x28];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x48];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        sub    eax, ebx;
	__asm        neg    eax;
	__asm        sub    lWidth, eax;
	__asm        jmp    near ptr 0x0046A360;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x14];
	__asm        neg    eax;
	__asm        sub    lWidth, eax;
// LINE 263:
	__asm        mov    eax, nVisibleStringLength;
	__asm        dec    dword ptr [eax];
// LINE 264:
	__asm        dec    chTextEnd;
// LINE 265:
	__asm        jmp    near ptr 0x0046A267;
// LINE 266:
	__asm        mov    eax, lWidth;
	__asm        jmp    near ptr 0x0046A375;
// LINE 267:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046a37c
long BitmappedFont::CalculateNumberOfLines(char * chText, const unsigned long nStringLength, const unsigned long nWidth) {
	long lLineCount;
	char * chTextEnd;
	long lCurrentLineStringLength;

// LINE 278:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 280:
	__asm        mov    eax, nStringLength;
	__asm        add    eax, chText;
	__asm        mov    chTextEnd, eax;
// LINE 281:
	__asm        mov    lLineCount, 0;
// LINE 283:
	__asm        mov    eax, chTextEnd;
	__asm        cmp    chText, eax;
	__asm        jae    near ptr 0x0046A3C5;
// LINE 284:
	__asm        mov    eax, nWidth;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A44B;
	__asm        mov    lCurrentLineStringLength, eax;
// LINE 285:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        add    chText, eax;
// LINE 286:
	__asm        inc    lLineCount;
// LINE 287:
	__asm        jmp    near ptr 0x0046A398;
// LINE 288:
	__asm        mov    eax, lLineCount;
	__asm        jmp    near ptr 0x0046A3CD;
// LINE 289:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046a3d4
long BitmappedFont::CalculateWidthOfLines(char * chText, const unsigned long nStringLength, const unsigned long nHeight) {
	unsigned long nCurrentWidth;
	const long lLines;

// LINE 307:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 308:
	__asm        jmp    near ptr 0x0046A3E5;
	__asm        mov    ecx, this;
	__asm        mov    eax, nHeight;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x24];
	__asm        mov    lLines, eax;
// LINE 311:
	__asm        mov    nCurrentWidth, 0x14;
	__asm        jmp    near ptr 0x0046A403;
	__asm        add    nCurrentWidth, 0xA;
	__asm        cmp    nCurrentWidth, 0xFA0;
	__asm        jae    near ptr 0x0046A43A;
// LINE 312:
	__asm        mov    eax, nCurrentWidth;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A37C;
	__asm        cmp    eax, lLines;
	__asm        jg     near ptr 0x0046A435;
// LINE 313:
	__asm        mov    eax, nCurrentWidth;
	__asm        jmp    near ptr 0x0046A444;
// LINE 314:
	__asm        jmp    near ptr 0x0046A3FF;
// LINE 315:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046A444;
// LINE 316:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0046a44b
long BitmappedFont::CalculateCharsToFitInWidth(char * chText, const unsigned long nWidth) {
	unsigned long nPotentialCurrentWidth;
	char * chTextCurrent;
	unsigned long nPotentialCurrentChars;
	unsigned long nCurrentChars;

// LINE 334:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 335:
	__asm        mov    nPotentialCurrentWidth, 0;
// LINE 336:
	__asm        mov    nCurrentChars, 0;
// LINE 337:
	__asm        mov    nPotentialCurrentChars, 0;
// LINE 338:
	__asm        mov    eax, chText;
	__asm        mov    chTextCurrent, eax;
// LINE 340:
	__asm        mov    eax, nWidth;
	__asm        cmp    nPotentialCurrentWidth, eax;
	__asm        ja     near ptr 0x0046A56E;
// LINE 341:
	__asm        mov    eax, chTextCurrent;
	__asm        movsx  eax, byte ptr [eax];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0046A494;
// LINE 345:
	__asm        mov    eax, nPotentialCurrentChars;
	__asm        jmp    near ptr 0x0046A5DC;
// LINE 350:
	__asm        mov    eax, chTextCurrent;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046A4B9;
// LINE 351:
	__asm        mov    eax, nPotentialCurrentChars;
	__asm        inc    eax;
	__asm        mov    nCurrentChars, eax;
// LINE 352:
	__asm        jmp    near ptr 0x0046A56E;
// LINE 355:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chTextCurrent;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A4F5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chTextCurrent;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A4F5;
	__asm        jmp    near ptr 0x0046A509;
	__asm        jmp    near ptr 0x0046A4F5;
	__asm        jmp    near ptr 0x0046A504;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x0046A509;
	__asm        jmp    near ptr 0x0046A538;
	__asm        jmp    near ptr 0x0046A50E;
	__asm        jmp    near ptr 0x0046A513;
	__asm        mov    eax, chTextCurrent;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        add    nPotentialCurrentWidth, edx;
	__asm        jmp    near ptr 0x0046A538;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    nPotentialCurrentWidth, eax;
// LINE 356:
	__asm        inc    nPotentialCurrentChars;
// LINE 358:
	__asm        mov    eax, chTextCurrent;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046A566;
	__asm        mov    eax, nWidth;
	__asm        cmp    nPotentialCurrentWidth, eax;
	__asm        ja     near ptr 0x0046A566;
// LINE 359:
	__asm        mov    eax, nPotentialCurrentChars;
	__asm        mov    nCurrentChars, eax;
// LINE 360:
	__asm        inc    chTextCurrent;
// LINE 361:
	__asm        jmp    near ptr 0x0046A472;
// LINE 368:
	__asm        cmp    nCurrentChars, 0;
	__asm        jne    near ptr 0x0046A5AF;
// LINE 369:
	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        movsx  eax, byte ptr [eax+ecx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046A5AF;
	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        mov    al, [eax+ecx];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0046A5AF;
// LINE 370:
	__asm        inc    nCurrentChars;
	__asm        jmp    near ptr 0x0046A578;
// LINE 375:
	__asm        mov    eax, nCurrentChars;
	__asm        mov    ecx, chText;
	__asm        mov    al, [eax+ecx];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0046A5D4;
// LINE 376:
	__asm        inc    nCurrentChars;
	__asm        jmp    near ptr 0x0046A5AF;
// LINE 378:
	__asm        mov    eax, nCurrentChars;
	__asm        jmp    near ptr 0x0046A5DC;
// LINE 379:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0046a5e3
void BitmappedFont::DrawTextLine(class CBackBuffer* destination, long x, long y, char * chText, const unsigned long nStringLength) {
	char * chEnd;

// LINE 392:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 393:
	__asm        mov    eax, nStringLength;
	__asm        add    eax, chText;
	__asm        mov    chEnd, eax;
// LINE 395:
	__asm        mov    eax, chText;
	__asm        cmp    chEnd, eax;
	__asm        jbe    near ptr 0x0046A7D0;
	__asm        mov    eax, chText;
	__asm        mov    al, [eax];
	__asm        mov    [ebp-0x28], al;
// LINE 396:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        movsx  ecx, byte ptr [ebp-0x28];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A644;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        movsx  ecx, byte ptr [ebp-0x28];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A644;
	__asm        jmp    near ptr 0x0046A658;
	__asm        jmp    near ptr 0x0046A644;
	__asm        jmp    near ptr 0x0046A653;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x0046A658;
	__asm        jmp    near ptr 0x0046A749;
	__asm        movsx  eax, byte ptr [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046A66A;
	__asm        jmp    near ptr 0x0046A66F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046A686;
	__asm        jmp    near ptr 0x0046A68B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046A6A3;
	__asm        jmp    near ptr 0x0046A6A8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0046A6BF;
	__asm        jmp    near ptr 0x0046A6C4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0046A6DC;
	__asm        jmp    near ptr 0x0046A6E1;
	__asm        jmp    near ptr 0x0046A6E6;
	__asm        jmp    near ptr 0x0046A6EB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+0xC];
	__asm        add    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+8];
	__asm        add    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        add    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        add    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0046A749;
// LINE 397:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A785;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A785;
	__asm        jmp    near ptr 0x0046A799;
	__asm        jmp    near ptr 0x0046A785;
	__asm        jmp    near ptr 0x0046A794;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0046A799;
	__asm        jmp    near ptr 0x0046A7C8;
	__asm        jmp    near ptr 0x0046A79E;
	__asm        jmp    near ptr 0x0046A7A3;
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        add    x, edx;
	__asm        jmp    near ptr 0x0046A7C8;
	__asm        mov    eax, [ebp-0xC];
	__asm        add    x, eax;
// LINE 398:
	__asm        inc    chText;
// LINE 399:
	__asm        jmp    near ptr 0x0046A5F8;
// LINE 400:
	__asm        jmp    near ptr 0x0046A7D5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046a7dc
void BitmappedFont::DrawTextLineNoClip(class CBackBuffer* destination, long x, long y, char * chText, const unsigned long nStringLength) {
	char * chEnd;

// LINE 409:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 410:
	__asm        mov    eax, nStringLength;
	__asm        add    eax, chText;
	__asm        mov    chEnd, eax;
// LINE 412:
	__asm        mov    eax, chText;
	__asm        cmp    chEnd, eax;
	__asm        jbe    near ptr 0x0046A9C9;
	__asm        mov    eax, chText;
	__asm        mov    al, [eax];
	__asm        mov    [ebp-0x28], al;
// LINE 413:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        movsx  ecx, byte ptr [ebp-0x28];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A83D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        movsx  ecx, byte ptr [ebp-0x28];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A83D;
	__asm        jmp    near ptr 0x0046A851;
	__asm        jmp    near ptr 0x0046A83D;
	__asm        jmp    near ptr 0x0046A84C;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x0046A851;
	__asm        jmp    near ptr 0x0046A942;
	__asm        movsx  eax, byte ptr [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0046A863;
	__asm        jmp    near ptr 0x0046A868;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0046A87F;
	__asm        jmp    near ptr 0x0046A884;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0046A89C;
	__asm        jmp    near ptr 0x0046A8A1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0046A8B8;
	__asm        jmp    near ptr 0x0046A8BD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0046A8D5;
	__asm        jmp    near ptr 0x0046A8DA;
	__asm        jmp    near ptr 0x0046A8DF;
	__asm        jmp    near ptr 0x0046A8E4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+0xC];
	__asm        add    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x10];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [eax+ecx+8];
	__asm        add    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, y;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, x;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x3C];
	__asm        jmp    near ptr 0x0046A942;
// LINE 414:
	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0x28];
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0046A97E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        movsx  eax, al;
	__asm        mov    ecx, chText;
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0046A97E;
	__asm        jmp    near ptr 0x0046A992;
	__asm        jmp    near ptr 0x0046A97E;
	__asm        jmp    near ptr 0x0046A98D;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0046A992;
	__asm        jmp    near ptr 0x0046A9C1;
	__asm        jmp    near ptr 0x0046A997;
	__asm        jmp    near ptr 0x0046A99C;
	__asm        mov    eax, chText;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x48];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        add    x, edx;
	__asm        jmp    near ptr 0x0046A9C1;
	__asm        mov    eax, [ebp-0xC];
	__asm        add    x, eax;
// LINE 415:
	__asm        inc    chText;
// LINE 416:
	__asm        jmp    near ptr 0x0046A7F1;
// LINE 417:
	__asm        jmp    near ptr 0x0046A9CE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046a9d5
void BitmappedFont::DrawTextPara(class CBackBuffer* destination, class MRect& rectPara, char * chText, const unsigned long nStringLength) {
	const long lRectWidth;
	long lCurrentXPosition;
	const long lRectHeight;
	long lCurrentYPosition;
	long lCharacterHeight;
	long lCurrentLineStringLength;

// LINE 428:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 429:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    lCurrentXPosition, eax;
// LINE 430:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+4];
	__asm        mov    lCurrentYPosition, eax;
// LINE 431:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lCharacterHeight, eax;
	__asm        jmp    near ptr 0x0046AA00;
// LINE 433:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx];
	__asm        mov    lRectWidth, eax;
	__asm        jmp    near ptr 0x0046AA13;
// LINE 434:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx+4];
	__asm        mov    lRectHeight, eax;
	__asm        jmp    near ptr 0x0046AA27;
// LINE 436:
	__asm        mov    eax, lCurrentYPosition;
	__asm        cmp    lRectHeight, eax;
	__asm        jle    near ptr 0x0046AA73;
// LINE 437:
	__asm        mov    eax, lRectWidth;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A44B;
	__asm        mov    lCurrentLineStringLength, eax;
// LINE 438:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, lCurrentYPosition;
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A5E3;
// LINE 439:
	__asm        mov    eax, lCharacterHeight;
	__asm        add    lCurrentYPosition, eax;
// LINE 440:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        add    chText, eax;
// LINE 441:
	__asm        jmp    near ptr 0x0046AA27;
// LINE 442:
	__asm        jmp    near ptr 0x0046AA78;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0046aa7f
void BitmappedFont::DrawTextParaNoClip(class CBackBuffer* destination, class MRect& rectPara, char * chText, const unsigned long nStringLength) {
	const long lRectWidth;
	long lCurrentXPosition;
	const long lRectHeight;
	long lCurrentYPosition;
	long lCharacterHeight;
	long lCurrentLineStringLength;

// LINE 454:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 455:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    lCurrentXPosition, eax;
// LINE 456:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+4];
	__asm        mov    lCurrentYPosition, eax;
// LINE 457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lCharacterHeight, eax;
	__asm        jmp    near ptr 0x0046AAAA;
// LINE 459:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx];
	__asm        mov    lRectWidth, eax;
	__asm        jmp    near ptr 0x0046AABD;
// LINE 460:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx+4];
	__asm        mov    lRectHeight, eax;
	__asm        jmp    near ptr 0x0046AAD1;
// LINE 462:
	__asm        mov    eax, lRectHeight;
	__asm        cmp    lCurrentYPosition, eax;
	__asm        jge    near ptr 0x0046AB1D;
// LINE 463:
	__asm        mov    eax, lRectWidth;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A44B;
	__asm        mov    lCurrentLineStringLength, eax;
// LINE 464:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, lCurrentYPosition;
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A7DC;
// LINE 465:
	__asm        mov    eax, lCharacterHeight;
	__asm        add    lCurrentYPosition, eax;
// LINE 466:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        add    chText, eax;
// LINE 467:
	__asm        jmp    near ptr 0x0046AAD1;
// LINE 468:
	__asm        jmp    near ptr 0x0046AB22;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0046ab29
void BitmappedFont::DrawTextLineFormat(class CBackBuffer* destination, class MRect& rectLine, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	unsigned long nVisibleStringWidth;
	unsigned long nVisibleStringLength;

// LINE 482:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 486:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 1;
	__asm        je     near ptr 0x0046ABA6;
// LINE 487:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 488:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046ABA1;
// LINE 491:
	__asm        jmp    near ptr 0x0046AB65;
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectLine;
	__asm        sub    eax, [ecx];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, rectLine;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, nVisibleStringWidth;
	__asm        shr    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A5E3;
// LINE 493:
	__asm        jmp    near ptr 0x0046AC3A;
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 8;
	__asm        je     near ptr 0x0046ABFB;
// LINE 494:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 495:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046ABF6;
// LINE 498:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        sub    eax, nVisibleStringWidth;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A5E3;
// LINE 500:
	__asm        jmp    near ptr 0x0046AC3A;
// LINE 501:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
// LINE 502:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046AC3A;
// LINE 503:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A5E3;
// LINE 505:
	__asm        jmp    near ptr 0x0046AC3F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046ac46
void BitmappedFont::DrawTextLineFormatNoClip(class CBackBuffer* destination, class MRect& rectLine, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	unsigned long nVisibleStringWidth;
	unsigned long nVisibleStringLength;

// LINE 519:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 523:
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 1;
	__asm        je     near ptr 0x0046ACC3;
// LINE 524:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 525:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046ACBE;
// LINE 528:
	__asm        jmp    near ptr 0x0046AC82;
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectLine;
	__asm        sub    eax, [ecx];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, rectLine;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, nVisibleStringWidth;
	__asm        shr    eax, 1;
	__asm        sub    ecx, eax;
	__asm        push   ecx;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A7DC;
// LINE 530:
	__asm        jmp    near ptr 0x0046AD57;
	__asm        test   reinterpret_cast<uint8_t>(nFormat), 8;
	__asm        je     near ptr 0x0046AD18;
// LINE 531:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
	__asm        mov    nVisibleStringWidth, eax;
// LINE 532:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046AD13;
// LINE 535:
	__asm        mov    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+8];
	__asm        sub    eax, nVisibleStringWidth;
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A7DC;
// LINE 537:
	__asm        jmp    near ptr 0x0046AD57;
// LINE 538:
	__asm        lea    eax, nVisibleStringLength;
	__asm        push   eax;
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A225;
// LINE 539:
	__asm        cmp    nVisibleStringLength, 0;
	__asm        je     near ptr 0x0046AD57;
// LINE 540:
	__asm        mov    eax, nStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, rectLine;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A7DC;
// LINE 542:
	__asm        jmp    near ptr 0x0046AD5C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046ad63
void BitmappedFont::DrawTextParaFormat(class CBackBuffer* destination, class MRect& rectPara, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	const long lRectWidth;
	long lCurrentXPosition;
	const long lRectHeight;
	long lCurrentYPosition;
	long lCharacterHeight;
	long lCurrentLineStringLength;

// LINE 556:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 557:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    lCurrentXPosition, eax;
// LINE 558:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+4];
	__asm        mov    lCurrentYPosition, eax;
// LINE 559:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lCharacterHeight, eax;
	__asm        jmp    near ptr 0x0046AD8E;
// LINE 561:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx];
	__asm        mov    lRectWidth, eax;
	__asm        jmp    near ptr 0x0046ADA1;
// LINE 562:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx+4];
	__asm        mov    lRectHeight, eax;
	__asm        jmp    near ptr 0x0046ADB5;
// LINE 564:
	__asm        mov    eax, lCurrentYPosition;
	__asm        cmp    lRectHeight, eax;
	__asm        jle    near ptr 0x0046AE37;
// LINE 565:
	__asm        mov    eax, lRectWidth;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A44B;
	__asm        mov    lCurrentLineStringLength, eax;
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
// LINE 568:
	__asm        jmp    near ptr 0x0046ADEA;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, lCurrentYPosition;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, lCharacterHeight;
	__asm        add    eax, lCurrentYPosition;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0046AE0A;
	__asm        mov    eax, nFormat;
	__asm        push   eax;
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046AB29;
// LINE 569:
	__asm        mov    eax, lCharacterHeight;
	__asm        add    lCurrentYPosition, eax;
// LINE 570:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        add    chText, eax;
// LINE 571:
	__asm        jmp    near ptr 0x0046ADB5;
// LINE 572:
	__asm        jmp    near ptr 0x0046AE3C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046ae43
void BitmappedFont::DrawTextParaFormatNoClip(class CBackBuffer* destination, class MRect& rectPara, char * chText, const unsigned long nStringLength, const unsigned long nFormat) {
	const long lRectWidth;
	long lCurrentXPosition;
	const long lRectHeight;
	long lCurrentYPosition;
	long lCharacterHeight;
	long lCurrentLineStringLength;

// LINE 585:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 586:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    lCurrentXPosition, eax;
// LINE 587:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+4];
	__asm        mov    lCurrentYPosition, eax;
// LINE 588:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lCharacterHeight, eax;
	__asm        jmp    near ptr 0x0046AE6E;
// LINE 590:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx];
	__asm        mov    lRectWidth, eax;
	__asm        jmp    near ptr 0x0046AE81;
// LINE 591:
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectPara;
	__asm        sub    eax, [ecx+4];
	__asm        mov    lRectHeight, eax;
	__asm        jmp    near ptr 0x0046AE95;
// LINE 593:
	__asm        mov    eax, lCurrentYPosition;
	__asm        cmp    lRectHeight, eax;
	__asm        jle    near ptr 0x0046AF17;
// LINE 594:
	__asm        mov    eax, lRectWidth;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046A44B;
	__asm        mov    lCurrentLineStringLength, eax;
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, rectPara;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
// LINE 597:
	__asm        jmp    near ptr 0x0046AECA;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, lCurrentYPosition;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, lCharacterHeight;
	__asm        add    eax, lCurrentYPosition;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0046AEEA;
	__asm        mov    eax, nFormat;
	__asm        push   eax;
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        push   eax;
	__asm        mov    eax, chText;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, destination;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0046AC46;
// LINE 598:
	__asm        mov    eax, lCharacterHeight;
	__asm        add    lCurrentYPosition, eax;
// LINE 599:
	__asm        mov    eax, lCurrentLineStringLength;
	__asm        add    chText, eax;
// LINE 600:
	__asm        jmp    near ptr 0x0046AE95;
// LINE 601:
	__asm        jmp    near ptr 0x0046AF1C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046af23
int32_t BitmappedFont::IsCharBreakingChar(const char chText) {
// LINE 613:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 614:
	__asm        movsx  eax, chText;
	__asm        cmp    eax, 0x20;
	__asm        je     near ptr 0x0046AF49;
	__asm        movsx  eax, chText;
	__asm        cmp    eax, 0x2D;
	__asm        jne    near ptr 0x0046AF53;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046AF55;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046AF5A;
// LINE 615:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0046af61
int32_t BitmappedFont::IsCharReturnChar(const char chText) {
// LINE 625:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 626:
	__asm        movsx  eax, chText;
	__asm        cmp    eax, 0xA;
	__asm        jne    near ptr 0x0046AF84;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046AF86;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046AF8B;
// LINE 627:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0046af92
int32_t BitmappedFont::IsCharWhitespace(const char chText) {
// LINE 634:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 635:
	__asm        movsx  eax, chText;
	__asm        cmp    eax, 0x20;
	__asm        jne    near ptr 0x0046AFB5;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046AFB7;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046AFBC;
// LINE 636:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0046afc3
int32_t BitmappedFont::GetIniFileLong(char * chHeader, char * chSection, char * chPath, long * lResult) {
// LINE 645:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 647:
	__asm        mov    eax, chPath;
	__asm        push   eax;
	__asm        push   0xFFFFD8F1;
	__asm        mov    eax, chSection;
	__asm        push   eax;
	__asm        mov    eax, chHeader;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C361C];
	__asm        mov    ecx, lResult;
	__asm        mov    [ecx], eax;
// LINE 648:
	__asm        mov    eax, lResult;
	__asm        cmp    dword ptr [eax], 0xFFFFD8F1;
	__asm        jne    near ptr 0x0046B001;
// LINE 649:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046B00B;
// LINE 650:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046B00B;
// LINE 654:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0046b012
int32_t BitmappedFont::GetIniFileString(char * chHeader, char * chSection, char * chPath, char * chResult, const long lStringLength) {
// LINE 663:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 665:
	__asm        mov    eax, chPath;
	__asm        push   eax;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, chResult;
	__asm        push   eax;
	__asm        push   0x59942C;
	__asm        mov    eax, chSection;
	__asm        push   eax;
	__asm        mov    eax, chHeader;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3618];
	__asm        jmp    near ptr 0x0046B042;
// LINE 669:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0046b049
int32_t BitmappedFont::GetPathForBitmapFile(char * chFontInfoPath, char * chBitmapFile, char * chBitmapPath) {
	char szFileExtension[256];
	char szDrive[3];
	char szDirectory[256];
	char szFileName[256];

// LINE 677:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x308;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 684:
	__asm        lea    eax, szFileExtension[0];
	__asm        push   eax;
	__asm        lea    eax, szFileName[0];
	__asm        push   eax;
	__asm        lea    eax, szDirectory[0];
	__asm        push   eax;
	__asm        lea    eax, szDrive[0];
	__asm        push   eax;
	__asm        mov    eax, chFontInfoPath;
	__asm        push   eax;
	__asm        call   0x0056DDF0;
	__asm        add    esp, 0x14;
// LINE 685:
	__asm        lea    eax, szDrive[0];
	__asm        push   eax;
	__asm        mov    eax, chBitmapPath;
	__asm        push   eax;
	__asm        call   0x0056CEB0;
	__asm        add    esp, 8;
// LINE 686:
	__asm        lea    eax, szDirectory[0];
	__asm        push   eax;
	__asm        mov    eax, chBitmapPath;
	__asm        push   eax;
	__asm        call   0x0056CEC0;
	__asm        add    esp, 8;
// LINE 687:
	__asm        mov    eax, chBitmapFile;
	__asm        push   eax;
	__asm        mov    eax, chBitmapPath;
	__asm        push   eax;
	__asm        call   0x0056CEC0;
	__asm        add    esp, 8;
// LINE 689:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046B0C3;
// LINE 690:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}



// Contribution: 1:0006a0d0-0006a138 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b0d0
// allocate



// Contribution: 1:0006a140-0006a533 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b140
// vector<MRect>::insert_aux



// Contribution: 1:0006a540-0006a867 Module: 42, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0046b540
// vector<unsigned char>::insert_aux



// Contribution: 2:000014d0-000014f3 Module: 42, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005904d0
// ??_7BitmappedFont@@6B@


// Contribution: 3:00002354-0000242c Module: 42, 4 byte alignment, initialized_data, read, write, 
