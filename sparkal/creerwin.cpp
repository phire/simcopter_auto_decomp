// Module: Creerwin.obj
// Source: C:\Copter\source\sparkal\Creerwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: struct SparkalColor;
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: void ();

// Type: void;

// Type: class CareerWindow (forward reference);
// VTABLE: COPTER_D 0x00590ef4
class CareerWindow : public GraphicWindow
{
public:
	void CareerWindow(class MRect&, int32_t, void * __ptr32, long *, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t);
	virtual void ~CareerWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	long SetCurrentCitySelection(long);
	long GetCurrentCitySelection();
	class CareerWindow::CitySelectionFrame{
	public:
		void CitySelectionFrame(int32_t, int32_t, int32_t);
		virtual void ~CitySelectionFrame(); // vtable+0x0
		void FillDestinationPoints(class MPoint*);
		void FillSourceRects(class MRect*);
		int32_t bLeft;
		int32_t bTop;
		int32_t bSelected;
		class MRect rectFrame[4];
	};
protected:
	void DrawCitySelection();
	void GetCoordinatesForCitySelections(class MPoint[4]*, class MRect[4]*);
	long lCurrentCitySelection;
	class MRect rectCities[3];
	long lCities[3];
	int32_t nCityCount;
	int32_t bAllowCancel;
	class SmackerBackBuffer mySmackerBackBuffers[3];
	void * __ptr32 myPlatformWindow;
	class TextWindow* cityNameTextWindow;
	class TextWindow* cityLevelTextWindow;
	class CBackBuffer* mySelectionImage;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t;

// Type: void * __ptr32;

// Type: long *;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{
public:
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: char;

// Type: long;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const struct SparkalColor*, const struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: unsigned long;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class CareerWindow::CitySelectionFrame;
class CareerWindow::CitySelectionFrame{
public:
	void CitySelectionFrame(int32_t, int32_t, int32_t);
	virtual void ~CitySelectionFrame(); // vtable+0x0
	void FillDestinationPoints(class MPoint*);
	void FillSourceRects(class MRect*);
	int32_t bLeft;
	int32_t bTop;
	int32_t bSelected;
	class MRect rectFrame[4];
};

// Type: class CareerWindow::CitySelectionFrame (forward reference);
class CareerWindow::CitySelectionFrame{
public:
	void CitySelectionFrame(int32_t, int32_t, int32_t);
	virtual void ~CitySelectionFrame(); // vtable+0x0
	void FillDestinationPoints(class MPoint*);
	void FillSourceRects(class MRect*);
	int32_t bLeft;
	int32_t bTop;
	int32_t bSelected;
	class MRect rectFrame[4];
};

// Type: uint32_t;

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:0007ce80-0007f60b Module: 31, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047de80
static void $E64() {

	__asm        call   $E63;
	__asm        jmp    near ptr 0x0047DE90;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047de95
static void $E63() {

	__asm        mov    colorTextGamePaletteNormal.Blue, 0xA;
	__asm        mov    colorTextGamePaletteNormal.Green, 0x85;
	__asm        mov    colorTextGamePaletteNormal.Red, 0xDA;
	__asm        jmp    near ptr 0x0047DEB5;

	__asm        jmp    near ptr 0x0047DEBA;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047debf
static void $E67() {

	__asm        call   $E66;
	__asm        jmp    near ptr 0x0047DECF;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047ded4
static void $E66() {

	__asm        mov    colorTextGamePaletteHighlighted.Blue, 0x6F;
	__asm        mov    colorTextGamePaletteHighlighted.Green, 0xDA;
	__asm        mov    colorTextGamePaletteHighlighted.Red, 0xFF;
	__asm        jmp    near ptr 0x0047DEF4;

	__asm        jmp    near ptr 0x0047DEF9;
}

// FUNCTION: COPTER_D 0x0047defe
void CareerWindow::CareerWindow(class MRect& rectNewPosition, int32_t nNewID, void * __ptr32 myNewPlatformWindow, long * lNewCities, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t bNewAllowCancel) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        mov    [ebp-8], eax;
_T40:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T5a;

	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    _T40;
_T5a:
	__asm        jmp    near ptr 0x0047DF5D;

	__asm        mov    eax, bNewAllowCancel;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    dword ptr [ebp-0xC], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-0x10], eax;
_T7d:
	__asm        dec    dword ptr [ebp-0xC];
	__asm        js     _T9a;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   SmackerBackBuffer::SmackerBackBuffer;
	__asm        add    dword ptr [ebp-0x10], 0x27C;
	__asm        jmp    _T7d;
_T9a:
	__asm        jmp    near ptr 0x0047DF9D;

	__asm        mov    eax, myNewPlatformWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x830], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x83C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590E30;
// LINE 64:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x47;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x115;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0xB3;
	__asm        jmp    near ptr 0x0047DFF2;
// LINE 65:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x153;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x47;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x21B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xB3;
	__asm        jmp    near ptr 0x0047E02B;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0xF9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0x115;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0x165;
	__asm        jmp    near ptr 0x0047E064;
// LINE 68:
	__asm        cmp    lNewCities, 0;
	__asm        je     _T1a1;
// LINE 69:
	__asm        mov    eax, lNewCities;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
// LINE 70:
	__asm        mov    eax, lNewCities;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 71:
	__asm        mov    eax, lNewCities;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 73:
	__asm        jmp    _T1cb;
// LINE 74:
_T1a1:
	__asm        mov    eax, gCurrentCareerCityInfo.lCurrentCities[0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
// LINE 75:
	__asm        mov    eax, gCurrentCareerCityInfo.lCurrentCities[1];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 76:
	__asm        mov    eax, gCurrentCareerCityInfo.lCurrentCities[2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 80:
_T1cb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 3;
// LINE 81:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0xFFFFFFFF;
	__asm        jne    _T1f5;
// LINE 82:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 2;
// LINE 83:
_T1f5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jne    _T212;
// LINE 84:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 1;
// LINE 86:
_T212:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0xFFFFFFFF;
// LINE 87:
	__asm        jmp    near ptr 0x0047E11F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047e129
void CareerWindow::~CareerWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590E30;
// LINE 94:
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::DestroyImage;
// LINE 95:
	__asm        jmp    near ptr 0x0047E14B;

	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 7;
	__asm        sub    eax, ecx;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ecx;
	__asm        add    [ebp-8], eax;
_T46:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T63;

	__asm        sub    dword ptr [ebp-8], 0x27C;
	__asm        mov    ecx, [ebp-8];
	__asm        call   SmackerBackBuffer::~SmackerBackBuffer;
	__asm        jmp    _T46;
_T63:
	__asm        jmp    near ptr 0x0047E191;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0047e19e
int32_t CareerWindow::Initialize() {
	char szFullCityVideoFileName[256];
	long lCityLevelString;
	char szFullCityVideoFilePath[260];
	long lCityNameString;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 103:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x298], eax;
	__asm        cmp    dword ptr [ebp-0x298], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x298];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047E20E;

	__asm        mov    eax, [ebp-0x298];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	__asm        mov    sText.reference, 0;
_T85:
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0047E22F;
// LINE 109:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 111:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T6fe;
// LINE 115:
// Block start:
	class ButtonWindow* tempButtonWindow2;
	class ButtonWindow* tempButtonWindow1;
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x228], eax;
	__asm        cmp    dword ptr [ebp-0x228], 0;
	__asm        je     _T136;

	__asm        jmp    near ptr 0x0047E272;

	__asm        mov    dword ptr [ebp-0x238], 0x147;
	__asm        mov    dword ptr [ebp-0x234], 0x152;
	__asm        mov    dword ptr [ebp-0x230], 0x148;
	__asm        mov    dword ptr [ebp-0x22C], 0x153;
	__asm        jmp    near ptr 0x0047E29F;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x238];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x228];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    _T140;
_T136:
	__asm        mov    tempButtonWindow1, 0;
// LINE 116:
_T140:
	__asm        push   0;
	__asm        push   0x51;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 117:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12AC], eax;
	__asm        cmp    dword ptr [ebp-0x12AC], 0;
	__asm        jne    _T1fc;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12AC], eax;
	__asm        jmp    near ptr 0x0047E34C;

	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047E370;

	__asm        jmp    near ptr 0x0047E375;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047E395;

	__asm        jmp    _T390;
_T1fc:
	__asm        jmp    near ptr 0x0047E39F;

	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C8], eax;
	__asm        cmp    dword ptr [ebp-0x12C8], 0xFFFFFFFF;
	__asm        jne    _T25b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x12BC], eax;
	__asm        mov    eax, [ebp-0x12BC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047E3EA;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T25b;
_T25b:
	__asm        jmp    near ptr 0x0047E3FE;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T291;

	__asm        cmp    dword ptr [ebp-0x12C8], 0;
	__asm        je     _T336;

	__asm        jmp    near ptr 0x0047E41D;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x12C8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T336;
_T291:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12B4], eax;
	__asm        cmp    dword ptr [ebp-0x12B4], 0;
	__asm        je     _T2d2;

	__asm        mov    eax, [ebp-0x12C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12B4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x12B0], eax;
	__asm        jmp    _T2dc;
_T2d2:
	__asm        mov    dword ptr [ebp-0x12B0], 0;
_T2dc:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T323;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x12C4], eax;
	__asm        mov    eax, [ebp-0x12C4];
	__asm        mov    [ebp-0x12C0], eax;
	__asm        cmp    dword ptr [ebp-0x12C0], 0;
	__asm        je     _T323;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x12C0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T323;
_T323:
	__asm        jmp    near ptr 0x0047E4C6;

	__asm        mov    eax, [ebp-0x12B0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T375;
_T336:
	__asm        cmp    dword ptr [ebp-0x12C8], 0;
	__asm        je     _T375;

	__asm        jmp    near ptr 0x0047E4E6;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x12B8], eax;
	__asm        mov    eax, [ebp-0x12C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x12B8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T375;
_T375:
	__asm        mov    eax, [ebp-0x12C8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047E524;

	__asm        jmp    near ptr 0x0047E529;

	__asm        jmp    _T390;
// LINE 118:
_T390:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 119:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 120:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 124:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x23C], eax;
	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     _T45b;

	__asm        jmp    near ptr 0x0047E597;

	__asm        mov    dword ptr [ebp-0x24C], 0x1AF;
	__asm        mov    dword ptr [ebp-0x248], 0x152;
	__asm        mov    dword ptr [ebp-0x244], 0x1B0;
	__asm        mov    dword ptr [ebp-0x240], 0x153;
	__asm        jmp    near ptr 0x0047E5C4;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x23C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow2, eax;
	__asm        jmp    _T465;
_T45b:
	__asm        mov    tempButtonWindow2, 0;
// LINE 125:
_T465:
	__asm        push   0;
	__asm        push   0x52;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 126:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22CC], eax;
	__asm        cmp    dword ptr [ebp-0x22CC], 0;
	__asm        jne    _T521;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22CC], eax;
	__asm        jmp    near ptr 0x0047E671;

	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047E695;

	__asm        jmp    near ptr 0x0047E69A;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047E6BA;

	__asm        jmp    _T6b5;
_T521:
	__asm        jmp    near ptr 0x0047E6C4;

	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x22E8], eax;
	__asm        cmp    dword ptr [ebp-0x22E8], 0xFFFFFFFF;
	__asm        jne    _T580;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x22DC], eax;
	__asm        mov    eax, [ebp-0x22DC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047E70F;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T580;
_T580:
	__asm        jmp    near ptr 0x0047E723;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T5b6;

	__asm        cmp    dword ptr [ebp-0x22E8], 0;
	__asm        je     _T65b;

	__asm        jmp    near ptr 0x0047E742;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x22E8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T65b;
_T5b6:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x22D4], eax;
	__asm        cmp    dword ptr [ebp-0x22D4], 0;
	__asm        je     _T5f7;

	__asm        mov    eax, [ebp-0x22E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x22D4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x22D0], eax;
	__asm        jmp    _T601;
_T5f7:
	__asm        mov    dword ptr [ebp-0x22D0], 0;
_T601:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T648;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x22E4], eax;
	__asm        mov    eax, [ebp-0x22E4];
	__asm        mov    [ebp-0x22E0], eax;
	__asm        cmp    dword ptr [ebp-0x22E0], 0;
	__asm        je     _T648;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x22E0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T648;
_T648:
	__asm        jmp    near ptr 0x0047E7EB;

	__asm        mov    eax, [ebp-0x22D0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T69a;
_T65b:
	__asm        cmp    dword ptr [ebp-0x22E8], 0;
	__asm        je     _T69a;

	__asm        jmp    near ptr 0x0047E80B;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x22D8], eax;
	__asm        mov    eax, [ebp-0x22E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22D8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T69a;
_T69a:
	__asm        mov    eax, [ebp-0x22E8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047E849;

	__asm        jmp    near ptr 0x0047E84E;

	__asm        jmp    _T6b5;
// LINE 127:
_T6b5:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0x48];
// LINE 128:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0xD8];
// LINE 129:
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+4];
// LINE 131:
// Block end:
	__asm        jmp    _T9df;
// LINE 134:
// Block start:
	class ButtonWindow* tempButtonWindow1;
_T6fe:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x250], eax;
	__asm        cmp    dword ptr [ebp-0x250], 0;
	__asm        je     _T785;

	__asm        jmp    near ptr 0x0047E8C1;

	__asm        mov    dword ptr [ebp-0x260], 0x17C;
	__asm        mov    dword ptr [ebp-0x25C], 0x152;
	__asm        mov    dword ptr [ebp-0x258], 0x17D;
	__asm        mov    dword ptr [ebp-0x254], 0x153;
	__asm        jmp    near ptr 0x0047E8EE;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x250];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    _T78f;
_T785:
	__asm        mov    tempButtonWindow1, 0;
// LINE 135:
_T78f:
	__asm        push   0;
	__asm        push   0x51;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 136:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32EC], eax;
	__asm        cmp    dword ptr [ebp-0x32EC], 0;
	__asm        jne    _T84b;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32EC], eax;
	__asm        jmp    near ptr 0x0047E99B;

	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047E9BF;

	__asm        jmp    near ptr 0x0047E9C4;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047E9E4;

	__asm        jmp    _T99b;
_T84b:
	__asm        jmp    near ptr 0x0047E9EE;

	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3300], eax;
	__asm        cmp    dword ptr [ebp-0x3300], 0xFFFFFFFF;
	__asm        jne    _T8aa;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x32FC], eax;
	__asm        mov    eax, [ebp-0x32FC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047EA39;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T8aa;
_T8aa:
	__asm        jmp    near ptr 0x0047EA4D;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T8e0;

	__asm        cmp    dword ptr [ebp-0x3300], 0;
	__asm        je     _T941;

	__asm        jmp    near ptr 0x0047EA6C;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x3300];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T941;
_T8e0:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x32F4], eax;
	__asm        cmp    dword ptr [ebp-0x32F4], 0;
	__asm        je     _T921;

	__asm        mov    eax, [ebp-0x3300];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x32F4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x32F0], eax;
	__asm        jmp    _T92b;
_T921:
	__asm        mov    dword ptr [ebp-0x32F0], 0;
_T92b:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x32F0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T980;
_T941:
	__asm        cmp    dword ptr [ebp-0x3300], 0;
	__asm        je     _T980;

	__asm        jmp    near ptr 0x0047EAF1;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x32F8], eax;
	__asm        mov    eax, [ebp-0x3300];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x32F8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T980;
_T980:
	__asm        mov    eax, [ebp-0x3300];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047EB2F;

	__asm        jmp    near ptr 0x0047EB34;

	__asm        jmp    _T99b;
// LINE 137:
_T99b:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 138:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 139:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 143:
// Block end:
_T9df:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        add    eax, 0xF0;
	__asm        mov    lCityNameString, eax;
// LINE 144:
	__asm        push   0;
	__asm        mov    eax, lCityNameString;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 145:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4304], eax;
	__asm        cmp    dword ptr [ebp-0x4304], 0;
	__asm        jne    _Tab1;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4304], eax;
	__asm        jmp    near ptr 0x0047EC01;

	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047EC25;

	__asm        jmp    near ptr 0x0047EC2A;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047EC4A;

	__asm        jmp    _Tc01;
_Tab1:
	__asm        jmp    near ptr 0x0047EC54;

	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4318], eax;
	__asm        cmp    dword ptr [ebp-0x4318], 0xFFFFFFFF;
	__asm        jne    _Tb10;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4314], eax;
	__asm        mov    eax, [ebp-0x4314];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047EC9F;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tb10;
_Tb10:
	__asm        jmp    near ptr 0x0047ECB3;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tb46;

	__asm        cmp    dword ptr [ebp-0x4318], 0;
	__asm        je     _Tba7;

	__asm        jmp    near ptr 0x0047ECD2;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x4318];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tba7;
_Tb46:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x430C], eax;
	__asm        cmp    dword ptr [ebp-0x430C], 0;
	__asm        je     _Tb87;

	__asm        mov    eax, [ebp-0x4318];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x430C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x4308], eax;
	__asm        jmp    _Tb91;
_Tb87:
	__asm        mov    dword ptr [ebp-0x4308], 0;
_Tb91:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x4308];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Tbe6;
_Tba7:
	__asm        cmp    dword ptr [ebp-0x4318], 0;
	__asm        je     _Tbe6;

	__asm        jmp    near ptr 0x0047ED57;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4310], eax;
	__asm        mov    eax, [ebp-0x4318];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4310];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tbe6;
_Tbe6:
	__asm        mov    eax, [ebp-0x4318];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047ED95;

	__asm        jmp    near ptr 0x0047ED9A;

	__asm        jmp    _Tc01;
// LINE 148:
_Tc01:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     _Tc87;

	__asm        jmp    near ptr 0x0047EDC4;

	__asm        mov    dword ptr [ebp-0x274], 0x14E;
	__asm        mov    dword ptr [ebp-0x270], 0xEC;
	__asm        mov    dword ptr [ebp-0x26C], 0x216;
	__asm        mov    dword ptr [ebp-0x268], 0xFE;
	__asm        jmp    near ptr 0x0047EDF1;

	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x274];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x264];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x834], eax;
	__asm        jmp    _Tc97;
_Tc87:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x834], 0;
// LINE 149:
_Tc97:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+4];
// LINE 150:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xCC];
// LINE 151:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xD0];
// LINE 152:
	__asm        mov    byte ptr [ebp-0x278], 0xB5;
	__asm        mov    byte ptr [ebp-0x277], 0xF0;
	__asm        mov    byte ptr [ebp-0x276], 0;
	__asm        jmp    near ptr 0x0047EEB4;

	__asm        lea    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xD4];
// LINE 154:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].lCityLevel[eax+eax*8];
	__asm        add    eax, 0x122;
	__asm        mov    lCityLevelString, eax;
// LINE 155:
	__asm        push   0;
	__asm        mov    eax, lCityLevelString;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 156:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x531C], eax;
	__asm        cmp    dword ptr [ebp-0x531C], 0;
	__asm        jne    _Te1f;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x531C], eax;
	__asm        jmp    near ptr 0x0047EF6F;

	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047EF93;

	__asm        jmp    near ptr 0x0047EF98;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047EFB8;

	__asm        jmp    _Te4d;
_Te1f:
	__asm        jmp    near ptr 0x0047EFC2;

	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047EFE6;

	__asm        jmp    _Te4d;
// LINE 159:
_Te4d:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x27C], eax;
	__asm        cmp    dword ptr [ebp-0x27C], 0;
	__asm        je     _Ted3;

	__asm        jmp    near ptr 0x0047F010;

	__asm        mov    dword ptr [ebp-0x28C], 0x14E;
	__asm        mov    dword ptr [ebp-0x288], 0x10F;
	__asm        mov    dword ptr [ebp-0x284], 0x216;
	__asm        mov    dword ptr [ebp-0x280], 0x121;
	__asm        jmp    near ptr 0x0047F03D;

	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x27C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x838], eax;
	__asm        jmp    _Tee3;
_Ted3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x838], 0;
// LINE 160:
_Tee3:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+4];
// LINE 161:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xCC];
// LINE 162:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xD0];
// LINE 163:
	__asm        mov    byte ptr [ebp-0x290], 0xB5;
	__asm        mov    byte ptr [ebp-0x28F], 0xF0;
	__asm        mov    byte ptr [ebp-0x28E], 0;
	__asm        jmp    near ptr 0x0047F100;

	__asm        lea    eax, [ebp-0x290];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xD4];
// LINE 167:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 169:
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 170:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        add    ecx, 0xBC;
	__asm        call   dword ptr [eax+0x10];
// LINE 171:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 1;
// LINE 174:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 176:
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 177:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x338];
	__asm        add    ecx, 0x338;
	__asm        call   dword ptr [eax+0x10];
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x340], 1;
// LINE 181:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 183:
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 184:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5B4];
	__asm        add    ecx, 0x5B4;
	__asm        call   dword ptr [eax+0x10];
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5BC], 1;
// LINE 187:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 189:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::SetCurrentCitySelection;
// LINE 191:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeModal;
	__asm        add    esp, 4;
// LINE 192:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 194:
	__asm        mov    dword ptr [ebp-0x294], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T11ab;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        cmp    dword ptr [ebp-0x2A4], 0;
	__asm        je     _T11ab;

	__asm        mov    ecx, [ebp-0x2A4];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0047F330;

	__asm        mov    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047F344;

	__asm        jmp    _T11ab;
_T11ab:
	__asm        jmp    near ptr 0x0047F34E;

	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T11de;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T11de:
	__asm        jmp    near ptr 0x0047F381;

	__asm        mov    eax, [ebp-0x294];
	__asm        jmp    near ptr 0x0047F38C;
// LINE 195:
}

// FUNCTION: COPTER_D 0x0047f391
int32_t CareerWindow::CreateImage(int32_t __formal) {
	class basic_string<char> sImagePath;
	class basic_string<char> sImageFile;

// LINE 202:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047F3E2;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T63;
_T5c:
	__asm        mov    sImageFile.reference, 0;
_T63:
	__asm        mov    sImageFile.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0047F400;
// LINE 203:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tbf;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047F445;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tc6;
_Tbf:
	__asm        mov    sImagePath.reference, 0;
_Tc6:
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0047F463;
// LINE 205:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 206:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x83C], 0;
	__asm        jne    _T255;

	__asm        mov    eax, SZ_CAREER_WINDOW_SELECTION_FILE_NAME;
	__asm        mov    [ebp-0x1C], eax;
// LINE 207:
	__asm        jmp    near ptr 0x0047F48A;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047F4A8;
// LINE 208:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sImageFile.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0047F4C3;
// LINE 209:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T248;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T16e;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T16e:
	__asm        jmp    near ptr 0x0047F504;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0047F51C;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1f5;

	__asm        jmp    near ptr 0x0047F52E;

	__asm        jmp    near ptr 0x0047F533;

	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c1;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T1cd;

	__asm        jmp    _T1cd;
_T1c1:
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        jmp    _T1cd;
_T1cd:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1f5;
_T1f5:
	__asm        jmp    near ptr 0x0047F58B;

	__asm        mov    byte ptr [ebp-0x5C], 0;
	__asm        jmp    near ptr 0x0047F594;

	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x0047F59F;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0047F5BA;

	__asm        jmp    near ptr 0x0047F5BF;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x83C], eax;
	__asm        jmp    _T255;
_T248:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x83C], 0;
// LINE 211:
_T255:
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2df;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2df;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2bf;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T2bf:
	__asm        jmp    near ptr 0x0047F655;

	__asm        jmp    near ptr 0x0047F65A;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047F66B;

	__asm        jmp    _T2df;
_T2df:
	__asm        jmp    near ptr 0x0047F675;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T306;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T306:
	__asm        jmp    near ptr 0x0047F69C;

	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38e;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T38e;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T36e;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T36e:
	__asm        jmp    near ptr 0x0047F704;

	__asm        jmp    near ptr 0x0047F709;

	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047F71A;

	__asm        jmp    _T38e;
_T38e:
	__asm        jmp    near ptr 0x0047F724;

	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T3b5;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3b5:
	__asm        jmp    near ptr 0x0047F74B;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x0047F753;
// LINE 212:
}

// FUNCTION: COPTER_D 0x0047f75a
void CareerWindow::DestroyImage() {
// LINE 220:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x83C], 0;
	__asm        jne    _T63;
// LINE 221:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x83C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047F7AB;

	__asm        jmp    _T56;
// LINE 222:
_T56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x83C], 0;
// LINE 224:
_T63:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 225:
	__asm        jmp    near ptr 0x0047F7CA;
}

// FUNCTION: COPTER_D 0x0047f7cf
int32_t CareerWindow::DrawSelf() {
	int32_t i;
	unsigned long nErrorCode;

// LINE 241:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _Tcf;
// LINE 245:
	__asm        jmp    near ptr 0x0047F801;

	__asm        jmp    near ptr 0x0047F806;

	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 7;
	__asm        sub    eax, ecx;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x208];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 7;
	__asm        sub    eax, ecx;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x204];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x7C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 7;
	__asm        sub    eax, ecx;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    edx, i;
	__asm        mov    ebx, edx;
	__asm        shl    edx, 7;
	__asm        sub    edx, ebx;
	__asm        lea    edx, [edx+edx*4];
	__asm        add    edx, ebx;
	__asm        mov    ebx, this;
	__asm        mov    edx, [edx+ebx+0x1FC];
	__asm        lea    ecx, [eax+ecx+0x1FC];
	__asm        call   dword ptr [edx+0xC];
	__asm        mov    nErrorCode, eax;
// LINE 246:
	__asm        jmp    _T18;
// LINE 247:
_Tcf:
	__asm        mov    eax, nErrorCode;
	__asm        jmp    near ptr 0x0047F8A6;
// LINE 248:
}

// FUNCTION: COPTER_D 0x0047f8ab
void CareerWindow::DrawCitySelection() {
	class MPoint ptDestinations[3][4];
	int32_t j;
	int32_t i;
	class MRect rectSources[3][4];


	__asm        mov    dword ptr [ebp-0x12C], 0xC;
	__asm        lea    eax, ptDestinations[0][0].x;
	__asm        mov    [ebp-0x130], eax;
// LINE 257:
_T28:
	__asm        dec    dword ptr [ebp-0x12C];
	__asm        js     _T4b;

	__asm        mov    ecx, [ebp-0x130];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x130], 8;
	__asm        jmp    _T28;
_T4b:
	__asm        jmp    near ptr 0x0047F8FB;

	__asm        mov    dword ptr [ebp-0x134], 0xC;
	__asm        lea    eax, rectSources[0][0].left;
	__asm        mov    [ebp-0x138], eax;
// LINE 258:
_T66:
	__asm        dec    dword ptr [ebp-0x134];
	__asm        js     _T89;

	__asm        mov    ecx, [ebp-0x138];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x138], 0x10;
	__asm        jmp    _T66;
_T89:
	__asm        jmp    near ptr 0x0047F939;
// LINE 261:
	__asm        lea    eax, rectSources[0][0].left;
	__asm        push   eax;
	__asm        lea    eax, ptDestinations[0][0].x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::GetCoordinatesForCitySelections;
// LINE 262:
	__asm        mov    i, 0;
	__asm        jmp    _Tbc;
_Tb6:
	__asm        inc    i;
_Tbc:
	__asm        cmp    i, 3;
	__asm        jge    _T1c0;
// LINE 263:
	__asm        mov    j, 0;
	__asm        jmp    _Tde;
_Td8:
	__asm        inc    j;
_Tde:
	__asm        cmp    j, 4;
	__asm        jge    _T1bb;
// LINE 270:
	__asm        mov    eax, i;
	__asm        shl    eax, 6;
	__asm        mov    ecx, j;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    eax, [ebp+eax-0xB4];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 6;
	__asm        mov    ecx, j;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    eax, [ebp+eax-0xB8];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 6;
	__asm        mov    ecx, j;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    eax, [ebp+eax-0xBC];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 6;
	__asm        mov    ecx, j;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    eax, [ebp+eax-0xC0];
	__asm        push   eax;
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 5;
	__asm        lea    eax, [ecx+eax*8];
	__asm        mov    eax, [ebp+eax-0x124];
	__asm        push   eax;
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 5;
	__asm        lea    eax, [ecx+eax*8];
	__asm        mov    eax, [ebp+eax-0x128];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x83C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x83C];
	__asm        call   dword ptr [edx+0xC];
// LINE 271:
	__asm        jmp    _Td8;
// LINE 272:
_T1bb:
	__asm        jmp    _Tb6;
// LINE 273:
_T1c0:
	__asm        jmp    near ptr 0x0047FA70;
}

// FUNCTION: COPTER_D 0x0047fa75
long CareerWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 280:
	__asm        cmp    lKey, 0x1B;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T55;
// LINE 281:
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T55;
// LINE 282:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 284:
_T55:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T8e;
// LINE 285:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T8e;
// LINE 286:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 288:
_T8e:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047FB0D;
// LINE 289:
}

// FUNCTION: COPTER_D 0x0047fb14
long CareerWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t i;

// LINE 299:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _T122;
// LINE 300:
	__asm        jmp    near ptr 0x0047FB46;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047FB57;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-0xC];
	__asm        cmp    [eax+ecx+0x78], edx;
	__asm        jg     _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-8];
	__asm        cmp    [eax+ecx+0x7C], edx;
	__asm        jg     _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-0xC];
	__asm        cmp    [eax+ecx+0x80], edx;
	__asm        jle    _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-8];
	__asm        cmp    [eax+ecx+0x84], edx;
	__asm        jle    _Ta6;

	__asm        jmp    _Tab;
_Ta6:
	__asm        jmp    _T11d;
_Tab:
	__asm        jmp    _Tba;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T11d;
// LINE 301:
_Tba:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jne    _T107;
// LINE 303:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _Tf8;
// LINE 304:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 305:
_Tf8:
	__asm        mov    eax, 1;
	__asm        jmp    _T12c;
// LINE 307:
	__asm        jmp    _T11d;
// LINE 308:
_T107:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::SetCurrentCitySelection;
// LINE 309:
	__asm        mov    eax, 1;
	__asm        jmp    _T12c;
// LINE 312:
_T11d:
	__asm        jmp    _T18;
// LINE 313:
_T122:
	__asm        mov    eax, 1;
	__asm        jmp    _T12c;
// LINE 314:
_T12c:
}

// FUNCTION: COPTER_D 0x0047fc47
long CareerWindow::DoCursorMove(long nCursorX, long nCursorY) {
	int32_t i;

// LINE 324:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _Td5;
// LINE 325:
	__asm        jmp    near ptr 0x0047FC79;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0047FC8A;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-0xC];
	__asm        cmp    [eax+ecx+0x78], edx;
	__asm        jg     _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-8];
	__asm        cmp    [eax+ecx+0x7C], edx;
	__asm        jg     _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-0xC];
	__asm        cmp    [eax+ecx+0x80], edx;
	__asm        jle    _Ta6;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, [ebp-8];
	__asm        cmp    [eax+ecx+0x84], edx;
	__asm        jle    _Ta6;

	__asm        jmp    _Tab;
_Ta6:
	__asm        jmp    _Td0;
_Tab:
	__asm        jmp    _Tba;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Td0;
// LINE 326:
_Tba:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::SetCurrentCitySelection;
// LINE 327:
	__asm        mov    eax, 1;
	__asm        jmp    _Tdf;
// LINE 329:
_Td0:
	__asm        jmp    _T18;
// LINE 330:
_Td5:
	__asm        mov    eax, 1;
	__asm        jmp    _Tdf;
// LINE 331:
_Tdf:
}

// FUNCTION: COPTER_D 0x0047fd2d
int32_t CareerWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 339:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T9e;
// LINE 341:
_T17:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T46;
// LINE 342:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 343:
_T46:
	__asm        mov    eax, 1;
	__asm        jmp    _Tbe;
// LINE 346:
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T8f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T8f;
// LINE 347:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 348:
_T8f:
	__asm        mov    eax, 1;
	__asm        jmp    _Tbe;
// LINE 349:
	__asm        jmp    _Tb7;
_T9e:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     _T17;

	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     _T50;

	__asm        jmp    _Tb7;
// LINE 351:
_Tb7:
	__asm        xor    eax, eax;
	__asm        jmp    _Tbe;
// LINE 352:
_Tbe:
}

// FUNCTION: COPTER_D 0x0047fdf2
long CareerWindow::SetCurrentCitySelection(long lNewCitySelection) {
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewCitySelection;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _T28;

	__asm        cmp    lNewCitySelection, 0;
	__asm        jge    _T2f;
// LINE 360:
_T28:
	__asm        xor    eax, eax;
	__asm        jmp    _T130;
// LINE 362:
_T2f:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewCitySelection;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T126;
// LINE 363:
	__asm        mov    eax, lNewCitySelection;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 364:
	__asm        jmp    near ptr 0x0047FE3E;

	__asm        mov    dword ptr [ebp-0x18], 0x14C;
	__asm        mov    dword ptr [ebp-0x14], 0xEE;
	__asm        jmp    near ptr 0x0047FE51;

	__asm        jmp    near ptr 0x0047FE56;

	__asm        mov    dword ptr [ebp-0x10], 0x14C;
	__asm        mov    dword ptr [ebp-0xC], 0xEE;
	__asm        mov    dword ptr [ebp-8], 0x210;
	__asm        mov    dword ptr [ebp-4], 0x128;
	__asm        jmp    near ptr 0x0047FE77;

	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x83C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x83C];
	__asm        call   dword ptr [edx+0x2C];
// LINE 365:
	__asm        mov    eax, lNewCitySelection;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0xA8];
	__asm        add    eax, 0xF0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xC8];
// LINE 366:
	__asm        mov    eax, lNewCitySelection;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].lCityLevel[eax+eax*8];
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xC8];
// LINE 367:
	__asm        mov    ecx, this;
	__asm        call   CareerWindow::DrawCitySelection;
// LINE 368:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 370:
_T126:
	__asm        mov    eax, 1;
	__asm        jmp    _T130;
// LINE 371:
_T130:
}

// FUNCTION: COPTER_D 0x0047ff29
void CareerWindow::GetCoordinatesForCitySelections(class MPoint[4]* ptDestinations, class MRect[4]* rectSources) {
	class CareerWindow::CitySelectionFrame lowerLeft;
	class CareerWindow::CitySelectionFrame upperLeft;
	class CareerWindow::CitySelectionFrame upperRight;

// LINE 385:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        lea    ecx, upperLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 386:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    ecx, upperRight<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        sub    eax, 2;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        lea    ecx, lowerLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 389:
	__asm        mov    eax, ptDestinations;
	__asm        push   eax;
	__asm        lea    ecx, upperLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillDestinationPoints;
// LINE 390:
	__asm        mov    eax, ptDestinations;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        lea    ecx, upperRight<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillDestinationPoints;
// LINE 391:
	__asm        mov    eax, ptDestinations;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    ecx, lowerLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillDestinationPoints;
// LINE 393:
	__asm        mov    eax, rectSources;
	__asm        push   eax;
	__asm        lea    ecx, upperLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillSourceRects;
// LINE 394:
	__asm        mov    eax, rectSources;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    ecx, upperRight<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillSourceRects;
// LINE 395:
	__asm        mov    eax, rectSources;
	__asm        add    eax, 0x80;
	__asm        push   eax;
	__asm        lea    ecx, lowerLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::FillSourceRects;
// LINE 396:
	__asm        mov    lowerLeft<vftable>, 0x590EF4;
	__asm        jmp    near ptr 0x0048000B;

	__asm        mov    upperRight<vftable>, 0x590EF4;
	__asm        jmp    near ptr 0x00480017;

	__asm        mov    upperLeft<vftable>, 0x590EF4;
	__asm        jmp    near ptr 0x00480026;

	__asm        jmp    near ptr 0x0048002B;
}

// FUNCTION: COPTER_D 0x00480032
void CareerWindow::CitySelectionFrame::CitySelectionFrame(int32_t b_Left, int32_t b_Top, int32_t b_Selected) {

	__asm        mov    eax, b_Left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, b_Top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, b_Selected;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    dword ptr [ebp-0xC4], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    [ebp-0xC8], eax;
_T4f:
	__asm        dec    dword ptr [ebp-0xC4];
	__asm        js     _T72;

	__asm        mov    ecx, [ebp-0xC8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0xC8], 0x10;
	__asm        jmp    _T4f;
_T72:
	__asm        jmp    near ptr 0x004800A9;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590EF4;
// LINE 402:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1c8;
// LINE 404:
	__asm        jmp    near ptr 0x004800DA;

	__asm        mov    dword ptr [ebp-0x10], 0x36;
	__asm        mov    dword ptr [ebp-0xC], 0x33;
	__asm        mov    dword ptr [ebp-8], 0x4D;
	__asm        mov    dword ptr [ebp-4], 0xD8;
	__asm        jmp    near ptr 0x004800FB;

	__asm        lea    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 405:
	__asm        jmp    near ptr 0x00480122;

	__asm        mov    dword ptr [ebp-0x20], 0x4D;
	__asm        mov    dword ptr [ebp-0x1C], 0x33;
	__asm        mov    dword ptr [ebp-0x18], 0x114;
	__asm        mov    dword ptr [ebp-0x14], 0x45;
	__asm        jmp    near ptr 0x00480143;

	__asm        lea    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 406:
	__asm        jmp    near ptr 0x0048016A;

	__asm        mov    dword ptr [ebp-0x30], 0x114;
	__asm        mov    dword ptr [ebp-0x2C], 0x33;
	__asm        mov    dword ptr [ebp-0x28], 0x131;
	__asm        mov    dword ptr [ebp-0x24], 0xD8;
	__asm        jmp    near ptr 0x0048018B;

	__asm        lea    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 407:
	__asm        jmp    near ptr 0x004801B2;

	__asm        mov    dword ptr [ebp-0x40], 0x4D;
	__asm        mov    dword ptr [ebp-0x3C], 0xB4;
	__asm        mov    dword ptr [ebp-0x38], 0x114;
	__asm        mov    dword ptr [ebp-0x34], 0xD8;
	__asm        jmp    near ptr 0x004801D3;

	__asm        lea    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 409:
	__asm        jmp    _T459;
_T1c8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2fd;
// LINE 411:
	__asm        jmp    near ptr 0x0048020F;

	__asm        mov    dword ptr [ebp-0x50], 0x138;
	__asm        mov    dword ptr [ebp-0x4C], 0x33;
	__asm        mov    dword ptr [ebp-0x48], 0x153;
	__asm        mov    dword ptr [ebp-0x44], 0xD8;
	__asm        jmp    near ptr 0x00480230;

	__asm        lea    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 412:
	__asm        jmp    near ptr 0x00480257;

	__asm        mov    dword ptr [ebp-0x60], 0x153;
	__asm        mov    dword ptr [ebp-0x5C], 0x33;
	__asm        mov    dword ptr [ebp-0x58], 0x219;
	__asm        mov    dword ptr [ebp-0x54], 0x45;
	__asm        jmp    near ptr 0x00480278;

	__asm        lea    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 413:
	__asm        jmp    near ptr 0x0048029F;

	__asm        mov    dword ptr [ebp-0x70], 0x219;
	__asm        mov    dword ptr [ebp-0x6C], 0x33;
	__asm        mov    dword ptr [ebp-0x68], 0x22C;
	__asm        mov    dword ptr [ebp-0x64], 0xD8;
	__asm        jmp    near ptr 0x004802C0;

	__asm        lea    eax, [ebp-0x70];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 414:
	__asm        jmp    near ptr 0x004802E7;

	__asm        mov    dword ptr [ebp-0x80], 0x153;
	__asm        mov    dword ptr [ebp-0x7C], 0xB4;
	__asm        mov    dword ptr [ebp-0x78], 0x22C;
	__asm        mov    dword ptr [ebp-0x74], 0xD8;
	__asm        jmp    near ptr 0x00480308;

	__asm        lea    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 416:
	__asm        jmp    _T459;
// LINE 418:
_T2fd:
	__asm        jmp    near ptr 0x00480334;

	__asm        mov    dword ptr [ebp-0x90], 0x36;
	__asm        mov    dword ptr [ebp-0x8C], 0xD9;
	__asm        mov    dword ptr [ebp-0x88], 0x4D;
	__asm        mov    dword ptr [ebp-0x84], 0x17E;
	__asm        jmp    near ptr 0x00480361;

	__asm        lea    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 419:
	__asm        jmp    near ptr 0x0048038B;

	__asm        mov    dword ptr [ebp-0xA0], 0x4D;
	__asm        mov    dword ptr [ebp-0x9C], 0xD9;
	__asm        mov    dword ptr [ebp-0x98], 0x114;
	__asm        mov    dword ptr [ebp-0x94], 0xF8;
	__asm        jmp    near ptr 0x004803B8;

	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 420:
	__asm        jmp    near ptr 0x004803E2;

	__asm        mov    dword ptr [ebp-0xB0], 0x114;
	__asm        mov    dword ptr [ebp-0xAC], 0xD9;
	__asm        mov    dword ptr [ebp-0xA8], 0x131;
	__asm        mov    dword ptr [ebp-0xA4], 0x17E;
	__asm        jmp    near ptr 0x0048040F;

	__asm        lea    eax, [ebp-0xB0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 421:
	__asm        jmp    near ptr 0x00480439;

	__asm        mov    dword ptr [ebp-0xC0], 0x4D;
	__asm        mov    dword ptr [ebp-0xBC], 0x167;
	__asm        mov    dword ptr [ebp-0xB8], 0x114;
	__asm        mov    dword ptr [ebp-0xB4], 0x17E;
	__asm        jmp    near ptr 0x00480466;

	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 423:
_T459:
	__asm        jmp    near ptr 0x00480490;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048049d
void CareerWindow::CitySelectionFrame::FillDestinationPoints(class MPoint* ptDest) {
	int32_t nN;

// LINE 427:
	__asm        mov    nN, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    nN;
_T1b:
	__asm        cmp    nN, 4;
	__asm        jge    _T4e;
// LINE 429:
	__asm        jmp    near ptr 0x004804C7;

	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        add    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, nN;
	__asm        shl    edx, 3;
	__asm        add    edx, ptDest;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 430:
	__asm        jmp    _T18;
// LINE 431:
_T4e:
	__asm        jmp    near ptr 0x004804F0;
}

// FUNCTION: COPTER_D 0x004804f7
void CareerWindow::CitySelectionFrame::FillSourceRects(class MRect* rectSrc) {
	int32_t nN;

// LINE 435:
	__asm        mov    nN, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    nN;
_T1b:
	__asm        cmp    nN, 4;
	__asm        jge    _T109;
// LINE 437:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T62;
// LINE 439:
	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        add    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, nN;
	__asm        shl    ecx, 4;
	__asm        add    ecx, rectSrc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 441:
	__asm        jmp    _T104;
// LINE 447:
_T62:
	__asm        jmp    near ptr 0x0048055E;

	__asm        jmp    near ptr 0x00480563;

	__asm        jmp    near ptr 0x00480568;

	__asm        jmp    near ptr 0x0048056D;

	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        add    eax, 0x168;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x14];
	__asm        add    eax, 0x168;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, nN;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+ecx+0x10];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004805BC;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004805D9;

	__asm        lea    eax, [ebp-0x14];
	__asm        mov    ecx, nN;
	__asm        shl    ecx, 4;
	__asm        add    ecx, rectSrc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 449:
_T104:
	__asm        jmp    _T18;
// LINE 450:
_T109:
	__asm        jmp    near ptr 0x00480605;
}



// Contribution: 1:0007f610-0007f648 Module: 31, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00480610
// CareerWindow::`scalar deleting destructor'



// Contribution: 1:0007f650-0007f68e Module: 31, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00480650
// CareerWindow::CitySelectionFrame::`scalar deleting destructor'



// Contribution: 2:00001e30-00001ef3 Module: 31, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CareerWindow @ 0x00590e30
//   00: CareerWindow::DoMessage @ 0x0047fd2d
//   01: CareerWindow::Initialize @ 0x0047e19e
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: CareerWindow::CreateImage @ 0x0047f391
//   05: CareerWindow::DestroyImage @ 0x0047f75a
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: CareerWindow::DoKeyDown @ 0x0047fa75
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: CareerWindow::DoCursorDown @ 0x0047fb14
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: CareerWindow::DoCursorMove @ 0x0047fc47
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CareerWindow::`scalar deleting destructor' @ 0x00480610
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: CareerWindow::DrawSelf @ 0x0047f7cf
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00001ef4-00001ef7 Module: 31, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for CareerWindow @ 0x00590ef4
//   00: CareerWindow::CitySelectionFrame::`scalar deleting destructor' @ 0x00480650
//   1 entries



// Contribution: 3:00000064-0000006b Module: 31, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597064
static void (*$S65)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597068
static void (*$S68)() = { 0 /* todo */ };



// Contribution: 3:00002a84-00002ab3 Module: 31, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599a84
char * SZ_CAREER_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599a88
char * SZ_CAREER_WINDOW_SELECTION_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599a8c
char * SZ_CAREER_WINDOW_BUTTON_FILE_NAME = { 0 /* todo */ };



// Contribution: 3:0006d448-0006d44f Module: 31, 4 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604448
static struct SparkalColor colorTextGamePaletteNormal;

// GLOBAL: COPTER_D 0x0060444c
static struct SparkalColor colorTextGamePaletteHighlighted;

