// Module: Creerwin.obj
// Source: C:\Copter\source\sparkal\Creerwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ struct SparkalColor;
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: void ();

// Type: void;

// Type: /*packed*/ class CareerWindow (forward reference);
// VTABLE: COPTER_D 0x00590ef4
class CareerWindow : public GraphicWindow
{ // packed(0x840 bytes) TI: 0x47a5
public:
	void CareerWindow(/*packed*/ class MRect&, int32_t, void * __ptr32, long *, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t);
	virtual void ~CareerWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	long SetCurrentCitySelection(long);
	long GetCurrentCitySelection();
	class CareerWindow::CitySelectionFrame{ // packed(0x50 bytes) TI: 0x12ad
	public:
		void CitySelectionFrame(int32_t, int32_t, int32_t);
		virtual void ~CitySelectionFrame(); // vtable+0x0
		void FillDestinationPoints(/*packed*/ class MPoint*);
		void FillSourceRects(/*packed*/ class MRect*);
		/*+0x4*/   int32_t bLeft;
		/*+0x8*/   int32_t bTop;
		/*+0xc*/   int32_t bSelected;
		/*+0x10*/  /*packed*/ class MRect rectFrame[4]; // 0x40 bytes
	};
protected:
	void DrawCitySelection();
	void GetCoordinatesForCitySelections(/*packed*/ class MPoint[4]*, /*packed*/ class MRect[4]*);
	/*+0x74*/  long lCurrentCitySelection;
	/*+0x78*/  /*packed*/ class MRect rectCities[3]; // 0x30 bytes
	/*+0xa8*/  long lCities[3]; // 0xc bytes
	/*+0xb4*/  int32_t nCityCount;
	/*+0xb8*/  int32_t bAllowCancel;
	/*+0xbc*/  /*packed*/ class SmackerBackBuffer mySmackerBackBuffers[3]; // 0x774 bytes
	/*+0x830*/ void * __ptr32 myPlatformWindow;
	/*+0x834*/ /*unpacked*/ class TextWindow *cityNameTextWindow;
	/*+0x838*/ /*unpacked*/ class TextWindow *cityLevelTextWindow;
	/*+0x83c*/ /*unpacked*/ class CBackBuffer *mySelectionImage;
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: int32_t;

// Type: void * __ptr32;

// Type: long *;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: char;

// Type: long;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: unsigned long;

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: /*packed*/ class CareerWindow::CitySelectionFrame;
class CareerWindow::CitySelectionFrame{ // packed(0x50 bytes) TI: 0x12ad
public:
	void CitySelectionFrame(int32_t, int32_t, int32_t);
	virtual void ~CitySelectionFrame(); // vtable+0x0
	void FillDestinationPoints(/*packed*/ class MPoint*);
	void FillSourceRects(/*packed*/ class MRect*);
	/*+0x4*/   int32_t bLeft;
	/*+0x8*/   int32_t bTop;
	/*+0xc*/   int32_t bSelected;
	/*+0x10*/  /*packed*/ class MRect rectFrame[4]; // 0x40 bytes
};

// Type: /*packed*/ class CareerWindow::CitySelectionFrame (forward reference);
class CareerWindow::CitySelectionFrame{ // packed(0x50 bytes) TI: 0x12ad
public:
	void CitySelectionFrame(int32_t, int32_t, int32_t);
	virtual void ~CitySelectionFrame(); // vtable+0x0
	void FillDestinationPoints(/*packed*/ class MPoint*);
	void FillSourceRects(/*packed*/ class MRect*);
	/*+0x4*/   int32_t bLeft;
	/*+0x8*/   int32_t bTop;
	/*+0xc*/   int32_t bSelected;
	/*+0x10*/  /*packed*/ class MRect rectFrame[4]; // 0x40 bytes
};

// Type: uint32_t;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:0007ce80-0007f60b Module: 31, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047de80
static void $E64() {

	$E63();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047de95
static void $E63() {

	colorTextGamePaletteNormal.Blue = 0xa;
	colorTextGamePaletteNormal.Green = 0x85;
	colorTextGamePaletteNormal.Red = 0xda;
	__asm        jmp    _T20;
_T20:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047debf
static void $E67() {

	$E66();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0047ded4
static void $E66() {

	colorTextGamePaletteHighlighted.Blue = 0x6f;
	colorTextGamePaletteHighlighted.Green = 0xda;
	colorTextGamePaletteHighlighted.Red = 0xff;
	__asm        jmp    _T20;
_T20:
	return;
}

// FUNCTION: COPTER_D 0x0047defe
void CareerWindow::CareerWindow(/*packed*/ class MRect& rectNewPosition, int32_t nNewID, void * __ptr32 myNewPlatformWindow, long * lNewCities, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t bNewAllowCancel) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        mov    [ebp-8], eax;
	{
__WHILE_40:
		__asm        dec    dword ptr [ebp-4];
		__asm        js     _T5a;

		__asm        mov    ecx, [ebp-8];
		__asm        call   MRect::MRect;
		__asm        add    dword ptr [ebp-8], 0x10;
		__asm        jmp    __WHILE_40;
	}
_T5a:
	__asm        jmp    _T5f;
_T5f:
	__asm        mov    eax, bNewAllowCancel;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    dword ptr [ebp-0xC], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-0x10], eax;
	{
__WHILE_7d:
		__asm        dec    dword ptr [ebp-0xC];
		__asm        js     _T9a;

		__asm        mov    ecx, [ebp-0x10];
		__asm        call   SmackerBackBuffer::SmackerBackBuffer;
		__asm        add    dword ptr [ebp-0x10], 0x27C;
		__asm        jmp    __WHILE_7d;
	}
_T9a:
	__asm        jmp    _T9f;
_T9f:
	this->myPlatformWindow = myNewPlatformWindow;
	this->mySelectionImage = 0x0;
	this-><CareerWindow+0x00> = 0x590e30;
// LINE 64:
	this->rectCities[0].left = 0x4d;
	this->rectCities[0].top = 0x47;
	this->rectCities[0].right = 0x115;
	this->rectCities[0].bottom = 0xb3;
	__asm        jmp    _Tf4;
// LINE 65:
_Tf4:
	this->rectCities[1].left = 0x153;
	this->rectCities[1].top = 0x47;
	this->rectCities[1].right = 0x21b;
	this->rectCities[1].bottom = 0xb3;
	__asm        jmp    _T12d;
// LINE 66:
_T12d:
	this->rectCities[2].left = 0x4d;
	this->rectCities[2].top = 0xf9;
	this->rectCities[2].right = 0x115;
	this->rectCities[2].bottom = 0x165;
	__asm        jmp    _T166;
// LINE 68:
_T166:
	__asm        cmp    lNewCities, 0;
	__asm        je     _T1a1;
// LINE 69:
	this->lCities[0] = lNewCities[0];
// LINE 70:
	this->lCities[1] = lNewCities[4];
// LINE 71:
	this->lCities[2] = lNewCities[8];
// LINE 73:
	__asm        jmp    _T1cb;
// LINE 74:
_T1a1:
	this->lCities[0] = gCurrentCareerCityInfo.lCurrentCities[0];
// LINE 75:
	this->lCities[1] = gCurrentCareerCityInfo.lCurrentCities[1];
// LINE 76:
	this->lCities[2] = gCurrentCareerCityInfo.lCurrentCities[2];
// LINE 80:
_T1cb:
	this->nCityCount = 0x3;
// LINE 81:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0xFFFFFFFF;
	__asm        jne    _T1f5;
// LINE 82:
	this->nCityCount = 0x2;
// LINE 83:
_T1f5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jne    _T212;
// LINE 84:
	this->nCityCount = 0x1;
// LINE 86:
_T212:
	this->lCurrentCitySelection = 0xffffffff;
// LINE 87:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0047e129
void CareerWindow::~CareerWindow() {

	this-><CareerWindow+0x00> = 0x590e30;
// LINE 94:
	this->CareerWindow::DestroyImage();
// LINE 95:
	__asm        jmp    _T22;
_T22:
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 7;
	__asm        sub    eax, ecx;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ecx;
	__asm        add    [ebp-8], eax;
	{
__WHILE_46:
		__asm        dec    dword ptr [ebp-4];
		__asm        js     _T63;

		__asm        sub    dword ptr [ebp-8], 0x27C;
		__asm        mov    ecx, [ebp-8];
		__asm        call   SmackerBackBuffer::~SmackerBackBuffer;
		__asm        jmp    __WHILE_46;
	}
_T63:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x0047e19e
int32_t CareerWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x10*/  long lCityNameString;
	/*bp-0x114*/ char szFullCityVideoFilePath[260]; // 0x104 bytes
	/*bp-0x118*/ long lCityLevelString;
	/*bp-0x218*/ char szFullCityVideoFileName[256]; // 0x100 bytes

// LINE 103:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x298], eax;
	__asm        cmp    dword ptr [ebp-0x298], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x298];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T91;
// LINE 109:
_T91:
	this->GraphicWindow::Initialize();
// LINE 111:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T6fe;
// LINE 115:
// Block start:
	/*bp-0x21c*/ /*packed*/ class ButtonWindow *tempButtonWindow1;
	/*bp-0x220*/ /*packed*/ class ButtonWindow *tempButtonWindow2;
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x228], eax;
	__asm        cmp    dword ptr [ebp-0x228], 0;
	__asm        je     _T136;

	__asm        jmp    _Td4;
_Td4:
	__asm        mov    dword ptr [ebp-0x238], 0x147;
	__asm        mov    dword ptr [ebp-0x234], 0x152;
	__asm        mov    dword ptr [ebp-0x230], 0x148;
	__asm        mov    dword ptr [ebp-0x22C], 0x153;
	__asm        jmp    _T101;
_T101:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x238];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x228];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    _T140;
_T136:
	tempButtonWindow1 = 0x0;
// LINE 116:
_T140:
	nFullStringID = LanguageManager::GetFullStringID(0x51, 0x0);
// LINE 117:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12AC], eax;
	__asm        cmp    dword ptr [ebp-0x12AC], 0;
	__asm        jne    _T1fc;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12AC], eax;
	__asm        jmp    _T1ae;
_T1ae:
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1d2;
_T1d2:
	__asm        jmp    _T1d7;
_T1d7:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1f7;
_T1f7:
	__asm        jmp    _T390;
_T1fc:
	__asm        jmp    _T201;
_T201:
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C8], eax;
	__asm        cmp    dword ptr [ebp-0x12C8], 0xFFFFFFFF;
	__asm        jne    _T25b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x12BC], eax;
	__asm        mov    eax, [ebp-0x12BC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T24c;
_T24c:
	exit(0x1);
	__asm        jmp    _T25b;
_T25b:
	__asm        jmp    _T260;
_T260:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T291;

	__asm        cmp    dword ptr [ebp-0x12C8], 0;
	__asm        je     _T336;

	__asm        jmp    _T27f;
_T27f:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x12C8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T336;
_T291:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12B4], eax;
	__asm        cmp    dword ptr [ebp-0x12B4], 0;
	__asm        je     _T2d2;

	__asm        mov    eax, [ebp-0x12C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12B4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x12B0], eax;
	__asm        jmp    _T2dc;
_T2d2:
	__asm        mov    dword ptr [ebp-0x12B0], 0;
_T2dc:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T323;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x12C4], eax;
	__asm        mov    eax, [ebp-0x12C4];
	__asm        mov    [ebp-0x12C0], eax;
	__asm        cmp    dword ptr [ebp-0x12C0], 0;
	__asm        je     _T323;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x12C0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T323;
_T323:
	__asm        jmp    _T328;
_T328:
	__asm        mov    eax, [ebp-0x12B0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T375;
_T336:
	__asm        cmp    dword ptr [ebp-0x12C8], 0;
	__asm        je     _T375;

	__asm        jmp    _T348;
_T348:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x12B8], eax;
	__asm        mov    eax, [ebp-0x12C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12A8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x12B8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T375;
_T375:
	__asm        mov    eax, [ebp-0x12C8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T386;
_T386:
	__asm        jmp    _T38b;
_T38b:
	__asm        jmp    _T390;
// LINE 118:
_T390:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 119:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 120:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 124:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x23C], eax;
	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     _T45b;

	__asm        jmp    _T3f9;
_T3f9:
	__asm        mov    dword ptr [ebp-0x24C], 0x1AF;
	__asm        mov    dword ptr [ebp-0x248], 0x152;
	__asm        mov    dword ptr [ebp-0x244], 0x1B0;
	__asm        mov    dword ptr [ebp-0x240], 0x153;
	__asm        jmp    _T426;
_T426:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x23C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow2, eax;
	__asm        jmp    _T465;
_T45b:
	tempButtonWindow2 = 0x0;
// LINE 125:
_T465:
	nFullStringID = LanguageManager::GetFullStringID(0x52, 0x0);
// LINE 126:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22CC], eax;
	__asm        cmp    dword ptr [ebp-0x22CC], 0;
	__asm        jne    _T521;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22CC], eax;
	__asm        jmp    _T4d3;
_T4d3:
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T4f7;
_T4f7:
	__asm        jmp    _T4fc;
_T4fc:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T51c;
_T51c:
	__asm        jmp    _T6b5;
_T521:
	__asm        jmp    _T526;
_T526:
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x22E8], eax;
	__asm        cmp    dword ptr [ebp-0x22E8], 0xFFFFFFFF;
	__asm        jne    _T580;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x22DC], eax;
	__asm        mov    eax, [ebp-0x22DC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T571;
_T571:
	exit(0x1);
	__asm        jmp    _T580;
_T580:
	__asm        jmp    _T585;
_T585:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T5b6;

	__asm        cmp    dword ptr [ebp-0x22E8], 0;
	__asm        je     _T65b;

	__asm        jmp    _T5a4;
_T5a4:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x22E8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T65b;
_T5b6:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x22D4], eax;
	__asm        cmp    dword ptr [ebp-0x22D4], 0;
	__asm        je     _T5f7;

	__asm        mov    eax, [ebp-0x22E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x22D4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x22D0], eax;
	__asm        jmp    _T601;
_T5f7:
	__asm        mov    dword ptr [ebp-0x22D0], 0;
_T601:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T648;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x22E4], eax;
	__asm        mov    eax, [ebp-0x22E4];
	__asm        mov    [ebp-0x22E0], eax;
	__asm        cmp    dword ptr [ebp-0x22E0], 0;
	__asm        je     _T648;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x22E0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T648;
_T648:
	__asm        jmp    _T64d;
_T64d:
	__asm        mov    eax, [ebp-0x22D0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T69a;
_T65b:
	__asm        cmp    dword ptr [ebp-0x22E8], 0;
	__asm        je     _T69a;

	__asm        jmp    _T66d;
_T66d:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x22D8], eax;
	__asm        mov    eax, [ebp-0x22E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22D8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T69a;
_T69a:
	__asm        mov    eax, [ebp-0x22E8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6ab;
_T6ab:
	__asm        jmp    _T6b0;
_T6b0:
	__asm        jmp    _T6b5;
// LINE 127:
_T6b5:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0x48];
// LINE 128:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0xD8];
// LINE 129:
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+4];
// LINE 131:
// Block end:
	__asm        jmp    _T9df;
// LINE 134:
// Block start:
	/*bp-0x224*/ /*packed*/ class ButtonWindow *tempButtonWindow1;
_T6fe:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x250], eax;
	__asm        cmp    dword ptr [ebp-0x250], 0;
	__asm        je     _T785;

	__asm        jmp    _T723;
_T723:
	__asm        mov    dword ptr [ebp-0x260], 0x17C;
	__asm        mov    dword ptr [ebp-0x25C], 0x152;
	__asm        mov    dword ptr [ebp-0x258], 0x17D;
	__asm        mov    dword ptr [ebp-0x254], 0x153;
	__asm        jmp    _T750;
_T750:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CAREER_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x250];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    _T78f;
_T785:
	tempButtonWindow1 = 0x0;
// LINE 135:
_T78f:
	nFullStringID = LanguageManager::GetFullStringID(0x51, 0x0);
// LINE 136:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32EC], eax;
	__asm        cmp    dword ptr [ebp-0x32EC], 0;
	__asm        jne    _T84b;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32EC], eax;
	__asm        jmp    _T7fd;
_T7fd:
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T821;
_T821:
	__asm        jmp    _T826;
_T826:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T846;
_T846:
	__asm        jmp    _T99b;
_T84b:
	__asm        jmp    _T850;
_T850:
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3300], eax;
	__asm        cmp    dword ptr [ebp-0x3300], 0xFFFFFFFF;
	__asm        jne    _T8aa;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x32FC], eax;
	__asm        mov    eax, [ebp-0x32FC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T89b;
_T89b:
	exit(0x1);
	__asm        jmp    _T8aa;
_T8aa:
	__asm        jmp    _T8af;
_T8af:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T8e0;

	__asm        cmp    dword ptr [ebp-0x3300], 0;
	__asm        je     _T941;

	__asm        jmp    _T8ce;
_T8ce:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x3300];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T941;
_T8e0:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x32F4], eax;
	__asm        cmp    dword ptr [ebp-0x32F4], 0;
	__asm        je     _T921;

	__asm        mov    eax, [ebp-0x3300];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x32F4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x32F0], eax;
	__asm        jmp    _T92b;
_T921:
	__asm        mov    dword ptr [ebp-0x32F0], 0;
_T92b:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x32F0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T980;
_T941:
	__asm        cmp    dword ptr [ebp-0x3300], 0;
	__asm        je     _T980;

	__asm        jmp    _T953;
_T953:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x32F8], eax;
	__asm        mov    eax, [ebp-0x3300];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32E8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x32F8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T980;
_T980:
	__asm        mov    eax, [ebp-0x3300];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T991;
_T991:
	__asm        jmp    _T996;
_T996:
	__asm        jmp    _T99b;
// LINE 137:
_T99b:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 138:
	__asm        push   0x60444C;
	__asm        push   0x604448;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 139:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 143:
// Block end:
_T9df:
	lCityNameString = (this->lCities[0] + 0xf0);
// LINE 144:
	nFullStringID = LanguageManager::GetFullStringID(lCityNameString, 0x0);
// LINE 145:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4304], eax;
	__asm        cmp    dword ptr [ebp-0x4304], 0;
	__asm        jne    _Tab1;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4304], eax;
	__asm        jmp    _Ta63;
_Ta63:
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Ta87;
_Ta87:
	__asm        jmp    _Ta8c;
_Ta8c:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Taac;
_Taac:
	__asm        jmp    _Tc01;
_Tab1:
	__asm        jmp    _Tab6;
_Tab6:
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4318], eax;
	__asm        cmp    dword ptr [ebp-0x4318], 0xFFFFFFFF;
	__asm        jne    _Tb10;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4314], eax;
	__asm        mov    eax, [ebp-0x4314];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb01;
_Tb01:
	exit(0x1);
	__asm        jmp    _Tb10;
_Tb10:
	__asm        jmp    _Tb15;
_Tb15:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tb46;

	__asm        cmp    dword ptr [ebp-0x4318], 0;
	__asm        je     _Tba7;

	__asm        jmp    _Tb34;
_Tb34:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x4318];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tba7;
_Tb46:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x430C], eax;
	__asm        cmp    dword ptr [ebp-0x430C], 0;
	__asm        je     _Tb87;

	__asm        mov    eax, [ebp-0x4318];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x430C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x4308], eax;
	__asm        jmp    _Tb91;
_Tb87:
	__asm        mov    dword ptr [ebp-0x4308], 0;
_Tb91:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x4308];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Tbe6;
_Tba7:
	__asm        cmp    dword ptr [ebp-0x4318], 0;
	__asm        je     _Tbe6;

	__asm        jmp    _Tbb9;
_Tbb9:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4310], eax;
	__asm        mov    eax, [ebp-0x4318];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4300];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4310];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tbe6;
_Tbe6:
	__asm        mov    eax, [ebp-0x4318];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tbf7;
_Tbf7:
	__asm        jmp    _Tbfc;
_Tbfc:
	__asm        jmp    _Tc01;
// LINE 148:
_Tc01:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     _Tc87;

	__asm        jmp    _Tc26;
_Tc26:
	__asm        mov    dword ptr [ebp-0x274], 0x14E;
	__asm        mov    dword ptr [ebp-0x270], 0xEC;
	__asm        mov    dword ptr [ebp-0x26C], 0x216;
	__asm        mov    dword ptr [ebp-0x268], 0xFE;
	__asm        jmp    _Tc53;
_Tc53:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x274];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x264];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x834], eax;
	__asm        jmp    _Tc97;
_Tc87:
	this->cityNameTextWindow = 0x0;
// LINE 149:
_Tc97:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+4];
// LINE 150:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xCC];
// LINE 151:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xD0];
// LINE 152:
	__asm        mov    byte ptr [ebp-0x278], 0xB5;
	__asm        mov    byte ptr [ebp-0x277], 0xF0;
	__asm        mov    byte ptr [ebp-0x276], 0;
	__asm        jmp    _Td16;
_Td16:
	__asm        lea    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xD4];
// LINE 154:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].lCityLevel[eax+eax*8];
	__asm        add    eax, 0x122;
	__asm        mov    lCityLevelString, eax;
// LINE 155:
	nFullStringID = LanguageManager::GetFullStringID(lCityLevelString, 0x0);
// LINE 156:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x531C], eax;
	__asm        cmp    dword ptr [ebp-0x531C], 0;
	__asm        jne    _Te1f;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x531C], eax;
	__asm        jmp    _Tdd1;
_Tdd1:
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Tdf5;
_Tdf5:
	__asm        jmp    _Tdfa;
_Tdfa:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Te1a;
_Te1a:
	__asm        jmp    _Te4d;
_Te1f:
	__asm        jmp    _Te24;
_Te24:
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5318];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Te48;
_Te48:
	__asm        jmp    _Te4d;
// LINE 159:
_Te4d:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x27C], eax;
	__asm        cmp    dword ptr [ebp-0x27C], 0;
	__asm        je     _Ted3;

	__asm        jmp    _Te72;
_Te72:
	__asm        mov    dword ptr [ebp-0x28C], 0x14E;
	__asm        mov    dword ptr [ebp-0x288], 0x10F;
	__asm        mov    dword ptr [ebp-0x284], 0x216;
	__asm        mov    dword ptr [ebp-0x280], 0x121;
	__asm        jmp    _Te9f;
_Te9f:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x27C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x838], eax;
	__asm        jmp    _Tee3;
_Ted3:
	this->cityLevelTextWindow = 0x0;
// LINE 160:
_Tee3:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+4];
// LINE 161:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xCC];
// LINE 162:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xD0];
// LINE 163:
	__asm        mov    byte ptr [ebp-0x290], 0xB5;
	__asm        mov    byte ptr [ebp-0x28F], 0xF0;
	__asm        mov    byte ptr [ebp-0x28E], 0;
	__asm        jmp    _Tf62;
_Tf62:
	__asm        lea    eax, [ebp-0x290];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xD4];
// LINE 167:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 169:
	GetPathForFile(0x1, 0x0, szFullCityVideoFileName[0], szFullCityVideoFilePath[0]);
// LINE 170:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        add    ecx, 0xBC;
	__asm        call   dword ptr [eax+0x10];
// LINE 171:
	this->mySmackerBackBuffers[0].bLoopVideo = 0x1;
// LINE 174:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 176:
	GetPathForFile(0x1, 0x0, szFullCityVideoFileName[0], szFullCityVideoFilePath[0]);
// LINE 177:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x338];
	__asm        add    ecx, 0x338;
	__asm        call   dword ptr [eax+0x10];
// LINE 178:
	this->mySmackerBackBuffers[1].bLoopVideo = 0x1;
// LINE 181:
	__asm        lea    eax, szFullCityVideoFileName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].chCityFileNameBase[eax+eax*8];
	__asm        push   eax;
	__asm        push   2;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 183:
	GetPathForFile(0x1, 0x0, szFullCityVideoFileName[0], szFullCityVideoFilePath[0]);
// LINE 184:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szFullCityVideoFilePath[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5B4];
	__asm        add    ecx, 0x5B4;
	__asm        call   dword ptr [eax+0x10];
// LINE 185:
	this->mySmackerBackBuffers[2].bLoopVideo = 0x1;
// LINE 187:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 189:
	this->CareerWindow::SetCurrentCitySelection(this->lCities[0]);
// LINE 191:
GraphicWindow::MakeModal(this);
// LINE 192:
GraphicWindow::MakeFocus(this);
// LINE 194:
	__asm        mov    dword ptr [ebp-0x294], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T11ab;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        cmp    dword ptr [ebp-0x2A4], 0;
	__asm        je     _T11ab;

	__asm        mov    ecx, [ebp-0x2A4];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1192;
_T1192:
	__asm        mov    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T11a6;
_T11a6:
	__asm        jmp    _T11ab;
_T11ab:
	__asm        jmp    _T11b0;
_T11b0:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T11de;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T11de:
	__asm        jmp    _T11e3;
_T11e3:
	__asm        mov    eax, [ebp-0x294];
	__asm        jmp    __RETURN;
// LINE 195:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047f391
int32_t CareerWindow::CreateImage(int32_t __formal) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sImageFile; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sImagePath; // 0x8 bytes

// LINE 202:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    sImageFile.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sImageFile.reference = 0x0;
_T63:
	sImageFile.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 203:
_T6f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tbf;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb4;
_Tb4:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _Tc6;
_Tbf:
	sImagePath.reference = 0x0;
_Tc6:
	sImagePath.c_str_ptr = 0x0;
	__asm        jmp    _Td2;
// LINE 205:
_Td2:
	this->GraphicWindow::CreateImage(0x1);
// LINE 206:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x83C], 0;
	__asm        jne    _T255;

	__asm        mov    eax, SZ_CAREER_WINDOW_SELECTION_FILE_NAME;
	__asm        mov    [ebp-0x1C], eax;
// LINE 207:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        lea    ecx, sImageFile.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T117;
// LINE 208:
_T117:
	0x604c00->FileServices::GetPathForFileString(0x6, 0x0, sImageFile.c_str_ptr, sImagePath.c_str_ptr);
	__asm        jmp    _T132;
// LINE 209:
_T132:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T248;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T16e;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T16e:
	__asm        jmp    _T173;
_T173:
	sImagePath.c_str_ptr = operator new((sImagePath.reference-><basic_string_ref<char>+0x04:4> + 1));
	__asm        jmp    _T18b;
_T18b:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1f5;

	__asm        jmp    _T19d;
_T19d:
	__asm        jmp    _T1a2;
_T1a2:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c1;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T1cd;

	__asm        jmp    _T1cd;
_T1c1:
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        jmp    _T1cd;
_T1cd:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1f5;
_T1f5:
	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    byte ptr [ebp-0x5C], 0;
	__asm        jmp    _T203;
_T203:
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T20e;
_T20e:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], al;
	__asm        jmp    _T229;
_T229:
	__asm        jmp    _T22e;
_T22e:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x83C], eax;
	__asm        jmp    _T255;
_T248:
	this->mySelectionImage = 0x0;
// LINE 211:
_T255:
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2df;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2df;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2bf;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T2bf:
	__asm        jmp    _T2c4;
_T2c4:
	__asm        jmp    _T2c9;
_T2c9:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2da;
_T2da:
	__asm        jmp    _T2df;
_T2df:
	__asm        jmp    _T2e4;
_T2e4:
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T306;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T306:
	__asm        jmp    _T30b;
_T30b:
	__asm        mov    eax, sImageFile.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImageFile.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T38e;

	__asm        mov    eax, sImageFile.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T38e;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T36e;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T36e:
	__asm        jmp    _T373;
_T373:
	__asm        jmp    _T378;
_T378:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T389;
_T389:
	__asm        jmp    _T38e;
_T38e:
	__asm        jmp    _T393;
_T393:
	__asm        cmp    sImageFile.c_str_ptr, 0;
	__asm        je     _T3b5;

	__asm        mov    eax, sImageFile.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3b5:
	__asm        jmp    _T3ba;
_T3ba:
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    __RETURN;
// LINE 212:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047f75a
void CareerWindow::DestroyImage() {
// LINE 220:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x83C], 0;
	__asm        jne    _T63;
// LINE 221:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x83C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 222:
_T56:
	this->mySelectionImage = 0x0;
// LINE 224:
_T63:
	this->GraphicWindow::DestroyImage();
// LINE 225:
	return;
}

// FUNCTION: COPTER_D 0x0047f7cf
int32_t CareerWindow::DrawSelf() {
	/*bp-0x4*/   unsigned long nErrorCode;
	/*bp-0x8*/   int32_t i;

// LINE 241:
_FOR_18:
	for (i = 0x0; (this->nCityCount > i); i++) {
// LINE 245:
		__asm        jmp    _T32;
_T32:
		__asm        jmp    _T37;
_T37:
		__asm        mov    eax, i;
		__asm        mov    ecx, eax;
		__asm        shl    eax, 7;
		__asm        sub    eax, ecx;
		__asm        lea    eax, [eax+eax*4];
		__asm        add    eax, ecx;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x208];
		__asm        push   eax;
		__asm        mov    eax, i;
		__asm        mov    ecx, eax;
		__asm        shl    eax, 7;
		__asm        sub    eax, ecx;
		__asm        lea    eax, [eax+eax*4];
		__asm        add    eax, ecx;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x204];
		__asm        push   eax;
		__asm        push   0;
		__asm        push   0;
		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x7C];
		__asm        push   eax;
		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x78];
		__asm        push   eax;
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+0x40];
		__asm        push   eax;
		__asm        mov    eax, i;
		__asm        mov    ecx, eax;
		__asm        shl    eax, 7;
		__asm        sub    eax, ecx;
		__asm        lea    eax, [eax+eax*4];
		__asm        add    eax, ecx;
		__asm        mov    ecx, this;
		__asm        mov    edx, i;
		__asm        mov    ebx, edx;
		__asm        shl    edx, 7;
		__asm        sub    edx, ebx;
		__asm        lea    edx, [edx+edx*4];
		__asm        add    edx, ebx;
		__asm        mov    ebx, this;
		__asm        mov    edx, [edx+ebx+0x1FC];
		__asm        lea    ecx, [eax+ecx+0x1FC];
		__asm        call   dword ptr [edx+0xC];
		__asm        mov    nErrorCode, eax;
	}
// LINE 247:
_Tcf:
	return nErrorCode;
// LINE 248:
}

// FUNCTION: COPTER_D 0x0047f8ab
void CareerWindow::DrawCitySelection() {
	/*bp-0xc0*/  /*packed*/ class MRect rectSources[3][4]; // 0xc0 bytes
	/*bp-0xc4*/  int32_t i;
	/*bp-0xc8*/  int32_t j;
	/*bp-0x128*/ /*packed*/ class MPoint ptDestinations[3][4]; // 0x60 bytes


	__asm        mov    dword ptr [ebp-0x12C], 0xC;
	__asm        lea    eax, ptDestinations[0][0].x;
	__asm        mov    [ebp-0x130], eax;
	{
// LINE 257:
__WHILE_28:
		__asm        dec    dword ptr [ebp-0x12C];
		__asm        js     _T4b;

		__asm        mov    ecx, [ebp-0x130];
		__asm        call   MPoint::MPoint;
		__asm        add    dword ptr [ebp-0x130], 8;
		__asm        jmp    __WHILE_28;
	}
_T4b:
	__asm        jmp    _T50;
_T50:
	__asm        mov    dword ptr [ebp-0x134], 0xC;
	__asm        lea    eax, rectSources[0][0].left;
	__asm        mov    [ebp-0x138], eax;
	{
// LINE 258:
__WHILE_66:
		__asm        dec    dword ptr [ebp-0x134];
		__asm        js     _T89;

		__asm        mov    ecx, [ebp-0x138];
		__asm        call   MRect::MRect;
		__asm        add    dword ptr [ebp-0x138], 0x10;
		__asm        jmp    __WHILE_66;
	}
_T89:
	__asm        jmp    _T8e;
// LINE 261:
_T8e:
	this->CareerWindow::GetCoordinatesForCitySelections(ptDestinations[0][0].x, rectSources[0][0].left);
// LINE 262:
_FOR_b6:
	for (i = 0x0; (i < 0x3); i++) {
// LINE 263:
_FOR_d8:
		for (j = 0x0; (j < 0x4); j++) {
// LINE 270:
			__asm        mov    eax, i;
			__asm        shl    eax, 6;
			__asm        mov    ecx, j;
			__asm        shl    ecx, 4;
			__asm        add    eax, ecx;
			__asm        mov    eax, [ebp+eax-0xB4];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 6;
			__asm        mov    ecx, j;
			__asm        shl    ecx, 4;
			__asm        add    eax, ecx;
			__asm        mov    eax, [ebp+eax-0xB8];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 6;
			__asm        mov    ecx, j;
			__asm        shl    ecx, 4;
			__asm        add    eax, ecx;
			__asm        mov    eax, [ebp+eax-0xBC];
			__asm        push   eax;
			__asm        mov    eax, i;
			__asm        shl    eax, 6;
			__asm        mov    ecx, j;
			__asm        shl    ecx, 4;
			__asm        add    eax, ecx;
			__asm        mov    eax, [ebp+eax-0xC0];
			__asm        push   eax;
			__asm        mov    eax, j;
			__asm        mov    ecx, i;
			__asm        shl    ecx, 5;
			__asm        lea    eax, [ecx+eax*8];
			__asm        mov    eax, [ebp+eax-0x124];
			__asm        push   eax;
			__asm        mov    eax, j;
			__asm        mov    ecx, i;
			__asm        shl    ecx, 5;
			__asm        lea    eax, [ecx+eax*8];
			__asm        mov    eax, [ebp+eax-0x128];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x40];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0x83C];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0x83C];
			__asm        call   dword ptr [edx+0xC];
		}
// LINE 272:
_T1bb:
	}
// LINE 273:
_T1c0:
	return;
}

// FUNCTION: COPTER_D 0x0047fa75
long CareerWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 280:
	__asm        cmp    lKey, 0x1B;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T55;
// LINE 281:
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T55;
// LINE 282:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 284:
_T55:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T8e;
// LINE 285:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T8e;
// LINE 286:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 288:
_T8e:
	return 0x1;
// LINE 289:
}

// FUNCTION: COPTER_D 0x0047fb14
long CareerWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   int32_t i;

// LINE 299:
_FOR_18:
	for (i = 0x0; (this->nCityCount > i); i++) {
// LINE 300:
		__asm        jmp    _T32;
_T32:
		__asm        mov    eax, nCursorX;
		__asm        mov    [ebp-0xC], eax;
		__asm        mov    eax, nCursorY;
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T43;
_T43:
		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-0xC];
		__asm        cmp    [eax+ecx+0x78], edx;
		__asm        jg     _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-8];
		__asm        cmp    [eax+ecx+0x7C], edx;
		__asm        jg     _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-0xC];
		__asm        cmp    [eax+ecx+0x80], edx;
		__asm        jle    _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-8];
		__asm        cmp    [eax+ecx+0x84], edx;
		__asm        jle    _Ta6;

		__asm        jmp    _Tab;
_Ta6:
		__asm        jmp    _T11d;
_Tab:
		__asm        jmp    _Tba;

		__asm        cmp    dword ptr [ebp-0x10], 0;
		__asm        je     _T11d;
// LINE 301:
_Tba:
		__asm        mov    eax, this;
		__asm        mov    ecx, i;
		__asm        cmp    [eax+0x74], ecx;
		__asm        jne    _T107;
// LINE 303:
		__asm        mov    eax, this;
		__asm        cmp    dword ptr [eax+0x38], 0;
		__asm        je     _Tf8;
// LINE 304:
		__asm        push   0;
		__asm        push   0x3E9;
		__asm        mov    eax, this;
		__asm        mov    eax, [eax+4];
		__asm        push   eax;
		__asm        mov    eax, this;
		__asm        push   eax;
		__asm        mov    eax, this;
		__asm        mov    ecx, this;
		__asm        mov    ecx, [ecx+0x38];
		__asm        mov    edx, [ecx];
		__asm        mov    ecx, [eax+0x38];
		__asm        call   dword ptr [edx];
// LINE 305:
_Tf8:
		return 0x1;
// LINE 307:
		__asm        jmp    _T11d;
// LINE 308:
_T107:
		this->CareerWindow::SetCurrentCitySelection(i);
// LINE 309:
		return 0x1;
// LINE 312:
_T11d:
	}
// LINE 313:
_T122:
	return 0x1;
// LINE 314:
}

// FUNCTION: COPTER_D 0x0047fc47
long CareerWindow::DoCursorMove(long nCursorX, long nCursorY) {
	/*bp-0x4*/   int32_t i;

// LINE 324:
_FOR_18:
	for (i = 0x0; (this->nCityCount > i); i++) {
// LINE 325:
		__asm        jmp    _T32;
_T32:
		__asm        mov    eax, nCursorX;
		__asm        mov    [ebp-0xC], eax;
		__asm        mov    eax, nCursorY;
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _T43;
_T43:
		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-0xC];
		__asm        cmp    [eax+ecx+0x78], edx;
		__asm        jg     _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-8];
		__asm        cmp    [eax+ecx+0x7C], edx;
		__asm        jg     _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-0xC];
		__asm        cmp    [eax+ecx+0x80], edx;
		__asm        jle    _Ta6;

		__asm        mov    eax, i;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    edx, [ebp-8];
		__asm        cmp    [eax+ecx+0x84], edx;
		__asm        jle    _Ta6;

		__asm        jmp    _Tab;
_Ta6:
		__asm        jmp    _Td0;
_Tab:
		__asm        jmp    _Tba;

		__asm        cmp    dword ptr [ebp-0x10], 0;
		__asm        je     _Td0;
// LINE 326:
_Tba:
		this->CareerWindow::SetCurrentCitySelection(i);
// LINE 327:
		return 0x1;
// LINE 329:
_Td0:
	}
// LINE 330:
_Td5:
	return 0x1;
// LINE 331:
}

// FUNCTION: COPTER_D 0x0047fd2d
int32_t CareerWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 339:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T9e;
// LINE 341:
_T17:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T46;
// LINE 342:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 343:
_T46:
	return 0x1;
// LINE 346:
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T8f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T8f;
// LINE 347:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 348:
_T8f:
	return 0x1;
// LINE 349:
	__asm        jmp    _Tb7;
_T9e:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     _T17;

	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     _T50;

	__asm        jmp    _Tb7;
// LINE 351:
_Tb7:
	return 0x0;
// LINE 352:
}

// FUNCTION: COPTER_D 0x0047fdf2
long CareerWindow::SetCurrentCitySelection(long lNewCitySelection) {
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewCitySelection;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _T28;

	__asm        cmp    lNewCitySelection, 0;
	__asm        jge    _T2f;
// LINE 360:
_T28:
	return 0x0;
// LINE 362:
_T2f:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewCitySelection;
	__asm        cmp    [eax+0x74], ecx;
	__asm        je     _T126;
// LINE 363:
	this->lCurrentCitySelection = lNewCitySelection;
// LINE 364:
	__asm        jmp    _T4c;
_T4c:
	__asm        mov    dword ptr [ebp-0x18], 0x14C;
	__asm        mov    dword ptr [ebp-0x14], 0xEE;
	__asm        jmp    _T5f;
_T5f:
	__asm        jmp    _T64;
_T64:
	__asm        mov    dword ptr [ebp-0x10], 0x14C;
	__asm        mov    dword ptr [ebp-0xC], 0xEE;
	__asm        mov    dword ptr [ebp-8], 0x210;
	__asm        mov    dword ptr [ebp-4], 0x128;
	__asm        jmp    _T85;
_T85:
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x83C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x83C];
	__asm        call   dword ptr [edx+0x2C];
// LINE 365:
	__asm        mov    eax, lNewCitySelection;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0xA8];
	__asm        add    eax, 0xF0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x834];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x834];
	__asm        call   dword ptr [edx+0xC8];
// LINE 366:
	__asm        mov    eax, lNewCitySelection;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4+0xA8];
	__asm        shl    eax, 3;
	__asm        mov    eax, gAllCareerCities[0].lCityLevel[eax+eax*8];
	__asm        add    eax, 0x122;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x838];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x838];
	__asm        call   dword ptr [edx+0xC8];
// LINE 367:
	this->CareerWindow::DrawCitySelection();
// LINE 368:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 370:
_T126:
	return 0x1;
// LINE 371:
}

// FUNCTION: COPTER_D 0x0047ff29
void CareerWindow::GetCoordinatesForCitySelections(/*packed*/ class MPoint *ptDestinations[4], /*packed*/ class MRect *rectSources[4]) {
	/*bp-0x50*/  /*packed*/ class CareerWindow::CitySelectionFrame upperRight; // 0x50 bytes
	/*bp-0xa0*/  /*packed*/ class CareerWindow::CitySelectionFrame upperLeft; // 0x50 bytes
	/*bp-0xf0*/  /*packed*/ class CareerWindow::CitySelectionFrame lowerLeft; // 0x50 bytes

// LINE 385:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        lea    ecx, upperLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 386:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    eax;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    ecx, upperRight<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        sub    eax, 2;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        lea    ecx, lowerLeft<vftable>;
	__asm        call   CareerWindow::CitySelectionFrame::CitySelectionFrame;
// LINE 389:
	upperLeft<vftable>->CareerWindow::CitySelectionFrame::FillDestinationPoints(ptDestinations);
// LINE 390:
	upperRight<vftable>->CareerWindow::CitySelectionFrame::FillDestinationPoints((ptDestinations + 0x20));
// LINE 391:
	lowerLeft<vftable>->CareerWindow::CitySelectionFrame::FillDestinationPoints((ptDestinations + 0x40));
// LINE 393:
	upperLeft<vftable>->CareerWindow::CitySelectionFrame::FillSourceRects(rectSources);
// LINE 394:
	upperRight<vftable>->CareerWindow::CitySelectionFrame::FillSourceRects((rectSources + 0x40));
// LINE 395:
	lowerLeft<vftable>->CareerWindow::CitySelectionFrame::FillSourceRects((rectSources + 0x80));
// LINE 396:
	lowerLeft<vftable> = 0x590ef4;
	__asm        jmp    _Te2;
_Te2:
	upperRight<vftable> = 0x590ef4;
	__asm        jmp    _Tee;
_Tee:
	upperLeft<vftable> = 0x590ef4;
	__asm        jmp    _Tfd;
_Tfd:
	return;
}

// FUNCTION: COPTER_D 0x00480032
void CareerWindow::CitySelectionFrame::CitySelectionFrame(int32_t b_Left, int32_t b_Top, int32_t b_Selected) {

	__asm        mov    eax, b_Left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, b_Top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, b_Selected;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    dword ptr [ebp-0xC4], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        mov    [ebp-0xC8], eax;
	{
__WHILE_4f:
		__asm        dec    dword ptr [ebp-0xC4];
		__asm        js     _T72;

		__asm        mov    ecx, [ebp-0xC8];
		__asm        call   MRect::MRect;
		__asm        add    dword ptr [ebp-0xC8], 0x10;
		__asm        jmp    __WHILE_4f;
	}
_T72:
	__asm        jmp    _T77;
_T77:
	this-><vftable> = 0x590ef4;
// LINE 402:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1c8;
// LINE 404:
	__asm        jmp    _Ta8;
_Ta8:
	__asm        mov    dword ptr [ebp-0x10], 0x36;
	__asm        mov    dword ptr [ebp-0xC], 0x33;
	__asm        mov    dword ptr [ebp-8], 0x4D;
	__asm        mov    dword ptr [ebp-4], 0xD8;
	__asm        jmp    _Tc9;
_Tc9:
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 405:
	__asm        jmp    _Tf0;
_Tf0:
	__asm        mov    dword ptr [ebp-0x20], 0x4D;
	__asm        mov    dword ptr [ebp-0x1C], 0x33;
	__asm        mov    dword ptr [ebp-0x18], 0x114;
	__asm        mov    dword ptr [ebp-0x14], 0x45;
	__asm        jmp    _T111;
_T111:
	__asm        lea    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 406:
	__asm        jmp    _T138;
_T138:
	__asm        mov    dword ptr [ebp-0x30], 0x114;
	__asm        mov    dword ptr [ebp-0x2C], 0x33;
	__asm        mov    dword ptr [ebp-0x28], 0x131;
	__asm        mov    dword ptr [ebp-0x24], 0xD8;
	__asm        jmp    _T159;
_T159:
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 407:
	__asm        jmp    _T180;
_T180:
	__asm        mov    dword ptr [ebp-0x40], 0x4D;
	__asm        mov    dword ptr [ebp-0x3C], 0xB4;
	__asm        mov    dword ptr [ebp-0x38], 0x114;
	__asm        mov    dword ptr [ebp-0x34], 0xD8;
	__asm        jmp    _T1a1;
_T1a1:
	__asm        lea    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 409:
	__asm        jmp    _T459;
_T1c8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2fd;
// LINE 411:
	__asm        jmp    _T1dd;
_T1dd:
	__asm        mov    dword ptr [ebp-0x50], 0x138;
	__asm        mov    dword ptr [ebp-0x4C], 0x33;
	__asm        mov    dword ptr [ebp-0x48], 0x153;
	__asm        mov    dword ptr [ebp-0x44], 0xD8;
	__asm        jmp    _T1fe;
_T1fe:
	__asm        lea    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 412:
	__asm        jmp    _T225;
_T225:
	__asm        mov    dword ptr [ebp-0x60], 0x153;
	__asm        mov    dword ptr [ebp-0x5C], 0x33;
	__asm        mov    dword ptr [ebp-0x58], 0x219;
	__asm        mov    dword ptr [ebp-0x54], 0x45;
	__asm        jmp    _T246;
_T246:
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 413:
	__asm        jmp    _T26d;
_T26d:
	__asm        mov    dword ptr [ebp-0x70], 0x219;
	__asm        mov    dword ptr [ebp-0x6C], 0x33;
	__asm        mov    dword ptr [ebp-0x68], 0x22C;
	__asm        mov    dword ptr [ebp-0x64], 0xD8;
	__asm        jmp    _T28e;
_T28e:
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 414:
	__asm        jmp    _T2b5;
_T2b5:
	__asm        mov    dword ptr [ebp-0x80], 0x153;
	__asm        mov    dword ptr [ebp-0x7C], 0xB4;
	__asm        mov    dword ptr [ebp-0x78], 0x22C;
	__asm        mov    dword ptr [ebp-0x74], 0xD8;
	__asm        jmp    _T2d6;
_T2d6:
	__asm        lea    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 416:
	__asm        jmp    _T459;
// LINE 418:
_T2fd:
	__asm        jmp    _T302;
_T302:
	__asm        mov    dword ptr [ebp-0x90], 0x36;
	__asm        mov    dword ptr [ebp-0x8C], 0xD9;
	__asm        mov    dword ptr [ebp-0x88], 0x4D;
	__asm        mov    dword ptr [ebp-0x84], 0x17E;
	__asm        jmp    _T32f;
_T32f:
	__asm        lea    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 419:
	__asm        jmp    _T359;
_T359:
	__asm        mov    dword ptr [ebp-0xA0], 0x4D;
	__asm        mov    dword ptr [ebp-0x9C], 0xD9;
	__asm        mov    dword ptr [ebp-0x98], 0x114;
	__asm        mov    dword ptr [ebp-0x94], 0xF8;
	__asm        jmp    _T386;
_T386:
	__asm        lea    eax, [ebp-0xA0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 420:
	__asm        jmp    _T3b0;
_T3b0:
	__asm        mov    dword ptr [ebp-0xB0], 0x114;
	__asm        mov    dword ptr [ebp-0xAC], 0xD9;
	__asm        mov    dword ptr [ebp-0xA8], 0x131;
	__asm        mov    dword ptr [ebp-0xA4], 0x17E;
	__asm        jmp    _T3dd;
_T3dd:
	__asm        lea    eax, [ebp-0xB0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x30;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 421:
	__asm        jmp    _T407;
_T407:
	__asm        mov    dword ptr [ebp-0xC0], 0x4D;
	__asm        mov    dword ptr [ebp-0xBC], 0x167;
	__asm        mov    dword ptr [ebp-0xB8], 0x114;
	__asm        mov    dword ptr [ebp-0xB4], 0x17E;
	__asm        jmp    _T434;
_T434:
	__asm        lea    eax, [ebp-0xC0];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 423:
_T459:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048049d
void CareerWindow::CitySelectionFrame::FillDestinationPoints(/*packed*/ class MPoint *ptDest) {
	/*bp-0x4*/   int32_t nN;

// LINE 427:
_FOR_18:
	for (nN = 0x0; (nN < 0x4); nN++) {
// LINE 429:
		__asm        jmp    _T2a;
_T2a:
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        add    eax, this;
		__asm        add    eax, 0x10;
		__asm        mov    ecx, [eax];
		__asm        mov    eax, [eax+4];
		__asm        mov    edx, nN;
		__asm        shl    edx, 3;
		__asm        add    edx, ptDest;
		__asm        mov    [edx], ecx;
		__asm        mov    [edx+4], eax;
	}
// LINE 431:
_T4e:
	return;
}

// FUNCTION: COPTER_D 0x004804f7
void CareerWindow::CitySelectionFrame::FillSourceRects(/*packed*/ class MRect *rectSrc) {
	/*bp-0x4*/   int32_t nN;

// LINE 435:
_FOR_18:
	for (nN = 0x0; (nN < 0x4); nN++) {
// LINE 437:
		__asm        mov    eax, this;
		__asm        cmp    dword ptr [eax+0xC], 0;
		__asm        je     _T62;
// LINE 439:
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        add    eax, this;
		__asm        add    eax, 0x10;
		__asm        mov    ecx, nN;
		__asm        shl    ecx, 4;
		__asm        add    ecx, rectSrc;
		__asm        mov    edx, [eax];
		__asm        mov    [ecx], edx;
		__asm        mov    edx, [eax+4];
		__asm        mov    [ecx+4], edx;
		__asm        mov    edx, [eax+8];
		__asm        mov    [ecx+8], edx;
		__asm        mov    eax, [eax+0xC];
		__asm        mov    [ecx+0xC], eax;
// LINE 441:
		__asm        jmp    _T104;
// LINE 447:
_T62:
		__asm        jmp    _T67;
_T67:
		__asm        jmp    _T6c;
_T6c:
		__asm        jmp    _T71;
_T71:
		__asm        jmp    _T76;
_T76:
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x1C];
		__asm        add    eax, 0x168;
		__asm        mov    [ebp-0x18], eax;
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x18];
		__asm        mov    [ebp-0x1C], eax;
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x14];
		__asm        add    eax, 0x168;
		__asm        mov    [ebp-0x20], eax;
		__asm        mov    eax, nN;
		__asm        shl    eax, 4;
		__asm        mov    ecx, this;
		__asm        mov    eax, [eax+ecx+0x10];
		__asm        mov    [ebp-0x24], eax;
		__asm        jmp    _Tc5;
_Tc5:
		__asm        mov    eax, [ebp-0x24];
		__asm        mov    [ebp-0x14], eax;
		__asm        mov    eax, [ebp-0x20];
		__asm        mov    [ebp-0x10], eax;
		__asm        mov    eax, [ebp-0x1C];
		__asm        mov    [ebp-0xC], eax;
		__asm        mov    eax, [ebp-0x18];
		__asm        mov    [ebp-8], eax;
		__asm        jmp    _Te2;
_Te2:
		__asm        lea    eax, [ebp-0x14];
		__asm        mov    ecx, nN;
		__asm        shl    ecx, 4;
		__asm        add    ecx, rectSrc;
		__asm        mov    edx, [eax];
		__asm        mov    [ecx], edx;
		__asm        mov    edx, [eax+4];
		__asm        mov    [ecx+4], edx;
		__asm        mov    edx, [eax+8];
		__asm        mov    [ecx+8], edx;
		__asm        mov    eax, [eax+0xC];
		__asm        mov    [ecx+0xC], eax;
// LINE 449:
_T104:
	}
// LINE 450:
_T109:
	return;
}



// Contribution: 1:0007f610-0007f648 Module: 31, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00480610
// CareerWindow::`scalar deleting destructor'



// Contribution: 1:0007f650-0007f68e Module: 31, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00480650
// CareerWindow::CitySelectionFrame::`scalar deleting destructor'



// Contribution: 2:00001e30-00001ef3 Module: 31, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CareerWindow @ 0x00590e30
//   00: CareerWindow::DoMessage @ 0x0047fd2d
//   01: CareerWindow::Initialize @ 0x0047e19e
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: CareerWindow::CreateImage @ 0x0047f391
//   05: CareerWindow::DestroyImage @ 0x0047f75a
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: CareerWindow::DoKeyDown @ 0x0047fa75
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: CareerWindow::DoCursorDown @ 0x0047fb14
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: CareerWindow::DoCursorMove @ 0x0047fc47
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CareerWindow::`scalar deleting destructor' @ 0x00480610
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: CareerWindow::DrawSelf @ 0x0047f7cf
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00001ef4-00001ef7 Module: 31, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for CareerWindow @ 0x00590ef4
//   00: CareerWindow::CitySelectionFrame::`scalar deleting destructor' @ 0x00480650
//   1 entries



// Contribution: 3:00000064-0000006b Module: 31, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597064
static void (*$S65)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597068
static void (*$S68)() = { 0 /* todo */ };



// Contribution: 3:00002a84-00002ab3 Module: 31, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599a84
char * SZ_CAREER_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599a88
char * SZ_CAREER_WINDOW_SELECTION_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599a8c
char * SZ_CAREER_WINDOW_BUTTON_FILE_NAME = { 0 /* todo */ };



// Contribution: 3:0006d448-0006d44f Module: 31, 4 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604448
static /*packed*/ struct SparkalColor colorTextGamePaletteNormal;

// GLOBAL: COPTER_D 0x0060444c
static /*packed*/ struct SparkalColor colorTextGamePaletteHighlighted;

