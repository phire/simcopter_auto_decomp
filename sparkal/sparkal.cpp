// Module: Sparkal.obj
// Source: C:\Copter\source\sparkal\Sparkal.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CSparkalApp (forward reference);
class CSparkalApp{
public:
	void CSparkalApp();
	// vtable: 0
	intro void ~CSparkalApp();
	// vtable: 4
	intro class CSparkalWindow* NewWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	class IFlatImage* NewImage(long, long, const const struct SparkalColor*);
	class IFlatImage* NewImage(char *);
	// vtable: 8
	intro unsigned long PrepareGame();
	// vtable: 12
	intro unsigned long TickGame();
	// vtable: 16
	intro unsigned long FinishGame();
	unsigned long TestFlag(unsigned long);
	unsigned long SetFlag(unsigned long);
	unsigned long ResetFlag(unsigned long);
	int32_t GetRuntimePlatform();
	int32_t DecideRuntimePlatform();
	enum PlatfromType {
		Unknown = 0,
		Win32s = 1,
		WinNT31 = 2,
		WinNT35 = 3,
		Win95 = 4,
		MacSystem7 = 5,
	};
protected:
	struct SparkalColor* mpColorTable;
	int32_t _mRuntimePlatform;
	unsigned long _mFlags;
	int32_t mbUseDirectDraw;
};

// Type: class CSparkalApp (forward reference);
// CSparkalApp Class implementation not found

// Type: float;

// Type: union _LARGE_INTEGER;

// Type: long;

// Type: unsigned long;

// Type: class MTimer;
class MTimer{
	enum TimerResolution {
		nTimerResolutionMicroseconds = 0,
		nTimerResolutionMilliseconds = 1,
		nTimerResolutionSeconds = 2,
	};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	enum MTimer::TimerResolution nTimerResolution;
	unsigned long lStartTime;
	unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	unsigned long lFrequency;
};

// Type: void;



// Contribution: 1:0003c850-0003cad2 Module: 56, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043d850
float GetMillisecondTime() {
	float Time;
	union _LARGE_INTEGER Counter;

// LINE 34:
	__asm        lea    eax, Counter<_LARGE_INTEGER+0x00:None>;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        test   eax, eax;
	__asm        je     _T53;
// LINE 36:
	__asm        mov    eax, Counter<_LARGE_INTEGER+0x04:4>;
	__asm        mov    [ebp-0x10], eax;
	__asm        fild   dword ptr [ebp-0x10];
	__asm        fmul   dword ptr ds:[0x58F5B0];
	__asm        mov    eax, Counter<_LARGE_INTEGER+0x00:4>;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        fild   qword ptr [ebp-0x18];
	__asm        faddp;
	__asm        fst    Time;
// LINE 37:
	__asm        fmul   dword ptr ds:[0x58F5B4];
	__asm        fdiv   _gTimerFrequency;
	__asm        fstp   Time;
// LINE 39:
	__asm        jmp    _T69;
// LINE 40:
_T53:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        fild   qword ptr [ebp-0x20];
	__asm        fstp   Time;
// LINE 46:
_T69:
	__asm        fld    Time;
	__asm        jmp    near ptr 0x0043D8C1;
// LINE 47:
}

// FUNCTION: COPTER_D 0x0043d8c6
long GetMillisecondTimeLong() {
// LINE 56:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        jmp    near ptr 0x0043D8D7;
// LINE 61:
}

// FUNCTION: COPTER_D 0x0043d8dc
long ConvertRange(long lPositionSource, long lMinSource, long lMaxSource, long lMinDestination, long lMaxDestination) {
// LINE 74:
	__asm        xor    eax, eax;
	__asm        sub    eax, lMinSource;
	__asm        neg    eax;
	__asm        sub    lPositionSource, eax;
// LINE 75:
	__asm        mov    eax, lMaxDestination;
	__asm        sub    eax, lMinDestination;
	__asm        imul   eax, lPositionSource;
	__asm        mov    lPositionSource, eax;
// LINE 76:
	__asm        mov    ecx, lMaxSource;
	__asm        sub    ecx, lMinSource;
	__asm        mov    eax, lPositionSource;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lPositionSource, eax;
// LINE 77:
	__asm        xor    eax, eax;
	__asm        sub    eax, lMinDestination;
	__asm        neg    eax;
	__asm        sub    lPositionSource, eax;
// LINE 78:
	__asm        mov    eax, lPositionSource;
	__asm        jmp    near ptr 0x0043D91A;
// LINE 79:
}

// FUNCTION: COPTER_D 0x0043d91f
void SparkalDelay(unsigned long lMilliseconds) {
	class MTimer tempTimer;

// LINE 102:
	__asm        mov    tempTimer.nTimerResolution, 1;
	__asm        mov    tempTimer.lStartTime, 0;
	__asm        mov    tempTimer.lTotalElapsedTime, 0;
	__asm        mov    tempTimer.lFrequency, 0;
	__asm        cmp    tempTimer.nTimerResolution, 0;
	__asm        jne    _T4a;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    tempTimer.lFrequency, eax;
	__asm        jmp    _T4a;
_T4a:
	__asm        jmp    near ptr 0x0043D96E;
// LINE 104:
	__asm        jmp    near ptr 0x0043D973;

	__asm        cmp    tempTimer.lStartTime, 0;
	__asm        je     _T63;

	__asm        jmp    _Tc6;
_T63:
	__asm        cmp    tempTimer.nTimerResolution, 1;
	__asm        jne    _T80;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    tempTimer.lStartTime, eax;
	__asm        jmp    _Tc1;

	__asm        jmp    _Tc1;
_T80:
	__asm        cmp    tempTimer.nTimerResolution, 0;
	__asm        jne    _Taa;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    tempTimer.lStartTime, eax;
	__asm        jmp    _Tc1;

	__asm        jmp    _Tc1;
_Taa:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    tempTimer.lStartTime, eax;
	__asm        jmp    _Tc1;
_Tc1:
	__asm        jmp    _Tc6;
// LINE 105:
_Tc6:
	__asm        mov    eax, tempTimer.lTotalElapsedTime;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0043D9F0;

	__asm        cmp    tempTimer.lStartTime, 0;
	__asm        je     _T148;

	__asm        cmp    tempTimer.nTimerResolution, 1;
	__asm        jne    _Tf8;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T139;

	__asm        jmp    _T139;
_Tf8:
	__asm        cmp    tempTimer.nTimerResolution, 0;
	__asm        jne    _T122;

	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T139;

	__asm        jmp    _T139;
_T122:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T139;
_T139:
	__asm        mov    eax, [ebp-0x40];
	__asm        sub    eax, tempTimer.lStartTime;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    [ebp-0x30], eax;
_T148:
	__asm        cmp    tempTimer.nTimerResolution, 0;
	__asm        jne    _T183;

	__asm        cmp    tempTimer.lFrequency, 0;
	__asm        je     _T183;

	__asm        mov    eax, tempTimer.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, lMilliseconds;
	__asm        cmp    [ebp-0x30], eax;
	__asm        jae    _T1a5;

	__asm        jmp    _T1a0;
_T183:
	__asm        mov    eax, lMilliseconds;
	__asm        cmp    [ebp-0x30], eax;
	__asm        jae    _T1a5;

	__asm        jmp    _T1a0;

	__asm        mov    eax, lMilliseconds;
	__asm        cmp    [ebp-0x44], eax;
	__asm        jae    _T1a5;
// LINE 106:
_T1a0:
	__asm        jmp    _Tc6;
// LINE 107:
_T1a5:
	__asm        jmp    near ptr 0x0043DAC9;

	__asm        jmp    near ptr 0x0043DACE;
}



// Contribution: 2:000005b0-000005b7 Module: 56, 4 byte alignment, initialized_data, read, 


// Contribution: 3:00001580-00001583 Module: 56, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598580
class CSparkalApp* _gSparkalApp = { 0 /* todo */ };

