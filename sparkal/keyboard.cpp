// Module: keyboard.obj
// Source: C:\Copter\source\sparkal\keyboard.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00030c50-00031258 Module: 62, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00431c50
// $E4

// FUNCTION: COPTER_D 0x00431c6a
// $E1

// FUNCTION: COPTER_D 0x00431c84
// $E3

// FUNCTION: COPTER_D 0x00431ca1
// $E2

// FUNCTION: COPTER_D 0x00431cc0
int32_t IsModifierSet(unsigned char chModifiers) {
// LINE 16:
	asm( 
"	      00431cc0    push ebp"
"	      00431cc1    mov ebp,esp"
"	      00431cc3    push ebx"
"	      00431cc4    push esi"
"	      00431cc5    push edi"
);
// LINE 17:
	asm( 
"	      00431cc6    mov ecx,5C34F0h"
"	      00431ccb    call 00431EB1h"
"	      00431cd0    movsx eax,al"
"	      00431cd3    xor ecx,ecx"
"	      00431cd5    mov cl,[ebp+8]"
"	      00431cd8    and eax,ecx"
"	      00431cda    jmp near ptr 00431CDFh"
);
// LINE 18:
	asm( 
"	      00431cdf    pop edi"
"	      00431ce0    pop esi"
"	      00431ce1    pop ebx"
"	      00431ce2    leave"
"	      00431ce3    ret"
);
}

// FUNCTION: COPTER_D 0x00431ce4
void Keyboard::Keyboard() {
// LINE 31:
	asm( 
"	      00431ce4    push ebp"
"	      00431ce5    mov ebp,esp"
"	      00431ce7    sub esp,4"
"	      00431cea    push ebx"
"	      00431ceb    push esi"
"	      00431cec    push edi"
"	      00431ced    mov [ebp-4],ecx"
"	      00431cf0    mov ecx,[ebp-4]"
"	      00431cf3    call 0043D432h"
);
// LINE 32:
	asm( 
"	      00431cf8    mov ecx,[ebp-4]"
"	      00431cfb    call 00431E19h"
);
// LINE 33:
	asm( 
"	      00431d00    jmp near ptr 00431D05h"
"	      00431d05    mov eax,[ebp-4]"
"	      00431d08    pop edi"
"	      00431d09    pop esi"
"	      00431d0a    pop ebx"
"	      00431d0b    leave"
"	      00431d0c    ret"
);
}

// FUNCTION: COPTER_D 0x00431d0d
int32_t Keyboard::IsKeyDown(unsigned char chKey) {
// LINE 40:
	asm( 
"	      00431d0d    push ebp"
"	      00431d0e    mov ebp,esp"
"	      00431d10    sub esp,4"
"	      00431d13    push ebx"
"	      00431d14    push esi"
"	      00431d15    push edi"
"	      00431d16    mov [ebp-4],ecx"
);
// LINE 41:
	asm( 
"	      00431d19    xor eax,eax"
"	      00431d1b    mov al,[ebp+8]"
"	      00431d1e    mov ecx,[ebp-4]"
"	      00431d21    movsx eax,byte ptr [eax+ecx+10h]"
"	      00431d26    jmp near ptr 00431D2Bh"
);
// LINE 42:
	asm( 
"	      00431d2b    pop edi"
"	      00431d2c    pop esi"
"	      00431d2d    pop ebx"
"	      00431d2e    leave"
"	      00431d2f    ret 4"
);
}

// FUNCTION: COPTER_D 0x00431d32
int32_t Keyboard::IsKeyDown(unsigned char chKey, unsigned char chModifiers) {
// LINE 49:
	asm( 
"	      00431d32    push ebp"
"	      00431d33    mov ebp,esp"
"	      00431d35    sub esp,8"
"	      00431d38    push ebx"
"	      00431d39    push esi"
"	      00431d3a    push edi"
"	      00431d3b    mov [ebp-8],ecx"
);
// LINE 52:
	asm( 
"	      00431d3e    mov eax,[ebp+8]"
"	      00431d41    push eax"
"	      00431d42    mov ecx,[ebp-8]"
"	      00431d45    call 00431D0Dh"
"	      00431d4a    test eax,eax"
"	      00431d4c    jne near ptr 00431D59h"
);
// LINE 53:
	asm( 
"	      00431d52    xor eax,eax"
"	      00431d54    jmp near ptr 00431D86h"
);
// LINE 57:
	asm( 
"	      00431d59    mov ecx,[ebp-8]"
"	      00431d5c    call 00431EB1h"
"	      00431d61    mov [ebp-4],al"
);
// LINE 58:
	asm( 
"	      00431d64    movsx eax,byte ptr [ebp-4]"
"	      00431d68    xor ecx,ecx"
"	      00431d6a    mov cl,[ebp+0Ch]"
"	      00431d6d    cmp eax,ecx"
"	      00431d6f    jne near ptr 00431D7Fh"
"	      00431d75    mov eax,1"
"	      00431d7a    jmp near ptr 00431D81h"
"	      00431d7f    xor eax,eax"
"	      00431d81    jmp near ptr 00431D86h"
);
// LINE 59:
	asm( 
"	      00431d86    pop edi"
"	      00431d87    pop esi"
"	      00431d88    pop ebx"
"	      00431d89    leave"
"	      00431d8a    ret 8"
);
}

// FUNCTION: COPTER_D 0x00431d8d
void Keyboard::ProcessKeyDown(unsigned char chKey) {
// LINE 66:
	asm( 
"	      00431d8d    push ebp"
"	      00431d8e    mov ebp,esp"
"	      00431d90    sub esp,4"
"	      00431d93    push ebx"
"	      00431d94    push esi"
"	      00431d95    push edi"
"	      00431d96    mov [ebp-4],ecx"
);
// LINE 70:
	asm( 
"	      00431d99    xor eax,eax"
"	      00431d9b    mov al,[ebp+8]"
"	      00431d9e    mov ecx,[ebp-4]"
"	      00431da1    movsx eax,byte ptr [eax+ecx+10h]"
"	      00431da6    test eax,eax"
"	      00431da8    jne near ptr 00431DC7h"
);
// LINE 71:
	asm( 
"	      00431dae    xor eax,eax"
"	      00431db0    mov al,[ebp+8]"
"	      00431db3    mov ecx,[ebp-4]"
"	      00431db6    mov byte ptr [eax+ecx+10h],1"
);
// LINE 72:
	asm( 
"	      00431dbb    mov eax,[ebp+8]"
"	      00431dbe    push eax"
"	      00431dbf    mov ecx,[ebp-4]"
"	      00431dc2    call 0043D4EBh"
);
// LINE 74:
	asm( 
"	      00431dc7    jmp near ptr 00431DCCh"
"	      00431dcc    pop edi"
"	      00431dcd    pop esi"
"	      00431dce    pop ebx"
"	      00431dcf    leave"
"	      00431dd0    ret 4"
);
}

// FUNCTION: COPTER_D 0x00431dd3
void Keyboard::ProcessKeyUp(unsigned char chKey) {
// LINE 82:
	asm( 
"	      00431dd3    push ebp"
"	      00431dd4    mov ebp,esp"
"	      00431dd6    sub esp,4"
"	      00431dd9    push ebx"
"	      00431dda    push esi"
"	      00431ddb    push edi"
"	      00431ddc    mov [ebp-4],ecx"
);
// LINE 83:
	asm( 
"	      00431ddf    xor eax,eax"
"	      00431de1    mov al,[ebp+8]"
"	      00431de4    mov ecx,[ebp-4]"
"	      00431de7    movsx eax,byte ptr [eax+ecx+10h]"
"	      00431dec    test eax,eax"
"	      00431dee    je near ptr 00431E0Dh"
);
// LINE 84:
	asm( 
"	      00431df4    xor eax,eax"
"	      00431df6    mov al,[ebp+8]"
"	      00431df9    mov ecx,[ebp-4]"
"	      00431dfc    mov byte ptr [eax+ecx+10h],0"
);
// LINE 85:
	asm( 
"	      00431e01    mov eax,[ebp+8]"
"	      00431e04    push eax"
"	      00431e05    mov ecx,[ebp-4]"
"	      00431e08    call 0043D67Fh"
);
// LINE 87:
	asm( 
"	      00431e0d    jmp near ptr 00431E12h"
"	      00431e12    pop edi"
"	      00431e13    pop esi"
"	      00431e14    pop ebx"
"	      00431e15    leave"
"	      00431e16    ret 4"
);
}

// FUNCTION: COPTER_D 0x00431e19
void Keyboard::ClearSettings() {
// LINE 95:
	asm( 
"	      00431e19    push ebp"
"	      00431e1a    mov ebp,esp"
"	      00431e1c    sub esp,8"
"	      00431e1f    push ebx"
"	      00431e20    push esi"
"	      00431e21    push edi"
"	      00431e22    mov [ebp-8],ecx"
);
// LINE 98:
	asm( 
"	      00431e25    mov dword ptr [ebp-4],0"
"	      00431e2c    jmp near ptr 00431E34h"
"	      00431e31    inc dword ptr [ebp-4]"
"	      00431e34    cmp dword ptr [ebp-4],100h"
"	      00431e3b    jge near ptr 00431E51h"
);
// LINE 99:
	asm( 
"	      00431e41    mov eax,[ebp-4]"
"	      00431e44    mov ecx,[ebp-8]"
"	      00431e47    mov byte ptr [eax+ecx+10h],0"
"	      00431e4c    jmp near ptr 00431E31h"
);
// LINE 100:
	asm( 
"	      00431e51    mov ecx,[ebp-8]"
"	      00431e54    call 0043D703h"
);
// LINE 101:
	asm( 
"	      00431e59    jmp near ptr 00431E5Eh"
"	      00431e5e    pop edi"
"	      00431e5f    pop esi"
"	      00431e60    pop ebx"
"	      00431e61    leave"
"	      00431e62    ret"
);
}

// FUNCTION: COPTER_D 0x00431e63
int32_t Keyboard::CharIsModifier(unsigned char chKey) {
// LINE 109:
	asm( 
"	      00431e63    push ebp"
"	      00431e64    mov ebp,esp"
"	      00431e66    sub esp,4"
"	      00431e69    push ebx"
"	      00431e6a    push esi"
"	      00431e6b    push edi"
"	      00431e6c    mov [ebp-4],ecx"
);
// LINE 111:
	asm( 
"	      00431e6f    xor eax,eax"
"	      00431e71    mov al,[ebp+8]"
"	      00431e74    cmp eax,10h"
"	      00431e77    je near ptr 00431E99h"
"	      00431e7d    xor eax,eax"
"	      00431e7f    mov al,[ebp+8]"
"	      00431e82    cmp eax,11h"
"	      00431e85    je near ptr 00431E99h"
"	      00431e8b    xor eax,eax"
"	      00431e8d    mov al,[ebp+8]"
"	      00431e90    cmp eax,12h"
"	      00431e93    jne near ptr 00431EA3h"
);
// LINE 112:
	asm( 
"	      00431e99    mov eax,1"
"	      00431e9e    jmp near ptr 00431EAAh"
);
// LINE 115:
	asm( 
"	      00431ea3    xor eax,eax"
"	      00431ea5    jmp near ptr 00431EAAh"
);
// LINE 116:
	asm( 
"	      00431eaa    pop edi"
"	      00431eab    pop esi"
"	      00431eac    pop ebx"
"	      00431ead    leave"
"	      00431eae    ret 4"
);
}

// FUNCTION: COPTER_D 0x00431eb1
char Keyboard::GetCurrentModifierState() {
// LINE 124:
	asm( 
"	      00431eb1    push ebp"
"	      00431eb2    mov ebp,esp"
"	      00431eb4    sub esp,8"
"	      00431eb7    push ebx"
"	      00431eb8    push esi"
"	      00431eb9    push edi"
"	      00431eba    mov [ebp-8],ecx"
);
// LINE 125:
	asm( 
"	      00431ebd    mov byte ptr [ebp-4],0"
);
// LINE 128:
	asm( 
"	      00431ec1    push 10h"
"	      00431ec3    mov ecx,[ebp-8]"
"	      00431ec6    call 00431D0Dh"
"	      00431ecb    test eax,eax"
"	      00431ecd    je near ptr 00431EDCh"
);
// LINE 129:
	asm( 
"	      00431ed3    movsx eax,byte ptr [ebp-4]"
"	      00431ed7    or al,1"
"	      00431ed9    mov [ebp-4],al"
);
// LINE 130:
	asm( 
"	      00431edc    push 11h"
"	      00431ede    mov ecx,[ebp-8]"
"	      00431ee1    call 00431D0Dh"
"	      00431ee6    test eax,eax"
"	      00431ee8    je near ptr 00431EF7h"
);
// LINE 131:
	asm( 
"	      00431eee    movsx eax,byte ptr [ebp-4]"
"	      00431ef2    or al,2"
"	      00431ef4    mov [ebp-4],al"
);
// LINE 132:
	asm( 
"	      00431ef7    push 12h"
"	      00431ef9    mov ecx,[ebp-8]"
"	      00431efc    call 00431D0Dh"
"	      00431f01    test eax,eax"
"	      00431f03    je near ptr 00431F12h"
);
// LINE 133:
	asm( 
"	      00431f09    movsx eax,byte ptr [ebp-4]"
"	      00431f0d    or al,4"
"	      00431f0f    mov [ebp-4],al"
);
// LINE 136:
	asm( 
"	      00431f12    mov al,[ebp-4]"
"	      00431f15    jmp near ptr 00431F1Ah"
);
// LINE 137:
	asm( 
"	      00431f1a    pop edi"
"	      00431f1b    pop esi"
"	      00431f1c    pop ebx"
"	      00431f1d    leave"
"	      00431f1e    ret"
);
}

// FUNCTION: COPTER_D 0x00431f1f
char Keyboard::ConvertKeyToCharacter(unsigned char chKey, unsigned char chModifiers) {
// LINE 165:
	asm( 
"	      00431f1f    push ebp"
"	      00431f20    mov ebp,esp"
"	      00431f22    sub esp,28h"
"	      00431f25    push ebx"
"	      00431f26    push esi"
"	      00431f27    push edi"
);
// LINE 171:
	asm( 
"	      00431f28    xor eax,eax"
"	      00431f2a    mov al,[ebp+8]"
"	      00431f2d    cmp eax,41h"
"	      00431f30    jl near ptr 00431FCCh"
"	      00431f36    xor eax,eax"
"	      00431f38    mov al,[ebp+8]"
"	      00431f3b    cmp eax,5Ah"
"	      00431f3e    jg near ptr 00431FCCh"
);
// LINE 172:
	asm( 
"	      00431f44    xor eax,eax"
"	      00431f46    mov al,[ebp+0Ch]"
"	      00431f49    and eax,1"
"	      00431f4c    mov [ebp-8],eax"
"	      00431f4f    push 14h"
"	      00431f51    call 00432226h"
"	      00431f56    add esp,4"
"	      00431f59    mov [ebp-0Ch],eax"
"	      00431f5c    cmp dword ptr [ebp-8],0"
"	      00431f60    je near ptr 00431F7Ch"
"	      00431f66    cmp dword ptr [ebp-0Ch],0"
"	      00431f6a    jne near ptr 00431F7Ch"
"	      00431f70    mov dword ptr [ebp-10h],1"
"	      00431f77    jmp near ptr 00431FA8h"
"	      00431f7c    cmp dword ptr [ebp-8],0"
"	      00431f80    jne near ptr 00431F9Ch"
"	      00431f86    cmp dword ptr [ebp-0Ch],0"
"	      00431f8a    je near ptr 00431F9Ch"
"	      00431f90    mov dword ptr [ebp-10h],1"
"	      00431f97    jmp near ptr 00431FA8h"
"	      00431f9c    mov dword ptr [ebp-10h],0"
"	      00431fa3    jmp near ptr 00431FA8h"
"	      00431fa8    cmp dword ptr [ebp-10h],0"
"	      00431fac    je near ptr 00431FBFh"
);
// LINE 173:
	asm( 
"	      00431fb2    mov al,[ebp+8]"
"	      00431fb5    jmp near ptr 00432221h"
);
// LINE 174:
	asm( 
"	      00431fba    jmp near ptr 00431FCCh"
);
// LINE 175:
	asm( 
"	      00431fbf    xor eax,eax"
"	      00431fc1    mov al,[ebp+8]"
"	      00431fc4    add eax,20h"
"	      00431fc7    jmp near ptr 00432221h"
);
// LINE 180:
	asm( 
"	      00431fcc    xor eax,eax"
"	      00431fce    mov al,[ebp+8]"
"	      00431fd1    cmp eax,30h"
"	      00431fd4    jl near ptr 00432073h"
"	      00431fda    xor eax,eax"
"	      00431fdc    mov al,[ebp+8]"
"	      00431fdf    cmp eax,39h"
"	      00431fe2    jg near ptr 00432073h"
);
// LINE 181:
	asm( 
"	      00431fe8    xor eax,eax"
"	      00431fea    mov al,[ebp+0Ch]"
"	      00431fed    and eax,1"
"	      00431ff0    mov [ebp-14h],eax"
"	      00431ff3    push 14h"
"	      00431ff5    call 00432226h"
"	      00431ffa    add esp,4"
"	      00431ffd    mov [ebp-18h],eax"
"	      00432000    cmp dword ptr [ebp-14h],0"
"	      00432004    je near ptr 00432020h"
"	      0043200a    cmp dword ptr [ebp-18h],0"
"	      0043200e    jne near ptr 00432020h"
"	      00432014    mov dword ptr [ebp-1Ch],1"
"	      0043201b    jmp near ptr 0043204Ch"
"	      00432020    cmp dword ptr [ebp-14h],0"
"	      00432024    jne near ptr 00432040h"
"	      0043202a    cmp dword ptr [ebp-18h],0"
"	      0043202e    je near ptr 00432040h"
"	      00432034    mov dword ptr [ebp-1Ch],1"
"	      0043203b    jmp near ptr 0043204Ch"
"	      00432040    mov dword ptr [ebp-1Ch],0"
"	      00432047    jmp near ptr 0043204Ch"
"	      0043204c    cmp dword ptr [ebp-1Ch],0"
"	      00432050    je near ptr 0043206Bh"
);
// LINE 182:
	asm( 
"	      00432056    xor eax,eax"
"	      00432058    mov al,[ebp+8]"
"	      0043205b    mov al,[eax+598320h]"
"	      00432061    jmp near ptr 00432221h"
);
// LINE 183:
	asm( 
"	      00432066    jmp near ptr 00432073h"
);
// LINE 184:
	asm( 
"	      0043206b    mov al,[ebp+8]"
"	      0043206e    jmp near ptr 00432221h"
);
// LINE 189:
	asm( 
"	      00432073    mov byte ptr [ebp-4],0FFh"
);
// LINE 190:
	asm( 
"	      00432077    xor eax,eax"
"	      00432079    mov al,[ebp+8]"
"	      0043207c    cmp eax,60h"
"	      0043207f    jne near ptr 0043208Eh"
);
// LINE 191:
	asm( 
"	      00432085    mov byte ptr [ebp-4],0"
);
// LINE 192:
	asm( 
"	      00432089    jmp near ptr 0043216Fh"
"	      0043208e    xor eax,eax"
"	      00432090    mov al,[ebp+8]"
"	      00432093    cmp eax,2Dh"
"	      00432096    jne near ptr 004320A5h"
);
// LINE 193:
	asm( 
"	      0043209c    mov byte ptr [ebp-4],1"
);
// LINE 194:
	asm( 
"	      004320a0    jmp near ptr 0043216Fh"
"	      004320a5    xor eax,eax"
"	      004320a7    mov al,[ebp+8]"
"	      004320aa    cmp eax,3Dh"
"	      004320ad    jne near ptr 004320BCh"
);
// LINE 195:
	asm( 
"	      004320b3    mov byte ptr [ebp-4],2"
);
// LINE 196:
	asm( 
"	      004320b7    jmp near ptr 0043216Fh"
"	      004320bc    xor eax,eax"
"	      004320be    mov al,[ebp+8]"
"	      004320c1    cmp eax,5Bh"
"	      004320c4    jne near ptr 004320D3h"
);
// LINE 197:
	asm( 
"	      004320ca    mov byte ptr [ebp-4],3"
);
// LINE 198:
	asm( 
"	      004320ce    jmp near ptr 0043216Fh"
"	      004320d3    xor eax,eax"
"	      004320d5    mov al,[ebp+8]"
"	      004320d8    cmp eax,5Dh"
"	      004320db    jne near ptr 004320EAh"
);
// LINE 199:
	asm( 
"	      004320e1    mov byte ptr [ebp-4],4"
);
// LINE 200:
	asm( 
"	      004320e5    jmp near ptr 0043216Fh"
"	      004320ea    xor eax,eax"
"	      004320ec    mov al,[ebp+8]"
"	      004320ef    cmp eax,5Ch"
"	      004320f2    jne near ptr 00432101h"
);
// LINE 201:
	asm( 
"	      004320f8    mov byte ptr [ebp-4],5"
);
// LINE 202:
	asm( 
"	      004320fc    jmp near ptr 0043216Fh"
"	      00432101    xor eax,eax"
"	      00432103    mov al,[ebp+8]"
"	      00432106    cmp eax,3Bh"
"	      00432109    jne near ptr 00432118h"
);
// LINE 203:
	asm( 
"	      0043210f    mov byte ptr [ebp-4],6"
);
// LINE 204:
	asm( 
"	      00432113    jmp near ptr 0043216Fh"
"	      00432118    xor eax,eax"
"	      0043211a    mov al,[ebp+8]"
"	      0043211d    cmp eax,27h"
"	      00432120    jne near ptr 0043212Fh"
);
// LINE 205:
	asm( 
"	      00432126    mov byte ptr [ebp-4],7"
);
// LINE 206:
	asm( 
"	      0043212a    jmp near ptr 0043216Fh"
"	      0043212f    xor eax,eax"
"	      00432131    mov al,[ebp+8]"
"	      00432134    cmp eax,2Ch"
"	      00432137    jne near ptr 00432146h"
);
// LINE 207:
	asm( 
"	      0043213d    mov byte ptr [ebp-4],8"
);
// LINE 208:
	asm( 
"	      00432141    jmp near ptr 0043216Fh"
"	      00432146    xor eax,eax"
"	      00432148    mov al,[ebp+8]"
"	      0043214b    cmp eax,2Eh"
"	      0043214e    jne near ptr 0043215Dh"
);
// LINE 209:
	asm( 
"	      00432154    mov byte ptr [ebp-4],9"
);
// LINE 210:
	asm( 
"	      00432158    jmp near ptr 0043216Fh"
"	      0043215d    xor eax,eax"
"	      0043215f    mov al,[ebp+8]"
"	      00432162    cmp eax,2Fh"
"	      00432165    jne near ptr 0043216Fh"
);
// LINE 211:
	asm( 
"	      0043216b    mov byte ptr [ebp-4],0Ah"
);
// LINE 213:
	asm( 
"	      0043216f    movsx eax,byte ptr [ebp-4]"
"	      00432173    test eax,eax"
"	      00432175    jl near ptr 00432205h"
);
// LINE 214:
	asm( 
"	      0043217b    xor eax,eax"
"	      0043217d    mov al,[ebp+0Ch]"
"	      00432180    and eax,1"
"	      00432183    mov [ebp-20h],eax"
"	      00432186    push 14h"
"	      00432188    call 00432226h"
"	      0043218d    add esp,4"
"	      00432190    mov [ebp-24h],eax"
"	      00432193    cmp dword ptr [ebp-20h],0"
"	      00432197    je near ptr 004321B3h"
"	      0043219d    cmp dword ptr [ebp-24h],0"
"	      004321a1    jne near ptr 004321B3h"
"	      004321a7    mov dword ptr [ebp-28h],1"
"	      004321ae    jmp near ptr 004321DFh"
"	      004321b3    cmp dword ptr [ebp-20h],0"
"	      004321b7    jne near ptr 004321D3h"
"	      004321bd    cmp dword ptr [ebp-24h],0"
"	      004321c1    je near ptr 004321D3h"
"	      004321c7    mov dword ptr [ebp-28h],1"
"	      004321ce    jmp near ptr 004321DFh"
"	      004321d3    mov dword ptr [ebp-28h],0"
"	      004321da    jmp near ptr 004321DFh"
"	      004321df    cmp dword ptr [ebp-28h],0"
"	      004321e3    je near ptr 004321FDh"
);
// LINE 215:
	asm( 
"	      004321e9    movsx eax,byte ptr [ebp-4]"
"	      004321ed    mov al,[eax+598360h]"
"	      004321f3    jmp near ptr 00432221h"
);
// LINE 216:
	asm( 
"	      004321f8    jmp near ptr 00432205h"
);
// LINE 217:
	asm( 
"	      004321fd    mov al,[ebp+8]"
"	      00432200    jmp near ptr 00432221h"
);
// LINE 220:
	asm( 
"	      00432205    xor eax,eax"
"	      00432207    mov al,[ebp+8]"
"	      0043220a    cmp eax,20h"
"	      0043220d    jne near ptr 0043221Ah"
);
// LINE 221:
	asm( 
"	      00432213    mov al,20h"
"	      00432215    jmp near ptr 00432221h"
);
// LINE 225:
	asm( 
"	      0043221a    xor al,al"
"	      0043221c    jmp near ptr 00432221h"
);
// LINE 226:
	asm( 
"	      00432221    pop edi"
"	      00432222    pop esi"
"	      00432223    pop ebx"
"	      00432224    leave"
"	      00432225    ret"
);
}

// FUNCTION: COPTER_D 0x00432226
int32_t Keyboard::IsToggleKeySet(unsigned char chToggleKey) {
// LINE 241:
	asm( 
"	      00432226    push ebp"
"	      00432227    mov ebp,esp"
"	      00432229    push ebx"
"	      0043222a    push esi"
"	      0043222b    push edi"
);
// LINE 243:
	asm( 
"	      0043222c    xor eax,eax"
"	      0043222e    mov al,[ebp+8]"
"	      00432231    push eax"
"	      00432232    call dword ptr ds:[6C386Ch]"
"	      00432238    movsx eax,ax"
"	      0043223b    test al,1"
"	      0043223d    je near ptr 0043224Dh"
);
// LINE 244:
	asm( 
"	      00432243    mov eax,1"
"	      00432248    jmp near ptr 00432254h"
);
// LINE 245:
	asm( 
"	      0043224d    xor eax,eax"
"	      0043224f    jmp near ptr 00432254h"
);
// LINE 249:
	asm( 
"	      00432254    pop edi"
"	      00432255    pop esi"
"	      00432256    pop ebx"
"	      00432257    leave"
"	      00432258    ret"
);
}



// Contribution: 3:00000024-00000027 Module: 62, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597024
// $S5


// Contribution: 3:00001350-0000136a Module: 62, 8 byte alignment, initialized_data, read, write, 


// Contribution: 3:0002c4f0-0002c5ff Module: 62, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c34f0
// gKeyboard
