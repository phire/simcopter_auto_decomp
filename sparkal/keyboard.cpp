// Module: keyboard.obj
// Source: C:\Copter\source\sparkal\keyboard.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00030c50-00031258 Module: 62, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00431c50
// $E4

// FUNCTION: COPTER_D 0x00431c6a
// $E1

// FUNCTION: COPTER_D 0x00431c84
// $E3

// FUNCTION: COPTER_D 0x00431ca1
// $E2

// FUNCTION: COPTER_D 0x00431cc0
int32_t IsModifierSet(unsigned char chModifiers) {
// LINE 16:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 17:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   0x00431EB1;
	__asm        movsx  eax, al;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chModifiers;
	__asm        and    eax, ecx;
	__asm        jmp    near ptr 0x00431CDF;
// LINE 18:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431ce4
void Keyboard::Keyboard() {
// LINE 31:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0043D432;
// LINE 32:
	__asm        mov    ecx, this;
	__asm        call   0x00431E19;
// LINE 33:
	__asm        jmp    near ptr 0x00431D05;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431d0d
int32_t Keyboard::IsKeyDown(unsigned char chKey) {
// LINE 40:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 41:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        jmp    near ptr 0x00431D2B;
// LINE 42:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00431d32
int32_t Keyboard::IsKeyDown(unsigned char chKey, unsigned char chModifiers) {
	char chCurrentModifiers;

// LINE 49:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00431D0D;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00431D59;
// LINE 53:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431D86;
// LINE 57:
	__asm        mov    ecx, this;
	__asm        call   0x00431EB1;
	__asm        mov    chCurrentModifiers, al;
// LINE 58:
	__asm        movsx  eax, chCurrentModifiers;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chModifiers;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00431D7F;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00431D81;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431D86;
// LINE 59:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00431d8d
void Keyboard::ProcessKeyDown(unsigned char chKey) {
// LINE 66:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 70:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00431DC7;
// LINE 71:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 1;
// LINE 72:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D4EB;
// LINE 74:
	__asm        jmp    near ptr 0x00431DCC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00431dd3
void Keyboard::ProcessKeyUp(unsigned char chKey) {
// LINE 82:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 83:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431E0D;
// LINE 84:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 0;
// LINE 85:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0043D67F;
// LINE 87:
	__asm        jmp    near ptr 0x00431E12;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00431e19
void Keyboard::ClearSettings() {
	int32_t i;

// LINE 95:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 98:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00431E34;
	__asm        inc    i;
	__asm        cmp    i, 0x100;
	__asm        jge    near ptr 0x00431E51;
// LINE 99:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 0;
	__asm        jmp    near ptr 0x00431E31;
// LINE 100:
	__asm        mov    ecx, this;
	__asm        call   0x0043D703;
// LINE 101:
	__asm        jmp    near ptr 0x00431E5E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431e63
int32_t Keyboard::CharIsModifier(unsigned char chKey) {
// LINE 109:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 111:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x10;
	__asm        je     near ptr 0x00431E99;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x11;
	__asm        je     near ptr 0x00431E99;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x12;
	__asm        jne    near ptr 0x00431EA3;
// LINE 112:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00431EAA;
// LINE 115:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00431EAA;
// LINE 116:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00431eb1
char Keyboard::GetCurrentModifierState() {
	char chReturnValue;

// LINE 124:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 125:
	__asm        mov    chReturnValue, 0;
// LINE 128:
	__asm        push   0x10;
	__asm        mov    ecx, this;
	__asm        call   0x00431D0D;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431EDC;
// LINE 129:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 1;
	__asm        mov    chReturnValue, al;
// LINE 130:
	__asm        push   0x11;
	__asm        mov    ecx, this;
	__asm        call   0x00431D0D;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431EF7;
// LINE 131:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 2;
	__asm        mov    chReturnValue, al;
// LINE 132:
	__asm        push   0x12;
	__asm        mov    ecx, this;
	__asm        call   0x00431D0D;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00431F12;
// LINE 133:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 4;
	__asm        mov    chReturnValue, al;
// LINE 136:
	__asm        mov    al, chReturnValue;
	__asm        jmp    near ptr 0x00431F1A;
// LINE 137:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00431f1f
char Keyboard::ConvertKeyToCharacter(unsigned char chKey, unsigned char chModifiers) {
	static const char[11] chExtraArray = { /* <data@0x00598360> */ };
	char chIndex;
	static const char[10] chNumberArray = { /* <data@0x00598350> */ };

// LINE 165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 171:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x41;
	__asm        jl     near ptr 0x00431FCC;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5A;
	__asm        jg     near ptr 0x00431FCC;
// LINE 172:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-8], eax;
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00431F7C;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x00431F7C;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x00431FA8;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x00431F9C;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00431F9C;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x00431FA8;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x00431FA8;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00431FBF;
// LINE 173:
	__asm        mov    al, chKey;
	__asm        jmp    near ptr 0x00432221;
// LINE 174:
	__asm        jmp    near ptr 0x00431FCC;
// LINE 175:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        add    eax, 0x20;
	__asm        jmp    near ptr 0x00432221;
// LINE 180:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x30;
	__asm        jl     near ptr 0x00432073;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x39;
	__asm        jg     near ptr 0x00432073;
// LINE 181:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-0x14], eax;
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00432020;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x00432020;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x0043204C;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x00432040;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00432040;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x0043204C;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0043204C;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0043206B;
// LINE 182:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    al, [eax+0x598320];
	__asm        jmp    near ptr 0x00432221;
// LINE 183:
	__asm        jmp    near ptr 0x00432073;
// LINE 184:
	__asm        mov    al, chKey;
	__asm        jmp    near ptr 0x00432221;
// LINE 189:
	__asm        mov    chIndex, 0xFF;
// LINE 190:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x60;
	__asm        jne    near ptr 0x0043208E;
// LINE 191:
	__asm        mov    chIndex, 0;
// LINE 192:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2D;
	__asm        jne    near ptr 0x004320A5;
// LINE 193:
	__asm        mov    chIndex, 1;
// LINE 194:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x3D;
	__asm        jne    near ptr 0x004320BC;
// LINE 195:
	__asm        mov    chIndex, 2;
// LINE 196:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5B;
	__asm        jne    near ptr 0x004320D3;
// LINE 197:
	__asm        mov    chIndex, 3;
// LINE 198:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5D;
	__asm        jne    near ptr 0x004320EA;
// LINE 199:
	__asm        mov    chIndex, 4;
// LINE 200:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5C;
	__asm        jne    near ptr 0x00432101;
// LINE 201:
	__asm        mov    chIndex, 5;
// LINE 202:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x3B;
	__asm        jne    near ptr 0x00432118;
// LINE 203:
	__asm        mov    chIndex, 6;
// LINE 204:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x27;
	__asm        jne    near ptr 0x0043212F;
// LINE 205:
	__asm        mov    chIndex, 7;
// LINE 206:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2C;
	__asm        jne    near ptr 0x00432146;
// LINE 207:
	__asm        mov    chIndex, 8;
// LINE 208:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2E;
	__asm        jne    near ptr 0x0043215D;
// LINE 209:
	__asm        mov    chIndex, 9;
// LINE 210:
	__asm        jmp    near ptr 0x0043216F;
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2F;
	__asm        jne    near ptr 0x0043216F;
// LINE 211:
	__asm        mov    chIndex, 0xA;
// LINE 213:
	__asm        movsx  eax, chIndex;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00432205;
// LINE 214:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-0x20], eax;
	__asm        push   0x14;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004321B3;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x004321B3;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x004321DF;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004321D3;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004321D3;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x004321DF;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x004321DF;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004321FD;
// LINE 215:
	__asm        movsx  eax, chIndex;
	__asm        mov    al, [eax+0x598360];
	__asm        jmp    near ptr 0x00432221;
// LINE 216:
	__asm        jmp    near ptr 0x00432205;
// LINE 217:
	__asm        mov    al, chKey;
	__asm        jmp    near ptr 0x00432221;
// LINE 220:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x20;
	__asm        jne    near ptr 0x0043221A;
// LINE 221:
	__asm        mov    al, 0x20;
	__asm        jmp    near ptr 0x00432221;
// LINE 225:
	__asm        xor    al, al;
	__asm        jmp    near ptr 0x00432221;
// LINE 226:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00432226
int32_t Keyboard::IsToggleKeySet(unsigned char chToggleKey) {
// LINE 241:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 243:
	__asm        xor    eax, eax;
	__asm        mov    al, chToggleKey;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C386C];
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0043224D;
// LINE 244:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00432254;
// LINE 245:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00432254;
// LINE 249:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 3:00000024-00000027 Module: 62, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597024
// $S5


// Contribution: 3:00001350-0000136a Module: 62, 8 byte alignment, initialized_data, read, write, 


// Contribution: 3:0002c4f0-0002c5ff Module: 62, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c34f0
// gKeyboard
