// Module: keyboard.obj
// Source: C:\Copter\source\sparkal\keyboard.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: unsigned char;

// Type: int32_t;

// Type: class Keyboard (forward reference);
class Keyboard{
public:
	void Keyboard();
	int32_t IsKeyDown(unsigned char, unsigned char);
	int32_t IsKeyDown(unsigned char);
	void ProcessKeyDown(unsigned char);
	void ProcessKeyUp(unsigned char);
	void ClearSettings();
	int32_t CharIsModifier(unsigned char);
	char GetCurrentModifierState();
	// calltype: NearC
	static char ConvertKeyToCharacter(unsigned char, unsigned char);
	// calltype: NearC
	static int32_t IsToggleKeySet(unsigned char);
protected:
	// calltype: NearC
	static int32_t ShouldCharBeShifted(unsigned char);
public:
	class CharList myCharDownList;
	char chKeyStates[256];
	void ~Keyboard();
};

// Type: char;

// Type: char[11];

// Type: char[10];



// Contribution: 1:00030c50-00031258 Module: 62, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00431c50
void $E4() {

	__asm        call   $E1;
	__asm        call   $E3;
	__asm        jmp    near ptr 0x00431C65;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00431c6a
void $E1() {

	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::Keyboard;
	__asm        jmp    near ptr 0x00431C7F;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00431c84
void $E3() {

	__asm        push   0x431CA1;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00431C9C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00431ca1
void $E2() {

	__asm        jmp    near ptr 0x00431CAC;

	__asm        mov    ecx, 0x5C34F0;
	__asm        call   CharList::~CharList;
	__asm        jmp    near ptr 0x00431CBB;
}

// FUNCTION: COPTER_D 0x00431cc0
int32_t IsModifierSet(unsigned char chModifiers) {
// LINE 17:
	__asm        mov    ecx, 0x5C34F0;
	__asm        call   Keyboard::GetCurrentModifierState;
	__asm        movsx  eax, al;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chModifiers;
	__asm        and    eax, ecx;
	__asm        jmp    near ptr 0x00431CDF;
// LINE 18:
}

// FUNCTION: COPTER_D 0x00431ce4
void Keyboard::Keyboard() {

	__asm        mov    ecx, this;
	__asm        call   CharList::CharList;
// LINE 32:
	__asm        mov    ecx, this;
	__asm        call   Keyboard::ClearSettings;
// LINE 33:
	__asm        jmp    near ptr 0x00431D05;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00431d0d
int32_t Keyboard::IsKeyDown(unsigned char chKey) {
// LINE 41:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        jmp    near ptr 0x00431D2B;
// LINE 42:
}

// FUNCTION: COPTER_D 0x00431d32
int32_t Keyboard::IsKeyDown(unsigned char chKey, unsigned char chModifiers) {
	char chCurrentModifiers;

// LINE 52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Keyboard::IsKeyDown;
	__asm        test   eax, eax;
	__asm        jne    _T27;
// LINE 53:
	__asm        xor    eax, eax;
	__asm        jmp    _T54;
// LINE 57:
_T27:
	__asm        mov    ecx, this;
	__asm        call   Keyboard::GetCurrentModifierState;
	__asm        mov    chCurrentModifiers, al;
// LINE 58:
	__asm        movsx  eax, chCurrentModifiers;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, chModifiers;
	__asm        cmp    eax, ecx;
	__asm        jne    _T4d;

	__asm        mov    eax, 1;
	__asm        jmp    _T4f;
_T4d:
	__asm        xor    eax, eax;
_T4f:
	__asm        jmp    _T54;
// LINE 59:
_T54:
}

// FUNCTION: COPTER_D 0x00431d8d
void Keyboard::ProcessKeyDown(unsigned char chKey) {
// LINE 70:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T3a;
// LINE 71:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 1;
// LINE 72:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::AddItem;
// LINE 74:
_T3a:
	__asm        jmp    near ptr 0x00431DCC;
}

// FUNCTION: COPTER_D 0x00431dd3
void Keyboard::ProcessKeyUp(unsigned char chKey) {
// LINE 83:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        movsx  eax, byte ptr [eax+ecx+0x10];
	__asm        test   eax, eax;
	__asm        je     _T3a;
// LINE 84:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 0;
// LINE 85:
	__asm        mov    eax, reinterpret_cast<uint32_t>(chKey);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CharList::DeleteItem;
// LINE 87:
_T3a:
	__asm        jmp    near ptr 0x00431E12;
}

// FUNCTION: COPTER_D 0x00431e19
void Keyboard::ClearSettings() {
	int32_t i;

// LINE 98:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 0x100;
	__asm        jge    _T38;
// LINE 99:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x10], 0;
	__asm        jmp    _T18;
// LINE 100:
_T38:
	__asm        mov    ecx, this;
	__asm        call   CharList::DeleteAllItems;
// LINE 101:
	__asm        jmp    near ptr 0x00431E5E;
}

// FUNCTION: COPTER_D 0x00431e63
int32_t Keyboard::CharIsModifier(unsigned char chKey) {
// LINE 111:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x10;
	__asm        je     _T36;

	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x11;
	__asm        je     _T36;

	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x12;
	__asm        jne    _T40;
// LINE 112:
_T36:
	__asm        mov    eax, 1;
	__asm        jmp    _T47;
// LINE 115:
_T40:
	__asm        xor    eax, eax;
	__asm        jmp    _T47;
// LINE 116:
_T47:
}

// FUNCTION: COPTER_D 0x00431eb1
char Keyboard::GetCurrentModifierState() {
	char chReturnValue;

// LINE 125:
	__asm        mov    chReturnValue, 0;
// LINE 128:
	__asm        push   0x10;
	__asm        mov    ecx, this;
	__asm        call   Keyboard::IsKeyDown;
	__asm        test   eax, eax;
	__asm        je     _T2b;
// LINE 129:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 1;
	__asm        mov    chReturnValue, al;
// LINE 130:
_T2b:
	__asm        push   0x11;
	__asm        mov    ecx, this;
	__asm        call   Keyboard::IsKeyDown;
	__asm        test   eax, eax;
	__asm        je     _T46;
// LINE 131:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 2;
	__asm        mov    chReturnValue, al;
// LINE 132:
_T46:
	__asm        push   0x12;
	__asm        mov    ecx, this;
	__asm        call   Keyboard::IsKeyDown;
	__asm        test   eax, eax;
	__asm        je     _T61;
// LINE 133:
	__asm        movsx  eax, chReturnValue;
	__asm        or     al, 4;
	__asm        mov    chReturnValue, al;
// LINE 136:
_T61:
	__asm        mov    al, chReturnValue;
	__asm        jmp    near ptr 0x00431F1A;
// LINE 137:
}

// FUNCTION: COPTER_D 0x00431f1f
char Keyboard::ConvertKeyToCharacter(unsigned char chKey, unsigned char chModifiers) {
	static const char chExtraArray[11] = { /* <data@0x00598360> */ };
	char chIndex;
	static const char chNumberArray[10] = { /* <data@0x00598350> */ };

// LINE 171:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x41;
	__asm        jl     _Tad;

	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5A;
	__asm        jg     _Tad;
// LINE 172:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-8], eax;
	__asm        push   0x14;
	__asm        call   Keyboard::IsToggleKeySet;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T5d;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T5d;

	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    _T89;
_T5d:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T7d;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T7d;

	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    _T89;
_T7d:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T89;
_T89:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Ta0;
// LINE 173:
	__asm        mov    al, chKey;
	__asm        jmp    _T302;
// LINE 174:
	__asm        jmp    _Tad;
// LINE 175:
_Ta0:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        add    eax, 0x20;
	__asm        jmp    _T302;
// LINE 180:
_Tad:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x30;
	__asm        jl     _T154;

	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x39;
	__asm        jg     _T154;
// LINE 181:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-0x14], eax;
	__asm        push   0x14;
	__asm        call   Keyboard::IsToggleKeySet;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T101;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T101;

	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    _T12d;
_T101:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T121;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T121;

	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    _T12d;
_T121:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T12d;
_T12d:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T14c;
// LINE 182:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        mov    al, [eax+0x598320];
	__asm        jmp    _T302;
// LINE 183:
	__asm        jmp    _T154;
// LINE 184:
_T14c:
	__asm        mov    al, chKey;
	__asm        jmp    _T302;
// LINE 189:
_T154:
	__asm        mov    chIndex, 0xFF;
// LINE 190:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x60;
	__asm        jne    _T16f;
// LINE 191:
	__asm        mov    chIndex, 0;
// LINE 192:
	__asm        jmp    _T250;
_T16f:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2D;
	__asm        jne    _T186;
// LINE 193:
	__asm        mov    chIndex, 1;
// LINE 194:
	__asm        jmp    _T250;
_T186:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x3D;
	__asm        jne    _T19d;
// LINE 195:
	__asm        mov    chIndex, 2;
// LINE 196:
	__asm        jmp    _T250;
_T19d:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5B;
	__asm        jne    _T1b4;
// LINE 197:
	__asm        mov    chIndex, 3;
// LINE 198:
	__asm        jmp    _T250;
_T1b4:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5D;
	__asm        jne    _T1cb;
// LINE 199:
	__asm        mov    chIndex, 4;
// LINE 200:
	__asm        jmp    _T250;
_T1cb:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x5C;
	__asm        jne    _T1e2;
// LINE 201:
	__asm        mov    chIndex, 5;
// LINE 202:
	__asm        jmp    _T250;
_T1e2:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x3B;
	__asm        jne    _T1f9;
// LINE 203:
	__asm        mov    chIndex, 6;
// LINE 204:
	__asm        jmp    _T250;
_T1f9:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x27;
	__asm        jne    _T210;
// LINE 205:
	__asm        mov    chIndex, 7;
// LINE 206:
	__asm        jmp    _T250;
_T210:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2C;
	__asm        jne    _T227;
// LINE 207:
	__asm        mov    chIndex, 8;
// LINE 208:
	__asm        jmp    _T250;
_T227:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2E;
	__asm        jne    _T23e;
// LINE 209:
	__asm        mov    chIndex, 9;
// LINE 210:
	__asm        jmp    _T250;
_T23e:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x2F;
	__asm        jne    _T250;
// LINE 211:
	__asm        mov    chIndex, 0xA;
// LINE 213:
_T250:
	__asm        movsx  eax, chIndex;
	__asm        test   eax, eax;
	__asm        jl     _T2e6;
// LINE 214:
	__asm        xor    eax, eax;
	__asm        mov    al, chModifiers;
	__asm        and    eax, 1;
	__asm        mov    [ebp-0x20], eax;
	__asm        push   0x14;
	__asm        call   Keyboard::IsToggleKeySet;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T294;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T294;

	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    _T2c0;
_T294:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T2b4;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T2b4;

	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    _T2c0;
_T2b4:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T2c0;
_T2c0:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T2de;
// LINE 215:
	__asm        movsx  eax, chIndex;
	__asm        mov    al, [eax+0x598360];
	__asm        jmp    _T302;
// LINE 216:
	__asm        jmp    _T2e6;
// LINE 217:
_T2de:
	__asm        mov    al, chKey;
	__asm        jmp    _T302;
// LINE 220:
_T2e6:
	__asm        xor    eax, eax;
	__asm        mov    al, chKey;
	__asm        cmp    eax, 0x20;
	__asm        jne    _T2fb;
// LINE 221:
	__asm        mov    al, 0x20;
	__asm        jmp    _T302;
// LINE 225:
_T2fb:
	__asm        xor    al, al;
	__asm        jmp    _T302;
// LINE 226:
_T302:
}

// FUNCTION: COPTER_D 0x00432226
int32_t Keyboard::IsToggleKeySet(unsigned char chToggleKey) {
// LINE 243:
	__asm        xor    eax, eax;
	__asm        mov    al, chToggleKey;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C386C];
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T27;
// LINE 244:
	__asm        mov    eax, 1;
	__asm        jmp    _T2e;
// LINE 245:
_T27:
	__asm        xor    eax, eax;
	__asm        jmp    _T2e;
// LINE 249:
_T2e:
}



// Contribution: 3:00000024-00000027 Module: 62, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597024
// $S5


// Contribution: 3:00001350-0000136a Module: 62, 8 byte alignment, initialized_data, read, write, 


// Contribution: 3:0002c4f0-0002c5ff Module: 62, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c34f0
// gKeyboard
