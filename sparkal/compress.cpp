// Module: Compress.obj
// Source: C:\Copter\source\sparkal\Compress.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CRLECompressedImage (forward reference);
class CRLECompressedImage{
public:
	static unsigned short * RLEGraphicsPool;
	// calltype: NearC
	static void * __ptr32 operator new(uint32_t);
	// calltype: NearC
	static void operator delete(void * __ptr32);
	void CRLECompressedImage(const class CFlatImage*, long, long, long, long, int32_t);
	void CRLECompressedImage(long);
	void ~CRLECompressedImage();
	unsigned long Lock();
	unsigned long Unlock();
	long GetHeight();
	long GetWidth();
	unsigned long CRLECompressedImage(class IFlatImage*, long, long, long, long, long, long);
	unsigned long CRLECompressedImage(class IFlatImage*, long, long);
protected:
	void * __ptr32 mhRLEImage;
	struct RLEHeader* mpLockedImage;
	unsigned long mLockCount;
};

// Type: long;
// Type: int32_t;
// Type: class ifstream;
class ifstream : public virtual ios, public istream, public virtual <indirect> ios
{
public:
	int32_t[0]* ios;
private:
	void ifstream(class ios&);
protected:
	void ifstream(const class istream&);
	void ifstream();
public:
	void ifstream(class streambuf*);
	virtual void ~istream();
	int32_t ipfx(int32_t);
	void isfx();
	class istream& ifstream(class streambuf*);
	class istream& ifstream(double&);
	class istream& ifstream(double&);
	class istream& ifstream(float&);
	class istream& ifstream(unsigned long&);
	class istream& ifstream(long&);
	class istream& ifstream(uint32_t&);
	class istream& ifstream(int32_t&);
	class istream& ifstream(unsigned short&);
	class istream& ifstream(short&);
	class istream& ifstream(char&);
	class istream& ifstream(unsigned char&);
	class istream& ifstream(char&);
	class istream& ifstream(char *);
	class istream& ifstream(unsigned char *);
	class istream& ifstream(char *);
	class istream& ifstream(LfPointer @ 0xbea8:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x1493
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x25f4:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ios
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x10d7
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = ctor ovlops fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ios&));
	class istream& ifstream(LfPointer @ 0xbf5c:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x149f
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0xbe88:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = istream
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x1491
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = ctor ovlops fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class istream&));
protected:
	class istream& ifstream(char *, int32_t, int32_t);
public:
	class istream& ifstream(class streambuf&, char);
	class istream& ifstream(char&);
	class istream& ifstream(unsigned char&);
	class istream& ifstream(char&);
	class istream& ifstream(char *, int32_t, char);
	class istream& ifstream(unsigned char *, int32_t, char);
	class istream& ifstream(char *, int32_t, char);
	int32_t ifstream();
	class istream& ifstream(char *, int32_t, char);
	class istream& ifstream(unsigned char *, int32_t, char);
	class istream& ifstream(char *, int32_t, char);
	class istream& ignore(int32_t, int32_t);
	class istream& ifstream(char *, int32_t);
	class istream& ifstream(unsigned char *, int32_t);
	class istream& ifstream(char *, int32_t);
	int32_t gcount();
	int32_t peek();
	class istream& putback(char);
	int32_t sync();
	class istream& ifstream(long, enum ios::seek_dir);
	class istream& ifstream(long);
	long tellg();
	void eatwhite();
protected:
	class istream& ifstream(const class istream&);
	class istream& ifstream(class streambuf*);
	int32_t do_ipfx(int32_t);
private:
	int32_t getint(char *);
	int32_t getdouble(char *, int32_t);
	int32_t _fGline;
	int32_t x_gcount;
public:
	void ifstream(int32_t, char *, int32_t);
	void ifstream(int32_t);
	void ifstream(char *, int32_t, int32_t);
	void ifstream();
	virtual void ~ifstream();
	class streambuf* setbuf(char *, int32_t);
	class filebuf* rdbuf();
	void attach(int32_t);
	int32_t fd();
	int32_t is_open();
	void open(char *, int32_t, int32_t);
	void close();
	int32_t setmode(int32_t);
};

// Type: char[13];
// Type: class ostrstream;
class ostrstream : public virtual ios, public ostream, public virtual <indirect> ios
{
public:
	int32_t[0]* ios;
	void ostrstream(class ios&);
	void ostrstream(const class ostream&);
	void ostrstream();
	void ostrstream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& ostrstream(class streambuf*);
	class ostream& ostrstream(void * __ptr32);
	class ostream& ostrstream(double);
	class ostream& ostrstream(double);
	class ostream& ostrstream(float);
	class ostream& ostrstream(unsigned long);
	class ostream& ostrstream(long);
	class ostream& ostrstream(uint32_t);
	class ostream& ostrstream(int32_t);
	class ostream& ostrstream(unsigned short);
	class ostream& ostrstream(short);
	class ostream& ostrstream(char);
	class ostream& ostrstream(unsigned char);
	class ostream& ostrstream(char);
	class ostream& ostrstream(char *);
	class ostream& ostrstream(unsigned char *);
	class ostream& ostrstream(char *);
	class ostream& ostrstream(LfPointer @ 0x75e80:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x40d6
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x756d4:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ios
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x4067
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ios&));
	class ostream& ostrstream(LfPointer @ 0x26c0:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ref 1
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x10e3
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x25dc:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = ostream
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x10d6
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	 (*)(class ostream&));
	class ostream& ostrstream(char);
	class ostream& ostrstream(unsigned char);
	class ostream& ostrstream(char);
	class ostream& ostrstream(char *, int32_t);
	class ostream& ostrstream(unsigned char *, int32_t);
	class ostream& ostrstream(char *, int32_t);
	class ostream& ostrstream(long, enum ios::seek_dir);
	class ostream& ostrstream(long);
	long tellp();
protected:
	class ostream& ostrstream(const class ostream&);
	class ostream& ostrstream(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
public:
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream();
	int32_t pcount();
	class strstreambuf* rdbuf();
	char * str();
};

// Type: unsigned long;
// Type: struct RLEHeader (forward reference);
// Type: void;
// Type: class CFlatImage (forward reference);
class CFlatImage : public IFlatImage
{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long CFlatImage(class IFlatImage*, long, long, long, long, long, long);
	unsigned long CFlatImage(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long CFlatImage(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long CFlatImage(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
public:
	void CFlatImage(class IFlatImage*, long, long, long, long);
	void CFlatImage(long, long, unsigned char);
	void CFlatImage();
	// vtable: 28
	intro void ~CFlatImage();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
protected:
	void * __ptr32 mBitsHandle;
};

// Type: class IFlatImage (forward reference);
public IFlatImage
// Type: unsigned char *;
// Type: short;
// Type: unsigned char;


// Contribution: 1:000a9800-000aa528 Module: 7, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004aa800
void CRLECompressedImage::CRLECompressedImage(long ResourceID) {
	int32_t InputMode;
	class ifstream InputFile;
	char[13] FileName;
	class ostrstream NameOut;

// LINE 47:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 51:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0xD;
	__asm        lea    eax, FileName[0];
	__asm        push   eax;
	__asm        lea    ecx, NameOut.ios;
	__asm        call   0x0056C780;
// LINE 52:
	__asm        push   0x59A9D8;
	__asm        lea    ecx, NameOut.ios;
	__asm        call   0x00569960;
	__asm        mov    eax, NameOut.ios;
	__asm        mov    eax, [eax+4];
	__asm        lea    eax, [ebp+eax-0x58];
	__asm        mov    [ebp-0xE0], eax;
// LINE 53:
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    eax, [eax+0x30];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    dword ptr [eax+0x30], 5;
	__asm        jmp    near ptr 0x004AA888;
	__asm        mov    eax, NameOut.ios;
	__asm        mov    eax, [eax+4];
	__asm        lea    eax, [ebp+eax-0x58];
	__asm        mov    [ebp-0xE8], eax;
// LINE 54:
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    al, [eax+0x2C];
	__asm        mov    [ebp-0xE4], al;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    byte ptr [eax+0x2C], 0x30;
	__asm        jmp    near ptr 0x004AA8B6;
	__asm        mov    eax, NameOut.ios;
	__asm        mov    eax, [eax+4];
	__asm        lea    eax, [ebp+eax-0x58];
	__asm        mov    [ebp-0xF0], eax;
// LINE 55:
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0xEC], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    dword ptr [eax+0x24], 0x14;
	__asm        jmp    near ptr 0x004AA8E7;
	__asm        push   0x59A9DC;
	__asm        mov    eax, ResourceID;
	__asm        push   eax;
	__asm        lea    ecx, NameOut.ios;
	__asm        call   0x00570E80;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0xD8], eax;
// LINE 56:
	__asm        jmp    near ptr 0x004AA90A;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        call   0x0056A670;
// LINE 58:
	__asm        mov    InputMode, 0x81;
// LINE 60:
	__asm        or     InputMode, 0x20;
// LINE 65:
	__asm        push   1;
	__asm        mov    eax, ds:[0x593E30];
	__asm        push   eax;
	__asm        mov    eax, InputMode;
	__asm        push   eax;
	__asm        lea    eax, FileName[0];
	__asm        push   eax;
	__asm        lea    ecx, InputFile.ios;
	__asm        call   0x0056FC90;
// LINE 66:
	__asm        jmp    near ptr 0x004AA94B;
	__asm        jmp    near ptr 0x004AA950;
	__asm        mov    eax, InputFile.ios;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [ebp+eax-0xC0];
	__asm        cmp    dword ptr [eax+0x4C], 0xFFFFFFFF;
	__asm        je     near ptr 0x004AA96F;
	__asm        jmp    near ptr 0x004AA974;
	__asm        jmp    near ptr 0x004AAB75;
	__asm        jmp    near ptr 0x004AA986;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     near ptr 0x004AAB75;
// LINE 70:
// Block start:
	unsigned long ImageByteCount;
	__asm        push   4;
	__asm        lea    eax, ImageByteCount;
	__asm        push   eax;
	__asm        lea    ecx, InputFile.ios;
	__asm        call   0x00570490;
// LINE 71:
	__asm        jmp    near ptr 0x004AA99F;
	__asm        mov    eax, ImageByteCount;
	__asm        mov    [ebp-0x108], eax;
// LINE 76:
	__asm        mov    word ptr [ebp-0x104], 0;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x004AA9CE;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        jne    near ptr 0x004AA9EA;
	__asm        push   0x12A;
	__asm        push   0x597444;
	__asm        push   0x59A090;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AA9EF;
	__asm        jmp    near ptr 0x004AA9EF;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        push   0x42;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x004AAA1E;
	__asm        mov    word ptr [ebp-0x104], 0xFFFF;
	__asm        jmp    near ptr 0x004AAA23;
// LINE 77:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004AAB75;
// LINE 79:
// Block start:
	struct RLEHeader* pCompressedImage;
	__asm        mov    pCompressedImage, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x100], eax;
// LINE 80:
	__asm        mov    word ptr [ebp-0xFC], 0;
	__asm        cmp    dword ptr [ebp-0x100], 0;
	__asm        je     near ptr 0x004AAA65;
	__asm        jmp    near ptr 0x004AAA81;
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAA86;
	__asm        jmp    near ptr 0x004AAA86;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    pCompressedImage, eax;
	__asm        cmp    pCompressedImage, 0;
	__asm        jne    near ptr 0x004AAAAF;
	__asm        mov    word ptr [ebp-0xFC], 0xFFFF;
	__asm        jmp    near ptr 0x004AAAB4;
// LINE 81:
	__asm        cmp    pCompressedImage, 0;
	__asm        je     near ptr 0x004AAB75;
// LINE 83:
	__asm        mov    eax, ImageByteCount;
	__asm        push   eax;
	__asm        mov    eax, pCompressedImage;
	__asm        push   eax;
	__asm        lea    ecx, InputFile.ios;
	__asm        call   0x00570490;
// LINE 84:
	__asm        jmp    near ptr 0x004AAADF;
	__asm        mov    eax, ImageByteCount;
	__asm        cmp    InputFile.x_gcount, eax;
	__asm        je     near ptr 0x004AAB0A;
	__asm        push   0x54;
	__asm        push   0x59A9E4;
	__asm        push   0x59AA0C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAB0F;
	__asm        jmp    near ptr 0x004AAB0F;
// LINE 86:
	__asm        mov    eax, pCompressedImage;
	__asm        push   eax;
	__asm        call   0x004AB063;
	__asm        add    esp, 4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xF8], eax;
// LINE 87:
	__asm        mov    word ptr [ebp-0xF4], 0;
	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        jne    near ptr 0x004AAB5E;
	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAB63;
	__asm        jmp    near ptr 0x004AAB63;
	__asm        mov    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    near ptr 0x004AAB75;
// LINE 91:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x004AAB7A;
	__asm        lea    ecx, InputFile.<ifstream+0x0c>;
	__asm        call   0x00570050;
	__asm        lea    ecx, InputFile.<ifstream+0x0c>;
	__asm        call   0x0056B140;
	__asm        jmp    near ptr 0x004AAB95;
	__asm        lea    ecx, NameOut.<ostrstream+0x08>;
	__asm        call   0x0056C8D0;
	__asm        lea    ecx, NameOut.<ostrstream+0x08>;
	__asm        call   0x0056B140;
	__asm        jmp    near ptr 0x004AABAA;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004aabb7
void CRLECompressedImage::CRLECompressedImage(const class CFlatImage* pImage, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom, int32_t TransparentIndex) {
// LINE 97:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 104:
	__asm        jmp    near ptr 0x004AABDB;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x004aabe5
void CRLECompressedImage::~CRLECompressedImage() {
// LINE 110:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 111:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004AAC17;
	__asm        push   0x6F;
	__asm        push   0x59AA38;
	__asm        push   0x59AA60;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAC1C;
	__asm        jmp    near ptr 0x004AAC1C;
// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004AAC70;
// LINE 114:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x004AAC5C;
	__asm        push   0x134;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAC61;
	__asm        jmp    near ptr 0x004AAC61;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        jmp    near ptr 0x004AAC70;
// LINE 115:
	__asm        jmp    near ptr 0x004AAC75;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aac7a
unsigned long CRLECompressedImage::Lock() {
// LINE 121:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x004AAD24;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004AAD24;
// LINE 123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
// LINE 124:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004AACC3;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        jne    near ptr 0x004AACDF;
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AACE4;
	__asm        jmp    near ptr 0x004AACE4;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004AAD07;
	__asm        mov    word ptr [ebp-4], 0xFFFF;
	__asm        jmp    near ptr 0x004AAD0C;
// LINE 125:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AAD1F;
// LINE 126:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+8];
// LINE 128:
	__asm        jmp    near ptr 0x004AAD2A;
// LINE 129:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+8];
// LINE 131:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x004AAD35;
// LINE 132:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aad3a
unsigned long CRLECompressedImage::Unlock() {
// LINE 135:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 136:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        ja     near ptr 0x004AAD6F;
	__asm        push   0x88;
	__asm        push   0x59AA70;
	__asm        push   0x59AA98;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAD74;
	__asm        jmp    near ptr 0x004AAD74;
// LINE 138:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 1;
	__asm        jne    near ptr 0x004AADEC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x004AADEC;
// LINE 139:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
// LINE 140:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x004AADC1;
	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AADC6;
	__asm        jmp    near ptr 0x004AADC6;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    near ptr 0x004AADD5;
	__asm        movsx  eax, word ptr [ebp-4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004AADE7;
// LINE 141:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
// LINE 143:
	__asm        jmp    near ptr 0x004AADF2;
// LINE 144:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+8];
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x004AADFD;
// LINE 147:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aae02
unsigned long CRLECompressedImage::Compose(class IFlatImage* pDest, long DestLeft, long DestTop, long ClipLeft, long ClipTop, long ClipRight, long ClipBottom) {
// LINE 156:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 157:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        ja     near ptr 0x004AAE37;
	__asm        push   0x9D;
	__asm        push   0x59AAA8;
	__asm        push   0x59AAD0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAE3C;
	__asm        jmp    near ptr 0x004AAE3C;
// LINE 158:
	__asm        cmp    pDest, 0;
	__asm        jne    near ptr 0x004AAE62;
	__asm        push   0x9E;
	__asm        push   0x59AAE0;
	__asm        push   0x59AB08;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAE67;
	__asm        jmp    near ptr 0x004AAE67;
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AB055;
// LINE 162:
// Block start:
	int32_t Left;
	unsigned char * pCompressedBits;
	short LeftClipAmount;
	int32_t Top;
	int32_t Right;
	unsigned char TransparentColor;
	short Width;
	short Height;
	int32_t Bottom;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        add    eax, DestLeft;
	__asm        mov    Left, eax;
// LINE 163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        add    eax, DestTop;
	__asm        mov    Top, eax;
// LINE 165:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax];
	__asm        add    eax, Left;
	__asm        mov    Right, eax;
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        add    eax, Top;
	__asm        mov    Bottom, eax;
// LINE 169:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, 8;
	__asm        mov    pCompressedBits, eax;
// LINE 171:
	__asm        mov    eax, pCompressedBits;
	__asm        mov    al, [eax];
	__asm        mov    TransparentColor, al;
	__asm        inc    pCompressedBits;
// LINE 173:
	__asm        mov    eax, Top;
	__asm        cmp    ClipTop, eax;
	__asm        jle    near ptr 0x004AAEE9;
// LINE 176:
	__asm        mov    eax, pCompressedBits;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        add    pCompressedBits, ecx;
// LINE 177:
	__asm        inc    Top;
// LINE 178:
	__asm        jmp    near ptr 0x004AAECA;
// LINE 180:
	__asm        mov    eax, Bottom;
	__asm        cmp    ClipBottom, eax;
	__asm        jge    near ptr 0x004AAEFB;
// LINE 181:
	__asm        mov    eax, ClipBottom;
	__asm        mov    Bottom, eax;
// LINE 184:
	__asm        mov    LeftClipAmount, 0;
// LINE 185:
	__asm        mov    eax, Left;
	__asm        cmp    ClipLeft, eax;
	__asm        jle    near ptr 0x004AAF1D;
// LINE 187:
	__asm        mov    eax, ClipLeft;
	__asm        sub    eax, Left;
	__asm        mov    LeftClipAmount, ax;
// LINE 188:
	__asm        mov    eax, ClipLeft;
	__asm        mov    Left, eax;
// LINE 191:
	__asm        mov    eax, Right;
	__asm        cmp    ClipRight, eax;
	__asm        jge    near ptr 0x004AAF2F;
// LINE 192:
	__asm        mov    eax, ClipRight;
	__asm        mov    Right, eax;
// LINE 195:
	__asm        mov    eax, Bottom;
	__asm        sub    eax, Top;
	__asm        mov    Height, ax;
// LINE 196:
	__asm        mov    eax, Right;
	__asm        sub    eax, Left;
	__asm        mov    Width, ax;
// LINE 199:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, Height;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x004AAF75;
	__asm        push   0xC7;
	__asm        push   0x59AB10;
	__asm        push   0x59AB38;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAF7A;
	__asm        jmp    near ptr 0x004AAF7A;
// LINE 200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, Width;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x004AAFAB;
	__asm        push   0xC8;
	__asm        push   0x59AB58;
	__asm        push   0x59AB80;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004AAFB0;
	__asm        jmp    near ptr 0x004AAFB0;
// LINE 202:
	__asm        movsx  eax, Height;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x004AB055;
	__asm        movsx  eax, Width;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x004AB055;
// LINE 204:
// Block start:
	unsigned char * pBits;
	__asm        jmp    near ptr 0x004AAFCD;
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pBits, eax;
// LINE 205:
	__asm        cmp    pBits, 0;
	__asm        je     near ptr 0x004AB055;
// LINE 207:
// Block start:
	long DestStride;
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    DestStride, eax;
	__asm        jmp    near ptr 0x004AAFEE;
// LINE 209:
	__asm        mov    eax, Top;
	__asm        imul   eax, DestStride;
	__asm        add    eax, Left;
	__asm        add    pBits, eax;
// LINE 211:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, Width;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x004AB031;
// LINE 213:
	__asm        mov    eax, reinterpret_cast<uint32_t>(TransparentColor);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(Height);
	__asm        push   eax;
	__asm        mov    eax, pCompressedBits;
	__asm        push   eax;
	__asm        mov    eax, DestStride;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   0x004AB073;
	__asm        add    esp, 0x14;
// LINE 214:
	__asm        jmp    near ptr 0x004AB055;
// LINE 217:
	__asm        mov    eax, reinterpret_cast<uint32_t>(TransparentColor);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(Height);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(Width);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LeftClipAmount);
	__asm        push   eax;
	__asm        mov    eax, pCompressedBits;
	__asm        push   eax;
	__asm        mov    eax, DestStride;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   0x004AB1F7;
	__asm        add    esp, 0x1C;
// LINE 223:
// Block end:
// Block end:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AB05C;
// LINE 224:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x004ab063
void ConvertCompressedByteOrdering(struct RLEHeader* pCompressedImage) {
// LINE 232:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 312:
	__asm        jmp    near ptr 0x004AB06E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ab073
void RLEDecompressUnclippedX(unsigned char * pDestBuffer, long DestStride, unsigned char * pSource, short Height, unsigned char TransparentColor) {
	unsigned char * pDestinationEdge;
	unsigned char * pDest;
	unsigned char * pNextSourceLine;

// LINE 322:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 323:
	__asm        mov    eax, pDestBuffer;
	__asm        mov    pDestinationEdge, eax;
// LINE 324:
	__asm        mov    eax, pDestinationEdge;
	__asm        mov    pDest, eax;
// LINE 327:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        add    ecx, pSource;
	__asm        mov    pNextSourceLine, ecx;
// LINE 328:
	__asm        add    pSource, 2;
// LINE 330:
	__asm        movsx  eax, Height;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AB1ED;
// LINE 336:
// Block start:
	int32_t counter;
	unsigned char token;
	unsigned char data;
	__asm        mov    eax, pSource;
	__asm        cmp    pNextSourceLine, eax;
	__asm        jne    near ptr 0x004AB0D9;
// LINE 340:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        add    ecx, pSource;
	__asm        mov    pNextSourceLine, ecx;
// LINE 341:
	__asm        add    pSource, 2;
// LINE 344:
	__asm        mov    eax, DestStride;
	__asm        add    pDestinationEdge, eax;
// LINE 345:
	__asm        mov    eax, pDestinationEdge;
	__asm        mov    pDest, eax;
// LINE 347:
	__asm        dec    Height;
// LINE 349:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 352:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    token, al;
	__asm        inc    pSource;
// LINE 353:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    data, al;
	__asm        inc    pSource;
// LINE 355:
	__asm        xor    eax, eax;
	__asm        mov    al, token;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004AB1C1;
// LINE 358:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 361:
	__asm        mov    eax, counter;
	__asm        push   eax;
	__asm        mov    eax, pSource;
	__asm        push   eax;
	__asm        mov    eax, pDest;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 362:
	__asm        mov    eax, counter;
	__asm        add    pSource, eax;
// LINE 363:
	__asm        mov    eax, counter;
	__asm        add    pDest, eax;
// LINE 364:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 367:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 368:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    data, al;
	__asm        inc    pSource;
// LINE 371:
	__asm        mov    eax, counter;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        push   eax;
	__asm        mov    eax, pDest;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 372:
	__asm        mov    eax, counter;
	__asm        add    pDest, eax;
// LINE 373:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 376:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        add    pDest, eax;
// LINE 377:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 380:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 383:
	__asm        mov    eax, counter;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    counter;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004AB1B2;
// LINE 385:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, TransparentColor;
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x004AB1A7;
// LINE 386:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pDest;
	__asm        mov    [ecx], al;
// LINE 388:
	__asm        inc    pDest;
// LINE 389:
	__asm        inc    pSource;
// LINE 390:
	__asm        jmp    near ptr 0x004AB176;
// LINE 391:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 395:
	__asm        jmp    near ptr 0x004AB1E8;
// LINE 396:
	__asm        jmp    near ptr 0x004AB1E8;
	__asm        dec    dword ptr [ebp-0x20];
	__asm        cmp    dword ptr [ebp-0x20], 3;
	__asm        ja     near ptr 0x004AB1E8;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    dword ptr [eax*4+0x4AB1D8];
	__asm        cld;
	__asm        mov    al, 0x4A;
	__asm        add    [edx], ch;
	__asm        mov    cl, 0x4A;
	__asm        add    [edi-0x4F], bl;
	__asm        dec    edx;
	__asm        add    [ebp-0x4F], ch;
	__asm        dec    edx;
	__asm        (bad);
// LINE 398:
// Block end:
	__asm        jmp    near ptr 0x004AB09A;
// LINE 399:
	__asm        jmp    near ptr 0x004AB1F2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004ab1f7
void RLEDecompressClippedX(unsigned char * pDestBuffer, long DestStride, unsigned char * pSource, short LeftClip, short Width, short Height, unsigned char TransparentColor) {
	short PixelCount;
	unsigned char * pDestinationEdge;
	unsigned char * pDest;
	unsigned char * pNextSourceLine;

// LINE 404:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 405:
	__asm        mov    eax, pDestBuffer;
	__asm        mov    pDestinationEdge, eax;
// LINE 406:
	__asm        mov    eax, pDestinationEdge;
	__asm        mov    pDest, eax;
// LINE 409:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        add    ecx, pSource;
	__asm        mov    pNextSourceLine, ecx;
// LINE 410:
	__asm        add    pSource, 2;
// LINE 413:
	__asm        movsx  eax, LeftClip;
	__asm        neg    eax;
	__asm        mov    PixelCount, ax;
// LINE 415:
	__asm        movsx  eax, Height;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004AB51F;
// LINE 421:
// Block start:
	int32_t counter;
	unsigned char token;
	unsigned char data;
	__asm        mov    eax, pSource;
	__asm        cmp    pNextSourceLine, eax;
	__asm        jne    near ptr 0x004AB271;
// LINE 425:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        add    ecx, pSource;
	__asm        mov    pNextSourceLine, ecx;
// LINE 426:
	__asm        add    pSource, 2;
// LINE 429:
	__asm        mov    eax, DestStride;
	__asm        add    pDestinationEdge, eax;
// LINE 430:
	__asm        mov    eax, pDestinationEdge;
	__asm        mov    pDest, eax;
// LINE 432:
	__asm        dec    Height;
// LINE 433:
	__asm        movsx  eax, LeftClip;
	__asm        neg    eax;
	__asm        mov    PixelCount, ax;
// LINE 435:
	__asm        jmp    near ptr 0x004AB51A;
// LINE 439:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    token, al;
	__asm        inc    pSource;
// LINE 440:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    data, al;
	__asm        inc    pSource;
// LINE 442:
	__asm        xor    eax, eax;
	__asm        mov    al, token;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004AB4DD;
// LINE 445:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 448:
	__asm        movsx  eax, PixelCount;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x004AB2F3;
// LINE 451:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        cmp    eax, counter;
	__asm        jl     near ptr 0x004AB2D5;
// LINE 454:
	__asm        mov    eax, counter;
	__asm        add    pSource, eax;
// LINE 455:
	__asm        movsx  eax, PixelCount;
	__asm        add    eax, counter;
	__asm        mov    PixelCount, ax;
// LINE 456:
	__asm        mov    counter, 0;
// LINE 458:
	__asm        jmp    near ptr 0x004AB2F3;
// LINE 461:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        add    pSource, eax;
// LINE 462:
	__asm        xor    eax, eax;
	__asm        movsx  ecx, PixelCount;
	__asm        neg    ecx;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    counter, eax;
// LINE 463:
	__asm        mov    PixelCount, 0;
// LINE 470:
	__asm        cmp    counter, 0;
	__asm        je     near ptr 0x004AB329;
	__asm        movsx  eax, Width;
	__asm        movsx  ecx, PixelCount;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x004AB329;
// LINE 472:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pDest;
	__asm        mov    [ecx], al;
	__asm        inc    pSource;
	__asm        inc    pDest;
// LINE 473:
	__asm        dec    counter;
// LINE 474:
	__asm        inc    PixelCount;
// LINE 475:
	__asm        jmp    near ptr 0x004AB2F3;
// LINE 476:
	__asm        jmp    near ptr 0x004AB504;
// LINE 479:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 480:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    data, al;
	__asm        inc    pSource;
// LINE 482:
	__asm        movsx  eax, PixelCount;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x004AB389;
// LINE 485:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        cmp    eax, counter;
	__asm        jl     near ptr 0x004AB374;
// LINE 488:
	__asm        movsx  eax, PixelCount;
	__asm        add    eax, counter;
	__asm        mov    PixelCount, ax;
// LINE 489:
	__asm        mov    counter, 0;
// LINE 491:
	__asm        jmp    near ptr 0x004AB389;
// LINE 494:
	__asm        xor    eax, eax;
	__asm        movsx  ecx, PixelCount;
	__asm        neg    ecx;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    counter, eax;
// LINE 495:
	__asm        mov    PixelCount, 0;
// LINE 501:
	__asm        cmp    counter, 0;
	__asm        je     near ptr 0x004AB3BA;
	__asm        movsx  eax, Width;
	__asm        movsx  ecx, PixelCount;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x004AB3BA;
// LINE 503:
	__asm        mov    al, data;
	__asm        mov    ecx, pDest;
	__asm        mov    [ecx], al;
	__asm        inc    pDest;
// LINE 504:
	__asm        dec    counter;
// LINE 505:
	__asm        inc    PixelCount;
// LINE 506:
	__asm        jmp    near ptr 0x004AB389;
// LINE 507:
	__asm        jmp    near ptr 0x004AB504;
// LINE 510:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 511:
	__asm        movsx  eax, PixelCount;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x004AB40F;
// LINE 514:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        cmp    eax, counter;
	__asm        jl     near ptr 0x004AB3FA;
// LINE 517:
	__asm        movsx  eax, PixelCount;
	__asm        add    eax, counter;
	__asm        mov    PixelCount, ax;
// LINE 518:
	__asm        mov    counter, 0;
// LINE 520:
	__asm        jmp    near ptr 0x004AB40F;
// LINE 523:
	__asm        xor    eax, eax;
	__asm        movsx  ecx, PixelCount;
	__asm        neg    ecx;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    counter, eax;
// LINE 524:
	__asm        mov    PixelCount, 0;
// LINE 528:
	__asm        mov    eax, counter;
	__asm        add    pDest, eax;
// LINE 529:
	__asm        movsx  eax, PixelCount;
	__asm        add    eax, counter;
	__asm        mov    PixelCount, ax;
// LINE 530:
	__asm        jmp    near ptr 0x004AB504;
// LINE 533:
	__asm        xor    eax, eax;
	__asm        mov    al, data;
	__asm        inc    eax;
	__asm        mov    counter, eax;
// LINE 536:
	__asm        movsx  eax, PixelCount;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x004AB484;
// LINE 539:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        cmp    eax, counter;
	__asm        jl     near ptr 0x004AB466;
// LINE 542:
	__asm        mov    eax, counter;
	__asm        add    pSource, eax;
// LINE 543:
	__asm        movsx  eax, PixelCount;
	__asm        add    eax, counter;
	__asm        mov    PixelCount, ax;
// LINE 544:
	__asm        mov    counter, 0;
// LINE 546:
	__asm        jmp    near ptr 0x004AB484;
// LINE 549:
	__asm        movsx  eax, PixelCount;
	__asm        neg    eax;
	__asm        add    pSource, eax;
// LINE 550:
	__asm        xor    eax, eax;
	__asm        movsx  ecx, PixelCount;
	__asm        neg    ecx;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    counter, eax;
// LINE 551:
	__asm        mov    PixelCount, 0;
// LINE 558:
	__asm        cmp    counter, 0;
	__asm        je     near ptr 0x004AB4CE;
	__asm        movsx  eax, Width;
	__asm        movsx  ecx, PixelCount;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x004AB4CE;
// LINE 560:
	__asm        mov    eax, pSource;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, TransparentColor;
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x004AB4BC;
// LINE 561:
	__asm        mov    eax, pSource;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pDest;
	__asm        mov    [ecx], al;
// LINE 563:
	__asm        inc    pDest;
// LINE 564:
	__asm        inc    pSource;
// LINE 565:
	__asm        dec    counter;
// LINE 566:
	__asm        inc    PixelCount;
// LINE 567:
	__asm        jmp    near ptr 0x004AB484;
// LINE 568:
	__asm        jmp    near ptr 0x004AB504;
// LINE 572:
	__asm        jmp    near ptr 0x004AB504;
// LINE 573:
	__asm        jmp    near ptr 0x004AB504;
	__asm        dec    dword ptr [ebp-0x20];
	__asm        cmp    dword ptr [ebp-0x20], 3;
	__asm        ja     near ptr 0x004AB504;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    dword ptr [eax*4+0x4AB4F4];
	__asm        xchg   esp, eax;
	__asm        mov    dl, 0x4A;
	__asm        add    [esi], ch;
	__asm        mov    bl, 0x4A;
	__asm        add    [edi+0x25004AB3], bh;
	__asm        mov    ah, 0x4A;
	__asm        (bad);
// LINE 576:
	__asm        movsx  eax, Width;
	__asm        movsx  ecx, PixelCount;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x004AB51A;
// LINE 577:
	__asm        mov    eax, pNextSourceLine;
	__asm        mov    pSource, eax;
// LINE 579:
// Block end:
	__asm        jmp    near ptr 0x004AB228;
// LINE 580:
	__asm        jmp    near ptr 0x004AB524;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 3:000039d4-00003b9d Module: 7, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a9d4
// CRLECompressedImage::RLEGraphicsPool
