// Module: Direct.obj
// Source: C:\Copter\source\sparkal\Direct.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class DirectoryEntry (forward reference);
class DirectoryEntry{
public:
	void DirectoryEntry(class Directory*, class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(class basic_string<char>&);
	int32_t GetEntryMinusExtension(class basic_string<char>&);
	class Directory* directoryParent;
	class basic_string<char> sName;
	long lType;
};

// Type: void;

// Type: class Directory (forward reference);

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: uint32_t;

// Type: int32_t;

// Type: unsigned long;

// Type: void * __ptr32;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class DirectoryEntry;
class DirectoryEntry{
public:
	void DirectoryEntry(class Directory*, class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(class basic_string<char>&);
	int32_t GetEntryMinusExtension(class basic_string<char>&);
	class Directory* directoryParent;
	class basic_string<char> sName;
	long lType;
};

// Type: struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAA{
	unsigned long dwFileAttributes;
	struct _FILETIME ftCreationTime;
	struct _FILETIME ftLastAccessTime;
	struct _FILETIME ftLastWriteTime;
	unsigned long nFileSizeHigh;
	unsigned long nFileSizeLow;
	unsigned long dwReserved0;
	unsigned long dwReserved1;
	char cFileName[260];
	char cAlternateFileName[14];
};

// Type: class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class basic_string<char> data;
	};
protected:
	static class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static class allocator<basic_string<char>> value_allocator;
	using value_type = class basic_string<char>;
	using value_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using list_node_allocator_type = class allocator<list<basic_string<char>>::list_node>;
	using link_type = struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<basic_string<char>>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = struct list<basic_string<char>>::list_node_buffer*;
protected:
	static class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static struct list<basic_string<char>>::list_node_buffer* buffer_list;
	static struct list<basic_string<char>>::list_node* free_list;
	static struct list<basic_string<char>>::list_node* next_avail;
	static struct list<basic_string<char>>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<basic_string<char>>::list_node* get_node();
	void put_node(struct list<basic_string<char>>::list_node*);
	struct list<basic_string<char>>::list_node* node;
	uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::iterator&);
		class basic_string<char>& operator*();
		class list<basic_string<char>>::iterator operator++(int32_t);
		class list<basic_string<char>>::iterator& operator++();
		class list<basic_string<char>>::iterator operator--(int32_t);
		class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void const_iterator(const class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::const_iterator&);
		const class basic_string<char>& operator*();
		class list<basic_string<char>>::const_iterator operator++(int32_t);
		class list<basic_string<char>>::const_iterator& operator++();
		class list<basic_string<char>>::const_iterator operator--(int32_t);
		class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const class list<basic_string<char>>&);
	void list<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator begin();
	class list<basic_string<char>>::iterator begin();
	class list<basic_string<char>>::const_iterator end();
	class list<basic_string<char>>::iterator end();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& front();
	class basic_string<char>& front();
	const class basic_string<char>& back();
	class basic_string<char>& back();
	void swap(class list<basic_string<char>>&);
	void insert(class list<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	void insert(class list<basic_string<char>>::iterator, class list<basic_string<char>>::const_iterator, class list<basic_string<char>>::const_iterator);
	void insert(class list<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	class list<basic_string<char>>::iterator insert(class list<basic_string<char>>::iterator, const class basic_string<char>&);
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void erase(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void erase(class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	class list<basic_string<char>>& operator=(const class list<basic_string<char>>&);
protected:
	void transfer(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
public:
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator);
	void splice(class list<basic_string<char>>::iterator, class list<basic_string<char>>&);
	void remove(const class basic_string<char>&);
	void unique();
	void merge(class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: class list<DirectoryEntry>::iterator;
class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
{
protected:
	struct list<DirectoryEntry>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<DirectoryEntry>::list_node*);
public:
	int32_t operator==(const class list<DirectoryEntry>::iterator&);
	class DirectoryEntry& operator*();
	class list<DirectoryEntry>::iterator operator++(int32_t);
	class list<DirectoryEntry>::iterator& operator++();
	class list<DirectoryEntry>::iterator operator--(int32_t);
	class list<DirectoryEntry>::iterator& operator--();
};

// Type: char;

// Type: class list<DirectoryEntry>::iterator (forward reference);
class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
{
protected:
	struct list<DirectoryEntry>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<DirectoryEntry>::list_node*);
public:
	int32_t operator==(const class list<DirectoryEntry>::iterator&);
	class DirectoryEntry& operator*();
	class list<DirectoryEntry>::iterator operator++(int32_t);
	class list<DirectoryEntry>::iterator& operator++();
	class list<DirectoryEntry>::iterator operator--(int32_t);
	class list<DirectoryEntry>::iterator& operator--();
};

// Type: class list<DirectoryEntry> (forward reference);
class list<DirectoryEntry>{
	using void_pointer = void * __ptr32;
	struct list<DirectoryEntry>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		class DirectoryEntry data;
	};
protected:
	static class allocator<list<DirectoryEntry>::list_node> list_node_allocator;
	static class allocator<DirectoryEntry> value_allocator;
	using value_type = class DirectoryEntry;
	using value_allocator_type = class allocator<DirectoryEntry>;
	using pointer = class DirectoryEntry*;
	using reference = class DirectoryEntry&;
	using const_reference = const class DirectoryEntry&;
	using list_node_allocator_type = class allocator<list<DirectoryEntry>::list_node>;
	using link_type = struct list<DirectoryEntry>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<DirectoryEntry>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<DirectoryEntry>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<DirectoryEntry>::list_node_buffer>;
	using buffer_pointer = struct list<DirectoryEntry>::list_node_buffer*;
protected:
	static class allocator<list<DirectoryEntry>::list_node_buffer> buffer_allocator;
	static struct list<DirectoryEntry>::list_node_buffer* buffer_list;
	static struct list<DirectoryEntry>::list_node* free_list;
	static struct list<DirectoryEntry>::list_node* next_avail;
	static struct list<DirectoryEntry>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<DirectoryEntry>::list_node* get_node();
	void put_node(struct list<DirectoryEntry>::list_node*);
	struct list<DirectoryEntry>::list_node* node;
	uint32_t length;
	class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
	{
	protected:
		struct list<DirectoryEntry>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const class list<DirectoryEntry>::iterator&);
		class DirectoryEntry& operator*();
		class list<DirectoryEntry>::iterator operator++(int32_t);
		class list<DirectoryEntry>::iterator& operator++();
		class list<DirectoryEntry>::iterator operator--(int32_t);
		class list<DirectoryEntry>::iterator& operator--();
	};
	class list<DirectoryEntry>::const_iterator : public bidirectional_iterator<DirectoryEntry,int>
	{
	protected:
		struct list<DirectoryEntry>::list_node* node;
	public:
		void const_iterator(const class list<DirectoryEntry>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const class list<DirectoryEntry>::const_iterator&);
		const class DirectoryEntry& operator*();
		class list<DirectoryEntry>::const_iterator operator++(int32_t);
		class list<DirectoryEntry>::const_iterator& operator++();
		class list<DirectoryEntry>::const_iterator operator--(int32_t);
		class list<DirectoryEntry>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int>;
public:
	void list<DirectoryEntry>(const class list<DirectoryEntry>&);
	void list<DirectoryEntry>(const class DirectoryEntry*, const class DirectoryEntry*);
	void list<DirectoryEntry>(uint32_t, const class DirectoryEntry&);
	void list<DirectoryEntry>();
	class list<DirectoryEntry>::const_iterator begin();
	class list<DirectoryEntry>::iterator begin();
	class list<DirectoryEntry>::const_iterator end();
	class list<DirectoryEntry>::iterator end();
	class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rbegin();
	class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rbegin();
	class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rend();
	class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class DirectoryEntry& front();
	class DirectoryEntry& front();
	const class DirectoryEntry& back();
	class DirectoryEntry& back();
	void swap(class list<DirectoryEntry>&);
	void insert(class list<DirectoryEntry>::iterator, uint32_t, const class DirectoryEntry&);
	void insert(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>::const_iterator, class list<DirectoryEntry>::const_iterator);
	void insert(class list<DirectoryEntry>::iterator, const class DirectoryEntry*, const class DirectoryEntry*);
	class list<DirectoryEntry>::iterator insert(class list<DirectoryEntry>::iterator, const class DirectoryEntry&);
	void push_front(const class DirectoryEntry&);
	void push_back(const class DirectoryEntry&);
	void erase(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>::iterator);
	void erase(class list<DirectoryEntry>::iterator);
	void pop_front();
	void pop_back();
	void ~list<DirectoryEntry>();
	class list<DirectoryEntry>& operator=(const class list<DirectoryEntry>&);
protected:
	void transfer(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>::iterator, class list<DirectoryEntry>::iterator);
public:
	void splice(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>&, class list<DirectoryEntry>::iterator, class list<DirectoryEntry>::iterator);
	void splice(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>&, class list<DirectoryEntry>::iterator);
	void splice(class list<DirectoryEntry>::iterator, class list<DirectoryEntry>&);
	void remove(const class DirectoryEntry&);
	void unique();
	void merge(class list<DirectoryEntry>&);
	void reverse();
	void sort();
};

// Type: struct list<DirectoryEntry>::list_node (forward reference);

// Type: class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator operator++(int32_t);
	class list<basic_string<char>>::iterator& operator++();
	class list<basic_string<char>>::iterator operator--(int32_t);
	class list<basic_string<char>>::iterator& operator--();
};

// Type: struct list<basic_string<char>>::list_node (forward reference);

// Type: class list<basic_string<char>>::iterator (forward reference);
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator operator++(int32_t);
	class list<basic_string<char>>::iterator& operator++();
	class list<basic_string<char>>::iterator operator--(int32_t);
	class list<basic_string<char>>::iterator& operator--();
};

// Type: struct bidirectional_iterator<DirectoryEntry,int>;
struct bidirectional_iterator<DirectoryEntry,int>{
};

// Type: struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{
};



// Contribution: 1:00080b20-00085dca Module: 29, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00481b20
void DirectoryEntry::DirectoryEntry() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00481B7F;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00481B71;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00481B89;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00481B98;
// LINE 35:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 36:
	__asm        jmp    near ptr 0x00481BA6;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00481bae
void DirectoryEntry::DirectoryEntry(class Directory* directoryNewParent, class basic_string<char>& sNewName, long lNewType) {

	__asm        mov    eax, directoryNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00481BC7;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00481C09;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00481BFA;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00481C09;

	__asm        jmp    near ptr 0x00481C0E;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00481C34;

	__asm        jmp    near ptr 0x00481C23;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00481C3B;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00481C40;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00481C81;

	__asm        jmp    near ptr 0x00481C57;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00481C81;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00481D63;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00481D59;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00481D33;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00481CD3;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00481CF8;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00481D04;

	__asm        jmp    near ptr 0x00481D04;

	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x00481D04;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00481D2E;

	__asm        jmp    near ptr 0x00481D3C;

	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00481D4B;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00481D63;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00481D72;

	__asm        mov    eax, lNewType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 46:
	__asm        jmp    near ptr 0x00481D80;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00481d8a
int32_t DirectoryEntry::GetEntryExtension(class basic_string<char>& sEntryExtension) {
	uint32_t nPosition;


	__asm        mov    byte ptr [ebp-0x1C], 0x2E;
// LINE 60:
	__asm        jmp    near ptr 0x00481D9F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        ja     near ptr 0x00481DC5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00481DC0;

	__asm        jmp    near ptr 0x00481DCC;

	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x00481DD1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00481DED;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00481EED;

	__asm        jmp    near ptr 0x00481DF2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00481E17;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00481E23;

	__asm        jmp    near ptr 0x00481E23;

	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00481E23;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x14];
	__asm        movsx  eax, byte ptr [eax+ecx-1];
	__asm        movsx  ecx, byte ptr [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00481E3F;

	__asm        jmp    near ptr 0x00481E44;

	__asm        jmp    near ptr 0x00481E65;

	__asm        jmp    near ptr 0x00481E53;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00481E65;

	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jbe    near ptr 0x00481E65;

	__asm        dec    dword ptr [ebp-8];
	__asm        jmp    near ptr 0x00481DF2;

	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jne    near ptr 0x00481EE1;

	__asm        jmp    near ptr 0x00481E74;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00481E99;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00481EA5;

	__asm        jmp    near ptr 0x00481EA5;

	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x00481EA5;

	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, byte ptr [eax];
	__asm        movsx  ecx, byte ptr [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00481EBC;

	__asm        jmp    near ptr 0x00481EC1;

	__asm        jmp    near ptr 0x00481EE1;

	__asm        jmp    near ptr 0x00481ED0;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00481EE1;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00481EED;

	__asm        jmp    near ptr 0x00481EED;

	__asm        mov    eax, [ebp-8];
	__asm        dec    eax;
	__asm        mov    nPosition, eax;
	__asm        jmp    near ptr 0x00481EED;
// LINE 61:
	__asm        cmp    nPosition, 0;
	__asm        jb     near ptr 0x00482191;

	__asm        jmp    near ptr 0x00481EFC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    near ptr 0x00482191;
// LINE 62:
	__asm        jmp    near ptr 0x00481F13;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x00481F58;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00481F49;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00481F58;

	__asm        jmp    near ptr 0x00481F5D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jae    near ptr 0x00481F91;

	__asm        jmp    near ptr 0x00481F7A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00481F98;

	__asm        mov    dword ptr [ebp-0x20], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00481F9D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00482039;

	__asm        jmp    near ptr 0x00481FB4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00482039;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00482019;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00482019;

	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00482003;

	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482014;

	__asm        jmp    near ptr 0x00482019;

	__asm        jmp    near ptr 0x0048201E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00482179;

	__asm        jmp    near ptr 0x0048203E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482063;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0048206F;

	__asm        jmp    near ptr 0x0048206F;

	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0048206F;

	__asm        cmp    dword ptr [ebp-0x20], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004820AB;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048209C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004820AB;

	__asm        jmp    near ptr 0x004820B0;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004820E1;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00482131;

	__asm        jmp    near ptr 0x004820CF;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00482131;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00482114;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0048211B;

	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482168;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00482168;

	__asm        jmp    near ptr 0x00482140;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482168;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482179;

	__asm        jmp    near ptr 0x0048217E;
// LINE 63:
	__asm        jmp    near ptr 0x00482183;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00482375;
// LINE 67:
	__asm        jmp    near ptr 0x00482196;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x004821D8;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004821C9;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004821D8;

	__asm        jmp    near ptr 0x004821DD;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00482203;

	__asm        jmp    near ptr 0x004821F2;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0048220A;

	__asm        mov    dword ptr [ebp-0x44], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0048220F;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x004822D9;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00482260;

	__asm        jmp    near ptr 0x0048223B;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00482267;

	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x0048226C;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x60], ecx;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004822AC;

	__asm        jmp    near ptr 0x004822B1;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+4], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482369;

	__asm        jmp    near ptr 0x004822DE;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00482302;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00482369;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00482369;

	__asm        jmp    near ptr 0x00482311;

	__asm        jmp    near ptr 0x00482316;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x54], ecx;
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482359;

	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x44];
	__asm        neg    eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
	__asm        jmp    near ptr 0x0048236E;
// LINE 68:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482375;
// LINE 69:
}

// FUNCTION: COPTER_D 0x0048237c
int32_t DirectoryEntry::GetEntryMinusExtension(class basic_string<char>& sEntryMinusExtension) {
	uint32_t nPosition;


	__asm        mov    byte ptr [ebp-0x40], 0x2E;
// LINE 84:
	__asm        jmp    near ptr 0x00482391;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        ja     near ptr 0x004823B7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004823B2;

	__asm        jmp    near ptr 0x004823BE;

	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x004823C3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004823DF;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004824DF;

	__asm        jmp    near ptr 0x004823E4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482409;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00482415;

	__asm        jmp    near ptr 0x00482415;

	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x00482415;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        movsx  eax, byte ptr [eax+ecx-1];
	__asm        movsx  ecx, byte ptr [ebp-0x40];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00482431;

	__asm        jmp    near ptr 0x00482436;

	__asm        jmp    near ptr 0x00482457;

	__asm        jmp    near ptr 0x00482445;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00482457;

	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        jbe    near ptr 0x00482457;

	__asm        dec    dword ptr [ebp-0x2C];
	__asm        jmp    near ptr 0x004823E4;

	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        jne    near ptr 0x004824D3;

	__asm        jmp    near ptr 0x00482466;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0048248B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00482497;

	__asm        jmp    near ptr 0x00482497;

	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00482497;

	__asm        mov    eax, [ebp-0x30];
	__asm        movsx  eax, byte ptr [eax];
	__asm        movsx  ecx, byte ptr [ebp-0x40];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004824AE;

	__asm        jmp    near ptr 0x004824B3;

	__asm        jmp    near ptr 0x004824D3;

	__asm        jmp    near ptr 0x004824C2;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004824D3;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004824DF;

	__asm        jmp    near ptr 0x004824DF;

	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    eax;
	__asm        mov    nPosition, eax;
	__asm        jmp    near ptr 0x004824DF;
// LINE 85:
	__asm        cmp    nPosition, 0;
	__asm        jbe    near ptr 0x00482679;

	__asm        jmp    near ptr 0x004824EE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    near ptr 0x00482679;
// LINE 86:
	__asm        jmp    near ptr 0x00482505;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00482547;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482538;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482547;

	__asm        jmp    near ptr 0x0048254C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x00482574;

	__asm        jmp    near ptr 0x00482563;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0048257A;

	__asm        mov    eax, nPosition;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0048257F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0048261B;

	__asm        jmp    near ptr 0x00482596;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0048261B;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004825FB;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x004825FB;

	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004825E5;

	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004825F6;

	__asm        jmp    near ptr 0x004825FB;

	__asm        jmp    near ptr 0x00482600;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00482661;

	__asm        jmp    near ptr 0x00482620;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482645;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00482651;

	__asm        jmp    near ptr 0x00482651;

	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x00482651;

	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00482666;
// LINE 87:
	__asm        jmp    near ptr 0x0048266B;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0048282C;
// LINE 91:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        cmp    eax, sEntryMinusExtension;
	__asm        je     near ptr 0x00482814;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00482714;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00482714;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004826F4;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004826F9;

	__asm        jmp    near ptr 0x004826FE;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048270F;

	__asm        jmp    near ptr 0x00482714;

	__asm        jmp    near ptr 0x00482719;

	__asm        jmp    near ptr 0x0048271E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00482749;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00482814;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0048280A;

	__asm        jmp    near ptr 0x00482765;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004827E4;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004827DF;

	__asm        jmp    near ptr 0x004827ED;

	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004827FC;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482814;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00482819;
// LINE 92:
	__asm        jmp    near ptr 0x0048281E;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0048282C;
// LINE 93:
}

// FUNCTION: COPTER_D 0x00482833
void DirectoryEntry::GetFullPath(class basic_string<char>& sFullPath) {
// LINE 101:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00482976;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    sFullPath, eax;
	__asm        je     near ptr 0x0048296C;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004828EE;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004828EE;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004828CE;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004828D3;

	__asm        jmp    near ptr 0x004828D8;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004828E9;

	__asm        jmp    near ptr 0x004828EE;

	__asm        jmp    near ptr 0x004828F3;

	__asm        jmp    near ptr 0x004828F8;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00482923;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0048296C;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00482962;

	__asm        jmp    near ptr 0x0048293F;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0048296C;

	__asm        mov    eax, sFullPath;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00482971;
// LINE 103:
	__asm        jmp    near ptr 0x00482B7C;
// LINE 104:
	__asm        jmp    near ptr 0x0048297B;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x004829BD;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004829AE;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004829BD;

	__asm        jmp    near ptr 0x004829C2;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x004829E8;

	__asm        jmp    near ptr 0x004829D7;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004829EF;

	__asm        mov    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004829F4;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x00482ABE;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00482A45;

	__asm        jmp    near ptr 0x00482A20;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00482A4C;

	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00482A51;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x38];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x54], ecx;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482A91;

	__asm        jmp    near ptr 0x00482A96;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482B77;

	__asm        jmp    near ptr 0x00482AC3;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00482AE7;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00482B77;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00482B77;

	__asm        jmp    near ptr 0x00482AF6;

	__asm        jmp    near ptr 0x00482AFB;

	__asm        jmp    near ptr 0x00482B00;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482B25;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00482B31;

	__asm        jmp    near ptr 0x00482B31;

	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00482B31;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482B67;

	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x38];
	__asm        neg    eax;
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482B7C;
// LINE 105:
	__asm        jmp    near ptr 0x00482B81;

	__asm        jmp    near ptr 0x00482B86;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482BAB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00482BB7;

	__asm        jmp    near ptr 0x00482BB7;

	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    near ptr 0x00482BB7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00482BC8;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00482C11;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482C02;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482C11;

	__asm        jmp    near ptr 0x00482C16;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00482C4B;

	__asm        jmp    near ptr 0x00482C2B;

	__asm        jmp    near ptr 0x00482C30;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1C];
	__asm        jae    near ptr 0x00482CE5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00482CCD;

	__asm        jmp    near ptr 0x00482C67;

	__asm        jmp    near ptr 0x00482C6C;

	__asm        jmp    near ptr 0x00482C71;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482C96;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00482CA2;

	__asm        jmp    near ptr 0x00482CA2;

	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00482CA2;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00482CD4;

	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00482D26;

	__asm        jmp    near ptr 0x00482CF4;

	__asm        jmp    near ptr 0x00482CF9;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482D26;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00482D37;

	__asm        jmp    near ptr 0x00482D3C;
// LINE 106:
	__asm        jmp    near ptr 0x00482D41;
}

// FUNCTION: COPTER_D 0x00482d48
int32_t DirectoryEntry::IsMediaRemovable() {
// LINE 112:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482D5B;
// LINE 113:
}

// FUNCTION: COPTER_D 0x00482d60
unsigned long DirectoryEntry::GetSize() {
// LINE 119:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482D73;
// LINE 131:
}

// FUNCTION: COPTER_D 0x00482d78
int32_t DirectoryEntry::GetCreationDate() {
// LINE 137:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482D8B;
// LINE 138:
}

// FUNCTION: COPTER_D 0x00482d90
int32_t DirectoryEntry::GetlastModificationDate() {
// LINE 144:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482DA3;
// LINE 145:
}

// FUNCTION: COPTER_D 0x00482da8
int32_t DirectoryEntry::GetSerialNumber() {
// LINE 151:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00482DBB;
// LINE 152:
}

// FUNCTION: COPTER_D 0x00482dc0
int32_t DirectoryEntry::CreatePhysicalEntry() {
// LINE 158:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 4;
	__asm        jne    near ptr 0x00482F91;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
// LINE 160:
	__asm        jmp    near ptr 0x00482DF8;

	__asm        jmp    near ptr 0x00482DFD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x80];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    near ptr 0x00482E30;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482EB1;

	__asm        jmp    near ptr 0x00482E48;

	__asm        jmp    near ptr 0x00482E4D;

	__asm        jmp    near ptr 0x00482E52;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00482EB1;

	__asm        mov    eax, [ebp-0x7C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x00482EC2;

	__asm        jmp    near ptr 0x00482EC7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x80];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    near ptr 0x00482EF8;

	__asm        push   0;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35FC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00482F58;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00482F58;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00482F42;

	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482F53;

	__asm        jmp    near ptr 0x00482F58;

	__asm        jmp    near ptr 0x00482F5D;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00482F7F;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00482F84;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    near ptr 0x0048329E;
// LINE 165:
	__asm        jmp    near ptr 0x00483297;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 8;
	__asm        jne    near ptr 0x00483297;
// Block start:
	void * __ptr32 hFile;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x48], eax;
// LINE 169:
	__asm        jmp    near ptr 0x00482FB4;

	__asm        jmp    near ptr 0x00482FB9;

	__asm        jmp    near ptr 0x00482FBE;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00482FE3;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00482FEF;

	__asm        jmp    near ptr 0x00482FEF;

	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00482FEF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    near ptr 0x00483017;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004830AE;

	__asm        jmp    near ptr 0x0048302F;

	__asm        jmp    near ptr 0x00483034;

	__asm        jmp    near ptr 0x00483039;

	__asm        jmp    near ptr 0x0048303E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00483069;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00483075;

	__asm        jmp    near ptr 0x00483075;

	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x00483075;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004830AE;

	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004830BC;

	__asm        jmp    near ptr 0x004830C1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    near ptr 0x004830EF;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00483111;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483116;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0048312E;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00483198;

	__asm        jmp    near ptr 0x00483140;

	__asm        jmp    near ptr 0x00483145;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00483164;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x00483170;

	__asm        jmp    near ptr 0x00483170;

	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    near ptr 0x00483170;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00483198;

	__asm        jmp    near ptr 0x0048319D;

	__asm        mov    byte ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x004831A6;

	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004831B1;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x18];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004831CC;

	__asm        jmp    near ptr 0x004831D1;

	__asm        push   0;
	__asm        push   0x80;
	__asm        push   1;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x80000000;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C360C];
	__asm        mov    hFile, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0048323C;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0048323C;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00483226;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483237;

	__asm        jmp    near ptr 0x0048323C;

	__asm        jmp    near ptr 0x00483241;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00483263;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483268;
// LINE 170:
	__asm        cmp    hFile, 0xFFFFFFFF;
	__asm        je     near ptr 0x0048327C;
// LINE 171:
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3610];
// LINE 172:
	__asm        cmp    hFile, 0xFFFFFFFF;
	__asm        je     near ptr 0x00483290;

	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00483292;

	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048329E;
// LINE 177:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048329E;
// LINE 178:
}

// FUNCTION: COPTER_D 0x004832a3
 Directory::Directory(class basic_string<char>& sNewDirectoryPath, int32_t bReadNow, int32_t bNewAllowParentDirectoryAsEntry, int32_t bNewAllowCurrentDirectoryAsEntry) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    dword ptr ds:[0x5974AC];
	__asm        mov    eax, ds:[0x5974B8];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr ds:[0x5974B8], 0;
	__asm        je     near ptr 0x004832EB;

	__asm        mov    eax, ds:[0x5974B8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5974B8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004834C8;

	__asm        mov    eax, ds:[0x5974B4];
	__asm        cmp    ds:[0x5974B0], eax;
	__asm        jne    near ptr 0x004834B3;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    near ptr 0x0048334A;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483340;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048334F;

	__asm        jmp    near ptr 0x00483354;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x24], 0xAA;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x0048338F;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00483395;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0048339A;

	__asm        jmp    near ptr 0x0048339F;

	__asm        jmp    near ptr 0x004833A4;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    near ptr 0x00483402;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004833F8;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483407;

	__asm        jmp    near ptr 0x0048340C;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5974BC];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ds:[0x5974BC], eax;
	__asm        mov    eax, ds:[0x5974BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5974B4], eax;
	__asm        mov    dword ptr [ebp-0x38], 0xAA;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x00483469;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0048346F;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00483474;

	__asm        jmp    near ptr 0x00483479;

	__asm        jmp    near ptr 0x0048347E;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 3;
	__asm        add    eax, ds:[0x5974B4];
	__asm        mov    ds:[0x5974B0], eax;
	__asm        jmp    near ptr 0x00483499;

	__asm        mov    eax, ds:[0x5974B4];
	__asm        mov    [ebp-0x18], eax;
	__asm        add    dword ptr ds:[0x5974B4], 0x18;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004834C8;

	__asm        mov    eax, ds:[0x5974B4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    dword ptr ds:[0x5974B4], 0x18;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004834CD;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004834F3;

	__asm        jmp    near ptr 0x004834F8;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x0048353A;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048352B;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048353A;

	__asm        jmp    near ptr 0x0048353F;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00483565;

	__asm        jmp    near ptr 0x00483554;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x0048356C;

	__asm        mov    dword ptr [ebp-0x64], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00483571;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x64];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004835B2;

	__asm        jmp    near ptr 0x00483588;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004835B2;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00483694;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0048368A;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00483664;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00483604;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00483629;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x00483635;

	__asm        jmp    near ptr 0x00483635;

	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    near ptr 0x00483635;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048365F;

	__asm        jmp    near ptr 0x0048366D;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0048367C;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00483694;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    near ptr 0x004836A3;

	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0048375B;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004836D9;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00483735;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00483730;

	__asm        jmp    near ptr 0x0048373E;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0048374D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x00483765;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x00483774;

	__asm        mov    eax, bNewAllowParentDirectoryAsEntry;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, bNewAllowCurrentDirectoryAsEntry;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 199:
	__asm        mov    ecx, this;
	__asm        call   Directory::MakeSurePathEndsWithSeparator;
// LINE 200:
	__asm        cmp    bReadNow, 0;
	__asm        je     near ptr 0x004837A0;
// LINE 201:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 202:
	__asm        jmp    near ptr 0x004837A5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004837af
int  Directory::IsDirectoryRoot() {
// LINE 209:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004837C2;
// LINE 210:
}

// FUNCTION: COPTER_D 0x004837c7
int  Directory::ReadDirectoryEntries() {
	int32_t bNextFileFound;
	class basic_string<char> sPathWithFilter;
	int32_t bParentDirectoryEnumerated;
	int32_t bCurrentDirectoryEnumerated;
	void * __ptr32 hFind;
	class DirectoryEntry directoryEntryCurrent;
	struct _WIN32_FIND_DATAA findData;

// LINE 222:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x180];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     near ptr 0x0048384B;

	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x344], eax;
	__asm        mov    eax, [ebp-0x344];
	__asm        mov    [ebp-0x348], eax;
	__asm        mov    eax, [ebp-0x348];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483850;
// LINE 225:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 227:
	__asm        mov    bParentDirectoryEnumerated, 0;
// LINE 228:
	__asm        mov    bCurrentDirectoryEnumerated, 0;
// LINE 231:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x328], eax;
	__asm        mov    eax, [ebp-0x328];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    near ptr 0x0048388E;

	__asm        jmp    near ptr 0x00483893;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x32C], eax;
	__asm        mov    eax, [ebp-0x32C];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x004838B4;

	__asm        jmp    near ptr 0x004838B9;

	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x33C], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x340], eax;
	__asm        mov    eax, [ebp-0x33C];
	__asm        cmp    [ebp-0x340], eax;
	__asm        jne    near ptr 0x004838ED;

	__asm        jmp    near ptr 0x00483904;

	__asm        jmp    near ptr 0x004838ED;

	__asm        jmp    near ptr 0x004838FF;

	__asm        cmp    dword ptr [ebp-0x334], 0;
	__asm        jne    near ptr 0x00483904;

	__asm        jmp    near ptr 0x00483909;

	__asm        jmp    near ptr 0x00483942;

	__asm        jmp    near ptr 0x0048391B;

	__asm        cmp    dword ptr [ebp-0x338], 0;
	__asm        je     near ptr 0x00483942;

	__asm        push   0;
	__asm        lea    eax, [ebp-0x330];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x340];
	__asm        call   list<DirectoryEntry>::iterator::operator++;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::erase;
	__asm        jmp    near ptr 0x004838D1;

	__asm        jmp    near ptr 0x00483947;
// LINE 233:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 234:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        jne    near ptr 0x004839DC;
// LINE 235:
	__asm        mov    dword ptr [ebp-0x18C], 0;
	__asm        jmp    near ptr 0x00483982;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x004839CC;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x34C], eax;
	__asm        mov    eax, [ebp-0x34C];
	__asm        mov    [ebp-0x350], eax;
	__asm        mov    eax, [ebp-0x350];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004839D1;

	__asm        mov    eax, [ebp-0x18C];
	__asm        jmp    near ptr 0x00484948;
// LINE 239:
	__asm        mov    eax, this;
	__asm        mov    directoryEntryCurrent.directoryParent, eax;
// LINE 240:
	__asm        jmp    near ptr 0x004839ED;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00483A14;
// LINE 241:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     near ptr 0x00483D4D;
// LINE 242:
	__asm        mov    directoryEntryCurrent.lType, 4;
// LINE 243:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x00483B95;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x320], eax;
	__asm        cmp    dword ptr [ebp-0x320], 0;
	__asm        je     near ptr 0x00483A72;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x320];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    near ptr 0x00483A7C;

	__asm        mov    dword ptr [ebp-0x194], 0;
	__asm        mov    dword ptr [ebp-0x198], 0;
	__asm        jmp    near ptr 0x00483A8B;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x324], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x324];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x198];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00483AC1;

	__asm        mov    dword ptr [ebp-0x190], 1;
	__asm        jmp    near ptr 0x00483ACB;

	__asm        mov    dword ptr [ebp-0x190], 0;
	__asm        jmp    near ptr 0x00483AD0;

	__asm        lea    ecx, [ebp-0x198];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     near ptr 0x00483B0F;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x318], eax;
	__asm        mov    eax, [ebp-0x318];
	__asm        mov    [ebp-0x31C], eax;
	__asm        mov    eax, [ebp-0x31C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483B14;

	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        cmp    dword ptr [ebp-0x1E8], 0;
	__asm        je     near ptr 0x00483B95;
// LINE 244:
	__asm        mov    bCurrentDirectoryEnumerated, 1;
// LINE 245:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00483B90;
// LINE 246:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x314], eax;
	__asm        mov    eax, [ebp-0x314];
	__asm        mov    [ebp-0x30C], eax;
	__asm        jmp    near ptr 0x00483B66;

	__asm        jmp    near ptr 0x00483B6B;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x310];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00483B90;
// LINE 248:
	__asm        jmp    near ptr 0x00483D48;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x00483CFF;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x304], eax;
	__asm        cmp    dword ptr [ebp-0x304], 0;
	__asm        je     near ptr 0x00483BDC;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x304];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    near ptr 0x00483BE6;

	__asm        mov    dword ptr [ebp-0x1A0], 0;
	__asm        mov    dword ptr [ebp-0x1A4], 0;
	__asm        jmp    near ptr 0x00483BF5;

	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x308], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x308];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00483C2B;

	__asm        mov    dword ptr [ebp-0x19C], 1;
	__asm        jmp    near ptr 0x00483C35;

	__asm        mov    dword ptr [ebp-0x19C], 0;
	__asm        jmp    near ptr 0x00483C3A;

	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     near ptr 0x00483C79;

	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x2FC], eax;
	__asm        mov    eax, [ebp-0x2FC];
	__asm        mov    [ebp-0x300], eax;
	__asm        mov    eax, [ebp-0x300];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483C7E;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     near ptr 0x00483CFF;
// LINE 249:
	__asm        mov    bParentDirectoryEnumerated, 1;
// LINE 250:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00483CFA;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2E0], eax;
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    [ebp-0x2D8], eax;
	__asm        jmp    near ptr 0x00483CD0;

	__asm        jmp    near ptr 0x00483CD5;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2DC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00483CFA;
// LINE 253:
	__asm        jmp    near ptr 0x00483D48;
// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2EC], eax;
	__asm        mov    eax, [ebp-0x2EC];
	__asm        mov    [ebp-0x2E4], eax;
	__asm        jmp    near ptr 0x00483D1E;

	__asm        jmp    near ptr 0x00483D23;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2E4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2E8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00483D48;
// LINE 256:
	__asm        jmp    near ptr 0x00483DA0;
// LINE 257:
	__asm        mov    directoryEntryCurrent.lType, 8;
// LINE 258:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2F8], eax;
	__asm        mov    eax, [ebp-0x2F8];
	__asm        mov    [ebp-0x2F0], eax;
	__asm        jmp    near ptr 0x00483D76;

	__asm        jmp    near ptr 0x00483D7B;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2F0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2F4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00483DA0;
// LINE 262:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3600];
	__asm        mov    bNextFileFound, eax;
// LINE 263:
	__asm        cmp    bNextFileFound, 0;
	__asm        jne    near ptr 0x00483DD9;
// LINE 264:
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3604];
// LINE 265:
	__asm        jmp    near ptr 0x00484499;
// LINE 267:
	__asm        jmp    near ptr 0x00483DDE;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00483E05;
// LINE 268:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     near ptr 0x0048413E;
// LINE 269:
	__asm        mov    directoryEntryCurrent.lType, 4;
// LINE 270:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x00483F86;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2D0], eax;
	__asm        cmp    dword ptr [ebp-0x2D0], 0;
	__asm        je     near ptr 0x00483E63;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2D0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    near ptr 0x00483E6D;

	__asm        mov    dword ptr [ebp-0x1AC], 0;
	__asm        mov    dword ptr [ebp-0x1B0], 0;
	__asm        jmp    near ptr 0x00483E7C;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00483EB2;

	__asm        mov    dword ptr [ebp-0x1A8], 1;
	__asm        jmp    near ptr 0x00483EBC;

	__asm        mov    dword ptr [ebp-0x1A8], 0;
	__asm        jmp    near ptr 0x00483EC1;

	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1B0], 0;
	__asm        je     near ptr 0x00483F00;

	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00483F05;

	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1F0], eax;
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     near ptr 0x00483F86;
// LINE 271:
	__asm        mov    bCurrentDirectoryEnumerated, 1;
// LINE 272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00483F81;
// LINE 273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C4], eax;
	__asm        mov    eax, [ebp-0x2C4];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        jmp    near ptr 0x00483F57;

	__asm        jmp    near ptr 0x00483F5C;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2C0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00483F81;
// LINE 275:
	__asm        jmp    near ptr 0x00484139;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x004840F0;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2B4], eax;
	__asm        cmp    dword ptr [ebp-0x2B4], 0;
	__asm        je     near ptr 0x00483FCD;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2B4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    near ptr 0x00483FD7;

	__asm        mov    dword ptr [ebp-0x1B8], 0;
	__asm        mov    dword ptr [ebp-0x1BC], 0;
	__asm        jmp    near ptr 0x00483FE6;

	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x2B8], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2B8];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1BC];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0048401C;

	__asm        mov    dword ptr [ebp-0x1B4], 1;
	__asm        jmp    near ptr 0x00484026;

	__asm        mov    dword ptr [ebp-0x1B4], 0;
	__asm        jmp    near ptr 0x0048402B;

	__asm        lea    ecx, [ebp-0x1BC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1BC], 0;
	__asm        je     near ptr 0x0048406A;

	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x2AC], eax;
	__asm        mov    eax, [ebp-0x2AC];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    eax, [ebp-0x2B0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048406F;

	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1F4], eax;
	__asm        cmp    dword ptr [ebp-0x1F4], 0;
	__asm        je     near ptr 0x004840F0;
// LINE 276:
	__asm        mov    bParentDirectoryEnumerated, 1;
// LINE 277:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x004840EB;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x288], eax;
	__asm        jmp    near ptr 0x004840C1;

	__asm        jmp    near ptr 0x004840C6;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x288];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x004840EB;
// LINE 280:
	__asm        jmp    near ptr 0x00484139;
// LINE 281:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x294], eax;
	__asm        jmp    near ptr 0x0048410F;

	__asm        jmp    near ptr 0x00484114;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x298];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00484139;
// LINE 283:
	__asm        jmp    near ptr 0x00484191;
// LINE 284:
	__asm        mov    directoryEntryCurrent.lType, 8;
// LINE 285:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        jmp    near ptr 0x00484167;

	__asm        jmp    near ptr 0x0048416C;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00484191;
// LINE 287:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x280], eax;
	__asm        cmp    dword ptr [ebp-0x280], 0;
	__asm        je     near ptr 0x004841CB;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x280];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    near ptr 0x004841D5;

	__asm        mov    dword ptr [ebp-0x1C4], 0;
	__asm        mov    dword ptr [ebp-0x1C8], 0;
	__asm        jmp    near ptr 0x004841E4;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x284], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x284];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1C8];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0048421A;

	__asm        mov    dword ptr [ebp-0x1C0], 1;
	__asm        jmp    near ptr 0x00484224;

	__asm        mov    dword ptr [ebp-0x1C0], 0;
	__asm        jmp    near ptr 0x00484229;

	__asm        lea    ecx, [ebp-0x1C8];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C8], 0;
	__asm        je     near ptr 0x00484268;

	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048426D;

	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x1F8], eax;
	__asm        cmp    dword ptr [ebp-0x1F8], 0;
	__asm        je     near ptr 0x004842EE;
// LINE 288:
	__asm        mov    bCurrentDirectoryEnumerated, 1;
// LINE 289:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x004842E9;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    [ebp-0x26C], eax;
	__asm        jmp    near ptr 0x004842BF;

	__asm        jmp    near ptr 0x004842C4;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x004842E9;
// LINE 292:
	__asm        jmp    near ptr 0x00484494;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     near ptr 0x00484328;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x264];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    near ptr 0x00484332;

	__asm        mov    dword ptr [ebp-0x1D0], 0;
	__asm        mov    dword ptr [ebp-0x1D4], 0;
	__asm        jmp    near ptr 0x00484341;

	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x268], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x268];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00484377;

	__asm        mov    dword ptr [ebp-0x1CC], 1;
	__asm        jmp    near ptr 0x00484381;

	__asm        mov    dword ptr [ebp-0x1CC], 0;
	__asm        jmp    near ptr 0x00484386;

	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     near ptr 0x004843C5;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004843CA;

	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        cmp    dword ptr [ebp-0x1FC], 0;
	__asm        je     near ptr 0x0048444B;
// LINE 293:
	__asm        mov    bParentDirectoryEnumerated, 1;
// LINE 294:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00484446;
// LINE 295:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x21C], eax;
	__asm        mov    eax, [ebp-0x21C];
	__asm        mov    [ebp-0x214], eax;
	__asm        jmp    near ptr 0x0048441C;

	__asm        jmp    near ptr 0x00484421;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x218];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00484446;
// LINE 297:
	__asm        jmp    near ptr 0x00484494;
// LINE 298:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x228], eax;
	__asm        mov    eax, [ebp-0x228];
	__asm        mov    [ebp-0x220], eax;
	__asm        jmp    near ptr 0x0048446A;

	__asm        jmp    near ptr 0x0048446F;

	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x224];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00484494;
// LINE 299:
	__asm        jmp    near ptr 0x00483DA0;
// LINE 305:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0048469D;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x0048469D;

	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x204], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x204];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004844E5;

	__asm        jmp    near ptr 0x004844EA;

	__asm        jmp    near ptr 0x0048469D;

	__asm        jmp    near ptr 0x004844FC;

	__asm        cmp    dword ptr [ebp-0x208], 0;
	__asm        je     near ptr 0x0048469D;
// LINE 306:
// Block start:
	class basic_string<char> sParentDirectory;
	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x358], eax;
// LINE 307:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x354], eax;
	__asm        cmp    dword ptr [ebp-0x354], 0;
	__asm        je     near ptr 0x00484541;

	__asm        mov    eax, [ebp-0x358];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x354];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sParentDirectory.reference, eax;
	__asm        jmp    near ptr 0x0048454B;

	__asm        mov    sParentDirectory.reference, 0;
	__asm        mov    sParentDirectory.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0048455A;
// LINE 308:
	__asm        lea    eax, sParentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Directory::DoesDirectoryListContainEntry;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00484659;
// LINE 309:
	__asm        lea    eax, directoryEntryCurrent.sName.c_str_ptr;
	__asm        lea    ecx, sParentDirectory.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00484617;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    near ptr 0x00484598;

	__asm        mov    eax, sParentDirectory.reference;
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004845C2;

	__asm        mov    eax, sParentDirectory.reference;
	__asm        mov    directoryEntryCurrent.sName.reference, eax;
	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00484617;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x36C], eax;
	__asm        cmp    dword ptr [ebp-0x36C], 0;
	__asm        je     near ptr 0x0048460D;

	__asm        jmp    near ptr 0x004845E4;

	__asm        mov    eax, sParentDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, sParentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x36C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    directoryEntryCurrent.sName.reference, eax;
	__asm        jmp    near ptr 0x00484617;

	__asm        mov    directoryEntryCurrent.sName.reference, 0;
	__asm        jmp    near ptr 0x0048461C;
// LINE 310:
	__asm        mov    directoryEntryCurrent.lType, 4;
// LINE 311:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x00484659;
// LINE 313:
	__asm        lea    ecx, sParentDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sParentDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x00484698;

	__asm        mov    eax, sParentDirectory.c_str_ptr;
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048469D;
// LINE 316:
// Block end:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x004848DF;

	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x004848DF;

	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x20C], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x20C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004846E9;

	__asm        jmp    near ptr 0x004846EE;

	__asm        jmp    near ptr 0x004848DF;

	__asm        jmp    near ptr 0x00484700;

	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     near ptr 0x004848DF;
// LINE 317:
// Block start:
	class basic_string<char> sCurrentDirectory;
	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x360], eax;
// LINE 318:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x35C], eax;
	__asm        cmp    dword ptr [ebp-0x35C], 0;
	__asm        je     near ptr 0x00484745;

	__asm        mov    eax, [ebp-0x360];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x35C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sCurrentDirectory.reference, eax;
	__asm        jmp    near ptr 0x0048474F;

	__asm        mov    sCurrentDirectory.reference, 0;
	__asm        mov    sCurrentDirectory.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0048475E;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x368], eax;
// LINE 319:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x364], eax;
	__asm        cmp    dword ptr [ebp-0x364], 0;
	__asm        je     near ptr 0x004847A3;

	__asm        mov    eax, [ebp-0x368];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x364];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    near ptr 0x004847AD;

	__asm        mov    dword ptr [ebp-0x1DC], 0;
	__asm        mov    dword ptr [ebp-0x1E0], 0;
	__asm        jmp    near ptr 0x004847BC;

	__asm        lea    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Directory::DoesDirectoryListContainEntry;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004847E5;

	__asm        mov    dword ptr [ebp-0x1D8], 1;
	__asm        jmp    near ptr 0x004847EF;

	__asm        mov    dword ptr [ebp-0x1D8], 0;
	__asm        lea    ecx, [ebp-0x1E0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1E0], 0;
	__asm        je     near ptr 0x0048482E;

	__asm        mov    eax, [ebp-0x1E0];
	__asm        mov    [ebp-0x24C], eax;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00484833;

	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    [ebp-0x200], eax;
	__asm        cmp    dword ptr [ebp-0x200], 0;
	__asm        je     near ptr 0x0048489B;
// LINE 320:
	__asm        lea    eax, sCurrentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 321:
	__asm        mov    directoryEntryCurrent.lType, 4;
// LINE 322:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x238];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    near ptr 0x0048489B;
// LINE 324:
	__asm        lea    ecx, sCurrentDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sCurrentDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x004848DA;

	__asm        mov    eax, sCurrentDirectory.c_str_ptr;
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        mov    [ebp-0x258], eax;
	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004848DF;
// LINE 327:
// Block end:
	__asm        mov    dword ptr [ebp-0x1E4], 1;
	__asm        jmp    near ptr 0x004848EE;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00484938;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x260], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048493D;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        jmp    near ptr 0x00484948;
// LINE 328:
}

// FUNCTION: COPTER_D 0x0048494d
int  Directory::ReadDirectorySpecificEntriesIntoStringList(class list<basic_string<char>>& sDirectoryEntries, long lFilter) {
	int32_t bNextFileFound;
	class basic_string<char> sPathWithFilter;
	int32_t bParentDirectoryEnumerated;
	int32_t bCurrentDirectoryEnumerated;
	void * __ptr32 hFind;
	class DirectoryEntry directoryEntryCurrent;
	struct _WIN32_FIND_DATAA findData;

// LINE 349:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x170];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x170];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 352:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 354:
	__asm        mov    bParentDirectoryEnumerated, 0;
// LINE 355:
	__asm        mov    bCurrentDirectoryEnumerated, 0;
// LINE 357:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 358:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00484A18;
// LINE 359:
	__asm        mov    dword ptr [ebp-0x174], 0;
	__asm        jmp    near ptr 0x004849F7;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x174];
	__asm        jmp    near ptr 0x0048572E;
// LINE 361:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     near ptr 0x00484D9C;
// LINE 362:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 4;
	__asm        je     near ptr 0x00484D97;
// LINE 363:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x00484B3C;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x330], eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x334], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x330];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x334];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00484A8A;

	__asm        mov    dword ptr [ebp-0x178], 1;
	__asm        jmp    near ptr 0x00484A94;

	__asm        mov    dword ptr [ebp-0x178], 0;
	__asm        jmp    near ptr 0x00484A99;

	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x1F8], eax;
	__asm        cmp    dword ptr [ebp-0x1F8], 0;
	__asm        je     near ptr 0x00484B3C;
// LINE 364:
	__asm        mov    bCurrentDirectoryEnumerated, 1;
// LINE 365:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     near ptr 0x00484B37;
// LINE 366:
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x188];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x32C], eax;
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x328], eax;
	__asm        mov    eax, [ebp-0x328];
	__asm        mov    [ebp-0x320], eax;
	__asm        jmp    near ptr 0x00484B05;

	__asm        jmp    near ptr 0x00484B0A;

	__asm        mov    eax, [ebp-0x32C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x320];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x324];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00484B2C;

	__asm        lea    ecx, [ebp-0x188];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 368:
	__asm        jmp    near ptr 0x00484D97;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x00484CBD;

	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x318], eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x194];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x31C], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x318];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x31C];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00484B97;

	__asm        mov    dword ptr [ebp-0x18C], 1;
	__asm        jmp    near ptr 0x00484BA1;

	__asm        mov    dword ptr [ebp-0x18C], 0;
	__asm        jmp    near ptr 0x00484BA6;

	__asm        lea    ecx, [ebp-0x194];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        cmp    dword ptr [ebp-0x1FC], 0;
	__asm        je     near ptr 0x00484CBD;
// LINE 369:
	__asm        mov    bParentDirectoryEnumerated, 1;
// LINE 370:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     near ptr 0x00484CB8;
// LINE 371:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x308], eax;
	__asm        cmp    dword ptr [ebp-0x308], 0;
	__asm        je     near ptr 0x00484C18;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x308];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x198], eax;
	__asm        jmp    near ptr 0x00484C22;

	__asm        mov    dword ptr [ebp-0x198], 0;
	__asm        mov    dword ptr [ebp-0x19C], 0;
	__asm        jmp    near ptr 0x00484C31;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x314], eax;
	__asm        mov    eax, [ebp-0x314];
	__asm        mov    [ebp-0x30C], eax;
	__asm        jmp    near ptr 0x00484C4D;

	__asm        jmp    near ptr 0x00484C52;

	__asm        lea    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x310];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00484C74;

	__asm        lea    ecx, [ebp-0x19C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     near ptr 0x00484CB3;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x300], eax;
	__asm        mov    eax, [ebp-0x300];
	__asm        mov    [ebp-0x304], eax;
	__asm        mov    eax, [ebp-0x304];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00484CB8;
// LINE 373:
	__asm        jmp    near ptr 0x00484D97;
// LINE 374:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2F0], eax;
	__asm        cmp    dword ptr [ebp-0x2F0], 0;
	__asm        je     near ptr 0x00484CF7;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2F0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    near ptr 0x00484D01;

	__asm        mov    dword ptr [ebp-0x1A0], 0;
	__asm        mov    dword ptr [ebp-0x1A4], 0;
	__asm        jmp    near ptr 0x00484D10;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2FC], eax;
	__asm        mov    eax, [ebp-0x2FC];
	__asm        mov    [ebp-0x2F4], eax;
	__asm        jmp    near ptr 0x00484D2C;

	__asm        jmp    near ptr 0x00484D31;

	__asm        lea    eax, [ebp-0x1A4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2F8];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00484D53;

	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     near ptr 0x00484D92;

	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x2E8], eax;
	__asm        mov    eax, [ebp-0x2E8];
	__asm        mov    [ebp-0x2EC], eax;
	__asm        mov    eax, [ebp-0x2EC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00484D97;
// LINE 377:
	__asm        jmp    near ptr 0x00484E80;
// LINE 378:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 8;
	__asm        je     near ptr 0x00484E80;
// LINE 379:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2D8], eax;
	__asm        cmp    dword ptr [ebp-0x2D8], 0;
	__asm        je     near ptr 0x00484DE0;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        jmp    near ptr 0x00484DEA;

	__asm        mov    dword ptr [ebp-0x1A8], 0;
	__asm        mov    dword ptr [ebp-0x1AC], 0;
	__asm        jmp    near ptr 0x00484DF9;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2E4], eax;
	__asm        mov    eax, [ebp-0x2E4];
	__asm        mov    [ebp-0x2DC], eax;
	__asm        jmp    near ptr 0x00484E15;

	__asm        jmp    near ptr 0x00484E1A;

	__asm        lea    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2DC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2E0];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00484E3C;

	__asm        lea    ecx, [ebp-0x1AC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1AC], 0;
	__asm        je     near ptr 0x00484E7B;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        mov    eax, [ebp-0x2D0];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00484E80;
// LINE 383:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3600];
	__asm        mov    bNextFileFound, eax;
// LINE 384:
	__asm        cmp    bNextFileFound, 0;
	__asm        jne    near ptr 0x00484EB9;
// LINE 385:
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3604];
// LINE 386:
	__asm        jmp    near ptr 0x00485482;
// LINE 388:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     near ptr 0x00485399;
// LINE 389:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 4;
	__asm        je     near ptr 0x00485394;
// LINE 390:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x004850C5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C8], eax;
	__asm        cmp    dword ptr [ebp-0x2C8], 0;
	__asm        je     near ptr 0x00484F17;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        jmp    near ptr 0x00484F21;

	__asm        mov    dword ptr [ebp-0x1B4], 0;
	__asm        mov    dword ptr [ebp-0x1B8], 0;
	__asm        jmp    near ptr 0x00484F30;

	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B8];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00484F66;

	__asm        mov    dword ptr [ebp-0x1B0], 1;
	__asm        jmp    near ptr 0x00484F70;

	__asm        mov    dword ptr [ebp-0x1B0], 0;
	__asm        jmp    near ptr 0x00484F75;

	__asm        lea    ecx, [ebp-0x1B8];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     near ptr 0x00484FB4;

	__asm        mov    eax, [ebp-0x1B8];
	__asm        mov    [ebp-0x2C0], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    [ebp-0x2C4], eax;
	__asm        mov    eax, [ebp-0x2C4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00484FB9;

	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x200], eax;
	__asm        cmp    dword ptr [ebp-0x200], 0;
	__asm        je     near ptr 0x004850C5;
// LINE 391:
	__asm        mov    bCurrentDirectoryEnumerated, 1;
// LINE 392:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     near ptr 0x004850C0;
// LINE 393:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2B0], eax;
	__asm        cmp    dword ptr [ebp-0x2B0], 0;
	__asm        je     near ptr 0x00485020;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2B0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        jmp    near ptr 0x0048502A;

	__asm        mov    dword ptr [ebp-0x1BC], 0;
	__asm        mov    dword ptr [ebp-0x1C0], 0;
	__asm        jmp    near ptr 0x00485039;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        jmp    near ptr 0x00485055;

	__asm        jmp    near ptr 0x0048505A;

	__asm        lea    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2B8];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x0048507C;

	__asm        lea    ecx, [ebp-0x1C0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C0], 0;
	__asm        je     near ptr 0x004850BB;

	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2AC], eax;
	__asm        mov    eax, [ebp-0x2AC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004850C0;
// LINE 395:
	__asm        jmp    near ptr 0x00485394;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    near ptr 0x004852BA;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2A0], eax;
	__asm        cmp    dword ptr [ebp-0x2A0], 0;
	__asm        je     near ptr 0x0048510C;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2A0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    near ptr 0x00485116;

	__asm        mov    dword ptr [ebp-0x1C8], 0;
	__asm        mov    dword ptr [ebp-0x1CC], 0;
	__asm        jmp    near ptr 0x00485125;

	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x2A4], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1CC];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0048515B;

	__asm        mov    dword ptr [ebp-0x1C4], 1;
	__asm        jmp    near ptr 0x00485165;

	__asm        mov    dword ptr [ebp-0x1C4], 0;
	__asm        jmp    near ptr 0x0048516A;

	__asm        lea    ecx, [ebp-0x1CC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        je     near ptr 0x004851A9;

	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004851AE;

	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x204], eax;
	__asm        cmp    dword ptr [ebp-0x204], 0;
	__asm        je     near ptr 0x004852BA;
// LINE 396:
	__asm        mov    bParentDirectoryEnumerated, 1;
// LINE 397:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     near ptr 0x004852B5;
// LINE 398:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x288], eax;
	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     near ptr 0x00485215;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x288];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    near ptr 0x0048521F;

	__asm        mov    dword ptr [ebp-0x1D0], 0;
	__asm        mov    dword ptr [ebp-0x1D4], 0;
	__asm        jmp    near ptr 0x0048522E;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x294], eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        mov    [ebp-0x28C], eax;
	__asm        jmp    near ptr 0x0048524A;

	__asm        jmp    near ptr 0x0048524F;

	__asm        lea    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x290];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00485271;

	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     near ptr 0x004852B0;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x284], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004852B5;
// LINE 400:
	__asm        jmp    near ptr 0x00485394;
// LINE 401:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x270], eax;
	__asm        cmp    dword ptr [ebp-0x270], 0;
	__asm        je     near ptr 0x004852F4;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x270];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    near ptr 0x004852FE;

	__asm        mov    dword ptr [ebp-0x1D8], 0;
	__asm        mov    dword ptr [ebp-0x1DC], 0;
	__asm        jmp    near ptr 0x0048530D;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    near ptr 0x00485329;

	__asm        jmp    near ptr 0x0048532E;

	__asm        lea    eax, [ebp-0x1DC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00485350;

	__asm        lea    ecx, [ebp-0x1DC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1DC], 0;
	__asm        je     near ptr 0x0048538F;

	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485394;
// LINE 404:
	__asm        jmp    near ptr 0x0048547D;
// LINE 405:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 8;
	__asm        je     near ptr 0x0048547D;
// LINE 406:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x258], eax;
	__asm        cmp    dword ptr [ebp-0x258], 0;
	__asm        je     near ptr 0x004853DD;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x258];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1E0], eax;
	__asm        jmp    near ptr 0x004853E7;

	__asm        mov    dword ptr [ebp-0x1E0], 0;
	__asm        mov    dword ptr [ebp-0x1E4], 0;
	__asm        jmp    near ptr 0x004853F6;

	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x264], eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    [ebp-0x25C], eax;
	__asm        jmp    near ptr 0x00485412;

	__asm        jmp    near ptr 0x00485417;

	__asm        lea    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00485439;

	__asm        lea    ecx, [ebp-0x1E4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1E4], 0;
	__asm        je     near ptr 0x00485478;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048547D;
// LINE 408:
	__asm        jmp    near ptr 0x00484E80;
// LINE 412:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     near ptr 0x004855AE;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        je     near ptr 0x004855AE;

	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x240], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004854C8;

	__asm        jmp    near ptr 0x004854CD;

	__asm        jmp    near ptr 0x004855AE;

	__asm        jmp    near ptr 0x004854DF;

	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     near ptr 0x004855AE;
// LINE 413:
	__asm        mov    eax, ds:[0x599B94];
	__asm        mov    [ebp-0x23C], eax;
// LINE 414:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        cmp    dword ptr [ebp-0x238], 0;
	__asm        je     near ptr 0x00485524;

	__asm        mov    eax, [ebp-0x23C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        jmp    near ptr 0x0048552E;

	__asm        mov    dword ptr [ebp-0x1E8], 0;
	__asm        mov    dword ptr [ebp-0x1EC], 0;
	__asm        jmp    near ptr 0x0048553D;

	__asm        lea    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x0048556A;

	__asm        lea    ecx, [ebp-0x1EC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     near ptr 0x004855A9;

	__asm        mov    eax, [ebp-0x1EC];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004855AE;
// LINE 418:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     near ptr 0x004856DA;

	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        je     near ptr 0x004856DA;

	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x220], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004855F4;

	__asm        jmp    near ptr 0x004855F9;

	__asm        jmp    near ptr 0x004856DA;

	__asm        jmp    near ptr 0x0048560B;

	__asm        cmp    dword ptr [ebp-0x224], 0;
	__asm        je     near ptr 0x004856DA;
// LINE 419:
	__asm        mov    eax, ds:[0x599B90];
	__asm        mov    [ebp-0x21C], eax;
// LINE 420:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x218], eax;
	__asm        cmp    dword ptr [ebp-0x218], 0;
	__asm        je     near ptr 0x00485650;

	__asm        mov    eax, [ebp-0x21C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x218];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1F0], eax;
	__asm        jmp    near ptr 0x0048565A;

	__asm        mov    dword ptr [ebp-0x1F0], 0;
	__asm        mov    dword ptr [ebp-0x1F4], 0;
	__asm        jmp    near ptr 0x00485669;

	__asm        lea    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    near ptr 0x00485696;

	__asm        lea    ecx, [ebp-0x1F4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1F4], 0;
	__asm        je     near ptr 0x004856D5;

	__asm        mov    eax, [ebp-0x1F4];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        mov    [ebp-0x20C], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004856DA;
// LINE 423:
	__asm        jmp    near ptr 0x004856DF;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     near ptr 0x00485729;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x210], eax;
	__asm        mov    eax, [ebp-0x210];
	__asm        mov    [ebp-0x214], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048572E;
}

// FUNCTION: COPTER_D 0x00485735
int  Directory::DoesAnyEntryExistThatMatchesPattern(const class basic_string<char>& sPathPattern) {
	void * __ptr32 hFind;
	class DirectoryEntry directoryEntryCurrent;
	struct _WIN32_FIND_DATAA findData;

// LINE 435:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 437:
	__asm        mov    eax, sPathPattern;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0048577E;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485783;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, sPathPattern;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004857A0;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0048582D;

	__asm        jmp    near ptr 0x004857B5;

	__asm        jmp    near ptr 0x004857BA;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004857E2;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    near ptr 0x004857F1;

	__asm        jmp    near ptr 0x004857F1;

	__asm        mov    dword ptr [ebp-0x188], 0;
	__asm        jmp    near ptr 0x004857F1;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048582D;

	__asm        jmp    near ptr 0x00485832;

	__asm        mov    byte ptr [ebp-0x178], 0;
	__asm        jmp    near ptr 0x0048583E;

	__asm        lea    eax, [ebp-0x178];
	__asm        mov    [ebp-0x180], eax;
	__asm        jmp    near ptr 0x0048584F;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sPathPattern;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00485878;

	__asm        jmp    near ptr 0x0048587D;

	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 438:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        je     near ptr 0x004858B2;

	__asm        mov    dword ptr [ebp-0x158], 1;
	__asm        jmp    near ptr 0x004858BC;

	__asm        mov    dword ptr [ebp-0x158], 0;
	__asm        jmp    near ptr 0x004858C1;

	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00485974;

	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x164], eax;
	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     near ptr 0x00485974;

	__asm        mov    eax, [ebp-0x164];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00485951;

	__asm        mov    eax, [ebp-0x164];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00485956;

	__asm        jmp    near ptr 0x0048595B;

	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048596F;

	__asm        jmp    near ptr 0x00485974;

	__asm        jmp    near ptr 0x00485979;

	__asm        cmp    directoryEntryCurrent.sName.c_str_ptr, 0;
	__asm        je     near ptr 0x004859AD;

	__asm        mov    eax, directoryEntryCurrent.sName.c_str_ptr;
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004859B2;

	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    near ptr 0x004859BD;
// LINE 440:
}

// FUNCTION: COPTER_D 0x004859c2
int  Directory::DoesDirectoryListContainEntry(const class basic_string<char>& sEntry) {
	class list<DirectoryEntry>::iterator tempDirectoryEntryListIterator;

// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempDirectoryEntryListIterator.node, eax;
	__asm        jmp    near ptr 0x004859E3;

	__asm        jmp    near ptr 0x004859E8;
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004859FB;

	__asm        jmp    near ptr 0x00485A00;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    tempDirectoryEntryListIterator.node, eax;
	__asm        jne    near ptr 0x00485A16;

	__asm        jmp    near ptr 0x00485A2A;

	__asm        jmp    near ptr 0x00485A16;

	__asm        jmp    near ptr 0x00485A25;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00485A2A;

	__asm        jmp    near ptr 0x00485A2F;

	__asm        jmp    near ptr 0x00485B28;

	__asm        jmp    near ptr 0x00485A3E;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00485B28;
// LINE 451:
	__asm        jmp    near ptr 0x00485A43;

	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00485A51;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00485A77;

	__asm        jmp    near ptr 0x00485A66;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00485A7E;

	__asm        mov    dword ptr [ebp-0x10], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00485A83;

	__asm        jmp    near ptr 0x00485A88;

	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00485AAD;

	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00485AB9;

	__asm        jmp    near ptr 0x00485AB9;

	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00485AB9;

	__asm        jmp    near ptr 0x00485ABE;

	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00485AE7;

	__asm        jmp    near ptr 0x00485AEC;

	__asm        jmp    near ptr 0x00485B05;

	__asm        jmp    near ptr 0x00485AFB;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00485B05;
// LINE 452:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00485B2F;
// LINE 453:
	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempDirectoryEntryListIterator.node, eax;
	__asm        jmp    near ptr 0x00485B18;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00485B23;
// LINE 454:
	__asm        jmp    near ptr 0x004859E8;
// LINE 455:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00485B2F;
// LINE 456:
}

// FUNCTION: COPTER_D 0x00485b36
int  Directory::ChangeDirectory(class basic_string<char>& sNewDirectory, int32_t bReadNow) {
// LINE 474:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewDirectory;
	__asm        je     near ptr 0x00485D04;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00485BDD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00485BDD;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00485BBD;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00485BC2;

	__asm        jmp    near ptr 0x00485BC7;

	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485BD8;

	__asm        jmp    near ptr 0x00485BDD;

	__asm        jmp    near ptr 0x00485BE2;

	__asm        jmp    near ptr 0x00485BE7;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00485C11;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00485D04;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00485CFA;

	__asm        jmp    near ptr 0x00485C2D;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00485CD4;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00485C74;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00485C99;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00485CA5;

	__asm        jmp    near ptr 0x00485CA5;

	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00485CA5;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00485CCF;

	__asm        jmp    near ptr 0x00485CDD;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00485CEC;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00485D04;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x00485D09;
// LINE 475:
	__asm        mov    ecx, this;
	__asm        call   Directory::MakeSurePathEndsWithSeparator;
// LINE 476:
	__asm        cmp    bReadNow, 0;
	__asm        je     near ptr 0x00485D23;
// LINE 477:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 478:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00485D2D;
// LINE 479:
}

// FUNCTION: COPTER_D 0x00485d34
int  Directory::CreateNewEntry(class basic_string<char>& sName, long lType) {
	class DirectoryEntry tempDirectoryEntry;

// LINE 487:
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        mov    eax, sName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectoryEntry.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 488:
	__asm        lea    ecx, tempDirectoryEntry.directoryParent;
	__asm        call   DirectoryEntry::CreatePhysicalEntry;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00485D64;

	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00485DE7;

	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00485DE7;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00485DC7;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00485DCC;

	__asm        jmp    near ptr 0x00485DD1;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485DE2;

	__asm        jmp    near ptr 0x00485DE7;

	__asm        jmp    near ptr 0x00485DEC;

	__asm        cmp    tempDirectoryEntry.sName.c_str_ptr, 0;
	__asm        je     near ptr 0x00485E0E;

	__asm        mov    eax, tempDirectoryEntry.sName.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485E13;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x00485E1B;
// LINE 489:
}

// FUNCTION: COPTER_D 0x00485e22
class DirectoryEntry *  Directory::GetNthEntry(int32_t nIndex) {
	class list<DirectoryEntry>::iterator iterator;
	int32_t i;
	int32_t iEnd;

// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00485E43;

	__asm        jmp    near ptr 0x00485E48;
// LINE 500:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00485E54;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x00485E83;

	__asm        inc    i;
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x00485E78;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00485E83;

	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x00485EB0;
// LINE 501:
	__asm        mov    eax, nIndex;
	__asm        cmp    i, eax;
	__asm        jne    near ptr 0x00485EAB;
// LINE 502:
	__asm        jmp    near ptr 0x00485EA0;

	__asm        mov    eax, iterator.node;
	__asm        add    eax, 8;
	__asm        jmp    near ptr 0x00485EB7;
// LINE 503:
	__asm        jmp    near ptr 0x00485E62;
// LINE 504:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00485EB7;
// LINE 505:
}

// FUNCTION: COPTER_D 0x00485ebe
void  Directory::SetNewDirectoryEntryFilter(class basic_string<char>& sNewDirectoryEntryFilter, int32_t bRereadEntries) {
// LINE 512:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        cmp    eax, sNewDirectoryEntryFilter;
	__asm        je     near ptr 0x0048608C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00485F65;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00485F65;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00485F45;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00485F4A;

	__asm        jmp    near ptr 0x00485F4F;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00485F60;

	__asm        jmp    near ptr 0x00485F65;

	__asm        jmp    near ptr 0x00485F6A;

	__asm        jmp    near ptr 0x00485F6F;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00485F99;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0048608C;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00486082;

	__asm        jmp    near ptr 0x00485FB5;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0048605C;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00485FFC;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00486021;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0048602D;

	__asm        jmp    near ptr 0x0048602D;

	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x0048602D;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00486057;

	__asm        jmp    near ptr 0x00486065;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00486074;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x0048608C;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        jmp    near ptr 0x00486091;
// LINE 513:
	__asm        jmp    near ptr 0x00486096;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004862FE;
// LINE 514:
	__asm        mov    eax, ds:[0x599B8C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004860B3;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004860FE;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004860EF;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004860FE;

	__asm        jmp    near ptr 0x00486103;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00486134;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004862B5;

	__asm        jmp    near ptr 0x00486122;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004862B5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0048620F;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00486187;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486178;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486187;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004861EC;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004861E7;

	__asm        jmp    near ptr 0x004861F5;

	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00486204;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00486216;

	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004862A2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004862A2;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00486282;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00486287;

	__asm        jmp    near ptr 0x0048628C;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048629D;

	__asm        jmp    near ptr 0x004862A2;

	__asm        jmp    near ptr 0x004862A7;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    near ptr 0x004862E8;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004862E8;

	__asm        jmp    near ptr 0x004862C4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004862E8;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004862F9;

	__asm        jmp    near ptr 0x004862FE;
// LINE 515:
	__asm        cmp    bRereadEntries, 0;
	__asm        je     near ptr 0x00486310;
// LINE 516:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 517:
	__asm        jmp    near ptr 0x00486315;
}

// FUNCTION: COPTER_D 0x0048631c
void  Directory::MakeSurePathEndsWithSeparator() {
	uint32_t nDirectoryPathLength;
	char chLastCharacter;

// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    nDirectoryPathLength, eax;
	__asm        jmp    near ptr 0x00486339;
// LINE 528:
	__asm        cmp    nDirectoryPathLength, 0;
	__asm        ja     near ptr 0x00486348;
// LINE 529:
	__asm        jmp    near ptr 0x004867CD;
// LINE 530:
	__asm        jmp    near ptr 0x0048634D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, nDirectoryPathLength;
	__asm        dec    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x00486392;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486383;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486392;

	__asm        jmp    near ptr 0x00486397;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x00486549;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004864A8;

	__asm        jmp    near ptr 0x004863C3;

	__asm        jmp    near ptr 0x004863C8;

	__asm        jmp    near ptr 0x004863CD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004863F2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004863FE;

	__asm        jmp    near ptr 0x004863FE;

	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x004863FE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00486485;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00486480;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00486480;

	__asm        jmp    near ptr 0x0048648E;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0048649D;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004864AF;

	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0048653B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0048653B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0048651B;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00486520;

	__asm        jmp    near ptr 0x00486525;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486536;

	__asm        jmp    near ptr 0x0048653B;

	__asm        jmp    near ptr 0x00486540;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0048654E;

	__asm        jmp    near ptr 0x00486553;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, nDirectoryPathLength;
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    chLastCharacter, al;
// LINE 531:
	__asm        movsx  eax, chLastCharacter;
	__asm        cmp    eax, 0x5C;
	__asm        je     near ptr 0x004867C8;

	__asm        movsx  eax, chLastCharacter;
	__asm        cmp    eax, 0x2F;
	__asm        je     near ptr 0x004867C8;
// LINE 532:
	__asm        mov    byte ptr [ebp-0x6C], 0x5C;
	__asm        jmp    near ptr 0x00486588;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     near ptr 0x004865CA;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004865BB;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004865CA;

	__asm        jmp    near ptr 0x004865CF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00486602;

	__asm        jmp    near ptr 0x004865E4;

	__asm        jmp    near ptr 0x004865E9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    eax, [ecx+8];
	__asm        jbe    near ptr 0x0048676E;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00486704;

	__asm        jmp    near ptr 0x0048661E;

	__asm        jmp    near ptr 0x00486623;

	__asm        jmp    near ptr 0x00486628;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0048664D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00486659;

	__asm        jmp    near ptr 0x00486659;

	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x00486659;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004866E1;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004866DC;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004866DC;

	__asm        jmp    near ptr 0x004866EA;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004866F9;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0048670B;

	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00486760;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00486760;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x0048674A;

	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048675B;

	__asm        jmp    near ptr 0x00486760;

	__asm        jmp    near ptr 0x00486765;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x0048677D;

	__asm        inc    dword ptr [ebp-0x3C];
	__asm        cmp    dword ptr [ebp-0x3C], 1;
	__asm        jae    near ptr 0x004867BA;

	__asm        jmp    near ptr 0x0048678C;

	__asm        jmp    near ptr 0x00486791;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        add    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    al, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004867B5;

	__asm        jmp    near ptr 0x0048677A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004867C8;
// LINE 533:
	__asm        jmp    near ptr 0x004867CD;
}

// FUNCTION: COPTER_D 0x004867d2
void  Directory::SplitDirectoryPath(const class basic_string<char>& sPath, class basic_string<char>& sFirstPart, class basic_string<char>& sLastPart) {
	uint32_t nDirectoryPathLength;
	uint32_t nPosition;

// LINE 548:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    nDirectoryPathLength, eax;
	__asm        jmp    near ptr 0x004867EC;
// LINE 549:
	__asm        cmp    nDirectoryPathLength, 0;
	__asm        ja     near ptr 0x004867FB;
// LINE 550:
	__asm        jmp    near ptr 0x00486DC6;
// LINE 553:
	__asm        jmp    near ptr 0x00486800;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, ds:[0x599B9C];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0048681C;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, sPath;
	__asm        call   basic_string<char>::rfind_str;
	__asm        mov    nPosition, eax;
	__asm        jmp    near ptr 0x00486841;
// LINE 554:
	__asm        cmp    nPosition, 0;
	__asm        jb     near ptr 0x00486B1F;

	__asm        jmp    near ptr 0x00486850;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    near ptr 0x00486B1F;
// LINE 555:
	__asm        jmp    near ptr 0x00486867;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x004868A9;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0048689A;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004868A9;

	__asm        jmp    near ptr 0x004868AE;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x004868D7;

	__asm        jmp    near ptr 0x004868C6;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004868DE;

	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004868E3;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0048696A;

	__asm        jmp    near ptr 0x004868FA;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0048696A;

	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0048694B;

	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0048694B;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x0048694B;

	__asm        jmp    near ptr 0x00486950;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFirstPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004869B0;

	__asm        jmp    near ptr 0x0048696F;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00486994;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004869A0;

	__asm        jmp    near ptr 0x004869A0;

	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x004869A0;

	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004869B5;
// LINE 556:
	__asm        jmp    near ptr 0x004869BA;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x004869FF;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004869F0;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004869FF;

	__asm        jmp    near ptr 0x00486A04;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jae    near ptr 0x00486A38;

	__asm        jmp    near ptr 0x00486A21;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00486A3F;

	__asm        mov    dword ptr [ebp-0x40], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00486A44;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00486ACB;

	__asm        jmp    near ptr 0x00486A5B;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00486ACB;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00486AAC;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00486AAC;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x00486AAC;

	__asm        jmp    near ptr 0x00486AB1;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00486B15;

	__asm        jmp    near ptr 0x00486AD0;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00486AF5;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00486B01;

	__asm        jmp    near ptr 0x00486B01;

	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00486B01;

	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, sLastPart;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00486B1A;
// LINE 557:
	__asm        jmp    near ptr 0x00486DC6;
// LINE 561:
	__asm        jmp    near ptr 0x00486B24;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, ds:[0x599BA0];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00486B40;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, sPath;
	__asm        call   basic_string<char>::rfind_str;
	__asm        mov    nPosition, eax;
	__asm        jmp    near ptr 0x00486B65;
// LINE 562:
	__asm        cmp    nPosition, 0;
	__asm        jb     near ptr 0x00486CB3;

	__asm        jmp    near ptr 0x00486B74;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    near ptr 0x00486CB3;
// LINE 563:
	__asm        jmp    near ptr 0x00486B8B;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00486BCD;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486BBE;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486BCD;

	__asm        jmp    near ptr 0x00486BD2;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x00486BFB;

	__asm        jmp    near ptr 0x00486BEA;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00486C02;

	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00486C07;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00486C50;

	__asm        jmp    near ptr 0x00486C1E;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00486C50;

	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFirstPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00486C96;

	__asm        jmp    near ptr 0x00486C55;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00486C7A;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00486C86;

	__asm        jmp    near ptr 0x00486C86;

	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x00486C86;

	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00486C9B;
// LINE 564:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, sPath;
	__asm        push   eax;
	__asm        mov    ecx, sLastPart;
	__asm        call   basic_string<char>::assign;
// LINE 565:
	__asm        jmp    near ptr 0x00486DC6;
// LINE 570:
	__asm        mov    eax, ds:[0x599B9C];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00486CC0;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00486CDE;
// LINE 571:
	__asm        mov    eax, sPath;
	__asm        cmp    sLastPart, eax;
	__asm        je     near ptr 0x00486DBC;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00486D3F;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00486D3F;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00486D29;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00486D3A;

	__asm        jmp    near ptr 0x00486D3F;

	__asm        jmp    near ptr 0x00486D44;

	__asm        jmp    near ptr 0x00486D49;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00486D73;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00486DBC;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00486DB2;

	__asm        jmp    near ptr 0x00486D8F;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, sPath;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00486DBC;

	__asm        mov    eax, sLastPart;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00486DC1;
// LINE 572:
	__asm        jmp    near ptr 0x00486DC6;
}



// Contribution: 1:00085dd0-00085e0b Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486dd0
// list<DirectoryEntry>::iterator::operator++



// Contribution: 1:00085e10-00085e41 Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486e10
// list<DirectoryEntry>::begin



// Contribution: 1:00085e50-000862ac Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486e50
// list<DirectoryEntry>::insert



// Contribution: 1:000862b0-000863e5 Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004872b0
// list<DirectoryEntry>::erase



// Contribution: 1:000863f0-0008682a Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004873f0
// list<basic_string<char>>::insert



// Contribution: 3:00002b8c-00002bb9 Module: 29, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599b8c
// SZ_DEFAULT_FILTER
// GLOBAL: COPTER_D 0x00599b90
// SZ_CURRENT_DIR_NAME
// GLOBAL: COPTER_D 0x00599b94
// SZ_PARENT_DIR_NAME
// GLOBAL: COPTER_D 0x00599b98
// SZ_ROOT_DIR_NAME
// GLOBAL: COPTER_D 0x00599b9c
// SZ_DIR_SEPARATOR_1
// GLOBAL: COPTER_D 0x00599ba0
// SZ_DIR_SEPARATOR_2
